
watch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002d98c  08000240  08000240  00001240  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000027d4  0802dbcc  0802dbcc  0002ebcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000001a6  080303a0  080303a0  000313a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000018  08030548  08030548  00031548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 00000c80  08030560  08030560  00031560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000010  080311e0  080311e0  000321e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM          00000008  080311f0  080311f0  000321f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .init_array   00000014  080311f8  080311f8  000321f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .fini_array   00000008  0803120c  0803120c  0003220c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .data         000000fc  20000000  08031214  00033000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 TouchGFX_Framebuffer 00045600  200000fc  08031310  000330fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 TouchGFX_ScratchbufferA 00000100  20045700  08076910  00078700  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 13 TouchGFX_ScratchbufferB 00000100  20045800  08076a10  00078800  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 14 .bss          00016ebc  20045900  08076b10  00078900  2**2
                  ALLOC
 15 ._user_heap_stack 00000a04  2005c7bc  08076b10  000797bc  2**0
                  ALLOC
 16 .ARM.attributes 00000036  00000000  00000000  00078900  2**0
                  CONTENTS, READONLY
 17 .debug_info   0009a31b  00000000  00000000  00078936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00011ad0  00000000  00000000  00112c51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003cf0  00000000  00000000  00124728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00002dc0  00000000  00000000  00128418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00042c52  00000000  00000000  0012b1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0004dbfb  00000000  00000000  0016de2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    0017a865  00000000  00000000  001bba25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      000000c2  00000000  00000000  0033628a  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00010b78  00000000  00000000  0033634c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 00000047  00000000  00000000  00346ec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000240 <__do_global_dtors_aux>:
 8000240:	b510      	push	{r4, lr}
 8000242:	4c05      	ldr	r4, [pc, #20]	@ (8000258 <__do_global_dtors_aux+0x18>)
 8000244:	7823      	ldrb	r3, [r4, #0]
 8000246:	b933      	cbnz	r3, 8000256 <__do_global_dtors_aux+0x16>
 8000248:	4b04      	ldr	r3, [pc, #16]	@ (800025c <__do_global_dtors_aux+0x1c>)
 800024a:	b113      	cbz	r3, 8000252 <__do_global_dtors_aux+0x12>
 800024c:	4804      	ldr	r0, [pc, #16]	@ (8000260 <__do_global_dtors_aux+0x20>)
 800024e:	f3af 8000 	nop.w
 8000252:	2301      	movs	r3, #1
 8000254:	7023      	strb	r3, [r4, #0]
 8000256:	bd10      	pop	{r4, pc}
 8000258:	20045900 	.word	0x20045900
 800025c:	00000000 	.word	0x00000000
 8000260:	0802dbb4 	.word	0x0802dbb4

08000264 <frame_dummy>:
 8000264:	b508      	push	{r3, lr}
 8000266:	4b03      	ldr	r3, [pc, #12]	@ (8000274 <frame_dummy+0x10>)
 8000268:	b11b      	cbz	r3, 8000272 <frame_dummy+0xe>
 800026a:	4903      	ldr	r1, [pc, #12]	@ (8000278 <frame_dummy+0x14>)
 800026c:	4803      	ldr	r0, [pc, #12]	@ (800027c <frame_dummy+0x18>)
 800026e:	f3af 8000 	nop.w
 8000272:	bd08      	pop	{r3, pc}
 8000274:	00000000 	.word	0x00000000
 8000278:	20045904 	.word	0x20045904
 800027c:	0802dbb4 	.word	0x0802dbb4

08000280 <__aeabi_ldivmod>:
 8000280:	b97b      	cbnz	r3, 80002a2 <__aeabi_ldivmod+0x22>
 8000282:	b972      	cbnz	r2, 80002a2 <__aeabi_ldivmod+0x22>
 8000284:	2900      	cmp	r1, #0
 8000286:	bfbe      	ittt	lt
 8000288:	2000      	movlt	r0, #0
 800028a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800028e:	e006      	blt.n	800029e <__aeabi_ldivmod+0x1e>
 8000290:	bf08      	it	eq
 8000292:	2800      	cmpeq	r0, #0
 8000294:	bf1c      	itt	ne
 8000296:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800029a:	f04f 30ff 	movne.w	r0, #4294967295
 800029e:	f000 b9fb 	b.w	8000698 <__aeabi_idiv0>
 80002a2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002aa:	2900      	cmp	r1, #0
 80002ac:	db09      	blt.n	80002c2 <__aeabi_ldivmod+0x42>
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	db1a      	blt.n	80002e8 <__aeabi_ldivmod+0x68>
 80002b2:	f000 f84d 	bl	8000350 <__udivmoddi4>
 80002b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002be:	b004      	add	sp, #16
 80002c0:	4770      	bx	lr
 80002c2:	4240      	negs	r0, r0
 80002c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	db1b      	blt.n	8000304 <__aeabi_ldivmod+0x84>
 80002cc:	f000 f840 	bl	8000350 <__udivmoddi4>
 80002d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d8:	b004      	add	sp, #16
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	4252      	negs	r2, r2
 80002e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e6:	4770      	bx	lr
 80002e8:	4252      	negs	r2, r2
 80002ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002ee:	f000 f82f 	bl	8000350 <__udivmoddi4>
 80002f2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fa:	b004      	add	sp, #16
 80002fc:	4240      	negs	r0, r0
 80002fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000302:	4770      	bx	lr
 8000304:	4252      	negs	r2, r2
 8000306:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030a:	f000 f821 	bl	8000350 <__udivmoddi4>
 800030e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000312:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000316:	b004      	add	sp, #16
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b9b0 	b.w	8000698 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000354:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000356:	4688      	mov	r8, r1
 8000358:	4604      	mov	r4, r0
 800035a:	468e      	mov	lr, r1
 800035c:	2b00      	cmp	r3, #0
 800035e:	d14a      	bne.n	80003f6 <__udivmoddi4+0xa6>
 8000360:	428a      	cmp	r2, r1
 8000362:	4617      	mov	r7, r2
 8000364:	d95f      	bls.n	8000426 <__udivmoddi4+0xd6>
 8000366:	fab2 f682 	clz	r6, r2
 800036a:	b14e      	cbz	r6, 8000380 <__udivmoddi4+0x30>
 800036c:	f1c6 0320 	rsb	r3, r6, #32
 8000370:	fa01 fe06 	lsl.w	lr, r1, r6
 8000374:	40b7      	lsls	r7, r6
 8000376:	40b4      	lsls	r4, r6
 8000378:	fa20 f303 	lsr.w	r3, r0, r3
 800037c:	ea43 0e0e 	orr.w	lr, r3, lr
 8000380:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000384:	fa1f fc87 	uxth.w	ip, r7
 8000388:	0c23      	lsrs	r3, r4, #16
 800038a:	fbbe f1f8 	udiv	r1, lr, r8
 800038e:	fb08 ee11 	mls	lr, r8, r1, lr
 8000392:	fb01 f20c 	mul.w	r2, r1, ip
 8000396:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800039a:	429a      	cmp	r2, r3
 800039c:	d907      	bls.n	80003ae <__udivmoddi4+0x5e>
 800039e:	18fb      	adds	r3, r7, r3
 80003a0:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a4:	d202      	bcs.n	80003ac <__udivmoddi4+0x5c>
 80003a6:	429a      	cmp	r2, r3
 80003a8:	f200 8154 	bhi.w	8000654 <__udivmoddi4+0x304>
 80003ac:	4601      	mov	r1, r0
 80003ae:	1a9b      	subs	r3, r3, r2
 80003b0:	b2a2      	uxth	r2, r4
 80003b2:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b6:	fb08 3310 	mls	r3, r8, r0, r3
 80003ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80003be:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80003c2:	4594      	cmp	ip, r2
 80003c4:	d90b      	bls.n	80003de <__udivmoddi4+0x8e>
 80003c6:	18ba      	adds	r2, r7, r2
 80003c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003cc:	bf2c      	ite	cs
 80003ce:	2401      	movcs	r4, #1
 80003d0:	2400      	movcc	r4, #0
 80003d2:	4594      	cmp	ip, r2
 80003d4:	d902      	bls.n	80003dc <__udivmoddi4+0x8c>
 80003d6:	2c00      	cmp	r4, #0
 80003d8:	f000 813f 	beq.w	800065a <__udivmoddi4+0x30a>
 80003dc:	4618      	mov	r0, r3
 80003de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003e2:	eba2 020c 	sub.w	r2, r2, ip
 80003e6:	2100      	movs	r1, #0
 80003e8:	b11d      	cbz	r5, 80003f2 <__udivmoddi4+0xa2>
 80003ea:	40f2      	lsrs	r2, r6
 80003ec:	2300      	movs	r3, #0
 80003ee:	e9c5 2300 	strd	r2, r3, [r5]
 80003f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d905      	bls.n	8000406 <__udivmoddi4+0xb6>
 80003fa:	b10d      	cbz	r5, 8000400 <__udivmoddi4+0xb0>
 80003fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	4608      	mov	r0, r1
 8000404:	e7f5      	b.n	80003f2 <__udivmoddi4+0xa2>
 8000406:	fab3 f183 	clz	r1, r3
 800040a:	2900      	cmp	r1, #0
 800040c:	d14e      	bne.n	80004ac <__udivmoddi4+0x15c>
 800040e:	4543      	cmp	r3, r8
 8000410:	f0c0 8112 	bcc.w	8000638 <__udivmoddi4+0x2e8>
 8000414:	4282      	cmp	r2, r0
 8000416:	f240 810f 	bls.w	8000638 <__udivmoddi4+0x2e8>
 800041a:	4608      	mov	r0, r1
 800041c:	2d00      	cmp	r5, #0
 800041e:	d0e8      	beq.n	80003f2 <__udivmoddi4+0xa2>
 8000420:	e9c5 4e00 	strd	r4, lr, [r5]
 8000424:	e7e5      	b.n	80003f2 <__udivmoddi4+0xa2>
 8000426:	2a00      	cmp	r2, #0
 8000428:	f000 80ac 	beq.w	8000584 <__udivmoddi4+0x234>
 800042c:	fab2 f682 	clz	r6, r2
 8000430:	2e00      	cmp	r6, #0
 8000432:	f040 80bb 	bne.w	80005ac <__udivmoddi4+0x25c>
 8000436:	1a8b      	subs	r3, r1, r2
 8000438:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800043c:	b2bc      	uxth	r4, r7
 800043e:	2101      	movs	r1, #1
 8000440:	0c02      	lsrs	r2, r0, #16
 8000442:	b280      	uxth	r0, r0
 8000444:	fbb3 fcfe 	udiv	ip, r3, lr
 8000448:	fb0e 331c 	mls	r3, lr, ip, r3
 800044c:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000450:	fb04 f20c 	mul.w	r2, r4, ip
 8000454:	429a      	cmp	r2, r3
 8000456:	d90e      	bls.n	8000476 <__udivmoddi4+0x126>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f10c 38ff 	add.w	r8, ip, #4294967295
 800045e:	bf2c      	ite	cs
 8000460:	f04f 0901 	movcs.w	r9, #1
 8000464:	f04f 0900 	movcc.w	r9, #0
 8000468:	429a      	cmp	r2, r3
 800046a:	d903      	bls.n	8000474 <__udivmoddi4+0x124>
 800046c:	f1b9 0f00 	cmp.w	r9, #0
 8000470:	f000 80ec 	beq.w	800064c <__udivmoddi4+0x2fc>
 8000474:	46c4      	mov	ip, r8
 8000476:	1a9b      	subs	r3, r3, r2
 8000478:	fbb3 f8fe 	udiv	r8, r3, lr
 800047c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000480:	fb04 f408 	mul.w	r4, r4, r8
 8000484:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000488:	4294      	cmp	r4, r2
 800048a:	d90b      	bls.n	80004a4 <__udivmoddi4+0x154>
 800048c:	18ba      	adds	r2, r7, r2
 800048e:	f108 33ff 	add.w	r3, r8, #4294967295
 8000492:	bf2c      	ite	cs
 8000494:	2001      	movcs	r0, #1
 8000496:	2000      	movcc	r0, #0
 8000498:	4294      	cmp	r4, r2
 800049a:	d902      	bls.n	80004a2 <__udivmoddi4+0x152>
 800049c:	2800      	cmp	r0, #0
 800049e:	f000 80d1 	beq.w	8000644 <__udivmoddi4+0x2f4>
 80004a2:	4698      	mov	r8, r3
 80004a4:	1b12      	subs	r2, r2, r4
 80004a6:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 80004aa:	e79d      	b.n	80003e8 <__udivmoddi4+0x98>
 80004ac:	f1c1 0620 	rsb	r6, r1, #32
 80004b0:	408b      	lsls	r3, r1
 80004b2:	fa08 f401 	lsl.w	r4, r8, r1
 80004b6:	fa00 f901 	lsl.w	r9, r0, r1
 80004ba:	fa22 f706 	lsr.w	r7, r2, r6
 80004be:	fa28 f806 	lsr.w	r8, r8, r6
 80004c2:	408a      	lsls	r2, r1
 80004c4:	431f      	orrs	r7, r3
 80004c6:	fa20 f306 	lsr.w	r3, r0, r6
 80004ca:	0c38      	lsrs	r0, r7, #16
 80004cc:	4323      	orrs	r3, r4
 80004ce:	fa1f fc87 	uxth.w	ip, r7
 80004d2:	0c1c      	lsrs	r4, r3, #16
 80004d4:	fbb8 fef0 	udiv	lr, r8, r0
 80004d8:	fb00 881e 	mls	r8, r0, lr, r8
 80004dc:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 80004e0:	fb0e f80c 	mul.w	r8, lr, ip
 80004e4:	45a0      	cmp	r8, r4
 80004e6:	d90e      	bls.n	8000506 <__udivmoddi4+0x1b6>
 80004e8:	193c      	adds	r4, r7, r4
 80004ea:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004ee:	bf2c      	ite	cs
 80004f0:	f04f 0b01 	movcs.w	fp, #1
 80004f4:	f04f 0b00 	movcc.w	fp, #0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d903      	bls.n	8000504 <__udivmoddi4+0x1b4>
 80004fc:	f1bb 0f00 	cmp.w	fp, #0
 8000500:	f000 80b8 	beq.w	8000674 <__udivmoddi4+0x324>
 8000504:	46d6      	mov	lr, sl
 8000506:	eba4 0408 	sub.w	r4, r4, r8
 800050a:	fa1f f883 	uxth.w	r8, r3
 800050e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000512:	fb00 4413 	mls	r4, r0, r3, r4
 8000516:	fb03 fc0c 	mul.w	ip, r3, ip
 800051a:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 800051e:	45a4      	cmp	ip, r4
 8000520:	d90e      	bls.n	8000540 <__udivmoddi4+0x1f0>
 8000522:	193c      	adds	r4, r7, r4
 8000524:	f103 30ff 	add.w	r0, r3, #4294967295
 8000528:	bf2c      	ite	cs
 800052a:	f04f 0801 	movcs.w	r8, #1
 800052e:	f04f 0800 	movcc.w	r8, #0
 8000532:	45a4      	cmp	ip, r4
 8000534:	d903      	bls.n	800053e <__udivmoddi4+0x1ee>
 8000536:	f1b8 0f00 	cmp.w	r8, #0
 800053a:	f000 809f 	beq.w	800067c <__udivmoddi4+0x32c>
 800053e:	4603      	mov	r3, r0
 8000540:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000544:	eba4 040c 	sub.w	r4, r4, ip
 8000548:	fba0 ec02 	umull	lr, ip, r0, r2
 800054c:	4564      	cmp	r4, ip
 800054e:	4673      	mov	r3, lr
 8000550:	46e0      	mov	r8, ip
 8000552:	d302      	bcc.n	800055a <__udivmoddi4+0x20a>
 8000554:	d107      	bne.n	8000566 <__udivmoddi4+0x216>
 8000556:	45f1      	cmp	r9, lr
 8000558:	d205      	bcs.n	8000566 <__udivmoddi4+0x216>
 800055a:	ebbe 0302 	subs.w	r3, lr, r2
 800055e:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000562:	3801      	subs	r0, #1
 8000564:	46e0      	mov	r8, ip
 8000566:	b15d      	cbz	r5, 8000580 <__udivmoddi4+0x230>
 8000568:	ebb9 0203 	subs.w	r2, r9, r3
 800056c:	eb64 0408 	sbc.w	r4, r4, r8
 8000570:	fa04 f606 	lsl.w	r6, r4, r6
 8000574:	fa22 f301 	lsr.w	r3, r2, r1
 8000578:	40cc      	lsrs	r4, r1
 800057a:	431e      	orrs	r6, r3
 800057c:	e9c5 6400 	strd	r6, r4, [r5]
 8000580:	2100      	movs	r1, #0
 8000582:	e736      	b.n	80003f2 <__udivmoddi4+0xa2>
 8000584:	fbb1 fcf2 	udiv	ip, r1, r2
 8000588:	0c01      	lsrs	r1, r0, #16
 800058a:	4614      	mov	r4, r2
 800058c:	b280      	uxth	r0, r0
 800058e:	4696      	mov	lr, r2
 8000590:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000594:	2620      	movs	r6, #32
 8000596:	4690      	mov	r8, r2
 8000598:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 800059c:	4610      	mov	r0, r2
 800059e:	fbb1 f1f2 	udiv	r1, r1, r2
 80005a2:	eba3 0308 	sub.w	r3, r3, r8
 80005a6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005aa:	e74b      	b.n	8000444 <__udivmoddi4+0xf4>
 80005ac:	40b7      	lsls	r7, r6
 80005ae:	f1c6 0320 	rsb	r3, r6, #32
 80005b2:	fa01 f206 	lsl.w	r2, r1, r6
 80005b6:	fa21 f803 	lsr.w	r8, r1, r3
 80005ba:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005be:	fa20 f303 	lsr.w	r3, r0, r3
 80005c2:	b2bc      	uxth	r4, r7
 80005c4:	40b0      	lsls	r0, r6
 80005c6:	4313      	orrs	r3, r2
 80005c8:	0c02      	lsrs	r2, r0, #16
 80005ca:	0c19      	lsrs	r1, r3, #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	fbb8 f9fe 	udiv	r9, r8, lr
 80005d2:	fb0e 8819 	mls	r8, lr, r9, r8
 80005d6:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80005da:	fb09 f804 	mul.w	r8, r9, r4
 80005de:	4588      	cmp	r8, r1
 80005e0:	d951      	bls.n	8000686 <__udivmoddi4+0x336>
 80005e2:	1879      	adds	r1, r7, r1
 80005e4:	f109 3cff 	add.w	ip, r9, #4294967295
 80005e8:	bf2c      	ite	cs
 80005ea:	f04f 0a01 	movcs.w	sl, #1
 80005ee:	f04f 0a00 	movcc.w	sl, #0
 80005f2:	4588      	cmp	r8, r1
 80005f4:	d902      	bls.n	80005fc <__udivmoddi4+0x2ac>
 80005f6:	f1ba 0f00 	cmp.w	sl, #0
 80005fa:	d031      	beq.n	8000660 <__udivmoddi4+0x310>
 80005fc:	eba1 0108 	sub.w	r1, r1, r8
 8000600:	fbb1 f9fe 	udiv	r9, r1, lr
 8000604:	fb09 f804 	mul.w	r8, r9, r4
 8000608:	fb0e 1119 	mls	r1, lr, r9, r1
 800060c:	b29b      	uxth	r3, r3
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	4543      	cmp	r3, r8
 8000614:	d235      	bcs.n	8000682 <__udivmoddi4+0x332>
 8000616:	18fb      	adds	r3, r7, r3
 8000618:	f109 31ff 	add.w	r1, r9, #4294967295
 800061c:	bf2c      	ite	cs
 800061e:	f04f 0a01 	movcs.w	sl, #1
 8000622:	f04f 0a00 	movcc.w	sl, #0
 8000626:	4543      	cmp	r3, r8
 8000628:	d2bb      	bcs.n	80005a2 <__udivmoddi4+0x252>
 800062a:	f1ba 0f00 	cmp.w	sl, #0
 800062e:	d1b8      	bne.n	80005a2 <__udivmoddi4+0x252>
 8000630:	f1a9 0102 	sub.w	r1, r9, #2
 8000634:	443b      	add	r3, r7
 8000636:	e7b4      	b.n	80005a2 <__udivmoddi4+0x252>
 8000638:	1a84      	subs	r4, r0, r2
 800063a:	eb68 0203 	sbc.w	r2, r8, r3
 800063e:	2001      	movs	r0, #1
 8000640:	4696      	mov	lr, r2
 8000642:	e6eb      	b.n	800041c <__udivmoddi4+0xcc>
 8000644:	443a      	add	r2, r7
 8000646:	f1a8 0802 	sub.w	r8, r8, #2
 800064a:	e72b      	b.n	80004a4 <__udivmoddi4+0x154>
 800064c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000650:	443b      	add	r3, r7
 8000652:	e710      	b.n	8000476 <__udivmoddi4+0x126>
 8000654:	3902      	subs	r1, #2
 8000656:	443b      	add	r3, r7
 8000658:	e6a9      	b.n	80003ae <__udivmoddi4+0x5e>
 800065a:	443a      	add	r2, r7
 800065c:	3802      	subs	r0, #2
 800065e:	e6be      	b.n	80003de <__udivmoddi4+0x8e>
 8000660:	eba7 0808 	sub.w	r8, r7, r8
 8000664:	f1a9 0c02 	sub.w	ip, r9, #2
 8000668:	4441      	add	r1, r8
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	e7c9      	b.n	8000608 <__udivmoddi4+0x2b8>
 8000674:	f1ae 0e02 	sub.w	lr, lr, #2
 8000678:	443c      	add	r4, r7
 800067a:	e744      	b.n	8000506 <__udivmoddi4+0x1b6>
 800067c:	3b02      	subs	r3, #2
 800067e:	443c      	add	r4, r7
 8000680:	e75e      	b.n	8000540 <__udivmoddi4+0x1f0>
 8000682:	4649      	mov	r1, r9
 8000684:	e78d      	b.n	80005a2 <__udivmoddi4+0x252>
 8000686:	eba1 0108 	sub.w	r1, r1, r8
 800068a:	46cc      	mov	ip, r9
 800068c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000690:	fb09 f804 	mul.w	r8, r9, r4
 8000694:	e7b8      	b.n	8000608 <__udivmoddi4+0x2b8>
 8000696:	bf00      	nop

08000698 <__aeabi_idiv0>:
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <CST816D_ReadReg>:
// 外部声明
extern I2C_HandleTypeDef hi2c3;

// 读取CST816D寄存器
HAL_StatusTypeDef CST816D_ReadReg(uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af04      	add	r7, sp, #16
 80006a2:	4603      	mov	r3, r0
 80006a4:	6039      	str	r1, [r7, #0]
 80006a6:	71fb      	strb	r3, [r7, #7]
 80006a8:	4613      	mov	r3, r2
 80006aa:	80bb      	strh	r3, [r7, #4]
    return HAL_I2C_Mem_Read(&hi2c3, (CST816D_ADDR << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, 100);
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	b29a      	uxth	r2, r3
 80006b0:	2364      	movs	r3, #100	@ 0x64
 80006b2:	9302      	str	r3, [sp, #8]
 80006b4:	88bb      	ldrh	r3, [r7, #4]
 80006b6:	9301      	str	r3, [sp, #4]
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	2301      	movs	r3, #1
 80006be:	212a      	movs	r1, #42	@ 0x2a
 80006c0:	4803      	ldr	r0, [pc, #12]	@ (80006d0 <CST816D_ReadReg+0x34>)
 80006c2:	f003 ff2f 	bl	8004524 <HAL_I2C_Mem_Read>
 80006c6:	4603      	mov	r3, r0
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20045aa8 	.word	0x20045aa8

080006d4 <CST816D_WriteReg>:

// 写入CST816D寄存器
HAL_StatusTypeDef CST816D_WriteReg(uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b086      	sub	sp, #24
 80006d8:	af04      	add	r7, sp, #16
 80006da:	4603      	mov	r3, r0
 80006dc:	6039      	str	r1, [r7, #0]
 80006de:	71fb      	strb	r3, [r7, #7]
 80006e0:	4613      	mov	r3, r2
 80006e2:	80bb      	strh	r3, [r7, #4]
    return HAL_I2C_Mem_Write(&hi2c3, (CST816D_ADDR << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, 100);
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	b29a      	uxth	r2, r3
 80006e8:	2364      	movs	r3, #100	@ 0x64
 80006ea:	9302      	str	r3, [sp, #8]
 80006ec:	88bb      	ldrh	r3, [r7, #4]
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	9300      	str	r3, [sp, #0]
 80006f4:	2301      	movs	r3, #1
 80006f6:	212a      	movs	r1, #42	@ 0x2a
 80006f8:	4803      	ldr	r0, [pc, #12]	@ (8000708 <CST816D_WriteReg+0x34>)
 80006fa:	f003 fdff 	bl	80042fc <HAL_I2C_Mem_Write>
 80006fe:	4603      	mov	r3, r0
}
 8000700:	4618      	mov	r0, r3
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20045aa8 	.word	0x20045aa8

0800070c <CST816D_Init>:

// 复位并初始化CST816D
uint8_t CST816D_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
    uint8_t temp_data;

    // 硬件复位CST816D
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET); // RST引脚拉低
 8000712:	2200      	movs	r2, #0
 8000714:	2120      	movs	r1, #32
 8000716:	482b      	ldr	r0, [pc, #172]	@ (80007c4 <CST816D_Init+0xb8>)
 8000718:	f003 fd3c 	bl	8004194 <HAL_GPIO_WritePin>
    HAL_Delay(20);                                         // 延时20ms（增加复位时间）
 800071c:	2014      	movs	r0, #20
 800071e:	f001 fc13 	bl	8001f48 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);   // RST引脚拉高
 8000722:	2201      	movs	r2, #1
 8000724:	2120      	movs	r1, #32
 8000726:	4827      	ldr	r0, [pc, #156]	@ (80007c4 <CST816D_Init+0xb8>)
 8000728:	f003 fd34 	bl	8004194 <HAL_GPIO_WritePin>
    HAL_Delay(100);                                       // 延时100ms等待芯片稳定启动
 800072c:	2064      	movs	r0, #100	@ 0x64
 800072e:	f001 fc0b 	bl	8001f48 <HAL_Delay>

    uint8_t chip_id = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	71bb      	strb	r3, [r7, #6]
    if (CST816D_ReadReg(0xA7, &chip_id, 1) == HAL_OK)
 8000736:	1dbb      	adds	r3, r7, #6
 8000738:	2201      	movs	r2, #1
 800073a:	4619      	mov	r1, r3
 800073c:	20a7      	movs	r0, #167	@ 0xa7
 800073e:	f7ff ffad 	bl	800069c <CST816D_ReadReg>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d105      	bne.n	8000754 <CST816D_Init+0x48>
    {
        printf("CST816D ChipID = 0x%02X\r\n", chip_id);
 8000748:	79bb      	ldrb	r3, [r7, #6]
 800074a:	4619      	mov	r1, r3
 800074c:	481e      	ldr	r0, [pc, #120]	@ (80007c8 <CST816D_Init+0xbc>)
 800074e:	f02c fb55 	bl	802cdfc <iprintf>
 8000752:	e002      	b.n	800075a <CST816D_Init+0x4e>
    }
    else
    {
        printf("Failed to read CST816D ChipID!\r\n");
 8000754:	481d      	ldr	r0, [pc, #116]	@ (80007cc <CST816D_Init+0xc0>)
 8000756:	f02c fbb9 	bl	802cecc <puts>
    }

    // 关闭自动休眠，确保持续工作
    temp_data = 0x01; // 禁用自动休眠
 800075a:	2301      	movs	r3, #1
 800075c:	71fb      	strb	r3, [r7, #7]
    CST816D_WriteReg(CST816D_REG_DIS_AUTO_SLEEP, &temp_data, 1);
 800075e:	1dfb      	adds	r3, r7, #7
 8000760:	2201      	movs	r2, #1
 8000762:	4619      	mov	r1, r3
 8000764:	20fe      	movs	r0, #254	@ 0xfe
 8000766:	f7ff ffb5 	bl	80006d4 <CST816D_WriteReg>

    // 重新设置扫描周期 - 适合双击检测的更快扫描
    temp_data = 0; // 扫描周期设为最小值(0)，最高速
 800076a:	2300      	movs	r3, #0
 800076c:	71fb      	strb	r3, [r7, #7]
    CST816D_WriteReg(CST816D_REG_NOR_SCAN, &temp_data, 1);
 800076e:	1dfb      	adds	r3, r7, #7
 8000770:	2201      	movs	r2, #1
 8000772:	4619      	mov	r1, r3
 8000774:	20ee      	movs	r0, #238	@ 0xee
 8000776:	f7ff ffad 	bl	80006d4 <CST816D_WriteReg>

    // 设置中断脉冲宽度
    temp_data = 5; // 更小的脉冲宽度，提高响应速度
 800077a:	2305      	movs	r3, #5
 800077c:	71fb      	strb	r3, [r7, #7]
    CST816D_WriteReg(CST816D_REG_IRQ_PULSE, &temp_data, 1);
 800077e:	1dfb      	adds	r3, r7, #7
 8000780:	2201      	movs	r2, #1
 8000782:	4619      	mov	r1, r3
 8000784:	20ed      	movs	r0, #237	@ 0xed
 8000786:	f7ff ffa5 	bl	80006d4 <CST816D_WriteReg>

    // 配置中断控制 - 启用触摸和所有变化检测
    temp_data = EnTouch | EnChange | EnMotion;
 800078a:	2370      	movs	r3, #112	@ 0x70
 800078c:	71fb      	strb	r3, [r7, #7]
    CST816D_WriteReg(CST816D_REG_IRQ_CTL, &temp_data, 1);
 800078e:	1dfb      	adds	r3, r7, #7
 8000790:	2201      	movs	r2, #1
 8000792:	4619      	mov	r1, r3
 8000794:	20fa      	movs	r0, #250	@ 0xfa
 8000796:	f7ff ff9d 	bl	80006d4 <CST816D_WriteReg>
    // 设置长按时间(500ms)
//    temp_data = 10;
//    CST816D_WriteReg(CST816D_REG_LONG_PRESS, &temp_data, 1);

    // 设置动作识别掩码 - 确保双击能被检测
    temp_data = 0x07; // 启用滑动和双击 (0x01+0x02+0x03)
 800079a:	2307      	movs	r3, #7
 800079c:	71fb      	strb	r3, [r7, #7]
    CST816D_WriteReg(CST816D_REG_MOTION_MASK, &temp_data, 1);
 800079e:	1dfb      	adds	r3, r7, #7
 80007a0:	2201      	movs	r2, #1
 80007a2:	4619      	mov	r1, r3
 80007a4:	20ec      	movs	r0, #236	@ 0xec
 80007a6:	f7ff ff95 	bl	80006d4 <CST816D_WriteReg>

    // 配置动作角度 - 更宽松的滑动手势检测
    temp_data = 60;
 80007aa:	233c      	movs	r3, #60	@ 0x3c
 80007ac:	71fb      	strb	r3, [r7, #7]
    CST816D_WriteReg(CST816D_REG_MOTION_ANGLE, &temp_data, 1);
 80007ae:	1dfb      	adds	r3, r7, #7
 80007b0:	2201      	movs	r2, #1
 80007b2:	4619      	mov	r1, r3
 80007b4:	20ef      	movs	r0, #239	@ 0xef
 80007b6:	f7ff ff8d 	bl	80006d4 <CST816D_WriteReg>

    return 1; // 初始化成功
 80007ba:	2301      	movs	r3, #1
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	42020800 	.word	0x42020800
 80007c8:	0802dbcc 	.word	0x0802dbcc
 80007cc:	0802dbe8 	.word	0x0802dbe8

080007d0 <CST816D_GetTouchData>:

// 获取触摸点数据 - 优化速度版本
HAL_StatusTypeDef CST816D_GetTouchData(CST816D_TouchData *touch_data)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
    uint8_t data[7] = {0};
 80007d8:	f107 0308 	add.w	r3, r7, #8
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	f8c3 2003 	str.w	r2, [r3, #3]

    // 设置初始值
    touch_data->gesture = GESTURE_NONE;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2200      	movs	r2, #0
 80007e8:	701a      	strb	r2, [r3, #0]
    touch_data->finger_num = 0;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2200      	movs	r2, #0
 80007ee:	705a      	strb	r2, [r3, #1]
    touch_data->x = 0;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2200      	movs	r2, #0
 80007f4:	805a      	strh	r2, [r3, #2]
    touch_data->y = 0;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2200      	movs	r2, #0
 80007fa:	809a      	strh	r2, [r3, #4]

    // 直接读取所需数据，减少一个字节的传输
    if (CST816D_ReadReg(CST816D_REG_GESTURE, data, 7) != HAL_OK)
 80007fc:	f107 0308 	add.w	r3, r7, #8
 8000800:	2207      	movs	r2, #7
 8000802:	4619      	mov	r1, r3
 8000804:	2001      	movs	r0, #1
 8000806:	f7ff ff49 	bl	800069c <CST816D_ReadReg>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <CST816D_GetTouchData+0x44>
    {
        return HAL_ERROR;
 8000810:	2301      	movs	r3, #1
 8000812:	e022      	b.n	800085a <CST816D_GetTouchData+0x8a>
    }

    // 解析数据 - 简化处理逻辑
    touch_data->gesture = data[0];
 8000814:	7a3a      	ldrb	r2, [r7, #8]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	701a      	strb	r2, [r3, #0]
    touch_data->finger_num = data[1];
 800081a:	7a7a      	ldrb	r2, [r7, #9]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	705a      	strb	r2, [r3, #1]

    // X坐标位于寄存器2-3
    touch_data->x = ((uint16_t)(data[2] & 0x0F) << 8) | data[3];
 8000820:	7abb      	ldrb	r3, [r7, #10]
 8000822:	b21b      	sxth	r3, r3
 8000824:	021b      	lsls	r3, r3, #8
 8000826:	b21b      	sxth	r3, r3
 8000828:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800082c:	b21a      	sxth	r2, r3
 800082e:	7afb      	ldrb	r3, [r7, #11]
 8000830:	b21b      	sxth	r3, r3
 8000832:	4313      	orrs	r3, r2
 8000834:	b21b      	sxth	r3, r3
 8000836:	b29a      	uxth	r2, r3
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	805a      	strh	r2, [r3, #2]
    // Y坐标位于寄存器4-5
    touch_data->y = ((uint16_t)(data[4] & 0x0F) << 8) | data[5];
 800083c:	7b3b      	ldrb	r3, [r7, #12]
 800083e:	b21b      	sxth	r3, r3
 8000840:	021b      	lsls	r3, r3, #8
 8000842:	b21b      	sxth	r3, r3
 8000844:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8000848:	b21a      	sxth	r2, r3
 800084a:	7b7b      	ldrb	r3, [r7, #13]
 800084c:	b21b      	sxth	r3, r3
 800084e:	4313      	orrs	r3, r2
 8000850:	b21b      	sxth	r3, r3
 8000852:	b29a      	uxth	r2, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	809a      	strh	r2, [r3, #4]

    return HAL_OK;
 8000858:	2300      	movs	r3, #0
}
 800085a:	4618      	mov	r0, r3
 800085c:	3710      	adds	r7, #16
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
	...

08000864 <CST816D_IsTouched>:

// 检测触摸(通过INT引脚) - 优化速度版本
uint8_t CST816D_IsTouched(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
    // 直接返回INT引脚状态，移除2ms延时
    return (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == GPIO_PIN_RESET);
 8000868:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800086c:	4805      	ldr	r0, [pc, #20]	@ (8000884 <CST816D_IsTouched+0x20>)
 800086e:	f003 fc79 	bl	8004164 <HAL_GPIO_ReadPin>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	bf0c      	ite	eq
 8000878:	2301      	moveq	r3, #1
 800087a:	2300      	movne	r3, #0
 800087c:	b2db      	uxtb	r3, r3
}
 800087e:	4618      	mov	r0, r3
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	42020400 	.word	0x42020400

08000888 <CST816D_SetMotionMask>:
    return CST816D_WriteReg(CST816D_REG_IRQ_PULSE, &width, 1);
}

// 设置动作识别掩码 (使能/禁用特定手势)
HAL_StatusTypeDef CST816D_SetMotionMask(uint8_t mask)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	71fb      	strb	r3, [r7, #7]
    return CST816D_WriteReg(CST816D_REG_MOTION_MASK, &mask, 1);
 8000892:	1dfb      	adds	r3, r7, #7
 8000894:	2201      	movs	r2, #1
 8000896:	4619      	mov	r1, r3
 8000898:	20ec      	movs	r0, #236	@ 0xec
 800089a:	f7ff ff1b 	bl	80006d4 <CST816D_WriteReg>
 800089e:	4603      	mov	r3, r0
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <CST816D_SetIrqCtl>:
    return CST816D_SetMotionMask(motion_mask);
}

// 设置中断控制寄存器
HAL_StatusTypeDef CST816D_SetIrqCtl(uint8_t irq_ctl)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	71fb      	strb	r3, [r7, #7]
    return CST816D_WriteReg(CST816D_REG_IRQ_CTL, &irq_ctl, 1);
 80008b2:	1dfb      	adds	r3, r7, #7
 80008b4:	2201      	movs	r2, #1
 80008b6:	4619      	mov	r1, r3
 80008b8:	20fa      	movs	r0, #250	@ 0xfa
 80008ba:	f7ff ff0b 	bl	80006d4 <CST816D_WriteReg>
 80008be:	4603      	mov	r3, r0
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <GPDMA_Callback>:

/**
 * @brief Register DMA callbacks
 */
void GPDMA_Callback(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
    HAL_DMA_RegisterCallback(&handle_GPDMA1_Channel13, HAL_DMA_XFER_CPLT_CB_ID, DMA_TxCpltCallback);
 80008cc:	4a05      	ldr	r2, [pc, #20]	@ (80008e4 <GPDMA_Callback+0x1c>)
 80008ce:	2100      	movs	r1, #0
 80008d0:	4805      	ldr	r0, [pc, #20]	@ (80008e8 <GPDMA_Callback+0x20>)
 80008d2:	f001 ffed 	bl	80028b0 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&handle_GPDMA1_Channel13, HAL_DMA_XFER_ERROR_CB_ID, DMA_TxErrorCallback);
 80008d6:	4a05      	ldr	r2, [pc, #20]	@ (80008ec <GPDMA_Callback+0x24>)
 80008d8:	2102      	movs	r1, #2
 80008da:	4803      	ldr	r0, [pc, #12]	@ (80008e8 <GPDMA_Callback+0x20>)
 80008dc:	f001 ffe8 	bl	80028b0 <HAL_DMA_RegisterCallback>
}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	080008f1 	.word	0x080008f1
 80008e8:	20045a30 	.word	0x20045a30
 80008ec:	08000921 	.word	0x08000921

080008f0 <DMA_TxCpltCallback>:
/**
 * @brief DMA transfer complete callback
 * @param hdma: DMA handle
 */
static void DMA_TxCpltCallback(DMA_HandleTypeDef *hdma)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
    if (hdma == &handle_GPDMA1_Channel13)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	4a07      	ldr	r2, [pc, #28]	@ (8000918 <DMA_TxCpltCallback+0x28>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d105      	bne.n	800090c <DMA_TxCpltCallback+0x1c>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000900:	f3bf 8f4f 	dsb	sy
}
 8000904:	bf00      	nop
    {
        __DSB(); // 添加内存屏障
        displayRefreshing = false;
 8000906:	4b05      	ldr	r3, [pc, #20]	@ (800091c <DMA_TxCpltCallback+0x2c>)
 8000908:	2200      	movs	r2, #0
 800090a:	701a      	strb	r2, [r3, #0]
    }
}
 800090c:	bf00      	nop
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	20045a30 	.word	0x20045a30
 800091c:	2004591c 	.word	0x2004591c

08000920 <DMA_TxErrorCallback>:
/**
 * @brief DMA transfer error callback
 * @param hdma: DMA handle
 */
static void DMA_TxErrorCallback(DMA_HandleTypeDef *hdma)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
    displayRefreshing = false;
 8000928:	4b04      	ldr	r3, [pc, #16]	@ (800093c <DMA_TxErrorCallback+0x1c>)
 800092a:	2200      	movs	r2, #0
 800092c:	701a      	strb	r2, [r3, #0]
}
 800092e:	bf00      	nop
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	2004591c 	.word	0x2004591c

08000940 <GPDMA_Queue_Config>:

/**
 * @brief Configure DMA Linked-list Queue
 */
static HAL_StatusTypeDef GPDMA_Queue_Config(DMA_QListTypeDef *Queue, uint8_t node_cnt, uint8_t *src, uint8_t *dst, uint32_t data_size)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b0a0      	sub	sp, #128	@ 0x80
 8000944:	af00      	add	r7, sp, #0
 8000946:	60f8      	str	r0, [r7, #12]
 8000948:	607a      	str	r2, [r7, #4]
 800094a:	603b      	str	r3, [r7, #0]
 800094c:	460b      	mov	r3, r1
 800094e:	72fb      	strb	r3, [r7, #11]
    static DMA_NodeTypeDef Nodes[(((WIDTH * HEIGHT * 2) / ((64 * 1024) - 2)) + 1)];
    HAL_StatusTypeDef ret = HAL_OK;
 8000950:	2300      	movs	r3, #0
 8000952:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    /* DMA node configuration declaration */
    DMA_NodeConfTypeDef pNodeConfig;
    uint8_t i;

    /* Set node configuration ################################################*/
    pNodeConfig.NodeType = DMA_GPDMA_2D_NODE;
 8000956:	2322      	movs	r3, #34	@ 0x22
 8000958:	613b      	str	r3, [r7, #16]
    pNodeConfig.Init.Mode = DMA_NORMAL;
 800095a:	2300      	movs	r3, #0
 800095c:	647b      	str	r3, [r7, #68]	@ 0x44
    pNodeConfig.Init.Request = DMA_REQUEST_SW;
 800095e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000962:	617b      	str	r3, [r7, #20]
    pNodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8000964:	2300      	movs	r3, #0
 8000966:	61bb      	str	r3, [r7, #24]
    pNodeConfig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000968:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800096c:	61fb      	str	r3, [r7, #28]
    pNodeConfig.Init.SrcInc = DMA_SINC_INCREMENTED;
 800096e:	2308      	movs	r3, #8
 8000970:	623b      	str	r3, [r7, #32]
    pNodeConfig.Init.DestInc = DMA_DINC_FIXED;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	@ 0x24
    pNodeConfig.Init.SrcDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8000976:	2300      	movs	r3, #0
 8000978:	62bb      	str	r3, [r7, #40]	@ 0x28
    pNodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 800097a:	2300      	movs	r3, #0
 800097c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pNodeConfig.Init.SrcBurstLength = 1;
 800097e:	2301      	movs	r3, #1
 8000980:	637b      	str	r3, [r7, #52]	@ 0x34
    pNodeConfig.Init.DestBurstLength = 1;
 8000982:	2301      	movs	r3, #1
 8000984:	63bb      	str	r3, [r7, #56]	@ 0x38
    pNodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0 | DMA_DEST_ALLOCATED_PORT0;
 8000986:	2300      	movs	r3, #0
 8000988:	63fb      	str	r3, [r7, #60]	@ 0x3c
    pNodeConfig.Init.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 800098a:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 800098e:	643b      	str	r3, [r7, #64]	@ 0x40
    pNodeConfig.RepeatBlockConfig.RepeatCount = 1;
 8000990:	2301      	movs	r3, #1
 8000992:	65fb      	str	r3, [r7, #92]	@ 0x5c
    pNodeConfig.RepeatBlockConfig.SrcAddrOffset = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	663b      	str	r3, [r7, #96]	@ 0x60
    pNodeConfig.RepeatBlockConfig.DestAddrOffset = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	667b      	str	r3, [r7, #100]	@ 0x64
    pNodeConfig.RepeatBlockConfig.BlkSrcAddrOffset = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	66bb      	str	r3, [r7, #104]	@ 0x68
    pNodeConfig.RepeatBlockConfig.BlkDestAddrOffset = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    pNodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 80009a4:	2300      	movs	r3, #0
 80009a6:	657b      	str	r3, [r7, #84]	@ 0x54
    pNodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80009a8:	2300      	movs	r3, #0
 80009aa:	64bb      	str	r3, [r7, #72]	@ 0x48
    pNodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80009ac:	2300      	movs	r3, #0
 80009ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
    pNodeConfig.SrcAddress = (uint32_t)src;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	673b      	str	r3, [r7, #112]	@ 0x70
    pNodeConfig.DstAddress = (uint32_t)dst;
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	677b      	str	r3, [r7, #116]	@ 0x74
    if (node_cnt > 1)
 80009b8:	7afb      	ldrb	r3, [r7, #11]
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d903      	bls.n	80009c6 <GPDMA_Queue_Config+0x86>
    {
        pNodeConfig.DataSize = ((64 * 1024) - 2);
 80009be:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 80009c2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80009c4:	e002      	b.n	80009cc <GPDMA_Queue_Config+0x8c>
    }
    else
    {
        pNodeConfig.DataSize = data_size;
 80009c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80009ca:	67bb      	str	r3, [r7, #120]	@ 0x78
    }

    for (i = 0; ((ret == HAL_OK) && (i < node_cnt)); i++)
 80009cc:	2300      	movs	r3, #0
 80009ce:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 80009d2:	e08a      	b.n	8000aea <GPDMA_Queue_Config+0x1aa>
    {
        if (i == 0)
 80009d4:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d13a      	bne.n	8000a52 <GPDMA_Queue_Config+0x112>
        {
            /* Reset The Queue */
            ret = HAL_DMAEx_List_ResetQ(Queue);
 80009dc:	68f8      	ldr	r0, [r7, #12]
 80009de:	f002 fcd2 	bl	8003386 <HAL_DMAEx_List_ResetQ>
 80009e2:	4603      	mov	r3, r0
 80009e4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
            if (ret != HAL_OK)
 80009e8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d002      	beq.n	80009f6 <GPDMA_Queue_Config+0xb6>
            {
                return ret;
 80009f0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80009f4:	e085      	b.n	8000b02 <GPDMA_Queue_Config+0x1c2>
            }
            /* Build Node first Node */
            ret = HAL_DMAEx_List_BuildNode(&pNodeConfig, &Nodes[i]);
 80009f6:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 80009fa:	4613      	mov	r3, r2
 80009fc:	00db      	lsls	r3, r3, #3
 80009fe:	4413      	add	r3, r2
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	4a42      	ldr	r2, [pc, #264]	@ (8000b0c <GPDMA_Queue_Config+0x1cc>)
 8000a04:	441a      	add	r2, r3
 8000a06:	f107 0310 	add.w	r3, r7, #16
 8000a0a:	4611      	mov	r1, r2
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f002 fbc3 	bl	8003198 <HAL_DMAEx_List_BuildNode>
 8000a12:	4603      	mov	r3, r0
 8000a14:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
            if (ret != HAL_OK)
 8000a18:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d002      	beq.n	8000a26 <GPDMA_Queue_Config+0xe6>
            {
                return ret;
 8000a20:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000a24:	e06d      	b.n	8000b02 <GPDMA_Queue_Config+0x1c2>
            }
            /* Insert Node to Queue */
            ret = HAL_DMAEx_List_InsertNode_Head(Queue, &Nodes[i]);
 8000a26:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	00db      	lsls	r3, r3, #3
 8000a2e:	4413      	add	r3, r2
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	4a36      	ldr	r2, [pc, #216]	@ (8000b0c <GPDMA_Queue_Config+0x1cc>)
 8000a34:	4413      	add	r3, r2
 8000a36:	4619      	mov	r1, r3
 8000a38:	68f8      	ldr	r0, [r7, #12]
 8000a3a:	f002 fbc3 	bl	80031c4 <HAL_DMAEx_List_InsertNode_Head>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
            if (ret != HAL_OK)
 8000a44:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d044      	beq.n	8000ad6 <GPDMA_Queue_Config+0x196>
            {
                return ret;
 8000a4c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000a50:	e057      	b.n	8000b02 <GPDMA_Queue_Config+0x1c2>
            }
        }
        else
        {
            /* Adjust size of last node */
            if ((node_cnt > 1) && (i == (node_cnt - 1)))
 8000a52:	7afb      	ldrb	r3, [r7, #11]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d910      	bls.n	8000a7a <GPDMA_Queue_Config+0x13a>
 8000a58:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 8000a5c:	7afb      	ldrb	r3, [r7, #11]
 8000a5e:	3b01      	subs	r3, #1
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d10a      	bne.n	8000a7a <GPDMA_Queue_Config+0x13a>
            {
                pNodeConfig.DataSize = (data_size - (i * ((64 * 1024) - 2)));
 8000a64:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 8000a68:	4613      	mov	r3, r2
 8000a6a:	03db      	lsls	r3, r3, #15
 8000a6c:	1a9b      	subs	r3, r3, r2
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	461a      	mov	r2, r3
 8000a72:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000a76:	1a9b      	subs	r3, r3, r2
 8000a78:	67bb      	str	r3, [r7, #120]	@ 0x78
            }
            /* Build Node Node */
            ret = HAL_DMAEx_List_BuildNode(&pNodeConfig, &Nodes[i]);
 8000a7a:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 8000a7e:	4613      	mov	r3, r2
 8000a80:	00db      	lsls	r3, r3, #3
 8000a82:	4413      	add	r3, r2
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	4a21      	ldr	r2, [pc, #132]	@ (8000b0c <GPDMA_Queue_Config+0x1cc>)
 8000a88:	441a      	add	r2, r3
 8000a8a:	f107 0310 	add.w	r3, r7, #16
 8000a8e:	4611      	mov	r1, r2
 8000a90:	4618      	mov	r0, r3
 8000a92:	f002 fb81 	bl	8003198 <HAL_DMAEx_List_BuildNode>
 8000a96:	4603      	mov	r3, r0
 8000a98:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
            if (ret != HAL_OK)
 8000a9c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d002      	beq.n	8000aaa <GPDMA_Queue_Config+0x16a>
            {
                return ret;
 8000aa4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000aa8:	e02b      	b.n	8000b02 <GPDMA_Queue_Config+0x1c2>
            }
            /* Insert Node to Queue */
            ret = HAL_DMAEx_List_InsertNode_Tail(Queue, &Nodes[i]);
 8000aaa:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 8000aae:	4613      	mov	r3, r2
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	4413      	add	r3, r2
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	4a15      	ldr	r2, [pc, #84]	@ (8000b0c <GPDMA_Queue_Config+0x1cc>)
 8000ab8:	4413      	add	r3, r2
 8000aba:	4619      	mov	r1, r3
 8000abc:	68f8      	ldr	r0, [r7, #12]
 8000abe:	f002 fbea 	bl	8003296 <HAL_DMAEx_List_InsertNode_Tail>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
            if (ret != HAL_OK)
 8000ac8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d002      	beq.n	8000ad6 <GPDMA_Queue_Config+0x196>
            {
                return ret;
 8000ad0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000ad4:	e015      	b.n	8000b02 <GPDMA_Queue_Config+0x1c2>
            }
        }
        pNodeConfig.SrcAddress += ((64 * 1024) - 2);
 8000ad6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000ad8:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000adc:	33fe      	adds	r3, #254	@ 0xfe
 8000ade:	673b      	str	r3, [r7, #112]	@ 0x70
    for (i = 0; ((ret == HAL_OK) && (i < node_cnt)); i++)
 8000ae0:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8000aea:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d105      	bne.n	8000afe <GPDMA_Queue_Config+0x1be>
 8000af2:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 8000af6:	7afb      	ldrb	r3, [r7, #11]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	f4ff af6b 	bcc.w	80009d4 <GPDMA_Queue_Config+0x94>
    }

    return ret;
 8000afe:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3780      	adds	r7, #128	@ 0x80
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20045920 	.word	0x20045920

08000b10 <ICNA3306_SendDataDMA>:

/**
 * @brief Send data to ICNA3306 using DMA
 */
static HAL_StatusTypeDef ICNA3306_SendDataDMA(uint8_t *pData, uint32_t Length)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af02      	add	r7, sp, #8
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	6039      	str	r1, [r7, #0]
    static DMA_QListTypeDef Queue;
    uint32_t len = Length;
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	60fb      	str	r3, [r7, #12]
    uint8_t node_cnt = (len / ((64 * 1024) - 2));
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	085b      	lsrs	r3, r3, #1
 8000b22:	4a3b      	ldr	r2, [pc, #236]	@ (8000c10 <ICNA3306_SendDataDMA+0x100>)
 8000b24:	fba2 2303 	umull	r2, r3, r2, r3
 8000b28:	0b9b      	lsrs	r3, r3, #14
 8000b2a:	72fb      	strb	r3, [r7, #11]
    if (len % ((64 * 1024) - 2))
 8000b2c:	68f9      	ldr	r1, [r7, #12]
 8000b2e:	084b      	lsrs	r3, r1, #1
 8000b30:	4a37      	ldr	r2, [pc, #220]	@ (8000c10 <ICNA3306_SendDataDMA+0x100>)
 8000b32:	fba2 2303 	umull	r2, r3, r2, r3
 8000b36:	0b9a      	lsrs	r2, r3, #14
 8000b38:	4613      	mov	r3, r2
 8000b3a:	03db      	lsls	r3, r3, #15
 8000b3c:	1a9b      	subs	r3, r3, r2
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	1aca      	subs	r2, r1, r3
 8000b42:	2a00      	cmp	r2, #0
 8000b44:	d002      	beq.n	8000b4c <ICNA3306_SendDataDMA+0x3c>
    {
        node_cnt++;
 8000b46:	7afb      	ldrb	r3, [r7, #11]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	72fb      	strb	r3, [r7, #11]
    }

    if ((handle_GPDMA1_Channel13.Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8000b4c:	4b31      	ldr	r3, [pc, #196]	@ (8000c14 <ICNA3306_SendDataDMA+0x104>)
 8000b4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000b50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d02a      	beq.n	8000bae <ICNA3306_SendDataDMA+0x9e>
    {
        /* Link created queue to DMA channel */
        if (GPDMA_Queue_Config(&Queue, node_cnt, pData, (uint8_t *)&(hospi1.Instance->DR), len) != HAL_OK)
 8000b58:	4b2f      	ldr	r3, [pc, #188]	@ (8000c18 <ICNA3306_SendDataDMA+0x108>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 8000b60:	7af9      	ldrb	r1, [r7, #11]
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	9300      	str	r3, [sp, #0]
 8000b66:	4613      	mov	r3, r2
 8000b68:	687a      	ldr	r2, [r7, #4]
 8000b6a:	482c      	ldr	r0, [pc, #176]	@ (8000c1c <ICNA3306_SendDataDMA+0x10c>)
 8000b6c:	f7ff fee8 	bl	8000940 <GPDMA_Queue_Config>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d004      	beq.n	8000b80 <ICNA3306_SendDataDMA+0x70>
        {
            displayRefreshing = false;
 8000b76:	4b2a      	ldr	r3, [pc, #168]	@ (8000c20 <ICNA3306_SendDataDMA+0x110>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	701a      	strb	r2, [r3, #0]
            return HAL_ERROR;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	e042      	b.n	8000c06 <ICNA3306_SendDataDMA+0xf6>
        }

        /* Link created queue to DMA channel */
        if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel13, &Queue) != HAL_OK)
 8000b80:	4926      	ldr	r1, [pc, #152]	@ (8000c1c <ICNA3306_SendDataDMA+0x10c>)
 8000b82:	4824      	ldr	r0, [pc, #144]	@ (8000c14 <ICNA3306_SendDataDMA+0x104>)
 8000b84:	f002 fc4a 	bl	800341c <HAL_DMAEx_List_LinkQ>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d004      	beq.n	8000b98 <ICNA3306_SendDataDMA+0x88>
        {
            displayRefreshing = false;
 8000b8e:	4b24      	ldr	r3, [pc, #144]	@ (8000c20 <ICNA3306_SendDataDMA+0x110>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	701a      	strb	r2, [r3, #0]
            return HAL_ERROR;
 8000b94:	2301      	movs	r3, #1
 8000b96:	e036      	b.n	8000c06 <ICNA3306_SendDataDMA+0xf6>
        }

        /* Enable All the DMA interrupts */
        if (HAL_DMAEx_List_Start_IT(&handle_GPDMA1_Channel13) != HAL_OK)
 8000b98:	481e      	ldr	r0, [pc, #120]	@ (8000c14 <ICNA3306_SendDataDMA+0x104>)
 8000b9a:	f002 fa69 	bl	8003070 <HAL_DMAEx_List_Start_IT>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d02f      	beq.n	8000c04 <ICNA3306_SendDataDMA+0xf4>
        {
            displayRefreshing = false;
 8000ba4:	4b1e      	ldr	r3, [pc, #120]	@ (8000c20 <ICNA3306_SendDataDMA+0x110>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	701a      	strb	r2, [r3, #0]
            return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	e02b      	b.n	8000c06 <ICNA3306_SendDataDMA+0xf6>
        }
    }
    else
    {
        if (node_cnt > 1)
 8000bae:	7afb      	ldrb	r3, [r7, #11]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d904      	bls.n	8000bbe <ICNA3306_SendDataDMA+0xae>
        {
            displayRefreshing = false;
 8000bb4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c20 <ICNA3306_SendDataDMA+0x110>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	701a      	strb	r2, [r3, #0]
            return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e023      	b.n	8000c06 <ICNA3306_SendDataDMA+0xf6>
        }

        switch (handle_GPDMA1_Channel13.Init.DestDataWidth)
 8000bbe:	4b15      	ldr	r3, [pc, #84]	@ (8000c14 <ICNA3306_SendDataDMA+0x104>)
 8000bc0:	69db      	ldr	r3, [r3, #28]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d006      	beq.n	8000bd4 <ICNA3306_SendDataDMA+0xc4>
 8000bc6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000bca:	d106      	bne.n	8000bda <ICNA3306_SendDataDMA+0xca>
        {
        case DMA_DEST_DATAWIDTH_WORD:
            len = (Length / 4);
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	089b      	lsrs	r3, r3, #2
 8000bd0:	60fb      	str	r3, [r7, #12]
            break;
 8000bd2:	e006      	b.n	8000be2 <ICNA3306_SendDataDMA+0xd2>
        case DMA_DEST_DATAWIDTH_BYTE:
            len = Length;
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	60fb      	str	r3, [r7, #12]
            break;
 8000bd8:	e003      	b.n	8000be2 <ICNA3306_SendDataDMA+0xd2>
        default:
        case DMA_DEST_DATAWIDTH_HALFWORD:
            len = (Length / 2);
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	085b      	lsrs	r3, r3, #1
 8000bde:	60fb      	str	r3, [r7, #12]
            break;
 8000be0:	bf00      	nop
        }

        if (HAL_DMA_Start_IT(&handle_GPDMA1_Channel13, (uint32_t)pData, (uint32_t)&(hospi1.Instance->DR), len) != HAL_OK)
 8000be2:	6879      	ldr	r1, [r7, #4]
 8000be4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c18 <ICNA3306_SendDataDMA+0x108>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	3350      	adds	r3, #80	@ 0x50
 8000bea:	461a      	mov	r2, r3
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	4809      	ldr	r0, [pc, #36]	@ (8000c14 <ICNA3306_SendDataDMA+0x104>)
 8000bf0:	f001 fbf8 	bl	80023e4 <HAL_DMA_Start_IT>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d004      	beq.n	8000c04 <ICNA3306_SendDataDMA+0xf4>
        {
            displayRefreshing = false;
 8000bfa:	4b09      	ldr	r3, [pc, #36]	@ (8000c20 <ICNA3306_SendDataDMA+0x110>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	701a      	strb	r2, [r3, #0]
            return HAL_ERROR;
 8000c00:	2301      	movs	r3, #1
 8000c02:	e000      	b.n	8000c06 <ICNA3306_SendDataDMA+0xf6>
        }
    }

    return HAL_OK;
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	80010003 	.word	0x80010003
 8000c14:	20045a30 	.word	0x20045a30
 8000c18:	20045afc 	.word	0x20045afc
 8000c1c:	2004598c 	.word	0x2004598c
 8000c20:	2004591c 	.word	0x2004591c

08000c24 <ICNA3306_WriteCmdParam>:

HAL_StatusTypeDef ICNA3306_WriteCmdParam(uint8_t cmd, size_t len, const uint8_t *params)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b098      	sub	sp, #96	@ 0x60
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
 8000c30:	73fb      	strb	r3, [r7, #15]
    OSPI_RegularCmdTypeDef sCommand = {0};
 8000c32:	f107 0310 	add.w	r3, r7, #16
 8000c36:	2250      	movs	r2, #80	@ 0x50
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f02c fa26 	bl	802d08c <memset>

    sCommand.OperationType = HAL_OSPI_OPTYPE_COMMON_CFG;
 8000c40:	2300      	movs	r3, #0
 8000c42:	613b      	str	r3, [r7, #16]
    sCommand.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE;
 8000c44:	2301      	movs	r3, #1
 8000c46:	61fb      	str	r3, [r7, #28]
    sCommand.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	623b      	str	r3, [r7, #32]
    sCommand.Instruction = 0x02;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	61bb      	str	r3, [r7, #24]
    sCommand.Address = ((uint32_t)cmd) << 8;
 8000c50:	7bfb      	ldrb	r3, [r7, #15]
 8000c52:	021b      	lsls	r3, r3, #8
 8000c54:	62bb      	str	r3, [r7, #40]	@ 0x28

    sCommand.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 8000c56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sCommand.AddressSize = HAL_OSPI_ADDRESS_24_BITS;
 8000c5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c60:	633b      	str	r3, [r7, #48]	@ 0x30
    sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8000c62:	2300      	movs	r3, #0
 8000c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sCommand.SIOOMode = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8000c66:	2300      	movs	r3, #0
 8000c68:	65fb      	str	r3, [r7, #92]	@ 0x5c
    sCommand.DQSMode = HAL_OSPI_DQS_DISABLE;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	65bb      	str	r3, [r7, #88]	@ 0x58
    sCommand.DummyCycles = 0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	657b      	str	r3, [r7, #84]	@ 0x54
    sCommand.DataMode = len > 0 ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_NONE;
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d002      	beq.n	8000c7e <ICNA3306_WriteCmdParam+0x5a>
 8000c78:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000c7c:	e000      	b.n	8000c80 <ICNA3306_WriteCmdParam+0x5c>
 8000c7e:	2300      	movs	r3, #0
 8000c80:	64bb      	str	r3, [r7, #72]	@ 0x48
    sCommand.NbData = len;
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (HAL_OSPI_Command(&hospi1, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c86:	f107 0310 	add.w	r3, r7, #16
 8000c8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000c8e:	4619      	mov	r1, r3
 8000c90:	480d      	ldr	r0, [pc, #52]	@ (8000cc8 <ICNA3306_WriteCmdParam+0xa4>)
 8000c92:	f004 fac9 	bl	8005228 <HAL_OSPI_Command>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <ICNA3306_WriteCmdParam+0x7c>
    {
        return HAL_ERROR;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	e00e      	b.n	8000cbe <ICNA3306_WriteCmdParam+0x9a>
    }

    if (len > 0)
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d00a      	beq.n	8000cbc <ICNA3306_WriteCmdParam+0x98>
    {
        if (HAL_OSPI_Transmit(&hospi1, (uint8_t *)params, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ca6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000caa:	6879      	ldr	r1, [r7, #4]
 8000cac:	4806      	ldr	r0, [pc, #24]	@ (8000cc8 <ICNA3306_WriteCmdParam+0xa4>)
 8000cae:	f004 fb48 	bl	8005342 <HAL_OSPI_Transmit>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <ICNA3306_WriteCmdParam+0x98>
        {
            return HAL_ERROR;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	e000      	b.n	8000cbe <ICNA3306_WriteCmdParam+0x9a>
        }
    }

    return HAL_OK;
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3760      	adds	r7, #96	@ 0x60
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20045afc 	.word	0x20045afc

08000ccc <ICNA3306_WriteCmdData>:

HAL_StatusTypeDef ICNA3306_WriteCmdData(uint8_t cmd, size_t len, const uint8_t *data)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b09a      	sub	sp, #104	@ 0x68
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
 8000cd8:	73fb      	strb	r3, [r7, #15]
    HAL_StatusTypeDef status;
    OSPI_RegularCmdTypeDef sCommand = {0};
 8000cda:	f107 0310 	add.w	r3, r7, #16
 8000cde:	2250      	movs	r2, #80	@ 0x50
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f02c f9d2 	bl	802d08c <memset>

     printf("OSPI State: %d\r\n", hospi1.State);
 8000ce8:	4b48      	ldr	r3, [pc, #288]	@ (8000e0c <ICNA3306_WriteCmdData+0x140>)
 8000cea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000cec:	4619      	mov	r1, r3
 8000cee:	4848      	ldr	r0, [pc, #288]	@ (8000e10 <ICNA3306_WriteCmdData+0x144>)
 8000cf0:	f02c f884 	bl	802cdfc <iprintf>
     printf("MemoryType: %d\r\n", hospi1.Init.MemoryType);
 8000cf4:	4b45      	ldr	r3, [pc, #276]	@ (8000e0c <ICNA3306_WriteCmdData+0x140>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4846      	ldr	r0, [pc, #280]	@ (8000e14 <ICNA3306_WriteCmdData+0x148>)
 8000cfc:	f02c f87e 	bl	802cdfc <iprintf>
     printf("OperationType: %d\r\n", sCommand.OperationType);
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	4619      	mov	r1, r3
 8000d04:	4844      	ldr	r0, [pc, #272]	@ (8000e18 <ICNA3306_WriteCmdData+0x14c>)
 8000d06:	f02c f879 	bl	802cdfc <iprintf>
    if (len == 0 || data == NULL)
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d002      	beq.n	8000d16 <ICNA3306_WriteCmdData+0x4a>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d101      	bne.n	8000d1a <ICNA3306_WriteCmdData+0x4e>
        return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	e073      	b.n	8000e02 <ICNA3306_WriteCmdData+0x136>

    HAL_OSPI_Abort(&hospi1); // 先调用
 8000d1a:	483c      	ldr	r0, [pc, #240]	@ (8000e0c <ICNA3306_WriteCmdData+0x140>)
 8000d1c:	f004 fbd4 	bl	80054c8 <HAL_OSPI_Abort>

    sCommand.OperationType = HAL_OSPI_OPTYPE_COMMON_CFG;
 8000d20:	2300      	movs	r3, #0
 8000d22:	613b      	str	r3, [r7, #16]
    sCommand.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE;
 8000d24:	2301      	movs	r3, #1
 8000d26:	61fb      	str	r3, [r7, #28]
    sCommand.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	623b      	str	r3, [r7, #32]
    sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	627b      	str	r3, [r7, #36]	@ 0x24
    sCommand.Instruction = 0x32;
 8000d30:	2332      	movs	r3, #50	@ 0x32
 8000d32:	61bb      	str	r3, [r7, #24]

    sCommand.Address = (cmd << 8);
 8000d34:	7bfb      	ldrb	r3, [r7, #15]
 8000d36:	021b      	lsls	r3, r3, #8
 8000d38:	62bb      	str	r3, [r7, #40]	@ 0x28
    sCommand.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 8000d3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sCommand.AddressSize = HAL_OSPI_ADDRESS_24_BITS;
 8000d40:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d44:	633b      	str	r3, [r7, #48]	@ 0x30
    sCommand.AddressDtrMode = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8000d46:	2300      	movs	r3, #0
 8000d48:	637b      	str	r3, [r7, #52]	@ 0x34
    sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sCommand.DataMode = HAL_OSPI_DATA_4_LINES;
 8000d4e:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8000d52:	64bb      	str	r3, [r7, #72]	@ 0x48
    sCommand.DataDtrMode = HAL_OSPI_DATA_DTR_DISABLE;
 8000d54:	2300      	movs	r3, #0
 8000d56:	653b      	str	r3, [r7, #80]	@ 0x50
    sCommand.DummyCycles = 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	657b      	str	r3, [r7, #84]	@ 0x54
    sCommand.DQSMode = HAL_OSPI_DQS_DISABLE;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	65bb      	str	r3, [r7, #88]	@ 0x58
    sCommand.NbData = len;
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	64fb      	str	r3, [r7, #76]	@ 0x4c

    sCommand.SIOOMode = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8000d64:	2300      	movs	r3, #0
 8000d66:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if (HAL_OSPI_Command(&hospi1, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000d68:	f107 0310 	add.w	r3, r7, #16
 8000d6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000d70:	4619      	mov	r1, r3
 8000d72:	4826      	ldr	r0, [pc, #152]	@ (8000e0c <ICNA3306_WriteCmdData+0x140>)
 8000d74:	f004 fa58 	bl	8005228 <HAL_OSPI_Command>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d004      	beq.n	8000d88 <ICNA3306_WriteCmdData+0xbc>
    {
        printf("OSPI Command Failed!\r\n");
 8000d7e:	4827      	ldr	r0, [pc, #156]	@ (8000e1c <ICNA3306_WriteCmdData+0x150>)
 8000d80:	f02c f8a4 	bl	802cecc <puts>
        return HAL_ERROR;
 8000d84:	2301      	movs	r3, #1
 8000d86:	e03c      	b.n	8000e02 <ICNA3306_WriteCmdData+0x136>
    }
    printf("Transfer length: %d\r\n", len);
 8000d88:	68b9      	ldr	r1, [r7, #8]
 8000d8a:	4825      	ldr	r0, [pc, #148]	@ (8000e20 <ICNA3306_WriteCmdData+0x154>)
 8000d8c:	f02c f836 	bl	802cdfc <iprintf>
    if (len > 1024)
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d96:	d933      	bls.n	8000e00 <ICNA3306_WriteCmdData+0x134>
    {
        HAL_OSPI_Abort(&hospi1);
 8000d98:	481c      	ldr	r0, [pc, #112]	@ (8000e0c <ICNA3306_WriteCmdData+0x140>)
 8000d9a:	f004 fb95 	bl	80054c8 <HAL_OSPI_Abort>
  __ASM volatile ("dsb 0xF":::"memory");
 8000d9e:	f3bf 8f4f 	dsb	sy
}
 8000da2:	bf00      	nop
        __DSB();

        displayRefreshing = true;
 8000da4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e24 <ICNA3306_WriteCmdData+0x158>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	701a      	strb	r2, [r3, #0]
        status = ICNA3306_SendDataDMA((uint8_t *)data, len);
 8000daa:	68b9      	ldr	r1, [r7, #8]
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f7ff feaf 	bl	8000b10 <ICNA3306_SendDataDMA>
 8000db2:	4603      	mov	r3, r0
 8000db4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        if (status != HAL_OK)
 8000db8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d005      	beq.n	8000dcc <ICNA3306_WriteCmdData+0x100>
        {
            displayRefreshing = false;
 8000dc0:	4b18      	ldr	r3, [pc, #96]	@ (8000e24 <ICNA3306_WriteCmdData+0x158>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	701a      	strb	r2, [r3, #0]
            return status;
 8000dc6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000dca:	e01a      	b.n	8000e02 <ICNA3306_WriteCmdData+0x136>
        }
        uint32_t timeout = HAL_GetTick() + 1000;
 8000dcc:	f001 f8b0 	bl	8001f30 <HAL_GetTick>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000dd6:	663b      	str	r3, [r7, #96]	@ 0x60
        while (displayRefreshing)
 8000dd8:	e00d      	b.n	8000df6 <ICNA3306_WriteCmdData+0x12a>
        {
            if (HAL_GetTick() >= timeout)
 8000dda:	f001 f8a9 	bl	8001f30 <HAL_GetTick>
 8000dde:	4602      	mov	r2, r0
 8000de0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d807      	bhi.n	8000df6 <ICNA3306_WriteCmdData+0x12a>
            {
                HAL_DMA_Abort_IT(&handle_GPDMA1_Channel13);
 8000de6:	4810      	ldr	r0, [pc, #64]	@ (8000e28 <ICNA3306_WriteCmdData+0x15c>)
 8000de8:	f001 fbd8 	bl	800259c <HAL_DMA_Abort_IT>
                displayRefreshing = false;
 8000dec:	4b0d      	ldr	r3, [pc, #52]	@ (8000e24 <ICNA3306_WriteCmdData+0x158>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	701a      	strb	r2, [r3, #0]
                return HAL_TIMEOUT;
 8000df2:	2303      	movs	r3, #3
 8000df4:	e005      	b.n	8000e02 <ICNA3306_WriteCmdData+0x136>
        while (displayRefreshing)
 8000df6:	4b0b      	ldr	r3, [pc, #44]	@ (8000e24 <ICNA3306_WriteCmdData+0x158>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d1ec      	bne.n	8000dda <ICNA3306_WriteCmdData+0x10e>
            }
        }
    }

    return HAL_OK;
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3768      	adds	r7, #104	@ 0x68
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20045afc 	.word	0x20045afc
 8000e10:	0802dc08 	.word	0x0802dc08
 8000e14:	0802dc1c 	.word	0x0802dc1c
 8000e18:	0802dc30 	.word	0x0802dc30
 8000e1c:	0802dc44 	.word	0x0802dc44
 8000e20:	0802dc5c 	.word	0x0802dc5c
 8000e24:	2004591c 	.word	0x2004591c
 8000e28:	20045a30 	.word	0x20045a30

08000e2c <ICNA3306_DrawBuffer>:

void ICNA3306_DrawBuffer(int16_t x_start, int16_t y_start, int16_t width, int16_t height, const uint8_t *buf, size_t len)
{
 8000e2c:	b590      	push	{r4, r7, lr}
 8000e2e:	b087      	sub	sp, #28
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4604      	mov	r4, r0
 8000e34:	4608      	mov	r0, r1
 8000e36:	4611      	mov	r1, r2
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4623      	mov	r3, r4
 8000e3c:	80fb      	strh	r3, [r7, #6]
 8000e3e:	4603      	mov	r3, r0
 8000e40:	80bb      	strh	r3, [r7, #4]
 8000e42:	460b      	mov	r3, r1
 8000e44:	807b      	strh	r3, [r7, #2]
 8000e46:	4613      	mov	r3, r2
 8000e48:	803b      	strh	r3, [r7, #0]
        printf("Draw Buffer:\r\n");
 8000e4a:	482e      	ldr	r0, [pc, #184]	@ (8000f04 <ICNA3306_DrawBuffer+0xd8>)
 8000e4c:	f02c f83e 	bl	802cecc <puts>
        printf("Size: %dx%d pixels\r\n", width, height);
 8000e50:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000e54:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000e58:	4619      	mov	r1, r3
 8000e5a:	482b      	ldr	r0, [pc, #172]	@ (8000f08 <ICNA3306_DrawBuffer+0xdc>)
 8000e5c:	f02b ffce 	bl	802cdfc <iprintf>
        printf("Data length: %d bytes\r\n", len);
 8000e60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000e62:	482a      	ldr	r0, [pc, #168]	@ (8000f0c <ICNA3306_DrawBuffer+0xe0>)
 8000e64:	f02b ffca 	bl	802cdfc <iprintf>
    uint8_t params[5] = {0};
 8000e68:	f107 030c 	add.w	r3, r7, #12
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	711a      	strb	r2, [r3, #4]
    int16_t x_end = x_start + width - 1;
 8000e72:	88fa      	ldrh	r2, [r7, #6]
 8000e74:	887b      	ldrh	r3, [r7, #2]
 8000e76:	4413      	add	r3, r2
 8000e78:	b29b      	uxth	r3, r3
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	82fb      	strh	r3, [r7, #22]
    int16_t y_end = y_start + height - 1;
 8000e80:	88ba      	ldrh	r2, [r7, #4]
 8000e82:	883b      	ldrh	r3, [r7, #0]
 8000e84:	4413      	add	r3, r2
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	3b01      	subs	r3, #1
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	82bb      	strh	r3, [r7, #20]

    // （0x2A）
    params[0] = x_start >> 8;
 8000e8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e92:	121b      	asrs	r3, r3, #8
 8000e94:	b21b      	sxth	r3, r3
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	733b      	strb	r3, [r7, #12]
    params[1] = x_start & 0xFF;
 8000e9a:	88fb      	ldrh	r3, [r7, #6]
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	737b      	strb	r3, [r7, #13]
    params[2] = x_end >> 8;
 8000ea0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000ea4:	121b      	asrs	r3, r3, #8
 8000ea6:	b21b      	sxth	r3, r3
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	73bb      	strb	r3, [r7, #14]
    params[3] = x_end & 0xFF;
 8000eac:	8afb      	ldrh	r3, [r7, #22]
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	73fb      	strb	r3, [r7, #15]
    ICNA3306_WriteCmdParam(CMD_COL_SET, 4, params);
 8000eb2:	f107 030c 	add.w	r3, r7, #12
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	2104      	movs	r1, #4
 8000eba:	202a      	movs	r0, #42	@ 0x2a
 8000ebc:	f7ff feb2 	bl	8000c24 <ICNA3306_WriteCmdParam>

    // （0x2B）
    params[0] = y_start >> 8;
 8000ec0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ec4:	121b      	asrs	r3, r3, #8
 8000ec6:	b21b      	sxth	r3, r3
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	733b      	strb	r3, [r7, #12]
    params[1] = y_start & 0xFF;
 8000ecc:	88bb      	ldrh	r3, [r7, #4]
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	737b      	strb	r3, [r7, #13]
    params[2] = y_end >> 8;
 8000ed2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000ed6:	121b      	asrs	r3, r3, #8
 8000ed8:	b21b      	sxth	r3, r3
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	73bb      	strb	r3, [r7, #14]
    params[3] = y_end & 0xFF;
 8000ede:	8abb      	ldrh	r3, [r7, #20]
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	73fb      	strb	r3, [r7, #15]
    ICNA3306_WriteCmdParam(CMD_ROW_SET, 4, params);
 8000ee4:	f107 030c 	add.w	r3, r7, #12
 8000ee8:	461a      	mov	r2, r3
 8000eea:	2104      	movs	r1, #4
 8000eec:	202b      	movs	r0, #43	@ 0x2b
 8000eee:	f7ff fe99 	bl	8000c24 <ICNA3306_WriteCmdParam>

    // （0x2C）
    ICNA3306_WriteCmdData(CMD_START_WRITE, len, buf);
 8000ef2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000ef4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000ef6:	202c      	movs	r0, #44	@ 0x2c
 8000ef8:	f7ff fee8 	bl	8000ccc <ICNA3306_WriteCmdData>
}
 8000efc:	bf00      	nop
 8000efe:	371c      	adds	r7, #28
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd90      	pop	{r4, r7, pc}
 8000f04:	0802dc74 	.word	0x0802dc74
 8000f08:	0802dc84 	.word	0x0802dc84
 8000f0c:	0802dc9c 	.word	0x0802dc9c

08000f10 <ICNA3306_Init>:

void ICNA3306_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
    uint8_t parameter[14];
    memset(parameter, 0, sizeof(parameter));
 8000f16:	463b      	mov	r3, r7
 8000f18:	220e      	movs	r2, #14
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f02c f8b5 	bl	802d08c <memset>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2104      	movs	r1, #4
 8000f26:	4838      	ldr	r0, [pc, #224]	@ (8001008 <ICNA3306_Init+0xf8>)
 8000f28:	f003 f934 	bl	8004194 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000f2c:	2064      	movs	r0, #100	@ 0x64
 8000f2e:	f001 f80b 	bl	8001f48 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000f32:	2201      	movs	r2, #1
 8000f34:	2104      	movs	r1, #4
 8000f36:	4834      	ldr	r0, [pc, #208]	@ (8001008 <ICNA3306_Init+0xf8>)
 8000f38:	f003 f92c 	bl	8004194 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000f3c:	2064      	movs	r0, #100	@ 0x64
 8000f3e:	f001 f803 	bl	8001f48 <HAL_Delay>

    GPDMA_Callback();
 8000f42:	f7ff fcc1 	bl	80008c8 <GPDMA_Callback>

    printf("OSPI DR Addr @ %p\r\n", &(hospi1.Instance->DR));
 8000f46:	4b31      	ldr	r3, [pc, #196]	@ (800100c <ICNA3306_Init+0xfc>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	3350      	adds	r3, #80	@ 0x50
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4830      	ldr	r0, [pc, #192]	@ (8001010 <ICNA3306_Init+0x100>)
 8000f50:	f02b ff54 	bl	802cdfc <iprintf>
    printf("GPDMA1_Channel13 Instance @ 0x%08lX\r\n", (uint32_t)handle_GPDMA1_Channel13.Instance);
 8000f54:	4b2f      	ldr	r3, [pc, #188]	@ (8001014 <ICNA3306_Init+0x104>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	482f      	ldr	r0, [pc, #188]	@ (8001018 <ICNA3306_Init+0x108>)
 8000f5c:	f02b ff4e 	bl	802cdfc <iprintf>

    ICNA3306_WriteCmdParam(CMD_RST, 0, NULL);
 8000f60:	2200      	movs	r2, #0
 8000f62:	2100      	movs	r1, #0
 8000f64:	2001      	movs	r0, #1
 8000f66:	f7ff fe5d 	bl	8000c24 <ICNA3306_WriteCmdParam>
    HAL_Delay(150);
 8000f6a:	2096      	movs	r0, #150	@ 0x96
 8000f6c:	f000 ffec 	bl	8001f48 <HAL_Delay>

    ICNA3306_WriteCmdParam(CMD_SLEEP_OUT, 0, NULL);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2100      	movs	r1, #0
 8000f74:	2011      	movs	r0, #17
 8000f76:	f7ff fe55 	bl	8000c24 <ICNA3306_WriteCmdParam>
    HAL_Delay(120);
 8000f7a:	2078      	movs	r0, #120	@ 0x78
 8000f7c:	f000 ffe4 	bl	8001f48 <HAL_Delay>

    parameter[0] = 0x00;
 8000f80:	2300      	movs	r3, #0
 8000f82:	703b      	strb	r3, [r7, #0]
    ICNA3306_WriteCmdParam(0xFE, 1, parameter);
 8000f84:	463b      	mov	r3, r7
 8000f86:	461a      	mov	r2, r3
 8000f88:	2101      	movs	r1, #1
 8000f8a:	20fe      	movs	r0, #254	@ 0xfe
 8000f8c:	f7ff fe4a 	bl	8000c24 <ICNA3306_WriteCmdParam>

    parameter[0] = 0x80;
 8000f90:	2380      	movs	r3, #128	@ 0x80
 8000f92:	703b      	strb	r3, [r7, #0]
    ICNA3306_WriteCmdParam(0xC4, 1, parameter);
 8000f94:	463b      	mov	r3, r7
 8000f96:	461a      	mov	r2, r3
 8000f98:	2101      	movs	r1, #1
 8000f9a:	20c4      	movs	r0, #196	@ 0xc4
 8000f9c:	f7ff fe42 	bl	8000c24 <ICNA3306_WriteCmdParam>

    //  TearEffect
    parameter[0] = 0x00;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	703b      	strb	r3, [r7, #0]
    ICNA3306_WriteCmdParam(0x35, 1, parameter);
 8000fa4:	463b      	mov	r3, r7
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	2101      	movs	r1, #1
 8000faa:	2035      	movs	r0, #53	@ 0x35
 8000fac:	f7ff fe3a 	bl	8000c24 <ICNA3306_WriteCmdParam>

    parameter[0] = 0x55;
 8000fb0:	2355      	movs	r3, #85	@ 0x55
 8000fb2:	703b      	strb	r3, [r7, #0]
    ICNA3306_WriteCmdParam(0x3A, 1, parameter);
 8000fb4:	463b      	mov	r3, r7
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	2101      	movs	r1, #1
 8000fba:	203a      	movs	r0, #58	@ 0x3a
 8000fbc:	f7ff fe32 	bl	8000c24 <ICNA3306_WriteCmdParam>

    // (Memory Data Access Control)
    // parameter[0] = 0x00; // RGB
    // ICNA3306_WriteCmdParam(0x36, 1, parameter);

    parameter[0] = 0x20;
 8000fc0:	2320      	movs	r3, #32
 8000fc2:	703b      	strb	r3, [r7, #0]
    ICNA3306_WriteCmdParam(0x53, 1, parameter);
 8000fc4:	463b      	mov	r3, r7
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	2101      	movs	r1, #1
 8000fca:	2053      	movs	r0, #83	@ 0x53
 8000fcc:	f7ff fe2a 	bl	8000c24 <ICNA3306_WriteCmdParam>

    parameter[0] = 0xFF;
 8000fd0:	23ff      	movs	r3, #255	@ 0xff
 8000fd2:	703b      	strb	r3, [r7, #0]
    ICNA3306_WriteCmdParam(0x51, 1, parameter);
 8000fd4:	463b      	mov	r3, r7
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	2101      	movs	r1, #1
 8000fda:	2051      	movs	r0, #81	@ 0x51
 8000fdc:	f7ff fe22 	bl	8000c24 <ICNA3306_WriteCmdParam>

    parameter[0] = 0xFF;
 8000fe0:	23ff      	movs	r3, #255	@ 0xff
 8000fe2:	703b      	strb	r3, [r7, #0]
    ICNA3306_WriteCmdParam(0x63, 1, parameter);
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	2101      	movs	r1, #1
 8000fea:	2063      	movs	r0, #99	@ 0x63
 8000fec:	f7ff fe1a 	bl	8000c24 <ICNA3306_WriteCmdParam>

    ICNA3306_WriteCmdParam(CMD_DISPLAY_ON, 0, NULL);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	2029      	movs	r0, #41	@ 0x29
 8000ff6:	f7ff fe15 	bl	8000c24 <ICNA3306_WriteCmdParam>
    HAL_Delay(120);
 8000ffa:	2078      	movs	r0, #120	@ 0x78
 8000ffc:	f000 ffa4 	bl	8001f48 <HAL_Delay>
}
 8001000:	bf00      	nop
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	42020400 	.word	0x42020400
 800100c:	20045afc 	.word	0x20045afc
 8001010:	0802dcb4 	.word	0x0802dcb4
 8001014:	20045a30 	.word	0x20045a30
 8001018:	0802dcc8 	.word	0x0802dcc8

0800101c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001020:	4a08      	ldr	r2, [pc, #32]	@ (8001044 <MX_FREERTOS_Init+0x28>)
 8001022:	2100      	movs	r1, #0
 8001024:	4808      	ldr	r0, [pc, #32]	@ (8001048 <MX_FREERTOS_Init+0x2c>)
 8001026:	f00a fdcd 	bl	800bbc4 <osThreadNew>
 800102a:	4603      	mov	r3, r0
 800102c:	4a07      	ldr	r2, [pc, #28]	@ (800104c <MX_FREERTOS_Init+0x30>)
 800102e:	6013      	str	r3, [r2, #0]
  GUI_TaskHandle = osThreadNew(TouchGFX_GUI, NULL, &GUI_Task_attributes);
 8001030:	4a07      	ldr	r2, [pc, #28]	@ (8001050 <MX_FREERTOS_Init+0x34>)
 8001032:	2100      	movs	r1, #0
 8001034:	4807      	ldr	r0, [pc, #28]	@ (8001054 <MX_FREERTOS_Init+0x38>)
 8001036:	f00a fdc5 	bl	800bbc4 <osThreadNew>
 800103a:	4603      	mov	r3, r0
 800103c:	4a06      	ldr	r2, [pc, #24]	@ (8001058 <MX_FREERTOS_Init+0x3c>)
 800103e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}
 8001044:	0802e934 	.word	0x0802e934
 8001048:	0800105d 	.word	0x0800105d
 800104c:	200459a4 	.word	0x200459a4
 8001050:	0802e958 	.word	0x0802e958
 8001054:	0800106d 	.word	0x0800106d
 8001058:	200459a8 	.word	0x200459a8

0800105c <StartDefaultTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN defaultTask */
    //I2C_Scan(&hi2c3);
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001064:	2001      	movs	r0, #1
 8001066:	f00a fe3f 	bl	800bce8 <osDelay>
 800106a:	e7fb      	b.n	8001064 <StartDefaultTask+0x8>

0800106c <TouchGFX_GUI>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void TouchGFX_GUI(void *argument)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN defaultTask */
    MX_TouchGFX_Process();
 8001074:	f00e f905 	bl	800f282 <MX_TouchGFX_Process>

    /* Infinite loop */
    for(;;)
    {
        osDelay(1);
 8001078:	2001      	movs	r0, #1
 800107a:	f00a fe35 	bl	800bce8 <osDelay>
 800107e:	e7fb      	b.n	8001078 <TouchGFX_GUI+0xc>

08001080 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001084:	4b0d      	ldr	r3, [pc, #52]	@ (80010bc <MX_CRC_Init+0x3c>)
 8001086:	4a0e      	ldr	r2, [pc, #56]	@ (80010c0 <MX_CRC_Init+0x40>)
 8001088:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800108a:	4b0c      	ldr	r3, [pc, #48]	@ (80010bc <MX_CRC_Init+0x3c>)
 800108c:	2200      	movs	r2, #0
 800108e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001090:	4b0a      	ldr	r3, [pc, #40]	@ (80010bc <MX_CRC_Init+0x3c>)
 8001092:	2200      	movs	r2, #0
 8001094:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001096:	4b09      	ldr	r3, [pc, #36]	@ (80010bc <MX_CRC_Init+0x3c>)
 8001098:	2200      	movs	r2, #0
 800109a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800109c:	4b07      	ldr	r3, [pc, #28]	@ (80010bc <MX_CRC_Init+0x3c>)
 800109e:	2200      	movs	r2, #0
 80010a0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80010a2:	4b06      	ldr	r3, [pc, #24]	@ (80010bc <MX_CRC_Init+0x3c>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80010a8:	4804      	ldr	r0, [pc, #16]	@ (80010bc <MX_CRC_Init+0x3c>)
 80010aa:	f001 f8a9 	bl	8002200 <HAL_CRC_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80010b4:	f000 faae 	bl	8001614 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	200459ac 	.word	0x200459ac
 80010c0:	40023000 	.word	0x40023000

080010c4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a0b      	ldr	r2, [pc, #44]	@ (8001100 <HAL_CRC_MspInit+0x3c>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d10e      	bne.n	80010f4 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80010d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001104 <HAL_CRC_MspInit+0x40>)
 80010d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010dc:	4a09      	ldr	r2, [pc, #36]	@ (8001104 <HAL_CRC_MspInit+0x40>)
 80010de:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010e2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80010e6:	4b07      	ldr	r3, [pc, #28]	@ (8001104 <HAL_CRC_MspInit+0x40>)
 80010e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80010f4:	bf00      	nop
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	40023000 	.word	0x40023000
 8001104:	46020c00 	.word	0x46020c00

08001108 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800110c:	4b1b      	ldr	r3, [pc, #108]	@ (800117c <MX_DMA2D_Init+0x74>)
 800110e:	4a1c      	ldr	r2, [pc, #112]	@ (8001180 <MX_DMA2D_Init+0x78>)
 8001110:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001112:	4b1a      	ldr	r3, [pc, #104]	@ (800117c <MX_DMA2D_Init+0x74>)
 8001114:	2200      	movs	r2, #0
 8001116:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8001118:	4b18      	ldr	r3, [pc, #96]	@ (800117c <MX_DMA2D_Init+0x74>)
 800111a:	2202      	movs	r2, #2
 800111c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800111e:	4b17      	ldr	r3, [pc, #92]	@ (800117c <MX_DMA2D_Init+0x74>)
 8001120:	2200      	movs	r2, #0
 8001122:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 8001124:	4b15      	ldr	r3, [pc, #84]	@ (800117c <MX_DMA2D_Init+0x74>)
 8001126:	2200      	movs	r2, #0
 8001128:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 800112a:	4b14      	ldr	r3, [pc, #80]	@ (800117c <MX_DMA2D_Init+0x74>)
 800112c:	2200      	movs	r2, #0
 800112e:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001130:	4b12      	ldr	r3, [pc, #72]	@ (800117c <MX_DMA2D_Init+0x74>)
 8001132:	2200      	movs	r2, #0
 8001134:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8001136:	4b11      	ldr	r3, [pc, #68]	@ (800117c <MX_DMA2D_Init+0x74>)
 8001138:	2202      	movs	r2, #2
 800113a:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800113c:	4b0f      	ldr	r3, [pc, #60]	@ (800117c <MX_DMA2D_Init+0x74>)
 800113e:	2200      	movs	r2, #0
 8001140:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001142:	4b0e      	ldr	r3, [pc, #56]	@ (800117c <MX_DMA2D_Init+0x74>)
 8001144:	2200      	movs	r2, #0
 8001146:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8001148:	4b0c      	ldr	r3, [pc, #48]	@ (800117c <MX_DMA2D_Init+0x74>)
 800114a:	2200      	movs	r2, #0
 800114c:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 800114e:	4b0b      	ldr	r3, [pc, #44]	@ (800117c <MX_DMA2D_Init+0x74>)
 8001150:	2200      	movs	r2, #0
 8001152:	655a      	str	r2, [r3, #84]	@ 0x54
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001154:	4809      	ldr	r0, [pc, #36]	@ (800117c <MX_DMA2D_Init+0x74>)
 8001156:	f001 fc50 	bl	80029fa <HAL_DMA2D_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_DMA2D_Init+0x5c>
  {
    Error_Handler();
 8001160:	f000 fa58 	bl	8001614 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001164:	2101      	movs	r1, #1
 8001166:	4805      	ldr	r0, [pc, #20]	@ (800117c <MX_DMA2D_Init+0x74>)
 8001168:	f001 fdb8 	bl	8002cdc <HAL_DMA2D_ConfigLayer>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_DMA2D_Init+0x6e>
  {
    Error_Handler();
 8001172:	f000 fa4f 	bl	8001614 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200459d0 	.word	0x200459d0
 8001180:	4002b000 	.word	0x4002b000

08001184 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a0e      	ldr	r2, [pc, #56]	@ (80011cc <HAL_DMA2D_MspInit+0x48>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d116      	bne.n	80011c4 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001196:	4b0e      	ldr	r3, [pc, #56]	@ (80011d0 <HAL_DMA2D_MspInit+0x4c>)
 8001198:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800119c:	4a0c      	ldr	r2, [pc, #48]	@ (80011d0 <HAL_DMA2D_MspInit+0x4c>)
 800119e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011a2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80011a6:	4b0a      	ldr	r3, [pc, #40]	@ (80011d0 <HAL_DMA2D_MspInit+0x4c>)
 80011a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80011b4:	2200      	movs	r2, #0
 80011b6:	2105      	movs	r1, #5
 80011b8:	2076      	movs	r0, #118	@ 0x76
 80011ba:	f000 ffa1 	bl	8002100 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80011be:	2076      	movs	r0, #118	@ 0x76
 80011c0:	f000 ffb8 	bl	8002134 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80011c4:	bf00      	nop
 80011c6:	3710      	adds	r7, #16
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	4002b000 	.word	0x4002b000
 80011d0:	46020c00 	.word	0x46020c00

080011d4 <MX_GPDMA1_Init>:

DMA_HandleTypeDef handle_GPDMA1_Channel13;

/* GPDMA1 init function */
void MX_GPDMA1_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80011da:	4b1f      	ldr	r3, [pc, #124]	@ (8001258 <MX_GPDMA1_Init+0x84>)
 80011dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011e0:	4a1d      	ldr	r2, [pc, #116]	@ (8001258 <MX_GPDMA1_Init+0x84>)
 80011e2:	f043 0301 	orr.w	r3, r3, #1
 80011e6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80011ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001258 <MX_GPDMA1_Init+0x84>)
 80011ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011f0:	f003 0301 	and.w	r3, r3, #1
 80011f4:	607b      	str	r3, [r7, #4]
 80011f6:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel13_IRQn, 5, 0);
 80011f8:	2200      	movs	r2, #0
 80011fa:	2105      	movs	r1, #5
 80011fc:	2055      	movs	r0, #85	@ 0x55
 80011fe:	f000 ff7f 	bl	8002100 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel13_IRQn);
 8001202:	2055      	movs	r0, #85	@ 0x55
 8001204:	f000 ff96 	bl	8002134 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN GPDMA1_Init 1 */

  /* USER CODE END GPDMA1_Init 1 */
  handle_GPDMA1_Channel13.Instance = GPDMA1_Channel13;
 8001208:	4b14      	ldr	r3, [pc, #80]	@ (800125c <MX_GPDMA1_Init+0x88>)
 800120a:	4a15      	ldr	r2, [pc, #84]	@ (8001260 <MX_GPDMA1_Init+0x8c>)
 800120c:	601a      	str	r2, [r3, #0]
  handle_GPDMA1_Channel13.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 800120e:	4b13      	ldr	r3, [pc, #76]	@ (800125c <MX_GPDMA1_Init+0x88>)
 8001210:	2200      	movs	r2, #0
 8001212:	639a      	str	r2, [r3, #56]	@ 0x38
  handle_GPDMA1_Channel13.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8001214:	4b11      	ldr	r3, [pc, #68]	@ (800125c <MX_GPDMA1_Init+0x88>)
 8001216:	2200      	movs	r2, #0
 8001218:	63da      	str	r2, [r3, #60]	@ 0x3c
  handle_GPDMA1_Channel13.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 800121a:	4b10      	ldr	r3, [pc, #64]	@ (800125c <MX_GPDMA1_Init+0x88>)
 800121c:	2200      	movs	r2, #0
 800121e:	641a      	str	r2, [r3, #64]	@ 0x40
  handle_GPDMA1_Channel13.InitLinkedList.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 8001220:	4b0e      	ldr	r3, [pc, #56]	@ (800125c <MX_GPDMA1_Init+0x88>)
 8001222:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 8001226:	645a      	str	r2, [r3, #68]	@ 0x44
  handle_GPDMA1_Channel13.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_NORMAL;
 8001228:	4b0c      	ldr	r3, [pc, #48]	@ (800125c <MX_GPDMA1_Init+0x88>)
 800122a:	2280      	movs	r2, #128	@ 0x80
 800122c:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel13) != HAL_OK)
 800122e:	480b      	ldr	r0, [pc, #44]	@ (800125c <MX_GPDMA1_Init+0x88>)
 8001230:	f001 fdf2 	bl	8002e18 <HAL_DMAEx_List_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_GPDMA1_Init+0x6a>
  {
    Error_Handler();
 800123a:	f000 f9eb 	bl	8001614 <Error_Handler>
  }
  if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel13, DMA_CHANNEL_NPRIV) != HAL_OK)
 800123e:	2110      	movs	r1, #16
 8001240:	4806      	ldr	r0, [pc, #24]	@ (800125c <MX_GPDMA1_Init+0x88>)
 8001242:	f001 fb79 	bl	8002938 <HAL_DMA_ConfigChannelAttributes>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_GPDMA1_Init+0x7c>
  {
    Error_Handler();
 800124c:	f000 f9e2 	bl	8001614 <Error_Handler>
  }
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8001250:	bf00      	nop
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	46020c00 	.word	0x46020c00
 800125c:	20045a30 	.word	0x20045a30
 8001260:	400206d0 	.word	0x400206d0

08001264 <MX_GPIO_Init>:
     PC15-OSC32_OUT (PC15)   ------> RCC_OSC32_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b088      	sub	sp, #32
 8001268:	af00      	add	r7, sp, #0

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126a:	f107 030c 	add.w	r3, r7, #12
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
 8001278:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800127a:	4b34      	ldr	r3, [pc, #208]	@ (800134c <MX_GPIO_Init+0xe8>)
 800127c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001280:	4a32      	ldr	r2, [pc, #200]	@ (800134c <MX_GPIO_Init+0xe8>)
 8001282:	f043 0304 	orr.w	r3, r3, #4
 8001286:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800128a:	4b30      	ldr	r3, [pc, #192]	@ (800134c <MX_GPIO_Init+0xe8>)
 800128c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001290:	f003 0304 	and.w	r3, r3, #4
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001298:	4b2c      	ldr	r3, [pc, #176]	@ (800134c <MX_GPIO_Init+0xe8>)
 800129a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800129e:	4a2b      	ldr	r2, [pc, #172]	@ (800134c <MX_GPIO_Init+0xe8>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012a8:	4b28      	ldr	r3, [pc, #160]	@ (800134c <MX_GPIO_Init+0xe8>)
 80012aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b6:	4b25      	ldr	r3, [pc, #148]	@ (800134c <MX_GPIO_Init+0xe8>)
 80012b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012bc:	4a23      	ldr	r2, [pc, #140]	@ (800134c <MX_GPIO_Init+0xe8>)
 80012be:	f043 0302 	orr.w	r3, r3, #2
 80012c2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012c6:	4b21      	ldr	r3, [pc, #132]	@ (800134c <MX_GPIO_Init+0xe8>)
 80012c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	603b      	str	r3, [r7, #0]
 80012d2:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin : PA2 */
    GPIO_InitStruct.Pin = GPIO_PIN_2; // TE
 80012d4:	2304      	movs	r3, #4
 80012d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001350 <MX_GPIO_Init+0xec>)
 80012da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e0:	f107 030c 	add.w	r3, r7, #12
 80012e4:	4619      	mov	r1, r3
 80012e6:	481b      	ldr	r0, [pc, #108]	@ (8001354 <MX_GPIO_Init+0xf0>)
 80012e8:	f002 fd64 	bl	8003db4 <HAL_GPIO_Init>

    /*Configure GPIO pin : PC5 */
    GPIO_InitStruct.Pin = GPIO_PIN_5;           // CTP_RST
 80012ec:	2320      	movs	r3, #32
 80012ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012f0:	4b19      	ldr	r3, [pc, #100]	@ (8001358 <MX_GPIO_Init+0xf4>)
 80012f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012f4:	2301      	movs	r3, #1
 80012f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f8:	2303      	movs	r3, #3
 80012fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	4619      	mov	r1, r3
 8001302:	4816      	ldr	r0, [pc, #88]	@ (800135c <MX_GPIO_Init+0xf8>)
 8001304:	f002 fd56 	bl	8003db4 <HAL_GPIO_Init>

    /*Configure GPIO pin : PB2  */
    GPIO_InitStruct.Pin = GPIO_PIN_2; // LCD_RST
 8001308:	2304      	movs	r3, #4
 800130a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130c:	2301      	movs	r3, #1
 800130e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001310:	2301      	movs	r3, #1
 8001312:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001314:	2303      	movs	r3, #3
 8001316:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001318:	f107 030c 	add.w	r3, r7, #12
 800131c:	4619      	mov	r1, r3
 800131e:	4810      	ldr	r0, [pc, #64]	@ (8001360 <MX_GPIO_Init+0xfc>)
 8001320:	f002 fd48 	bl	8003db4 <HAL_GPIO_Init>

    /*Configure GPIO pin :  PB10 */
    GPIO_InitStruct.Pin = GPIO_PIN_10; // CTP_INT
 8001324:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001328:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800132a:	4b0b      	ldr	r3, [pc, #44]	@ (8001358 <MX_GPIO_Init+0xf4>)
 800132c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800132e:	2301      	movs	r3, #1
 8001330:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001332:	2303      	movs	r3, #3
 8001334:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001336:	f107 030c 	add.w	r3, r7, #12
 800133a:	4619      	mov	r1, r3
 800133c:	4808      	ldr	r0, [pc, #32]	@ (8001360 <MX_GPIO_Init+0xfc>)
 800133e:	f002 fd39 	bl	8003db4 <HAL_GPIO_Init>
}
 8001342:	bf00      	nop
 8001344:	3720      	adds	r7, #32
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	46020c00 	.word	0x46020c00
 8001350:	10110000 	.word	0x10110000
 8001354:	42020000 	.word	0x42020000
 8001358:	10210000 	.word	0x10210000
 800135c:	42020800 	.word	0x42020800
 8001360:	42020400 	.word	0x42020400

08001364 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8001368:	4b1b      	ldr	r3, [pc, #108]	@ (80013d8 <MX_I2C3_Init+0x74>)
 800136a:	4a1c      	ldr	r2, [pc, #112]	@ (80013dc <MX_I2C3_Init+0x78>)
 800136c:	601a      	str	r2, [r3, #0]
	hi2c3.Init.Timing = 0x30909DEC;
 800136e:	4b1a      	ldr	r3, [pc, #104]	@ (80013d8 <MX_I2C3_Init+0x74>)
 8001370:	4a1b      	ldr	r2, [pc, #108]	@ (80013e0 <MX_I2C3_Init+0x7c>)
 8001372:	605a      	str	r2, [r3, #4]
	hi2c3.Init.OwnAddress1 = 0;
 8001374:	4b18      	ldr	r3, [pc, #96]	@ (80013d8 <MX_I2C3_Init+0x74>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800137a:	4b17      	ldr	r3, [pc, #92]	@ (80013d8 <MX_I2C3_Init+0x74>)
 800137c:	2201      	movs	r2, #1
 800137e:	60da      	str	r2, [r3, #12]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001380:	4b15      	ldr	r3, [pc, #84]	@ (80013d8 <MX_I2C3_Init+0x74>)
 8001382:	2200      	movs	r2, #0
 8001384:	611a      	str	r2, [r3, #16]
	hi2c3.Init.OwnAddress2 = 0;
 8001386:	4b14      	ldr	r3, [pc, #80]	@ (80013d8 <MX_I2C3_Init+0x74>)
 8001388:	2200      	movs	r2, #0
 800138a:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800138c:	4b12      	ldr	r3, [pc, #72]	@ (80013d8 <MX_I2C3_Init+0x74>)
 800138e:	2200      	movs	r2, #0
 8001390:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001392:	4b11      	ldr	r3, [pc, #68]	@ (80013d8 <MX_I2C3_Init+0x74>)
 8001394:	2200      	movs	r2, #0
 8001396:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001398:	4b0f      	ldr	r3, [pc, #60]	@ (80013d8 <MX_I2C3_Init+0x74>)
 800139a:	2200      	movs	r2, #0
 800139c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800139e:	480e      	ldr	r0, [pc, #56]	@ (80013d8 <MX_I2C3_Init+0x74>)
 80013a0:	f002 ff10 	bl	80041c4 <HAL_I2C_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80013aa:	f000 f933 	bl	8001614 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013ae:	2100      	movs	r1, #0
 80013b0:	4809      	ldr	r0, [pc, #36]	@ (80013d8 <MX_I2C3_Init+0x74>)
 80013b2:	f003 fc93 	bl	8004cdc <HAL_I2CEx_ConfigAnalogFilter>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80013bc:	f000 f92a 	bl	8001614 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80013c0:	2100      	movs	r1, #0
 80013c2:	4805      	ldr	r0, [pc, #20]	@ (80013d8 <MX_I2C3_Init+0x74>)
 80013c4:	f003 fcd5 	bl	8004d72 <HAL_I2CEx_ConfigDigitalFilter>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80013ce:	f000 f921 	bl	8001614 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20045aa8 	.word	0x20045aa8
 80013dc:	46002800 	.word	0x46002800
 80013e0:	30909dec 	.word	0x30909dec

080013e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b0ba      	sub	sp, #232	@ 0xe8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ec:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013fc:	f107 0310 	add.w	r3, r7, #16
 8001400:	22c0      	movs	r2, #192	@ 0xc0
 8001402:	2100      	movs	r1, #0
 8001404:	4618      	mov	r0, r3
 8001406:	f02b fe41 	bl	802d08c <memset>
  if(i2cHandle->Instance==I2C3)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a26      	ldr	r2, [pc, #152]	@ (80014a8 <HAL_I2C_MspInit+0xc4>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d145      	bne.n	80014a0 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001414:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001418:	f04f 0300 	mov.w	r3, #0
 800141c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK3;
 8001420:	2300      	movs	r3, #0
 8001422:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001426:	f107 0310 	add.w	r3, r7, #16
 800142a:	4618      	mov	r0, r3
 800142c:	f006 fc2e 	bl	8007c8c <HAL_RCCEx_PeriphCLKConfig>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001436:	f000 f8ed 	bl	8001614 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800143a:	4b1c      	ldr	r3, [pc, #112]	@ (80014ac <HAL_I2C_MspInit+0xc8>)
 800143c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001440:	4a1a      	ldr	r2, [pc, #104]	@ (80014ac <HAL_I2C_MspInit+0xc8>)
 8001442:	f043 0304 	orr.w	r3, r3, #4
 8001446:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800144a:	4b18      	ldr	r3, [pc, #96]	@ (80014ac <HAL_I2C_MspInit+0xc8>)
 800144c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001450:	f003 0304 	and.w	r3, r3, #4
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001458:	2303      	movs	r3, #3
 800145a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800145e:	2312      	movs	r3, #18
 8001460:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146a:	2300      	movs	r3, #0
 800146c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001470:	2304      	movs	r3, #4
 8001472:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001476:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800147a:	4619      	mov	r1, r3
 800147c:	480c      	ldr	r0, [pc, #48]	@ (80014b0 <HAL_I2C_MspInit+0xcc>)
 800147e:	f002 fc99 	bl	8003db4 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001482:	4b0a      	ldr	r3, [pc, #40]	@ (80014ac <HAL_I2C_MspInit+0xc8>)
 8001484:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001488:	4a08      	ldr	r2, [pc, #32]	@ (80014ac <HAL_I2C_MspInit+0xc8>)
 800148a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800148e:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8001492:	4b06      	ldr	r3, [pc, #24]	@ (80014ac <HAL_I2C_MspInit+0xc8>)
 8001494:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001498:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80014a0:	bf00      	nop
 80014a2:	37e8      	adds	r7, #232	@ 0xe8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	46002800 	.word	0x46002800
 80014ac:	46020c00 	.word	0x46020c00
 80014b0:	42020800 	.word	0x42020800

080014b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014b8:	f000 fcf6 	bl	8001ea8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014bc:	f000 f822 	bl	8001504 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014c0:	f7ff fed0 	bl	8001264 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 80014c4:	f7ff fe86 	bl	80011d4 <MX_GPDMA1_Init>
  //MX_DCACHE1_Init();
  MX_DMA2D_Init();
 80014c8:	f7ff fe1e 	bl	8001108 <MX_DMA2D_Init>
  //MX_ICACHE_Init();
  MX_TIM6_Init();
 80014cc:	f000 fbb0 	bl	8001c30 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 80014d0:	f000 fc0c 	bl	8001cec <MX_USART1_UART_Init>
  MX_CRC_Init();
 80014d4:	f7ff fdd4 	bl	8001080 <MX_CRC_Init>
  MX_I2C3_Init();
 80014d8:	f7ff ff44 	bl	8001364 <MX_I2C3_Init>
  MX_OCTOSPI1_Init();
 80014dc:	f000 f8a0 	bl	8001620 <MX_OCTOSPI1_Init>
  MX_TouchGFX_Init();
 80014e0:	f00d fec7 	bl	800f272 <MX_TouchGFX_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 80014e4:	f00d febe 	bl	800f264 <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */
    HAL_TIM_Base_Start_IT(&htim6);
 80014e8:	4805      	ldr	r0, [pc, #20]	@ (8001500 <main+0x4c>)
 80014ea:	f009 f8bf 	bl	800a66c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80014ee:	f00a fb19 	bl	800bb24 <osKernelInitialize>

  /* Call init function for freertos objects (in app_freertos.c) */
  MX_FREERTOS_Init();
 80014f2:	f7ff fd93 	bl	800101c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80014f6:	f00a fb3b 	bl	800bb70 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
 80014fa:	bf00      	nop
 80014fc:	e7fd      	b.n	80014fa <main+0x46>
 80014fe:	bf00      	nop
 8001500:	20045ba8 	.word	0x20045ba8

08001504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b09e      	sub	sp, #120	@ 0x78
 8001508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800150a:	f107 0318 	add.w	r3, r7, #24
 800150e:	2260      	movs	r2, #96	@ 0x60
 8001510:	2100      	movs	r1, #0
 8001512:	4618      	mov	r0, r3
 8001514:	f02b fdba 	bl	802d08c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001518:	463b      	mov	r3, r7
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	60da      	str	r2, [r3, #12]
 8001524:	611a      	str	r2, [r3, #16]
 8001526:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001528:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 800152c:	f005 f83e 	bl	80065ac <HAL_PWREx_ControlVoltageScaling>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <SystemClock_Config+0x36>
  {
    Error_Handler();
 8001536:	f000 f86d 	bl	8001614 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800153a:	2310      	movs	r3, #16
 800153c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800153e:	2301      	movs	r3, #1
 8001540:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001542:	2310      	movs	r3, #16
 8001544:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8001546:	2300      	movs	r3, #0
 8001548:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800154a:	2302      	movs	r3, #2
 800154c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800154e:	2301      	movs	r3, #1
 8001550:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 8001552:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001556:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8001558:	2303      	movs	r3, #3
 800155a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 800155c:	230a      	movs	r3, #10
 800155e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001560:	2302      	movs	r3, #2
 8001562:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001564:	2302      	movs	r3, #2
 8001566:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8001568:	2301      	movs	r3, #1
 800156a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 800156c:	230c      	movs	r3, #12
 800156e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001574:	f107 0318 	add.w	r3, r7, #24
 8001578:	4618      	mov	r0, r3
 800157a:	f005 f8a3 	bl	80066c4 <HAL_RCC_OscConfig>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001584:	f000 f846 	bl	8001614 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001588:	231f      	movs	r3, #31
 800158a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800158c:	2303      	movs	r3, #3
 800158e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001590:	2300      	movs	r3, #0
 8001592:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001594:	2300      	movs	r3, #0
 8001596:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001598:	2300      	movs	r3, #0
 800159a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015a0:	463b      	mov	r3, r7
 80015a2:	2104      	movs	r1, #4
 80015a4:	4618      	mov	r0, r3
 80015a6:	f005 ff69 	bl	800747c <HAL_RCC_ClockConfig>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80015b0:	f000 f830 	bl	8001614 <Error_Handler>
  }
}
 80015b4:	bf00      	nop
 80015b6:	3778      	adds	r7, #120	@ 0x78
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0x200);
 80015c4:	1d39      	adds	r1, r7, #4
 80015c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015ca:	2201      	movs	r2, #1
 80015cc:	4803      	ldr	r0, [pc, #12]	@ (80015dc <__io_putchar+0x20>)
 80015ce:	f009 fcbd 	bl	800af4c <HAL_UART_Transmit>
    return ch;
 80015d2:	687b      	ldr	r3, [r7, #4]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20045bf4 	.word	0x20045bf4

080015e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a07      	ldr	r2, [pc, #28]	@ (800160c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d101      	bne.n	80015f6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80015f2:	f000 fc89 	bl	8001f08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
    if (htim->Instance == TIM6)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a05      	ldr	r2, [pc, #20]	@ (8001610 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d101      	bne.n	8001604 <HAL_TIM_PeriodElapsedCallback+0x24>
    {
        touchgfx_tim_vsync();
 8001600:	f010 fb59 	bl	8011cb6 <touchgfx_tim_vsync>
    }
  /* USER CODE END Callback 1 */
}
 8001604:	bf00      	nop
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40001400 	.word	0x40001400
 8001610:	40001000 	.word	0x40001000

08001614 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001618:	b672      	cpsid	i
}
 800161a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 800161c:	bf00      	nop
 800161e:	e7fd      	b.n	800161c <Error_Handler+0x8>

08001620 <MX_OCTOSPI1_Init>:

OSPI_HandleTypeDef hospi1;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b088      	sub	sp, #32
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8001626:	f107 0308 	add.w	r3, r7, #8
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	609a      	str	r2, [r3, #8]
 8001632:	60da      	str	r2, [r3, #12]
 8001634:	611a      	str	r2, [r3, #16]
 8001636:	615a      	str	r2, [r3, #20]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 8001638:	463b      	mov	r3, r7
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 8001640:	4b2e      	ldr	r3, [pc, #184]	@ (80016fc <MX_OCTOSPI1_Init+0xdc>)
 8001642:	4a2f      	ldr	r2, [pc, #188]	@ (8001700 <MX_OCTOSPI1_Init+0xe0>)
 8001644:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 8;
 8001646:	4b2d      	ldr	r3, [pc, #180]	@ (80016fc <MX_OCTOSPI1_Init+0xdc>)
 8001648:	2208      	movs	r2, #8
 800164a:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 800164c:	4b2b      	ldr	r3, [pc, #172]	@ (80016fc <MX_OCTOSPI1_Init+0xdc>)
 800164e:	2200      	movs	r2, #0
 8001650:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8001652:	4b2a      	ldr	r3, [pc, #168]	@ (80016fc <MX_OCTOSPI1_Init+0xdc>)
 8001654:	2200      	movs	r2, #0
 8001656:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 22;
 8001658:	4b28      	ldr	r3, [pc, #160]	@ (80016fc <MX_OCTOSPI1_Init+0xdc>)
 800165a:	2216      	movs	r2, #22
 800165c:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 800165e:	4b27      	ldr	r3, [pc, #156]	@ (80016fc <MX_OCTOSPI1_Init+0xdc>)
 8001660:	2201      	movs	r2, #1
 8001662:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001664:	4b25      	ldr	r3, [pc, #148]	@ (80016fc <MX_OCTOSPI1_Init+0xdc>)
 8001666:	2200      	movs	r2, #0
 8001668:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 800166a:	4b24      	ldr	r3, [pc, #144]	@ (80016fc <MX_OCTOSPI1_Init+0xdc>)
 800166c:	2200      	movs	r2, #0
 800166e:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8001670:	4b22      	ldr	r3, [pc, #136]	@ (80016fc <MX_OCTOSPI1_Init+0xdc>)
 8001672:	2200      	movs	r2, #0
 8001674:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 5;
 8001676:	4b21      	ldr	r3, [pc, #132]	@ (80016fc <MX_OCTOSPI1_Init+0xdc>)
 8001678:	2205      	movs	r2, #5
 800167a:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800167c:	4b1f      	ldr	r3, [pc, #124]	@ (80016fc <MX_OCTOSPI1_Init+0xdc>)
 800167e:	2200      	movs	r2, #0
 8001680:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001682:	4b1e      	ldr	r3, [pc, #120]	@ (80016fc <MX_OCTOSPI1_Init+0xdc>)
 8001684:	2200      	movs	r2, #0
 8001686:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8001688:	4b1c      	ldr	r3, [pc, #112]	@ (80016fc <MX_OCTOSPI1_Init+0xdc>)
 800168a:	2200      	movs	r2, #0
 800168c:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800168e:	4b1b      	ldr	r3, [pc, #108]	@ (80016fc <MX_OCTOSPI1_Init+0xdc>)
 8001690:	2208      	movs	r2, #8
 8001692:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 0;
 8001694:	4b19      	ldr	r3, [pc, #100]	@ (80016fc <MX_OCTOSPI1_Init+0xdc>)
 8001696:	2200      	movs	r2, #0
 8001698:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 0;
 800169a:	4b18      	ldr	r3, [pc, #96]	@ (80016fc <MX_OCTOSPI1_Init+0xdc>)
 800169c:	2200      	movs	r2, #0
 800169e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 80016a0:	4816      	ldr	r0, [pc, #88]	@ (80016fc <MX_OCTOSPI1_Init+0xdc>)
 80016a2:	f003 fbc3 	bl	8004e2c <HAL_OSPI_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_OCTOSPI1_Init+0x90>
  {
    Error_Handler();
 80016ac:	f7ff ffb2 	bl	8001614 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 80016b0:	2301      	movs	r3, #1
 80016b2:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.NCSPort = 1;
 80016b4:	2301      	movs	r3, #1
 80016b6:	613b      	str	r3, [r7, #16]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 80016b8:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80016bc:	617b      	str	r3, [r7, #20]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80016be:	f107 0308 	add.w	r3, r7, #8
 80016c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016c6:	4619      	mov	r1, r3
 80016c8:	480c      	ldr	r0, [pc, #48]	@ (80016fc <MX_OCTOSPI1_Init+0xdc>)
 80016ca:	f003 ff81 	bl	80055d0 <HAL_OSPIM_Config>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_OCTOSPI1_Init+0xb8>
  {
    Error_Handler();
 80016d4:	f7ff ff9e 	bl	8001614 <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 80016dc:	2300      	movs	r3, #0
 80016de:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi1, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 80016e0:	463b      	mov	r3, r7
 80016e2:	4619      	mov	r1, r3
 80016e4:	4805      	ldr	r0, [pc, #20]	@ (80016fc <MX_OCTOSPI1_Init+0xdc>)
 80016e6:	f004 ff19 	bl	800651c <HAL_OSPI_DLYB_SetConfig>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_OCTOSPI1_Init+0xd4>
  {
    Error_Handler();
 80016f0:	f7ff ff90 	bl	8001614 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 80016f4:	bf00      	nop
 80016f6:	3720      	adds	r7, #32
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20045afc 	.word	0x20045afc
 8001700:	420d1400 	.word	0x420d1400

08001704 <HAL_OSPI_MspInit>:

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b0bc      	sub	sp, #240	@ 0xf0
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800171c:	f107 0318 	add.w	r3, r7, #24
 8001720:	22c0      	movs	r2, #192	@ 0xc0
 8001722:	2100      	movs	r1, #0
 8001724:	4618      	mov	r0, r3
 8001726:	f02b fcb1 	bl	802d08c <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a4f      	ldr	r2, [pc, #316]	@ (800186c <HAL_OSPI_MspInit+0x168>)
 8001730:	4293      	cmp	r3, r2
 8001732:	f040 8096 	bne.w	8001862 <HAL_OSPI_MspInit+0x15e>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001736:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800173a:	f04f 0300 	mov.w	r3, #0
 800173e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8001742:	2300      	movs	r3, #0
 8001744:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001748:	f107 0318 	add.w	r3, r7, #24
 800174c:	4618      	mov	r0, r3
 800174e:	f006 fa9d 	bl	8007c8c <HAL_RCCEx_PeriphCLKConfig>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <HAL_OSPI_MspInit+0x58>
    {
      Error_Handler();
 8001758:	f7ff ff5c 	bl	8001614 <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 800175c:	4b44      	ldr	r3, [pc, #272]	@ (8001870 <HAL_OSPI_MspInit+0x16c>)
 800175e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001762:	4a43      	ldr	r2, [pc, #268]	@ (8001870 <HAL_OSPI_MspInit+0x16c>)
 8001764:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001768:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800176c:	4b40      	ldr	r3, [pc, #256]	@ (8001870 <HAL_OSPI_MspInit+0x16c>)
 800176e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001772:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001776:	617b      	str	r3, [r7, #20]
 8001778:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 800177a:	4b3d      	ldr	r3, [pc, #244]	@ (8001870 <HAL_OSPI_MspInit+0x16c>)
 800177c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001780:	4a3b      	ldr	r2, [pc, #236]	@ (8001870 <HAL_OSPI_MspInit+0x16c>)
 8001782:	f043 0310 	orr.w	r3, r3, #16
 8001786:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800178a:	4b39      	ldr	r3, [pc, #228]	@ (8001870 <HAL_OSPI_MspInit+0x16c>)
 800178c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001790:	f003 0310 	and.w	r3, r3, #16
 8001794:	613b      	str	r3, [r7, #16]
 8001796:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001798:	4b35      	ldr	r3, [pc, #212]	@ (8001870 <HAL_OSPI_MspInit+0x16c>)
 800179a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800179e:	4a34      	ldr	r2, [pc, #208]	@ (8001870 <HAL_OSPI_MspInit+0x16c>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017a8:	4b31      	ldr	r3, [pc, #196]	@ (8001870 <HAL_OSPI_MspInit+0x16c>)
 80017aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001870 <HAL_OSPI_MspInit+0x16c>)
 80017b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017bc:	4a2c      	ldr	r2, [pc, #176]	@ (8001870 <HAL_OSPI_MspInit+0x16c>)
 80017be:	f043 0302 	orr.w	r3, r3, #2
 80017c2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001870 <HAL_OSPI_MspInit+0x16c>)
 80017c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	60bb      	str	r3, [r7, #8]
 80017d2:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> OCTOSPIM_P1_IO3
    PA7     ------> OCTOSPIM_P1_IO2
    PB0     ------> OCTOSPIM_P1_IO1
    PB1     ------> OCTOSPIM_P1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7;
 80017d4:	23c8      	movs	r3, #200	@ 0xc8
 80017d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017da:	2302      	movs	r3, #2
 80017dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e6:	2303      	movs	r3, #3
 80017e8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80017ec:	230a      	movs	r3, #10
 80017ee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80017f6:	4619      	mov	r1, r3
 80017f8:	481e      	ldr	r0, [pc, #120]	@ (8001874 <HAL_OSPI_MspInit+0x170>)
 80017fa:	f002 fadb 	bl	8003db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017fe:	2310      	movs	r3, #16
 8001800:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001804:	2302      	movs	r3, #2
 8001806:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001810:	2303      	movs	r3, #3
 8001812:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8001816:	2303      	movs	r3, #3
 8001818:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001820:	4619      	mov	r1, r3
 8001822:	4814      	ldr	r0, [pc, #80]	@ (8001874 <HAL_OSPI_MspInit+0x170>)
 8001824:	f002 fac6 	bl	8003db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001828:	2303      	movs	r3, #3
 800182a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182e:	2302      	movs	r3, #2
 8001830:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183a:	2303      	movs	r3, #3
 800183c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8001840:	230a      	movs	r3, #10
 8001842:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001846:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800184a:	4619      	mov	r1, r3
 800184c:	480a      	ldr	r0, [pc, #40]	@ (8001878 <HAL_OSPI_MspInit+0x174>)
 800184e:	f002 fab1 	bl	8003db4 <HAL_GPIO_Init>

    /* OCTOSPI1 interrupt Init */
    HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 5, 0);
 8001852:	2200      	movs	r2, #0
 8001854:	2105      	movs	r1, #5
 8001856:	204c      	movs	r0, #76	@ 0x4c
 8001858:	f000 fc52 	bl	8002100 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 800185c:	204c      	movs	r0, #76	@ 0x4c
 800185e:	f000 fc69 	bl	8002134 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 8001862:	bf00      	nop
 8001864:	37f0      	adds	r7, #240	@ 0xf0
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	420d1400 	.word	0x420d1400
 8001870:	46020c00 	.word	0x46020c00
 8001874:	42020000 	.word	0x42020000
 8001878:	42020400 	.word	0x42020400

0800187c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001882:	4b0c      	ldr	r3, [pc, #48]	@ (80018b4 <HAL_MspInit+0x38>)
 8001884:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001888:	4a0a      	ldr	r2, [pc, #40]	@ (80018b4 <HAL_MspInit+0x38>)
 800188a:	f043 0304 	orr.w	r3, r3, #4
 800188e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001892:	4b08      	ldr	r3, [pc, #32]	@ (80018b4 <HAL_MspInit+0x38>)
 8001894:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	607b      	str	r3, [r7, #4]
 800189e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018a0:	2200      	movs	r2, #0
 80018a2:	210f      	movs	r1, #15
 80018a4:	f06f 0001 	mvn.w	r0, #1
 80018a8:	f000 fc2a 	bl	8002100 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ac:	bf00      	nop
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	46020c00 	.word	0x46020c00

080018b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08e      	sub	sp, #56	@ 0x38
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80018c8:	4b2e      	ldr	r3, [pc, #184]	@ (8001984 <HAL_InitTick+0xcc>)
 80018ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80018ce:	4a2d      	ldr	r2, [pc, #180]	@ (8001984 <HAL_InitTick+0xcc>)
 80018d0:	f043 0320 	orr.w	r3, r3, #32
 80018d4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80018d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001984 <HAL_InitTick+0xcc>)
 80018da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80018de:	f003 0320 	and.w	r3, r3, #32
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018e6:	f107 0210 	add.w	r2, r7, #16
 80018ea:	f107 0314 	add.w	r3, r7, #20
 80018ee:	4611      	mov	r1, r2
 80018f0:	4618      	mov	r0, r3
 80018f2:	f006 f90d 	bl	8007b10 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80018f6:	f006 f8cf 	bl	8007a98 <HAL_RCC_GetPCLK1Freq>
 80018fa:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018fe:	4a22      	ldr	r2, [pc, #136]	@ (8001988 <HAL_InitTick+0xd0>)
 8001900:	fba2 2303 	umull	r2, r3, r2, r3
 8001904:	0c9b      	lsrs	r3, r3, #18
 8001906:	3b01      	subs	r3, #1
 8001908:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800190a:	4b20      	ldr	r3, [pc, #128]	@ (800198c <HAL_InitTick+0xd4>)
 800190c:	4a20      	ldr	r2, [pc, #128]	@ (8001990 <HAL_InitTick+0xd8>)
 800190e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001910:	4b1e      	ldr	r3, [pc, #120]	@ (800198c <HAL_InitTick+0xd4>)
 8001912:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001916:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001918:	4a1c      	ldr	r2, [pc, #112]	@ (800198c <HAL_InitTick+0xd4>)
 800191a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800191c:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800191e:	4b1b      	ldr	r3, [pc, #108]	@ (800198c <HAL_InitTick+0xd4>)
 8001920:	2200      	movs	r2, #0
 8001922:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001924:	4b19      	ldr	r3, [pc, #100]	@ (800198c <HAL_InitTick+0xd4>)
 8001926:	2200      	movs	r2, #0
 8001928:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim7);
 800192a:	4818      	ldr	r0, [pc, #96]	@ (800198c <HAL_InitTick+0xd4>)
 800192c:	f008 fe46 	bl	800a5bc <HAL_TIM_Base_Init>
 8001930:	4603      	mov	r3, r0
 8001932:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 8001936:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800193a:	2b00      	cmp	r3, #0
 800193c:	d118      	bne.n	8001970 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 800193e:	4813      	ldr	r0, [pc, #76]	@ (800198c <HAL_InitTick+0xd4>)
 8001940:	f008 fe94 	bl	800a66c <HAL_TIM_Base_Start_IT>
 8001944:	4603      	mov	r3, r0
 8001946:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 800194a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800194e:	2b00      	cmp	r3, #0
 8001950:	d10e      	bne.n	8001970 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2b0f      	cmp	r3, #15
 8001956:	d808      	bhi.n	800196a <HAL_InitTick+0xb2>
      {
        /* Enable the TIM7 global Interrupt */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8001958:	2200      	movs	r2, #0
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	2032      	movs	r0, #50	@ 0x32
 800195e:	f000 fbcf 	bl	8002100 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001962:	4a0c      	ldr	r2, [pc, #48]	@ (8001994 <HAL_InitTick+0xdc>)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6013      	str	r3, [r2, #0]
 8001968:	e002      	b.n	8001970 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001970:	2032      	movs	r0, #50	@ 0x32
 8001972:	f000 fbdf 	bl	8002134 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8001976:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800197a:	4618      	mov	r0, r3
 800197c:	3738      	adds	r7, #56	@ 0x38
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	46020c00 	.word	0x46020c00
 8001988:	431bde83 	.word	0x431bde83
 800198c:	20045b58 	.word	0x20045b58
 8001990:	40001400 	.word	0x40001400
 8001994:	20000008 	.word	0x20000008

08001998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800199c:	bf00      	nop
 800199e:	e7fd      	b.n	800199c <NMI_Handler+0x4>

080019a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019a4:	bf00      	nop
 80019a6:	e7fd      	b.n	80019a4 <HardFault_Handler+0x4>

080019a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019ac:	bf00      	nop
 80019ae:	e7fd      	b.n	80019ac <MemManage_Handler+0x4>

080019b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019b4:	bf00      	nop
 80019b6:	e7fd      	b.n	80019b4 <BusFault_Handler+0x4>

080019b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019bc:	bf00      	nop
 80019be:	e7fd      	b.n	80019bc <UsageFault_Handler+0x4>

080019c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
	...

080019d0 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80019d4:	4802      	ldr	r0, [pc, #8]	@ (80019e0 <TIM6_IRQHandler+0x10>)
 80019d6:	f008 fee9 	bl	800a7ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	20045ba8 	.word	0x20045ba8

080019e4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80019e8:	4802      	ldr	r0, [pc, #8]	@ (80019f4 <TIM7_IRQHandler+0x10>)
 80019ea:	f008 fedf 	bl	800a7ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20045b58 	.word	0x20045b58

080019f8 <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
 80019fc:	4802      	ldr	r0, [pc, #8]	@ (8001a08 <OCTOSPI1_IRQHandler+0x10>)
 80019fe:	f003 fad1 	bl	8004fa4 <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20045afc 	.word	0x20045afc

08001a0c <GPDMA1_Channel13_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 13 global interrupt.
  */
void GPDMA1_Channel13_IRQHandler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel13_IRQn 0 */

  /* USER CODE END GPDMA1_Channel13_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel13);
 8001a10:	4802      	ldr	r0, [pc, #8]	@ (8001a1c <GPDMA1_Channel13_IRQHandler+0x10>)
 8001a12:	f000 fdec 	bl	80025ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel13_IRQn 1 */

  /* USER CODE END GPDMA1_Channel13_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20045a30 	.word	0x20045a30

08001a20 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001a24:	4802      	ldr	r0, [pc, #8]	@ (8001a30 <DMA2D_IRQHandler+0x10>)
 8001a26:	f001 f849 	bl	8002abc <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	200459d0 	.word	0x200459d0

08001a34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  return 1;
 8001a38:	2301      	movs	r3, #1
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <_kill>:

int _kill(int pid, int sig)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a4e:	f02b fbbf 	bl	802d1d0 <__errno>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2216      	movs	r2, #22
 8001a56:	601a      	str	r2, [r3, #0]
  return -1;
 8001a58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <_exit>:

void _exit (int status)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff ffe7 	bl	8001a44 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a76:	bf00      	nop
 8001a78:	e7fd      	b.n	8001a76 <_exit+0x12>

08001a7a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b086      	sub	sp, #24
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	60f8      	str	r0, [r7, #12]
 8001a82:	60b9      	str	r1, [r7, #8]
 8001a84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
 8001a8a:	e00a      	b.n	8001aa2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a8c:	f3af 8000 	nop.w
 8001a90:	4601      	mov	r1, r0
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	1c5a      	adds	r2, r3, #1
 8001a96:	60ba      	str	r2, [r7, #8]
 8001a98:	b2ca      	uxtb	r2, r1
 8001a9a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	dbf0      	blt.n	8001a8c <_read+0x12>
  }

  return len;
 8001aaa:	687b      	ldr	r3, [r7, #4]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3718      	adds	r7, #24
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	e009      	b.n	8001ada <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	1c5a      	adds	r2, r3, #1
 8001aca:	60ba      	str	r2, [r7, #8]
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff fd74 	bl	80015bc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	617b      	str	r3, [r7, #20]
 8001ada:	697a      	ldr	r2, [r7, #20]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	dbf1      	blt.n	8001ac6 <_write+0x12>
  }
  return len;
 8001ae2:	687b      	ldr	r3, [r7, #4]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3718      	adds	r7, #24
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <_close>:

int _close(int file)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001af4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b14:	605a      	str	r2, [r3, #4]
  return 0;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <_isatty>:

int _isatty(int file)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b2c:	2301      	movs	r3, #1
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b085      	sub	sp, #20
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	60f8      	str	r0, [r7, #12]
 8001b42:	60b9      	str	r1, [r7, #8]
 8001b44:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b5c:	4a14      	ldr	r2, [pc, #80]	@ (8001bb0 <_sbrk+0x5c>)
 8001b5e:	4b15      	ldr	r3, [pc, #84]	@ (8001bb4 <_sbrk+0x60>)
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b68:	4b13      	ldr	r3, [pc, #76]	@ (8001bb8 <_sbrk+0x64>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d102      	bne.n	8001b76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b70:	4b11      	ldr	r3, [pc, #68]	@ (8001bb8 <_sbrk+0x64>)
 8001b72:	4a12      	ldr	r2, [pc, #72]	@ (8001bbc <_sbrk+0x68>)
 8001b74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b76:	4b10      	ldr	r3, [pc, #64]	@ (8001bb8 <_sbrk+0x64>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d207      	bcs.n	8001b94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b84:	f02b fb24 	bl	802d1d0 <__errno>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	220c      	movs	r2, #12
 8001b8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b92:	e009      	b.n	8001ba8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b94:	4b08      	ldr	r3, [pc, #32]	@ (8001bb8 <_sbrk+0x64>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b9a:	4b07      	ldr	r3, [pc, #28]	@ (8001bb8 <_sbrk+0x64>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	4a05      	ldr	r2, [pc, #20]	@ (8001bb8 <_sbrk+0x64>)
 8001ba4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	200c0000 	.word	0x200c0000
 8001bb4:	00000800 	.word	0x00000800
 8001bb8:	20045ba4 	.word	0x20045ba4
 8001bbc:	2005c7c0 	.word	0x2005c7c0

08001bc0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001bc4:	4b18      	ldr	r3, [pc, #96]	@ (8001c28 <SystemInit+0x68>)
 8001bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bca:	4a17      	ldr	r2, [pc, #92]	@ (8001c28 <SystemInit+0x68>)
 8001bcc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bd0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001bd4:	4b15      	ldr	r3, [pc, #84]	@ (8001c2c <SystemInit+0x6c>)
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001bda:	4b14      	ldr	r3, [pc, #80]	@ (8001c2c <SystemInit+0x6c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001be0:	4b12      	ldr	r3, [pc, #72]	@ (8001c2c <SystemInit+0x6c>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001be6:	4b11      	ldr	r3, [pc, #68]	@ (8001c2c <SystemInit+0x6c>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001bec:	4b0f      	ldr	r3, [pc, #60]	@ (8001c2c <SystemInit+0x6c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a0e      	ldr	r2, [pc, #56]	@ (8001c2c <SystemInit+0x6c>)
 8001bf2:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001bf6:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001bfa:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8001c2c <SystemInit+0x6c>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001c02:	4b0a      	ldr	r3, [pc, #40]	@ (8001c2c <SystemInit+0x6c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a09      	ldr	r2, [pc, #36]	@ (8001c2c <SystemInit+0x6c>)
 8001c08:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c0c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001c0e:	4b07      	ldr	r3, [pc, #28]	@ (8001c2c <SystemInit+0x6c>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c14:	4b04      	ldr	r3, [pc, #16]	@ (8001c28 <SystemInit+0x68>)
 8001c16:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001c1a:	609a      	str	r2, [r3, #8]
  #endif
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	e000ed00 	.word	0xe000ed00
 8001c2c:	46020c00 	.word	0x46020c00

08001c30 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c36:	1d3b      	adds	r3, r7, #4
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001c40:	4b14      	ldr	r3, [pc, #80]	@ (8001c94 <MX_TIM6_Init+0x64>)
 8001c42:	4a15      	ldr	r2, [pc, #84]	@ (8001c98 <MX_TIM6_Init+0x68>)
 8001c44:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001c46:	4b13      	ldr	r3, [pc, #76]	@ (8001c94 <MX_TIM6_Init+0x64>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c4c:	4b11      	ldr	r3, [pc, #68]	@ (8001c94 <MX_TIM6_Init+0x64>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001c52:	4b10      	ldr	r3, [pc, #64]	@ (8001c94 <MX_TIM6_Init+0x64>)
 8001c54:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c58:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c94 <MX_TIM6_Init+0x64>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c60:	480c      	ldr	r0, [pc, #48]	@ (8001c94 <MX_TIM6_Init+0x64>)
 8001c62:	f008 fcab 	bl	800a5bc <HAL_TIM_Base_Init>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001c6c:	f7ff fcd2 	bl	8001614 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c70:	2300      	movs	r3, #0
 8001c72:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c74:	2300      	movs	r3, #0
 8001c76:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c78:	1d3b      	adds	r3, r7, #4
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4805      	ldr	r0, [pc, #20]	@ (8001c94 <MX_TIM6_Init+0x64>)
 8001c7e:	f009 f80d 	bl	800ac9c <HAL_TIMEx_MasterConfigSynchronization>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001c88:	f7ff fcc4 	bl	8001614 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c8c:	bf00      	nop
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	20045ba8 	.word	0x20045ba8
 8001c98:	40001000 	.word	0x40001000

08001c9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a0e      	ldr	r2, [pc, #56]	@ (8001ce4 <HAL_TIM_Base_MspInit+0x48>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d116      	bne.n	8001cdc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001cae:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce8 <HAL_TIM_Base_MspInit+0x4c>)
 8001cb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001cb4:	4a0c      	ldr	r2, [pc, #48]	@ (8001ce8 <HAL_TIM_Base_MspInit+0x4c>)
 8001cb6:	f043 0310 	orr.w	r3, r3, #16
 8001cba:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce8 <HAL_TIM_Base_MspInit+0x4c>)
 8001cc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001cc4:	f003 0310 	and.w	r3, r3, #16
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 5, 0);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2105      	movs	r1, #5
 8001cd0:	2031      	movs	r0, #49	@ 0x31
 8001cd2:	f000 fa15 	bl	8002100 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001cd6:	2031      	movs	r0, #49	@ 0x31
 8001cd8:	f000 fa2c 	bl	8002134 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001cdc:	bf00      	nop
 8001cde:	3710      	adds	r7, #16
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40001000 	.word	0x40001000
 8001ce8:	46020c00 	.word	0x46020c00

08001cec <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cf0:	4b22      	ldr	r3, [pc, #136]	@ (8001d7c <MX_USART1_UART_Init+0x90>)
 8001cf2:	4a23      	ldr	r2, [pc, #140]	@ (8001d80 <MX_USART1_UART_Init+0x94>)
 8001cf4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001cf6:	4b21      	ldr	r3, [pc, #132]	@ (8001d7c <MX_USART1_UART_Init+0x90>)
 8001cf8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001cfc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cfe:	4b1f      	ldr	r3, [pc, #124]	@ (8001d7c <MX_USART1_UART_Init+0x90>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d04:	4b1d      	ldr	r3, [pc, #116]	@ (8001d7c <MX_USART1_UART_Init+0x90>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d0a:	4b1c      	ldr	r3, [pc, #112]	@ (8001d7c <MX_USART1_UART_Init+0x90>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d10:	4b1a      	ldr	r3, [pc, #104]	@ (8001d7c <MX_USART1_UART_Init+0x90>)
 8001d12:	220c      	movs	r2, #12
 8001d14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d16:	4b19      	ldr	r3, [pc, #100]	@ (8001d7c <MX_USART1_UART_Init+0x90>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d1c:	4b17      	ldr	r3, [pc, #92]	@ (8001d7c <MX_USART1_UART_Init+0x90>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d22:	4b16      	ldr	r3, [pc, #88]	@ (8001d7c <MX_USART1_UART_Init+0x90>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d28:	4b14      	ldr	r3, [pc, #80]	@ (8001d7c <MX_USART1_UART_Init+0x90>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d2e:	4b13      	ldr	r3, [pc, #76]	@ (8001d7c <MX_USART1_UART_Init+0x90>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d34:	4811      	ldr	r0, [pc, #68]	@ (8001d7c <MX_USART1_UART_Init+0x90>)
 8001d36:	f009 f8b9 	bl	800aeac <HAL_UART_Init>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001d40:	f7ff fc68 	bl	8001614 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d44:	2100      	movs	r1, #0
 8001d46:	480d      	ldr	r0, [pc, #52]	@ (8001d7c <MX_USART1_UART_Init+0x90>)
 8001d48:	f009 fd98 	bl	800b87c <HAL_UARTEx_SetTxFifoThreshold>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001d52:	f7ff fc5f 	bl	8001614 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d56:	2100      	movs	r1, #0
 8001d58:	4808      	ldr	r0, [pc, #32]	@ (8001d7c <MX_USART1_UART_Init+0x90>)
 8001d5a:	f009 fdcd 	bl	800b8f8 <HAL_UARTEx_SetRxFifoThreshold>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001d64:	f7ff fc56 	bl	8001614 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001d68:	4804      	ldr	r0, [pc, #16]	@ (8001d7c <MX_USART1_UART_Init+0x90>)
 8001d6a:	f009 fd4e 	bl	800b80a <HAL_UARTEx_DisableFifoMode>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001d74:	f7ff fc4e 	bl	8001614 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d78:	bf00      	nop
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	20045bf4 	.word	0x20045bf4
 8001d80:	40013800 	.word	0x40013800

08001d84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b0ba      	sub	sp, #232	@ 0xe8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d9c:	f107 0310 	add.w	r3, r7, #16
 8001da0:	22c0      	movs	r2, #192	@ 0xc0
 8001da2:	2100      	movs	r1, #0
 8001da4:	4618      	mov	r0, r3
 8001da6:	f02b f971 	bl	802d08c <memset>
  if(uartHandle->Instance==USART1)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a26      	ldr	r2, [pc, #152]	@ (8001e48 <HAL_UART_MspInit+0xc4>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d145      	bne.n	8001e40 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001db4:	f04f 0201 	mov.w	r2, #1
 8001db8:	f04f 0300 	mov.w	r3, #0
 8001dbc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dc4:	f107 0310 	add.w	r3, r7, #16
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f005 ff5f 	bl	8007c8c <HAL_RCCEx_PeriphCLKConfig>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001dd4:	f7ff fc1e 	bl	8001614 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001dd8:	4b1c      	ldr	r3, [pc, #112]	@ (8001e4c <HAL_UART_MspInit+0xc8>)
 8001dda:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001dde:	4a1b      	ldr	r2, [pc, #108]	@ (8001e4c <HAL_UART_MspInit+0xc8>)
 8001de0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001de4:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001de8:	4b18      	ldr	r3, [pc, #96]	@ (8001e4c <HAL_UART_MspInit+0xc8>)
 8001dea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001dee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df6:	4b15      	ldr	r3, [pc, #84]	@ (8001e4c <HAL_UART_MspInit+0xc8>)
 8001df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001dfc:	4a13      	ldr	r2, [pc, #76]	@ (8001e4c <HAL_UART_MspInit+0xc8>)
 8001dfe:	f043 0301 	orr.w	r3, r3, #1
 8001e02:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e06:	4b11      	ldr	r3, [pc, #68]	@ (8001e4c <HAL_UART_MspInit+0xc8>)
 8001e08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	60bb      	str	r3, [r7, #8]
 8001e12:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e14:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001e18:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e2e:	2307      	movs	r3, #7
 8001e30:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e34:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4805      	ldr	r0, [pc, #20]	@ (8001e50 <HAL_UART_MspInit+0xcc>)
 8001e3c:	f001 ffba 	bl	8003db4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001e40:	bf00      	nop
 8001e42:	37e8      	adds	r7, #232	@ 0xe8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40013800 	.word	0x40013800
 8001e4c:	46020c00 	.word	0x46020c00
 8001e50:	42020000 	.word	0x42020000

08001e54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001e54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e8c <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e58:	f7ff feb2 	bl	8001bc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001e5c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001e5e:	e003      	b.n	8001e68 <LoopCopyDataInit>

08001e60 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001e60:	4b0b      	ldr	r3, [pc, #44]	@ (8001e90 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001e62:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001e64:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001e66:	3104      	adds	r1, #4

08001e68 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001e68:	480a      	ldr	r0, [pc, #40]	@ (8001e94 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001e6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e98 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001e6c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001e6e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001e70:	d3f6      	bcc.n	8001e60 <CopyDataInit>
	ldr	r2, =_sbss
 8001e72:	4a0a      	ldr	r2, [pc, #40]	@ (8001e9c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001e74:	e002      	b.n	8001e7c <LoopFillZerobss>

08001e76 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001e76:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001e78:	f842 3b04 	str.w	r3, [r2], #4

08001e7c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001e7c:	4b08      	ldr	r3, [pc, #32]	@ (8001ea0 <LoopForever+0x16>)
	cmp	r2, r3
 8001e7e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001e80:	d3f9      	bcc.n	8001e76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e82:	f02b f9ab 	bl	802d1dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e86:	f7ff fb15 	bl	80014b4 <main>

08001e8a <LoopForever>:

LoopForever:
    b LoopForever
 8001e8a:	e7fe      	b.n	8001e8a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001e8c:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001e90:	08031214 	.word	0x08031214
	ldr	r0, =_sdata
 8001e94:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001e98:	200000fc 	.word	0x200000fc
	ldr	r2, =_sbss
 8001e9c:	20045900 	.word	0x20045900
	ldr	r3, = _ebss
 8001ea0:	2005c7bc 	.word	0x2005c7bc

08001ea4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ea4:	e7fe      	b.n	8001ea4 <ADC1_IRQHandler>
	...

08001ea8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001eac:	4b12      	ldr	r3, [pc, #72]	@ (8001ef8 <HAL_Init+0x50>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a11      	ldr	r2, [pc, #68]	@ (8001ef8 <HAL_Init+0x50>)
 8001eb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eb8:	2003      	movs	r0, #3
 8001eba:	f000 f916 	bl	80020ea <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001ebe:	f005 fccf 	bl	8007860 <HAL_RCC_GetSysClockFreq>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	4b0d      	ldr	r3, [pc, #52]	@ (8001efc <HAL_Init+0x54>)
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	f003 030f 	and.w	r3, r3, #15
 8001ecc:	490c      	ldr	r1, [pc, #48]	@ (8001f00 <HAL_Init+0x58>)
 8001ece:	5ccb      	ldrb	r3, [r1, r3]
 8001ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed4:	4a0b      	ldr	r2, [pc, #44]	@ (8001f04 <HAL_Init+0x5c>)
 8001ed6:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001ed8:	2004      	movs	r0, #4
 8001eda:	f000 f939 	bl	8002150 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ede:	2000      	movs	r0, #0
 8001ee0:	f7ff fcea 	bl	80018b8 <HAL_InitTick>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e002      	b.n	8001ef4 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001eee:	f7ff fcc5 	bl	800187c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40022000 	.word	0x40022000
 8001efc:	46020c00 	.word	0x46020c00
 8001f00:	0802e97c 	.word	0x0802e97c
 8001f04:	20000004 	.word	0x20000004

08001f08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f0c:	4b06      	ldr	r3, [pc, #24]	@ (8001f28 <HAL_IncTick+0x20>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	461a      	mov	r2, r3
 8001f12:	4b06      	ldr	r3, [pc, #24]	@ (8001f2c <HAL_IncTick+0x24>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4413      	add	r3, r2
 8001f18:	4a04      	ldr	r2, [pc, #16]	@ (8001f2c <HAL_IncTick+0x24>)
 8001f1a:	6013      	str	r3, [r2, #0]
}
 8001f1c:	bf00      	nop
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	2000000c 	.word	0x2000000c
 8001f2c:	20045c88 	.word	0x20045c88

08001f30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  return uwTick;
 8001f34:	4b03      	ldr	r3, [pc, #12]	@ (8001f44 <HAL_GetTick+0x14>)
 8001f36:	681b      	ldr	r3, [r3, #0]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	20045c88 	.word	0x20045c88

08001f48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f50:	f7ff ffee 	bl	8001f30 <HAL_GetTick>
 8001f54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f60:	d005      	beq.n	8001f6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f62:	4b0a      	ldr	r3, [pc, #40]	@ (8001f8c <HAL_Delay+0x44>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	461a      	mov	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f6e:	bf00      	nop
 8001f70:	f7ff ffde 	bl	8001f30 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d8f7      	bhi.n	8001f70 <HAL_Delay+0x28>
  {
  }
}
 8001f80:	bf00      	nop
 8001f82:	bf00      	nop
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	2000000c 	.word	0x2000000c

08001f90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fac:	4013      	ands	r3, r2
 8001fae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fb8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fc2:	4a04      	ldr	r2, [pc, #16]	@ (8001fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	60d3      	str	r3, [r2, #12]
}
 8001fc8:	bf00      	nop
 8001fca:	3714      	adds	r7, #20
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	e000ed00 	.word	0xe000ed00

08001fd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fdc:	4b04      	ldr	r3, [pc, #16]	@ (8001ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	0a1b      	lsrs	r3, r3, #8
 8001fe2:	f003 0307 	and.w	r3, r3, #7
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	e000ed00 	.word	0xe000ed00

08001ff4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002002:	2b00      	cmp	r3, #0
 8002004:	db0b      	blt.n	800201e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002006:	79fb      	ldrb	r3, [r7, #7]
 8002008:	f003 021f 	and.w	r2, r3, #31
 800200c:	4907      	ldr	r1, [pc, #28]	@ (800202c <__NVIC_EnableIRQ+0x38>)
 800200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002012:	095b      	lsrs	r3, r3, #5
 8002014:	2001      	movs	r0, #1
 8002016:	fa00 f202 	lsl.w	r2, r0, r2
 800201a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	e000e100 	.word	0xe000e100

08002030 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	6039      	str	r1, [r7, #0]
 800203a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800203c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002040:	2b00      	cmp	r3, #0
 8002042:	db0a      	blt.n	800205a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	b2da      	uxtb	r2, r3
 8002048:	490c      	ldr	r1, [pc, #48]	@ (800207c <__NVIC_SetPriority+0x4c>)
 800204a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204e:	0112      	lsls	r2, r2, #4
 8002050:	b2d2      	uxtb	r2, r2
 8002052:	440b      	add	r3, r1
 8002054:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002058:	e00a      	b.n	8002070 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	b2da      	uxtb	r2, r3
 800205e:	4908      	ldr	r1, [pc, #32]	@ (8002080 <__NVIC_SetPriority+0x50>)
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	3b04      	subs	r3, #4
 8002068:	0112      	lsls	r2, r2, #4
 800206a:	b2d2      	uxtb	r2, r2
 800206c:	440b      	add	r3, r1
 800206e:	761a      	strb	r2, [r3, #24]
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	e000e100 	.word	0xe000e100
 8002080:	e000ed00 	.word	0xe000ed00

08002084 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002084:	b480      	push	{r7}
 8002086:	b089      	sub	sp, #36	@ 0x24
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	f1c3 0307 	rsb	r3, r3, #7
 800209e:	2b04      	cmp	r3, #4
 80020a0:	bf28      	it	cs
 80020a2:	2304      	movcs	r3, #4
 80020a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	3304      	adds	r3, #4
 80020aa:	2b06      	cmp	r3, #6
 80020ac:	d902      	bls.n	80020b4 <NVIC_EncodePriority+0x30>
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	3b03      	subs	r3, #3
 80020b2:	e000      	b.n	80020b6 <NVIC_EncodePriority+0x32>
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b8:	f04f 32ff 	mov.w	r2, #4294967295
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	43da      	mvns	r2, r3
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	401a      	ands	r2, r3
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020cc:	f04f 31ff 	mov.w	r1, #4294967295
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	fa01 f303 	lsl.w	r3, r1, r3
 80020d6:	43d9      	mvns	r1, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020dc:	4313      	orrs	r3, r2
         );
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3724      	adds	r7, #36	@ 0x24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b082      	sub	sp, #8
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f7ff ff4c 	bl	8001f90 <__NVIC_SetPriorityGrouping>
}
 80020f8:	bf00      	nop
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	4603      	mov	r3, r0
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
 800210c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800210e:	f7ff ff63 	bl	8001fd8 <__NVIC_GetPriorityGrouping>
 8002112:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	68b9      	ldr	r1, [r7, #8]
 8002118:	6978      	ldr	r0, [r7, #20]
 800211a:	f7ff ffb3 	bl	8002084 <NVIC_EncodePriority>
 800211e:	4602      	mov	r2, r0
 8002120:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002124:	4611      	mov	r1, r2
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff ff82 	bl	8002030 <__NVIC_SetPriority>
}
 800212c:	bf00      	nop
 800212e:	3718      	adds	r7, #24
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800213e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002142:	4618      	mov	r0, r3
 8002144:	f7ff ff56 	bl	8001ff4 <__NVIC_EnableIRQ>
}
 8002148:	bf00      	nop
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b04      	cmp	r3, #4
 800215c:	d844      	bhi.n	80021e8 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800215e:	a201      	add	r2, pc, #4	@ (adr r2, 8002164 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002164:	08002187 	.word	0x08002187
 8002168:	080021a5 	.word	0x080021a5
 800216c:	080021c7 	.word	0x080021c7
 8002170:	080021e9 	.word	0x080021e9
 8002174:	08002179 	.word	0x08002179
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002178:	4b1f      	ldr	r3, [pc, #124]	@ (80021f8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a1e      	ldr	r2, [pc, #120]	@ (80021f8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800217e:	f043 0304 	orr.w	r3, r3, #4
 8002182:	6013      	str	r3, [r2, #0]
      break;
 8002184:	e031      	b.n	80021ea <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002186:	4b1c      	ldr	r3, [pc, #112]	@ (80021f8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a1b      	ldr	r2, [pc, #108]	@ (80021f8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800218c:	f023 0304 	bic.w	r3, r3, #4
 8002190:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8002192:	4b1a      	ldr	r3, [pc, #104]	@ (80021fc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002194:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002198:	4a18      	ldr	r2, [pc, #96]	@ (80021fc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800219a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800219e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80021a2:	e022      	b.n	80021ea <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80021a4:	4b14      	ldr	r3, [pc, #80]	@ (80021f8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a13      	ldr	r2, [pc, #76]	@ (80021f8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80021aa:	f023 0304 	bic.w	r3, r3, #4
 80021ae:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 80021b0:	4b12      	ldr	r3, [pc, #72]	@ (80021fc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80021b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021b6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80021ba:	4a10      	ldr	r2, [pc, #64]	@ (80021fc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80021bc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80021c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80021c4:	e011      	b.n	80021ea <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80021c6:	4b0c      	ldr	r3, [pc, #48]	@ (80021f8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a0b      	ldr	r2, [pc, #44]	@ (80021f8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80021cc:	f023 0304 	bic.w	r3, r3, #4
 80021d0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 80021d2:	4b0a      	ldr	r3, [pc, #40]	@ (80021fc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80021d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021d8:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80021dc:	4a07      	ldr	r2, [pc, #28]	@ (80021fc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80021de:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80021e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80021e6:	e000      	b.n	80021ea <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80021e8:	bf00      	nop
  }
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	e000e010 	.word	0xe000e010
 80021fc:	46020c00 	.word	0x46020c00

08002200 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e054      	b.n	80022bc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	7f5b      	ldrb	r3, [r3, #29]
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b00      	cmp	r3, #0
 800221a:	d105      	bne.n	8002228 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7fe ff4e 	bl	80010c4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2202      	movs	r2, #2
 800222c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	791b      	ldrb	r3, [r3, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d10c      	bne.n	8002250 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a22      	ldr	r2, [pc, #136]	@ (80022c4 <HAL_CRC_Init+0xc4>)
 800223c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	689a      	ldr	r2, [r3, #8]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 0218 	bic.w	r2, r2, #24
 800224c:	609a      	str	r2, [r3, #8]
 800224e:	e00c      	b.n	800226a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6899      	ldr	r1, [r3, #8]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	461a      	mov	r2, r3
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 f834 	bl	80022c8 <HAL_CRCEx_Polynomial_Set>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e028      	b.n	80022bc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	795b      	ldrb	r3, [r3, #5]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d105      	bne.n	800227e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f04f 32ff 	mov.w	r2, #4294967295
 800227a:	611a      	str	r2, [r3, #16]
 800227c:	e004      	b.n	8002288 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	6912      	ldr	r2, [r2, #16]
 8002286:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	695a      	ldr	r2, [r3, #20]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	430a      	orrs	r2, r1
 800229c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	699a      	ldr	r2, [r3, #24]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	430a      	orrs	r2, r1
 80022b2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	04c11db7 	.word	0x04c11db7

080022c8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b087      	sub	sp, #28
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022d4:	2300      	movs	r3, #0
 80022d6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80022d8:	231f      	movs	r3, #31
 80022da:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d102      	bne.n	80022ec <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	75fb      	strb	r3, [r7, #23]
 80022ea:	e063      	b.n	80023b4 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80022ec:	bf00      	nop
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1e5a      	subs	r2, r3, #1
 80022f2:	613a      	str	r2, [r7, #16]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d009      	beq.n	800230c <HAL_CRCEx_Polynomial_Set+0x44>
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	f003 031f 	and.w	r3, r3, #31
 80022fe:	68ba      	ldr	r2, [r7, #8]
 8002300:	fa22 f303 	lsr.w	r3, r2, r3
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0f0      	beq.n	80022ee <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b18      	cmp	r3, #24
 8002310:	d846      	bhi.n	80023a0 <HAL_CRCEx_Polynomial_Set+0xd8>
 8002312:	a201      	add	r2, pc, #4	@ (adr r2, 8002318 <HAL_CRCEx_Polynomial_Set+0x50>)
 8002314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002318:	080023a7 	.word	0x080023a7
 800231c:	080023a1 	.word	0x080023a1
 8002320:	080023a1 	.word	0x080023a1
 8002324:	080023a1 	.word	0x080023a1
 8002328:	080023a1 	.word	0x080023a1
 800232c:	080023a1 	.word	0x080023a1
 8002330:	080023a1 	.word	0x080023a1
 8002334:	080023a1 	.word	0x080023a1
 8002338:	08002395 	.word	0x08002395
 800233c:	080023a1 	.word	0x080023a1
 8002340:	080023a1 	.word	0x080023a1
 8002344:	080023a1 	.word	0x080023a1
 8002348:	080023a1 	.word	0x080023a1
 800234c:	080023a1 	.word	0x080023a1
 8002350:	080023a1 	.word	0x080023a1
 8002354:	080023a1 	.word	0x080023a1
 8002358:	08002389 	.word	0x08002389
 800235c:	080023a1 	.word	0x080023a1
 8002360:	080023a1 	.word	0x080023a1
 8002364:	080023a1 	.word	0x080023a1
 8002368:	080023a1 	.word	0x080023a1
 800236c:	080023a1 	.word	0x080023a1
 8002370:	080023a1 	.word	0x080023a1
 8002374:	080023a1 	.word	0x080023a1
 8002378:	0800237d 	.word	0x0800237d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	2b06      	cmp	r3, #6
 8002380:	d913      	bls.n	80023aa <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002386:	e010      	b.n	80023aa <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	2b07      	cmp	r3, #7
 800238c:	d90f      	bls.n	80023ae <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002392:	e00c      	b.n	80023ae <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	2b0f      	cmp	r3, #15
 8002398:	d90b      	bls.n	80023b2 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800239e:	e008      	b.n	80023b2 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	75fb      	strb	r3, [r7, #23]
        break;
 80023a4:	e006      	b.n	80023b4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80023a6:	bf00      	nop
 80023a8:	e004      	b.n	80023b4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80023aa:	bf00      	nop
 80023ac:	e002      	b.n	80023b4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80023ae:	bf00      	nop
 80023b0:	e000      	b.n	80023b4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80023b2:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80023b4:	7dfb      	ldrb	r3, [r7, #23]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10d      	bne.n	80023d6 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68ba      	ldr	r2, [r7, #8]
 80023c0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f023 0118 	bic.w	r1, r3, #24
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80023d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	371c      	adds	r7, #28
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
 80023f0:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e04f      	b.n	800249c <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002402:	2b01      	cmp	r3, #1
 8002404:	d101      	bne.n	800240a <HAL_DMA_Start_IT+0x26>
 8002406:	2302      	movs	r3, #2
 8002408:	e048      	b.n	800249c <HAL_DMA_Start_IT+0xb8>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b01      	cmp	r3, #1
 800241c:	d136      	bne.n	800248c <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2202      	movs	r2, #2
 8002422:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	68b9      	ldr	r1, [r7, #8]
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f000 fabc 	bl	80029b0 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	695a      	ldr	r2, [r3, #20]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8002446:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800244c:	2b00      	cmp	r3, #0
 800244e:	d007      	beq.n	8002460 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	695a      	ldr	r2, [r3, #20]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800245e:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002464:	2b00      	cmp	r3, #0
 8002466:	d007      	beq.n	8002478 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	695a      	ldr	r2, [r3, #20]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002476:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	695a      	ldr	r2, [r3, #20]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f042 0201 	orr.w	r2, r2, #1
 8002486:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8002488:	2300      	movs	r3, #0
 800248a:	e007      	b.n	800249c <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2240      	movs	r2, #64	@ 0x40
 8002490:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
}
 800249c:	4618      	mov	r0, r3
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 80024ac:	f7ff fd40 	bl	8001f30 <HAL_GetTick>
 80024b0:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e06b      	b.n	8002594 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d008      	beq.n	80024da <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2220      	movs	r2, #32
 80024cc:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e05c      	b.n	8002594 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	695a      	ldr	r2, [r3, #20]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f042 0204 	orr.w	r2, r2, #4
 80024e8:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2205      	movs	r2, #5
 80024ee:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80024f2:	e020      	b.n	8002536 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80024f4:	f7ff fd1c 	bl	8001f30 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b05      	cmp	r3, #5
 8002500:	d919      	bls.n	8002536 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002506:	f043 0210 	orr.w	r2, r3, #16
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2203      	movs	r2, #3
 8002512:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800251a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002526:	2201      	movs	r2, #1
 8002528:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e02e      	b.n	8002594 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d0d7      	beq.n	80024f4 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	695a      	ldr	r2, [r3, #20]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0202 	orr.w	r2, r2, #2
 8002552:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2204      	movs	r2, #4
 8002558:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8002564:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2201      	movs	r2, #1
 800256a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002576:	2b00      	cmp	r3, #0
 8002578:	d007      	beq.n	800258a <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800257e:	2201      	movs	r2, #1
 8002580:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2200      	movs	r2, #0
 8002588:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3710      	adds	r7, #16
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e019      	b.n	80025e2 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d004      	beq.n	80025c4 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2220      	movs	r2, #32
 80025be:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e00e      	b.n	80025e2 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2204      	movs	r2, #4
 80025c8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	6812      	ldr	r2, [r2, #0]
 80025d6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80025da:	f043 0304 	orr.w	r3, r3, #4
 80025de:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b086      	sub	sp, #24
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80025fe:	f023 030f 	bic.w	r3, r3, #15
 8002602:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800260c:	3b50      	subs	r3, #80	@ 0x50
 800260e:	09db      	lsrs	r3, r3, #7
 8002610:	f003 031f 	and.w	r3, r3, #31
 8002614:	2201      	movs	r2, #1
 8002616:	fa02 f303 	lsl.w	r3, r2, r3
 800261a:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	4013      	ands	r3, r2
 8002624:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2b00      	cmp	r3, #0
 800262a:	f000 813b 	beq.w	80028a4 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002638:	2b00      	cmp	r3, #0
 800263a:	d011      	beq.n	8002660 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00a      	beq.n	8002660 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002652:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002658:	f043 0201 	orr.w	r2, r3, #1
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800266a:	2b00      	cmp	r3, #0
 800266c:	d011      	beq.n	8002692 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	695b      	ldr	r3, [r3, #20]
 8002674:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00a      	beq.n	8002692 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002684:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800268a:	f043 0202 	orr.w	r2, r3, #2
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d011      	beq.n	80026c4 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00a      	beq.n	80026c4 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80026b6:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026bc:	f043 0204 	orr.w	r2, r3, #4
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d011      	beq.n	80026f6 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00a      	beq.n	80026f6 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80026e8:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ee:	f043 0208 	orr.w	r2, r3, #8
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002700:	2b00      	cmp	r3, #0
 8002702:	d013      	beq.n	800272c <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00c      	beq.n	800272c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800271a:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002720:	2b00      	cmp	r3, #0
 8002722:	d003      	beq.n	800272c <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d04c      	beq.n	80027d4 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	695b      	ldr	r3, [r3, #20]
 8002740:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d045      	beq.n	80027d4 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002750:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b04      	cmp	r3, #4
 800275c:	d12e      	bne.n	80027bc <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	695a      	ldr	r2, [r3, #20]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800276c:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	695a      	ldr	r2, [r3, #20]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f042 0202 	orr.w	r2, r2, #2
 800277c:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800278a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800278e:	2b00      	cmp	r3, #0
 8002790:	d007      	beq.n	80027a2 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002796:	2201      	movs	r2, #1
 8002798:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2200      	movs	r2, #0
 80027a0:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d07a      	beq.n	80028a8 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	4798      	blx	r3
        }

        return;
 80027ba:	e075      	b.n	80028a8 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2205      	movs	r2, #5
 80027c0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d039      	beq.n	8002856 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	695b      	ldr	r3, [r3, #20]
 80027e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d032      	beq.n	8002856 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d012      	beq.n	8002822 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002802:	2b00      	cmp	r3, #0
 8002804:	d116      	bne.n	8002834 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800280c:	2b00      	cmp	r3, #0
 800280e:	d111      	bne.n	8002834 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800281c:	2201      	movs	r2, #1
 800281e:	731a      	strb	r2, [r3, #12]
 8002820:	e008      	b.n	8002834 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002828:	2b00      	cmp	r3, #0
 800282a:	d103      	bne.n	8002834 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800283c:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800285a:	2b00      	cmp	r3, #0
 800285c:	d025      	beq.n	80028aa <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	695a      	ldr	r2, [r3, #20]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f042 0202 	orr.w	r2, r2, #2
 800286c:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2201      	movs	r2, #1
 8002872:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800287a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002886:	2201      	movs	r2, #1
 8002888:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002896:	2b00      	cmp	r3, #0
 8002898:	d007      	beq.n	80028aa <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	4798      	blx	r3
 80028a2:	e002      	b.n	80028aa <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 80028a4:	bf00      	nop
 80028a6:	e000      	b.n	80028aa <HAL_DMA_IRQHandler+0x2bc>
        return;
 80028a8:	bf00      	nop
    }
  }
}
 80028aa:	3718      	adds	r7, #24
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <HAL_DMA_RegisterCallback>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *const hdma,
                                           HAL_DMA_CallbackIDTypeDef CallbackID,
                                           void (*const pCallback)(DMA_HandleTypeDef *const _hdma))
{
 80028b0:	b480      	push	{r7}
 80028b2:	b087      	sub	sp, #28
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	460b      	mov	r3, r1
 80028ba:	607a      	str	r2, [r7, #4]
 80028bc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80028be:	2300      	movs	r3, #0
 80028c0:	75fb      	strb	r3, [r7, #23]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d101      	bne.n	80028cc <HAL_DMA_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e02f      	b.n	800292c <HAL_DMA_RegisterCallback+0x7c>
  }

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d126      	bne.n	8002926 <HAL_DMA_RegisterCallback+0x76>
  {
    /* Check callback ID */
    switch (CallbackID)
 80028d8:	7afb      	ldrb	r3, [r7, #11]
 80028da:	2b04      	cmp	r3, #4
 80028dc:	d820      	bhi.n	8002920 <HAL_DMA_RegisterCallback+0x70>
 80028de:	a201      	add	r2, pc, #4	@ (adr r2, 80028e4 <HAL_DMA_RegisterCallback+0x34>)
 80028e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028e4:	080028f9 	.word	0x080028f9
 80028e8:	08002901 	.word	0x08002901
 80028ec:	08002909 	.word	0x08002909
 80028f0:	08002911 	.word	0x08002911
 80028f4:	08002919 	.word	0x08002919
    {
      case HAL_DMA_XFER_CPLT_CB_ID:
      {
        /* Register transfer complete callback */
        hdma->XferCpltCallback = pCallback;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80028fe:	e014      	b.n	800292a <HAL_DMA_RegisterCallback+0x7a>
      }

      case HAL_DMA_XFER_HALFCPLT_CB_ID:
      {
        /* Register half transfer callback */
        hdma->XferHalfCpltCallback = pCallback;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8002906:	e010      	b.n	800292a <HAL_DMA_RegisterCallback+0x7a>
      }

      case HAL_DMA_XFER_ERROR_CB_ID:
      {
        /* Register transfer error callback */
        hdma->XferErrorCallback = pCallback;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800290e:	e00c      	b.n	800292a <HAL_DMA_RegisterCallback+0x7a>
      }

      case HAL_DMA_XFER_ABORT_CB_ID:
      {
        /* Register abort callback */
        hdma->XferAbortCallback = pCallback;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8002916:	e008      	b.n	800292a <HAL_DMA_RegisterCallback+0x7a>
      }

      case HAL_DMA_XFER_SUSPEND_CB_ID:
      {
        /* Register suspend callback */
        hdma->XferSuspendCallback = pCallback;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800291e:	e004      	b.n	800292a <HAL_DMA_RegisterCallback+0x7a>
      }

      default:
      {
        /* Update error status */
        status = HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	75fb      	strb	r3, [r7, #23]
        break;
 8002924:	e001      	b.n	800292a <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    /* Update error status */
    status =  HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800292a:	7dfb      	ldrb	r3, [r7, #23]
}
 800292c:	4618      	mov	r0, r3
 800292e:	371c      	adds	r7, #28
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e02b      	b.n	80029a4 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002954:	f023 030f 	bic.w	r3, r3, #15
 8002958:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002962:	3b50      	subs	r3, #80	@ 0x50
 8002964:	09db      	lsrs	r3, r3, #7
 8002966:	f003 031f 	and.w	r3, r3, #31
 800296a:	2201      	movs	r2, #1
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	f003 0310 	and.w	r3, r3, #16
 8002978:	2b00      	cmp	r3, #0
 800297a:	d012      	beq.n	80029a2 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	f003 0311 	and.w	r3, r3, #17
 8002982:	2b11      	cmp	r3, #17
 8002984:	d106      	bne.n	8002994 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	431a      	orrs	r2, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	605a      	str	r2, [r3, #4]
 8002992:	e006      	b.n	80029a2 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	685a      	ldr	r2, [r3, #4]
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	43db      	mvns	r3, r3
 800299c:	401a      	ands	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3714      	adds	r7, #20
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
 80029bc:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029c4:	0c1b      	lsrs	r3, r3, #16
 80029c6:	041b      	lsls	r3, r3, #16
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	b291      	uxth	r1, r2
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	6812      	ldr	r2, [r2, #0]
 80029d0:	430b      	orrs	r3, r1
 80029d2:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80029dc:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80029ee:	bf00      	nop
 80029f0:	3714      	adds	r7, #20
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b082      	sub	sp, #8
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d101      	bne.n	8002a0c <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e053      	b.n	8002ab4 <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d106      	bne.n	8002a26 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7fe fbaf 	bl	8001184 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2202      	movs	r2, #2
 8002a2a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002a38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6851      	ldr	r1, [r2, #4]
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	69d2      	ldr	r2, [r2, #28]
 8002a44:	4311      	orrs	r1, r2
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	6812      	ldr	r2, [r2, #0]
 8002a4a:	430b      	orrs	r3, r1
 8002a4c:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a54:	f423 7383 	bic.w	r3, r3, #262	@ 0x106
 8002a58:	f023 0301 	bic.w	r3, r3, #1
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	6891      	ldr	r1, [r2, #8]
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	6992      	ldr	r2, [r2, #24]
 8002a64:	4311      	orrs	r1, r2
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	6812      	ldr	r2, [r2, #0]
 8002a6a:	430b      	orrs	r3, r1
 8002a6c:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a74:	0c1b      	lsrs	r3, r3, #16
 8002a76:	041b      	lsls	r3, r3, #16
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	68d1      	ldr	r1, [r2, #12]
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	6812      	ldr	r2, [r2, #0]
 8002a80:	430b      	orrs	r3, r1
 8002a82:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a8a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	051a      	lsls	r2, r3, #20
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	695b      	ldr	r3, [r3, #20]
 8002a98:	055b      	lsls	r3, r3, #21
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d026      	beq.n	8002b2c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d021      	beq.n	8002b2c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002af6:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002afc:	f043 0201 	orr.w	r2, r3, #1
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2204      	movs	r2, #4
 8002b10:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      if (hdma2d->XferErrorCallback != NULL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d003      	beq.n	8002b2c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f003 0320 	and.w	r3, r3, #32
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d026      	beq.n	8002b84 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d021      	beq.n	8002b84 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b4e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2220      	movs	r2, #32
 8002b56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b5c:	f043 0202 	orr.w	r2, r3, #2
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2204      	movs	r2, #4
 8002b68:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      if (hdma2d->XferErrorCallback != NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d003      	beq.n	8002b84 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f003 0308 	and.w	r3, r3, #8
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d026      	beq.n	8002bdc <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d021      	beq.n	8002bdc <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ba6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2208      	movs	r2, #8
 8002bae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bb4:	f043 0204 	orr.w	r2, r3, #4
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2204      	movs	r2, #4
 8002bc0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      if (hdma2d->XferErrorCallback != NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d003      	beq.n	8002bdc <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f003 0304 	and.w	r3, r3, #4
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d013      	beq.n	8002c0e <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d00e      	beq.n	8002c0e <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bfe:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2204      	movs	r2, #4
 8002c06:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 f853 	bl	8002cb4 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d024      	beq.n	8002c62 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d01f      	beq.n	8002c62 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002c30:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2202      	movs	r2, #2
 8002c38:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      if (hdma2d->XferCpltCallback != NULL)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f003 0310 	and.w	r3, r3, #16
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d01f      	beq.n	8002cac <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d01a      	beq.n	8002cac <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002c84:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2210      	movs	r2, #16
 8002c8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 f80e 	bl	8002cc8 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002cac:	bf00      	nop
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b087      	sub	sp, #28
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

#endif /* DMA2D_FGPFCCR_CSS */
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d101      	bne.n	8002cfc <HAL_DMA2D_ConfigLayer+0x20>
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	e084      	b.n	8002e06 <HAL_DMA2D_ConfigLayer+0x12a>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2202      	movs	r2, #2
 8002d08:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	4413      	add	r3, r2
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	3328      	adds	r3, #40	@ 0x28
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	041b      	lsls	r3, r3, #16
 8002d28:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002d30:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8002d3c:	4b35      	ldr	r3, [pc, #212]	@ (8002e14 <HAL_DMA2D_ConfigLayer+0x138>)
 8002d3e:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	2b0a      	cmp	r3, #10
 8002d46:	d003      	beq.n	8002d50 <HAL_DMA2D_ConfigLayer+0x74>
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	2b09      	cmp	r3, #9
 8002d4e:	d107      	bne.n	8002d60 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002d58:	697a      	ldr	r2, [r7, #20]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	617b      	str	r3, [r7, #20]
 8002d5e:	e005      	b.n	8002d6c <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	061b      	lsls	r3, r3, #24
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d120      	bne.n	8002db4 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	ea02 0103 	and.w	r1, r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	6812      	ldr	r2, [r2, #0]
 8002d92:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	2b0a      	cmp	r3, #10
 8002d9a:	d003      	beq.n	8002da4 <HAL_DMA2D_ConfigLayer+0xc8>
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	2b09      	cmp	r3, #9
 8002da2:	d127      	bne.n	8002df4 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	68da      	ldr	r2, [r3, #12]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002db0:	629a      	str	r2, [r3, #40]	@ 0x28
 8002db2:	e01f      	b.n	8002df4 <HAL_DMA2D_ConfigLayer+0x118>
      regMask  |= DMA2D_FGPFCCR_CSS;
    }
#endif /* DMA2D_FGPFCCR_CSS */

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	69da      	ldr	r2, [r3, #28]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	ea02 0103 	and.w	r1, r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	6812      	ldr	r2, [r2, #0]
 8002dd4:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	2b0a      	cmp	r3, #10
 8002ddc:	d003      	beq.n	8002de6 <HAL_DMA2D_ConfigLayer+0x10a>
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	2b09      	cmp	r3, #9
 8002de4:	d106      	bne.n	8002df4 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	68da      	ldr	r2, [r3, #12]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002df2:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	371c      	adds	r7, #28
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	ff33000f 	.word	0xff33000f

08002e18 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8002e20:	f7ff f886 	bl	8001f30 <HAL_GetTick>
 8002e24:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d101      	bne.n	8002e30 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e0db      	b.n	8002fe8 <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a6e      	ldr	r2, [pc, #440]	@ (8002ff0 <HAL_DMAEx_List_Init+0x1d8>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	f000 809f 	beq.w	8002f7a <HAL_DMAEx_List_Init+0x162>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a6c      	ldr	r2, [pc, #432]	@ (8002ff4 <HAL_DMAEx_List_Init+0x1dc>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	f000 8099 	beq.w	8002f7a <HAL_DMAEx_List_Init+0x162>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a6a      	ldr	r2, [pc, #424]	@ (8002ff8 <HAL_DMAEx_List_Init+0x1e0>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	f000 8093 	beq.w	8002f7a <HAL_DMAEx_List_Init+0x162>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a68      	ldr	r2, [pc, #416]	@ (8002ffc <HAL_DMAEx_List_Init+0x1e4>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	f000 808d 	beq.w	8002f7a <HAL_DMAEx_List_Init+0x162>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a66      	ldr	r2, [pc, #408]	@ (8003000 <HAL_DMAEx_List_Init+0x1e8>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	f000 8087 	beq.w	8002f7a <HAL_DMAEx_List_Init+0x162>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a64      	ldr	r2, [pc, #400]	@ (8003004 <HAL_DMAEx_List_Init+0x1ec>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	f000 8081 	beq.w	8002f7a <HAL_DMAEx_List_Init+0x162>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a62      	ldr	r2, [pc, #392]	@ (8003008 <HAL_DMAEx_List_Init+0x1f0>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d07b      	beq.n	8002f7a <HAL_DMAEx_List_Init+0x162>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a61      	ldr	r2, [pc, #388]	@ (800300c <HAL_DMAEx_List_Init+0x1f4>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d076      	beq.n	8002f7a <HAL_DMAEx_List_Init+0x162>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a5f      	ldr	r2, [pc, #380]	@ (8003010 <HAL_DMAEx_List_Init+0x1f8>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d071      	beq.n	8002f7a <HAL_DMAEx_List_Init+0x162>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a5e      	ldr	r2, [pc, #376]	@ (8003014 <HAL_DMAEx_List_Init+0x1fc>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d06c      	beq.n	8002f7a <HAL_DMAEx_List_Init+0x162>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a5c      	ldr	r2, [pc, #368]	@ (8003018 <HAL_DMAEx_List_Init+0x200>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d067      	beq.n	8002f7a <HAL_DMAEx_List_Init+0x162>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a5b      	ldr	r2, [pc, #364]	@ (800301c <HAL_DMAEx_List_Init+0x204>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d062      	beq.n	8002f7a <HAL_DMAEx_List_Init+0x162>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a59      	ldr	r2, [pc, #356]	@ (8003020 <HAL_DMAEx_List_Init+0x208>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d05d      	beq.n	8002f7a <HAL_DMAEx_List_Init+0x162>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a58      	ldr	r2, [pc, #352]	@ (8003024 <HAL_DMAEx_List_Init+0x20c>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d058      	beq.n	8002f7a <HAL_DMAEx_List_Init+0x162>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a56      	ldr	r2, [pc, #344]	@ (8003028 <HAL_DMAEx_List_Init+0x210>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d053      	beq.n	8002f7a <HAL_DMAEx_List_Init+0x162>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a55      	ldr	r2, [pc, #340]	@ (800302c <HAL_DMAEx_List_Init+0x214>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d04e      	beq.n	8002f7a <HAL_DMAEx_List_Init+0x162>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a53      	ldr	r2, [pc, #332]	@ (8003030 <HAL_DMAEx_List_Init+0x218>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d049      	beq.n	8002f7a <HAL_DMAEx_List_Init+0x162>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a52      	ldr	r2, [pc, #328]	@ (8003034 <HAL_DMAEx_List_Init+0x21c>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d044      	beq.n	8002f7a <HAL_DMAEx_List_Init+0x162>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a50      	ldr	r2, [pc, #320]	@ (8003038 <HAL_DMAEx_List_Init+0x220>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d03f      	beq.n	8002f7a <HAL_DMAEx_List_Init+0x162>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a4f      	ldr	r2, [pc, #316]	@ (800303c <HAL_DMAEx_List_Init+0x224>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d03a      	beq.n	8002f7a <HAL_DMAEx_List_Init+0x162>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a4d      	ldr	r2, [pc, #308]	@ (8003040 <HAL_DMAEx_List_Init+0x228>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d035      	beq.n	8002f7a <HAL_DMAEx_List_Init+0x162>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a4c      	ldr	r2, [pc, #304]	@ (8003044 <HAL_DMAEx_List_Init+0x22c>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d030      	beq.n	8002f7a <HAL_DMAEx_List_Init+0x162>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a4a      	ldr	r2, [pc, #296]	@ (8003048 <HAL_DMAEx_List_Init+0x230>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d02b      	beq.n	8002f7a <HAL_DMAEx_List_Init+0x162>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a49      	ldr	r2, [pc, #292]	@ (800304c <HAL_DMAEx_List_Init+0x234>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d026      	beq.n	8002f7a <HAL_DMAEx_List_Init+0x162>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a47      	ldr	r2, [pc, #284]	@ (8003050 <HAL_DMAEx_List_Init+0x238>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d021      	beq.n	8002f7a <HAL_DMAEx_List_Init+0x162>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a46      	ldr	r2, [pc, #280]	@ (8003054 <HAL_DMAEx_List_Init+0x23c>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d01c      	beq.n	8002f7a <HAL_DMAEx_List_Init+0x162>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a44      	ldr	r2, [pc, #272]	@ (8003058 <HAL_DMAEx_List_Init+0x240>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d017      	beq.n	8002f7a <HAL_DMAEx_List_Init+0x162>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a43      	ldr	r2, [pc, #268]	@ (800305c <HAL_DMAEx_List_Init+0x244>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d012      	beq.n	8002f7a <HAL_DMAEx_List_Init+0x162>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a41      	ldr	r2, [pc, #260]	@ (8003060 <HAL_DMAEx_List_Init+0x248>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d00d      	beq.n	8002f7a <HAL_DMAEx_List_Init+0x162>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a40      	ldr	r2, [pc, #256]	@ (8003064 <HAL_DMAEx_List_Init+0x24c>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d008      	beq.n	8002f7a <HAL_DMAEx_List_Init+0x162>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a3e      	ldr	r2, [pc, #248]	@ (8003068 <HAL_DMAEx_List_Init+0x250>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d003      	beq.n	8002f7a <HAL_DMAEx_List_Init+0x162>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a3d      	ldr	r2, [pc, #244]	@ (800306c <HAL_DMAEx_List_Init+0x254>)
 8002f78:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2202      	movs	r2, #2
 8002f86:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	695a      	ldr	r2, [r3, #20]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f042 0206 	orr.w	r2, r2, #6
 8002f98:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002f9a:	e00f      	b.n	8002fbc <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002f9c:	f7fe ffc8 	bl	8001f30 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b05      	cmp	r3, #5
 8002fa8:	d908      	bls.n	8002fbc <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2210      	movs	r2, #16
 8002fae:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2203      	movs	r2, #3
 8002fb4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e015      	b.n	8002fe8 <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1e8      	bne.n	8002f9c <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 fabc 	bl	8003548 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	40020050 	.word	0x40020050
 8002ff4:	50020050 	.word	0x50020050
 8002ff8:	400200d0 	.word	0x400200d0
 8002ffc:	500200d0 	.word	0x500200d0
 8003000:	40020150 	.word	0x40020150
 8003004:	50020150 	.word	0x50020150
 8003008:	400201d0 	.word	0x400201d0
 800300c:	500201d0 	.word	0x500201d0
 8003010:	40020250 	.word	0x40020250
 8003014:	50020250 	.word	0x50020250
 8003018:	400202d0 	.word	0x400202d0
 800301c:	500202d0 	.word	0x500202d0
 8003020:	40020350 	.word	0x40020350
 8003024:	50020350 	.word	0x50020350
 8003028:	400203d0 	.word	0x400203d0
 800302c:	500203d0 	.word	0x500203d0
 8003030:	40020450 	.word	0x40020450
 8003034:	50020450 	.word	0x50020450
 8003038:	400204d0 	.word	0x400204d0
 800303c:	500204d0 	.word	0x500204d0
 8003040:	40020550 	.word	0x40020550
 8003044:	50020550 	.word	0x50020550
 8003048:	400205d0 	.word	0x400205d0
 800304c:	500205d0 	.word	0x500205d0
 8003050:	40020650 	.word	0x40020650
 8003054:	50020650 	.word	0x50020650
 8003058:	400206d0 	.word	0x400206d0
 800305c:	500206d0 	.word	0x500206d0
 8003060:	40020750 	.word	0x40020750
 8003064:	50020750 	.word	0x50020750
 8003068:	400207d0 	.word	0x400207d0
 800306c:	500207d0 	.word	0x500207d0

08003070 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <HAL_DMAEx_List_Start_IT+0x16>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e082      	b.n	8003190 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003090:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800309c:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 800309e:	7dfb      	ldrb	r3, [r7, #23]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d005      	beq.n	80030b0 <HAL_DMAEx_List_Start_IT+0x40>
 80030a4:	7dfb      	ldrb	r3, [r7, #23]
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d16a      	bne.n	8003180 <HAL_DMAEx_List_Start_IT+0x110>
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d067      	beq.n	8003180 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d157      	bne.n	800316c <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d101      	bne.n	80030ca <HAL_DMAEx_List_Start_IT+0x5a>
 80030c6:	2302      	movs	r3, #2
 80030c8:	e062      	b.n	8003190 <HAL_DMAEx_List_Start_IT+0x120>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2202      	movs	r2, #2
 80030d6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030de:	2202      	movs	r2, #2
 80030e0:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030ec:	2200      	movs	r2, #0
 80030ee:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	695a      	ldr	r2, [r3, #20]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80030fe:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003104:	2b00      	cmp	r3, #0
 8003106:	d007      	beq.n	8003118 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	695a      	ldr	r2, [r3, #20]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003116:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800311c:	2b00      	cmp	r3, #0
 800311e:	d007      	beq.n	8003130 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	695a      	ldr	r2, [r3, #20]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800312e:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f107 010c 	add.w	r1, r7, #12
 800313a:	2200      	movs	r2, #0
 800313c:	4618      	mov	r0, r3
 800313e:	f000 fd1f 	bl	8003b80 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4619      	mov	r1, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	0c0b      	lsrs	r3, r1, #16
 8003150:	041b      	lsls	r3, r3, #16
 8003152:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	461a      	mov	r2, r3
 800315c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003160:	4013      	ands	r3, r2
 8003162:	68f9      	ldr	r1, [r7, #12]
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	6812      	ldr	r2, [r2, #0]
 8003168:	430b      	orrs	r3, r1
 800316a:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	695a      	ldr	r2, [r3, #20]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f042 0201 	orr.w	r2, r2, #1
 800317a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 800317c:	2300      	movs	r3, #0
 800317e:	e007      	b.n	8003190 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2240      	movs	r2, #64	@ 0x40
 8003184:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
}
 8003190:	4618      	mov	r0, r3
 8003192:	3718      	adds	r7, #24
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d002      	beq.n	80031ae <HAL_DMAEx_List_BuildNode+0x16>
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e004      	b.n	80031bc <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 80031b2:	6839      	ldr	r1, [r7, #0]
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 fb1f 	bl	80037f8 <DMA_List_BuildNode>

  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3708      	adds	r7, #8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <HAL_DMAEx_List_InsertNode_Head>:
  *                     configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode_Head(DMA_QListTypeDef *const pQList,
                                                 DMA_NodeTypeDef *const pNewNode)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  uint32_t cllr_mask;
  uint32_t cllr_offset;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d002      	beq.n	80031da <HAL_DMAEx_List_InsertNode_Head+0x16>
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_DMAEx_List_InsertNode_Head+0x1a>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e057      	b.n	800328e <HAL_DMAEx_List_InsertNode_Head+0xca>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d104      	bne.n	80031f0 <HAL_DMAEx_List_InsertNode_Head+0x2c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2204      	movs	r2, #4
 80031ea:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e04e      	b.n	800328e <HAL_DMAEx_List_InsertNode_Head+0xca>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pNewNode, NULL) != 0U)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2200      	movs	r2, #0
 80031f6:	6839      	ldr	r1, [r7, #0]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f000 fc55 	bl	8003aa8 <DMA_List_CheckNodesBaseAddresses>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d004      	beq.n	800320e <HAL_DMAEx_List_InsertNode_Head+0x4a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2205      	movs	r2, #5
 8003208:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e03f      	b.n	800328e <HAL_DMAEx_List_InsertNode_Head+0xca>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pNewNode, NULL) != 0U)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2200      	movs	r2, #0
 8003214:	6839      	ldr	r1, [r7, #0]
 8003216:	4618      	mov	r0, r3
 8003218:	f000 fc76 	bl	8003b08 <DMA_List_CheckNodesTypes>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d004      	beq.n	800322c <HAL_DMAEx_List_InsertNode_Head+0x68>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2204      	movs	r2, #4
 8003226:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e030      	b.n	800328e <HAL_DMAEx_List_InsertNode_Head+0xca>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2202      	movs	r2, #2
 8003230:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	611a      	str	r2, [r3, #16]

  /* Empty queue */
  if (pQList->Head == NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d103      	bne.n	8003248 <HAL_DMAEx_List_InsertNode_Head+0x84>
  {
    pQList->Head = pNewNode;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	e016      	b.n	8003276 <HAL_DMAEx_List_InsertNode_Head+0xb2>
  }
  /* Not empty queue */
  else
  {
    /* Get CLLR register mask and offset */
    DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 8003248:	f107 0208 	add.w	r2, r7, #8
 800324c:	f107 030c 	add.w	r3, r7, #12
 8003250:	4619      	mov	r1, r3
 8003252:	6838      	ldr	r0, [r7, #0]
 8003254:	f000 fc94 	bl	8003b80 <DMA_List_GetCLLRNodeInfo>

    pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	461a      	mov	r2, r3
 800325e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003262:	4013      	ands	r3, r2
 8003264:	68f9      	ldr	r1, [r7, #12]
 8003266:	68ba      	ldr	r2, [r7, #8]
 8003268:	4319      	orrs	r1, r3
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pQList->Head                         = pNewNode;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	601a      	str	r2, [r3, #0]
  }

  /* Increment queue node number */
  pQList->NodeNumber++;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	1c5a      	adds	r2, r3, #1
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	609a      	str	r2, [r3, #8]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3710      	adds	r7, #16
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <HAL_DMAEx_List_InsertNode_Tail>:
  *                     configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode_Tail(DMA_QListTypeDef *const pQList,
                                                 DMA_NodeTypeDef *const pNewNode)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b08a      	sub	sp, #40	@ 0x28
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
 800329e:	6039      	str	r1, [r7, #0]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d002      	beq.n	80032ac <HAL_DMAEx_List_InsertNode_Tail+0x16>
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d101      	bne.n	80032b0 <HAL_DMAEx_List_InsertNode_Tail+0x1a>
  {
    return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e066      	b.n	800337e <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d104      	bne.n	80032c2 <HAL_DMAEx_List_InsertNode_Tail+0x2c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2204      	movs	r2, #4
 80032bc:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e05d      	b.n	800337e <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pNewNode, NULL) != 0U)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2200      	movs	r2, #0
 80032c8:	6839      	ldr	r1, [r7, #0]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 fbec 	bl	8003aa8 <DMA_List_CheckNodesBaseAddresses>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d004      	beq.n	80032e0 <HAL_DMAEx_List_InsertNode_Tail+0x4a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2205      	movs	r2, #5
 80032da:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e04e      	b.n	800337e <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pNewNode, NULL) != 0U)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2200      	movs	r2, #0
 80032e6:	6839      	ldr	r1, [r7, #0]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f000 fc0d 	bl	8003b08 <DMA_List_CheckNodesTypes>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d004      	beq.n	80032fe <HAL_DMAEx_List_InsertNode_Tail+0x68>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2204      	movs	r2, #4
 80032f8:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e03f      	b.n	800337e <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Empty queue */
  if (pQList->Head == NULL)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d103      	bne.n	800330e <HAL_DMAEx_List_InsertNode_Tail+0x78>
  {
    pQList->Head = pNewNode;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	e02b      	b.n	8003366 <HAL_DMAEx_List_InsertNode_Tail+0xd0>
  }
  /* Not empty queue */
  else
  {
    /* Get CLLR register mask and offset */
    DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 800330e:	f107 0220 	add.w	r2, r7, #32
 8003312:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003316:	4619      	mov	r1, r3
 8003318:	6838      	ldr	r0, [r7, #0]
 800331a:	f000 fc31 	bl	8003b80 <DMA_List_GetCLLRNodeInfo>

    /* Find node and get its position in selected queue */
    node_info.cllr_offset = cllr_offset;
 800331e:	6a3b      	ldr	r3, [r7, #32]
 8003320:	60fb      	str	r3, [r7, #12]
    (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8003322:	f107 030c 	add.w	r3, r7, #12
 8003326:	461a      	mov	r2, r3
 8003328:	2100      	movs	r1, #0
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 fc58 	bl	8003be0 <DMA_List_FindNode>

    /* Check if queue is circular */
    if (pQList->FirstCircularNode != NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00b      	beq.n	8003350 <HAL_DMAEx_List_InsertNode_Tail+0xba>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	461a      	mov	r2, r3
 800333e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003342:	4013      	ands	r3, r2
 8003344:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003346:	6a3a      	ldr	r2, [r7, #32]
 8003348:	4319      	orrs	r1, r3
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
      ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003356:	4013      	ands	r3, r2
 8003358:	6a79      	ldr	r1, [r7, #36]	@ 0x24
    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	4610      	mov	r0, r2
 800335e:	6a3a      	ldr	r2, [r7, #32]
      ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8003360:	430b      	orrs	r3, r1
    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
 8003362:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  /* Increment queue node number */
  pQList->NodeNumber++;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	1c5a      	adds	r2, r3, #1
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	609a      	str	r2, [r3, #8]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3728      	adds	r7, #40	@ 0x28
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <HAL_DMAEx_List_ResetQ>:
  * @brief  Reset the linked-list queue and unlink queue nodes.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_ResetQ(DMA_QListTypeDef *const pQList)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b088      	sub	sp, #32
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <HAL_DMAEx_List_ResetQ+0x12>
  {
    return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e03c      	b.n	8003412 <HAL_DMAEx_List_ResetQ+0x8c>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	7b1b      	ldrb	r3, [r3, #12]
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d104      	bne.n	80033ac <HAL_DMAEx_List_ResetQ+0x26>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e032      	b.n	8003412 <HAL_DMAEx_List_ResetQ+0x8c>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d104      	bne.n	80033be <HAL_DMAEx_List_ResetQ+0x38>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2204      	movs	r2, #4
 80033b8:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e029      	b.n	8003412 <HAL_DMAEx_List_ResetQ+0x8c>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2202      	movs	r2, #2
 80033c2:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	611a      	str	r2, [r3, #16]

  /* Check the queue */
  if (pQList->Head != NULL)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00f      	beq.n	80033f2 <HAL_DMAEx_List_ResetQ+0x6c>
  {
    /* Get CLLR register mask and offset */
    DMA_List_GetCLLRNodeInfo(pQList->Head, NULL, &cllr_offset);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f107 021c 	add.w	r2, r7, #28
 80033da:	2100      	movs	r1, #0
 80033dc:	4618      	mov	r0, r3
 80033de:	f000 fbcf 	bl	8003b80 <DMA_List_GetCLLRNodeInfo>

    /* Reset selected queue nodes */
    node_info.cllr_offset = cllr_offset;
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	60bb      	str	r3, [r7, #8]
    DMA_List_ResetQueueNodes(pQList, &node_info);
 80033e6:	f107 0308 	add.w	r3, r7, #8
 80033ea:	4619      	mov	r1, r3
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 fc96 	bl	8003d1e <DMA_List_ResetQueueNodes>
  }

  /* Reset head node address */
  pQList->Head = NULL;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]

  /* Reset node number */
  pQList->NodeNumber = 0U;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	609a      	str	r2, [r3, #8]

  /* Reset first circular node */
  pQList->FirstCircularNode = NULL;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_RESET;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3720      	adds	r7, #32
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
	...

0800341c <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d002      	beq.n	8003432 <HAL_DMAEx_List_LinkQ+0x16>
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e072      	b.n	800351c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800343c:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d002      	beq.n	8003450 <HAL_DMAEx_List_LinkQ+0x34>
 800344a:	7bfb      	ldrb	r3, [r7, #15]
 800344c:	2b05      	cmp	r3, #5
 800344e:	d108      	bne.n	8003462 <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2240      	movs	r2, #64	@ 0x40
 8003454:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e05c      	b.n	800351c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	7b1b      	ldrb	r3, [r3, #12]
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d104      	bne.n	8003476 <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	2201      	movs	r2, #1
 8003470:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e052      	b.n	800351c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a2b      	ldr	r2, [pc, #172]	@ (8003528 <HAL_DMAEx_List_LinkQ+0x10c>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d022      	beq.n	80034c6 <HAL_DMAEx_List_LinkQ+0xaa>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a29      	ldr	r2, [pc, #164]	@ (800352c <HAL_DMAEx_List_LinkQ+0x110>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d01d      	beq.n	80034c6 <HAL_DMAEx_List_LinkQ+0xaa>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a28      	ldr	r2, [pc, #160]	@ (8003530 <HAL_DMAEx_List_LinkQ+0x114>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d018      	beq.n	80034c6 <HAL_DMAEx_List_LinkQ+0xaa>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a26      	ldr	r2, [pc, #152]	@ (8003534 <HAL_DMAEx_List_LinkQ+0x118>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d013      	beq.n	80034c6 <HAL_DMAEx_List_LinkQ+0xaa>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a25      	ldr	r2, [pc, #148]	@ (8003538 <HAL_DMAEx_List_LinkQ+0x11c>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d00e      	beq.n	80034c6 <HAL_DMAEx_List_LinkQ+0xaa>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a23      	ldr	r2, [pc, #140]	@ (800353c <HAL_DMAEx_List_LinkQ+0x120>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d009      	beq.n	80034c6 <HAL_DMAEx_List_LinkQ+0xaa>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a22      	ldr	r2, [pc, #136]	@ (8003540 <HAL_DMAEx_List_LinkQ+0x124>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d004      	beq.n	80034c6 <HAL_DMAEx_List_LinkQ+0xaa>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a20      	ldr	r2, [pc, #128]	@ (8003544 <HAL_DMAEx_List_LinkQ+0x128>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d101      	bne.n	80034ca <HAL_DMAEx_List_LinkQ+0xae>
 80034c6:	2301      	movs	r3, #1
 80034c8:	e000      	b.n	80034cc <HAL_DMAEx_List_LinkQ+0xb0>
 80034ca:	2300      	movs	r3, #0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10b      	bne.n	80034e8 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d004      	beq.n	80034e8 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	2203      	movs	r2, #3
 80034e2:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e019      	b.n	800351c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034ec:	2b81      	cmp	r3, #129	@ 0x81
 80034ee:	d108      	bne.n	8003502 <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10d      	bne.n	8003514 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	2204      	movs	r2, #4
 80034fc:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e00c      	b.n	800351c <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d004      	beq.n	8003514 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	2204      	movs	r2, #4
 800350e:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e003      	b.n	800351c <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3714      	adds	r7, #20
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	40020650 	.word	0x40020650
 800352c:	50020650 	.word	0x50020650
 8003530:	400206d0 	.word	0x400206d0
 8003534:	500206d0 	.word	0x500206d0
 8003538:	40020750 	.word	0x40020750
 800353c:	50020750 	.word	0x50020750
 8003540:	400207d0 	.word	0x400207d0
 8003544:	500207d0 	.word	0x500207d0

08003548 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003558:	4313      	orrs	r3, r2
 800355a:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a85      	ldr	r2, [pc, #532]	@ (8003778 <DMA_List_Init+0x230>)
 8003562:	4293      	cmp	r3, r2
 8003564:	f000 80a0 	beq.w	80036a8 <DMA_List_Init+0x160>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a83      	ldr	r2, [pc, #524]	@ (800377c <DMA_List_Init+0x234>)
 800356e:	4293      	cmp	r3, r2
 8003570:	f000 809a 	beq.w	80036a8 <DMA_List_Init+0x160>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a81      	ldr	r2, [pc, #516]	@ (8003780 <DMA_List_Init+0x238>)
 800357a:	4293      	cmp	r3, r2
 800357c:	f000 8094 	beq.w	80036a8 <DMA_List_Init+0x160>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a7f      	ldr	r2, [pc, #508]	@ (8003784 <DMA_List_Init+0x23c>)
 8003586:	4293      	cmp	r3, r2
 8003588:	f000 808e 	beq.w	80036a8 <DMA_List_Init+0x160>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a7d      	ldr	r2, [pc, #500]	@ (8003788 <DMA_List_Init+0x240>)
 8003592:	4293      	cmp	r3, r2
 8003594:	f000 8088 	beq.w	80036a8 <DMA_List_Init+0x160>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a7b      	ldr	r2, [pc, #492]	@ (800378c <DMA_List_Init+0x244>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	f000 8082 	beq.w	80036a8 <DMA_List_Init+0x160>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a79      	ldr	r2, [pc, #484]	@ (8003790 <DMA_List_Init+0x248>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d07c      	beq.n	80036a8 <DMA_List_Init+0x160>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a78      	ldr	r2, [pc, #480]	@ (8003794 <DMA_List_Init+0x24c>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d077      	beq.n	80036a8 <DMA_List_Init+0x160>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a76      	ldr	r2, [pc, #472]	@ (8003798 <DMA_List_Init+0x250>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d072      	beq.n	80036a8 <DMA_List_Init+0x160>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a75      	ldr	r2, [pc, #468]	@ (800379c <DMA_List_Init+0x254>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d06d      	beq.n	80036a8 <DMA_List_Init+0x160>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a73      	ldr	r2, [pc, #460]	@ (80037a0 <DMA_List_Init+0x258>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d068      	beq.n	80036a8 <DMA_List_Init+0x160>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a72      	ldr	r2, [pc, #456]	@ (80037a4 <DMA_List_Init+0x25c>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d063      	beq.n	80036a8 <DMA_List_Init+0x160>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a70      	ldr	r2, [pc, #448]	@ (80037a8 <DMA_List_Init+0x260>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d05e      	beq.n	80036a8 <DMA_List_Init+0x160>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a6f      	ldr	r2, [pc, #444]	@ (80037ac <DMA_List_Init+0x264>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d059      	beq.n	80036a8 <DMA_List_Init+0x160>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a6d      	ldr	r2, [pc, #436]	@ (80037b0 <DMA_List_Init+0x268>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d054      	beq.n	80036a8 <DMA_List_Init+0x160>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a6c      	ldr	r2, [pc, #432]	@ (80037b4 <DMA_List_Init+0x26c>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d04f      	beq.n	80036a8 <DMA_List_Init+0x160>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a6a      	ldr	r2, [pc, #424]	@ (80037b8 <DMA_List_Init+0x270>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d04a      	beq.n	80036a8 <DMA_List_Init+0x160>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a69      	ldr	r2, [pc, #420]	@ (80037bc <DMA_List_Init+0x274>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d045      	beq.n	80036a8 <DMA_List_Init+0x160>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a67      	ldr	r2, [pc, #412]	@ (80037c0 <DMA_List_Init+0x278>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d040      	beq.n	80036a8 <DMA_List_Init+0x160>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a66      	ldr	r2, [pc, #408]	@ (80037c4 <DMA_List_Init+0x27c>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d03b      	beq.n	80036a8 <DMA_List_Init+0x160>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a64      	ldr	r2, [pc, #400]	@ (80037c8 <DMA_List_Init+0x280>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d036      	beq.n	80036a8 <DMA_List_Init+0x160>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a63      	ldr	r2, [pc, #396]	@ (80037cc <DMA_List_Init+0x284>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d031      	beq.n	80036a8 <DMA_List_Init+0x160>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a61      	ldr	r2, [pc, #388]	@ (80037d0 <DMA_List_Init+0x288>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d02c      	beq.n	80036a8 <DMA_List_Init+0x160>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a60      	ldr	r2, [pc, #384]	@ (80037d4 <DMA_List_Init+0x28c>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d027      	beq.n	80036a8 <DMA_List_Init+0x160>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a5e      	ldr	r2, [pc, #376]	@ (80037d8 <DMA_List_Init+0x290>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d022      	beq.n	80036a8 <DMA_List_Init+0x160>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a5d      	ldr	r2, [pc, #372]	@ (80037dc <DMA_List_Init+0x294>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d01d      	beq.n	80036a8 <DMA_List_Init+0x160>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a5b      	ldr	r2, [pc, #364]	@ (80037e0 <DMA_List_Init+0x298>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d018      	beq.n	80036a8 <DMA_List_Init+0x160>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a5a      	ldr	r2, [pc, #360]	@ (80037e4 <DMA_List_Init+0x29c>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d013      	beq.n	80036a8 <DMA_List_Init+0x160>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a58      	ldr	r2, [pc, #352]	@ (80037e8 <DMA_List_Init+0x2a0>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d00e      	beq.n	80036a8 <DMA_List_Init+0x160>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a57      	ldr	r2, [pc, #348]	@ (80037ec <DMA_List_Init+0x2a4>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d009      	beq.n	80036a8 <DMA_List_Init+0x160>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a55      	ldr	r2, [pc, #340]	@ (80037f0 <DMA_List_Init+0x2a8>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d004      	beq.n	80036a8 <DMA_List_Init+0x160>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a54      	ldr	r2, [pc, #336]	@ (80037f4 <DMA_List_Init+0x2ac>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d101      	bne.n	80036ac <DMA_List_Init+0x164>
 80036a8:	2301      	movs	r3, #1
 80036aa:	e000      	b.n	80036ae <DMA_List_Init+0x166>
 80036ac:	2300      	movs	r3, #0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d004      	beq.n	80036bc <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	430a      	orrs	r2, r1
 80036ce:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2200      	movs	r2, #0
 80036d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80036e0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2200      	movs	r2, #0
 80036e8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2200      	movs	r2, #0
 80036f0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2200      	movs	r2, #0
 80036f8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a36      	ldr	r2, [pc, #216]	@ (80037d8 <DMA_List_Init+0x290>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d022      	beq.n	800374a <DMA_List_Init+0x202>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a34      	ldr	r2, [pc, #208]	@ (80037dc <DMA_List_Init+0x294>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d01d      	beq.n	800374a <DMA_List_Init+0x202>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a33      	ldr	r2, [pc, #204]	@ (80037e0 <DMA_List_Init+0x298>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d018      	beq.n	800374a <DMA_List_Init+0x202>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a31      	ldr	r2, [pc, #196]	@ (80037e4 <DMA_List_Init+0x29c>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d013      	beq.n	800374a <DMA_List_Init+0x202>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a30      	ldr	r2, [pc, #192]	@ (80037e8 <DMA_List_Init+0x2a0>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d00e      	beq.n	800374a <DMA_List_Init+0x202>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a2e      	ldr	r2, [pc, #184]	@ (80037ec <DMA_List_Init+0x2a4>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d009      	beq.n	800374a <DMA_List_Init+0x202>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a2d      	ldr	r2, [pc, #180]	@ (80037f0 <DMA_List_Init+0x2a8>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d004      	beq.n	800374a <DMA_List_Init+0x202>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a2b      	ldr	r2, [pc, #172]	@ (80037f4 <DMA_List_Init+0x2ac>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d101      	bne.n	800374e <DMA_List_Init+0x206>
 800374a:	2301      	movs	r3, #1
 800374c:	e000      	b.n	8003750 <DMA_List_Init+0x208>
 800374e:	2300      	movs	r3, #0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d007      	beq.n	8003764 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2200      	movs	r2, #0
 800375a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2200      	movs	r2, #0
 8003762:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2200      	movs	r2, #0
 800376a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800376c:	bf00      	nop
 800376e:	3714      	adds	r7, #20
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	40020050 	.word	0x40020050
 800377c:	50020050 	.word	0x50020050
 8003780:	400200d0 	.word	0x400200d0
 8003784:	500200d0 	.word	0x500200d0
 8003788:	40020150 	.word	0x40020150
 800378c:	50020150 	.word	0x50020150
 8003790:	400201d0 	.word	0x400201d0
 8003794:	500201d0 	.word	0x500201d0
 8003798:	40020250 	.word	0x40020250
 800379c:	50020250 	.word	0x50020250
 80037a0:	400202d0 	.word	0x400202d0
 80037a4:	500202d0 	.word	0x500202d0
 80037a8:	40020350 	.word	0x40020350
 80037ac:	50020350 	.word	0x50020350
 80037b0:	400203d0 	.word	0x400203d0
 80037b4:	500203d0 	.word	0x500203d0
 80037b8:	40020450 	.word	0x40020450
 80037bc:	50020450 	.word	0x50020450
 80037c0:	400204d0 	.word	0x400204d0
 80037c4:	500204d0 	.word	0x500204d0
 80037c8:	40020550 	.word	0x40020550
 80037cc:	50020550 	.word	0x50020550
 80037d0:	400205d0 	.word	0x400205d0
 80037d4:	500205d0 	.word	0x500205d0
 80037d8:	40020650 	.word	0x40020650
 80037dc:	50020650 	.word	0x50020650
 80037e0:	400206d0 	.word	0x400206d0
 80037e4:	500206d0 	.word	0x500206d0
 80037e8:	40020750 	.word	0x40020750
 80037ec:	50020750 	.word	0x50020750
 80037f0:	400207d0 	.word	0x400207d0
 80037f4:	500207d0 	.word	0x500207d0

080037f8 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800380a:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8003810:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8003816:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 800381c:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0320 	and.w	r3, r3, #32
 800382a:	2b00      	cmp	r3, #0
 800382c:	d017      	beq.n	800385e <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800383a:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003840:	3b01      	subs	r3, #1
 8003842:	051b      	lsls	r3, r3, #20
 8003844:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8003848:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384e:	3b01      	subs	r3, #1
 8003850:	011b      	lsls	r3, r3, #4
 8003852:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8003856:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8003858:	431a      	orrs	r2, r3
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6859      	ldr	r1, [r3, #4]
 8003866:	f240 237f 	movw	r3, #639	@ 0x27f
 800386a:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 800386c:	431a      	orrs	r2, r3
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800387a:	d10c      	bne.n	8003896 <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0320 	and.w	r3, r3, #32
 8003884:	2b00      	cmp	r3, #0
 8003886:	d011      	beq.n	80038ac <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	605a      	str	r2, [r3, #4]
 8003894:	e00a      	b.n	80038ac <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800389e:	d105      	bne.n	80038ac <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00f      	beq.n	80038d4 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c0:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038c6:	041b      	lsls	r3, r3, #16
 80038c8:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 80038cc:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 80038ce:	431a      	orrs	r2, r3
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038d8:	b29a      	uxth	r2, r3
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d04e      	beq.n	8003988 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038f2:	3b01      	subs	r3, #1
 80038f4:	0419      	lsls	r1, r3, #16
 80038f6:	4b6a      	ldr	r3, [pc, #424]	@ (8003aa0 <DMA_List_BuildNode+0x2a8>)
 80038f8:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 80038fa:	431a      	orrs	r2, r3
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003904:	2b00      	cmp	r3, #0
 8003906:	da06      	bge.n	8003916 <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	609a      	str	r2, [r3, #8]
 8003914:	e005      	b.n	8003922 <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003926:	2b00      	cmp	r3, #0
 8003928:	da06      	bge.n	8003938 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	609a      	str	r2, [r3, #8]
 8003936:	e005      	b.n	8003944 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003948:	2b00      	cmp	r3, #0
 800394a:	da06      	bge.n	800395a <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	609a      	str	r2, [r3, #8]
 8003958:	e005      	b.n	8003966 <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800396a:	2b00      	cmp	r3, #0
 800396c:	da06      	bge.n	800397c <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	609a      	str	r2, [r3, #8]
 800397a:	e005      	b.n	8003988 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d05d      	beq.n	8003a60 <DMA_List_BuildNode+0x268>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	da09      	bge.n	80039c0 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039b0:	425b      	negs	r3, r3
 80039b2:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f3c3 020c 	ubfx	r2, r3, #0, #13
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	615a      	str	r2, [r3, #20]
 80039be:	e005      	b.n	80039cc <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039c4:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	da0d      	bge.n	80039f0 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039d8:	425b      	negs	r3, r3
 80039da:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	695a      	ldr	r2, [r3, #20]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	0419      	lsls	r1, r3, #16
 80039e4:	4b2f      	ldr	r3, [pc, #188]	@ (8003aa4 <DMA_List_BuildNode+0x2ac>)
 80039e6:	400b      	ands	r3, r1
 80039e8:	431a      	orrs	r2, r3
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	615a      	str	r2, [r3, #20]
 80039ee:	e009      	b.n	8003a04 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039f8:	0419      	lsls	r1, r3, #16
 80039fa:	4b2a      	ldr	r3, [pc, #168]	@ (8003aa4 <DMA_List_BuildNode+0x2ac>)
 80039fc:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 80039fe:	431a      	orrs	r2, r3
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	da08      	bge.n	8003a1e <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a10:	425b      	negs	r3, r3
 8003a12:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	619a      	str	r2, [r3, #24]
 8003a1c:	e004      	b.n	8003a28 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a22:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	da0b      	bge.n	8003a48 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a34:	425b      	negs	r3, r3
 8003a36:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8003a40:	431a      	orrs	r2, r3
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	619a      	str	r2, [r3, #24]
 8003a46:	e007      	b.n	8003a58 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a50:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8003a52:	431a      	orrs	r2, r3
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	619a      	str	r2, [r3, #24]
    /********************************************************************************* CBR2 register value is updated */


    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_2D_DEFAULT_OFFSET] = 0U;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	61da      	str	r2, [r3, #28]
 8003a5e:	e002      	b.n	8003a66 <DMA_List_BuildNode+0x26e>
  }
  else
  {
    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_LINEAR_DEFAULT_OFFSET] = 0U;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	2200      	movs	r2, #0
 8003a64:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CLLR register value is cleared */
  }

  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d006      	beq.n	8003a88 <DMA_List_BuildNode+0x290>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8003a86:	e005      	b.n	8003a94 <DMA_List_BuildNode+0x29c>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	621a      	str	r2, [r3, #32]
}
 8003a94:	bf00      	nop
 8003a96:	3714      	adds	r7, #20
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr
 8003aa0:	07ff0000 	.word	0x07ff0000
 8003aa4:	1fff0000 	.word	0x1fff0000

08003aa8 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b087      	sub	sp, #28
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	431a      	orrs	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	0c1b      	lsrs	r3, r3, #16
 8003ac0:	041b      	lsls	r3, r3, #16
 8003ac2:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d002      	beq.n	8003ad4 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	617b      	str	r3, [r7, #20]
 8003ad2:	e00a      	b.n	8003aea <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d002      	beq.n	8003ae0 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	617b      	str	r3, [r7, #20]
 8003ade:	e004      	b.n	8003aea <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	0c1b      	lsrs	r3, r3, #16
 8003aee:	041b      	lsls	r3, r3, #16
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d001      	beq.n	8003afa <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e000      	b.n	8003afc <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	371c      	adds	r7, #28
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b087      	sub	sp, #28
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8003b14:	2300      	movs	r3, #0
 8003b16:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d004      	beq.n	8003b28 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	617b      	str	r3, [r7, #20]
 8003b26:	e00e      	b.n	8003b46 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d004      	beq.n	8003b38 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	617b      	str	r3, [r7, #20]
 8003b36:	e006      	b.n	8003b46 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d007      	beq.n	8003b5c <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d001      	beq.n	8003b5c <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8003b58:	2302      	movs	r3, #2
 8003b5a:	e00b      	b.n	8003b74 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d007      	beq.n	8003b72 <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d001      	beq.n	8003b72 <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e000      	b.n	8003b74 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	371c      	adds	r7, #28
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00c      	beq.n	8003bb2 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d002      	beq.n	8003ba4 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	4a0d      	ldr	r2, [pc, #52]	@ (8003bd8 <DMA_List_GetCLLRNodeInfo+0x58>)
 8003ba2:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00f      	beq.n	8003bca <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2207      	movs	r2, #7
 8003bae:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8003bb0:	e00b      	b.n	8003bca <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d002      	beq.n	8003bbe <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	4a08      	ldr	r2, [pc, #32]	@ (8003bdc <DMA_List_GetCLLRNodeInfo+0x5c>)
 8003bbc:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d002      	beq.n	8003bca <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2205      	movs	r2, #5
 8003bc8:	601a      	str	r2, [r3, #0]
}
 8003bca:	bf00      	nop
 8003bcc:	3714      	adds	r7, #20
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	fe010000 	.word	0xfe010000
 8003bdc:	f8010000 	.word	0xf8010000

08003be0 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b089      	sub	sp, #36	@ 0x24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8003bec:	2300      	movs	r3, #0
 8003bee:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d142      	bne.n	8003c8a <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8003c04:	e01d      	b.n	8003c42 <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d107      	bne.n	8003c1c <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	461a      	mov	r2, r3
 8003c12:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003c16:	4013      	ands	r3, r2
 8003c18:	61bb      	str	r3, [r7, #24]
 8003c1a:	e00f      	b.n	8003c3c <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	0c1b      	lsrs	r3, r3, #16
 8003c26:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8003c34:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003c38:	4013      	ands	r3, r2
 8003c3a:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	3301      	adds	r3, #1
 8003c40:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	69fa      	ldr	r2, [r7, #28]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d3dc      	bcc.n	8003c06 <DMA_List_FindNode+0x26>
 8003c4c:	e029      	b.n	8003ca2 <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d107      	bne.n	8003c64 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	461a      	mov	r2, r3
 8003c5a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003c5e:	4013      	ands	r3, r2
 8003c60:	61bb      	str	r3, [r7, #24]
 8003c62:	e00f      	b.n	8003c84 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	0c1b      	lsrs	r3, r3, #16
 8003c6e:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	4413      	add	r3, r2
 8003c74:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8003c7c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003c80:	4013      	ands	r3, r2
 8003c82:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	3301      	adds	r3, #1
 8003c88:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	69fa      	ldr	r2, [r7, #28]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d206      	bcs.n	8003ca2 <DMA_List_FindNode+0xc2>
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	69ba      	ldr	r2, [r7, #24]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d1d5      	bne.n	8003c4e <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d008      	beq.n	8003cba <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003cae:	4013      	ands	r3, r2
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d001      	beq.n	8003cba <DMA_List_FindNode+0xda>
    {
      return 1U;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e02b      	b.n	8003d12 <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	69fa      	ldr	r2, [r7, #28]
 8003cbe:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	0c1b      	lsrs	r3, r3, #16
 8003cc6:	041b      	lsls	r3, r3, #16
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	0c1b      	lsrs	r3, r3, #16
 8003cd6:	041b      	lsls	r3, r3, #16
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00f      	beq.n	8003d10 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cfc:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8003d00:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	0c1b      	lsrs	r3, r3, #16
 8003d08:	041b      	lsls	r3, r3, #16
 8003d0a:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3724      	adds	r7, #36	@ 0x24
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <DMA_List_ResetQueueNodes>:
  * @param  NodeInfo : Pointer to a DMA_NodeInQInfoTypeDef structure that contains node linked to queue information.
  * @retval None.
  */
static void DMA_List_ResetQueueNodes(DMA_QListTypeDef const *const pQList,
                                     DMA_NodeInQInfoTypeDef const *const NodeInfo)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b087      	sub	sp, #28
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
 8003d26:	6039      	str	r1, [r7, #0]
  uint32_t node_idx = 0U;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	617b      	str	r3, [r7, #20]
  uint32_t currentnode_address  = 0U;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	613b      	str	r3, [r7, #16]
  uint32_t previousnode_address;
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	60bb      	str	r3, [r7, #8]

  /* Check that previous node is linked to the selected queue */
  while (node_idx < pQList->NodeNumber)
 8003d36:	e031      	b.n	8003d9c <DMA_List_ResetQueueNodes+0x7e>
  {
    /* Get head node address */
    if (node_idx == 0U)
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d110      	bne.n	8003d60 <DMA_List_ResetQueueNodes+0x42>
    {
      previousnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	461a      	mov	r2, r3
 8003d44:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003d48:	4013      	ands	r3, r2
 8003d4a:	60fb      	str	r3, [r7, #12]
      currentnode_address  = (pQList->Head->LinkRegisters[cllr_offset] & DMA_CLLR_LA);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68ba      	ldr	r2, [r7, #8]
 8003d52:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003d56:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	613b      	str	r3, [r7, #16]
 8003d5e:	e00f      	b.n	8003d80 <DMA_List_ResetQueueNodes+0x62>
    }
    /* Calculate nodes addresses */
    else
    {
      previousnode_address = currentnode_address;
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	60fb      	str	r3, [r7, #12]
      currentnode_address =
        ((DMA_NodeTypeDef *)(currentnode_address +
                             ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	0c1b      	lsrs	r3, r3, #16
 8003d6a:	041b      	lsls	r3, r3, #16
        ((DMA_NodeTypeDef *)(currentnode_address +
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	4413      	add	r3, r2
 8003d70:	461a      	mov	r2, r3
                             ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
      currentnode_address =
 8003d78:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	613b      	str	r3, [r7, #16]
    }

    /* Reset node */
    ((DMA_NodeTypeDef *)(previousnode_address +
                         ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] = 0U;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	0c1b      	lsrs	r3, r3, #16
 8003d86:	041b      	lsls	r3, r3, #16
    ((DMA_NodeTypeDef *)(previousnode_address +
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	4619      	mov	r1, r3
                         ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] = 0U;
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    /* Increment node index */
    node_idx++;
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	617b      	str	r3, [r7, #20]
  while (node_idx < pQList->NodeNumber)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d3c8      	bcc.n	8003d38 <DMA_List_ResetQueueNodes+0x1a>
  }
}
 8003da6:	bf00      	nop
 8003da8:	bf00      	nop
 8003daa:	371c      	adds	r7, #28
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b089      	sub	sp, #36	@ 0x24
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003dc6:	e1ba      	b.n	800413e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	2101      	movs	r1, #1
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f000 81aa 	beq.w	8004138 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a55      	ldr	r2, [pc, #340]	@ (8003f3c <HAL_GPIO_Init+0x188>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d15d      	bne.n	8003ea8 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8003df2:	2201      	movs	r2, #1
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfa:	43db      	mvns	r3, r3
 8003dfc:	69fa      	ldr	r2, [r7, #28]
 8003dfe:	4013      	ands	r3, r2
 8003e00:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f003 0201 	and.w	r2, r3, #1
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e10:	69fa      	ldr	r2, [r7, #28]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	69fa      	ldr	r2, [r7, #28]
 8003e1a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8003e1c:	4a48      	ldr	r2, [pc, #288]	@ (8003f40 <HAL_GPIO_Init+0x18c>)
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003e24:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8003e26:	4a46      	ldr	r2, [pc, #280]	@ (8003f40 <HAL_GPIO_Init+0x18c>)
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	00db      	lsls	r3, r3, #3
 8003e2c:	4413      	add	r3, r2
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	08da      	lsrs	r2, r3, #3
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	3208      	adds	r2, #8
 8003e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e3e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	f003 0307 	and.w	r3, r3, #7
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	220f      	movs	r2, #15
 8003e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4e:	43db      	mvns	r3, r3
 8003e50:	69fa      	ldr	r2, [r7, #28]
 8003e52:	4013      	ands	r3, r2
 8003e54:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	f003 0307 	and.w	r3, r3, #7
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	220b      	movs	r2, #11
 8003e60:	fa02 f303 	lsl.w	r3, r2, r3
 8003e64:	69fa      	ldr	r2, [r7, #28]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	08da      	lsrs	r2, r3, #3
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	3208      	adds	r2, #8
 8003e72:	69f9      	ldr	r1, [r7, #28]
 8003e74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	2203      	movs	r2, #3
 8003e84:	fa02 f303 	lsl.w	r3, r2, r3
 8003e88:	43db      	mvns	r3, r3
 8003e8a:	69fa      	ldr	r2, [r7, #28]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	2202      	movs	r2, #2
 8003e96:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9a:	69fa      	ldr	r2, [r7, #28]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	69fa      	ldr	r2, [r7, #28]
 8003ea4:	601a      	str	r2, [r3, #0]
 8003ea6:	e067      	b.n	8003f78 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d003      	beq.n	8003eb8 <HAL_GPIO_Init+0x104>
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	2b12      	cmp	r3, #18
 8003eb6:	d145      	bne.n	8003f44 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	08da      	lsrs	r2, r3, #3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	3208      	adds	r2, #8
 8003ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ec4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	f003 0307 	and.w	r3, r3, #7
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	220f      	movs	r2, #15
 8003ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed4:	43db      	mvns	r3, r3
 8003ed6:	69fa      	ldr	r2, [r7, #28]
 8003ed8:	4013      	ands	r3, r2
 8003eda:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	f003 020f 	and.w	r2, r3, #15
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	f003 0307 	and.w	r3, r3, #7
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef0:	69fa      	ldr	r2, [r7, #28]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	08da      	lsrs	r2, r3, #3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	3208      	adds	r2, #8
 8003efe:	69f9      	ldr	r1, [r7, #28]
 8003f00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	2203      	movs	r2, #3
 8003f10:	fa02 f303 	lsl.w	r3, r2, r3
 8003f14:	43db      	mvns	r3, r3
 8003f16:	69fa      	ldr	r2, [r7, #28]
 8003f18:	4013      	ands	r3, r2
 8003f1a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f003 0203 	and.w	r2, r3, #3
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2c:	69fa      	ldr	r2, [r7, #28]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	69fa      	ldr	r2, [r7, #28]
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	e01e      	b.n	8003f78 <HAL_GPIO_Init+0x1c4>
 8003f3a:	bf00      	nop
 8003f3c:	46020000 	.word	0x46020000
 8003f40:	0802e9d4 	.word	0x0802e9d4
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	2203      	movs	r2, #3
 8003f50:	fa02 f303 	lsl.w	r3, r2, r3
 8003f54:	43db      	mvns	r3, r3
 8003f56:	69fa      	ldr	r2, [r7, #28]
 8003f58:	4013      	ands	r3, r2
 8003f5a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f003 0203 	and.w	r2, r3, #3
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	005b      	lsls	r3, r3, #1
 8003f68:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6c:	69fa      	ldr	r2, [r7, #28]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	69fa      	ldr	r2, [r7, #28]
 8003f76:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d00b      	beq.n	8003f98 <HAL_GPIO_Init+0x1e4>
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d007      	beq.n	8003f98 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f8c:	2b11      	cmp	r3, #17
 8003f8e:	d003      	beq.n	8003f98 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	2b12      	cmp	r3, #18
 8003f96:	d130      	bne.n	8003ffa <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	005b      	lsls	r3, r3, #1
 8003fa2:	2203      	movs	r2, #3
 8003fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa8:	43db      	mvns	r3, r3
 8003faa:	69fa      	ldr	r2, [r7, #28]
 8003fac:	4013      	ands	r3, r2
 8003fae:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	68da      	ldr	r2, [r3, #12]
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	005b      	lsls	r3, r3, #1
 8003fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbc:	69fa      	ldr	r2, [r7, #28]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	69fa      	ldr	r2, [r7, #28]
 8003fc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8003fce:	2201      	movs	r2, #1
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd6:	43db      	mvns	r3, r3
 8003fd8:	69fa      	ldr	r2, [r7, #28]
 8003fda:	4013      	ands	r3, r2
 8003fdc:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	091b      	lsrs	r3, r3, #4
 8003fe4:	f003 0201 	and.w	r2, r3, #1
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	fa02 f303 	lsl.w	r3, r2, r3
 8003fee:	69fa      	ldr	r2, [r7, #28]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	69fa      	ldr	r2, [r7, #28]
 8003ff8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	2b03      	cmp	r3, #3
 8004000:	d017      	beq.n	8004032 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	005b      	lsls	r3, r3, #1
 800400c:	2203      	movs	r2, #3
 800400e:	fa02 f303 	lsl.w	r3, r2, r3
 8004012:	43db      	mvns	r3, r3
 8004014:	69fa      	ldr	r2, [r7, #28]
 8004016:	4013      	ands	r3, r2
 8004018:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	689a      	ldr	r2, [r3, #8]
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	fa02 f303 	lsl.w	r3, r2, r3
 8004026:	69fa      	ldr	r2, [r7, #28]
 8004028:	4313      	orrs	r3, r2
 800402a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	69fa      	ldr	r2, [r7, #28]
 8004030:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d07c      	beq.n	8004138 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800403e:	4a47      	ldr	r2, [pc, #284]	@ (800415c <HAL_GPIO_Init+0x3a8>)
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	089b      	lsrs	r3, r3, #2
 8004044:	3318      	adds	r3, #24
 8004046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800404a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	f003 0303 	and.w	r3, r3, #3
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	220f      	movs	r2, #15
 8004056:	fa02 f303 	lsl.w	r3, r2, r3
 800405a:	43db      	mvns	r3, r3
 800405c:	69fa      	ldr	r2, [r7, #28]
 800405e:	4013      	ands	r3, r2
 8004060:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	0a9a      	lsrs	r2, r3, #10
 8004066:	4b3e      	ldr	r3, [pc, #248]	@ (8004160 <HAL_GPIO_Init+0x3ac>)
 8004068:	4013      	ands	r3, r2
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	f002 0203 	and.w	r2, r2, #3
 8004070:	00d2      	lsls	r2, r2, #3
 8004072:	4093      	lsls	r3, r2
 8004074:	69fa      	ldr	r2, [r7, #28]
 8004076:	4313      	orrs	r3, r2
 8004078:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800407a:	4938      	ldr	r1, [pc, #224]	@ (800415c <HAL_GPIO_Init+0x3a8>)
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	089b      	lsrs	r3, r3, #2
 8004080:	3318      	adds	r3, #24
 8004082:	69fa      	ldr	r2, [r7, #28]
 8004084:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004088:	4b34      	ldr	r3, [pc, #208]	@ (800415c <HAL_GPIO_Init+0x3a8>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	43db      	mvns	r3, r3
 8004092:	69fa      	ldr	r2, [r7, #28]
 8004094:	4013      	ands	r3, r2
 8004096:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d003      	beq.n	80040ac <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80040a4:	69fa      	ldr	r2, [r7, #28]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80040ac:	4a2b      	ldr	r2, [pc, #172]	@ (800415c <HAL_GPIO_Init+0x3a8>)
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80040b2:	4b2a      	ldr	r3, [pc, #168]	@ (800415c <HAL_GPIO_Init+0x3a8>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	43db      	mvns	r3, r3
 80040bc:	69fa      	ldr	r2, [r7, #28]
 80040be:	4013      	ands	r3, r2
 80040c0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80040ce:	69fa      	ldr	r2, [r7, #28]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80040d6:	4a21      	ldr	r2, [pc, #132]	@ (800415c <HAL_GPIO_Init+0x3a8>)
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80040dc:	4b1f      	ldr	r3, [pc, #124]	@ (800415c <HAL_GPIO_Init+0x3a8>)
 80040de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040e2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	43db      	mvns	r3, r3
 80040e8:	69fa      	ldr	r2, [r7, #28]
 80040ea:	4013      	ands	r3, r2
 80040ec:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80040fa:	69fa      	ldr	r2, [r7, #28]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	4313      	orrs	r3, r2
 8004100:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8004102:	4a16      	ldr	r2, [pc, #88]	@ (800415c <HAL_GPIO_Init+0x3a8>)
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800410a:	4b14      	ldr	r3, [pc, #80]	@ (800415c <HAL_GPIO_Init+0x3a8>)
 800410c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004110:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	43db      	mvns	r3, r3
 8004116:	69fa      	ldr	r2, [r7, #28]
 8004118:	4013      	ands	r3, r2
 800411a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d003      	beq.n	8004130 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8004128:	69fa      	ldr	r2, [r7, #28]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	4313      	orrs	r3, r2
 800412e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8004130:	4a0a      	ldr	r2, [pc, #40]	@ (800415c <HAL_GPIO_Init+0x3a8>)
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	3301      	adds	r3, #1
 800413c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	fa22 f303 	lsr.w	r3, r2, r3
 8004148:	2b00      	cmp	r3, #0
 800414a:	f47f ae3d 	bne.w	8003dc8 <HAL_GPIO_Init+0x14>
  }
}
 800414e:	bf00      	nop
 8004150:	bf00      	nop
 8004152:	3724      	adds	r7, #36	@ 0x24
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr
 800415c:	46022000 	.word	0x46022000
 8004160:	002f7f7f 	.word	0x002f7f7f

08004164 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	460b      	mov	r3, r1
 800416e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	691a      	ldr	r2, [r3, #16]
 8004174:	887b      	ldrh	r3, [r7, #2]
 8004176:	4013      	ands	r3, r2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d002      	beq.n	8004182 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800417c:	2301      	movs	r3, #1
 800417e:	73fb      	strb	r3, [r7, #15]
 8004180:	e001      	b.n	8004186 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004182:	2300      	movs	r3, #0
 8004184:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 8004186:	7bfb      	ldrb	r3, [r7, #15]
}
 8004188:	4618      	mov	r0, r3
 800418a:	3714      	adds	r7, #20
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	460b      	mov	r3, r1
 800419e:	807b      	strh	r3, [r7, #2]
 80041a0:	4613      	mov	r3, r2
 80041a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041a4:	787b      	ldrb	r3, [r7, #1]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d003      	beq.n	80041b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80041aa:	887a      	ldrh	r2, [r7, #2]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80041b0:	e002      	b.n	80041b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80041b2:	887a      	ldrh	r2, [r7, #2]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e08d      	b.n	80042f2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d106      	bne.n	80041f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7fd f8fa 	bl	80013e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2224      	movs	r2, #36	@ 0x24
 80041f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 0201 	bic.w	r2, r2, #1
 8004206:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685a      	ldr	r2, [r3, #4]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004214:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689a      	ldr	r2, [r3, #8]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004224:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	2b01      	cmp	r3, #1
 800422c:	d107      	bne.n	800423e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689a      	ldr	r2, [r3, #8]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800423a:	609a      	str	r2, [r3, #8]
 800423c:	e006      	b.n	800424c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	689a      	ldr	r2, [r3, #8]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800424a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	2b02      	cmp	r3, #2
 8004252:	d108      	bne.n	8004266 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685a      	ldr	r2, [r3, #4]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004262:	605a      	str	r2, [r3, #4]
 8004264:	e007      	b.n	8004276 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004274:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	6812      	ldr	r2, [r2, #0]
 8004280:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004284:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004288:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68da      	ldr	r2, [r3, #12]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004298:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	691a      	ldr	r2, [r3, #16]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	430a      	orrs	r2, r1
 80042b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	69d9      	ldr	r1, [r3, #28]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a1a      	ldr	r2, [r3, #32]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	430a      	orrs	r2, r1
 80042c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f042 0201 	orr.w	r2, r2, #1
 80042d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2220      	movs	r2, #32
 80042de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3708      	adds	r7, #8
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
	...

080042fc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b088      	sub	sp, #32
 8004300:	af02      	add	r7, sp, #8
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	4608      	mov	r0, r1
 8004306:	4611      	mov	r1, r2
 8004308:	461a      	mov	r2, r3
 800430a:	4603      	mov	r3, r0
 800430c:	817b      	strh	r3, [r7, #10]
 800430e:	460b      	mov	r3, r1
 8004310:	813b      	strh	r3, [r7, #8]
 8004312:	4613      	mov	r3, r2
 8004314:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b20      	cmp	r3, #32
 8004320:	f040 80f9 	bne.w	8004516 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004324:	6a3b      	ldr	r3, [r7, #32]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d002      	beq.n	8004330 <HAL_I2C_Mem_Write+0x34>
 800432a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800432c:	2b00      	cmp	r3, #0
 800432e:	d105      	bne.n	800433c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004336:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e0ed      	b.n	8004518 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004342:	2b01      	cmp	r3, #1
 8004344:	d101      	bne.n	800434a <HAL_I2C_Mem_Write+0x4e>
 8004346:	2302      	movs	r3, #2
 8004348:	e0e6      	b.n	8004518 <HAL_I2C_Mem_Write+0x21c>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2201      	movs	r2, #1
 800434e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004352:	f7fd fded 	bl	8001f30 <HAL_GetTick>
 8004356:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	9300      	str	r3, [sp, #0]
 800435c:	2319      	movs	r3, #25
 800435e:	2201      	movs	r2, #1
 8004360:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004364:	68f8      	ldr	r0, [r7, #12]
 8004366:	f000 fac3 	bl	80048f0 <I2C_WaitOnFlagUntilTimeout>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d001      	beq.n	8004374 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e0d1      	b.n	8004518 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2221      	movs	r2, #33	@ 0x21
 8004378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2240      	movs	r2, #64	@ 0x40
 8004380:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6a3a      	ldr	r2, [r7, #32]
 800438e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004394:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800439c:	88f8      	ldrh	r0, [r7, #6]
 800439e:	893a      	ldrh	r2, [r7, #8]
 80043a0:	8979      	ldrh	r1, [r7, #10]
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	9301      	str	r3, [sp, #4]
 80043a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043a8:	9300      	str	r3, [sp, #0]
 80043aa:	4603      	mov	r3, r0
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	f000 f9d3 	bl	8004758 <I2C_RequestMemoryWrite>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d005      	beq.n	80043c4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e0a9      	b.n	8004518 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	2bff      	cmp	r3, #255	@ 0xff
 80043cc:	d90e      	bls.n	80043ec <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	22ff      	movs	r2, #255	@ 0xff
 80043d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043d8:	b2da      	uxtb	r2, r3
 80043da:	8979      	ldrh	r1, [r7, #10]
 80043dc:	2300      	movs	r3, #0
 80043de:	9300      	str	r3, [sp, #0]
 80043e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f000 fc47 	bl	8004c78 <I2C_TransferConfig>
 80043ea:	e00f      	b.n	800440c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043f0:	b29a      	uxth	r2, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043fa:	b2da      	uxtb	r2, r3
 80043fc:	8979      	ldrh	r1, [r7, #10]
 80043fe:	2300      	movs	r3, #0
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f000 fc36 	bl	8004c78 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800440c:	697a      	ldr	r2, [r7, #20]
 800440e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f000 fac6 	bl	80049a2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d001      	beq.n	8004420 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e07b      	b.n	8004518 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004424:	781a      	ldrb	r2, [r3, #0]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004430:	1c5a      	adds	r2, r3, #1
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800443a:	b29b      	uxth	r3, r3
 800443c:	3b01      	subs	r3, #1
 800443e:	b29a      	uxth	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004448:	3b01      	subs	r3, #1
 800444a:	b29a      	uxth	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004454:	b29b      	uxth	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d034      	beq.n	80044c4 <HAL_I2C_Mem_Write+0x1c8>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800445e:	2b00      	cmp	r3, #0
 8004460:	d130      	bne.n	80044c4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	9300      	str	r3, [sp, #0]
 8004466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004468:	2200      	movs	r2, #0
 800446a:	2180      	movs	r1, #128	@ 0x80
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f000 fa3f 	bl	80048f0 <I2C_WaitOnFlagUntilTimeout>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d001      	beq.n	800447c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e04d      	b.n	8004518 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004480:	b29b      	uxth	r3, r3
 8004482:	2bff      	cmp	r3, #255	@ 0xff
 8004484:	d90e      	bls.n	80044a4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	22ff      	movs	r2, #255	@ 0xff
 800448a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004490:	b2da      	uxtb	r2, r3
 8004492:	8979      	ldrh	r1, [r7, #10]
 8004494:	2300      	movs	r3, #0
 8004496:	9300      	str	r3, [sp, #0]
 8004498:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f000 fbeb 	bl	8004c78 <I2C_TransferConfig>
 80044a2:	e00f      	b.n	80044c4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044a8:	b29a      	uxth	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044b2:	b2da      	uxtb	r2, r3
 80044b4:	8979      	ldrh	r1, [r7, #10]
 80044b6:	2300      	movs	r3, #0
 80044b8:	9300      	str	r3, [sp, #0]
 80044ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f000 fbda 	bl	8004c78 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d19e      	bne.n	800440c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f000 faac 	bl	8004a30 <I2C_WaitOnSTOPFlagUntilTimeout>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e01a      	b.n	8004518 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2220      	movs	r2, #32
 80044e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	6859      	ldr	r1, [r3, #4]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	4b0a      	ldr	r3, [pc, #40]	@ (8004520 <HAL_I2C_Mem_Write+0x224>)
 80044f6:	400b      	ands	r3, r1
 80044f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2220      	movs	r2, #32
 80044fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004512:	2300      	movs	r3, #0
 8004514:	e000      	b.n	8004518 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004516:	2302      	movs	r3, #2
  }
}
 8004518:	4618      	mov	r0, r3
 800451a:	3718      	adds	r7, #24
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	fe00e800 	.word	0xfe00e800

08004524 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b088      	sub	sp, #32
 8004528:	af02      	add	r7, sp, #8
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	4608      	mov	r0, r1
 800452e:	4611      	mov	r1, r2
 8004530:	461a      	mov	r2, r3
 8004532:	4603      	mov	r3, r0
 8004534:	817b      	strh	r3, [r7, #10]
 8004536:	460b      	mov	r3, r1
 8004538:	813b      	strh	r3, [r7, #8]
 800453a:	4613      	mov	r3, r2
 800453c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004544:	b2db      	uxtb	r3, r3
 8004546:	2b20      	cmp	r3, #32
 8004548:	f040 80fd 	bne.w	8004746 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800454c:	6a3b      	ldr	r3, [r7, #32]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d002      	beq.n	8004558 <HAL_I2C_Mem_Read+0x34>
 8004552:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004554:	2b00      	cmp	r3, #0
 8004556:	d105      	bne.n	8004564 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800455e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e0f1      	b.n	8004748 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800456a:	2b01      	cmp	r3, #1
 800456c:	d101      	bne.n	8004572 <HAL_I2C_Mem_Read+0x4e>
 800456e:	2302      	movs	r3, #2
 8004570:	e0ea      	b.n	8004748 <HAL_I2C_Mem_Read+0x224>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800457a:	f7fd fcd9 	bl	8001f30 <HAL_GetTick>
 800457e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	9300      	str	r3, [sp, #0]
 8004584:	2319      	movs	r3, #25
 8004586:	2201      	movs	r2, #1
 8004588:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f000 f9af 	bl	80048f0 <I2C_WaitOnFlagUntilTimeout>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e0d5      	b.n	8004748 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2222      	movs	r2, #34	@ 0x22
 80045a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2240      	movs	r2, #64	@ 0x40
 80045a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6a3a      	ldr	r2, [r7, #32]
 80045b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80045bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045c4:	88f8      	ldrh	r0, [r7, #6]
 80045c6:	893a      	ldrh	r2, [r7, #8]
 80045c8:	8979      	ldrh	r1, [r7, #10]
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	9301      	str	r3, [sp, #4]
 80045ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045d0:	9300      	str	r3, [sp, #0]
 80045d2:	4603      	mov	r3, r0
 80045d4:	68f8      	ldr	r0, [r7, #12]
 80045d6:	f000 f913 	bl	8004800 <I2C_RequestMemoryRead>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d005      	beq.n	80045ec <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e0ad      	b.n	8004748 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	2bff      	cmp	r3, #255	@ 0xff
 80045f4:	d90e      	bls.n	8004614 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	22ff      	movs	r2, #255	@ 0xff
 80045fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004600:	b2da      	uxtb	r2, r3
 8004602:	8979      	ldrh	r1, [r7, #10]
 8004604:	4b52      	ldr	r3, [pc, #328]	@ (8004750 <HAL_I2C_Mem_Read+0x22c>)
 8004606:	9300      	str	r3, [sp, #0]
 8004608:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f000 fb33 	bl	8004c78 <I2C_TransferConfig>
 8004612:	e00f      	b.n	8004634 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004618:	b29a      	uxth	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004622:	b2da      	uxtb	r2, r3
 8004624:	8979      	ldrh	r1, [r7, #10]
 8004626:	4b4a      	ldr	r3, [pc, #296]	@ (8004750 <HAL_I2C_Mem_Read+0x22c>)
 8004628:	9300      	str	r3, [sp, #0]
 800462a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f000 fb22 	bl	8004c78 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	9300      	str	r3, [sp, #0]
 8004638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800463a:	2200      	movs	r2, #0
 800463c:	2104      	movs	r1, #4
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f000 f956 	bl	80048f0 <I2C_WaitOnFlagUntilTimeout>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d001      	beq.n	800464e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e07c      	b.n	8004748 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004658:	b2d2      	uxtb	r2, r2
 800465a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004660:	1c5a      	adds	r2, r3, #1
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800466a:	3b01      	subs	r3, #1
 800466c:	b29a      	uxth	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004676:	b29b      	uxth	r3, r3
 8004678:	3b01      	subs	r3, #1
 800467a:	b29a      	uxth	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004684:	b29b      	uxth	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d034      	beq.n	80046f4 <HAL_I2C_Mem_Read+0x1d0>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800468e:	2b00      	cmp	r3, #0
 8004690:	d130      	bne.n	80046f4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	9300      	str	r3, [sp, #0]
 8004696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004698:	2200      	movs	r2, #0
 800469a:	2180      	movs	r1, #128	@ 0x80
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f000 f927 	bl	80048f0 <I2C_WaitOnFlagUntilTimeout>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d001      	beq.n	80046ac <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e04d      	b.n	8004748 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	2bff      	cmp	r3, #255	@ 0xff
 80046b4:	d90e      	bls.n	80046d4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	22ff      	movs	r2, #255	@ 0xff
 80046ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	8979      	ldrh	r1, [r7, #10]
 80046c4:	2300      	movs	r3, #0
 80046c6:	9300      	str	r3, [sp, #0]
 80046c8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80046cc:	68f8      	ldr	r0, [r7, #12]
 80046ce:	f000 fad3 	bl	8004c78 <I2C_TransferConfig>
 80046d2:	e00f      	b.n	80046f4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046d8:	b29a      	uxth	r2, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046e2:	b2da      	uxtb	r2, r3
 80046e4:	8979      	ldrh	r1, [r7, #10]
 80046e6:	2300      	movs	r3, #0
 80046e8:	9300      	str	r3, [sp, #0]
 80046ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f000 fac2 	bl	8004c78 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d19a      	bne.n	8004634 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004702:	68f8      	ldr	r0, [r7, #12]
 8004704:	f000 f994 	bl	8004a30 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d001      	beq.n	8004712 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e01a      	b.n	8004748 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2220      	movs	r2, #32
 8004718:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	6859      	ldr	r1, [r3, #4]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	4b0b      	ldr	r3, [pc, #44]	@ (8004754 <HAL_I2C_Mem_Read+0x230>)
 8004726:	400b      	ands	r3, r1
 8004728:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2220      	movs	r2, #32
 800472e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004742:	2300      	movs	r3, #0
 8004744:	e000      	b.n	8004748 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004746:	2302      	movs	r3, #2
  }
}
 8004748:	4618      	mov	r0, r3
 800474a:	3718      	adds	r7, #24
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	80002400 	.word	0x80002400
 8004754:	fe00e800 	.word	0xfe00e800

08004758 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af02      	add	r7, sp, #8
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	4608      	mov	r0, r1
 8004762:	4611      	mov	r1, r2
 8004764:	461a      	mov	r2, r3
 8004766:	4603      	mov	r3, r0
 8004768:	817b      	strh	r3, [r7, #10]
 800476a:	460b      	mov	r3, r1
 800476c:	813b      	strh	r3, [r7, #8]
 800476e:	4613      	mov	r3, r2
 8004770:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004772:	88fb      	ldrh	r3, [r7, #6]
 8004774:	b2da      	uxtb	r2, r3
 8004776:	8979      	ldrh	r1, [r7, #10]
 8004778:	4b20      	ldr	r3, [pc, #128]	@ (80047fc <I2C_RequestMemoryWrite+0xa4>)
 800477a:	9300      	str	r3, [sp, #0]
 800477c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004780:	68f8      	ldr	r0, [r7, #12]
 8004782:	f000 fa79 	bl	8004c78 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004786:	69fa      	ldr	r2, [r7, #28]
 8004788:	69b9      	ldr	r1, [r7, #24]
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f000 f909 	bl	80049a2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d001      	beq.n	800479a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e02c      	b.n	80047f4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800479a:	88fb      	ldrh	r3, [r7, #6]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d105      	bne.n	80047ac <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80047a0:	893b      	ldrh	r3, [r7, #8]
 80047a2:	b2da      	uxtb	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	629a      	str	r2, [r3, #40]	@ 0x28
 80047aa:	e015      	b.n	80047d8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80047ac:	893b      	ldrh	r3, [r7, #8]
 80047ae:	0a1b      	lsrs	r3, r3, #8
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	b2da      	uxtb	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047ba:	69fa      	ldr	r2, [r7, #28]
 80047bc:	69b9      	ldr	r1, [r7, #24]
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f000 f8ef 	bl	80049a2 <I2C_WaitOnTXISFlagUntilTimeout>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d001      	beq.n	80047ce <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e012      	b.n	80047f4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80047ce:	893b      	ldrh	r3, [r7, #8]
 80047d0:	b2da      	uxtb	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	9300      	str	r3, [sp, #0]
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	2200      	movs	r2, #0
 80047e0:	2180      	movs	r1, #128	@ 0x80
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f000 f884 	bl	80048f0 <I2C_WaitOnFlagUntilTimeout>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e000      	b.n	80047f4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	80002000 	.word	0x80002000

08004800 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b086      	sub	sp, #24
 8004804:	af02      	add	r7, sp, #8
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	4608      	mov	r0, r1
 800480a:	4611      	mov	r1, r2
 800480c:	461a      	mov	r2, r3
 800480e:	4603      	mov	r3, r0
 8004810:	817b      	strh	r3, [r7, #10]
 8004812:	460b      	mov	r3, r1
 8004814:	813b      	strh	r3, [r7, #8]
 8004816:	4613      	mov	r3, r2
 8004818:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800481a:	88fb      	ldrh	r3, [r7, #6]
 800481c:	b2da      	uxtb	r2, r3
 800481e:	8979      	ldrh	r1, [r7, #10]
 8004820:	4b20      	ldr	r3, [pc, #128]	@ (80048a4 <I2C_RequestMemoryRead+0xa4>)
 8004822:	9300      	str	r3, [sp, #0]
 8004824:	2300      	movs	r3, #0
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f000 fa26 	bl	8004c78 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800482c:	69fa      	ldr	r2, [r7, #28]
 800482e:	69b9      	ldr	r1, [r7, #24]
 8004830:	68f8      	ldr	r0, [r7, #12]
 8004832:	f000 f8b6 	bl	80049a2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d001      	beq.n	8004840 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e02c      	b.n	800489a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004840:	88fb      	ldrh	r3, [r7, #6]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d105      	bne.n	8004852 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004846:	893b      	ldrh	r3, [r7, #8]
 8004848:	b2da      	uxtb	r2, r3
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004850:	e015      	b.n	800487e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004852:	893b      	ldrh	r3, [r7, #8]
 8004854:	0a1b      	lsrs	r3, r3, #8
 8004856:	b29b      	uxth	r3, r3
 8004858:	b2da      	uxtb	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004860:	69fa      	ldr	r2, [r7, #28]
 8004862:	69b9      	ldr	r1, [r7, #24]
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f000 f89c 	bl	80049a2 <I2C_WaitOnTXISFlagUntilTimeout>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d001      	beq.n	8004874 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e012      	b.n	800489a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004874:	893b      	ldrh	r3, [r7, #8]
 8004876:	b2da      	uxtb	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	2200      	movs	r2, #0
 8004886:	2140      	movs	r1, #64	@ 0x40
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f000 f831 	bl	80048f0 <I2C_WaitOnFlagUntilTimeout>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d001      	beq.n	8004898 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e000      	b.n	800489a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	80002000 	.word	0x80002000

080048a8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d103      	bne.n	80048c6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2200      	movs	r2, #0
 80048c4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	f003 0301 	and.w	r3, r3, #1
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d007      	beq.n	80048e4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	699a      	ldr	r2, [r3, #24]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f042 0201 	orr.w	r2, r2, #1
 80048e2:	619a      	str	r2, [r3, #24]
  }
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	603b      	str	r3, [r7, #0]
 80048fc:	4613      	mov	r3, r2
 80048fe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004900:	e03b      	b.n	800497a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004902:	69ba      	ldr	r2, [r7, #24]
 8004904:	6839      	ldr	r1, [r7, #0]
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f000 f8d6 	bl	8004ab8 <I2C_IsErrorOccurred>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e041      	b.n	800499a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800491c:	d02d      	beq.n	800497a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800491e:	f7fd fb07 	bl	8001f30 <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	429a      	cmp	r2, r3
 800492c:	d302      	bcc.n	8004934 <I2C_WaitOnFlagUntilTimeout+0x44>
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d122      	bne.n	800497a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	699a      	ldr	r2, [r3, #24]
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	4013      	ands	r3, r2
 800493e:	68ba      	ldr	r2, [r7, #8]
 8004940:	429a      	cmp	r2, r3
 8004942:	bf0c      	ite	eq
 8004944:	2301      	moveq	r3, #1
 8004946:	2300      	movne	r3, #0
 8004948:	b2db      	uxtb	r3, r3
 800494a:	461a      	mov	r2, r3
 800494c:	79fb      	ldrb	r3, [r7, #7]
 800494e:	429a      	cmp	r2, r3
 8004950:	d113      	bne.n	800497a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004956:	f043 0220 	orr.w	r2, r3, #32
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2220      	movs	r2, #32
 8004962:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e00f      	b.n	800499a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	699a      	ldr	r2, [r3, #24]
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	4013      	ands	r3, r2
 8004984:	68ba      	ldr	r2, [r7, #8]
 8004986:	429a      	cmp	r2, r3
 8004988:	bf0c      	ite	eq
 800498a:	2301      	moveq	r3, #1
 800498c:	2300      	movne	r3, #0
 800498e:	b2db      	uxtb	r3, r3
 8004990:	461a      	mov	r2, r3
 8004992:	79fb      	ldrb	r3, [r7, #7]
 8004994:	429a      	cmp	r2, r3
 8004996:	d0b4      	beq.n	8004902 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3710      	adds	r7, #16
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b084      	sub	sp, #16
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	60f8      	str	r0, [r7, #12]
 80049aa:	60b9      	str	r1, [r7, #8]
 80049ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80049ae:	e033      	b.n	8004a18 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	68b9      	ldr	r1, [r7, #8]
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f000 f87f 	bl	8004ab8 <I2C_IsErrorOccurred>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d001      	beq.n	80049c4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e031      	b.n	8004a28 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ca:	d025      	beq.n	8004a18 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049cc:	f7fd fab0 	bl	8001f30 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	68ba      	ldr	r2, [r7, #8]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d302      	bcc.n	80049e2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d11a      	bne.n	8004a18 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	f003 0302 	and.w	r3, r3, #2
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d013      	beq.n	8004a18 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049f4:	f043 0220 	orr.w	r2, r3, #32
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2220      	movs	r2, #32
 8004a00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e007      	b.n	8004a28 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d1c4      	bne.n	80049b0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a3c:	e02f      	b.n	8004a9e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	68b9      	ldr	r1, [r7, #8]
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f000 f838 	bl	8004ab8 <I2C_IsErrorOccurred>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d001      	beq.n	8004a52 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e02d      	b.n	8004aae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a52:	f7fd fa6d 	bl	8001f30 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	68ba      	ldr	r2, [r7, #8]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d302      	bcc.n	8004a68 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d11a      	bne.n	8004a9e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	f003 0320 	and.w	r3, r3, #32
 8004a72:	2b20      	cmp	r3, #32
 8004a74:	d013      	beq.n	8004a9e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a7a:	f043 0220 	orr.w	r2, r3, #32
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2220      	movs	r2, #32
 8004a86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e007      	b.n	8004aae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	f003 0320 	and.w	r3, r3, #32
 8004aa8:	2b20      	cmp	r3, #32
 8004aaa:	d1c8      	bne.n	8004a3e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
	...

08004ab8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b08a      	sub	sp, #40	@ 0x28
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	f003 0310 	and.w	r3, r3, #16
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d068      	beq.n	8004bb6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2210      	movs	r2, #16
 8004aea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004aec:	e049      	b.n	8004b82 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af4:	d045      	beq.n	8004b82 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004af6:	f7fd fa1b 	bl	8001f30 <HAL_GetTick>
 8004afa:	4602      	mov	r2, r0
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	68ba      	ldr	r2, [r7, #8]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d302      	bcc.n	8004b0c <I2C_IsErrorOccurred+0x54>
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d13a      	bne.n	8004b82 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b16:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b1e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b2e:	d121      	bne.n	8004b74 <I2C_IsErrorOccurred+0xbc>
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b36:	d01d      	beq.n	8004b74 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004b38:	7cfb      	ldrb	r3, [r7, #19]
 8004b3a:	2b20      	cmp	r3, #32
 8004b3c:	d01a      	beq.n	8004b74 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	685a      	ldr	r2, [r3, #4]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b4c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004b4e:	f7fd f9ef 	bl	8001f30 <HAL_GetTick>
 8004b52:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b54:	e00e      	b.n	8004b74 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004b56:	f7fd f9eb 	bl	8001f30 <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	2b19      	cmp	r3, #25
 8004b62:	d907      	bls.n	8004b74 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004b64:	6a3b      	ldr	r3, [r7, #32]
 8004b66:	f043 0320 	orr.w	r3, r3, #32
 8004b6a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004b72:	e006      	b.n	8004b82 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	f003 0320 	and.w	r3, r3, #32
 8004b7e:	2b20      	cmp	r3, #32
 8004b80:	d1e9      	bne.n	8004b56 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	f003 0320 	and.w	r3, r3, #32
 8004b8c:	2b20      	cmp	r3, #32
 8004b8e:	d003      	beq.n	8004b98 <I2C_IsErrorOccurred+0xe0>
 8004b90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d0aa      	beq.n	8004aee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004b98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d103      	bne.n	8004ba8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2220      	movs	r2, #32
 8004ba6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004ba8:	6a3b      	ldr	r3, [r7, #32]
 8004baa:	f043 0304 	orr.w	r3, r3, #4
 8004bae:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00b      	beq.n	8004be0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004bc8:	6a3b      	ldr	r3, [r7, #32]
 8004bca:	f043 0301 	orr.w	r3, r3, #1
 8004bce:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004bd8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00b      	beq.n	8004c02 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004bea:	6a3b      	ldr	r3, [r7, #32]
 8004bec:	f043 0308 	orr.w	r3, r3, #8
 8004bf0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004bfa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d00b      	beq.n	8004c24 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004c0c:	6a3b      	ldr	r3, [r7, #32]
 8004c0e:	f043 0302 	orr.w	r3, r3, #2
 8004c12:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c1c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004c24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d01c      	beq.n	8004c66 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	f7ff fe3b 	bl	80048a8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	6859      	ldr	r1, [r3, #4]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	4b0d      	ldr	r3, [pc, #52]	@ (8004c74 <I2C_IsErrorOccurred+0x1bc>)
 8004c3e:	400b      	ands	r3, r1
 8004c40:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c46:	6a3b      	ldr	r3, [r7, #32]
 8004c48:	431a      	orrs	r2, r3
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2220      	movs	r2, #32
 8004c52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004c66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3728      	adds	r7, #40	@ 0x28
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	fe00e800 	.word	0xfe00e800

08004c78 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b087      	sub	sp, #28
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	607b      	str	r3, [r7, #4]
 8004c82:	460b      	mov	r3, r1
 8004c84:	817b      	strh	r3, [r7, #10]
 8004c86:	4613      	mov	r3, r2
 8004c88:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004c8a:	897b      	ldrh	r3, [r7, #10]
 8004c8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004c90:	7a7b      	ldrb	r3, [r7, #9]
 8004c92:	041b      	lsls	r3, r3, #16
 8004c94:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004c98:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004c9e:	6a3b      	ldr	r3, [r7, #32]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004ca6:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	6a3b      	ldr	r3, [r7, #32]
 8004cb0:	0d5b      	lsrs	r3, r3, #21
 8004cb2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004cb6:	4b08      	ldr	r3, [pc, #32]	@ (8004cd8 <I2C_TransferConfig+0x60>)
 8004cb8:	430b      	orrs	r3, r1
 8004cba:	43db      	mvns	r3, r3
 8004cbc:	ea02 0103 	and.w	r1, r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	697a      	ldr	r2, [r7, #20]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004cca:	bf00      	nop
 8004ccc:	371c      	adds	r7, #28
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	03ff63ff 	.word	0x03ff63ff

08004cdc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b20      	cmp	r3, #32
 8004cf0:	d138      	bne.n	8004d64 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d101      	bne.n	8004d00 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	e032      	b.n	8004d66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2224      	movs	r2, #36	@ 0x24
 8004d0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f022 0201 	bic.w	r2, r2, #1
 8004d1e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004d2e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6819      	ldr	r1, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	683a      	ldr	r2, [r7, #0]
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f042 0201 	orr.w	r2, r2, #1
 8004d4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2220      	movs	r2, #32
 8004d54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004d60:	2300      	movs	r3, #0
 8004d62:	e000      	b.n	8004d66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d64:	2302      	movs	r3, #2
  }
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr

08004d72 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004d72:	b480      	push	{r7}
 8004d74:	b085      	sub	sp, #20
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
 8004d7a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	2b20      	cmp	r3, #32
 8004d86:	d139      	bne.n	8004dfc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d101      	bne.n	8004d96 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004d92:	2302      	movs	r3, #2
 8004d94:	e033      	b.n	8004dfe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2224      	movs	r2, #36	@ 0x24
 8004da2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f022 0201 	bic.w	r2, r2, #1
 8004db4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004dc4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	021b      	lsls	r3, r3, #8
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f042 0201 	orr.w	r2, r2, #1
 8004de6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2220      	movs	r2, #32
 8004dec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	e000      	b.n	8004dfe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004dfc:	2302      	movs	r3, #2
  }
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3714      	adds	r7, #20
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr

08004e0a <LL_DLYB_Enable>:
  * @param  DLYBx DLYB Instance
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b083      	sub	sp, #12
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f043 0201 	orr.w	r2, r3, #1
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	601a      	str	r2, [r3, #0]
}
 8004e1e:	bf00      	nop
 8004e20:	370c      	adds	r7, #12
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
	...

08004e2c <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b086      	sub	sp, #24
 8004e30:	af02      	add	r7, sp, #8
 8004e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e34:	2300      	movs	r3, #0
 8004e36:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8004e38:	f7fd f87a 	bl	8001f30 <HAL_GetTick>
 8004e3c:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d102      	bne.n	8004e4a <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	73fb      	strb	r3, [r7, #15]
 8004e48:	e0a5      	b.n	8004f96 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f040 809e 	bne.w	8004f96 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f7fc fc52 	bl	8001704 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8004e60:	f241 3188 	movw	r1, #5000	@ 0x1388
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 fba4 	bl	80055b2 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	689a      	ldr	r2, [r3, #8]
 8004e70:	4b4b      	ldr	r3, [pc, #300]	@ (8004fa0 <HAL_OSPI_Init+0x174>)
 8004e72:	4013      	ands	r3, r2
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	68d1      	ldr	r1, [r2, #12]
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	6912      	ldr	r2, [r2, #16]
 8004e7c:	3a01      	subs	r2, #1
 8004e7e:	0412      	lsls	r2, r2, #16
 8004e80:	4311      	orrs	r1, r2
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	6952      	ldr	r2, [r2, #20]
 8004e86:	3a01      	subs	r2, #1
 8004e88:	0212      	lsls	r2, r2, #8
 8004e8a:	4311      	orrs	r1, r2
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004e90:	4311      	orrs	r1, r2
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	69d2      	ldr	r2, [r2, #28]
 8004e96:	4311      	orrs	r1, r2
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	6812      	ldr	r2, [r2, #0]
 8004e9c:	430b      	orrs	r3, r1
 8004e9e:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a1a      	ldr	r2, [r3, #32]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eba:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004ed0:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	021a      	lsls	r2, r3, #8
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ef0:	9300      	str	r3, [sp, #0]
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	2120      	movs	r1, #32
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f001 f89b 	bl	8006034 <OSPI_WaitFlagStateUntilTimeout>
 8004efe:	4603      	mov	r3, r0
 8004f00:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004f02:	7bfb      	ldrb	r3, [r7, #15]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d146      	bne.n	8004f96 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f16:	1e5a      	subs	r2, r3, #1
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DMM, hospi->Init.DualQuad);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	689a      	ldr	r2, [r3, #8]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	430a      	orrs	r2, r1
 8004f34:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004f3e:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f4a:	431a      	orrs	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	430a      	orrs	r2, r1
 8004f52:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f042 0201 	orr.w	r2, r2, #1
 8004f64:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d107      	bne.n	8004f7e <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	689a      	ldr	r2, [r3, #8]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f042 0202 	orr.w	r2, r2, #2
 8004f7c:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004f86:	d103      	bne.n	8004f90 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	651a      	str	r2, [r3, #80]	@ 0x50
 8004f8e:	e002      	b.n	8004f96 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2202      	movs	r2, #2
 8004f94:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8004f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	f8e0c0f4 	.word	0xf8e0c0f4

08004fa4 <HAL_OSPI_IRQHandler>:
  * @brief  Handle OSPI interrupt request.
  * @param  hospi : OSPI handle
  * @retval None
  */
void HAL_OSPI_IRQHandler(OSPI_HandleTypeDef *hospi)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b086      	sub	sp, #24
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	3350      	adds	r3, #80	@ 0x50
 8004fb2:	617b      	str	r3, [r7, #20]
  uint32_t flag           = hospi->Instance->SR;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
 8004fba:	613b      	str	r3, [r7, #16]
  uint32_t itsource       = hospi->Instance->CR;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	60fb      	str	r3, [r7, #12]
  uint32_t currentstate   = hospi->State;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fc8:	60bb      	str	r3, [r7, #8]

  /* OctoSPI fifo threshold interrupt occurred -------------------------------*/
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	f003 0304 	and.w	r3, r3, #4
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d03a      	beq.n	800504a <HAL_OSPI_IRQHandler+0xa6>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d035      	beq.n	800504a <HAL_OSPI_IRQHandler+0xa6>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	2b18      	cmp	r3, #24
 8004fe2:	d10f      	bne.n	8005004 <HAL_OSPI_IRQHandler+0x60>
    {
      /* Write a data in the fifo */
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe8:	781a      	ldrb	r2, [r3, #0]
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff2:	1c5a      	adds	r2, r3, #1
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	641a      	str	r2, [r3, #64]	@ 0x40
      hospi->XferCount--;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ffc:	1e5a      	subs	r2, r3, #1
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	649a      	str	r2, [r3, #72]	@ 0x48
 8005002:	e012      	b.n	800502a <HAL_OSPI_IRQHandler+0x86>
    }
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	2b28      	cmp	r3, #40	@ 0x28
 8005008:	d10f      	bne.n	800502a <HAL_OSPI_IRQHandler+0x86>
    {
      /* Read a data from the fifo */
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800500e:	697a      	ldr	r2, [r7, #20]
 8005010:	7812      	ldrb	r2, [r2, #0]
 8005012:	b2d2      	uxtb	r2, r2
 8005014:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800501a:	1c5a      	adds	r2, r3, #1
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	641a      	str	r2, [r3, #64]	@ 0x40
      hospi->XferCount--;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005024:	1e5a      	subs	r2, r3, #1
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	649a      	str	r2, [r3, #72]	@ 0x48
    else
    {
      /* Nothing to do */
    }

    if (hospi->XferCount == 0U)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800502e:	2b00      	cmp	r3, #0
 8005030:	d107      	bne.n	8005042 <HAL_OSPI_IRQHandler+0x9e>
    {
      /* All data have been received or transmitted for the transfer */
      /* Disable fifo threshold interrupt */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005040:	601a      	str	r2, [r3, #0]

    /* Fifo threshold callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->FifoThresholdCallback(hospi);
#else
    HAL_OSPI_FifoThresholdCallback(hospi);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 fa04 	bl	8005450 <HAL_OSPI_FifoThresholdCallback>
 8005048:	e0e7      	b.n	800521a <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
  /* OctoSPI transfer complete interrupt occurred ----------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	f003 0302 	and.w	r3, r3, #2
 8005050:	2b00      	cmp	r3, #0
 8005052:	d067      	beq.n	8005124 <HAL_OSPI_IRQHandler+0x180>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d062      	beq.n	8005124 <HAL_OSPI_IRQHandler+0x180>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	2b28      	cmp	r3, #40	@ 0x28
 8005062:	d131      	bne.n	80050c8 <HAL_OSPI_IRQHandler+0x124>
    {
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005068:	2b00      	cmp	r3, #0
 800506a:	d015      	beq.n	8005098 <HAL_OSPI_IRQHandler+0xf4>
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	f403 43fe 	and.w	r3, r3, #32512	@ 0x7f00
 8005072:	2b00      	cmp	r3, #0
 8005074:	d010      	beq.n	8005098 <HAL_OSPI_IRQHandler+0xf4>
      {
        /* Read the last data received in the fifo */
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	7812      	ldrb	r2, [r2, #0]
 800507e:	b2d2      	uxtb	r2, r2
 8005080:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005086:	1c5a      	adds	r2, r3, #1
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005090:	1e5a      	subs	r2, r3, #1
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	649a      	str	r2, [r3, #72]	@ 0x48
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8005096:	e0bd      	b.n	8005214 <HAL_OSPI_IRQHandler+0x270>
      }
      else if (hospi->XferCount == 0U)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800509c:	2b00      	cmp	r3, #0
 800509e:	f040 80b9 	bne.w	8005214 <HAL_OSPI_IRQHandler+0x270>
      {
        /* Clear flag */
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2202      	movs	r2, #2
 80050a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Disable the interrupts */
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
 80050b8:	601a      	str	r2, [r3, #0]

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2202      	movs	r2, #2
 80050be:	651a      	str	r2, [r3, #80]	@ 0x50

        /* RX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->RxCpltCallback(hospi);
#else
        HAL_OSPI_RxCpltCallback(hospi);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 f9d9 	bl	8005478 <HAL_OSPI_RxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80050c6:	e0a5      	b.n	8005214 <HAL_OSPI_IRQHandler+0x270>
      }
    }
    else
    {
      /* Clear flag */
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2202      	movs	r2, #2
 80050ce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
 80050de:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2202      	movs	r2, #2
 80050e4:	651a      	str	r2, [r3, #80]	@ 0x50

      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	2b18      	cmp	r3, #24
 80050ea:	d103      	bne.n	80050f4 <HAL_OSPI_IRQHandler+0x150>
      {
        /* TX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->TxCpltCallback(hospi);
#else
        HAL_OSPI_TxCpltCallback(hospi);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 f9cd 	bl	800548c <HAL_OSPI_TxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80050f2:	e08f      	b.n	8005214 <HAL_OSPI_IRQHandler+0x270>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	2b08      	cmp	r3, #8
 80050f8:	d103      	bne.n	8005102 <HAL_OSPI_IRQHandler+0x15e>
      {
        /* Command complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->CmdCpltCallback(hospi);
#else
        HAL_OSPI_CmdCpltCallback(hospi);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f9b2 	bl	8005464 <HAL_OSPI_CmdCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8005100:	e088      	b.n	8005214 <HAL_OSPI_IRQHandler+0x270>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_ABORT)
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005108:	f040 8084 	bne.w	8005214 <HAL_OSPI_IRQHandler+0x270>
      {
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005110:	2b00      	cmp	r3, #0
 8005112:	d103      	bne.n	800511c <HAL_OSPI_IRQHandler+0x178>
          /* Abort called by the user */
          /* Abort complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->AbortCpltCallback(hospi);
#else
          HAL_OSPI_AbortCpltCallback(hospi);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 f991 	bl	800543c <HAL_OSPI_AbortCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800511a:	e07b      	b.n	8005214 <HAL_OSPI_IRQHandler+0x270>
          /* Abort due to an error (eg : DMA error) */
          /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->ErrorCallback(hospi);
#else
          HAL_OSPI_ErrorCallback(hospi);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 f983 	bl	8005428 <HAL_OSPI_ErrorCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8005122:	e077      	b.n	8005214 <HAL_OSPI_IRQHandler+0x270>
        /* Nothing to do */
      }
    }
  }
  /* OctoSPI status match interrupt occurred ---------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	f003 0308 	and.w	r3, r3, #8
 800512a:	2b00      	cmp	r3, #0
 800512c:	d01e      	beq.n	800516c <HAL_OSPI_IRQHandler+0x1c8>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d019      	beq.n	800516c <HAL_OSPI_IRQHandler+0x1c8>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2208      	movs	r2, #8
 800513e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Check if automatic poll mode stop is activated */
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00a      	beq.n	8005164 <HAL_OSPI_IRQHandler+0x1c0>
    {
      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f422 2210 	bic.w	r2, r2, #589824	@ 0x90000
 800515c:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2202      	movs	r2, #2
 8005162:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Status match callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->StatusMatchCallback(hospi);
#else
    HAL_OSPI_StatusMatchCallback(hospi);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 f99b 	bl	80054a0 <HAL_OSPI_StatusMatchCallback>
 800516a:	e056      	b.n	800521a <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
  }
  /* OctoSPI transfer error interrupt occurred -------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	f003 0301 	and.w	r3, r3, #1
 8005172:	2b00      	cmp	r3, #0
 8005174:	d03c      	beq.n	80051f0 <HAL_OSPI_IRQHandler+0x24c>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d037      	beq.n	80051f0 <HAL_OSPI_IRQHandler+0x24c>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2201      	movs	r2, #1
 8005186:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable all interrupts */
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 8005196:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2202      	movs	r2, #2
 800519c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0304 	and.w	r3, r3, #4
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d01a      	beq.n	80051e2 <HAL_OSPI_IRQHandler+0x23e>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f022 0204 	bic.w	r2, r2, #4
 80051ba:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      hospi->hdma->XferAbortCallback = OSPI_DMAAbortCplt;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051c0:	4a18      	ldr	r2, [pc, #96]	@ (8005224 <HAL_OSPI_IRQHandler+0x280>)
 80051c2:	66da      	str	r2, [r3, #108]	@ 0x6c
      if (HAL_DMA_Abort_IT(hospi->hdma) != HAL_OK)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051c8:	4618      	mov	r0, r3
 80051ca:	f7fd f9e7 	bl	800259c <HAL_DMA_Abort_IT>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d021      	beq.n	8005218 <HAL_OSPI_IRQHandler+0x274>
      {
        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2202      	movs	r2, #2
 80051d8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->ErrorCallback(hospi);
#else
        HAL_OSPI_ErrorCallback(hospi);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 f924 	bl	8005428 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 80051e0:	e01a      	b.n	8005218 <HAL_OSPI_IRQHandler+0x274>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2202      	movs	r2, #2
 80051e6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
      hospi->ErrorCallback(hospi);
#else
      HAL_OSPI_ErrorCallback(hospi);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 f91d 	bl	8005428 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 80051ee:	e013      	b.n	8005218 <HAL_OSPI_IRQHandler+0x274>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
    }
  }
  /* OctoSPI timeout interrupt occurred --------------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	f003 0310 	and.w	r3, r3, #16
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00f      	beq.n	800521a <HAL_OSPI_IRQHandler+0x276>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d00a      	beq.n	800521a <HAL_OSPI_IRQHandler+0x276>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2210      	movs	r2, #16
 800520a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Timeout callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->TimeOutCallback(hospi);
#else
    HAL_OSPI_TimeOutCallback(hospi);
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 f951 	bl	80054b4 <HAL_OSPI_TimeOutCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005212:	e002      	b.n	800521a <HAL_OSPI_IRQHandler+0x276>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8005214:	bf00      	nop
 8005216:	e000      	b.n	800521a <HAL_OSPI_IRQHandler+0x276>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8005218:	bf00      	nop
}
 800521a:	bf00      	nop
 800521c:	3718      	adds	r7, #24
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	08005fbd 	.word	0x08005fbd

08005228 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b08a      	sub	sp, #40	@ 0x28
 800522c:	af02      	add	r7, sp, #8
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8005234:	f7fc fe7c 	bl	8001f30 <HAL_GetTick>
 8005238:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE(cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800523e:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE(cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005244:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	2b02      	cmp	r3, #2
 800524a:	d104      	bne.n	8005256 <HAL_OSPI_Command+0x2e>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005254:	d115      	bne.n	8005282 <HAL_OSPI_Command+0x5a>
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	2b14      	cmp	r3, #20
 800525a:	d107      	bne.n	800526c <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2b02      	cmp	r3, #2
 8005262:	d00e      	beq.n	8005282 <HAL_OSPI_Command+0x5a>
                                                   || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2b03      	cmp	r3, #3
 800526a:	d00a      	beq.n	8005282 <HAL_OSPI_Command+0x5a>
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	2b24      	cmp	r3, #36	@ 0x24
 8005270:	d15b      	bne.n	800532a <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2b01      	cmp	r3, #1
 8005278:	d003      	beq.n	8005282 <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 800527e:	2b03      	cmp	r3, #3
 8005280:	d153      	bne.n	800532a <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	9300      	str	r3, [sp, #0]
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	2200      	movs	r2, #0
 800528a:	2120      	movs	r1, #32
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f000 fed1 	bl	8006034 <OSPI_WaitFlagStateUntilTimeout>
 8005292:	4603      	mov	r3, r0
 8005294:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8005296:	7ffb      	ldrb	r3, [r7, #31]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d14c      	bne.n	8005336 <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 80052a2:	68b9      	ldr	r1, [r7, #8]
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f000 ff05 	bl	80060b4 <OSPI_ConfigCmd>
 80052aa:	4603      	mov	r3, r0
 80052ac:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 80052ae:	7ffb      	ldrb	r3, [r7, #31]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d140      	bne.n	8005336 <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d10e      	bne.n	80052da <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	9300      	str	r3, [sp, #0]
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	2201      	movs	r2, #1
 80052c4:	2102      	movs	r1, #2
 80052c6:	68f8      	ldr	r0, [r7, #12]
 80052c8:	f000 feb4 	bl	8006034 <OSPI_WaitFlagStateUntilTimeout>
 80052cc:	4603      	mov	r3, r0
 80052ce:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2202      	movs	r2, #2
 80052d6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 80052d8:	e02d      	b.n	8005336 <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d103      	bne.n	80052ea <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2204      	movs	r2, #4
 80052e6:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 80052e8:	e025      	b.n	8005336 <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d10b      	bne.n	800530a <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052f6:	2b24      	cmp	r3, #36	@ 0x24
 80052f8:	d103      	bne.n	8005302 <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2204      	movs	r2, #4
 80052fe:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8005300:	e019      	b.n	8005336 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2214      	movs	r2, #20
 8005306:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8005308:	e015      	b.n	8005336 <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2b02      	cmp	r3, #2
 8005310:	d111      	bne.n	8005336 <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005316:	2b14      	cmp	r3, #20
 8005318:	d103      	bne.n	8005322 <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2204      	movs	r2, #4
 800531e:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8005320:	e009      	b.n	8005336 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2224      	movs	r2, #36	@ 0x24
 8005326:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8005328:	e005      	b.n	8005336 <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2210      	movs	r2, #16
 8005332:	655a      	str	r2, [r3, #84]	@ 0x54
 8005334:	e000      	b.n	8005338 <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 8005336:	bf00      	nop
  }

  /* Return function status */
  return status;
 8005338:	7ffb      	ldrb	r3, [r7, #31]
}
 800533a:	4618      	mov	r0, r3
 800533c:	3720      	adds	r7, #32
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8005342:	b580      	push	{r7, lr}
 8005344:	b08a      	sub	sp, #40	@ 0x28
 8005346:	af02      	add	r7, sp, #8
 8005348:	60f8      	str	r0, [r7, #12]
 800534a:	60b9      	str	r1, [r7, #8]
 800534c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800534e:	f7fc fdef 	bl	8001f30 <HAL_GetTick>
 8005352:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	3350      	adds	r3, #80	@ 0x50
 800535a:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d105      	bne.n	800536e <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2208      	movs	r2, #8
 800536a:	655a      	str	r2, [r3, #84]	@ 0x54
 800536c:	e057      	b.n	800541e <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005372:	2b04      	cmp	r3, #4
 8005374:	d14e      	bne.n	8005414 <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800537c:	1c5a      	adds	r2, r3, #1
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	645a      	str	r2, [r3, #68]	@ 0x44
      hospi->pBuffPtr  = pData;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	68ba      	ldr	r2, [r7, #8]
 800538e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800539e:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	9300      	str	r3, [sp, #0]
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	2201      	movs	r2, #1
 80053a8:	2104      	movs	r1, #4
 80053aa:	68f8      	ldr	r0, [r7, #12]
 80053ac:	f000 fe42 	bl	8006034 <OSPI_WaitFlagStateUntilTimeout>
 80053b0:	4603      	mov	r3, r0
 80053b2:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80053b4:	7ffb      	ldrb	r3, [r7, #31]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d113      	bne.n	80053e2 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053be:	781a      	ldrb	r2, [r3, #0]
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c8:	1c5a      	adds	r2, r3, #1
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053d2:	1e5a      	subs	r2, r3, #1
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	649a      	str	r2, [r3, #72]	@ 0x48
      }
      while (hospi->XferCount > 0U);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d1df      	bne.n	80053a0 <HAL_OSPI_Transmit+0x5e>
 80053e0:	e000      	b.n	80053e4 <HAL_OSPI_Transmit+0xa2>
          break;
 80053e2:	bf00      	nop

      if (status == HAL_OK)
 80053e4:	7ffb      	ldrb	r3, [r7, #31]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d119      	bne.n	800541e <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	9300      	str	r3, [sp, #0]
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	2201      	movs	r2, #1
 80053f2:	2102      	movs	r1, #2
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f000 fe1d 	bl	8006034 <OSPI_WaitFlagStateUntilTimeout>
 80053fa:	4603      	mov	r3, r0
 80053fc:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80053fe:	7ffb      	ldrb	r3, [r7, #31]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d10c      	bne.n	800541e <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2202      	movs	r2, #2
 800540a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2202      	movs	r2, #2
 8005410:	651a      	str	r2, [r3, #80]	@ 0x50
 8005412:	e004      	b.n	800541e <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2210      	movs	r2, #16
 800541c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 800541e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005420:	4618      	mov	r0, r3
 8005422:	3720      	adds	r7, #32
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <HAL_OSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_ErrorCallback(OSPI_HandleTypeDef *hospi)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_ErrorCallback could be implemented in the user file
   */
}
 8005430:	bf00      	nop
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <HAL_OSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_AbortCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <HAL_OSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_FifoThresholdCallback(OSPI_HandleTypeDef *hospi)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <HAL_OSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_CmdCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_CmdCpltCallback could be implemented in the user file
   */
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <HAL_OSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_RxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_RxCpltCallback could be implemented in the user file
   */
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <HAL_OSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_TxCpltCallback could be implemented in the user file
   */
}
 8005494:	bf00      	nop
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <HAL_OSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_StatusMatchCallback(OSPI_HandleTypeDef *hospi)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_StatusMatchCallback could be implemented in the user file
   */
}
 80054a8:	bf00      	nop
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <HAL_OSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TimeOutCallback(OSPI_HandleTypeDef *hospi)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_TimeOutCallback could be implemented in the user file
   */
}
 80054bc:	bf00      	nop
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <HAL_OSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b088      	sub	sp, #32
 80054cc:	af02      	add	r7, sp, #8
 80054ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054d0:	2300      	movs	r3, #0
 80054d2:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 80054d4:	f7fc fd2c 	bl	8001f30 <HAL_GetTick>
 80054d8:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054de:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f003 0308 	and.w	r3, r3, #8
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d104      	bne.n	80054f4 <HAL_OSPI_Abort+0x2c>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f003 0304 	and.w	r3, r3, #4
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d052      	beq.n	800559a <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0304 	and.w	r3, r3, #4
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d014      	beq.n	800552c <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f022 0204 	bic.w	r2, r2, #4
 8005510:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_DMA_Abort(hospi->hdma);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005516:	4618      	mov	r0, r3
 8005518:	f7fc ffc4 	bl	80024a4 <HAL_DMA_Abort>
 800551c:	4603      	mov	r3, r0
 800551e:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 8005520:	7dfb      	ldrb	r3, [r7, #23]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d002      	beq.n	800552c <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2204      	movs	r2, #4
 800552a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	f003 0320 	and.w	r3, r3, #32
 8005536:	2b00      	cmp	r3, #0
 8005538:	d02b      	beq.n	8005592 <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f042 0202 	orr.w	r2, r2, #2
 8005548:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800554e:	9300      	str	r3, [sp, #0]
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	2201      	movs	r2, #1
 8005554:	2102      	movs	r1, #2
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 fd6c 	bl	8006034 <OSPI_WaitFlagStateUntilTimeout>
 800555c:	4603      	mov	r3, r0
 800555e:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8005560:	7dfb      	ldrb	r3, [r7, #23]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d11f      	bne.n	80055a6 <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2202      	movs	r2, #2
 800556c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005572:	9300      	str	r3, [sp, #0]
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	2200      	movs	r2, #0
 8005578:	2120      	movs	r1, #32
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 fd5a 	bl	8006034 <OSPI_WaitFlagStateUntilTimeout>
 8005580:	4603      	mov	r3, r0
 8005582:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8005584:	7dfb      	ldrb	r3, [r7, #23]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d10d      	bne.n	80055a6 <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2202      	movs	r2, #2
 800558e:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8005590:	e009      	b.n	80055a6 <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2202      	movs	r2, #2
 8005596:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8005598:	e005      	b.n	80055a6 <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2210      	movs	r2, #16
 80055a2:	655a      	str	r2, [r3, #84]	@ 0x54
 80055a4:	e000      	b.n	80055a8 <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 80055a6:	bf00      	nop
  }

  /* Return function status */
  return status;
 80055a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3718      	adds	r7, #24
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 80055b2:	b480      	push	{r7}
 80055b4:	b083      	sub	sp, #12
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
 80055ba:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	683a      	ldr	r2, [r7, #0]
 80055c0:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b094      	sub	sp, #80	@ 0x50
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055dc:	2300      	movs	r3, #0
 80055de:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 80055e2:	2300      	movs	r3, #0
 80055e4:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_DQS_PORT(cfg->DQSPort));
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));

  if (hospi->Instance == (OCTOSPI_TypeDef *)OCTOSPI1)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a9d      	ldr	r2, [pc, #628]	@ (8005864 <HAL_OSPIM_Config+0x294>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d105      	bne.n	80055fe <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 80055f2:	2300      	movs	r3, #0
 80055f4:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 80055f6:	2301      	movs	r3, #1
 80055f8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 80055fc:	e004      	b.n	8005608 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80055fe:	2301      	movs	r3, #1
 8005600:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 8005602:	2300      	movs	r3, #0
 8005604:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8005608:	2300      	movs	r3, #0
 800560a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800560e:	e01d      	b.n	800564c <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8005610:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005614:	3301      	adds	r3, #1
 8005616:	b2d8      	uxtb	r0, r3
 8005618:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800561c:	f107 0114 	add.w	r1, r7, #20
 8005620:	4613      	mov	r3, r2
 8005622:	005b      	lsls	r3, r3, #1
 8005624:	4413      	add	r3, r2
 8005626:	00db      	lsls	r3, r3, #3
 8005628:	440b      	add	r3, r1
 800562a:	4619      	mov	r1, r3
 800562c:	f000 febc 	bl	80063a8 <OSPIM_GetConfig>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d005      	beq.n	8005642 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2208      	movs	r2, #8
 8005640:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8005642:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005646:	3301      	adds	r3, #1
 8005648:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800564c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005650:	2b01      	cmp	r3, #1
 8005652:	d9dd      	bls.n	8005610 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8005654:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8005658:	2b00      	cmp	r3, #0
 800565a:	f040 84a2 	bne.w	8005fa2 <HAL_OSPIM_Config+0x9d2>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 800565e:	4b81      	ldr	r3, [pc, #516]	@ (8005864 <HAL_OSPIM_Config+0x294>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00b      	beq.n	8005682 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800566a:	4b7e      	ldr	r3, [pc, #504]	@ (8005864 <HAL_OSPIM_Config+0x294>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a7d      	ldr	r2, [pc, #500]	@ (8005864 <HAL_OSPIM_Config+0x294>)
 8005670:	f023 0301 	bic.w	r3, r3, #1
 8005674:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8005676:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800567a:	f043 0301 	orr.w	r3, r3, #1
 800567e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8005682:	4b79      	ldr	r3, [pc, #484]	@ (8005868 <HAL_OSPIM_Config+0x298>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0301 	and.w	r3, r3, #1
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00b      	beq.n	80056a6 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800568e:	4b76      	ldr	r3, [pc, #472]	@ (8005868 <HAL_OSPIM_Config+0x298>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a75      	ldr	r2, [pc, #468]	@ (8005868 <HAL_OSPIM_Config+0x298>)
 8005694:	f023 0301 	bic.w	r3, r3, #1
 8005698:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 800569a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800569e:	f043 0302 	orr.w	r3, r3, #2
 80056a2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80056a6:	4971      	ldr	r1, [pc, #452]	@ (800586c <HAL_OSPIM_Config+0x29c>)
 80056a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056aa:	4613      	mov	r3, r2
 80056ac:	005b      	lsls	r3, r3, #1
 80056ae:	4413      	add	r3, r2
 80056b0:	00db      	lsls	r3, r3, #3
 80056b2:	3350      	adds	r3, #80	@ 0x50
 80056b4:	443b      	add	r3, r7
 80056b6:	3b34      	subs	r3, #52	@ 0x34
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	3b01      	subs	r3, #1
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	440b      	add	r3, r1
 80056c0:	6859      	ldr	r1, [r3, #4]
 80056c2:	486a      	ldr	r0, [pc, #424]	@ (800586c <HAL_OSPIM_Config+0x29c>)
 80056c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056c6:	4613      	mov	r3, r2
 80056c8:	005b      	lsls	r3, r3, #1
 80056ca:	4413      	add	r3, r2
 80056cc:	00db      	lsls	r3, r3, #3
 80056ce:	3350      	adds	r3, #80	@ 0x50
 80056d0:	443b      	add	r3, r7
 80056d2:	3b34      	subs	r3, #52	@ 0x34
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	3b01      	subs	r3, #1
 80056d8:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	4403      	add	r3, r0
 80056e0:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 80056e2:	4b62      	ldr	r3, [pc, #392]	@ (800586c <HAL_OSPIM_Config+0x29c>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 0301 	and.w	r3, r3, #1
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	f000 80c0 	beq.w	8005870 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 80056f0:	4b5e      	ldr	r3, [pc, #376]	@ (800586c <HAL_OSPIM_Config+0x29c>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a5d      	ldr	r2, [pc, #372]	@ (800586c <HAL_OSPIM_Config+0x29c>)
 80056f6:	f023 0301 	bic.w	r3, r3, #1
 80056fa:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 80056fc:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8005700:	2b01      	cmp	r3, #1
 8005702:	f040 8162 	bne.w	80059ca <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 8005706:	4959      	ldr	r1, [pc, #356]	@ (800586c <HAL_OSPIM_Config+0x29c>)
 8005708:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800570c:	4613      	mov	r3, r2
 800570e:	005b      	lsls	r3, r3, #1
 8005710:	4413      	add	r3, r2
 8005712:	00db      	lsls	r3, r3, #3
 8005714:	3350      	adds	r3, #80	@ 0x50
 8005716:	443b      	add	r3, r7
 8005718:	3b3c      	subs	r3, #60	@ 0x3c
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	3b01      	subs	r3, #1
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	440b      	add	r3, r1
 8005722:	6859      	ldr	r1, [r3, #4]
 8005724:	4851      	ldr	r0, [pc, #324]	@ (800586c <HAL_OSPIM_Config+0x29c>)
 8005726:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800572a:	4613      	mov	r3, r2
 800572c:	005b      	lsls	r3, r3, #1
 800572e:	4413      	add	r3, r2
 8005730:	00db      	lsls	r3, r3, #3
 8005732:	3350      	adds	r3, #80	@ 0x50
 8005734:	443b      	add	r3, r7
 8005736:	3b3c      	subs	r3, #60	@ 0x3c
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	3b01      	subs	r3, #1
 800573c:	f041 0202 	orr.w	r2, r1, #2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	4403      	add	r3, r0
 8005744:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8005746:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800574a:	4613      	mov	r3, r2
 800574c:	005b      	lsls	r3, r3, #1
 800574e:	4413      	add	r3, r2
 8005750:	00db      	lsls	r3, r3, #3
 8005752:	3350      	adds	r3, #80	@ 0x50
 8005754:	443b      	add	r3, r7
 8005756:	3b38      	subs	r3, #56	@ 0x38
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d01f      	beq.n	800579e <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 800575e:	4943      	ldr	r1, [pc, #268]	@ (800586c <HAL_OSPIM_Config+0x29c>)
 8005760:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005764:	4613      	mov	r3, r2
 8005766:	005b      	lsls	r3, r3, #1
 8005768:	4413      	add	r3, r2
 800576a:	00db      	lsls	r3, r3, #3
 800576c:	3350      	adds	r3, #80	@ 0x50
 800576e:	443b      	add	r3, r7
 8005770:	3b38      	subs	r3, #56	@ 0x38
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	3b01      	subs	r3, #1
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	440b      	add	r3, r1
 800577a:	6859      	ldr	r1, [r3, #4]
 800577c:	483b      	ldr	r0, [pc, #236]	@ (800586c <HAL_OSPIM_Config+0x29c>)
 800577e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005782:	4613      	mov	r3, r2
 8005784:	005b      	lsls	r3, r3, #1
 8005786:	4413      	add	r3, r2
 8005788:	00db      	lsls	r3, r3, #3
 800578a:	3350      	adds	r3, #80	@ 0x50
 800578c:	443b      	add	r3, r7
 800578e:	3b38      	subs	r3, #56	@ 0x38
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	3b01      	subs	r3, #1
 8005794:	f041 0220 	orr.w	r2, r1, #32
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	4403      	add	r3, r0
 800579c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800579e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80057a2:	4613      	mov	r3, r2
 80057a4:	005b      	lsls	r3, r3, #1
 80057a6:	4413      	add	r3, r2
 80057a8:	00db      	lsls	r3, r3, #3
 80057aa:	3350      	adds	r3, #80	@ 0x50
 80057ac:	443b      	add	r3, r7
 80057ae:	3b30      	subs	r3, #48	@ 0x30
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d023      	beq.n	80057fe <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 80057b6:	492d      	ldr	r1, [pc, #180]	@ (800586c <HAL_OSPIM_Config+0x29c>)
 80057b8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80057bc:	4613      	mov	r3, r2
 80057be:	005b      	lsls	r3, r3, #1
 80057c0:	4413      	add	r3, r2
 80057c2:	00db      	lsls	r3, r3, #3
 80057c4:	3350      	adds	r3, #80	@ 0x50
 80057c6:	443b      	add	r3, r7
 80057c8:	3b30      	subs	r3, #48	@ 0x30
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	3b01      	subs	r3, #1
 80057ce:	f003 0301 	and.w	r3, r3, #1
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	440b      	add	r3, r1
 80057d6:	6859      	ldr	r1, [r3, #4]
 80057d8:	4824      	ldr	r0, [pc, #144]	@ (800586c <HAL_OSPIM_Config+0x29c>)
 80057da:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80057de:	4613      	mov	r3, r2
 80057e0:	005b      	lsls	r3, r3, #1
 80057e2:	4413      	add	r3, r2
 80057e4:	00db      	lsls	r3, r3, #3
 80057e6:	3350      	adds	r3, #80	@ 0x50
 80057e8:	443b      	add	r3, r7
 80057ea:	3b30      	subs	r3, #48	@ 0x30
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	3b01      	subs	r3, #1
 80057f0:	f003 0301 	and.w	r3, r3, #1
 80057f4:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	4403      	add	r3, r0
 80057fc:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80057fe:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005802:	4613      	mov	r3, r2
 8005804:	005b      	lsls	r3, r3, #1
 8005806:	4413      	add	r3, r2
 8005808:	00db      	lsls	r3, r3, #3
 800580a:	3350      	adds	r3, #80	@ 0x50
 800580c:	443b      	add	r3, r7
 800580e:	3b2c      	subs	r3, #44	@ 0x2c
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	f000 80d9 	beq.w	80059ca <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8005818:	4914      	ldr	r1, [pc, #80]	@ (800586c <HAL_OSPIM_Config+0x29c>)
 800581a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800581e:	4613      	mov	r3, r2
 8005820:	005b      	lsls	r3, r3, #1
 8005822:	4413      	add	r3, r2
 8005824:	00db      	lsls	r3, r3, #3
 8005826:	3350      	adds	r3, #80	@ 0x50
 8005828:	443b      	add	r3, r7
 800582a:	3b2c      	subs	r3, #44	@ 0x2c
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	3b01      	subs	r3, #1
 8005830:	f003 0301 	and.w	r3, r3, #1
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	440b      	add	r3, r1
 8005838:	6859      	ldr	r1, [r3, #4]
 800583a:	480c      	ldr	r0, [pc, #48]	@ (800586c <HAL_OSPIM_Config+0x29c>)
 800583c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005840:	4613      	mov	r3, r2
 8005842:	005b      	lsls	r3, r3, #1
 8005844:	4413      	add	r3, r2
 8005846:	00db      	lsls	r3, r3, #3
 8005848:	3350      	adds	r3, #80	@ 0x50
 800584a:	443b      	add	r3, r7
 800584c:	3b2c      	subs	r3, #44	@ 0x2c
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	3b01      	subs	r3, #1
 8005852:	f003 0301 	and.w	r3, r3, #1
 8005856:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	4403      	add	r3, r0
 800585e:	605a      	str	r2, [r3, #4]
 8005860:	e0b3      	b.n	80059ca <HAL_OSPIM_Config+0x3fa>
 8005862:	bf00      	nop
 8005864:	420d1400 	.word	0x420d1400
 8005868:	420d2400 	.word	0x420d2400
 800586c:	420c4000 	.word	0x420c4000
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8005870:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005872:	4613      	mov	r3, r2
 8005874:	005b      	lsls	r3, r3, #1
 8005876:	4413      	add	r3, r2
 8005878:	00db      	lsls	r3, r3, #3
 800587a:	3350      	adds	r3, #80	@ 0x50
 800587c:	443b      	add	r3, r7
 800587e:	3b3c      	subs	r3, #60	@ 0x3c
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	f000 80a1 	beq.w	80059ca <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8005888:	4995      	ldr	r1, [pc, #596]	@ (8005ae0 <HAL_OSPIM_Config+0x510>)
 800588a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800588c:	4613      	mov	r3, r2
 800588e:	005b      	lsls	r3, r3, #1
 8005890:	4413      	add	r3, r2
 8005892:	00db      	lsls	r3, r3, #3
 8005894:	3350      	adds	r3, #80	@ 0x50
 8005896:	443b      	add	r3, r7
 8005898:	3b3c      	subs	r3, #60	@ 0x3c
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	3b01      	subs	r3, #1
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	440b      	add	r3, r1
 80058a2:	6859      	ldr	r1, [r3, #4]
 80058a4:	488e      	ldr	r0, [pc, #568]	@ (8005ae0 <HAL_OSPIM_Config+0x510>)
 80058a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058a8:	4613      	mov	r3, r2
 80058aa:	005b      	lsls	r3, r3, #1
 80058ac:	4413      	add	r3, r2
 80058ae:	00db      	lsls	r3, r3, #3
 80058b0:	3350      	adds	r3, #80	@ 0x50
 80058b2:	443b      	add	r3, r7
 80058b4:	3b3c      	subs	r3, #60	@ 0x3c
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	3b01      	subs	r3, #1
 80058ba:	f021 0201 	bic.w	r2, r1, #1
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	4403      	add	r3, r0
 80058c2:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 80058c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058c6:	4613      	mov	r3, r2
 80058c8:	005b      	lsls	r3, r3, #1
 80058ca:	4413      	add	r3, r2
 80058cc:	00db      	lsls	r3, r3, #3
 80058ce:	3350      	adds	r3, #80	@ 0x50
 80058d0:	443b      	add	r3, r7
 80058d2:	3b38      	subs	r3, #56	@ 0x38
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d01d      	beq.n	8005916 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80058da:	4981      	ldr	r1, [pc, #516]	@ (8005ae0 <HAL_OSPIM_Config+0x510>)
 80058dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058de:	4613      	mov	r3, r2
 80058e0:	005b      	lsls	r3, r3, #1
 80058e2:	4413      	add	r3, r2
 80058e4:	00db      	lsls	r3, r3, #3
 80058e6:	3350      	adds	r3, #80	@ 0x50
 80058e8:	443b      	add	r3, r7
 80058ea:	3b38      	subs	r3, #56	@ 0x38
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	3b01      	subs	r3, #1
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	440b      	add	r3, r1
 80058f4:	6859      	ldr	r1, [r3, #4]
 80058f6:	487a      	ldr	r0, [pc, #488]	@ (8005ae0 <HAL_OSPIM_Config+0x510>)
 80058f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058fa:	4613      	mov	r3, r2
 80058fc:	005b      	lsls	r3, r3, #1
 80058fe:	4413      	add	r3, r2
 8005900:	00db      	lsls	r3, r3, #3
 8005902:	3350      	adds	r3, #80	@ 0x50
 8005904:	443b      	add	r3, r7
 8005906:	3b38      	subs	r3, #56	@ 0x38
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	3b01      	subs	r3, #1
 800590c:	f021 0210 	bic.w	r2, r1, #16
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	4403      	add	r3, r0
 8005914:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005916:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005918:	4613      	mov	r3, r2
 800591a:	005b      	lsls	r3, r3, #1
 800591c:	4413      	add	r3, r2
 800591e:	00db      	lsls	r3, r3, #3
 8005920:	3350      	adds	r3, #80	@ 0x50
 8005922:	443b      	add	r3, r7
 8005924:	3b30      	subs	r3, #48	@ 0x30
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d021      	beq.n	8005970 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800592c:	496c      	ldr	r1, [pc, #432]	@ (8005ae0 <HAL_OSPIM_Config+0x510>)
 800592e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005930:	4613      	mov	r3, r2
 8005932:	005b      	lsls	r3, r3, #1
 8005934:	4413      	add	r3, r2
 8005936:	00db      	lsls	r3, r3, #3
 8005938:	3350      	adds	r3, #80	@ 0x50
 800593a:	443b      	add	r3, r7
 800593c:	3b30      	subs	r3, #48	@ 0x30
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	3b01      	subs	r3, #1
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	440b      	add	r3, r1
 800594a:	6859      	ldr	r1, [r3, #4]
 800594c:	4864      	ldr	r0, [pc, #400]	@ (8005ae0 <HAL_OSPIM_Config+0x510>)
 800594e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005950:	4613      	mov	r3, r2
 8005952:	005b      	lsls	r3, r3, #1
 8005954:	4413      	add	r3, r2
 8005956:	00db      	lsls	r3, r3, #3
 8005958:	3350      	adds	r3, #80	@ 0x50
 800595a:	443b      	add	r3, r7
 800595c:	3b30      	subs	r3, #48	@ 0x30
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	3b01      	subs	r3, #1
 8005962:	f003 0301 	and.w	r3, r3, #1
 8005966:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	4403      	add	r3, r0
 800596e:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005970:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005972:	4613      	mov	r3, r2
 8005974:	005b      	lsls	r3, r3, #1
 8005976:	4413      	add	r3, r2
 8005978:	00db      	lsls	r3, r3, #3
 800597a:	3350      	adds	r3, #80	@ 0x50
 800597c:	443b      	add	r3, r7
 800597e:	3b2c      	subs	r3, #44	@ 0x2c
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d021      	beq.n	80059ca <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8005986:	4956      	ldr	r1, [pc, #344]	@ (8005ae0 <HAL_OSPIM_Config+0x510>)
 8005988:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800598a:	4613      	mov	r3, r2
 800598c:	005b      	lsls	r3, r3, #1
 800598e:	4413      	add	r3, r2
 8005990:	00db      	lsls	r3, r3, #3
 8005992:	3350      	adds	r3, #80	@ 0x50
 8005994:	443b      	add	r3, r7
 8005996:	3b2c      	subs	r3, #44	@ 0x2c
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	3b01      	subs	r3, #1
 800599c:	f003 0301 	and.w	r3, r3, #1
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	440b      	add	r3, r1
 80059a4:	6859      	ldr	r1, [r3, #4]
 80059a6:	484e      	ldr	r0, [pc, #312]	@ (8005ae0 <HAL_OSPIM_Config+0x510>)
 80059a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059aa:	4613      	mov	r3, r2
 80059ac:	005b      	lsls	r3, r3, #1
 80059ae:	4413      	add	r3, r2
 80059b0:	00db      	lsls	r3, r3, #3
 80059b2:	3350      	adds	r3, #80	@ 0x50
 80059b4:	443b      	add	r3, r7
 80059b6:	3b2c      	subs	r3, #44	@ 0x2c
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	3b01      	subs	r3, #1
 80059bc:	f003 0301 	and.w	r3, r3, #1
 80059c0:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	4403      	add	r3, r0
 80059c8:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	6819      	ldr	r1, [r3, #0]
 80059ce:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80059d2:	4613      	mov	r3, r2
 80059d4:	005b      	lsls	r3, r3, #1
 80059d6:	4413      	add	r3, r2
 80059d8:	00db      	lsls	r3, r3, #3
 80059da:	3350      	adds	r3, #80	@ 0x50
 80059dc:	443b      	add	r3, r7
 80059de:	3b3c      	subs	r3, #60	@ 0x3c
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4299      	cmp	r1, r3
 80059e4:	d03c      	beq.n	8005a60 <HAL_OSPIM_Config+0x490>
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	6899      	ldr	r1, [r3, #8]
 80059ea:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80059ee:	4613      	mov	r3, r2
 80059f0:	005b      	lsls	r3, r3, #1
 80059f2:	4413      	add	r3, r2
 80059f4:	00db      	lsls	r3, r3, #3
 80059f6:	3350      	adds	r3, #80	@ 0x50
 80059f8:	443b      	add	r3, r7
 80059fa:	3b34      	subs	r3, #52	@ 0x34
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4299      	cmp	r1, r3
 8005a00:	d02e      	beq.n	8005a60 <HAL_OSPIM_Config+0x490>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	6859      	ldr	r1, [r3, #4]
 8005a06:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	005b      	lsls	r3, r3, #1
 8005a0e:	4413      	add	r3, r2
 8005a10:	00db      	lsls	r3, r3, #3
 8005a12:	3350      	adds	r3, #80	@ 0x50
 8005a14:	443b      	add	r3, r7
 8005a16:	3b38      	subs	r3, #56	@ 0x38
 8005a18:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 8005a1a:	4299      	cmp	r1, r3
 8005a1c:	d103      	bne.n	8005a26 <HAL_OSPIM_Config+0x456>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d11c      	bne.n	8005a60 <HAL_OSPIM_Config+0x490>
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	68d9      	ldr	r1, [r3, #12]
 8005a2a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005a2e:	4613      	mov	r3, r2
 8005a30:	005b      	lsls	r3, r3, #1
 8005a32:	4413      	add	r3, r2
 8005a34:	00db      	lsls	r3, r3, #3
 8005a36:	3350      	adds	r3, #80	@ 0x50
 8005a38:	443b      	add	r3, r7
 8005a3a:	3b30      	subs	r3, #48	@ 0x30
 8005a3c:	681b      	ldr	r3, [r3, #0]
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 8005a3e:	4299      	cmp	r1, r3
 8005a40:	d00e      	beq.n	8005a60 <HAL_OSPIM_Config+0x490>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	6919      	ldr	r1, [r3, #16]
 8005a46:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	005b      	lsls	r3, r3, #1
 8005a4e:	4413      	add	r3, r2
 8005a50:	00db      	lsls	r3, r3, #3
 8005a52:	3350      	adds	r3, #80	@ 0x50
 8005a54:	443b      	add	r3, r7
 8005a56:	3b2c      	subs	r3, #44	@ 0x2c
 8005a58:	681b      	ldr	r3, [r3, #0]
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8005a5a:	4299      	cmp	r1, r3
 8005a5c:	f040 810e 	bne.w	8005c7c <HAL_OSPIM_Config+0x6ac>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	6819      	ldr	r1, [r3, #0]
 8005a64:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005a68:	4613      	mov	r3, r2
 8005a6a:	005b      	lsls	r3, r3, #1
 8005a6c:	4413      	add	r3, r2
 8005a6e:	00db      	lsls	r3, r3, #3
 8005a70:	3350      	adds	r3, #80	@ 0x50
 8005a72:	443b      	add	r3, r7
 8005a74:	3b3c      	subs	r3, #60	@ 0x3c
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4299      	cmp	r1, r3
 8005a7a:	d133      	bne.n	8005ae4 <HAL_OSPIM_Config+0x514>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	6859      	ldr	r1, [r3, #4]
 8005a80:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005a84:	4613      	mov	r3, r2
 8005a86:	005b      	lsls	r3, r3, #1
 8005a88:	4413      	add	r3, r2
 8005a8a:	00db      	lsls	r3, r3, #3
 8005a8c:	3350      	adds	r3, #80	@ 0x50
 8005a8e:	443b      	add	r3, r7
 8005a90:	3b38      	subs	r3, #56	@ 0x38
 8005a92:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8005a94:	4299      	cmp	r1, r3
 8005a96:	d125      	bne.n	8005ae4 <HAL_OSPIM_Config+0x514>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	68d9      	ldr	r1, [r3, #12]
 8005a9c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	005b      	lsls	r3, r3, #1
 8005aa4:	4413      	add	r3, r2
 8005aa6:	00db      	lsls	r3, r3, #3
 8005aa8:	3350      	adds	r3, #80	@ 0x50
 8005aaa:	443b      	add	r3, r7
 8005aac:	3b30      	subs	r3, #48	@ 0x30
 8005aae:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8005ab0:	4299      	cmp	r1, r3
 8005ab2:	d117      	bne.n	8005ae4 <HAL_OSPIM_Config+0x514>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	6919      	ldr	r1, [r3, #16]
 8005ab8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005abc:	4613      	mov	r3, r2
 8005abe:	005b      	lsls	r3, r3, #1
 8005ac0:	4413      	add	r3, r2
 8005ac2:	00db      	lsls	r3, r3, #3
 8005ac4:	3350      	adds	r3, #80	@ 0x50
 8005ac6:	443b      	add	r3, r7
 8005ac8:	3b2c      	subs	r3, #44	@ 0x2c
 8005aca:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8005acc:	4299      	cmp	r1, r3
 8005ace:	d109      	bne.n	8005ae4 <HAL_OSPIM_Config+0x514>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8005ad0:	4b03      	ldr	r3, [pc, #12]	@ (8005ae0 <HAL_OSPIM_Config+0x510>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a02      	ldr	r2, [pc, #8]	@ (8005ae0 <HAL_OSPIM_Config+0x510>)
 8005ad6:	f043 0301 	orr.w	r3, r3, #1
 8005ada:	6013      	str	r3, [r2, #0]
 8005adc:	e0ce      	b.n	8005c7c <HAL_OSPIM_Config+0x6ac>
 8005ade:	bf00      	nop
 8005ae0:	420c4000 	.word	0x420c4000
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8005ae4:	49a4      	ldr	r1, [pc, #656]	@ (8005d78 <HAL_OSPIM_Config+0x7a8>)
 8005ae6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005aea:	4613      	mov	r3, r2
 8005aec:	005b      	lsls	r3, r3, #1
 8005aee:	4413      	add	r3, r2
 8005af0:	00db      	lsls	r3, r3, #3
 8005af2:	3350      	adds	r3, #80	@ 0x50
 8005af4:	443b      	add	r3, r7
 8005af6:	3b3c      	subs	r3, #60	@ 0x3c
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	3b01      	subs	r3, #1
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	440b      	add	r3, r1
 8005b00:	6859      	ldr	r1, [r3, #4]
 8005b02:	489d      	ldr	r0, [pc, #628]	@ (8005d78 <HAL_OSPIM_Config+0x7a8>)
 8005b04:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005b08:	4613      	mov	r3, r2
 8005b0a:	005b      	lsls	r3, r3, #1
 8005b0c:	4413      	add	r3, r2
 8005b0e:	00db      	lsls	r3, r3, #3
 8005b10:	3350      	adds	r3, #80	@ 0x50
 8005b12:	443b      	add	r3, r7
 8005b14:	3b3c      	subs	r3, #60	@ 0x3c
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	f021 0201 	bic.w	r2, r1, #1
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	4403      	add	r3, r0
 8005b22:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8005b24:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005b28:	4613      	mov	r3, r2
 8005b2a:	005b      	lsls	r3, r3, #1
 8005b2c:	4413      	add	r3, r2
 8005b2e:	00db      	lsls	r3, r3, #3
 8005b30:	3350      	adds	r3, #80	@ 0x50
 8005b32:	443b      	add	r3, r7
 8005b34:	3b38      	subs	r3, #56	@ 0x38
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d01f      	beq.n	8005b7c <HAL_OSPIM_Config+0x5ac>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8005b3c:	498e      	ldr	r1, [pc, #568]	@ (8005d78 <HAL_OSPIM_Config+0x7a8>)
 8005b3e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005b42:	4613      	mov	r3, r2
 8005b44:	005b      	lsls	r3, r3, #1
 8005b46:	4413      	add	r3, r2
 8005b48:	00db      	lsls	r3, r3, #3
 8005b4a:	3350      	adds	r3, #80	@ 0x50
 8005b4c:	443b      	add	r3, r7
 8005b4e:	3b38      	subs	r3, #56	@ 0x38
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	3b01      	subs	r3, #1
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	440b      	add	r3, r1
 8005b58:	6859      	ldr	r1, [r3, #4]
 8005b5a:	4887      	ldr	r0, [pc, #540]	@ (8005d78 <HAL_OSPIM_Config+0x7a8>)
 8005b5c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005b60:	4613      	mov	r3, r2
 8005b62:	005b      	lsls	r3, r3, #1
 8005b64:	4413      	add	r3, r2
 8005b66:	00db      	lsls	r3, r3, #3
 8005b68:	3350      	adds	r3, #80	@ 0x50
 8005b6a:	443b      	add	r3, r7
 8005b6c:	3b38      	subs	r3, #56	@ 0x38
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	3b01      	subs	r3, #1
 8005b72:	f021 0210 	bic.w	r2, r1, #16
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	4403      	add	r3, r0
 8005b7a:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8005b7c:	497e      	ldr	r1, [pc, #504]	@ (8005d78 <HAL_OSPIM_Config+0x7a8>)
 8005b7e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005b82:	4613      	mov	r3, r2
 8005b84:	005b      	lsls	r3, r3, #1
 8005b86:	4413      	add	r3, r2
 8005b88:	00db      	lsls	r3, r3, #3
 8005b8a:	3350      	adds	r3, #80	@ 0x50
 8005b8c:	443b      	add	r3, r7
 8005b8e:	3b34      	subs	r3, #52	@ 0x34
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	3b01      	subs	r3, #1
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	440b      	add	r3, r1
 8005b98:	6859      	ldr	r1, [r3, #4]
 8005b9a:	4877      	ldr	r0, [pc, #476]	@ (8005d78 <HAL_OSPIM_Config+0x7a8>)
 8005b9c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	005b      	lsls	r3, r3, #1
 8005ba4:	4413      	add	r3, r2
 8005ba6:	00db      	lsls	r3, r3, #3
 8005ba8:	3350      	adds	r3, #80	@ 0x50
 8005baa:	443b      	add	r3, r7
 8005bac:	3b34      	subs	r3, #52	@ 0x34
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	4403      	add	r3, r0
 8005bba:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005bbc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	005b      	lsls	r3, r3, #1
 8005bc4:	4413      	add	r3, r2
 8005bc6:	00db      	lsls	r3, r3, #3
 8005bc8:	3350      	adds	r3, #80	@ 0x50
 8005bca:	443b      	add	r3, r7
 8005bcc:	3b30      	subs	r3, #48	@ 0x30
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d023      	beq.n	8005c1c <HAL_OSPIM_Config+0x64c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005bd4:	4968      	ldr	r1, [pc, #416]	@ (8005d78 <HAL_OSPIM_Config+0x7a8>)
 8005bd6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005bda:	4613      	mov	r3, r2
 8005bdc:	005b      	lsls	r3, r3, #1
 8005bde:	4413      	add	r3, r2
 8005be0:	00db      	lsls	r3, r3, #3
 8005be2:	3350      	adds	r3, #80	@ 0x50
 8005be4:	443b      	add	r3, r7
 8005be6:	3b30      	subs	r3, #48	@ 0x30
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	3b01      	subs	r3, #1
 8005bec:	f003 0301 	and.w	r3, r3, #1
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	440b      	add	r3, r1
 8005bf4:	6859      	ldr	r1, [r3, #4]
 8005bf6:	4860      	ldr	r0, [pc, #384]	@ (8005d78 <HAL_OSPIM_Config+0x7a8>)
 8005bf8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	005b      	lsls	r3, r3, #1
 8005c00:	4413      	add	r3, r2
 8005c02:	00db      	lsls	r3, r3, #3
 8005c04:	3350      	adds	r3, #80	@ 0x50
 8005c06:	443b      	add	r3, r7
 8005c08:	3b30      	subs	r3, #48	@ 0x30
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	3b01      	subs	r3, #1
 8005c0e:	f003 0301 	and.w	r3, r3, #1
 8005c12:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	4403      	add	r3, r0
 8005c1a:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005c1c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005c20:	4613      	mov	r3, r2
 8005c22:	005b      	lsls	r3, r3, #1
 8005c24:	4413      	add	r3, r2
 8005c26:	00db      	lsls	r3, r3, #3
 8005c28:	3350      	adds	r3, #80	@ 0x50
 8005c2a:	443b      	add	r3, r7
 8005c2c:	3b2c      	subs	r3, #44	@ 0x2c
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d023      	beq.n	8005c7c <HAL_OSPIM_Config+0x6ac>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005c34:	4950      	ldr	r1, [pc, #320]	@ (8005d78 <HAL_OSPIM_Config+0x7a8>)
 8005c36:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	005b      	lsls	r3, r3, #1
 8005c3e:	4413      	add	r3, r2
 8005c40:	00db      	lsls	r3, r3, #3
 8005c42:	3350      	adds	r3, #80	@ 0x50
 8005c44:	443b      	add	r3, r7
 8005c46:	3b2c      	subs	r3, #44	@ 0x2c
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	f003 0301 	and.w	r3, r3, #1
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	440b      	add	r3, r1
 8005c54:	6859      	ldr	r1, [r3, #4]
 8005c56:	4848      	ldr	r0, [pc, #288]	@ (8005d78 <HAL_OSPIM_Config+0x7a8>)
 8005c58:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	005b      	lsls	r3, r3, #1
 8005c60:	4413      	add	r3, r2
 8005c62:	00db      	lsls	r3, r3, #3
 8005c64:	3350      	adds	r3, #80	@ 0x50
 8005c66:	443b      	add	r3, r7
 8005c68:	3b2c      	subs	r3, #44	@ 0x2c
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	f003 0301 	and.w	r3, r3, #1
 8005c72:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	4403      	add	r3, r0
 8005c7a:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8005c7c:	4a3e      	ldr	r2, [pc, #248]	@ (8005d78 <HAL_OSPIM_Config+0x7a8>)
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	3b01      	subs	r3, #1
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	4413      	add	r3, r2
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c90:	025b      	lsls	r3, r3, #9
 8005c92:	431a      	orrs	r2, r3
 8005c94:	4938      	ldr	r1, [pc, #224]	@ (8005d78 <HAL_OSPIM_Config+0x7a8>)
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	440b      	add	r3, r1
 8005ca4:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if (((cfg->Req2AckTime) >= 1U) && ((cfg->Req2AckTime) <= 256U))
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	695b      	ldr	r3, [r3, #20]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d018      	beq.n	8005ce0 <HAL_OSPIM_Config+0x710>
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cb6:	d813      	bhi.n	8005ce0 <HAL_OSPIM_Config+0x710>
    {
      if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	695b      	ldr	r3, [r3, #20]
 8005cbc:	1e5a      	subs	r2, r3, #1
 8005cbe:	4b2e      	ldr	r3, [pc, #184]	@ (8005d78 <HAL_OSPIM_Config+0x7a8>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	0c1b      	lsrs	r3, r3, #16
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d90a      	bls.n	8005ce0 <HAL_OSPIM_Config+0x710>
      {
        MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8005cca:	4b2b      	ldr	r3, [pc, #172]	@ (8005d78 <HAL_OSPIM_Config+0x7a8>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	695b      	ldr	r3, [r3, #20]
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	041b      	lsls	r3, r3, #16
 8005cda:	4927      	ldr	r1, [pc, #156]	@ (8005d78 <HAL_OSPIM_Config+0x7a8>)
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	600b      	str	r3, [r1, #0]
      {
        /* Nothing to do */
      }
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8005ce0:	4b25      	ldr	r3, [pc, #148]	@ (8005d78 <HAL_OSPIM_Config+0x7a8>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0301 	and.w	r3, r3, #1
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	f000 809a 	beq.w	8005e22 <HAL_OSPIM_Config+0x852>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8005cee:	4a22      	ldr	r2, [pc, #136]	@ (8005d78 <HAL_OSPIM_Config+0x7a8>)
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	4413      	add	r3, r2
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	f023 0203 	bic.w	r2, r3, #3
 8005d00:	491d      	ldr	r1, [pc, #116]	@ (8005d78 <HAL_OSPIM_Config+0x7a8>)
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	3b01      	subs	r3, #1
 8005d08:	f042 0201 	orr.w	r2, r2, #1
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	440b      	add	r3, r1
 8005d10:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d011      	beq.n	8005d3e <HAL_OSPIM_Config+0x76e>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8005d1a:	4a17      	ldr	r2, [pc, #92]	@ (8005d78 <HAL_OSPIM_Config+0x7a8>)
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	3b01      	subs	r3, #1
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	4413      	add	r3, r2
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005d2c:	4912      	ldr	r1, [pc, #72]	@ (8005d78 <HAL_OSPIM_Config+0x7a8>)
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	3b01      	subs	r3, #1
 8005d34:	f042 0210 	orr.w	r2, r2, #16
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	440b      	add	r3, r1
 8005d3c:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d018      	beq.n	8005d7c <HAL_OSPIM_Config+0x7ac>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005d4a:	4a0b      	ldr	r2, [pc, #44]	@ (8005d78 <HAL_OSPIM_Config+0x7a8>)
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	3b01      	subs	r3, #1
 8005d52:	f003 0301 	and.w	r3, r3, #1
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4413      	add	r3, r2
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005d60:	4905      	ldr	r1, [pc, #20]	@ (8005d78 <HAL_OSPIM_Config+0x7a8>)
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	3b01      	subs	r3, #1
 8005d68:	f003 0301 	and.w	r3, r3, #1
 8005d6c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	440b      	add	r3, r1
 8005d74:	605a      	str	r2, [r3, #4]
 8005d76:	e01b      	b.n	8005db0 <HAL_OSPIM_Config+0x7e0>
 8005d78:	420c4000 	.word	0x420c4000
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d015      	beq.n	8005db0 <HAL_OSPIM_Config+0x7e0>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005d84:	4a8a      	ldr	r2, [pc, #552]	@ (8005fb0 <HAL_OSPIM_Config+0x9e0>)
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	f003 0301 	and.w	r3, r3, #1
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	4413      	add	r3, r2
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8005d9a:	4985      	ldr	r1, [pc, #532]	@ (8005fb0 <HAL_OSPIM_Config+0x9e0>)
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	3b01      	subs	r3, #1
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	440b      	add	r3, r1
 8005dae:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d016      	beq.n	8005dea <HAL_OSPIM_Config+0x81a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005dbc:	4a7c      	ldr	r2, [pc, #496]	@ (8005fb0 <HAL_OSPIM_Config+0x9e0>)
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	f003 0301 	and.w	r3, r3, #1
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	4413      	add	r3, r2
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005dd2:	4977      	ldr	r1, [pc, #476]	@ (8005fb0 <HAL_OSPIM_Config+0x9e0>)
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	f003 0301 	and.w	r3, r3, #1
 8005dde:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	440b      	add	r3, r1
 8005de6:	605a      	str	r2, [r3, #4]
 8005de8:	e0c3      	b.n	8005f72 <HAL_OSPIM_Config+0x9a2>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	f000 80bf 	beq.w	8005f72 <HAL_OSPIM_Config+0x9a2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005df4:	4a6e      	ldr	r2, [pc, #440]	@ (8005fb0 <HAL_OSPIM_Config+0x9e0>)
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	f003 0301 	and.w	r3, r3, #1
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	4413      	add	r3, r2
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8005e0a:	4969      	ldr	r1, [pc, #420]	@ (8005fb0 <HAL_OSPIM_Config+0x9e0>)
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	3b01      	subs	r3, #1
 8005e12:	f003 0301 	and.w	r3, r3, #1
 8005e16:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	440b      	add	r3, r1
 8005e1e:	605a      	str	r2, [r3, #4]
 8005e20:	e0a7      	b.n	8005f72 <HAL_OSPIM_Config+0x9a2>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8005e22:	4a63      	ldr	r2, [pc, #396]	@ (8005fb0 <HAL_OSPIM_Config+0x9e0>)
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	4413      	add	r3, r2
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	f023 0203 	bic.w	r2, r3, #3
 8005e34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e36:	005b      	lsls	r3, r3, #1
 8005e38:	431a      	orrs	r2, r3
 8005e3a:	495d      	ldr	r1, [pc, #372]	@ (8005fb0 <HAL_OSPIM_Config+0x9e0>)
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	3b01      	subs	r3, #1
 8005e42:	f042 0201 	orr.w	r2, r2, #1
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	440b      	add	r3, r1
 8005e4a:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d014      	beq.n	8005e7e <HAL_OSPIM_Config+0x8ae>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8005e54:	4a56      	ldr	r2, [pc, #344]	@ (8005fb0 <HAL_OSPIM_Config+0x9e0>)
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	4413      	add	r3, r2
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005e66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e68:	015b      	lsls	r3, r3, #5
 8005e6a:	431a      	orrs	r2, r3
 8005e6c:	4950      	ldr	r1, [pc, #320]	@ (8005fb0 <HAL_OSPIM_Config+0x9e0>)
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	3b01      	subs	r3, #1
 8005e74:	f042 0210 	orr.w	r2, r2, #16
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	440b      	add	r3, r1
 8005e7c:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d019      	beq.n	8005ebe <HAL_OSPIM_Config+0x8ee>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005e8a:	4a49      	ldr	r2, [pc, #292]	@ (8005fb0 <HAL_OSPIM_Config+0x9e0>)
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	3b01      	subs	r3, #1
 8005e92:	f003 0301 	and.w	r3, r3, #1
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	4413      	add	r3, r2
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005ea0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ea2:	049b      	lsls	r3, r3, #18
 8005ea4:	431a      	orrs	r2, r3
 8005ea6:	4942      	ldr	r1, [pc, #264]	@ (8005fb0 <HAL_OSPIM_Config+0x9e0>)
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	3b01      	subs	r3, #1
 8005eae:	f003 0301 	and.w	r3, r3, #1
 8005eb2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	440b      	add	r3, r1
 8005eba:	605a      	str	r2, [r3, #4]
 8005ebc:	e01c      	b.n	8005ef8 <HAL_OSPIM_Config+0x928>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d018      	beq.n	8005ef8 <HAL_OSPIM_Config+0x928>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005ec6:	4a3a      	ldr	r2, [pc, #232]	@ (8005fb0 <HAL_OSPIM_Config+0x9e0>)
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	3b01      	subs	r3, #1
 8005ece:	f003 0301 	and.w	r3, r3, #1
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	4413      	add	r3, r2
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8005edc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ede:	069b      	lsls	r3, r3, #26
 8005ee0:	431a      	orrs	r2, r3
 8005ee2:	4933      	ldr	r1, [pc, #204]	@ (8005fb0 <HAL_OSPIM_Config+0x9e0>)
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	3b01      	subs	r3, #1
 8005eea:	f003 0301 	and.w	r3, r3, #1
 8005eee:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	440b      	add	r3, r1
 8005ef6:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d019      	beq.n	8005f38 <HAL_OSPIM_Config+0x968>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005f04:	4a2a      	ldr	r2, [pc, #168]	@ (8005fb0 <HAL_OSPIM_Config+0x9e0>)
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	f003 0301 	and.w	r3, r3, #1
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	4413      	add	r3, r2
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005f1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f1c:	049b      	lsls	r3, r3, #18
 8005f1e:	431a      	orrs	r2, r3
 8005f20:	4923      	ldr	r1, [pc, #140]	@ (8005fb0 <HAL_OSPIM_Config+0x9e0>)
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	3b01      	subs	r3, #1
 8005f28:	f003 0301 	and.w	r3, r3, #1
 8005f2c:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	440b      	add	r3, r1
 8005f34:	605a      	str	r2, [r3, #4]
 8005f36:	e01c      	b.n	8005f72 <HAL_OSPIM_Config+0x9a2>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d018      	beq.n	8005f72 <HAL_OSPIM_Config+0x9a2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005f40:	4a1b      	ldr	r2, [pc, #108]	@ (8005fb0 <HAL_OSPIM_Config+0x9e0>)
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	3b01      	subs	r3, #1
 8005f48:	f003 0301 	and.w	r3, r3, #1
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	4413      	add	r3, r2
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8005f56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f58:	069b      	lsls	r3, r3, #26
 8005f5a:	431a      	orrs	r2, r3
 8005f5c:	4914      	ldr	r1, [pc, #80]	@ (8005fb0 <HAL_OSPIM_Config+0x9e0>)
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	3b01      	subs	r3, #1
 8005f64:	f003 0301 	and.w	r3, r3, #1
 8005f68:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	440b      	add	r3, r1
 8005f70:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8005f72:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005f76:	f003 0301 	and.w	r3, r3, #1
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d005      	beq.n	8005f8a <HAL_OSPIM_Config+0x9ba>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8005f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8005fb4 <HAL_OSPIM_Config+0x9e4>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a0c      	ldr	r2, [pc, #48]	@ (8005fb4 <HAL_OSPIM_Config+0x9e4>)
 8005f84:	f043 0301 	orr.w	r3, r3, #1
 8005f88:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8005f8a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005f8e:	f003 0302 	and.w	r3, r3, #2
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d005      	beq.n	8005fa2 <HAL_OSPIM_Config+0x9d2>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8005f96:	4b08      	ldr	r3, [pc, #32]	@ (8005fb8 <HAL_OSPIM_Config+0x9e8>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a07      	ldr	r2, [pc, #28]	@ (8005fb8 <HAL_OSPIM_Config+0x9e8>)
 8005f9c:	f043 0301 	orr.w	r3, r3, #1
 8005fa0:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8005fa2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3750      	adds	r7, #80	@ 0x50
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	420c4000 	.word	0x420c4000
 8005fb4:	420d1400 	.word	0x420d1400
 8005fb8:	420d2400 	.word	0x420d2400

08005fbc <OSPI_DMAAbortCplt>:
  * @brief  DMA OSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void OSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  OSPI_HandleTypeDef *hospi = (OSPI_HandleTypeDef *)(hdma->Parent);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fc8:	60fb      	str	r3, [r7, #12]
  hospi->XferCount = 0;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_ABORT)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fd8:	d122      	bne.n	8006020 <OSPI_DMAAbortCplt+0x64>
  {
    /* DMA abort called by OctoSPI abort */
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	6a1b      	ldr	r3, [r3, #32]
 8005fe0:	f003 0320 	and.w	r3, r3, #32
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d014      	beq.n	8006012 <OSPI_DMAAbortCplt+0x56>
    {
      /* Clear transfer complete flag */
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2202      	movs	r2, #2
 8005fee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enable the transfer complete interrupts */
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005ffe:	601a      	str	r2, [r3, #0]

      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f042 0202 	orr.w	r2, r2, #2
 800600e:	601a      	str	r2, [r3, #0]
    hospi->ErrorCallback(hospi);
#else
    HAL_OSPI_ErrorCallback(hospi);
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
}
 8006010:	e00c      	b.n	800602c <OSPI_DMAAbortCplt+0x70>
      hospi->State = HAL_OSPI_STATE_READY;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2202      	movs	r2, #2
 8006016:	651a      	str	r2, [r3, #80]	@ 0x50
      HAL_OSPI_AbortCpltCallback(hospi);
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f7ff fa0f 	bl	800543c <HAL_OSPI_AbortCpltCallback>
}
 800601e:	e005      	b.n	800602c <OSPI_DMAAbortCplt+0x70>
    hospi->State = HAL_OSPI_STATE_READY;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2202      	movs	r2, #2
 8006024:	651a      	str	r2, [r3, #80]	@ 0x50
    HAL_OSPI_ErrorCallback(hospi);
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	f7ff f9fe 	bl	8005428 <HAL_OSPI_ErrorCallback>
}
 800602c:	bf00      	nop
 800602e:	3710      	adds	r7, #16
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	603b      	str	r3, [r7, #0]
 8006040:	4613      	mov	r3, r2
 8006042:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8006044:	e022      	b.n	800608c <OSPI_WaitFlagStateUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800604c:	d01e      	beq.n	800608c <OSPI_WaitFlagStateUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800604e:	f7fb ff6f 	bl	8001f30 <HAL_GetTick>
 8006052:	4602      	mov	r2, r0
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	69ba      	ldr	r2, [r7, #24]
 800605a:	429a      	cmp	r2, r3
 800605c:	d302      	bcc.n	8006064 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d113      	bne.n	800608c <OSPI_WaitFlagStateUntilTimeout+0x58>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hospi->Instance->SR & Flag) != (uint32_t)State)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	6a1a      	ldr	r2, [r3, #32]
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	401a      	ands	r2, r3
 800606e:	79fb      	ldrb	r3, [r7, #7]
 8006070:	429a      	cmp	r2, r3
 8006072:	d00b      	beq.n	800608c <OSPI_WaitFlagStateUntilTimeout+0x58>
        {
          hospi->State     = HAL_OSPI_STATE_ERROR;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800607a:	651a      	str	r2, [r3, #80]	@ 0x50
          hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006080:	f043 0201 	orr.w	r2, r3, #1
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	655a      	str	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e00e      	b.n	80060aa <OSPI_WaitFlagStateUntilTimeout+0x76>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	6a1a      	ldr	r2, [r3, #32]
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	4013      	ands	r3, r2
 8006096:	2b00      	cmp	r3, #0
 8006098:	bf14      	ite	ne
 800609a:	2301      	movne	r3, #1
 800609c:	2300      	moveq	r3, #0
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	461a      	mov	r2, r3
 80060a2:	79fb      	ldrb	r3, [r7, #7]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d1ce      	bne.n	8006046 <OSPI_WaitFlagStateUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
	...

080060b4 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b089      	sub	sp, #36	@ 0x24
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060be:	2300      	movs	r3, #0
 80060c0:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80060d0:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d10a      	bne.n	80060f0 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_MSEL, cmd->FlashId);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	685a      	ldr	r2, [r3, #4]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	430a      	orrs	r2, r1
 80060ee:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2b02      	cmp	r3, #2
 80060f6:	d114      	bne.n	8006122 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8006100:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800610a:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8006114:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800611e:	60fb      	str	r3, [r7, #12]
 8006120:	e02c      	b.n	800617c <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2b03      	cmp	r3, #3
 8006128:	d114      	bne.n	8006154 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8006132:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800613c:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006146:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8006150:	60fb      	str	r3, [r7, #12]
 8006152:	e013      	b.n	800617c <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800615c:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8006166:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8006170:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800617a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006184:	431a      	orrs	r2, r3
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800618e:	2b00      	cmp	r3, #0
 8006190:	d012      	beq.n	80061b8 <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061aa:	4319      	orrs	r1, r3
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061b0:	430b      	orrs	r3, r1
 80061b2:	431a      	orrs	r2, r3
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	601a      	str	r2, [r3, #0]
               (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f023 021f 	bic.w	r2, r3, #31
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061c4:	431a      	orrs	r2, r3
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d009      	beq.n	80061e6 <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d105      	bne.n	80061e6 <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	3a01      	subs	r2, #1
 80061e4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f000 8099 	beq.w	8006322 <OSPI_ConfigCmd+0x26e>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	69db      	ldr	r3, [r3, #28]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d055      	beq.n	80062a4 <OSPI_ConfigCmd+0x1f0>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d01e      	beq.n	800623e <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	4b67      	ldr	r3, [pc, #412]	@ (80063a4 <OSPI_ConfigCmd+0x2f0>)
 8006206:	4013      	ands	r3, r2
 8006208:	683a      	ldr	r2, [r7, #0]
 800620a:	68d1      	ldr	r1, [r2, #12]
 800620c:	683a      	ldr	r2, [r7, #0]
 800620e:	6952      	ldr	r2, [r2, #20]
 8006210:	4311      	orrs	r1, r2
 8006212:	683a      	ldr	r2, [r7, #0]
 8006214:	6912      	ldr	r2, [r2, #16]
 8006216:	4311      	orrs	r1, r2
 8006218:	683a      	ldr	r2, [r7, #0]
 800621a:	69d2      	ldr	r2, [r2, #28]
 800621c:	4311      	orrs	r1, r2
 800621e:	683a      	ldr	r2, [r7, #0]
 8006220:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006222:	4311      	orrs	r1, r2
 8006224:	683a      	ldr	r2, [r7, #0]
 8006226:	6a12      	ldr	r2, [r2, #32]
 8006228:	4311      	orrs	r1, r2
 800622a:	683a      	ldr	r2, [r7, #0]
 800622c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800622e:	4311      	orrs	r1, r2
 8006230:	683a      	ldr	r2, [r7, #0]
 8006232:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006234:	430a      	orrs	r2, r1
 8006236:	431a      	orrs	r2, r3
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	601a      	str	r2, [r3, #0]
 800623c:	e028      	b.n	8006290 <OSPI_ConfigCmd+0x1dc>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006246:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800624a:	683a      	ldr	r2, [r7, #0]
 800624c:	68d1      	ldr	r1, [r2, #12]
 800624e:	683a      	ldr	r2, [r7, #0]
 8006250:	6952      	ldr	r2, [r2, #20]
 8006252:	4311      	orrs	r1, r2
 8006254:	683a      	ldr	r2, [r7, #0]
 8006256:	6912      	ldr	r2, [r2, #16]
 8006258:	4311      	orrs	r1, r2
 800625a:	683a      	ldr	r2, [r7, #0]
 800625c:	69d2      	ldr	r2, [r2, #28]
 800625e:	4311      	orrs	r1, r2
 8006260:	683a      	ldr	r2, [r7, #0]
 8006262:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006264:	4311      	orrs	r1, r2
 8006266:	683a      	ldr	r2, [r7, #0]
 8006268:	6a12      	ldr	r2, [r2, #32]
 800626a:	430a      	orrs	r2, r1
 800626c:	431a      	orrs	r2, r3
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                    cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006276:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800627a:	d109      	bne.n	8006290 <OSPI_ConfigCmd+0x1dc>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8006280:	2b08      	cmp	r3, #8
 8006282:	d105      	bne.n	8006290 <OSPI_ConfigCmd+0x1dc>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	689a      	ldr	r2, [r3, #8]
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	683a      	ldr	r2, [r7, #0]
 800629e:	6992      	ldr	r2, [r2, #24]
 80062a0:	649a      	str	r2, [r3, #72]	@ 0x48
 80062a2:	e078      	b.n	8006396 <OSPI_ConfigCmd+0x2e2>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d017      	beq.n	80062dc <OSPI_ConfigCmd+0x228>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80062b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80062b8:	683a      	ldr	r2, [r7, #0]
 80062ba:	68d1      	ldr	r1, [r2, #12]
 80062bc:	683a      	ldr	r2, [r7, #0]
 80062be:	6952      	ldr	r2, [r2, #20]
 80062c0:	4311      	orrs	r1, r2
 80062c2:	683a      	ldr	r2, [r7, #0]
 80062c4:	6912      	ldr	r2, [r2, #16]
 80062c6:	4311      	orrs	r1, r2
 80062c8:	683a      	ldr	r2, [r7, #0]
 80062ca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80062cc:	4311      	orrs	r1, r2
 80062ce:	683a      	ldr	r2, [r7, #0]
 80062d0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80062d2:	430a      	orrs	r2, r1
 80062d4:	431a      	orrs	r2, r3
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	601a      	str	r2, [r3, #0]
 80062da:	e01d      	b.n	8006318 <OSPI_ConfigCmd+0x264>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	68d9      	ldr	r1, [r3, #12]
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	695b      	ldr	r3, [r3, #20]
 80062ec:	4319      	orrs	r1, r3
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	430b      	orrs	r3, r1
 80062f4:	431a      	orrs	r2, r3
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	601a      	str	r2, [r3, #0]
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006302:	d109      	bne.n	8006318 <OSPI_ConfigCmd+0x264>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8006308:	2b08      	cmp	r3, #8
 800630a:	d105      	bne.n	8006318 <OSPI_ConfigCmd+0x264>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	689a      	ldr	r2, [r3, #8]
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	601a      	str	r2, [r3, #0]
 8006320:	e039      	b.n	8006396 <OSPI_ConfigCmd+0x2e2>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	69db      	ldr	r3, [r3, #28]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d030      	beq.n	800638c <OSPI_ConfigCmd+0x2d8>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800632e:	2b00      	cmp	r3, #0
 8006330:	d017      	beq.n	8006362 <OSPI_ConfigCmd+0x2ae>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800633a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800633e:	683a      	ldr	r2, [r7, #0]
 8006340:	69d1      	ldr	r1, [r2, #28]
 8006342:	683a      	ldr	r2, [r7, #0]
 8006344:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006346:	4311      	orrs	r1, r2
 8006348:	683a      	ldr	r2, [r7, #0]
 800634a:	6a12      	ldr	r2, [r2, #32]
 800634c:	4311      	orrs	r1, r2
 800634e:	683a      	ldr	r2, [r7, #0]
 8006350:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006352:	4311      	orrs	r1, r2
 8006354:	683a      	ldr	r2, [r7, #0]
 8006356:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006358:	430a      	orrs	r2, r1
 800635a:	431a      	orrs	r2, r3
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	601a      	str	r2, [r3, #0]
 8006360:	e00e      	b.n	8006380 <OSPI_ConfigCmd+0x2cc>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	69d9      	ldr	r1, [r3, #28]
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006372:	4319      	orrs	r1, r3
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	6a1b      	ldr	r3, [r3, #32]
 8006378:	430b      	orrs	r3, r1
 800637a:	431a      	orrs	r2, r3
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	601a      	str	r2, [r3, #0]
                   (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	683a      	ldr	r2, [r7, #0]
 8006386:	6992      	ldr	r2, [r2, #24]
 8006388:	649a      	str	r2, [r3, #72]	@ 0x48
 800638a:	e004      	b.n	8006396 <OSPI_ConfigCmd+0x2e2>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2208      	movs	r2, #8
 8006394:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 8006396:	7ffb      	ldrb	r3, [r7, #31]
}
 8006398:	4618      	mov	r0, r3
 800639a:	3724      	adds	r7, #36	@ 0x24
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr
 80063a4:	f0ffc0c0 	.word	0xf0ffc0c0

080063a8 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b087      	sub	sp, #28
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	4603      	mov	r3, r0
 80063b0:	6039      	str	r1, [r7, #0]
 80063b2:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80063b4:	2300      	movs	r3, #0
 80063b6:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 80063b8:	2300      	movs	r3, #0
 80063ba:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 80063bc:	79fb      	ldrb	r3, [r7, #7]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d005      	beq.n	80063ce <OSPIM_GetConfig+0x26>
 80063c2:	79fb      	ldrb	r3, [r7, #7]
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d802      	bhi.n	80063ce <OSPIM_GetConfig+0x26>
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d102      	bne.n	80063d4 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	75fb      	strb	r3, [r7, #23]
 80063d2:	e098      	b.n	8006506 <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	2200      	movs	r2, #0
 80063d8:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	2200      	movs	r2, #0
 80063de:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	2200      	movs	r2, #0
 80063e4:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	2200      	movs	r2, #0
 80063ea:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	2200      	movs	r2, #0
 80063f0:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 80063f2:	79fb      	ldrb	r3, [r7, #7]
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	d10b      	bne.n	8006410 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 80063f8:	4b46      	ldr	r3, [pc, #280]	@ (8006514 <OSPIM_GetConfig+0x16c>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0301 	and.w	r3, r3, #1
 8006400:	2b00      	cmp	r3, #0
 8006402:	d102      	bne.n	800640a <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8006404:	4b44      	ldr	r3, [pc, #272]	@ (8006518 <OSPIM_GetConfig+0x170>)
 8006406:	613b      	str	r3, [r7, #16]
 8006408:	e002      	b.n	8006410 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 800640a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800640e:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8006410:	2300      	movs	r3, #0
 8006412:	60fb      	str	r3, [r7, #12]
 8006414:	e074      	b.n	8006500 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 8006416:	4a3f      	ldr	r2, [pc, #252]	@ (8006514 <OSPIM_GetConfig+0x16c>)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	4413      	add	r3, r2
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	f003 0301 	and.w	r3, r3, #1
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00a      	beq.n	8006442 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 800642c:	68ba      	ldr	r2, [r7, #8]
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	4053      	eors	r3, r2
 8006432:	f003 0302 	and.w	r3, r3, #2
 8006436:	2b00      	cmp	r3, #0
 8006438:	d103      	bne.n	8006442 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	1c5a      	adds	r2, r3, #1
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	f003 0310 	and.w	r3, r3, #16
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00a      	beq.n	8006462 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 800644c:	68ba      	ldr	r2, [r7, #8]
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	4053      	eors	r3, r2
 8006452:	f003 0320 	and.w	r3, r3, #32
 8006456:	2b00      	cmp	r3, #0
 8006458:	d103      	bne.n	8006462 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	1c5a      	adds	r2, r3, #1
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006468:	2b00      	cmp	r3, #0
 800646a:	d00a      	beq.n	8006482 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 800646c:	68ba      	ldr	r2, [r7, #8]
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	4053      	eors	r3, r2
 8006472:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006476:	2b00      	cmp	r3, #0
 8006478:	d103      	bne.n	8006482 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	1c5a      	adds	r2, r3, #1
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006488:	2b00      	cmp	r3, #0
 800648a:	d018      	beq.n	80064be <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 800648c:	68ba      	ldr	r2, [r7, #8]
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	4053      	eors	r3, r2
 8006492:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006496:	2b00      	cmp	r3, #0
 8006498:	d111      	bne.n	80064be <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d106      	bne.n	80064b2 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	3301      	adds	r3, #1
 80064a8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	60da      	str	r2, [r3, #12]
 80064b0:	e005      	b.n	80064be <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	3301      	adds	r3, #1
 80064b6:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d018      	beq.n	80064fa <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 80064c8:	68ba      	ldr	r2, [r7, #8]
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	4053      	eors	r3, r2
 80064ce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d111      	bne.n	80064fa <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d106      	bne.n	80064ee <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	3301      	adds	r3, #1
 80064e4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	611a      	str	r2, [r3, #16]
 80064ec:	e005      	b.n	80064fa <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	3301      	adds	r3, #1
 80064f2:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	3301      	adds	r3, #1
 80064fe:	60fb      	str	r3, [r7, #12]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2b01      	cmp	r3, #1
 8006504:	d987      	bls.n	8006416 <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 8006506:	7dfb      	ldrb	r3, [r7, #23]
}
 8006508:	4618      	mov	r0, r3
 800650a:	371c      	adds	r7, #28
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr
 8006514:	420c4000 	.word	0x420c4000
 8006518:	04040222 	.word	0x04040222

0800651c <HAL_OSPI_DLYB_SetConfig>:
  * @param  hospi   : OSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_SetConfig(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	73fb      	strb	r3, [r7, #15]

  /* Enable OCTOSPI Free Running Clock (mandatory) */
  SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	689a      	ldr	r2, [r3, #8]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f042 0202 	orr.w	r2, r2, #2
 8006538:	609a      	str	r2, [r3, #8]

  /* Update OCTOSPI state */
  hospi->State = HAL_OSPI_STATE_BUSY_CMD;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2208      	movs	r2, #8
 800653e:	651a      	str	r2, [r3, #80]	@ 0x50

  if (hospi->Instance == OCTOSPI1)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a15      	ldr	r2, [pc, #84]	@ (800659c <HAL_OSPI_DLYB_SetConfig+0x80>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d109      	bne.n	800655e <HAL_OSPI_DLYB_SetConfig+0x42>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 800654a:	4815      	ldr	r0, [pc, #84]	@ (80065a0 <HAL_OSPI_DLYB_SetConfig+0x84>)
 800654c:	f7fe fc5d 	bl	8004e0a <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 8006550:	6839      	ldr	r1, [r7, #0]
 8006552:	4813      	ldr	r0, [pc, #76]	@ (80065a0 <HAL_OSPI_DLYB_SetConfig+0x84>)
 8006554:	f005 fa5c 	bl	800ba10 <LL_DLYB_SetDelay>
    status = HAL_OK;
 8006558:	2300      	movs	r3, #0
 800655a:	73fb      	strb	r3, [r7, #15]
 800655c:	e00d      	b.n	800657a <HAL_OSPI_DLYB_SetConfig+0x5e>
  }

#if defined (OCTOSPI2)
  else if (hospi->Instance == OCTOSPI2)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a10      	ldr	r2, [pc, #64]	@ (80065a4 <HAL_OSPI_DLYB_SetConfig+0x88>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d108      	bne.n	800657a <HAL_OSPI_DLYB_SetConfig+0x5e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 8006568:	480f      	ldr	r0, [pc, #60]	@ (80065a8 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 800656a:	f7fe fc4e 	bl	8004e0a <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 800656e:	6839      	ldr	r1, [r7, #0]
 8006570:	480d      	ldr	r0, [pc, #52]	@ (80065a8 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 8006572:	f005 fa4d 	bl	800ba10 <LL_DLYB_SetDelay>
    status = HAL_OK;
 8006576:	2300      	movs	r3, #0
 8006578:	73fb      	strb	r3, [r7, #15]
  {
    /* Nothing to do */
  }

  /* Abort the current OCTOSPI operation if exist */
  (void)HAL_OSPI_Abort(hospi);
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f7fe ffa4 	bl	80054c8 <HAL_OSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	689a      	ldr	r2, [r3, #8]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f022 0202 	bic.w	r2, r2, #2
 800658e:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return status;
 8006590:	7bfb      	ldrb	r3, [r7, #15]
}
 8006592:	4618      	mov	r0, r3
 8006594:	3710      	adds	r7, #16
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	420d1400 	.word	0x420d1400
 80065a0:	420cf000 	.word	0x420cf000
 80065a4:	420d2400 	.word	0x420d2400
 80065a8:	420cf400 	.word	0x420cf400

080065ac <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b085      	sub	sp, #20
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80065b4:	4b39      	ldr	r3, [pc, #228]	@ (800669c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80065b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80065bc:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80065be:	68ba      	ldr	r2, [r7, #8]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d10b      	bne.n	80065de <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065cc:	d905      	bls.n	80065da <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80065ce:	4b33      	ldr	r3, [pc, #204]	@ (800669c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	4a32      	ldr	r2, [pc, #200]	@ (800669c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80065d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80065d8:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80065da:	2300      	movs	r3, #0
 80065dc:	e057      	b.n	800668e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065e4:	d90a      	bls.n	80065fc <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80065e6:	4b2d      	ldr	r3, [pc, #180]	@ (800669c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	4a2a      	ldr	r2, [pc, #168]	@ (800669c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80065f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80065f8:	60d3      	str	r3, [r2, #12]
 80065fa:	e007      	b.n	800660c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80065fc:	4b27      	ldr	r3, [pc, #156]	@ (800669c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8006604:	4925      	ldr	r1, [pc, #148]	@ (800669c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4313      	orrs	r3, r2
 800660a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800660c:	4b24      	ldr	r3, [pc, #144]	@ (80066a0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a24      	ldr	r2, [pc, #144]	@ (80066a4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006612:	fba2 2303 	umull	r2, r3, r2, r3
 8006616:	099b      	lsrs	r3, r3, #6
 8006618:	2232      	movs	r2, #50	@ 0x32
 800661a:	fb02 f303 	mul.w	r3, r2, r3
 800661e:	4a21      	ldr	r2, [pc, #132]	@ (80066a4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006620:	fba2 2303 	umull	r2, r3, r2, r3
 8006624:	099b      	lsrs	r3, r3, #6
 8006626:	3301      	adds	r3, #1
 8006628:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800662a:	e002      	b.n	8006632 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	3b01      	subs	r3, #1
 8006630:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8006632:	4b1a      	ldr	r3, [pc, #104]	@ (800669c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800663a:	2b00      	cmp	r3, #0
 800663c:	d102      	bne.n	8006644 <HAL_PWREx_ControlVoltageScaling+0x98>
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d1f3      	bne.n	800662c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d01b      	beq.n	8006682 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800664a:	4b15      	ldr	r3, [pc, #84]	@ (80066a0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a15      	ldr	r2, [pc, #84]	@ (80066a4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006650:	fba2 2303 	umull	r2, r3, r2, r3
 8006654:	099b      	lsrs	r3, r3, #6
 8006656:	2232      	movs	r2, #50	@ 0x32
 8006658:	fb02 f303 	mul.w	r3, r2, r3
 800665c:	4a11      	ldr	r2, [pc, #68]	@ (80066a4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800665e:	fba2 2303 	umull	r2, r3, r2, r3
 8006662:	099b      	lsrs	r3, r3, #6
 8006664:	3301      	adds	r3, #1
 8006666:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8006668:	e002      	b.n	8006670 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	3b01      	subs	r3, #1
 800666e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8006670:	4b0a      	ldr	r3, [pc, #40]	@ (800669c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006674:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d102      	bne.n	8006682 <HAL_PWREx_ControlVoltageScaling+0xd6>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d1f3      	bne.n	800666a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d101      	bne.n	800668c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8006688:	2303      	movs	r3, #3
 800668a:	e000      	b.n	800668e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	3714      	adds	r7, #20
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop
 800669c:	46020800 	.word	0x46020800
 80066a0:	20000004 	.word	0x20000004
 80066a4:	10624dd3 	.word	0x10624dd3

080066a8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80066a8:	b480      	push	{r7}
 80066aa:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80066ac:	4b04      	ldr	r3, [pc, #16]	@ (80066c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80066ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop
 80066c0:	46020800 	.word	0x46020800

080066c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b08e      	sub	sp, #56	@ 0x38
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80066cc:	2300      	movs	r3, #0
 80066ce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d102      	bne.n	80066de <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	f000 bec8 	b.w	800746e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066de:	4b99      	ldr	r3, [pc, #612]	@ (8006944 <HAL_RCC_OscConfig+0x280>)
 80066e0:	69db      	ldr	r3, [r3, #28]
 80066e2:	f003 030c 	and.w	r3, r3, #12
 80066e6:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80066e8:	4b96      	ldr	r3, [pc, #600]	@ (8006944 <HAL_RCC_OscConfig+0x280>)
 80066ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ec:	f003 0303 	and.w	r3, r3, #3
 80066f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f003 0310 	and.w	r3, r3, #16
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	f000 816c 	beq.w	80069d8 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006702:	2b00      	cmp	r3, #0
 8006704:	d007      	beq.n	8006716 <HAL_RCC_OscConfig+0x52>
 8006706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006708:	2b0c      	cmp	r3, #12
 800670a:	f040 80de 	bne.w	80068ca <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800670e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006710:	2b01      	cmp	r3, #1
 8006712:	f040 80da 	bne.w	80068ca <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	69db      	ldr	r3, [r3, #28]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d102      	bne.n	8006724 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	f000 bea5 	b.w	800746e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006728:	4b86      	ldr	r3, [pc, #536]	@ (8006944 <HAL_RCC_OscConfig+0x280>)
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006730:	2b00      	cmp	r3, #0
 8006732:	d004      	beq.n	800673e <HAL_RCC_OscConfig+0x7a>
 8006734:	4b83      	ldr	r3, [pc, #524]	@ (8006944 <HAL_RCC_OscConfig+0x280>)
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800673c:	e005      	b.n	800674a <HAL_RCC_OscConfig+0x86>
 800673e:	4b81      	ldr	r3, [pc, #516]	@ (8006944 <HAL_RCC_OscConfig+0x280>)
 8006740:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006744:	041b      	lsls	r3, r3, #16
 8006746:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800674a:	4293      	cmp	r3, r2
 800674c:	d255      	bcs.n	80067fa <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800674e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006750:	2b00      	cmp	r3, #0
 8006752:	d10a      	bne.n	800676a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006758:	4618      	mov	r0, r3
 800675a:	f001 fa11 	bl	8007b80 <RCC_SetFlashLatencyFromMSIRange>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d002      	beq.n	800676a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	f000 be82 	b.w	800746e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800676a:	4b76      	ldr	r3, [pc, #472]	@ (8006944 <HAL_RCC_OscConfig+0x280>)
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	4a75      	ldr	r2, [pc, #468]	@ (8006944 <HAL_RCC_OscConfig+0x280>)
 8006770:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006774:	6093      	str	r3, [r2, #8]
 8006776:	4b73      	ldr	r3, [pc, #460]	@ (8006944 <HAL_RCC_OscConfig+0x280>)
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006782:	4970      	ldr	r1, [pc, #448]	@ (8006944 <HAL_RCC_OscConfig+0x280>)
 8006784:	4313      	orrs	r3, r2
 8006786:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800678c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006790:	d309      	bcc.n	80067a6 <HAL_RCC_OscConfig+0xe2>
 8006792:	4b6c      	ldr	r3, [pc, #432]	@ (8006944 <HAL_RCC_OscConfig+0x280>)
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	f023 021f 	bic.w	r2, r3, #31
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	4969      	ldr	r1, [pc, #420]	@ (8006944 <HAL_RCC_OscConfig+0x280>)
 80067a0:	4313      	orrs	r3, r2
 80067a2:	60cb      	str	r3, [r1, #12]
 80067a4:	e07e      	b.n	80068a4 <HAL_RCC_OscConfig+0x1e0>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	da0a      	bge.n	80067c4 <HAL_RCC_OscConfig+0x100>
 80067ae:	4b65      	ldr	r3, [pc, #404]	@ (8006944 <HAL_RCC_OscConfig+0x280>)
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	015b      	lsls	r3, r3, #5
 80067bc:	4961      	ldr	r1, [pc, #388]	@ (8006944 <HAL_RCC_OscConfig+0x280>)
 80067be:	4313      	orrs	r3, r2
 80067c0:	60cb      	str	r3, [r1, #12]
 80067c2:	e06f      	b.n	80068a4 <HAL_RCC_OscConfig+0x1e0>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067cc:	d30a      	bcc.n	80067e4 <HAL_RCC_OscConfig+0x120>
 80067ce:	4b5d      	ldr	r3, [pc, #372]	@ (8006944 <HAL_RCC_OscConfig+0x280>)
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a1b      	ldr	r3, [r3, #32]
 80067da:	029b      	lsls	r3, r3, #10
 80067dc:	4959      	ldr	r1, [pc, #356]	@ (8006944 <HAL_RCC_OscConfig+0x280>)
 80067de:	4313      	orrs	r3, r2
 80067e0:	60cb      	str	r3, [r1, #12]
 80067e2:	e05f      	b.n	80068a4 <HAL_RCC_OscConfig+0x1e0>
 80067e4:	4b57      	ldr	r3, [pc, #348]	@ (8006944 <HAL_RCC_OscConfig+0x280>)
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6a1b      	ldr	r3, [r3, #32]
 80067f0:	03db      	lsls	r3, r3, #15
 80067f2:	4954      	ldr	r1, [pc, #336]	@ (8006944 <HAL_RCC_OscConfig+0x280>)
 80067f4:	4313      	orrs	r3, r2
 80067f6:	60cb      	str	r3, [r1, #12]
 80067f8:	e054      	b.n	80068a4 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80067fa:	4b52      	ldr	r3, [pc, #328]	@ (8006944 <HAL_RCC_OscConfig+0x280>)
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	4a51      	ldr	r2, [pc, #324]	@ (8006944 <HAL_RCC_OscConfig+0x280>)
 8006800:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006804:	6093      	str	r3, [r2, #8]
 8006806:	4b4f      	ldr	r3, [pc, #316]	@ (8006944 <HAL_RCC_OscConfig+0x280>)
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006812:	494c      	ldr	r1, [pc, #304]	@ (8006944 <HAL_RCC_OscConfig+0x280>)
 8006814:	4313      	orrs	r3, r2
 8006816:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800681c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006820:	d309      	bcc.n	8006836 <HAL_RCC_OscConfig+0x172>
 8006822:	4b48      	ldr	r3, [pc, #288]	@ (8006944 <HAL_RCC_OscConfig+0x280>)
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	f023 021f 	bic.w	r2, r3, #31
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a1b      	ldr	r3, [r3, #32]
 800682e:	4945      	ldr	r1, [pc, #276]	@ (8006944 <HAL_RCC_OscConfig+0x280>)
 8006830:	4313      	orrs	r3, r2
 8006832:	60cb      	str	r3, [r1, #12]
 8006834:	e028      	b.n	8006888 <HAL_RCC_OscConfig+0x1c4>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800683a:	2b00      	cmp	r3, #0
 800683c:	da0a      	bge.n	8006854 <HAL_RCC_OscConfig+0x190>
 800683e:	4b41      	ldr	r3, [pc, #260]	@ (8006944 <HAL_RCC_OscConfig+0x280>)
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a1b      	ldr	r3, [r3, #32]
 800684a:	015b      	lsls	r3, r3, #5
 800684c:	493d      	ldr	r1, [pc, #244]	@ (8006944 <HAL_RCC_OscConfig+0x280>)
 800684e:	4313      	orrs	r3, r2
 8006850:	60cb      	str	r3, [r1, #12]
 8006852:	e019      	b.n	8006888 <HAL_RCC_OscConfig+0x1c4>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006858:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800685c:	d30a      	bcc.n	8006874 <HAL_RCC_OscConfig+0x1b0>
 800685e:	4b39      	ldr	r3, [pc, #228]	@ (8006944 <HAL_RCC_OscConfig+0x280>)
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a1b      	ldr	r3, [r3, #32]
 800686a:	029b      	lsls	r3, r3, #10
 800686c:	4935      	ldr	r1, [pc, #212]	@ (8006944 <HAL_RCC_OscConfig+0x280>)
 800686e:	4313      	orrs	r3, r2
 8006870:	60cb      	str	r3, [r1, #12]
 8006872:	e009      	b.n	8006888 <HAL_RCC_OscConfig+0x1c4>
 8006874:	4b33      	ldr	r3, [pc, #204]	@ (8006944 <HAL_RCC_OscConfig+0x280>)
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6a1b      	ldr	r3, [r3, #32]
 8006880:	03db      	lsls	r3, r3, #15
 8006882:	4930      	ldr	r1, [pc, #192]	@ (8006944 <HAL_RCC_OscConfig+0x280>)
 8006884:	4313      	orrs	r3, r2
 8006886:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800688a:	2b00      	cmp	r3, #0
 800688c:	d10a      	bne.n	80068a4 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006892:	4618      	mov	r0, r3
 8006894:	f001 f974 	bl	8007b80 <RCC_SetFlashLatencyFromMSIRange>
 8006898:	4603      	mov	r3, r0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d002      	beq.n	80068a4 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	f000 bde5 	b.w	800746e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80068a4:	f001 f8de 	bl	8007a64 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80068a8:	4b27      	ldr	r3, [pc, #156]	@ (8006948 <HAL_RCC_OscConfig+0x284>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4618      	mov	r0, r3
 80068ae:	f7fb f803 	bl	80018b8 <HAL_InitTick>
 80068b2:	4603      	mov	r3, r0
 80068b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 80068b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80068bc:	2b00      	cmp	r3, #0
 80068be:	f000 808a 	beq.w	80069d6 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80068c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80068c6:	f000 bdd2 	b.w	800746e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	69db      	ldr	r3, [r3, #28]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d066      	beq.n	80069a0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80068d2:	4b1c      	ldr	r3, [pc, #112]	@ (8006944 <HAL_RCC_OscConfig+0x280>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a1b      	ldr	r2, [pc, #108]	@ (8006944 <HAL_RCC_OscConfig+0x280>)
 80068d8:	f043 0301 	orr.w	r3, r3, #1
 80068dc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80068de:	f7fb fb27 	bl	8001f30 <HAL_GetTick>
 80068e2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80068e4:	e009      	b.n	80068fa <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80068e6:	f7fb fb23 	bl	8001f30 <HAL_GetTick>
 80068ea:	4602      	mov	r2, r0
 80068ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d902      	bls.n	80068fa <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80068f4:	2303      	movs	r3, #3
 80068f6:	f000 bdba 	b.w	800746e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80068fa:	4b12      	ldr	r3, [pc, #72]	@ (8006944 <HAL_RCC_OscConfig+0x280>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 0304 	and.w	r3, r3, #4
 8006902:	2b00      	cmp	r3, #0
 8006904:	d0ef      	beq.n	80068e6 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8006906:	4b0f      	ldr	r3, [pc, #60]	@ (8006944 <HAL_RCC_OscConfig+0x280>)
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	4a0e      	ldr	r2, [pc, #56]	@ (8006944 <HAL_RCC_OscConfig+0x280>)
 800690c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006910:	6093      	str	r3, [r2, #8]
 8006912:	4b0c      	ldr	r3, [pc, #48]	@ (8006944 <HAL_RCC_OscConfig+0x280>)
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800691e:	4909      	ldr	r1, [pc, #36]	@ (8006944 <HAL_RCC_OscConfig+0x280>)
 8006920:	4313      	orrs	r3, r2
 8006922:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006928:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800692c:	d30e      	bcc.n	800694c <HAL_RCC_OscConfig+0x288>
 800692e:	4b05      	ldr	r3, [pc, #20]	@ (8006944 <HAL_RCC_OscConfig+0x280>)
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	f023 021f 	bic.w	r2, r3, #31
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a1b      	ldr	r3, [r3, #32]
 800693a:	4902      	ldr	r1, [pc, #8]	@ (8006944 <HAL_RCC_OscConfig+0x280>)
 800693c:	4313      	orrs	r3, r2
 800693e:	60cb      	str	r3, [r1, #12]
 8006940:	e04a      	b.n	80069d8 <HAL_RCC_OscConfig+0x314>
 8006942:	bf00      	nop
 8006944:	46020c00 	.word	0x46020c00
 8006948:	20000008 	.word	0x20000008
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006950:	2b00      	cmp	r3, #0
 8006952:	da0a      	bge.n	800696a <HAL_RCC_OscConfig+0x2a6>
 8006954:	4b98      	ldr	r3, [pc, #608]	@ (8006bb8 <HAL_RCC_OscConfig+0x4f4>)
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6a1b      	ldr	r3, [r3, #32]
 8006960:	015b      	lsls	r3, r3, #5
 8006962:	4995      	ldr	r1, [pc, #596]	@ (8006bb8 <HAL_RCC_OscConfig+0x4f4>)
 8006964:	4313      	orrs	r3, r2
 8006966:	60cb      	str	r3, [r1, #12]
 8006968:	e036      	b.n	80069d8 <HAL_RCC_OscConfig+0x314>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800696e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006972:	d30a      	bcc.n	800698a <HAL_RCC_OscConfig+0x2c6>
 8006974:	4b90      	ldr	r3, [pc, #576]	@ (8006bb8 <HAL_RCC_OscConfig+0x4f4>)
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6a1b      	ldr	r3, [r3, #32]
 8006980:	029b      	lsls	r3, r3, #10
 8006982:	498d      	ldr	r1, [pc, #564]	@ (8006bb8 <HAL_RCC_OscConfig+0x4f4>)
 8006984:	4313      	orrs	r3, r2
 8006986:	60cb      	str	r3, [r1, #12]
 8006988:	e026      	b.n	80069d8 <HAL_RCC_OscConfig+0x314>
 800698a:	4b8b      	ldr	r3, [pc, #556]	@ (8006bb8 <HAL_RCC_OscConfig+0x4f4>)
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a1b      	ldr	r3, [r3, #32]
 8006996:	03db      	lsls	r3, r3, #15
 8006998:	4987      	ldr	r1, [pc, #540]	@ (8006bb8 <HAL_RCC_OscConfig+0x4f4>)
 800699a:	4313      	orrs	r3, r2
 800699c:	60cb      	str	r3, [r1, #12]
 800699e:	e01b      	b.n	80069d8 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80069a0:	4b85      	ldr	r3, [pc, #532]	@ (8006bb8 <HAL_RCC_OscConfig+0x4f4>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a84      	ldr	r2, [pc, #528]	@ (8006bb8 <HAL_RCC_OscConfig+0x4f4>)
 80069a6:	f023 0301 	bic.w	r3, r3, #1
 80069aa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80069ac:	f7fb fac0 	bl	8001f30 <HAL_GetTick>
 80069b0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80069b2:	e009      	b.n	80069c8 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80069b4:	f7fb fabc 	bl	8001f30 <HAL_GetTick>
 80069b8:	4602      	mov	r2, r0
 80069ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069bc:	1ad3      	subs	r3, r2, r3
 80069be:	2b02      	cmp	r3, #2
 80069c0:	d902      	bls.n	80069c8 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80069c2:	2303      	movs	r3, #3
 80069c4:	f000 bd53 	b.w	800746e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80069c8:	4b7b      	ldr	r3, [pc, #492]	@ (8006bb8 <HAL_RCC_OscConfig+0x4f4>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f003 0304 	and.w	r3, r3, #4
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d1ef      	bne.n	80069b4 <HAL_RCC_OscConfig+0x2f0>
 80069d4:	e000      	b.n	80069d8 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80069d6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0301 	and.w	r3, r3, #1
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	f000 808b 	beq.w	8006afc <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80069e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e8:	2b08      	cmp	r3, #8
 80069ea:	d005      	beq.n	80069f8 <HAL_RCC_OscConfig+0x334>
 80069ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ee:	2b0c      	cmp	r3, #12
 80069f0:	d109      	bne.n	8006a06 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80069f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069f4:	2b03      	cmp	r3, #3
 80069f6:	d106      	bne.n	8006a06 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d17d      	bne.n	8006afc <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	f000 bd34 	b.w	800746e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a0e:	d106      	bne.n	8006a1e <HAL_RCC_OscConfig+0x35a>
 8006a10:	4b69      	ldr	r3, [pc, #420]	@ (8006bb8 <HAL_RCC_OscConfig+0x4f4>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a68      	ldr	r2, [pc, #416]	@ (8006bb8 <HAL_RCC_OscConfig+0x4f4>)
 8006a16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a1a:	6013      	str	r3, [r2, #0]
 8006a1c:	e041      	b.n	8006aa2 <HAL_RCC_OscConfig+0x3de>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006a26:	d112      	bne.n	8006a4e <HAL_RCC_OscConfig+0x38a>
 8006a28:	4b63      	ldr	r3, [pc, #396]	@ (8006bb8 <HAL_RCC_OscConfig+0x4f4>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a62      	ldr	r2, [pc, #392]	@ (8006bb8 <HAL_RCC_OscConfig+0x4f4>)
 8006a2e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006a32:	6013      	str	r3, [r2, #0]
 8006a34:	4b60      	ldr	r3, [pc, #384]	@ (8006bb8 <HAL_RCC_OscConfig+0x4f4>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a5f      	ldr	r2, [pc, #380]	@ (8006bb8 <HAL_RCC_OscConfig+0x4f4>)
 8006a3a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006a3e:	6013      	str	r3, [r2, #0]
 8006a40:	4b5d      	ldr	r3, [pc, #372]	@ (8006bb8 <HAL_RCC_OscConfig+0x4f4>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a5c      	ldr	r2, [pc, #368]	@ (8006bb8 <HAL_RCC_OscConfig+0x4f4>)
 8006a46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a4a:	6013      	str	r3, [r2, #0]
 8006a4c:	e029      	b.n	8006aa2 <HAL_RCC_OscConfig+0x3de>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8006a56:	d112      	bne.n	8006a7e <HAL_RCC_OscConfig+0x3ba>
 8006a58:	4b57      	ldr	r3, [pc, #348]	@ (8006bb8 <HAL_RCC_OscConfig+0x4f4>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a56      	ldr	r2, [pc, #344]	@ (8006bb8 <HAL_RCC_OscConfig+0x4f4>)
 8006a5e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006a62:	6013      	str	r3, [r2, #0]
 8006a64:	4b54      	ldr	r3, [pc, #336]	@ (8006bb8 <HAL_RCC_OscConfig+0x4f4>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a53      	ldr	r2, [pc, #332]	@ (8006bb8 <HAL_RCC_OscConfig+0x4f4>)
 8006a6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a6e:	6013      	str	r3, [r2, #0]
 8006a70:	4b51      	ldr	r3, [pc, #324]	@ (8006bb8 <HAL_RCC_OscConfig+0x4f4>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a50      	ldr	r2, [pc, #320]	@ (8006bb8 <HAL_RCC_OscConfig+0x4f4>)
 8006a76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a7a:	6013      	str	r3, [r2, #0]
 8006a7c:	e011      	b.n	8006aa2 <HAL_RCC_OscConfig+0x3de>
 8006a7e:	4b4e      	ldr	r3, [pc, #312]	@ (8006bb8 <HAL_RCC_OscConfig+0x4f4>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a4d      	ldr	r2, [pc, #308]	@ (8006bb8 <HAL_RCC_OscConfig+0x4f4>)
 8006a84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a88:	6013      	str	r3, [r2, #0]
 8006a8a:	4b4b      	ldr	r3, [pc, #300]	@ (8006bb8 <HAL_RCC_OscConfig+0x4f4>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a4a      	ldr	r2, [pc, #296]	@ (8006bb8 <HAL_RCC_OscConfig+0x4f4>)
 8006a90:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a94:	6013      	str	r3, [r2, #0]
 8006a96:	4b48      	ldr	r3, [pc, #288]	@ (8006bb8 <HAL_RCC_OscConfig+0x4f4>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a47      	ldr	r2, [pc, #284]	@ (8006bb8 <HAL_RCC_OscConfig+0x4f4>)
 8006a9c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006aa0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d014      	beq.n	8006ad4 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8006aaa:	f7fb fa41 	bl	8001f30 <HAL_GetTick>
 8006aae:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ab0:	e009      	b.n	8006ac6 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ab2:	f7fb fa3d 	bl	8001f30 <HAL_GetTick>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aba:	1ad3      	subs	r3, r2, r3
 8006abc:	2b64      	cmp	r3, #100	@ 0x64
 8006abe:	d902      	bls.n	8006ac6 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	f000 bcd4 	b.w	800746e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ac6:	4b3c      	ldr	r3, [pc, #240]	@ (8006bb8 <HAL_RCC_OscConfig+0x4f4>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d0ef      	beq.n	8006ab2 <HAL_RCC_OscConfig+0x3ee>
 8006ad2:	e013      	b.n	8006afc <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8006ad4:	f7fb fa2c 	bl	8001f30 <HAL_GetTick>
 8006ad8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006ada:	e009      	b.n	8006af0 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006adc:	f7fb fa28 	bl	8001f30 <HAL_GetTick>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	2b64      	cmp	r3, #100	@ 0x64
 8006ae8:	d902      	bls.n	8006af0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8006aea:	2303      	movs	r3, #3
 8006aec:	f000 bcbf 	b.w	800746e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006af0:	4b31      	ldr	r3, [pc, #196]	@ (8006bb8 <HAL_RCC_OscConfig+0x4f4>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d1ef      	bne.n	8006adc <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 0302 	and.w	r3, r3, #2
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d05f      	beq.n	8006bc8 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b0a:	2b04      	cmp	r3, #4
 8006b0c:	d005      	beq.n	8006b1a <HAL_RCC_OscConfig+0x456>
 8006b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b10:	2b0c      	cmp	r3, #12
 8006b12:	d114      	bne.n	8006b3e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	d111      	bne.n	8006b3e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d102      	bne.n	8006b28 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	f000 bca3 	b.w	800746e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8006b28:	4b23      	ldr	r3, [pc, #140]	@ (8006bb8 <HAL_RCC_OscConfig+0x4f4>)
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	691b      	ldr	r3, [r3, #16]
 8006b34:	041b      	lsls	r3, r3, #16
 8006b36:	4920      	ldr	r1, [pc, #128]	@ (8006bb8 <HAL_RCC_OscConfig+0x4f4>)
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006b3c:	e044      	b.n	8006bc8 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d024      	beq.n	8006b90 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8006b46:	4b1c      	ldr	r3, [pc, #112]	@ (8006bb8 <HAL_RCC_OscConfig+0x4f4>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a1b      	ldr	r2, [pc, #108]	@ (8006bb8 <HAL_RCC_OscConfig+0x4f4>)
 8006b4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b50:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006b52:	f7fb f9ed 	bl	8001f30 <HAL_GetTick>
 8006b56:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b58:	e009      	b.n	8006b6e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b5a:	f7fb f9e9 	bl	8001f30 <HAL_GetTick>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b62:	1ad3      	subs	r3, r2, r3
 8006b64:	2b02      	cmp	r3, #2
 8006b66:	d902      	bls.n	8006b6e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006b68:	2303      	movs	r3, #3
 8006b6a:	f000 bc80 	b.w	800746e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b6e:	4b12      	ldr	r3, [pc, #72]	@ (8006bb8 <HAL_RCC_OscConfig+0x4f4>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d0ef      	beq.n	8006b5a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8006b7a:	4b0f      	ldr	r3, [pc, #60]	@ (8006bb8 <HAL_RCC_OscConfig+0x4f4>)
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	041b      	lsls	r3, r3, #16
 8006b88:	490b      	ldr	r1, [pc, #44]	@ (8006bb8 <HAL_RCC_OscConfig+0x4f4>)
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	610b      	str	r3, [r1, #16]
 8006b8e:	e01b      	b.n	8006bc8 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8006b90:	4b09      	ldr	r3, [pc, #36]	@ (8006bb8 <HAL_RCC_OscConfig+0x4f4>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a08      	ldr	r2, [pc, #32]	@ (8006bb8 <HAL_RCC_OscConfig+0x4f4>)
 8006b96:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b9a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006b9c:	f7fb f9c8 	bl	8001f30 <HAL_GetTick>
 8006ba0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006ba2:	e00b      	b.n	8006bbc <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ba4:	f7fb f9c4 	bl	8001f30 <HAL_GetTick>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bac:	1ad3      	subs	r3, r2, r3
 8006bae:	2b02      	cmp	r3, #2
 8006bb0:	d904      	bls.n	8006bbc <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8006bb2:	2303      	movs	r3, #3
 8006bb4:	f000 bc5b 	b.w	800746e <HAL_RCC_OscConfig+0xdaa>
 8006bb8:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006bbc:	4baf      	ldr	r3, [pc, #700]	@ (8006e7c <HAL_RCC_OscConfig+0x7b8>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d1ed      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 0308 	and.w	r3, r3, #8
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	f000 80c8 	beq.w	8006d66 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bdc:	4ba7      	ldr	r3, [pc, #668]	@ (8006e7c <HAL_RCC_OscConfig+0x7b8>)
 8006bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006be2:	f003 0304 	and.w	r3, r3, #4
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d111      	bne.n	8006c0e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bea:	4ba4      	ldr	r3, [pc, #656]	@ (8006e7c <HAL_RCC_OscConfig+0x7b8>)
 8006bec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bf0:	4aa2      	ldr	r2, [pc, #648]	@ (8006e7c <HAL_RCC_OscConfig+0x7b8>)
 8006bf2:	f043 0304 	orr.w	r3, r3, #4
 8006bf6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006bfa:	4ba0      	ldr	r3, [pc, #640]	@ (8006e7c <HAL_RCC_OscConfig+0x7b8>)
 8006bfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c00:	f003 0304 	and.w	r3, r3, #4
 8006c04:	617b      	str	r3, [r7, #20]
 8006c06:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006c0e:	4b9c      	ldr	r3, [pc, #624]	@ (8006e80 <HAL_RCC_OscConfig+0x7bc>)
 8006c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c12:	f003 0301 	and.w	r3, r3, #1
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d119      	bne.n	8006c4e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006c1a:	4b99      	ldr	r3, [pc, #612]	@ (8006e80 <HAL_RCC_OscConfig+0x7bc>)
 8006c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c1e:	4a98      	ldr	r2, [pc, #608]	@ (8006e80 <HAL_RCC_OscConfig+0x7bc>)
 8006c20:	f043 0301 	orr.w	r3, r3, #1
 8006c24:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c26:	f7fb f983 	bl	8001f30 <HAL_GetTick>
 8006c2a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006c2c:	e009      	b.n	8006c42 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c2e:	f7fb f97f 	bl	8001f30 <HAL_GetTick>
 8006c32:	4602      	mov	r2, r0
 8006c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c36:	1ad3      	subs	r3, r2, r3
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	d902      	bls.n	8006c42 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	f000 bc16 	b.w	800746e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006c42:	4b8f      	ldr	r3, [pc, #572]	@ (8006e80 <HAL_RCC_OscConfig+0x7bc>)
 8006c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c46:	f003 0301 	and.w	r3, r3, #1
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d0ef      	beq.n	8006c2e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	695b      	ldr	r3, [r3, #20]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d05f      	beq.n	8006d16 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8006c56:	4b89      	ldr	r3, [pc, #548]	@ (8006e7c <HAL_RCC_OscConfig+0x7b8>)
 8006c58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c5c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	699a      	ldr	r2, [r3, #24]
 8006c62:	6a3b      	ldr	r3, [r7, #32]
 8006c64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d037      	beq.n	8006cdc <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8006c6c:	6a3b      	ldr	r3, [r7, #32]
 8006c6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d006      	beq.n	8006c84 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8006c76:	6a3b      	ldr	r3, [r7, #32]
 8006c78:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d101      	bne.n	8006c84 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	e3f4      	b.n	800746e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8006c84:	6a3b      	ldr	r3, [r7, #32]
 8006c86:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d01b      	beq.n	8006cc6 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8006c8e:	4b7b      	ldr	r3, [pc, #492]	@ (8006e7c <HAL_RCC_OscConfig+0x7b8>)
 8006c90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c94:	4a79      	ldr	r2, [pc, #484]	@ (8006e7c <HAL_RCC_OscConfig+0x7b8>)
 8006c96:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8006c9a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8006c9e:	f7fb f947 	bl	8001f30 <HAL_GetTick>
 8006ca2:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006ca4:	e008      	b.n	8006cb8 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ca6:	f7fb f943 	bl	8001f30 <HAL_GetTick>
 8006caa:	4602      	mov	r2, r0
 8006cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cae:	1ad3      	subs	r3, r2, r3
 8006cb0:	2b05      	cmp	r3, #5
 8006cb2:	d901      	bls.n	8006cb8 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8006cb4:	2303      	movs	r3, #3
 8006cb6:	e3da      	b.n	800746e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006cb8:	4b70      	ldr	r3, [pc, #448]	@ (8006e7c <HAL_RCC_OscConfig+0x7b8>)
 8006cba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006cbe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d1ef      	bne.n	8006ca6 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8006cc6:	4b6d      	ldr	r3, [pc, #436]	@ (8006e7c <HAL_RCC_OscConfig+0x7b8>)
 8006cc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ccc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	699b      	ldr	r3, [r3, #24]
 8006cd4:	4969      	ldr	r1, [pc, #420]	@ (8006e7c <HAL_RCC_OscConfig+0x7b8>)
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8006cdc:	4b67      	ldr	r3, [pc, #412]	@ (8006e7c <HAL_RCC_OscConfig+0x7b8>)
 8006cde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ce2:	4a66      	ldr	r2, [pc, #408]	@ (8006e7c <HAL_RCC_OscConfig+0x7b8>)
 8006ce4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006ce8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8006cec:	f7fb f920 	bl	8001f30 <HAL_GetTick>
 8006cf0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006cf2:	e008      	b.n	8006d06 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006cf4:	f7fb f91c 	bl	8001f30 <HAL_GetTick>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cfc:	1ad3      	subs	r3, r2, r3
 8006cfe:	2b05      	cmp	r3, #5
 8006d00:	d901      	bls.n	8006d06 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8006d02:	2303      	movs	r3, #3
 8006d04:	e3b3      	b.n	800746e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006d06:	4b5d      	ldr	r3, [pc, #372]	@ (8006e7c <HAL_RCC_OscConfig+0x7b8>)
 8006d08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d0ef      	beq.n	8006cf4 <HAL_RCC_OscConfig+0x630>
 8006d14:	e01b      	b.n	8006d4e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8006d16:	4b59      	ldr	r3, [pc, #356]	@ (8006e7c <HAL_RCC_OscConfig+0x7b8>)
 8006d18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d1c:	4a57      	ldr	r2, [pc, #348]	@ (8006e7c <HAL_RCC_OscConfig+0x7b8>)
 8006d1e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8006d22:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8006d26:	f7fb f903 	bl	8001f30 <HAL_GetTick>
 8006d2a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006d2c:	e008      	b.n	8006d40 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d2e:	f7fb f8ff 	bl	8001f30 <HAL_GetTick>
 8006d32:	4602      	mov	r2, r0
 8006d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	2b05      	cmp	r3, #5
 8006d3a:	d901      	bls.n	8006d40 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	e396      	b.n	800746e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006d40:	4b4e      	ldr	r3, [pc, #312]	@ (8006e7c <HAL_RCC_OscConfig+0x7b8>)
 8006d42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d46:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d1ef      	bne.n	8006d2e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006d4e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d107      	bne.n	8006d66 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d56:	4b49      	ldr	r3, [pc, #292]	@ (8006e7c <HAL_RCC_OscConfig+0x7b8>)
 8006d58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d5c:	4a47      	ldr	r2, [pc, #284]	@ (8006e7c <HAL_RCC_OscConfig+0x7b8>)
 8006d5e:	f023 0304 	bic.w	r3, r3, #4
 8006d62:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 0304 	and.w	r3, r3, #4
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	f000 8111 	beq.w	8006f96 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8006d74:	2300      	movs	r3, #0
 8006d76:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d7a:	4b40      	ldr	r3, [pc, #256]	@ (8006e7c <HAL_RCC_OscConfig+0x7b8>)
 8006d7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d80:	f003 0304 	and.w	r3, r3, #4
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d111      	bne.n	8006dac <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d88:	4b3c      	ldr	r3, [pc, #240]	@ (8006e7c <HAL_RCC_OscConfig+0x7b8>)
 8006d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d8e:	4a3b      	ldr	r2, [pc, #236]	@ (8006e7c <HAL_RCC_OscConfig+0x7b8>)
 8006d90:	f043 0304 	orr.w	r3, r3, #4
 8006d94:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006d98:	4b38      	ldr	r3, [pc, #224]	@ (8006e7c <HAL_RCC_OscConfig+0x7b8>)
 8006d9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d9e:	f003 0304 	and.w	r3, r3, #4
 8006da2:	613b      	str	r3, [r7, #16]
 8006da4:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8006da6:	2301      	movs	r3, #1
 8006da8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006dac:	4b34      	ldr	r3, [pc, #208]	@ (8006e80 <HAL_RCC_OscConfig+0x7bc>)
 8006dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006db0:	f003 0301 	and.w	r3, r3, #1
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d118      	bne.n	8006dea <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006db8:	4b31      	ldr	r3, [pc, #196]	@ (8006e80 <HAL_RCC_OscConfig+0x7bc>)
 8006dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dbc:	4a30      	ldr	r2, [pc, #192]	@ (8006e80 <HAL_RCC_OscConfig+0x7bc>)
 8006dbe:	f043 0301 	orr.w	r3, r3, #1
 8006dc2:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006dc4:	f7fb f8b4 	bl	8001f30 <HAL_GetTick>
 8006dc8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006dca:	e008      	b.n	8006dde <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dcc:	f7fb f8b0 	bl	8001f30 <HAL_GetTick>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d901      	bls.n	8006dde <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8006dda:	2303      	movs	r3, #3
 8006ddc:	e347      	b.n	800746e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006dde:	4b28      	ldr	r3, [pc, #160]	@ (8006e80 <HAL_RCC_OscConfig+0x7bc>)
 8006de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006de2:	f003 0301 	and.w	r3, r3, #1
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d0f0      	beq.n	8006dcc <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	f003 0301 	and.w	r3, r3, #1
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d01f      	beq.n	8006e36 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	f003 0304 	and.w	r3, r3, #4
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d010      	beq.n	8006e24 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006e02:	4b1e      	ldr	r3, [pc, #120]	@ (8006e7c <HAL_RCC_OscConfig+0x7b8>)
 8006e04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e08:	4a1c      	ldr	r2, [pc, #112]	@ (8006e7c <HAL_RCC_OscConfig+0x7b8>)
 8006e0a:	f043 0304 	orr.w	r3, r3, #4
 8006e0e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006e12:	4b1a      	ldr	r3, [pc, #104]	@ (8006e7c <HAL_RCC_OscConfig+0x7b8>)
 8006e14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e18:	4a18      	ldr	r2, [pc, #96]	@ (8006e7c <HAL_RCC_OscConfig+0x7b8>)
 8006e1a:	f043 0301 	orr.w	r3, r3, #1
 8006e1e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006e22:	e018      	b.n	8006e56 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006e24:	4b15      	ldr	r3, [pc, #84]	@ (8006e7c <HAL_RCC_OscConfig+0x7b8>)
 8006e26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e2a:	4a14      	ldr	r2, [pc, #80]	@ (8006e7c <HAL_RCC_OscConfig+0x7b8>)
 8006e2c:	f043 0301 	orr.w	r3, r3, #1
 8006e30:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006e34:	e00f      	b.n	8006e56 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006e36:	4b11      	ldr	r3, [pc, #68]	@ (8006e7c <HAL_RCC_OscConfig+0x7b8>)
 8006e38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e3c:	4a0f      	ldr	r2, [pc, #60]	@ (8006e7c <HAL_RCC_OscConfig+0x7b8>)
 8006e3e:	f023 0301 	bic.w	r3, r3, #1
 8006e42:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006e46:	4b0d      	ldr	r3, [pc, #52]	@ (8006e7c <HAL_RCC_OscConfig+0x7b8>)
 8006e48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e4c:	4a0b      	ldr	r2, [pc, #44]	@ (8006e7c <HAL_RCC_OscConfig+0x7b8>)
 8006e4e:	f023 0304 	bic.w	r3, r3, #4
 8006e52:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d057      	beq.n	8006f0e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8006e5e:	f7fb f867 	bl	8001f30 <HAL_GetTick>
 8006e62:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e64:	e00e      	b.n	8006e84 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e66:	f7fb f863 	bl	8001f30 <HAL_GetTick>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e6e:	1ad3      	subs	r3, r2, r3
 8006e70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d905      	bls.n	8006e84 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8006e78:	2303      	movs	r3, #3
 8006e7a:	e2f8      	b.n	800746e <HAL_RCC_OscConfig+0xdaa>
 8006e7c:	46020c00 	.word	0x46020c00
 8006e80:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e84:	4b9c      	ldr	r3, [pc, #624]	@ (80070f8 <HAL_RCC_OscConfig+0xa34>)
 8006e86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e8a:	f003 0302 	and.w	r3, r3, #2
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d0e9      	beq.n	8006e66 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d01b      	beq.n	8006ed6 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006e9e:	4b96      	ldr	r3, [pc, #600]	@ (80070f8 <HAL_RCC_OscConfig+0xa34>)
 8006ea0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ea4:	4a94      	ldr	r2, [pc, #592]	@ (80070f8 <HAL_RCC_OscConfig+0xa34>)
 8006ea6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006eaa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006eae:	e00a      	b.n	8006ec6 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006eb0:	f7fb f83e 	bl	8001f30 <HAL_GetTick>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d901      	bls.n	8006ec6 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8006ec2:	2303      	movs	r3, #3
 8006ec4:	e2d3      	b.n	800746e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006ec6:	4b8c      	ldr	r3, [pc, #560]	@ (80070f8 <HAL_RCC_OscConfig+0xa34>)
 8006ec8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ecc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d0ed      	beq.n	8006eb0 <HAL_RCC_OscConfig+0x7ec>
 8006ed4:	e053      	b.n	8006f7e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006ed6:	4b88      	ldr	r3, [pc, #544]	@ (80070f8 <HAL_RCC_OscConfig+0xa34>)
 8006ed8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006edc:	4a86      	ldr	r2, [pc, #536]	@ (80070f8 <HAL_RCC_OscConfig+0xa34>)
 8006ede:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ee2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006ee6:	e00a      	b.n	8006efe <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ee8:	f7fb f822 	bl	8001f30 <HAL_GetTick>
 8006eec:	4602      	mov	r2, r0
 8006eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d901      	bls.n	8006efe <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8006efa:	2303      	movs	r3, #3
 8006efc:	e2b7      	b.n	800746e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006efe:	4b7e      	ldr	r3, [pc, #504]	@ (80070f8 <HAL_RCC_OscConfig+0xa34>)
 8006f00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d1ed      	bne.n	8006ee8 <HAL_RCC_OscConfig+0x824>
 8006f0c:	e037      	b.n	8006f7e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8006f0e:	f7fb f80f 	bl	8001f30 <HAL_GetTick>
 8006f12:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006f14:	e00a      	b.n	8006f2c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f16:	f7fb f80b 	bl	8001f30 <HAL_GetTick>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f1e:	1ad3      	subs	r3, r2, r3
 8006f20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d901      	bls.n	8006f2c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8006f28:	2303      	movs	r3, #3
 8006f2a:	e2a0      	b.n	800746e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006f2c:	4b72      	ldr	r3, [pc, #456]	@ (80070f8 <HAL_RCC_OscConfig+0xa34>)
 8006f2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f32:	f003 0302 	and.w	r3, r3, #2
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d1ed      	bne.n	8006f16 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8006f3a:	4b6f      	ldr	r3, [pc, #444]	@ (80070f8 <HAL_RCC_OscConfig+0xa34>)
 8006f3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d01a      	beq.n	8006f7e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006f48:	4b6b      	ldr	r3, [pc, #428]	@ (80070f8 <HAL_RCC_OscConfig+0xa34>)
 8006f4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f4e:	4a6a      	ldr	r2, [pc, #424]	@ (80070f8 <HAL_RCC_OscConfig+0xa34>)
 8006f50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f54:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006f58:	e00a      	b.n	8006f70 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f5a:	f7fa ffe9 	bl	8001f30 <HAL_GetTick>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f62:	1ad3      	subs	r3, r2, r3
 8006f64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d901      	bls.n	8006f70 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8006f6c:	2303      	movs	r3, #3
 8006f6e:	e27e      	b.n	800746e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006f70:	4b61      	ldr	r3, [pc, #388]	@ (80070f8 <HAL_RCC_OscConfig+0xa34>)
 8006f72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1ed      	bne.n	8006f5a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006f7e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d107      	bne.n	8006f96 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f86:	4b5c      	ldr	r3, [pc, #368]	@ (80070f8 <HAL_RCC_OscConfig+0xa34>)
 8006f88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f8c:	4a5a      	ldr	r2, [pc, #360]	@ (80070f8 <HAL_RCC_OscConfig+0xa34>)
 8006f8e:	f023 0304 	bic.w	r3, r3, #4
 8006f92:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 0320 	and.w	r3, r3, #32
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d036      	beq.n	8007010 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d019      	beq.n	8006fde <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8006faa:	4b53      	ldr	r3, [pc, #332]	@ (80070f8 <HAL_RCC_OscConfig+0xa34>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a52      	ldr	r2, [pc, #328]	@ (80070f8 <HAL_RCC_OscConfig+0xa34>)
 8006fb0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006fb4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006fb6:	f7fa ffbb 	bl	8001f30 <HAL_GetTick>
 8006fba:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006fbc:	e008      	b.n	8006fd0 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006fbe:	f7fa ffb7 	bl	8001f30 <HAL_GetTick>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fc6:	1ad3      	subs	r3, r2, r3
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	d901      	bls.n	8006fd0 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8006fcc:	2303      	movs	r3, #3
 8006fce:	e24e      	b.n	800746e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006fd0:	4b49      	ldr	r3, [pc, #292]	@ (80070f8 <HAL_RCC_OscConfig+0xa34>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d0f0      	beq.n	8006fbe <HAL_RCC_OscConfig+0x8fa>
 8006fdc:	e018      	b.n	8007010 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8006fde:	4b46      	ldr	r3, [pc, #280]	@ (80070f8 <HAL_RCC_OscConfig+0xa34>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a45      	ldr	r2, [pc, #276]	@ (80070f8 <HAL_RCC_OscConfig+0xa34>)
 8006fe4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006fe8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006fea:	f7fa ffa1 	bl	8001f30 <HAL_GetTick>
 8006fee:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006ff0:	e008      	b.n	8007004 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006ff2:	f7fa ff9d 	bl	8001f30 <HAL_GetTick>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ffa:	1ad3      	subs	r3, r2, r3
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	d901      	bls.n	8007004 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8007000:	2303      	movs	r3, #3
 8007002:	e234      	b.n	800746e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8007004:	4b3c      	ldr	r3, [pc, #240]	@ (80070f8 <HAL_RCC_OscConfig+0xa34>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800700c:	2b00      	cmp	r3, #0
 800700e:	d1f0      	bne.n	8006ff2 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007018:	2b00      	cmp	r3, #0
 800701a:	d036      	beq.n	800708a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007020:	2b00      	cmp	r3, #0
 8007022:	d019      	beq.n	8007058 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8007024:	4b34      	ldr	r3, [pc, #208]	@ (80070f8 <HAL_RCC_OscConfig+0xa34>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a33      	ldr	r2, [pc, #204]	@ (80070f8 <HAL_RCC_OscConfig+0xa34>)
 800702a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800702e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007030:	f7fa ff7e 	bl	8001f30 <HAL_GetTick>
 8007034:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8007036:	e008      	b.n	800704a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8007038:	f7fa ff7a 	bl	8001f30 <HAL_GetTick>
 800703c:	4602      	mov	r2, r0
 800703e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007040:	1ad3      	subs	r3, r2, r3
 8007042:	2b02      	cmp	r3, #2
 8007044:	d901      	bls.n	800704a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8007046:	2303      	movs	r3, #3
 8007048:	e211      	b.n	800746e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800704a:	4b2b      	ldr	r3, [pc, #172]	@ (80070f8 <HAL_RCC_OscConfig+0xa34>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007052:	2b00      	cmp	r3, #0
 8007054:	d0f0      	beq.n	8007038 <HAL_RCC_OscConfig+0x974>
 8007056:	e018      	b.n	800708a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8007058:	4b27      	ldr	r3, [pc, #156]	@ (80070f8 <HAL_RCC_OscConfig+0xa34>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a26      	ldr	r2, [pc, #152]	@ (80070f8 <HAL_RCC_OscConfig+0xa34>)
 800705e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007062:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007064:	f7fa ff64 	bl	8001f30 <HAL_GetTick>
 8007068:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800706a:	e008      	b.n	800707e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800706c:	f7fa ff60 	bl	8001f30 <HAL_GetTick>
 8007070:	4602      	mov	r2, r0
 8007072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007074:	1ad3      	subs	r3, r2, r3
 8007076:	2b02      	cmp	r3, #2
 8007078:	d901      	bls.n	800707e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800707a:	2303      	movs	r3, #3
 800707c:	e1f7      	b.n	800746e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800707e:	4b1e      	ldr	r3, [pc, #120]	@ (80070f8 <HAL_RCC_OscConfig+0xa34>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007086:	2b00      	cmp	r3, #0
 8007088:	d1f0      	bne.n	800706c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007092:	2b00      	cmp	r3, #0
 8007094:	d07f      	beq.n	8007196 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800709a:	2b00      	cmp	r3, #0
 800709c:	d062      	beq.n	8007164 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800709e:	4b16      	ldr	r3, [pc, #88]	@ (80070f8 <HAL_RCC_OscConfig+0xa34>)
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	4a15      	ldr	r2, [pc, #84]	@ (80070f8 <HAL_RCC_OscConfig+0xa34>)
 80070a4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80070a8:	6093      	str	r3, [r2, #8]
 80070aa:	4b13      	ldr	r3, [pc, #76]	@ (80070f8 <HAL_RCC_OscConfig+0xa34>)
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070b6:	4910      	ldr	r1, [pc, #64]	@ (80070f8 <HAL_RCC_OscConfig+0xa34>)
 80070b8:	4313      	orrs	r3, r2
 80070ba:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070c0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80070c4:	d309      	bcc.n	80070da <HAL_RCC_OscConfig+0xa16>
 80070c6:	4b0c      	ldr	r3, [pc, #48]	@ (80070f8 <HAL_RCC_OscConfig+0xa34>)
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	f023 021f 	bic.w	r2, r3, #31
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a1b      	ldr	r3, [r3, #32]
 80070d2:	4909      	ldr	r1, [pc, #36]	@ (80070f8 <HAL_RCC_OscConfig+0xa34>)
 80070d4:	4313      	orrs	r3, r2
 80070d6:	60cb      	str	r3, [r1, #12]
 80070d8:	e02a      	b.n	8007130 <HAL_RCC_OscConfig+0xa6c>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070de:	2b00      	cmp	r3, #0
 80070e0:	da0c      	bge.n	80070fc <HAL_RCC_OscConfig+0xa38>
 80070e2:	4b05      	ldr	r3, [pc, #20]	@ (80070f8 <HAL_RCC_OscConfig+0xa34>)
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a1b      	ldr	r3, [r3, #32]
 80070ee:	015b      	lsls	r3, r3, #5
 80070f0:	4901      	ldr	r1, [pc, #4]	@ (80070f8 <HAL_RCC_OscConfig+0xa34>)
 80070f2:	4313      	orrs	r3, r2
 80070f4:	60cb      	str	r3, [r1, #12]
 80070f6:	e01b      	b.n	8007130 <HAL_RCC_OscConfig+0xa6c>
 80070f8:	46020c00 	.word	0x46020c00
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007100:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007104:	d30a      	bcc.n	800711c <HAL_RCC_OscConfig+0xa58>
 8007106:	4ba1      	ldr	r3, [pc, #644]	@ (800738c <HAL_RCC_OscConfig+0xcc8>)
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6a1b      	ldr	r3, [r3, #32]
 8007112:	029b      	lsls	r3, r3, #10
 8007114:	499d      	ldr	r1, [pc, #628]	@ (800738c <HAL_RCC_OscConfig+0xcc8>)
 8007116:	4313      	orrs	r3, r2
 8007118:	60cb      	str	r3, [r1, #12]
 800711a:	e009      	b.n	8007130 <HAL_RCC_OscConfig+0xa6c>
 800711c:	4b9b      	ldr	r3, [pc, #620]	@ (800738c <HAL_RCC_OscConfig+0xcc8>)
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6a1b      	ldr	r3, [r3, #32]
 8007128:	03db      	lsls	r3, r3, #15
 800712a:	4998      	ldr	r1, [pc, #608]	@ (800738c <HAL_RCC_OscConfig+0xcc8>)
 800712c:	4313      	orrs	r3, r2
 800712e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8007130:	4b96      	ldr	r3, [pc, #600]	@ (800738c <HAL_RCC_OscConfig+0xcc8>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a95      	ldr	r2, [pc, #596]	@ (800738c <HAL_RCC_OscConfig+0xcc8>)
 8007136:	f043 0310 	orr.w	r3, r3, #16
 800713a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800713c:	f7fa fef8 	bl	8001f30 <HAL_GetTick>
 8007140:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8007142:	e008      	b.n	8007156 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8007144:	f7fa fef4 	bl	8001f30 <HAL_GetTick>
 8007148:	4602      	mov	r2, r0
 800714a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800714c:	1ad3      	subs	r3, r2, r3
 800714e:	2b02      	cmp	r3, #2
 8007150:	d901      	bls.n	8007156 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8007152:	2303      	movs	r3, #3
 8007154:	e18b      	b.n	800746e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8007156:	4b8d      	ldr	r3, [pc, #564]	@ (800738c <HAL_RCC_OscConfig+0xcc8>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f003 0320 	and.w	r3, r3, #32
 800715e:	2b00      	cmp	r3, #0
 8007160:	d0f0      	beq.n	8007144 <HAL_RCC_OscConfig+0xa80>
 8007162:	e018      	b.n	8007196 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8007164:	4b89      	ldr	r3, [pc, #548]	@ (800738c <HAL_RCC_OscConfig+0xcc8>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a88      	ldr	r2, [pc, #544]	@ (800738c <HAL_RCC_OscConfig+0xcc8>)
 800716a:	f023 0310 	bic.w	r3, r3, #16
 800716e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007170:	f7fa fede 	bl	8001f30 <HAL_GetTick>
 8007174:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8007176:	e008      	b.n	800718a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8007178:	f7fa feda 	bl	8001f30 <HAL_GetTick>
 800717c:	4602      	mov	r2, r0
 800717e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	2b02      	cmp	r3, #2
 8007184:	d901      	bls.n	800718a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8007186:	2303      	movs	r3, #3
 8007188:	e171      	b.n	800746e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800718a:	4b80      	ldr	r3, [pc, #512]	@ (800738c <HAL_RCC_OscConfig+0xcc8>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f003 0320 	and.w	r3, r3, #32
 8007192:	2b00      	cmp	r3, #0
 8007194:	d1f0      	bne.n	8007178 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800719a:	2b00      	cmp	r3, #0
 800719c:	f000 8166 	beq.w	800746c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80071a0:	2300      	movs	r3, #0
 80071a2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80071a6:	4b79      	ldr	r3, [pc, #484]	@ (800738c <HAL_RCC_OscConfig+0xcc8>)
 80071a8:	69db      	ldr	r3, [r3, #28]
 80071aa:	f003 030c 	and.w	r3, r3, #12
 80071ae:	2b0c      	cmp	r3, #12
 80071b0:	f000 80f2 	beq.w	8007398 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071b8:	2b02      	cmp	r3, #2
 80071ba:	f040 80c5 	bne.w	8007348 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80071be:	4b73      	ldr	r3, [pc, #460]	@ (800738c <HAL_RCC_OscConfig+0xcc8>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a72      	ldr	r2, [pc, #456]	@ (800738c <HAL_RCC_OscConfig+0xcc8>)
 80071c4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80071c8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80071ca:	f7fa feb1 	bl	8001f30 <HAL_GetTick>
 80071ce:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80071d0:	e008      	b.n	80071e4 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071d2:	f7fa fead 	bl	8001f30 <HAL_GetTick>
 80071d6:	4602      	mov	r2, r0
 80071d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071da:	1ad3      	subs	r3, r2, r3
 80071dc:	2b02      	cmp	r3, #2
 80071de:	d901      	bls.n	80071e4 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80071e0:	2303      	movs	r3, #3
 80071e2:	e144      	b.n	800746e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80071e4:	4b69      	ldr	r3, [pc, #420]	@ (800738c <HAL_RCC_OscConfig+0xcc8>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d1f0      	bne.n	80071d2 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80071f0:	4b66      	ldr	r3, [pc, #408]	@ (800738c <HAL_RCC_OscConfig+0xcc8>)
 80071f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071f6:	f003 0304 	and.w	r3, r3, #4
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d111      	bne.n	8007222 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80071fe:	4b63      	ldr	r3, [pc, #396]	@ (800738c <HAL_RCC_OscConfig+0xcc8>)
 8007200:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007204:	4a61      	ldr	r2, [pc, #388]	@ (800738c <HAL_RCC_OscConfig+0xcc8>)
 8007206:	f043 0304 	orr.w	r3, r3, #4
 800720a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800720e:	4b5f      	ldr	r3, [pc, #380]	@ (800738c <HAL_RCC_OscConfig+0xcc8>)
 8007210:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007214:	f003 0304 	and.w	r3, r3, #4
 8007218:	60fb      	str	r3, [r7, #12]
 800721a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800721c:	2301      	movs	r3, #1
 800721e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8007222:	4b5b      	ldr	r3, [pc, #364]	@ (8007390 <HAL_RCC_OscConfig+0xccc>)
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800722a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800722e:	d102      	bne.n	8007236 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8007230:	2301      	movs	r3, #1
 8007232:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8007236:	4b56      	ldr	r3, [pc, #344]	@ (8007390 <HAL_RCC_OscConfig+0xccc>)
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	4a55      	ldr	r2, [pc, #340]	@ (8007390 <HAL_RCC_OscConfig+0xccc>)
 800723c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007240:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8007242:	4b52      	ldr	r3, [pc, #328]	@ (800738c <HAL_RCC_OscConfig+0xcc8>)
 8007244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007246:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800724a:	f023 0303 	bic.w	r3, r3, #3
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8007256:	3a01      	subs	r2, #1
 8007258:	0212      	lsls	r2, r2, #8
 800725a:	4311      	orrs	r1, r2
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007260:	430a      	orrs	r2, r1
 8007262:	494a      	ldr	r1, [pc, #296]	@ (800738c <HAL_RCC_OscConfig+0xcc8>)
 8007264:	4313      	orrs	r3, r2
 8007266:	628b      	str	r3, [r1, #40]	@ 0x28
 8007268:	4b48      	ldr	r3, [pc, #288]	@ (800738c <HAL_RCC_OscConfig+0xcc8>)
 800726a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800726c:	4b49      	ldr	r3, [pc, #292]	@ (8007394 <HAL_RCC_OscConfig+0xcd0>)
 800726e:	4013      	ands	r3, r2
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007274:	3a01      	subs	r2, #1
 8007276:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800727e:	3a01      	subs	r2, #1
 8007280:	0252      	lsls	r2, r2, #9
 8007282:	b292      	uxth	r2, r2
 8007284:	4311      	orrs	r1, r2
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800728a:	3a01      	subs	r2, #1
 800728c:	0412      	lsls	r2, r2, #16
 800728e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007292:	4311      	orrs	r1, r2
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007298:	3a01      	subs	r2, #1
 800729a:	0612      	lsls	r2, r2, #24
 800729c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80072a0:	430a      	orrs	r2, r1
 80072a2:	493a      	ldr	r1, [pc, #232]	@ (800738c <HAL_RCC_OscConfig+0xcc8>)
 80072a4:	4313      	orrs	r3, r2
 80072a6:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80072a8:	4b38      	ldr	r3, [pc, #224]	@ (800738c <HAL_RCC_OscConfig+0xcc8>)
 80072aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072ac:	4a37      	ldr	r2, [pc, #220]	@ (800738c <HAL_RCC_OscConfig+0xcc8>)
 80072ae:	f023 0310 	bic.w	r3, r3, #16
 80072b2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072b8:	4a34      	ldr	r2, [pc, #208]	@ (800738c <HAL_RCC_OscConfig+0xcc8>)
 80072ba:	00db      	lsls	r3, r3, #3
 80072bc:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80072be:	4b33      	ldr	r3, [pc, #204]	@ (800738c <HAL_RCC_OscConfig+0xcc8>)
 80072c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072c2:	4a32      	ldr	r2, [pc, #200]	@ (800738c <HAL_RCC_OscConfig+0xcc8>)
 80072c4:	f043 0310 	orr.w	r3, r3, #16
 80072c8:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80072ca:	4b30      	ldr	r3, [pc, #192]	@ (800738c <HAL_RCC_OscConfig+0xcc8>)
 80072cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072ce:	f023 020c 	bic.w	r2, r3, #12
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072d6:	492d      	ldr	r1, [pc, #180]	@ (800738c <HAL_RCC_OscConfig+0xcc8>)
 80072d8:	4313      	orrs	r3, r2
 80072da:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 80072dc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d105      	bne.n	80072f0 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80072e4:	4b2a      	ldr	r3, [pc, #168]	@ (8007390 <HAL_RCC_OscConfig+0xccc>)
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	4a29      	ldr	r2, [pc, #164]	@ (8007390 <HAL_RCC_OscConfig+0xccc>)
 80072ea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80072ee:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80072f0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d107      	bne.n	8007308 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80072f8:	4b24      	ldr	r3, [pc, #144]	@ (800738c <HAL_RCC_OscConfig+0xcc8>)
 80072fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80072fe:	4a23      	ldr	r2, [pc, #140]	@ (800738c <HAL_RCC_OscConfig+0xcc8>)
 8007300:	f023 0304 	bic.w	r3, r3, #4
 8007304:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8007308:	4b20      	ldr	r3, [pc, #128]	@ (800738c <HAL_RCC_OscConfig+0xcc8>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a1f      	ldr	r2, [pc, #124]	@ (800738c <HAL_RCC_OscConfig+0xcc8>)
 800730e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007312:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007314:	f7fa fe0c 	bl	8001f30 <HAL_GetTick>
 8007318:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800731a:	e008      	b.n	800732e <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800731c:	f7fa fe08 	bl	8001f30 <HAL_GetTick>
 8007320:	4602      	mov	r2, r0
 8007322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007324:	1ad3      	subs	r3, r2, r3
 8007326:	2b02      	cmp	r3, #2
 8007328:	d901      	bls.n	800732e <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800732a:	2303      	movs	r3, #3
 800732c:	e09f      	b.n	800746e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800732e:	4b17      	ldr	r3, [pc, #92]	@ (800738c <HAL_RCC_OscConfig+0xcc8>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007336:	2b00      	cmp	r3, #0
 8007338:	d0f0      	beq.n	800731c <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800733a:	4b14      	ldr	r3, [pc, #80]	@ (800738c <HAL_RCC_OscConfig+0xcc8>)
 800733c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800733e:	4a13      	ldr	r2, [pc, #76]	@ (800738c <HAL_RCC_OscConfig+0xcc8>)
 8007340:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007344:	6293      	str	r3, [r2, #40]	@ 0x28
 8007346:	e091      	b.n	800746c <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8007348:	4b10      	ldr	r3, [pc, #64]	@ (800738c <HAL_RCC_OscConfig+0xcc8>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a0f      	ldr	r2, [pc, #60]	@ (800738c <HAL_RCC_OscConfig+0xcc8>)
 800734e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007352:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007354:	f7fa fdec 	bl	8001f30 <HAL_GetTick>
 8007358:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800735a:	e008      	b.n	800736e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800735c:	f7fa fde8 	bl	8001f30 <HAL_GetTick>
 8007360:	4602      	mov	r2, r0
 8007362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007364:	1ad3      	subs	r3, r2, r3
 8007366:	2b02      	cmp	r3, #2
 8007368:	d901      	bls.n	800736e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800736a:	2303      	movs	r3, #3
 800736c:	e07f      	b.n	800746e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800736e:	4b07      	ldr	r3, [pc, #28]	@ (800738c <HAL_RCC_OscConfig+0xcc8>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007376:	2b00      	cmp	r3, #0
 8007378:	d1f0      	bne.n	800735c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800737a:	4b04      	ldr	r3, [pc, #16]	@ (800738c <HAL_RCC_OscConfig+0xcc8>)
 800737c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800737e:	4a03      	ldr	r2, [pc, #12]	@ (800738c <HAL_RCC_OscConfig+0xcc8>)
 8007380:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8007384:	f023 0303 	bic.w	r3, r3, #3
 8007388:	6293      	str	r3, [r2, #40]	@ 0x28
 800738a:	e06f      	b.n	800746c <HAL_RCC_OscConfig+0xda8>
 800738c:	46020c00 	.word	0x46020c00
 8007390:	46020800 	.word	0x46020800
 8007394:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8007398:	4b37      	ldr	r3, [pc, #220]	@ (8007478 <HAL_RCC_OscConfig+0xdb4>)
 800739a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800739c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800739e:	4b36      	ldr	r3, [pc, #216]	@ (8007478 <HAL_RCC_OscConfig+0xdb4>)
 80073a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073a2:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d039      	beq.n	8007420 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80073ac:	69fb      	ldr	r3, [r7, #28]
 80073ae:	f003 0203 	and.w	r2, r3, #3
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d132      	bne.n	8007420 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80073ba:	69fb      	ldr	r3, [r7, #28]
 80073bc:	0a1b      	lsrs	r3, r3, #8
 80073be:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073c6:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d129      	bne.n	8007420 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80073cc:	69fb      	ldr	r3, [r7, #28]
 80073ce:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d122      	bne.n	8007420 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073e4:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d11a      	bne.n	8007420 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	0a5b      	lsrs	r3, r3, #9
 80073ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073f6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d111      	bne.n	8007420 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80073fc:	69bb      	ldr	r3, [r7, #24]
 80073fe:	0c1b      	lsrs	r3, r3, #16
 8007400:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007408:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800740a:	429a      	cmp	r2, r3
 800740c:	d108      	bne.n	8007420 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800740e:	69bb      	ldr	r3, [r7, #24]
 8007410:	0e1b      	lsrs	r3, r3, #24
 8007412:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800741a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800741c:	429a      	cmp	r2, r3
 800741e:	d001      	beq.n	8007424 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	e024      	b.n	800746e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8007424:	4b14      	ldr	r3, [pc, #80]	@ (8007478 <HAL_RCC_OscConfig+0xdb4>)
 8007426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007428:	08db      	lsrs	r3, r3, #3
 800742a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8007432:	429a      	cmp	r2, r3
 8007434:	d01a      	beq.n	800746c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8007436:	4b10      	ldr	r3, [pc, #64]	@ (8007478 <HAL_RCC_OscConfig+0xdb4>)
 8007438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800743a:	4a0f      	ldr	r2, [pc, #60]	@ (8007478 <HAL_RCC_OscConfig+0xdb4>)
 800743c:	f023 0310 	bic.w	r3, r3, #16
 8007440:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007442:	f7fa fd75 	bl	8001f30 <HAL_GetTick>
 8007446:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8007448:	bf00      	nop
 800744a:	f7fa fd71 	bl	8001f30 <HAL_GetTick>
 800744e:	4602      	mov	r2, r0
 8007450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007452:	4293      	cmp	r3, r2
 8007454:	d0f9      	beq.n	800744a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800745a:	4a07      	ldr	r2, [pc, #28]	@ (8007478 <HAL_RCC_OscConfig+0xdb4>)
 800745c:	00db      	lsls	r3, r3, #3
 800745e:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8007460:	4b05      	ldr	r3, [pc, #20]	@ (8007478 <HAL_RCC_OscConfig+0xdb4>)
 8007462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007464:	4a04      	ldr	r2, [pc, #16]	@ (8007478 <HAL_RCC_OscConfig+0xdb4>)
 8007466:	f043 0310 	orr.w	r3, r3, #16
 800746a:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	3738      	adds	r7, #56	@ 0x38
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	46020c00 	.word	0x46020c00

0800747c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b086      	sub	sp, #24
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d101      	bne.n	8007490 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	e1d9      	b.n	8007844 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007490:	4b9b      	ldr	r3, [pc, #620]	@ (8007700 <HAL_RCC_ClockConfig+0x284>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 030f 	and.w	r3, r3, #15
 8007498:	683a      	ldr	r2, [r7, #0]
 800749a:	429a      	cmp	r2, r3
 800749c:	d910      	bls.n	80074c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800749e:	4b98      	ldr	r3, [pc, #608]	@ (8007700 <HAL_RCC_ClockConfig+0x284>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f023 020f 	bic.w	r2, r3, #15
 80074a6:	4996      	ldr	r1, [pc, #600]	@ (8007700 <HAL_RCC_ClockConfig+0x284>)
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074ae:	4b94      	ldr	r3, [pc, #592]	@ (8007700 <HAL_RCC_ClockConfig+0x284>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f003 030f 	and.w	r3, r3, #15
 80074b6:	683a      	ldr	r2, [r7, #0]
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d001      	beq.n	80074c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80074bc:	2301      	movs	r3, #1
 80074be:	e1c1      	b.n	8007844 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f003 0310 	and.w	r3, r3, #16
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d010      	beq.n	80074ee <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	695a      	ldr	r2, [r3, #20]
 80074d0:	4b8c      	ldr	r3, [pc, #560]	@ (8007704 <HAL_RCC_ClockConfig+0x288>)
 80074d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074d4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80074d8:	429a      	cmp	r2, r3
 80074da:	d908      	bls.n	80074ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80074dc:	4b89      	ldr	r3, [pc, #548]	@ (8007704 <HAL_RCC_ClockConfig+0x288>)
 80074de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074e0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	695b      	ldr	r3, [r3, #20]
 80074e8:	4986      	ldr	r1, [pc, #536]	@ (8007704 <HAL_RCC_ClockConfig+0x288>)
 80074ea:	4313      	orrs	r3, r2
 80074ec:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 0308 	and.w	r3, r3, #8
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d012      	beq.n	8007520 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	691a      	ldr	r2, [r3, #16]
 80074fe:	4b81      	ldr	r3, [pc, #516]	@ (8007704 <HAL_RCC_ClockConfig+0x288>)
 8007500:	6a1b      	ldr	r3, [r3, #32]
 8007502:	091b      	lsrs	r3, r3, #4
 8007504:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007508:	429a      	cmp	r2, r3
 800750a:	d909      	bls.n	8007520 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800750c:	4b7d      	ldr	r3, [pc, #500]	@ (8007704 <HAL_RCC_ClockConfig+0x288>)
 800750e:	6a1b      	ldr	r3, [r3, #32]
 8007510:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	691b      	ldr	r3, [r3, #16]
 8007518:	011b      	lsls	r3, r3, #4
 800751a:	497a      	ldr	r1, [pc, #488]	@ (8007704 <HAL_RCC_ClockConfig+0x288>)
 800751c:	4313      	orrs	r3, r2
 800751e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 0304 	and.w	r3, r3, #4
 8007528:	2b00      	cmp	r3, #0
 800752a:	d010      	beq.n	800754e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	68da      	ldr	r2, [r3, #12]
 8007530:	4b74      	ldr	r3, [pc, #464]	@ (8007704 <HAL_RCC_ClockConfig+0x288>)
 8007532:	6a1b      	ldr	r3, [r3, #32]
 8007534:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007538:	429a      	cmp	r2, r3
 800753a:	d908      	bls.n	800754e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800753c:	4b71      	ldr	r3, [pc, #452]	@ (8007704 <HAL_RCC_ClockConfig+0x288>)
 800753e:	6a1b      	ldr	r3, [r3, #32]
 8007540:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	496e      	ldr	r1, [pc, #440]	@ (8007704 <HAL_RCC_ClockConfig+0x288>)
 800754a:	4313      	orrs	r3, r2
 800754c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f003 0302 	and.w	r3, r3, #2
 8007556:	2b00      	cmp	r3, #0
 8007558:	d010      	beq.n	800757c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	689a      	ldr	r2, [r3, #8]
 800755e:	4b69      	ldr	r3, [pc, #420]	@ (8007704 <HAL_RCC_ClockConfig+0x288>)
 8007560:	6a1b      	ldr	r3, [r3, #32]
 8007562:	f003 030f 	and.w	r3, r3, #15
 8007566:	429a      	cmp	r2, r3
 8007568:	d908      	bls.n	800757c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800756a:	4b66      	ldr	r3, [pc, #408]	@ (8007704 <HAL_RCC_ClockConfig+0x288>)
 800756c:	6a1b      	ldr	r3, [r3, #32]
 800756e:	f023 020f 	bic.w	r2, r3, #15
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	4963      	ldr	r1, [pc, #396]	@ (8007704 <HAL_RCC_ClockConfig+0x288>)
 8007578:	4313      	orrs	r3, r2
 800757a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f003 0301 	and.w	r3, r3, #1
 8007584:	2b00      	cmp	r3, #0
 8007586:	f000 80d2 	beq.w	800772e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800758a:	2300      	movs	r3, #0
 800758c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	2b03      	cmp	r3, #3
 8007594:	d143      	bne.n	800761e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007596:	4b5b      	ldr	r3, [pc, #364]	@ (8007704 <HAL_RCC_ClockConfig+0x288>)
 8007598:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800759c:	f003 0304 	and.w	r3, r3, #4
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d110      	bne.n	80075c6 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80075a4:	4b57      	ldr	r3, [pc, #348]	@ (8007704 <HAL_RCC_ClockConfig+0x288>)
 80075a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075aa:	4a56      	ldr	r2, [pc, #344]	@ (8007704 <HAL_RCC_ClockConfig+0x288>)
 80075ac:	f043 0304 	orr.w	r3, r3, #4
 80075b0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80075b4:	4b53      	ldr	r3, [pc, #332]	@ (8007704 <HAL_RCC_ClockConfig+0x288>)
 80075b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075ba:	f003 0304 	and.w	r3, r3, #4
 80075be:	60bb      	str	r3, [r7, #8]
 80075c0:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80075c2:	2301      	movs	r3, #1
 80075c4:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80075c6:	f7fa fcb3 	bl	8001f30 <HAL_GetTick>
 80075ca:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80075cc:	4b4e      	ldr	r3, [pc, #312]	@ (8007708 <HAL_RCC_ClockConfig+0x28c>)
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d00f      	beq.n	80075f8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80075d8:	e008      	b.n	80075ec <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80075da:	f7fa fca9 	bl	8001f30 <HAL_GetTick>
 80075de:	4602      	mov	r2, r0
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	1ad3      	subs	r3, r2, r3
 80075e4:	2b02      	cmp	r3, #2
 80075e6:	d901      	bls.n	80075ec <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80075e8:	2303      	movs	r3, #3
 80075ea:	e12b      	b.n	8007844 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80075ec:	4b46      	ldr	r3, [pc, #280]	@ (8007708 <HAL_RCC_ClockConfig+0x28c>)
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d0f0      	beq.n	80075da <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80075f8:	7dfb      	ldrb	r3, [r7, #23]
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d107      	bne.n	800760e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80075fe:	4b41      	ldr	r3, [pc, #260]	@ (8007704 <HAL_RCC_ClockConfig+0x288>)
 8007600:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007604:	4a3f      	ldr	r2, [pc, #252]	@ (8007704 <HAL_RCC_ClockConfig+0x288>)
 8007606:	f023 0304 	bic.w	r3, r3, #4
 800760a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800760e:	4b3d      	ldr	r3, [pc, #244]	@ (8007704 <HAL_RCC_ClockConfig+0x288>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007616:	2b00      	cmp	r3, #0
 8007618:	d121      	bne.n	800765e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	e112      	b.n	8007844 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	2b02      	cmp	r3, #2
 8007624:	d107      	bne.n	8007636 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007626:	4b37      	ldr	r3, [pc, #220]	@ (8007704 <HAL_RCC_ClockConfig+0x288>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800762e:	2b00      	cmp	r3, #0
 8007630:	d115      	bne.n	800765e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	e106      	b.n	8007844 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d107      	bne.n	800764e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800763e:	4b31      	ldr	r3, [pc, #196]	@ (8007704 <HAL_RCC_ClockConfig+0x288>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 0304 	and.w	r3, r3, #4
 8007646:	2b00      	cmp	r3, #0
 8007648:	d109      	bne.n	800765e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	e0fa      	b.n	8007844 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800764e:	4b2d      	ldr	r3, [pc, #180]	@ (8007704 <HAL_RCC_ClockConfig+0x288>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007656:	2b00      	cmp	r3, #0
 8007658:	d101      	bne.n	800765e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	e0f2      	b.n	8007844 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800765e:	4b29      	ldr	r3, [pc, #164]	@ (8007704 <HAL_RCC_ClockConfig+0x288>)
 8007660:	69db      	ldr	r3, [r3, #28]
 8007662:	f023 0203 	bic.w	r2, r3, #3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	4926      	ldr	r1, [pc, #152]	@ (8007704 <HAL_RCC_ClockConfig+0x288>)
 800766c:	4313      	orrs	r3, r2
 800766e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8007670:	f7fa fc5e 	bl	8001f30 <HAL_GetTick>
 8007674:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	2b03      	cmp	r3, #3
 800767c:	d112      	bne.n	80076a4 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800767e:	e00a      	b.n	8007696 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007680:	f7fa fc56 	bl	8001f30 <HAL_GetTick>
 8007684:	4602      	mov	r2, r0
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	1ad3      	subs	r3, r2, r3
 800768a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800768e:	4293      	cmp	r3, r2
 8007690:	d901      	bls.n	8007696 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8007692:	2303      	movs	r3, #3
 8007694:	e0d6      	b.n	8007844 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007696:	4b1b      	ldr	r3, [pc, #108]	@ (8007704 <HAL_RCC_ClockConfig+0x288>)
 8007698:	69db      	ldr	r3, [r3, #28]
 800769a:	f003 030c 	and.w	r3, r3, #12
 800769e:	2b0c      	cmp	r3, #12
 80076a0:	d1ee      	bne.n	8007680 <HAL_RCC_ClockConfig+0x204>
 80076a2:	e044      	b.n	800772e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	2b02      	cmp	r3, #2
 80076aa:	d112      	bne.n	80076d2 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80076ac:	e00a      	b.n	80076c4 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076ae:	f7fa fc3f 	bl	8001f30 <HAL_GetTick>
 80076b2:	4602      	mov	r2, r0
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	1ad3      	subs	r3, r2, r3
 80076b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076bc:	4293      	cmp	r3, r2
 80076be:	d901      	bls.n	80076c4 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80076c0:	2303      	movs	r3, #3
 80076c2:	e0bf      	b.n	8007844 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80076c4:	4b0f      	ldr	r3, [pc, #60]	@ (8007704 <HAL_RCC_ClockConfig+0x288>)
 80076c6:	69db      	ldr	r3, [r3, #28]
 80076c8:	f003 030c 	and.w	r3, r3, #12
 80076cc:	2b08      	cmp	r3, #8
 80076ce:	d1ee      	bne.n	80076ae <HAL_RCC_ClockConfig+0x232>
 80076d0:	e02d      	b.n	800772e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d123      	bne.n	8007722 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80076da:	e00a      	b.n	80076f2 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076dc:	f7fa fc28 	bl	8001f30 <HAL_GetTick>
 80076e0:	4602      	mov	r2, r0
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	1ad3      	subs	r3, r2, r3
 80076e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d901      	bls.n	80076f2 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80076ee:	2303      	movs	r3, #3
 80076f0:	e0a8      	b.n	8007844 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80076f2:	4b04      	ldr	r3, [pc, #16]	@ (8007704 <HAL_RCC_ClockConfig+0x288>)
 80076f4:	69db      	ldr	r3, [r3, #28]
 80076f6:	f003 030c 	and.w	r3, r3, #12
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d1ee      	bne.n	80076dc <HAL_RCC_ClockConfig+0x260>
 80076fe:	e016      	b.n	800772e <HAL_RCC_ClockConfig+0x2b2>
 8007700:	40022000 	.word	0x40022000
 8007704:	46020c00 	.word	0x46020c00
 8007708:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800770c:	f7fa fc10 	bl	8001f30 <HAL_GetTick>
 8007710:	4602      	mov	r2, r0
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	1ad3      	subs	r3, r2, r3
 8007716:	f241 3288 	movw	r2, #5000	@ 0x1388
 800771a:	4293      	cmp	r3, r2
 800771c:	d901      	bls.n	8007722 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800771e:	2303      	movs	r3, #3
 8007720:	e090      	b.n	8007844 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007722:	4b4a      	ldr	r3, [pc, #296]	@ (800784c <HAL_RCC_ClockConfig+0x3d0>)
 8007724:	69db      	ldr	r3, [r3, #28]
 8007726:	f003 030c 	and.w	r3, r3, #12
 800772a:	2b04      	cmp	r3, #4
 800772c:	d1ee      	bne.n	800770c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f003 0302 	and.w	r3, r3, #2
 8007736:	2b00      	cmp	r3, #0
 8007738:	d010      	beq.n	800775c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	689a      	ldr	r2, [r3, #8]
 800773e:	4b43      	ldr	r3, [pc, #268]	@ (800784c <HAL_RCC_ClockConfig+0x3d0>)
 8007740:	6a1b      	ldr	r3, [r3, #32]
 8007742:	f003 030f 	and.w	r3, r3, #15
 8007746:	429a      	cmp	r2, r3
 8007748:	d208      	bcs.n	800775c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800774a:	4b40      	ldr	r3, [pc, #256]	@ (800784c <HAL_RCC_ClockConfig+0x3d0>)
 800774c:	6a1b      	ldr	r3, [r3, #32]
 800774e:	f023 020f 	bic.w	r2, r3, #15
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	493d      	ldr	r1, [pc, #244]	@ (800784c <HAL_RCC_ClockConfig+0x3d0>)
 8007758:	4313      	orrs	r3, r2
 800775a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800775c:	4b3c      	ldr	r3, [pc, #240]	@ (8007850 <HAL_RCC_ClockConfig+0x3d4>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 030f 	and.w	r3, r3, #15
 8007764:	683a      	ldr	r2, [r7, #0]
 8007766:	429a      	cmp	r2, r3
 8007768:	d210      	bcs.n	800778c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800776a:	4b39      	ldr	r3, [pc, #228]	@ (8007850 <HAL_RCC_ClockConfig+0x3d4>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f023 020f 	bic.w	r2, r3, #15
 8007772:	4937      	ldr	r1, [pc, #220]	@ (8007850 <HAL_RCC_ClockConfig+0x3d4>)
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	4313      	orrs	r3, r2
 8007778:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800777a:	4b35      	ldr	r3, [pc, #212]	@ (8007850 <HAL_RCC_ClockConfig+0x3d4>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f003 030f 	and.w	r3, r3, #15
 8007782:	683a      	ldr	r2, [r7, #0]
 8007784:	429a      	cmp	r2, r3
 8007786:	d001      	beq.n	800778c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8007788:	2301      	movs	r3, #1
 800778a:	e05b      	b.n	8007844 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f003 0304 	and.w	r3, r3, #4
 8007794:	2b00      	cmp	r3, #0
 8007796:	d010      	beq.n	80077ba <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	68da      	ldr	r2, [r3, #12]
 800779c:	4b2b      	ldr	r3, [pc, #172]	@ (800784c <HAL_RCC_ClockConfig+0x3d0>)
 800779e:	6a1b      	ldr	r3, [r3, #32]
 80077a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d208      	bcs.n	80077ba <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80077a8:	4b28      	ldr	r3, [pc, #160]	@ (800784c <HAL_RCC_ClockConfig+0x3d0>)
 80077aa:	6a1b      	ldr	r3, [r3, #32]
 80077ac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	4925      	ldr	r1, [pc, #148]	@ (800784c <HAL_RCC_ClockConfig+0x3d0>)
 80077b6:	4313      	orrs	r3, r2
 80077b8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f003 0308 	and.w	r3, r3, #8
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d012      	beq.n	80077ec <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	691a      	ldr	r2, [r3, #16]
 80077ca:	4b20      	ldr	r3, [pc, #128]	@ (800784c <HAL_RCC_ClockConfig+0x3d0>)
 80077cc:	6a1b      	ldr	r3, [r3, #32]
 80077ce:	091b      	lsrs	r3, r3, #4
 80077d0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d209      	bcs.n	80077ec <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80077d8:	4b1c      	ldr	r3, [pc, #112]	@ (800784c <HAL_RCC_ClockConfig+0x3d0>)
 80077da:	6a1b      	ldr	r3, [r3, #32]
 80077dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	691b      	ldr	r3, [r3, #16]
 80077e4:	011b      	lsls	r3, r3, #4
 80077e6:	4919      	ldr	r1, [pc, #100]	@ (800784c <HAL_RCC_ClockConfig+0x3d0>)
 80077e8:	4313      	orrs	r3, r2
 80077ea:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f003 0310 	and.w	r3, r3, #16
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d010      	beq.n	800781a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	695a      	ldr	r2, [r3, #20]
 80077fc:	4b13      	ldr	r3, [pc, #76]	@ (800784c <HAL_RCC_ClockConfig+0x3d0>)
 80077fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007800:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007804:	429a      	cmp	r2, r3
 8007806:	d208      	bcs.n	800781a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8007808:	4b10      	ldr	r3, [pc, #64]	@ (800784c <HAL_RCC_ClockConfig+0x3d0>)
 800780a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800780c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	695b      	ldr	r3, [r3, #20]
 8007814:	490d      	ldr	r1, [pc, #52]	@ (800784c <HAL_RCC_ClockConfig+0x3d0>)
 8007816:	4313      	orrs	r3, r2
 8007818:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800781a:	f000 f821 	bl	8007860 <HAL_RCC_GetSysClockFreq>
 800781e:	4602      	mov	r2, r0
 8007820:	4b0a      	ldr	r3, [pc, #40]	@ (800784c <HAL_RCC_ClockConfig+0x3d0>)
 8007822:	6a1b      	ldr	r3, [r3, #32]
 8007824:	f003 030f 	and.w	r3, r3, #15
 8007828:	490a      	ldr	r1, [pc, #40]	@ (8007854 <HAL_RCC_ClockConfig+0x3d8>)
 800782a:	5ccb      	ldrb	r3, [r1, r3]
 800782c:	fa22 f303 	lsr.w	r3, r2, r3
 8007830:	4a09      	ldr	r2, [pc, #36]	@ (8007858 <HAL_RCC_ClockConfig+0x3dc>)
 8007832:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007834:	4b09      	ldr	r3, [pc, #36]	@ (800785c <HAL_RCC_ClockConfig+0x3e0>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4618      	mov	r0, r3
 800783a:	f7fa f83d 	bl	80018b8 <HAL_InitTick>
 800783e:	4603      	mov	r3, r0
 8007840:	73fb      	strb	r3, [r7, #15]

  return status;
 8007842:	7bfb      	ldrb	r3, [r7, #15]
}
 8007844:	4618      	mov	r0, r3
 8007846:	3718      	adds	r7, #24
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}
 800784c:	46020c00 	.word	0x46020c00
 8007850:	40022000 	.word	0x40022000
 8007854:	0802e97c 	.word	0x0802e97c
 8007858:	20000004 	.word	0x20000004
 800785c:	20000008 	.word	0x20000008

08007860 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007860:	b480      	push	{r7}
 8007862:	b08b      	sub	sp, #44	@ 0x2c
 8007864:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8007866:	2300      	movs	r3, #0
 8007868:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800786a:	2300      	movs	r3, #0
 800786c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800786e:	4b78      	ldr	r3, [pc, #480]	@ (8007a50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007870:	69db      	ldr	r3, [r3, #28]
 8007872:	f003 030c 	and.w	r3, r3, #12
 8007876:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007878:	4b75      	ldr	r3, [pc, #468]	@ (8007a50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800787a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800787c:	f003 0303 	and.w	r3, r3, #3
 8007880:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007882:	69bb      	ldr	r3, [r7, #24]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d005      	beq.n	8007894 <HAL_RCC_GetSysClockFreq+0x34>
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	2b0c      	cmp	r3, #12
 800788c:	d121      	bne.n	80078d2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	2b01      	cmp	r3, #1
 8007892:	d11e      	bne.n	80078d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8007894:	4b6e      	ldr	r3, [pc, #440]	@ (8007a50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800789c:	2b00      	cmp	r3, #0
 800789e:	d107      	bne.n	80078b0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80078a0:	4b6b      	ldr	r3, [pc, #428]	@ (8007a50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80078a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80078a6:	0b1b      	lsrs	r3, r3, #12
 80078a8:	f003 030f 	and.w	r3, r3, #15
 80078ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80078ae:	e005      	b.n	80078bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80078b0:	4b67      	ldr	r3, [pc, #412]	@ (8007a50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	0f1b      	lsrs	r3, r3, #28
 80078b6:	f003 030f 	and.w	r3, r3, #15
 80078ba:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80078bc:	4a65      	ldr	r2, [pc, #404]	@ (8007a54 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80078be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078c4:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80078c6:	69bb      	ldr	r3, [r7, #24]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d110      	bne.n	80078ee <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80078cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ce:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80078d0:	e00d      	b.n	80078ee <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80078d2:	4b5f      	ldr	r3, [pc, #380]	@ (8007a50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80078d4:	69db      	ldr	r3, [r3, #28]
 80078d6:	f003 030c 	and.w	r3, r3, #12
 80078da:	2b04      	cmp	r3, #4
 80078dc:	d102      	bne.n	80078e4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80078de:	4b5e      	ldr	r3, [pc, #376]	@ (8007a58 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80078e0:	623b      	str	r3, [r7, #32]
 80078e2:	e004      	b.n	80078ee <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80078e4:	69bb      	ldr	r3, [r7, #24]
 80078e6:	2b08      	cmp	r3, #8
 80078e8:	d101      	bne.n	80078ee <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80078ea:	4b5b      	ldr	r3, [pc, #364]	@ (8007a58 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80078ec:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80078ee:	69bb      	ldr	r3, [r7, #24]
 80078f0:	2b0c      	cmp	r3, #12
 80078f2:	f040 80a5 	bne.w	8007a40 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80078f6:	4b56      	ldr	r3, [pc, #344]	@ (8007a50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80078f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078fa:	f003 0303 	and.w	r3, r3, #3
 80078fe:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8007900:	4b53      	ldr	r3, [pc, #332]	@ (8007a50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007904:	0a1b      	lsrs	r3, r3, #8
 8007906:	f003 030f 	and.w	r3, r3, #15
 800790a:	3301      	adds	r3, #1
 800790c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800790e:	4b50      	ldr	r3, [pc, #320]	@ (8007a50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007912:	091b      	lsrs	r3, r3, #4
 8007914:	f003 0301 	and.w	r3, r3, #1
 8007918:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800791a:	4b4d      	ldr	r3, [pc, #308]	@ (8007a50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800791c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800791e:	08db      	lsrs	r3, r3, #3
 8007920:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007924:	68ba      	ldr	r2, [r7, #8]
 8007926:	fb02 f303 	mul.w	r3, r2, r3
 800792a:	ee07 3a90 	vmov	s15, r3
 800792e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007932:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	2b02      	cmp	r3, #2
 800793a:	d003      	beq.n	8007944 <HAL_RCC_GetSysClockFreq+0xe4>
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	2b03      	cmp	r3, #3
 8007940:	d022      	beq.n	8007988 <HAL_RCC_GetSysClockFreq+0x128>
 8007942:	e043      	b.n	80079cc <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	ee07 3a90 	vmov	s15, r3
 800794a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800794e:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8007a5c <HAL_RCC_GetSysClockFreq+0x1fc>
 8007952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007956:	4b3e      	ldr	r3, [pc, #248]	@ (8007a50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007958:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800795a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800795e:	ee07 3a90 	vmov	s15, r3
 8007962:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007966:	ed97 6a01 	vldr	s12, [r7, #4]
 800796a:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8007a60 <HAL_RCC_GetSysClockFreq+0x200>
 800796e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007972:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007976:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800797a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800797e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007982:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007986:	e046      	b.n	8007a16 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	ee07 3a90 	vmov	s15, r3
 800798e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007992:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8007a5c <HAL_RCC_GetSysClockFreq+0x1fc>
 8007996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800799a:	4b2d      	ldr	r3, [pc, #180]	@ (8007a50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800799c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800799e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079a2:	ee07 3a90 	vmov	s15, r3
 80079a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80079aa:	ed97 6a01 	vldr	s12, [r7, #4]
 80079ae:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8007a60 <HAL_RCC_GetSysClockFreq+0x200>
 80079b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80079b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80079ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079be:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80079c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079ca:	e024      	b.n	8007a16 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80079cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ce:	ee07 3a90 	vmov	s15, r3
 80079d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	ee07 3a90 	vmov	s15, r3
 80079dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079e4:	4b1a      	ldr	r3, [pc, #104]	@ (8007a50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80079e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079ec:	ee07 3a90 	vmov	s15, r3
 80079f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80079f4:	ed97 6a01 	vldr	s12, [r7, #4]
 80079f8:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8007a60 <HAL_RCC_GetSysClockFreq+0x200>
 80079fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007a00:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007a04:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a08:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007a0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a10:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a14:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8007a16:	4b0e      	ldr	r3, [pc, #56]	@ (8007a50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007a18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a1a:	0e1b      	lsrs	r3, r3, #24
 8007a1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a20:	3301      	adds	r3, #1
 8007a22:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	ee07 3a90 	vmov	s15, r3
 8007a2a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007a2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a3a:	ee17 3a90 	vmov	r3, s15
 8007a3e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8007a40:	6a3b      	ldr	r3, [r7, #32]
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	372c      	adds	r7, #44	@ 0x2c
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	46020c00 	.word	0x46020c00
 8007a54:	0802e994 	.word	0x0802e994
 8007a58:	00f42400 	.word	0x00f42400
 8007a5c:	4b742400 	.word	0x4b742400
 8007a60:	46000000 	.word	0x46000000

08007a64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8007a68:	f7ff fefa 	bl	8007860 <HAL_RCC_GetSysClockFreq>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	4b07      	ldr	r3, [pc, #28]	@ (8007a8c <HAL_RCC_GetHCLKFreq+0x28>)
 8007a70:	6a1b      	ldr	r3, [r3, #32]
 8007a72:	f003 030f 	and.w	r3, r3, #15
 8007a76:	4906      	ldr	r1, [pc, #24]	@ (8007a90 <HAL_RCC_GetHCLKFreq+0x2c>)
 8007a78:	5ccb      	ldrb	r3, [r1, r3]
 8007a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8007a7e:	4a05      	ldr	r2, [pc, #20]	@ (8007a94 <HAL_RCC_GetHCLKFreq+0x30>)
 8007a80:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8007a82:	4b04      	ldr	r3, [pc, #16]	@ (8007a94 <HAL_RCC_GetHCLKFreq+0x30>)
 8007a84:	681b      	ldr	r3, [r3, #0]
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	46020c00 	.word	0x46020c00
 8007a90:	0802e97c 	.word	0x0802e97c
 8007a94:	20000004 	.word	0x20000004

08007a98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8007a9c:	f7ff ffe2 	bl	8007a64 <HAL_RCC_GetHCLKFreq>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	4b05      	ldr	r3, [pc, #20]	@ (8007ab8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007aa4:	6a1b      	ldr	r3, [r3, #32]
 8007aa6:	091b      	lsrs	r3, r3, #4
 8007aa8:	f003 0307 	and.w	r3, r3, #7
 8007aac:	4903      	ldr	r1, [pc, #12]	@ (8007abc <HAL_RCC_GetPCLK1Freq+0x24>)
 8007aae:	5ccb      	ldrb	r3, [r1, r3]
 8007ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	46020c00 	.word	0x46020c00
 8007abc:	0802e98c 	.word	0x0802e98c

08007ac0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8007ac4:	f7ff ffce 	bl	8007a64 <HAL_RCC_GetHCLKFreq>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	4b05      	ldr	r3, [pc, #20]	@ (8007ae0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007acc:	6a1b      	ldr	r3, [r3, #32]
 8007ace:	0a1b      	lsrs	r3, r3, #8
 8007ad0:	f003 0307 	and.w	r3, r3, #7
 8007ad4:	4903      	ldr	r1, [pc, #12]	@ (8007ae4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ad6:	5ccb      	ldrb	r3, [r1, r3]
 8007ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	bd80      	pop	{r7, pc}
 8007ae0:	46020c00 	.word	0x46020c00
 8007ae4:	0802e98c 	.word	0x0802e98c

08007ae8 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8007aec:	f7ff ffba 	bl	8007a64 <HAL_RCC_GetHCLKFreq>
 8007af0:	4602      	mov	r2, r0
 8007af2:	4b05      	ldr	r3, [pc, #20]	@ (8007b08 <HAL_RCC_GetPCLK3Freq+0x20>)
 8007af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007af6:	091b      	lsrs	r3, r3, #4
 8007af8:	f003 0307 	and.w	r3, r3, #7
 8007afc:	4903      	ldr	r1, [pc, #12]	@ (8007b0c <HAL_RCC_GetPCLK3Freq+0x24>)
 8007afe:	5ccb      	ldrb	r3, [r1, r3]
 8007b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	bd80      	pop	{r7, pc}
 8007b08:	46020c00 	.word	0x46020c00
 8007b0c:	0802e98c 	.word	0x0802e98c

08007b10 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b083      	sub	sp, #12
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	221f      	movs	r2, #31
 8007b1e:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8007b20:	4b15      	ldr	r3, [pc, #84]	@ (8007b78 <HAL_RCC_GetClockConfig+0x68>)
 8007b22:	69db      	ldr	r3, [r3, #28]
 8007b24:	f003 0203 	and.w	r2, r3, #3
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8007b2c:	4b12      	ldr	r3, [pc, #72]	@ (8007b78 <HAL_RCC_GetClockConfig+0x68>)
 8007b2e:	6a1b      	ldr	r3, [r3, #32]
 8007b30:	f003 020f 	and.w	r2, r3, #15
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8007b38:	4b0f      	ldr	r3, [pc, #60]	@ (8007b78 <HAL_RCC_GetClockConfig+0x68>)
 8007b3a:	6a1b      	ldr	r3, [r3, #32]
 8007b3c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8007b44:	4b0c      	ldr	r3, [pc, #48]	@ (8007b78 <HAL_RCC_GetClockConfig+0x68>)
 8007b46:	6a1b      	ldr	r3, [r3, #32]
 8007b48:	091b      	lsrs	r3, r3, #4
 8007b4a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8007b52:	4b09      	ldr	r3, [pc, #36]	@ (8007b78 <HAL_RCC_GetClockConfig+0x68>)
 8007b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b56:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007b5e:	4b07      	ldr	r3, [pc, #28]	@ (8007b7c <HAL_RCC_GetClockConfig+0x6c>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f003 020f 	and.w	r2, r3, #15
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	601a      	str	r2, [r3, #0]
}
 8007b6a:	bf00      	nop
 8007b6c:	370c      	adds	r7, #12
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr
 8007b76:	bf00      	nop
 8007b78:	46020c00 	.word	0x46020c00
 8007b7c:	40022000 	.word	0x40022000

08007b80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b086      	sub	sp, #24
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007b88:	4b3e      	ldr	r3, [pc, #248]	@ (8007c84 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007b8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b8e:	f003 0304 	and.w	r3, r3, #4
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d003      	beq.n	8007b9e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007b96:	f7fe fd87 	bl	80066a8 <HAL_PWREx_GetVoltageRange>
 8007b9a:	6178      	str	r0, [r7, #20]
 8007b9c:	e019      	b.n	8007bd2 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007b9e:	4b39      	ldr	r3, [pc, #228]	@ (8007c84 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007ba0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ba4:	4a37      	ldr	r2, [pc, #220]	@ (8007c84 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007ba6:	f043 0304 	orr.w	r3, r3, #4
 8007baa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007bae:	4b35      	ldr	r3, [pc, #212]	@ (8007c84 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007bb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007bb4:	f003 0304 	and.w	r3, r3, #4
 8007bb8:	60fb      	str	r3, [r7, #12]
 8007bba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007bbc:	f7fe fd74 	bl	80066a8 <HAL_PWREx_GetVoltageRange>
 8007bc0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007bc2:	4b30      	ldr	r3, [pc, #192]	@ (8007c84 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007bc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007bc8:	4a2e      	ldr	r2, [pc, #184]	@ (8007c84 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007bca:	f023 0304 	bic.w	r3, r3, #4
 8007bce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007bd8:	d003      	beq.n	8007be2 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007be0:	d109      	bne.n	8007bf6 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007be8:	d202      	bcs.n	8007bf0 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8007bea:	2301      	movs	r3, #1
 8007bec:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8007bee:	e033      	b.n	8007c58 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8007bf4:	e030      	b.n	8007c58 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007bfc:	d208      	bcs.n	8007c10 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c04:	d102      	bne.n	8007c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8007c06:	2303      	movs	r3, #3
 8007c08:	613b      	str	r3, [r7, #16]
 8007c0a:	e025      	b.n	8007c58 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	e035      	b.n	8007c7c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c16:	d90f      	bls.n	8007c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d109      	bne.n	8007c32 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007c24:	d902      	bls.n	8007c2c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8007c26:	2300      	movs	r3, #0
 8007c28:	613b      	str	r3, [r7, #16]
 8007c2a:	e015      	b.n	8007c58 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	613b      	str	r3, [r7, #16]
 8007c30:	e012      	b.n	8007c58 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8007c32:	2300      	movs	r3, #0
 8007c34:	613b      	str	r3, [r7, #16]
 8007c36:	e00f      	b.n	8007c58 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c3e:	d109      	bne.n	8007c54 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c46:	d102      	bne.n	8007c4e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8007c48:	2301      	movs	r3, #1
 8007c4a:	613b      	str	r3, [r7, #16]
 8007c4c:	e004      	b.n	8007c58 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8007c4e:	2302      	movs	r3, #2
 8007c50:	613b      	str	r3, [r7, #16]
 8007c52:	e001      	b.n	8007c58 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8007c54:	2301      	movs	r3, #1
 8007c56:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007c58:	4b0b      	ldr	r3, [pc, #44]	@ (8007c88 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f023 020f 	bic.w	r2, r3, #15
 8007c60:	4909      	ldr	r1, [pc, #36]	@ (8007c88 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	4313      	orrs	r3, r2
 8007c66:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8007c68:	4b07      	ldr	r3, [pc, #28]	@ (8007c88 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f003 030f 	and.w	r3, r3, #15
 8007c70:	693a      	ldr	r2, [r7, #16]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d001      	beq.n	8007c7a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	e000      	b.n	8007c7c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8007c7a:	2300      	movs	r3, #0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3718      	adds	r7, #24
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}
 8007c84:	46020c00 	.word	0x46020c00
 8007c88:	40022000 	.word	0x40022000

08007c8c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8007c8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c90:	b0b8      	sub	sp, #224	@ 0xe0
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007c98:	2300      	movs	r3, #0
 8007c9a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007ca4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cac:	f002 0401 	and.w	r4, r2, #1
 8007cb0:	2500      	movs	r5, #0
 8007cb2:	ea54 0305 	orrs.w	r3, r4, r5
 8007cb6:	d00b      	beq.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8007cb8:	4bca      	ldr	r3, [pc, #808]	@ (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007cbe:	f023 0103 	bic.w	r1, r3, #3
 8007cc2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007cc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cc8:	4ac6      	ldr	r2, [pc, #792]	@ (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007cca:	430b      	orrs	r3, r1
 8007ccc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007cd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd8:	f002 0802 	and.w	r8, r2, #2
 8007cdc:	f04f 0900 	mov.w	r9, #0
 8007ce0:	ea58 0309 	orrs.w	r3, r8, r9
 8007ce4:	d00b      	beq.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8007ce6:	4bbf      	ldr	r3, [pc, #764]	@ (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007ce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007cec:	f023 010c 	bic.w	r1, r3, #12
 8007cf0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007cf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cf6:	4abb      	ldr	r2, [pc, #748]	@ (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007cf8:	430b      	orrs	r3, r1
 8007cfa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007cfe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d06:	f002 0a04 	and.w	sl, r2, #4
 8007d0a:	f04f 0b00 	mov.w	fp, #0
 8007d0e:	ea5a 030b 	orrs.w	r3, sl, fp
 8007d12:	d00b      	beq.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8007d14:	4bb3      	ldr	r3, [pc, #716]	@ (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d1a:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007d1e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d24:	4aaf      	ldr	r2, [pc, #700]	@ (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007d26:	430b      	orrs	r3, r1
 8007d28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007d2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d34:	f002 0308 	and.w	r3, r2, #8
 8007d38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007d42:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007d46:	460b      	mov	r3, r1
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	d00b      	beq.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8007d4c:	4ba5      	ldr	r3, [pc, #660]	@ (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d52:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007d56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007d5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d5c:	4aa1      	ldr	r2, [pc, #644]	@ (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007d5e:	430b      	orrs	r3, r1
 8007d60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007d64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d6c:	f002 0310 	and.w	r3, r2, #16
 8007d70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007d74:	2300      	movs	r3, #0
 8007d76:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007d7a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007d7e:	460b      	mov	r3, r1
 8007d80:	4313      	orrs	r3, r2
 8007d82:	d00b      	beq.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8007d84:	4b97      	ldr	r3, [pc, #604]	@ (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d8a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007d8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007d92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d94:	4a93      	ldr	r2, [pc, #588]	@ (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007d96:	430b      	orrs	r3, r1
 8007d98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da4:	f002 0320 	and.w	r3, r2, #32
 8007da8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007dac:	2300      	movs	r3, #0
 8007dae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007db2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007db6:	460b      	mov	r3, r1
 8007db8:	4313      	orrs	r3, r2
 8007dba:	d00b      	beq.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8007dbc:	4b89      	ldr	r3, [pc, #548]	@ (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007dbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007dc2:	f023 0107 	bic.w	r1, r3, #7
 8007dc6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007dca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007dcc:	4a85      	ldr	r2, [pc, #532]	@ (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007dce:	430b      	orrs	r3, r1
 8007dd0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007dd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ddc:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007de0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007de4:	2300      	movs	r3, #0
 8007de6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007dea:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007dee:	460b      	mov	r3, r1
 8007df0:	4313      	orrs	r3, r2
 8007df2:	d00b      	beq.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8007df4:	4b7b      	ldr	r3, [pc, #492]	@ (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007dfa:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8007dfe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007e02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007e04:	4a77      	ldr	r2, [pc, #476]	@ (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007e06:	430b      	orrs	r3, r1
 8007e08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007e0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e14:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007e18:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007e22:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007e26:	460b      	mov	r3, r1
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	d00b      	beq.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8007e2c:	4b6d      	ldr	r3, [pc, #436]	@ (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007e32:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007e36:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007e3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e3c:	4a69      	ldr	r2, [pc, #420]	@ (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007e3e:	430b      	orrs	r3, r1
 8007e40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007e44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4c:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8007e50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007e54:	2300      	movs	r3, #0
 8007e56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007e5a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007e5e:	460b      	mov	r3, r1
 8007e60:	4313      	orrs	r3, r2
 8007e62:	d00b      	beq.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8007e64:	4b5f      	ldr	r3, [pc, #380]	@ (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007e66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007e6a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007e6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007e72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e74:	4a5b      	ldr	r2, [pc, #364]	@ (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007e76:	430b      	orrs	r3, r1
 8007e78:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007e7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e84:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007e88:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007e92:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007e96:	460b      	mov	r3, r1
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	d00b      	beq.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8007e9c:	4b51      	ldr	r3, [pc, #324]	@ (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007ea2:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8007ea6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007eaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007eac:	4a4d      	ldr	r2, [pc, #308]	@ (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007eae:	430b      	orrs	r3, r1
 8007eb0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007eb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ebc:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8007ec0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007eca:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007ece:	460b      	mov	r3, r1
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	d00b      	beq.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8007ed4:	4b43      	ldr	r3, [pc, #268]	@ (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007ed6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007eda:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8007ede:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007ee2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007ee4:	4a3f      	ldr	r2, [pc, #252]	@ (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007ee6:	430b      	orrs	r3, r1
 8007ee8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007eec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef4:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007ef8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007efc:	2300      	movs	r3, #0
 8007efe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007f02:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007f06:	460b      	mov	r3, r1
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	d00b      	beq.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8007f0c:	4b35      	ldr	r3, [pc, #212]	@ (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007f12:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8007f16:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007f1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f1c:	4a31      	ldr	r2, [pc, #196]	@ (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007f1e:	430b      	orrs	r3, r1
 8007f20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8007f24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007f30:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007f32:	2300      	movs	r3, #0
 8007f34:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007f36:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007f3a:	460b      	mov	r3, r1
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	d00c      	beq.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8007f40:	4b28      	ldr	r3, [pc, #160]	@ (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007f42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007f46:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007f4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f52:	4a24      	ldr	r2, [pc, #144]	@ (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007f54:	430b      	orrs	r3, r1
 8007f56:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007f5a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f62:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007f66:	673b      	str	r3, [r7, #112]	@ 0x70
 8007f68:	2300      	movs	r3, #0
 8007f6a:	677b      	str	r3, [r7, #116]	@ 0x74
 8007f6c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007f70:	460b      	mov	r3, r1
 8007f72:	4313      	orrs	r3, r2
 8007f74:	d04f      	beq.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8007f76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f7e:	2b80      	cmp	r3, #128	@ 0x80
 8007f80:	d02d      	beq.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x352>
 8007f82:	2b80      	cmp	r3, #128	@ 0x80
 8007f84:	d827      	bhi.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007f86:	2b60      	cmp	r3, #96	@ 0x60
 8007f88:	d02e      	beq.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007f8a:	2b60      	cmp	r3, #96	@ 0x60
 8007f8c:	d823      	bhi.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007f8e:	2b40      	cmp	r3, #64	@ 0x40
 8007f90:	d006      	beq.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8007f92:	2b40      	cmp	r3, #64	@ 0x40
 8007f94:	d81f      	bhi.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d009      	beq.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0x322>
 8007f9a:	2b20      	cmp	r3, #32
 8007f9c:	d011      	beq.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8007f9e:	e01a      	b.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007fa0:	4b10      	ldr	r3, [pc, #64]	@ (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fa4:	4a0f      	ldr	r2, [pc, #60]	@ (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007fa6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007faa:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007fac:	e01d      	b.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007fae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007fb2:	3308      	adds	r3, #8
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f002 f9d1 	bl	800a35c <RCCEx_PLL2_Config>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007fc0:	e013      	b.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007fc2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007fc6:	332c      	adds	r3, #44	@ 0x2c
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f002 fa5f 	bl	800a48c <RCCEx_PLL3_Config>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007fd4:	e009      	b.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8007fdc:	e005      	b.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 8007fde:	bf00      	nop
 8007fe0:	e003      	b.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8007fe2:	bf00      	nop
 8007fe4:	46020c00 	.word	0x46020c00
        break;
 8007fe8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fea:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d10d      	bne.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8007ff2:	4bb6      	ldr	r3, [pc, #728]	@ (80082cc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007ff4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007ff8:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8007ffc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008000:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008004:	4ab1      	ldr	r2, [pc, #708]	@ (80082cc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8008006:	430b      	orrs	r3, r1
 8008008:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800800c:	e003      	b.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800800e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008012:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008016:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800801a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800801e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008022:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008024:	2300      	movs	r3, #0
 8008026:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008028:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800802c:	460b      	mov	r3, r1
 800802e:	4313      	orrs	r3, r2
 8008030:	d053      	beq.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8008032:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008036:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800803a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800803e:	d033      	beq.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8008040:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008044:	d82c      	bhi.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8008046:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800804a:	d02f      	beq.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0x420>
 800804c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008050:	d826      	bhi.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8008052:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008056:	d008      	beq.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008058:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800805c:	d820      	bhi.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800805e:	2b00      	cmp	r3, #0
 8008060:	d00a      	beq.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8008062:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008066:	d011      	beq.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8008068:	e01a      	b.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800806a:	4b98      	ldr	r3, [pc, #608]	@ (80082cc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800806c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800806e:	4a97      	ldr	r2, [pc, #604]	@ (80082cc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8008070:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008074:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8008076:	e01a      	b.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008078:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800807c:	3308      	adds	r3, #8
 800807e:	4618      	mov	r0, r3
 8008080:	f002 f96c 	bl	800a35c <RCCEx_PLL2_Config>
 8008084:	4603      	mov	r3, r0
 8008086:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 800808a:	e010      	b.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800808c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008090:	332c      	adds	r3, #44	@ 0x2c
 8008092:	4618      	mov	r0, r3
 8008094:	f002 f9fa 	bl	800a48c <RCCEx_PLL3_Config>
 8008098:	4603      	mov	r3, r0
 800809a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 800809e:	e006      	b.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080a0:	2301      	movs	r3, #1
 80080a2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80080a6:	e002      	b.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 80080a8:	bf00      	nop
 80080aa:	e000      	b.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 80080ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080ae:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d10d      	bne.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80080b6:	4b85      	ldr	r3, [pc, #532]	@ (80082cc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80080b8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80080bc:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80080c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80080c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80080c8:	4a80      	ldr	r2, [pc, #512]	@ (80082cc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80080ca:	430b      	orrs	r3, r1
 80080cc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80080d0:	e003      	b.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080d2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80080d6:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80080da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80080de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e2:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80080e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80080e8:	2300      	movs	r3, #0
 80080ea:	667b      	str	r3, [r7, #100]	@ 0x64
 80080ec:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80080f0:	460b      	mov	r3, r1
 80080f2:	4313      	orrs	r3, r2
 80080f4:	d046      	beq.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80080f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80080fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80080fe:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008102:	d028      	beq.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8008104:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008108:	d821      	bhi.n	800814e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800810a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800810e:	d022      	beq.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8008110:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008114:	d81b      	bhi.n	800814e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8008116:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800811a:	d01c      	beq.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800811c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008120:	d815      	bhi.n	800814e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8008122:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008126:	d008      	beq.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8008128:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800812c:	d80f      	bhi.n	800814e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800812e:	2b00      	cmp	r3, #0
 8008130:	d011      	beq.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8008132:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008136:	d00e      	beq.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8008138:	e009      	b.n	800814e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800813a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800813e:	3308      	adds	r3, #8
 8008140:	4618      	mov	r0, r3
 8008142:	f002 f90b 	bl	800a35c <RCCEx_PLL2_Config>
 8008146:	4603      	mov	r3, r0
 8008148:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800814c:	e004      	b.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800814e:	2301      	movs	r3, #1
 8008150:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8008154:	e000      	b.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 8008156:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008158:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800815c:	2b00      	cmp	r3, #0
 800815e:	d10d      	bne.n	800817c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8008160:	4b5a      	ldr	r3, [pc, #360]	@ (80082cc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8008162:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008166:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800816a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800816e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008172:	4a56      	ldr	r2, [pc, #344]	@ (80082cc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8008174:	430b      	orrs	r3, r1
 8008176:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800817a:	e003      	b.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800817c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008180:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8008184:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800818c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008190:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008192:	2300      	movs	r3, #0
 8008194:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008196:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800819a:	460b      	mov	r3, r1
 800819c:	4313      	orrs	r3, r2
 800819e:	d03f      	beq.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80081a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80081a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081a8:	2b04      	cmp	r3, #4
 80081aa:	d81e      	bhi.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0x55e>
 80081ac:	a201      	add	r2, pc, #4	@ (adr r2, 80081b4 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 80081ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081b2:	bf00      	nop
 80081b4:	080081f3 	.word	0x080081f3
 80081b8:	080081c9 	.word	0x080081c9
 80081bc:	080081d7 	.word	0x080081d7
 80081c0:	080081f3 	.word	0x080081f3
 80081c4:	080081f3 	.word	0x080081f3
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80081c8:	4b40      	ldr	r3, [pc, #256]	@ (80082cc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80081ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081cc:	4a3f      	ldr	r2, [pc, #252]	@ (80082cc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80081ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80081d2:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80081d4:	e00e      	b.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80081d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80081da:	332c      	adds	r3, #44	@ 0x2c
 80081dc:	4618      	mov	r0, r3
 80081de:	f002 f955 	bl	800a48c <RCCEx_PLL3_Config>
 80081e2:	4603      	mov	r3, r0
 80081e4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80081e8:	e004      	b.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80081ea:	2301      	movs	r3, #1
 80081ec:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80081f0:	e000      	b.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 80081f2:	bf00      	nop
    }
    if (ret == HAL_OK)
 80081f4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d10d      	bne.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80081fc:	4b33      	ldr	r3, [pc, #204]	@ (80082cc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80081fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008202:	f023 0107 	bic.w	r1, r3, #7
 8008206:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800820a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800820e:	4a2f      	ldr	r2, [pc, #188]	@ (80082cc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8008210:	430b      	orrs	r3, r1
 8008212:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8008216:	e003      	b.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008218:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800821c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8008220:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008228:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800822c:	653b      	str	r3, [r7, #80]	@ 0x50
 800822e:	2300      	movs	r3, #0
 8008230:	657b      	str	r3, [r7, #84]	@ 0x54
 8008232:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008236:	460b      	mov	r3, r1
 8008238:	4313      	orrs	r3, r2
 800823a:	d04d      	beq.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800823c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008240:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008244:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008248:	d028      	beq.n	800829c <HAL_RCCEx_PeriphCLKConfig+0x610>
 800824a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800824e:	d821      	bhi.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008250:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008254:	d024      	beq.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8008256:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800825a:	d81b      	bhi.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800825c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008260:	d00e      	beq.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8008262:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008266:	d815      	bhi.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008268:	2b00      	cmp	r3, #0
 800826a:	d01b      	beq.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x618>
 800826c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008270:	d110      	bne.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008272:	4b16      	ldr	r3, [pc, #88]	@ (80082cc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8008274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008276:	4a15      	ldr	r2, [pc, #84]	@ (80082cc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8008278:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800827c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800827e:	e012      	b.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008280:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008284:	332c      	adds	r3, #44	@ 0x2c
 8008286:	4618      	mov	r0, r3
 8008288:	f002 f900 	bl	800a48c <RCCEx_PLL3_Config>
 800828c:	4603      	mov	r3, r0
 800828e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8008292:	e008      	b.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8008294:	2301      	movs	r3, #1
 8008296:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800829a:	e004      	b.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 800829c:	bf00      	nop
 800829e:	e002      	b.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 80082a0:	bf00      	nop
 80082a2:	e000      	b.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 80082a4:	bf00      	nop
    }
    if (ret == HAL_OK)
 80082a6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d110      	bne.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80082ae:	4b07      	ldr	r3, [pc, #28]	@ (80082cc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80082b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80082b4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80082b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80082bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082c0:	4a02      	ldr	r2, [pc, #8]	@ (80082cc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80082c2:	430b      	orrs	r3, r1
 80082c4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80082c8:	e006      	b.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80082ca:	bf00      	nop
 80082cc:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082d0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80082d4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80082d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80082dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e0:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80082e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80082e6:	2300      	movs	r3, #0
 80082e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80082ea:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80082ee:	460b      	mov	r3, r1
 80082f0:	4313      	orrs	r3, r2
 80082f2:	f000 80b5 	beq.w	8008460 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80082f6:	2300      	movs	r3, #0
 80082f8:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80082fc:	4b9d      	ldr	r3, [pc, #628]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80082fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008302:	f003 0304 	and.w	r3, r3, #4
 8008306:	2b00      	cmp	r3, #0
 8008308:	d113      	bne.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800830a:	4b9a      	ldr	r3, [pc, #616]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800830c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008310:	4a98      	ldr	r2, [pc, #608]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008312:	f043 0304 	orr.w	r3, r3, #4
 8008316:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800831a:	4b96      	ldr	r3, [pc, #600]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800831c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008320:	f003 0304 	and.w	r3, r3, #4
 8008324:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008328:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 800832c:	2301      	movs	r3, #1
 800832e:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8008332:	4b91      	ldr	r3, [pc, #580]	@ (8008578 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8008334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008336:	4a90      	ldr	r2, [pc, #576]	@ (8008578 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8008338:	f043 0301 	orr.w	r3, r3, #1
 800833c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800833e:	f7f9 fdf7 	bl	8001f30 <HAL_GetTick>
 8008342:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008346:	e00b      	b.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008348:	f7f9 fdf2 	bl	8001f30 <HAL_GetTick>
 800834c:	4602      	mov	r2, r0
 800834e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008352:	1ad3      	subs	r3, r2, r3
 8008354:	2b02      	cmp	r3, #2
 8008356:	d903      	bls.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 8008358:	2303      	movs	r3, #3
 800835a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800835e:	e005      	b.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008360:	4b85      	ldr	r3, [pc, #532]	@ (8008578 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8008362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008364:	f003 0301 	and.w	r3, r3, #1
 8008368:	2b00      	cmp	r3, #0
 800836a:	d0ed      	beq.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 800836c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008370:	2b00      	cmp	r3, #0
 8008372:	d165      	bne.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008374:	4b7f      	ldr	r3, [pc, #508]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008376:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800837a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800837e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8008382:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008386:	2b00      	cmp	r3, #0
 8008388:	d023      	beq.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x746>
 800838a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800838e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8008392:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008396:	4293      	cmp	r3, r2
 8008398:	d01b      	beq.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800839a:	4b76      	ldr	r3, [pc, #472]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800839c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80083a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083a4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80083a8:	4b72      	ldr	r3, [pc, #456]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80083aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80083ae:	4a71      	ldr	r2, [pc, #452]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80083b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083b4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80083b8:	4b6e      	ldr	r3, [pc, #440]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80083ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80083be:	4a6d      	ldr	r2, [pc, #436]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80083c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80083c4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80083c8:	4a6a      	ldr	r2, [pc, #424]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80083ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80083ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80083d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80083d6:	f003 0301 	and.w	r3, r3, #1
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d019      	beq.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083de:	f7f9 fda7 	bl	8001f30 <HAL_GetTick>
 80083e2:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80083e6:	e00d      	b.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083e8:	f7f9 fda2 	bl	8001f30 <HAL_GetTick>
 80083ec:	4602      	mov	r2, r0
 80083ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80083f2:	1ad2      	subs	r2, r2, r3
 80083f4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d903      	bls.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 80083fc:	2303      	movs	r3, #3
 80083fe:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 8008402:	e006      	b.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008404:	4b5b      	ldr	r3, [pc, #364]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008406:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800840a:	f003 0302 	and.w	r3, r3, #2
 800840e:	2b00      	cmp	r3, #0
 8008410:	d0ea      	beq.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 8008412:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008416:	2b00      	cmp	r3, #0
 8008418:	d10d      	bne.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800841a:	4b56      	ldr	r3, [pc, #344]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800841c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008420:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008424:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008428:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800842c:	4a51      	ldr	r2, [pc, #324]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800842e:	430b      	orrs	r3, r1
 8008430:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008434:	e008      	b.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008436:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800843a:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 800843e:	e003      	b.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008440:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008444:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008448:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 800844c:	2b01      	cmp	r3, #1
 800844e:	d107      	bne.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008450:	4b48      	ldr	r3, [pc, #288]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008452:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008456:	4a47      	ldr	r2, [pc, #284]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008458:	f023 0304 	bic.w	r3, r3, #4
 800845c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8008460:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008468:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800846c:	643b      	str	r3, [r7, #64]	@ 0x40
 800846e:	2300      	movs	r3, #0
 8008470:	647b      	str	r3, [r7, #68]	@ 0x44
 8008472:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008476:	460b      	mov	r3, r1
 8008478:	4313      	orrs	r3, r2
 800847a:	d042      	beq.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800847c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008480:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008484:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008488:	d022      	beq.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0x844>
 800848a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800848e:	d81b      	bhi.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8008490:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008494:	d011      	beq.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8008496:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800849a:	d815      	bhi.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800849c:	2b00      	cmp	r3, #0
 800849e:	d019      	beq.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x848>
 80084a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80084a4:	d110      	bne.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80084a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80084aa:	3308      	adds	r3, #8
 80084ac:	4618      	mov	r0, r3
 80084ae:	f001 ff55 	bl	800a35c <RCCEx_PLL2_Config>
 80084b2:	4603      	mov	r3, r0
 80084b4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80084b8:	e00d      	b.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084ba:	4b2e      	ldr	r3, [pc, #184]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80084bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084be:	4a2d      	ldr	r2, [pc, #180]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80084c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80084c4:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80084c6:	e006      	b.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80084c8:	2301      	movs	r3, #1
 80084ca:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80084ce:	e002      	b.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 80084d0:	bf00      	nop
 80084d2:	e000      	b.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 80084d4:	bf00      	nop
    }
    if (ret == HAL_OK)
 80084d6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d10d      	bne.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80084de:	4b25      	ldr	r3, [pc, #148]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80084e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80084e4:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80084e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80084ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80084f0:	4a20      	ldr	r2, [pc, #128]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80084f2:	430b      	orrs	r3, r1
 80084f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80084f8:	e003      	b.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084fa:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80084fe:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008502:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800850a:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800850e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008510:	2300      	movs	r3, #0
 8008512:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008514:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008518:	460b      	mov	r3, r1
 800851a:	4313      	orrs	r3, r2
 800851c:	d032      	beq.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800851e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008522:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008526:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800852a:	d00b      	beq.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800852c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008530:	d804      	bhi.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8008532:	2b00      	cmp	r3, #0
 8008534:	d008      	beq.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8008536:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800853a:	d007      	beq.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800853c:	2301      	movs	r3, #1
 800853e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8008542:	e004      	b.n	800854e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8008544:	bf00      	nop
 8008546:	e002      	b.n	800854e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8008548:	bf00      	nop
 800854a:	e000      	b.n	800854e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 800854c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800854e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008552:	2b00      	cmp	r3, #0
 8008554:	d112      	bne.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8008556:	4b07      	ldr	r3, [pc, #28]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008558:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800855c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008560:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008564:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008568:	4a02      	ldr	r2, [pc, #8]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800856a:	430b      	orrs	r3, r1
 800856c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8008570:	e008      	b.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8008572:	bf00      	nop
 8008574:	46020c00 	.word	0x46020c00
 8008578:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800857c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008580:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8008584:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008590:	633b      	str	r3, [r7, #48]	@ 0x30
 8008592:	2300      	movs	r3, #0
 8008594:	637b      	str	r3, [r7, #52]	@ 0x34
 8008596:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800859a:	460b      	mov	r3, r1
 800859c:	4313      	orrs	r3, r2
 800859e:	d019      	beq.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80085a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80085a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80085a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80085ac:	d105      	bne.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80085ae:	4b88      	ldr	r3, [pc, #544]	@ (80087d0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80085b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085b2:	4a87      	ldr	r2, [pc, #540]	@ (80087d0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80085b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80085b8:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80085ba:	4b85      	ldr	r3, [pc, #532]	@ (80087d0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80085bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80085c0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80085c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80085c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80085cc:	4a80      	ldr	r2, [pc, #512]	@ (80087d0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80085ce:	430b      	orrs	r3, r1
 80085d0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80085d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80085d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085dc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80085e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80085e2:	2300      	movs	r3, #0
 80085e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80085e6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80085ea:	460b      	mov	r3, r1
 80085ec:	4313      	orrs	r3, r2
 80085ee:	d00c      	beq.n	800860a <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80085f0:	4b77      	ldr	r3, [pc, #476]	@ (80087d0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80085f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80085f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80085fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80085fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008602:	4973      	ldr	r1, [pc, #460]	@ (80087d0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008604:	4313      	orrs	r3, r2
 8008606:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800860a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800860e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008612:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008616:	623b      	str	r3, [r7, #32]
 8008618:	2300      	movs	r3, #0
 800861a:	627b      	str	r3, [r7, #36]	@ 0x24
 800861c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008620:	460b      	mov	r3, r1
 8008622:	4313      	orrs	r3, r2
 8008624:	d00c      	beq.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8008626:	4b6a      	ldr	r3, [pc, #424]	@ (80087d0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800862c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008630:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008634:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008638:	4965      	ldr	r1, [pc, #404]	@ (80087d0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800863a:	4313      	orrs	r3, r2
 800863c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8008640:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008648:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800864c:	61bb      	str	r3, [r7, #24]
 800864e:	2300      	movs	r3, #0
 8008650:	61fb      	str	r3, [r7, #28]
 8008652:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008656:	460b      	mov	r3, r1
 8008658:	4313      	orrs	r3, r2
 800865a:	d00c      	beq.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800865c:	4b5c      	ldr	r3, [pc, #368]	@ (80087d0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800865e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008662:	f023 0218 	bic.w	r2, r3, #24
 8008666:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800866a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800866e:	4958      	ldr	r1, [pc, #352]	@ (80087d0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008670:	4313      	orrs	r3, r2
 8008672:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008676:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800867a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800867e:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8008682:	613b      	str	r3, [r7, #16]
 8008684:	2300      	movs	r3, #0
 8008686:	617b      	str	r3, [r7, #20]
 8008688:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800868c:	460b      	mov	r3, r1
 800868e:	4313      	orrs	r3, r2
 8008690:	d032      	beq.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8008692:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008696:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800869a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800869e:	d105      	bne.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086a0:	4b4b      	ldr	r3, [pc, #300]	@ (80087d0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80086a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086a4:	4a4a      	ldr	r2, [pc, #296]	@ (80087d0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80086a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80086aa:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80086ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80086b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80086b4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80086b8:	d108      	bne.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80086ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80086be:	3308      	adds	r3, #8
 80086c0:	4618      	mov	r0, r3
 80086c2:	f001 fe4b 	bl	800a35c <RCCEx_PLL2_Config>
 80086c6:	4603      	mov	r3, r0
 80086c8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 80086cc:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d10d      	bne.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80086d4:	4b3e      	ldr	r3, [pc, #248]	@ (80087d0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80086d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80086da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80086de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80086e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80086e6:	493a      	ldr	r1, [pc, #232]	@ (80087d0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80086e8:	4313      	orrs	r3, r2
 80086ea:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80086ee:	e003      	b.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086f0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80086f4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80086f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80086fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008700:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8008704:	60bb      	str	r3, [r7, #8]
 8008706:	2300      	movs	r3, #0
 8008708:	60fb      	str	r3, [r7, #12]
 800870a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800870e:	460b      	mov	r3, r1
 8008710:	4313      	orrs	r3, r2
 8008712:	d03a      	beq.n	800878a <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8008714:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008718:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800871c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008720:	d00e      	beq.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8008722:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008726:	d815      	bhi.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 8008728:	2b00      	cmp	r3, #0
 800872a:	d017      	beq.n	800875c <HAL_RCCEx_PeriphCLKConfig+0xad0>
 800872c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008730:	d110      	bne.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008732:	4b27      	ldr	r3, [pc, #156]	@ (80087d0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008736:	4a26      	ldr	r2, [pc, #152]	@ (80087d0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008738:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800873c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800873e:	e00e      	b.n	800875e <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008740:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008744:	3308      	adds	r3, #8
 8008746:	4618      	mov	r0, r3
 8008748:	f001 fe08 	bl	800a35c <RCCEx_PLL2_Config>
 800874c:	4603      	mov	r3, r0
 800874e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8008752:	e004      	b.n	800875e <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 8008754:	2301      	movs	r3, #1
 8008756:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800875a:	e000      	b.n	800875e <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 800875c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800875e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008762:	2b00      	cmp	r3, #0
 8008764:	d10d      	bne.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8008766:	4b1a      	ldr	r3, [pc, #104]	@ (80087d0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800876c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008770:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008774:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008778:	4915      	ldr	r1, [pc, #84]	@ (80087d0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800877a:	4313      	orrs	r3, r2
 800877c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8008780:	e003      	b.n	800878a <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008782:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008786:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800878a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800878e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008792:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008796:	603b      	str	r3, [r7, #0]
 8008798:	2300      	movs	r3, #0
 800879a:	607b      	str	r3, [r7, #4]
 800879c:	e9d7 1200 	ldrd	r1, r2, [r7]
 80087a0:	460b      	mov	r3, r1
 80087a2:	4313      	orrs	r3, r2
 80087a4:	d00c      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80087a6:	4b0a      	ldr	r3, [pc, #40]	@ (80087d0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80087a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80087ac:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80087b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80087b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80087b8:	4905      	ldr	r1, [pc, #20]	@ (80087d0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80087ba:	4313      	orrs	r3, r2
 80087bc:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80087c0:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	37e0      	adds	r7, #224	@ 0xe0
 80087c8:	46bd      	mov	sp, r7
 80087ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80087ce:	bf00      	nop
 80087d0:	46020c00 	.word	0x46020c00

080087d4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b089      	sub	sp, #36	@ 0x24
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80087dc:	4ba6      	ldr	r3, [pc, #664]	@ (8008a78 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80087de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087e4:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80087e6:	4ba4      	ldr	r3, [pc, #656]	@ (8008a78 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80087e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087ea:	f003 0303 	and.w	r3, r3, #3
 80087ee:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80087f0:	4ba1      	ldr	r3, [pc, #644]	@ (8008a78 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80087f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087f4:	0a1b      	lsrs	r3, r3, #8
 80087f6:	f003 030f 	and.w	r3, r3, #15
 80087fa:	3301      	adds	r3, #1
 80087fc:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80087fe:	4b9e      	ldr	r3, [pc, #632]	@ (8008a78 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008802:	091b      	lsrs	r3, r3, #4
 8008804:	f003 0301 	and.w	r3, r3, #1
 8008808:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800880a:	4b9b      	ldr	r3, [pc, #620]	@ (8008a78 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800880c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800880e:	08db      	lsrs	r3, r3, #3
 8008810:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008814:	68fa      	ldr	r2, [r7, #12]
 8008816:	fb02 f303 	mul.w	r3, r2, r3
 800881a:	ee07 3a90 	vmov	s15, r3
 800881e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008822:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	2b03      	cmp	r3, #3
 800882a:	d062      	beq.n	80088f2 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	2b03      	cmp	r3, #3
 8008830:	f200 8081 	bhi.w	8008936 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	2b01      	cmp	r3, #1
 8008838:	d024      	beq.n	8008884 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	2b02      	cmp	r3, #2
 800883e:	d17a      	bne.n	8008936 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	ee07 3a90 	vmov	s15, r3
 8008846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800884a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8008a7c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800884e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008852:	4b89      	ldr	r3, [pc, #548]	@ (8008a78 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008854:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800885a:	ee07 3a90 	vmov	s15, r3
 800885e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8008862:	ed97 6a02 	vldr	s12, [r7, #8]
 8008866:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8008a80 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800886a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800886e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8008872:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008876:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800887a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800887e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008882:	e08f      	b.n	80089a4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8008884:	4b7c      	ldr	r3, [pc, #496]	@ (8008a78 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008886:	689b      	ldr	r3, [r3, #8]
 8008888:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800888c:	2b00      	cmp	r3, #0
 800888e:	d005      	beq.n	800889c <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8008890:	4b79      	ldr	r3, [pc, #484]	@ (8008a78 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	0f1b      	lsrs	r3, r3, #28
 8008896:	f003 030f 	and.w	r3, r3, #15
 800889a:	e006      	b.n	80088aa <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800889c:	4b76      	ldr	r3, [pc, #472]	@ (8008a78 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800889e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80088a2:	041b      	lsls	r3, r3, #16
 80088a4:	0f1b      	lsrs	r3, r3, #28
 80088a6:	f003 030f 	and.w	r3, r3, #15
 80088aa:	4a76      	ldr	r2, [pc, #472]	@ (8008a84 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80088ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088b0:	ee07 3a90 	vmov	s15, r3
 80088b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	ee07 3a90 	vmov	s15, r3
 80088be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80088c6:	69bb      	ldr	r3, [r7, #24]
 80088c8:	ee07 3a90 	vmov	s15, r3
 80088cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088d0:	ed97 6a02 	vldr	s12, [r7, #8]
 80088d4:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8008a80 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80088d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80088e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088ec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80088f0:	e058      	b.n	80089a4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	ee07 3a90 	vmov	s15, r3
 80088f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088fc:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008a7c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8008900:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008904:	4b5c      	ldr	r3, [pc, #368]	@ (8008a78 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008906:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800890c:	ee07 3a90 	vmov	s15, r3
 8008910:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8008914:	ed97 6a02 	vldr	s12, [r7, #8]
 8008918:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8008a80 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800891c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008920:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8008924:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008928:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800892c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008930:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008934:	e036      	b.n	80089a4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8008936:	4b50      	ldr	r3, [pc, #320]	@ (8008a78 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008938:	689b      	ldr	r3, [r3, #8]
 800893a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800893e:	2b00      	cmp	r3, #0
 8008940:	d005      	beq.n	800894e <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8008942:	4b4d      	ldr	r3, [pc, #308]	@ (8008a78 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	0f1b      	lsrs	r3, r3, #28
 8008948:	f003 030f 	and.w	r3, r3, #15
 800894c:	e006      	b.n	800895c <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800894e:	4b4a      	ldr	r3, [pc, #296]	@ (8008a78 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008950:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008954:	041b      	lsls	r3, r3, #16
 8008956:	0f1b      	lsrs	r3, r3, #28
 8008958:	f003 030f 	and.w	r3, r3, #15
 800895c:	4a49      	ldr	r2, [pc, #292]	@ (8008a84 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800895e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008962:	ee07 3a90 	vmov	s15, r3
 8008966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	ee07 3a90 	vmov	s15, r3
 8008970:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008974:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008978:	69bb      	ldr	r3, [r7, #24]
 800897a:	ee07 3a90 	vmov	s15, r3
 800897e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008982:	ed97 6a02 	vldr	s12, [r7, #8]
 8008986:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8008a80 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800898a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800898e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008992:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008996:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800899a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800899e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80089a2:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80089a4:	4b34      	ldr	r3, [pc, #208]	@ (8008a78 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80089a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d017      	beq.n	80089e0 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80089b0:	4b31      	ldr	r3, [pc, #196]	@ (8008a78 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80089b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089b4:	0a5b      	lsrs	r3, r3, #9
 80089b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089ba:	ee07 3a90 	vmov	s15, r3
 80089be:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80089c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80089c6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80089ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80089ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089d6:	ee17 2a90 	vmov	r2, s15
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	601a      	str	r2, [r3, #0]
 80089de:	e002      	b.n	80089e6 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2200      	movs	r2, #0
 80089e4:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80089e6:	4b24      	ldr	r3, [pc, #144]	@ (8008a78 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80089e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d017      	beq.n	8008a22 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80089f2:	4b21      	ldr	r3, [pc, #132]	@ (8008a78 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80089f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089f6:	0c1b      	lsrs	r3, r3, #16
 80089f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089fc:	ee07 3a90 	vmov	s15, r3
 8008a00:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8008a04:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008a08:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008a0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a18:	ee17 2a90 	vmov	r2, s15
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	605a      	str	r2, [r3, #4]
 8008a20:	e002      	b.n	8008a28 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2200      	movs	r2, #0
 8008a26:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8008a28:	4b13      	ldr	r3, [pc, #76]	@ (8008a78 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d017      	beq.n	8008a64 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008a34:	4b10      	ldr	r3, [pc, #64]	@ (8008a78 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008a36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a38:	0e1b      	lsrs	r3, r3, #24
 8008a3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a3e:	ee07 3a90 	vmov	s15, r3
 8008a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8008a46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008a4a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008a4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a5a:	ee17 2a90 	vmov	r2, s15
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008a62:	e002      	b.n	8008a6a <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2200      	movs	r2, #0
 8008a68:	609a      	str	r2, [r3, #8]
}
 8008a6a:	bf00      	nop
 8008a6c:	3724      	adds	r7, #36	@ 0x24
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr
 8008a76:	bf00      	nop
 8008a78:	46020c00 	.word	0x46020c00
 8008a7c:	4b742400 	.word	0x4b742400
 8008a80:	46000000 	.word	0x46000000
 8008a84:	0802e994 	.word	0x0802e994

08008a88 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b089      	sub	sp, #36	@ 0x24
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8008a90:	4ba6      	ldr	r3, [pc, #664]	@ (8008d2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008a92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a98:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8008a9a:	4ba4      	ldr	r3, [pc, #656]	@ (8008d2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a9e:	f003 0303 	and.w	r3, r3, #3
 8008aa2:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8008aa4:	4ba1      	ldr	r3, [pc, #644]	@ (8008d2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aa8:	0a1b      	lsrs	r3, r3, #8
 8008aaa:	f003 030f 	and.w	r3, r3, #15
 8008aae:	3301      	adds	r3, #1
 8008ab0:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8008ab2:	4b9e      	ldr	r3, [pc, #632]	@ (8008d2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ab6:	091b      	lsrs	r3, r3, #4
 8008ab8:	f003 0301 	and.w	r3, r3, #1
 8008abc:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8008abe:	4b9b      	ldr	r3, [pc, #620]	@ (8008d2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ac2:	08db      	lsrs	r3, r3, #3
 8008ac4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ac8:	68fa      	ldr	r2, [r7, #12]
 8008aca:	fb02 f303 	mul.w	r3, r2, r3
 8008ace:	ee07 3a90 	vmov	s15, r3
 8008ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ad6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	2b03      	cmp	r3, #3
 8008ade:	d062      	beq.n	8008ba6 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	2b03      	cmp	r3, #3
 8008ae4:	f200 8081 	bhi.w	8008bea <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d024      	beq.n	8008b38 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	2b02      	cmp	r3, #2
 8008af2:	d17a      	bne.n	8008bea <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	ee07 3a90 	vmov	s15, r3
 8008afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008afe:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8008d30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8008b02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b06:	4b89      	ldr	r3, [pc, #548]	@ (8008d2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008b08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b0e:	ee07 3a90 	vmov	s15, r3
 8008b12:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8008b16:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b1a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8008d34 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8008b1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008b22:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8008b26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008b36:	e08f      	b.n	8008c58 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8008b38:	4b7c      	ldr	r3, [pc, #496]	@ (8008d2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008b3a:	689b      	ldr	r3, [r3, #8]
 8008b3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d005      	beq.n	8008b50 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8008b44:	4b79      	ldr	r3, [pc, #484]	@ (8008d2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008b46:	689b      	ldr	r3, [r3, #8]
 8008b48:	0f1b      	lsrs	r3, r3, #28
 8008b4a:	f003 030f 	and.w	r3, r3, #15
 8008b4e:	e006      	b.n	8008b5e <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8008b50:	4b76      	ldr	r3, [pc, #472]	@ (8008d2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008b52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008b56:	041b      	lsls	r3, r3, #16
 8008b58:	0f1b      	lsrs	r3, r3, #28
 8008b5a:	f003 030f 	and.w	r3, r3, #15
 8008b5e:	4a76      	ldr	r2, [pc, #472]	@ (8008d38 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8008b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b64:	ee07 3a90 	vmov	s15, r3
 8008b68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	ee07 3a90 	vmov	s15, r3
 8008b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008b7a:	69bb      	ldr	r3, [r7, #24]
 8008b7c:	ee07 3a90 	vmov	s15, r3
 8008b80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b84:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b88:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8008d34 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8008b8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b94:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b98:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8008b9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ba0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ba4:	e058      	b.n	8008c58 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	ee07 3a90 	vmov	s15, r3
 8008bac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bb0:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008d30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8008bb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bb8:	4b5c      	ldr	r3, [pc, #368]	@ (8008d2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008bba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bc0:	ee07 3a90 	vmov	s15, r3
 8008bc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8008bc8:	ed97 6a02 	vldr	s12, [r7, #8]
 8008bcc:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8008d34 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8008bd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008bd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8008bd8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008bdc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008be0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008be4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008be8:	e036      	b.n	8008c58 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8008bea:	4b50      	ldr	r3, [pc, #320]	@ (8008d2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d005      	beq.n	8008c02 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8008bf6:	4b4d      	ldr	r3, [pc, #308]	@ (8008d2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	0f1b      	lsrs	r3, r3, #28
 8008bfc:	f003 030f 	and.w	r3, r3, #15
 8008c00:	e006      	b.n	8008c10 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8008c02:	4b4a      	ldr	r3, [pc, #296]	@ (8008d2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008c04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008c08:	041b      	lsls	r3, r3, #16
 8008c0a:	0f1b      	lsrs	r3, r3, #28
 8008c0c:	f003 030f 	and.w	r3, r3, #15
 8008c10:	4a49      	ldr	r2, [pc, #292]	@ (8008d38 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8008c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c16:	ee07 3a90 	vmov	s15, r3
 8008c1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	ee07 3a90 	vmov	s15, r3
 8008c24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008c2c:	69bb      	ldr	r3, [r7, #24]
 8008c2e:	ee07 3a90 	vmov	s15, r3
 8008c32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c36:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c3a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8008d34 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8008c3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8008c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c56:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8008c58:	4b34      	ldr	r3, [pc, #208]	@ (8008d2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d017      	beq.n	8008c94 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008c64:	4b31      	ldr	r3, [pc, #196]	@ (8008d2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008c66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c68:	0a5b      	lsrs	r3, r3, #9
 8008c6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c6e:	ee07 3a90 	vmov	s15, r3
 8008c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8008c76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c7a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008c7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c8a:	ee17 2a90 	vmov	r2, s15
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	601a      	str	r2, [r3, #0]
 8008c92:	e002      	b.n	8008c9a <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2200      	movs	r2, #0
 8008c98:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8008c9a:	4b24      	ldr	r3, [pc, #144]	@ (8008d2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d017      	beq.n	8008cd6 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008ca6:	4b21      	ldr	r3, [pc, #132]	@ (8008d2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008ca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008caa:	0c1b      	lsrs	r3, r3, #16
 8008cac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008cb0:	ee07 3a90 	vmov	s15, r3
 8008cb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8008cb8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008cbc:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008cc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ccc:	ee17 2a90 	vmov	r2, s15
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	605a      	str	r2, [r3, #4]
 8008cd4:	e002      	b.n	8008cdc <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8008cdc:	4b13      	ldr	r3, [pc, #76]	@ (8008d2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ce0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d017      	beq.n	8008d18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008ce8:	4b10      	ldr	r3, [pc, #64]	@ (8008d2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008cea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cec:	0e1b      	lsrs	r3, r3, #24
 8008cee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008cf2:	ee07 3a90 	vmov	s15, r3
 8008cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8008cfa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008cfe:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008d02:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d0e:	ee17 2a90 	vmov	r2, s15
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008d16:	e002      	b.n	8008d1e <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	609a      	str	r2, [r3, #8]
}
 8008d1e:	bf00      	nop
 8008d20:	3724      	adds	r7, #36	@ 0x24
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr
 8008d2a:	bf00      	nop
 8008d2c:	46020c00 	.word	0x46020c00
 8008d30:	4b742400 	.word	0x4b742400
 8008d34:	46000000 	.word	0x46000000
 8008d38:	0802e994 	.word	0x0802e994

08008d3c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b089      	sub	sp, #36	@ 0x24
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8008d44:	4ba6      	ldr	r3, [pc, #664]	@ (8008fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008d46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d4c:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8008d4e:	4ba4      	ldr	r3, [pc, #656]	@ (8008fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d52:	f003 0303 	and.w	r3, r3, #3
 8008d56:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8008d58:	4ba1      	ldr	r3, [pc, #644]	@ (8008fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d5c:	0a1b      	lsrs	r3, r3, #8
 8008d5e:	f003 030f 	and.w	r3, r3, #15
 8008d62:	3301      	adds	r3, #1
 8008d64:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8008d66:	4b9e      	ldr	r3, [pc, #632]	@ (8008fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d6a:	091b      	lsrs	r3, r3, #4
 8008d6c:	f003 0301 	and.w	r3, r3, #1
 8008d70:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8008d72:	4b9b      	ldr	r3, [pc, #620]	@ (8008fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008d74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d76:	08db      	lsrs	r3, r3, #3
 8008d78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d7c:	68fa      	ldr	r2, [r7, #12]
 8008d7e:	fb02 f303 	mul.w	r3, r2, r3
 8008d82:	ee07 3a90 	vmov	s15, r3
 8008d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d8a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	2b03      	cmp	r3, #3
 8008d92:	d062      	beq.n	8008e5a <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	2b03      	cmp	r3, #3
 8008d98:	f200 8081 	bhi.w	8008e9e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	2b01      	cmp	r3, #1
 8008da0:	d024      	beq.n	8008dec <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	2b02      	cmp	r3, #2
 8008da6:	d17a      	bne.n	8008e9e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	ee07 3a90 	vmov	s15, r3
 8008dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008db2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8008fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8008db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dba:	4b89      	ldr	r3, [pc, #548]	@ (8008fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dc2:	ee07 3a90 	vmov	s15, r3
 8008dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008dca:	ed97 6a02 	vldr	s12, [r7, #8]
 8008dce:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8008fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008dd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008dda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008de6:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8008dea:	e08f      	b.n	8008f0c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008dec:	4b7c      	ldr	r3, [pc, #496]	@ (8008fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008dee:	689b      	ldr	r3, [r3, #8]
 8008df0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d005      	beq.n	8008e04 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8008df8:	4b79      	ldr	r3, [pc, #484]	@ (8008fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008dfa:	689b      	ldr	r3, [r3, #8]
 8008dfc:	0f1b      	lsrs	r3, r3, #28
 8008dfe:	f003 030f 	and.w	r3, r3, #15
 8008e02:	e006      	b.n	8008e12 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8008e04:	4b76      	ldr	r3, [pc, #472]	@ (8008fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008e06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008e0a:	041b      	lsls	r3, r3, #16
 8008e0c:	0f1b      	lsrs	r3, r3, #28
 8008e0e:	f003 030f 	and.w	r3, r3, #15
 8008e12:	4a76      	ldr	r2, [pc, #472]	@ (8008fec <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8008e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e18:	ee07 3a90 	vmov	s15, r3
 8008e1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	ee07 3a90 	vmov	s15, r3
 8008e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008e2e:	69bb      	ldr	r3, [r7, #24]
 8008e30:	ee07 3a90 	vmov	s15, r3
 8008e34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e38:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e3c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8008fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008e40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e48:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008e50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e54:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e58:	e058      	b.n	8008f0c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	ee07 3a90 	vmov	s15, r3
 8008e60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e64:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8008e68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e6c:	4b5c      	ldr	r3, [pc, #368]	@ (8008fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008e6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e74:	ee07 3a90 	vmov	s15, r3
 8008e78:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008e7c:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e80:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8008fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008e84:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008e88:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008e8c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e90:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008e94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e98:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e9c:	e036      	b.n	8008f0c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008e9e:	4b50      	ldr	r3, [pc, #320]	@ (8008fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008ea0:	689b      	ldr	r3, [r3, #8]
 8008ea2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d005      	beq.n	8008eb6 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8008eaa:	4b4d      	ldr	r3, [pc, #308]	@ (8008fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008eac:	689b      	ldr	r3, [r3, #8]
 8008eae:	0f1b      	lsrs	r3, r3, #28
 8008eb0:	f003 030f 	and.w	r3, r3, #15
 8008eb4:	e006      	b.n	8008ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8008eb6:	4b4a      	ldr	r3, [pc, #296]	@ (8008fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008eb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008ebc:	041b      	lsls	r3, r3, #16
 8008ebe:	0f1b      	lsrs	r3, r3, #28
 8008ec0:	f003 030f 	and.w	r3, r3, #15
 8008ec4:	4a49      	ldr	r2, [pc, #292]	@ (8008fec <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8008ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008eca:	ee07 3a90 	vmov	s15, r3
 8008ece:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	ee07 3a90 	vmov	s15, r3
 8008ed8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008edc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	ee07 3a90 	vmov	s15, r3
 8008ee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008eea:	ed97 6a02 	vldr	s12, [r7, #8]
 8008eee:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8008fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008ef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008efa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008efe:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f0a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8008f0c:	4b34      	ldr	r3, [pc, #208]	@ (8008fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d017      	beq.n	8008f48 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008f18:	4b31      	ldr	r3, [pc, #196]	@ (8008fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008f1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f1c:	0a5b      	lsrs	r3, r3, #9
 8008f1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f22:	ee07 3a90 	vmov	s15, r3
 8008f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8008f2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f2e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008f32:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f3e:	ee17 2a90 	vmov	r2, s15
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	601a      	str	r2, [r3, #0]
 8008f46:	e002      	b.n	8008f4e <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8008f4e:	4b24      	ldr	r3, [pc, #144]	@ (8008fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d017      	beq.n	8008f8a <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008f5a:	4b21      	ldr	r3, [pc, #132]	@ (8008fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f5e:	0c1b      	lsrs	r3, r3, #16
 8008f60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f64:	ee07 3a90 	vmov	s15, r3
 8008f68:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8008f6c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f70:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008f74:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f80:	ee17 2a90 	vmov	r2, s15
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	605a      	str	r2, [r3, #4]
 8008f88:	e002      	b.n	8008f90 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8008f90:	4b13      	ldr	r3, [pc, #76]	@ (8008fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f94:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d017      	beq.n	8008fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008f9c:	4b10      	ldr	r3, [pc, #64]	@ (8008fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008f9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fa0:	0e1b      	lsrs	r3, r3, #24
 8008fa2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008fa6:	ee07 3a90 	vmov	s15, r3
 8008faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8008fae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008fb2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008fb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008fba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fc2:	ee17 2a90 	vmov	r2, s15
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008fca:	e002      	b.n	8008fd2 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	609a      	str	r2, [r3, #8]
}
 8008fd2:	bf00      	nop
 8008fd4:	3724      	adds	r7, #36	@ 0x24
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr
 8008fde:	bf00      	nop
 8008fe0:	46020c00 	.word	0x46020c00
 8008fe4:	4b742400 	.word	0x4b742400
 8008fe8:	46000000 	.word	0x46000000
 8008fec:	0802e994 	.word	0x0802e994

08008ff0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b08e      	sub	sp, #56	@ 0x38
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8008ffa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ffe:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8009002:	430b      	orrs	r3, r1
 8009004:	d145      	bne.n	8009092 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8009006:	4baa      	ldr	r3, [pc, #680]	@ (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009008:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800900c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009010:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8009012:	4ba7      	ldr	r3, [pc, #668]	@ (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009014:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009018:	f003 0302 	and.w	r3, r3, #2
 800901c:	2b02      	cmp	r3, #2
 800901e:	d108      	bne.n	8009032 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8009020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009022:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009026:	d104      	bne.n	8009032 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8009028:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800902c:	637b      	str	r3, [r7, #52]	@ 0x34
 800902e:	f001 b987 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8009032:	4b9f      	ldr	r3, [pc, #636]	@ (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009034:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009038:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800903c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009040:	d114      	bne.n	800906c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8009042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009044:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009048:	d110      	bne.n	800906c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800904a:	4b99      	ldr	r3, [pc, #612]	@ (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800904c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009050:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009054:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009058:	d103      	bne.n	8009062 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800905a:	23fa      	movs	r3, #250	@ 0xfa
 800905c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800905e:	f001 b96f 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8009062:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009066:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009068:	f001 b96a 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800906c:	4b90      	ldr	r3, [pc, #576]	@ (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009074:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009078:	d107      	bne.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800907a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800907c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009080:	d103      	bne.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8009082:	4b8c      	ldr	r3, [pc, #560]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8009084:	637b      	str	r3, [r7, #52]	@ 0x34
 8009086:	f001 b95b 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800908a:	2300      	movs	r3, #0
 800908c:	637b      	str	r3, [r7, #52]	@ 0x34
 800908e:	f001 b957 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009092:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009096:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800909a:	430b      	orrs	r3, r1
 800909c:	d151      	bne.n	8009142 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800909e:	4b84      	ldr	r3, [pc, #528]	@ (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80090a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80090a4:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80090a8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80090aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ac:	2b80      	cmp	r3, #128	@ 0x80
 80090ae:	d035      	beq.n	800911c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80090b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090b2:	2b80      	cmp	r3, #128	@ 0x80
 80090b4:	d841      	bhi.n	800913a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80090b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090b8:	2b60      	cmp	r3, #96	@ 0x60
 80090ba:	d02a      	beq.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80090bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090be:	2b60      	cmp	r3, #96	@ 0x60
 80090c0:	d83b      	bhi.n	800913a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80090c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090c4:	2b40      	cmp	r3, #64	@ 0x40
 80090c6:	d009      	beq.n	80090dc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80090c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ca:	2b40      	cmp	r3, #64	@ 0x40
 80090cc:	d835      	bhi.n	800913a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80090ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d00c      	beq.n	80090ee <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80090d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d6:	2b20      	cmp	r3, #32
 80090d8:	d012      	beq.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80090da:	e02e      	b.n	800913a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80090dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80090e0:	4618      	mov	r0, r3
 80090e2:	f7ff fb77 	bl	80087d4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80090e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80090ea:	f001 b929 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090ee:	f107 0318 	add.w	r3, r7, #24
 80090f2:	4618      	mov	r0, r3
 80090f4:	f7ff fcc8 	bl	8008a88 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80090f8:	69bb      	ldr	r3, [r7, #24]
 80090fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80090fc:	f001 b920 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009100:	f107 030c 	add.w	r3, r7, #12
 8009104:	4618      	mov	r0, r3
 8009106:	f7ff fe19 	bl	8008d3c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800910e:	f001 b917 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8009112:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8009116:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009118:	f001 b912 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800911c:	4b64      	ldr	r3, [pc, #400]	@ (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009124:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009128:	d103      	bne.n	8009132 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800912a:	4b63      	ldr	r3, [pc, #396]	@ (80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800912c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800912e:	f001 b907 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009132:	2300      	movs	r3, #0
 8009134:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009136:	f001 b903 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 800913a:	2300      	movs	r3, #0
 800913c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800913e:	f001 b8ff 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8009142:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009146:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800914a:	430b      	orrs	r3, r1
 800914c:	d158      	bne.n	8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800914e:	4b58      	ldr	r3, [pc, #352]	@ (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009150:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009154:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009158:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800915a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800915c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009160:	d03b      	beq.n	80091da <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8009162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009164:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009168:	d846      	bhi.n	80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800916a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800916c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009170:	d02e      	beq.n	80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8009172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009174:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009178:	d83e      	bhi.n	80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800917a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800917c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009180:	d00b      	beq.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8009182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009184:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009188:	d836      	bhi.n	80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800918a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800918c:	2b00      	cmp	r3, #0
 800918e:	d00d      	beq.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8009190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009192:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009196:	d012      	beq.n	80091be <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8009198:	e02e      	b.n	80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800919a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800919e:	4618      	mov	r0, r3
 80091a0:	f7ff fb18 	bl	80087d4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80091a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80091a8:	f001 b8ca 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091ac:	f107 0318 	add.w	r3, r7, #24
 80091b0:	4618      	mov	r0, r3
 80091b2:	f7ff fc69 	bl	8008a88 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80091b6:	69bb      	ldr	r3, [r7, #24]
 80091b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80091ba:	f001 b8c1 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091be:	f107 030c 	add.w	r3, r7, #12
 80091c2:	4618      	mov	r0, r3
 80091c4:	f7ff fdba 	bl	8008d3c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80091cc:	f001 b8b8 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80091d0:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80091d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80091d6:	f001 b8b3 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80091da:	4b35      	ldr	r3, [pc, #212]	@ (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80091e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80091e6:	d103      	bne.n	80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 80091e8:	4b33      	ldr	r3, [pc, #204]	@ (80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80091ea:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80091ec:	f001 b8a8 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80091f0:	2300      	movs	r3, #0
 80091f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80091f4:	f001 b8a4 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 80091f8:	2300      	movs	r3, #0
 80091fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80091fc:	f001 b8a0 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8009200:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009204:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8009208:	430b      	orrs	r3, r1
 800920a:	d16e      	bne.n	80092ea <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800920c:	4b28      	ldr	r3, [pc, #160]	@ (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800920e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009212:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8009216:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800921a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800921e:	d034      	beq.n	800928a <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 8009220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009222:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8009226:	d85c      	bhi.n	80092e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8009228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800922a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800922e:	d00b      	beq.n	8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8009230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009232:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009236:	d854      	bhi.n	80092e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8009238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800923a:	2b00      	cmp	r3, #0
 800923c:	d016      	beq.n	800926c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 800923e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009240:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009244:	d009      	beq.n	800925a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8009246:	e04c      	b.n	80092e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009248:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800924c:	4618      	mov	r0, r3
 800924e:	f7ff fac1 	bl	80087d4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8009252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009254:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009256:	f001 b873 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800925a:	f107 0318 	add.w	r3, r7, #24
 800925e:	4618      	mov	r0, r3
 8009260:	f7ff fc12 	bl	8008a88 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8009264:	69fb      	ldr	r3, [r7, #28]
 8009266:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009268:	f001 b86a 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800926c:	4b10      	ldr	r3, [pc, #64]	@ (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009274:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009278:	d103      	bne.n	8009282 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 800927a:	4b10      	ldr	r3, [pc, #64]	@ (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800927c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800927e:	f001 b85f 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009282:	2300      	movs	r3, #0
 8009284:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009286:	f001 b85b 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800928a:	4b09      	ldr	r3, [pc, #36]	@ (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f003 0320 	and.w	r3, r3, #32
 8009292:	2b20      	cmp	r3, #32
 8009294:	d121      	bne.n	80092da <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009296:	4b06      	ldr	r3, [pc, #24]	@ (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009298:	689b      	ldr	r3, [r3, #8]
 800929a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d00e      	beq.n	80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 80092a2:	4b03      	ldr	r3, [pc, #12]	@ (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80092a4:	689b      	ldr	r3, [r3, #8]
 80092a6:	0e1b      	lsrs	r3, r3, #24
 80092a8:	f003 030f 	and.w	r3, r3, #15
 80092ac:	e00f      	b.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 80092ae:	bf00      	nop
 80092b0:	46020c00 	.word	0x46020c00
 80092b4:	0007a120 	.word	0x0007a120
 80092b8:	00f42400 	.word	0x00f42400
 80092bc:	02dc6c00 	.word	0x02dc6c00
 80092c0:	4ba7      	ldr	r3, [pc, #668]	@ (8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80092c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80092c6:	041b      	lsls	r3, r3, #16
 80092c8:	0e1b      	lsrs	r3, r3, #24
 80092ca:	f003 030f 	and.w	r3, r3, #15
 80092ce:	4aa5      	ldr	r2, [pc, #660]	@ (8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80092d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092d4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80092d6:	f001 b833 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80092da:	2300      	movs	r3, #0
 80092dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80092de:	f001 b82f 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 80092e2:	2300      	movs	r3, #0
 80092e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80092e6:	f001 b82b 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80092ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092ee:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 80092f2:	430b      	orrs	r3, r1
 80092f4:	d17f      	bne.n	80093f6 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80092f6:	4b9a      	ldr	r3, [pc, #616]	@ (8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80092f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80092fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009300:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8009302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009304:	2b00      	cmp	r3, #0
 8009306:	d165      	bne.n	80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8009308:	4b95      	ldr	r3, [pc, #596]	@ (8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800930a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800930e:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8009312:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8009314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009316:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800931a:	d034      	beq.n	8009386 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800931c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800931e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8009322:	d853      	bhi.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8009324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009326:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800932a:	d00b      	beq.n	8009344 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 800932c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800932e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009332:	d84b      	bhi.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8009334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009336:	2b00      	cmp	r3, #0
 8009338:	d016      	beq.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 800933a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800933c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009340:	d009      	beq.n	8009356 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8009342:	e043      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009344:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009348:	4618      	mov	r0, r3
 800934a:	f7ff fa43 	bl	80087d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800934e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009350:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009352:	f000 bff5 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009356:	f107 0318 	add.w	r3, r7, #24
 800935a:	4618      	mov	r0, r3
 800935c:	f7ff fb94 	bl	8008a88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009360:	69fb      	ldr	r3, [r7, #28]
 8009362:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009364:	f000 bfec 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8009368:	4b7d      	ldr	r3, [pc, #500]	@ (8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009370:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009374:	d103      	bne.n	800937e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 8009376:	4b7c      	ldr	r3, [pc, #496]	@ (8009568 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8009378:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800937a:	f000 bfe1 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 800937e:	2300      	movs	r3, #0
 8009380:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009382:	f000 bfdd 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009386:	4b76      	ldr	r3, [pc, #472]	@ (8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f003 0320 	and.w	r3, r3, #32
 800938e:	2b20      	cmp	r3, #32
 8009390:	d118      	bne.n	80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009392:	4b73      	ldr	r3, [pc, #460]	@ (8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8009394:	689b      	ldr	r3, [r3, #8]
 8009396:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800939a:	2b00      	cmp	r3, #0
 800939c:	d005      	beq.n	80093aa <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800939e:	4b70      	ldr	r3, [pc, #448]	@ (8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80093a0:	689b      	ldr	r3, [r3, #8]
 80093a2:	0e1b      	lsrs	r3, r3, #24
 80093a4:	f003 030f 	and.w	r3, r3, #15
 80093a8:	e006      	b.n	80093b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 80093aa:	4b6d      	ldr	r3, [pc, #436]	@ (8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80093ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80093b0:	041b      	lsls	r3, r3, #16
 80093b2:	0e1b      	lsrs	r3, r3, #24
 80093b4:	f003 030f 	and.w	r3, r3, #15
 80093b8:	4a6a      	ldr	r2, [pc, #424]	@ (8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80093ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093be:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80093c0:	f000 bfbe 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 80093c4:	2300      	movs	r3, #0
 80093c6:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80093c8:	f000 bfba 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 80093cc:	2300      	movs	r3, #0
 80093ce:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80093d0:	f000 bfb6 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 80093d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80093da:	d108      	bne.n	80093ee <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80093dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80093e0:	4618      	mov	r0, r3
 80093e2:	f7ff f9f7 	bl	80087d4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80093e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80093ea:	f000 bfa9 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 80093ee:	2300      	movs	r3, #0
 80093f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80093f2:	f000 bfa5 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80093f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093fa:	1e51      	subs	r1, r2, #1
 80093fc:	430b      	orrs	r3, r1
 80093fe:	d136      	bne.n	800946e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8009400:	4b57      	ldr	r3, [pc, #348]	@ (8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8009402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009406:	f003 0303 	and.w	r3, r3, #3
 800940a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800940c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800940e:	2b00      	cmp	r3, #0
 8009410:	d104      	bne.n	800941c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8009412:	f7fe fb55 	bl	8007ac0 <HAL_RCC_GetPCLK2Freq>
 8009416:	6378      	str	r0, [r7, #52]	@ 0x34
 8009418:	f000 bf92 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800941c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800941e:	2b01      	cmp	r3, #1
 8009420:	d104      	bne.n	800942c <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009422:	f7fe fa1d 	bl	8007860 <HAL_RCC_GetSysClockFreq>
 8009426:	6378      	str	r0, [r7, #52]	@ 0x34
 8009428:	f000 bf8a 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800942c:	4b4c      	ldr	r3, [pc, #304]	@ (8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009434:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009438:	d106      	bne.n	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 800943a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800943c:	2b02      	cmp	r3, #2
 800943e:	d103      	bne.n	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 8009440:	4b4a      	ldr	r3, [pc, #296]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8009442:	637b      	str	r3, [r7, #52]	@ 0x34
 8009444:	f000 bf7c 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8009448:	4b45      	ldr	r3, [pc, #276]	@ (8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800944a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800944e:	f003 0302 	and.w	r3, r3, #2
 8009452:	2b02      	cmp	r3, #2
 8009454:	d107      	bne.n	8009466 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8009456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009458:	2b03      	cmp	r3, #3
 800945a:	d104      	bne.n	8009466 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 800945c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009460:	637b      	str	r3, [r7, #52]	@ 0x34
 8009462:	f000 bf6d 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8009466:	2300      	movs	r3, #0
 8009468:	637b      	str	r3, [r7, #52]	@ 0x34
 800946a:	f000 bf69 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800946e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009472:	1e91      	subs	r1, r2, #2
 8009474:	430b      	orrs	r3, r1
 8009476:	d136      	bne.n	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8009478:	4b39      	ldr	r3, [pc, #228]	@ (8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800947a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800947e:	f003 030c 	and.w	r3, r3, #12
 8009482:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8009484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009486:	2b00      	cmp	r3, #0
 8009488:	d104      	bne.n	8009494 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800948a:	f7fe fb05 	bl	8007a98 <HAL_RCC_GetPCLK1Freq>
 800948e:	6378      	str	r0, [r7, #52]	@ 0x34
 8009490:	f000 bf56 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8009494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009496:	2b04      	cmp	r3, #4
 8009498:	d104      	bne.n	80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800949a:	f7fe f9e1 	bl	8007860 <HAL_RCC_GetSysClockFreq>
 800949e:	6378      	str	r0, [r7, #52]	@ 0x34
 80094a0:	f000 bf4e 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80094a4:	4b2e      	ldr	r3, [pc, #184]	@ (8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80094ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80094b0:	d106      	bne.n	80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80094b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094b4:	2b08      	cmp	r3, #8
 80094b6:	d103      	bne.n	80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 80094b8:	4b2c      	ldr	r3, [pc, #176]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80094ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80094bc:	f000 bf40 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80094c0:	4b27      	ldr	r3, [pc, #156]	@ (8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80094c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80094c6:	f003 0302 	and.w	r3, r3, #2
 80094ca:	2b02      	cmp	r3, #2
 80094cc:	d107      	bne.n	80094de <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 80094ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d0:	2b0c      	cmp	r3, #12
 80094d2:	d104      	bne.n	80094de <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 80094d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80094d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80094da:	f000 bf31 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 80094de:	2300      	movs	r3, #0
 80094e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80094e2:	f000 bf2d 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 80094e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094ea:	1f11      	subs	r1, r2, #4
 80094ec:	430b      	orrs	r3, r1
 80094ee:	d13f      	bne.n	8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80094f0:	4b1b      	ldr	r3, [pc, #108]	@ (8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80094f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80094f6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80094fa:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80094fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d104      	bne.n	800950c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009502:	f7fe fac9 	bl	8007a98 <HAL_RCC_GetPCLK1Freq>
 8009506:	6378      	str	r0, [r7, #52]	@ 0x34
 8009508:	f000 bf1a 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800950c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800950e:	2b10      	cmp	r3, #16
 8009510:	d104      	bne.n	800951c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009512:	f7fe f9a5 	bl	8007860 <HAL_RCC_GetSysClockFreq>
 8009516:	6378      	str	r0, [r7, #52]	@ 0x34
 8009518:	f000 bf12 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800951c:	4b10      	ldr	r3, [pc, #64]	@ (8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009524:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009528:	d106      	bne.n	8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800952a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800952c:	2b20      	cmp	r3, #32
 800952e:	d103      	bne.n	8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 8009530:	4b0e      	ldr	r3, [pc, #56]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8009532:	637b      	str	r3, [r7, #52]	@ 0x34
 8009534:	f000 bf04 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8009538:	4b09      	ldr	r3, [pc, #36]	@ (8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800953a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800953e:	f003 0302 	and.w	r3, r3, #2
 8009542:	2b02      	cmp	r3, #2
 8009544:	d107      	bne.n	8009556 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8009546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009548:	2b30      	cmp	r3, #48	@ 0x30
 800954a:	d104      	bne.n	8009556 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 800954c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009550:	637b      	str	r3, [r7, #52]	@ 0x34
 8009552:	f000 bef5 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8009556:	2300      	movs	r3, #0
 8009558:	637b      	str	r3, [r7, #52]	@ 0x34
 800955a:	f000 bef1 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800955e:	bf00      	nop
 8009560:	46020c00 	.word	0x46020c00
 8009564:	0802e994 	.word	0x0802e994
 8009568:	02dc6c00 	.word	0x02dc6c00
 800956c:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8009570:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009574:	f1a2 0108 	sub.w	r1, r2, #8
 8009578:	430b      	orrs	r3, r1
 800957a:	d136      	bne.n	80095ea <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800957c:	4ba4      	ldr	r3, [pc, #656]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800957e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009582:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009586:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8009588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800958a:	2b00      	cmp	r3, #0
 800958c:	d104      	bne.n	8009598 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800958e:	f7fe fa83 	bl	8007a98 <HAL_RCC_GetPCLK1Freq>
 8009592:	6378      	str	r0, [r7, #52]	@ 0x34
 8009594:	f000 bed4 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8009598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800959a:	2b40      	cmp	r3, #64	@ 0x40
 800959c:	d104      	bne.n	80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800959e:	f7fe f95f 	bl	8007860 <HAL_RCC_GetSysClockFreq>
 80095a2:	6378      	str	r0, [r7, #52]	@ 0x34
 80095a4:	f000 becc 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80095a8:	4b99      	ldr	r3, [pc, #612]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80095b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095b4:	d106      	bne.n	80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 80095b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095b8:	2b80      	cmp	r3, #128	@ 0x80
 80095ba:	d103      	bne.n	80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 80095bc:	4b95      	ldr	r3, [pc, #596]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80095be:	637b      	str	r3, [r7, #52]	@ 0x34
 80095c0:	f000 bebe 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80095c4:	4b92      	ldr	r3, [pc, #584]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80095c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80095ca:	f003 0302 	and.w	r3, r3, #2
 80095ce:	2b02      	cmp	r3, #2
 80095d0:	d107      	bne.n	80095e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 80095d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095d4:	2bc0      	cmp	r3, #192	@ 0xc0
 80095d6:	d104      	bne.n	80095e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 80095d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80095dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80095de:	f000 beaf 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 80095e2:	2300      	movs	r3, #0
 80095e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80095e6:	f000 beab 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 80095ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095ee:	f1a2 0110 	sub.w	r1, r2, #16
 80095f2:	430b      	orrs	r3, r1
 80095f4:	d139      	bne.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80095f6:	4b86      	ldr	r3, [pc, #536]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80095f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80095fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009600:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8009602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009604:	2b00      	cmp	r3, #0
 8009606:	d104      	bne.n	8009612 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009608:	f7fe fa46 	bl	8007a98 <HAL_RCC_GetPCLK1Freq>
 800960c:	6378      	str	r0, [r7, #52]	@ 0x34
 800960e:	f000 be97 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8009612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009614:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009618:	d104      	bne.n	8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800961a:	f7fe f921 	bl	8007860 <HAL_RCC_GetSysClockFreq>
 800961e:	6378      	str	r0, [r7, #52]	@ 0x34
 8009620:	f000 be8e 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8009624:	4b7a      	ldr	r3, [pc, #488]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800962c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009630:	d107      	bne.n	8009642 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 8009632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009634:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009638:	d103      	bne.n	8009642 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 800963a:	4b76      	ldr	r3, [pc, #472]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800963c:	637b      	str	r3, [r7, #52]	@ 0x34
 800963e:	f000 be7f 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8009642:	4b73      	ldr	r3, [pc, #460]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8009644:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009648:	f003 0302 	and.w	r3, r3, #2
 800964c:	2b02      	cmp	r3, #2
 800964e:	d108      	bne.n	8009662 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 8009650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009652:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009656:	d104      	bne.n	8009662 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 8009658:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800965c:	637b      	str	r3, [r7, #52]	@ 0x34
 800965e:	f000 be6f 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8009662:	2300      	movs	r3, #0
 8009664:	637b      	str	r3, [r7, #52]	@ 0x34
 8009666:	f000 be6b 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800966a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800966e:	f1a2 0120 	sub.w	r1, r2, #32
 8009672:	430b      	orrs	r3, r1
 8009674:	d158      	bne.n	8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8009676:	4b66      	ldr	r3, [pc, #408]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8009678:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800967c:	f003 0307 	and.w	r3, r3, #7
 8009680:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8009682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009684:	2b00      	cmp	r3, #0
 8009686:	d104      	bne.n	8009692 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8009688:	f7fe fa2e 	bl	8007ae8 <HAL_RCC_GetPCLK3Freq>
 800968c:	6378      	str	r0, [r7, #52]	@ 0x34
 800968e:	f000 be57 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8009692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009694:	2b01      	cmp	r3, #1
 8009696:	d104      	bne.n	80096a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009698:	f7fe f8e2 	bl	8007860 <HAL_RCC_GetSysClockFreq>
 800969c:	6378      	str	r0, [r7, #52]	@ 0x34
 800969e:	f000 be4f 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80096a2:	4b5b      	ldr	r3, [pc, #364]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80096aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80096ae:	d106      	bne.n	80096be <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 80096b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096b2:	2b02      	cmp	r3, #2
 80096b4:	d103      	bne.n	80096be <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 80096b6:	4b57      	ldr	r3, [pc, #348]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80096b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80096ba:	f000 be41 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80096be:	4b54      	ldr	r3, [pc, #336]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80096c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80096c4:	f003 0302 	and.w	r3, r3, #2
 80096c8:	2b02      	cmp	r3, #2
 80096ca:	d107      	bne.n	80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 80096cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ce:	2b03      	cmp	r3, #3
 80096d0:	d104      	bne.n	80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 80096d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80096d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80096d8:	f000 be32 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 80096dc:	4b4c      	ldr	r3, [pc, #304]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f003 0320 	and.w	r3, r3, #32
 80096e4:	2b20      	cmp	r3, #32
 80096e6:	d11b      	bne.n	8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 80096e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ea:	2b04      	cmp	r3, #4
 80096ec:	d118      	bne.n	8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80096ee:	4b48      	ldr	r3, [pc, #288]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80096f0:	689b      	ldr	r3, [r3, #8]
 80096f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d005      	beq.n	8009706 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 80096fa:	4b45      	ldr	r3, [pc, #276]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80096fc:	689b      	ldr	r3, [r3, #8]
 80096fe:	0e1b      	lsrs	r3, r3, #24
 8009700:	f003 030f 	and.w	r3, r3, #15
 8009704:	e006      	b.n	8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009706:	4b42      	ldr	r3, [pc, #264]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8009708:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800970c:	041b      	lsls	r3, r3, #16
 800970e:	0e1b      	lsrs	r3, r3, #24
 8009710:	f003 030f 	and.w	r3, r3, #15
 8009714:	4a40      	ldr	r2, [pc, #256]	@ (8009818 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8009716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800971a:	637b      	str	r3, [r7, #52]	@ 0x34
 800971c:	f000 be10 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8009720:	2300      	movs	r3, #0
 8009722:	637b      	str	r3, [r7, #52]	@ 0x34
 8009724:	f000 be0c 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8009728:	e9d7 2300 	ldrd	r2, r3, [r7]
 800972c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009730:	430b      	orrs	r3, r1
 8009732:	d173      	bne.n	800981c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8009734:	4b36      	ldr	r3, [pc, #216]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8009736:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800973a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800973e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8009740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009742:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009746:	d104      	bne.n	8009752 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009748:	f7fe f88a 	bl	8007860 <HAL_RCC_GetSysClockFreq>
 800974c:	6378      	str	r0, [r7, #52]	@ 0x34
 800974e:	f000 bdf7 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8009752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009754:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009758:	d108      	bne.n	800976c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800975a:	f107 0318 	add.w	r3, r7, #24
 800975e:	4618      	mov	r0, r3
 8009760:	f7ff f992 	bl	8008a88 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8009764:	6a3b      	ldr	r3, [r7, #32]
 8009766:	637b      	str	r3, [r7, #52]	@ 0x34
 8009768:	f000 bdea 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800976c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800976e:	2b00      	cmp	r3, #0
 8009770:	d104      	bne.n	800977c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8009772:	f7fe f977 	bl	8007a64 <HAL_RCC_GetHCLKFreq>
 8009776:	6378      	str	r0, [r7, #52]	@ 0x34
 8009778:	f000 bde2 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800977c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800977e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009782:	d122      	bne.n	80097ca <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009784:	4b22      	ldr	r3, [pc, #136]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f003 0320 	and.w	r3, r3, #32
 800978c:	2b20      	cmp	r3, #32
 800978e:	d118      	bne.n	80097c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009790:	4b1f      	ldr	r3, [pc, #124]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8009792:	689b      	ldr	r3, [r3, #8]
 8009794:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009798:	2b00      	cmp	r3, #0
 800979a:	d005      	beq.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 800979c:	4b1c      	ldr	r3, [pc, #112]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800979e:	689b      	ldr	r3, [r3, #8]
 80097a0:	0e1b      	lsrs	r3, r3, #24
 80097a2:	f003 030f 	and.w	r3, r3, #15
 80097a6:	e006      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 80097a8:	4b19      	ldr	r3, [pc, #100]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80097aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80097ae:	041b      	lsls	r3, r3, #16
 80097b0:	0e1b      	lsrs	r3, r3, #24
 80097b2:	f003 030f 	and.w	r3, r3, #15
 80097b6:	4a18      	ldr	r2, [pc, #96]	@ (8009818 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 80097b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80097be:	f000 bdbf 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 80097c2:	2300      	movs	r3, #0
 80097c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80097c6:	f000 bdbb 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80097ca:	4b11      	ldr	r3, [pc, #68]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097d6:	d107      	bne.n	80097e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 80097d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097da:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80097de:	d103      	bne.n	80097e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 80097e0:	4b0c      	ldr	r3, [pc, #48]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80097e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80097e4:	f000 bdac 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80097e8:	4b09      	ldr	r3, [pc, #36]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80097f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80097f4:	d107      	bne.n	8009806 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80097f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80097fc:	d103      	bne.n	8009806 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 80097fe:	4b05      	ldr	r3, [pc, #20]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8009800:	637b      	str	r3, [r7, #52]	@ 0x34
 8009802:	f000 bd9d 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8009806:	2300      	movs	r3, #0
 8009808:	637b      	str	r3, [r7, #52]	@ 0x34
 800980a:	f000 bd99 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800980e:	bf00      	nop
 8009810:	46020c00 	.word	0x46020c00
 8009814:	00f42400 	.word	0x00f42400
 8009818:	0802e994 	.word	0x0802e994
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800981c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009820:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8009824:	430b      	orrs	r3, r1
 8009826:	d158      	bne.n	80098da <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8009828:	4bad      	ldr	r3, [pc, #692]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800982a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800982e:	f003 0307 	and.w	r3, r3, #7
 8009832:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009836:	2b04      	cmp	r3, #4
 8009838:	d84b      	bhi.n	80098d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800983a:	a201      	add	r2, pc, #4	@ (adr r2, 8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800983c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009840:	08009879 	.word	0x08009879
 8009844:	08009855 	.word	0x08009855
 8009848:	08009867 	.word	0x08009867
 800984c:	08009883 	.word	0x08009883
 8009850:	0800988d 	.word	0x0800988d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009854:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009858:	4618      	mov	r0, r3
 800985a:	f7fe ffbb 	bl	80087d4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800985e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009860:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009862:	f000 bd6d 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009866:	f107 030c 	add.w	r3, r7, #12
 800986a:	4618      	mov	r0, r3
 800986c:	f7ff fa66 	bl	8008d3c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009874:	f000 bd64 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8009878:	f7fe f8f4 	bl	8007a64 <HAL_RCC_GetHCLKFreq>
 800987c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800987e:	f000 bd5f 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8009882:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8009886:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009888:	f000 bd5a 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800988c:	4b94      	ldr	r3, [pc, #592]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f003 0320 	and.w	r3, r3, #32
 8009894:	2b20      	cmp	r3, #32
 8009896:	d118      	bne.n	80098ca <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009898:	4b91      	ldr	r3, [pc, #580]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800989a:	689b      	ldr	r3, [r3, #8]
 800989c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d005      	beq.n	80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 80098a4:	4b8e      	ldr	r3, [pc, #568]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80098a6:	689b      	ldr	r3, [r3, #8]
 80098a8:	0e1b      	lsrs	r3, r3, #24
 80098aa:	f003 030f 	and.w	r3, r3, #15
 80098ae:	e006      	b.n	80098be <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 80098b0:	4b8b      	ldr	r3, [pc, #556]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80098b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80098b6:	041b      	lsls	r3, r3, #16
 80098b8:	0e1b      	lsrs	r3, r3, #24
 80098ba:	f003 030f 	and.w	r3, r3, #15
 80098be:	4a89      	ldr	r2, [pc, #548]	@ (8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80098c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80098c4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80098c6:	f000 bd3b 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80098ca:	2300      	movs	r3, #0
 80098cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80098ce:	f000 bd37 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80098d2:	2300      	movs	r3, #0
 80098d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80098d6:	f000 bd33 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 80098da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098de:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 80098e2:	430b      	orrs	r3, r1
 80098e4:	d167      	bne.n	80099b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 80098e6:	4b7e      	ldr	r3, [pc, #504]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80098e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80098ec:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80098f0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80098f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098f4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80098f8:	d036      	beq.n	8009968 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 80098fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009900:	d855      	bhi.n	80099ae <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8009902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009904:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009908:	d029      	beq.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800990a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800990c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009910:	d84d      	bhi.n	80099ae <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8009912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009914:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009918:	d013      	beq.n	8009942 <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 800991a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800991c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009920:	d845      	bhi.n	80099ae <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8009922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009924:	2b00      	cmp	r3, #0
 8009926:	d015      	beq.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8009928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800992a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800992e:	d13e      	bne.n	80099ae <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009930:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009934:	4618      	mov	r0, r3
 8009936:	f7fe ff4d 	bl	80087d4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800993a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800993c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800993e:	f000 bcff 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009942:	f107 030c 	add.w	r3, r7, #12
 8009946:	4618      	mov	r0, r3
 8009948:	f7ff f9f8 	bl	8008d3c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009950:	f000 bcf6 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8009954:	f7fe f886 	bl	8007a64 <HAL_RCC_GetHCLKFreq>
 8009958:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800995a:	f000 bcf1 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800995e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8009962:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009964:	f000 bcec 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009968:	4b5d      	ldr	r3, [pc, #372]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f003 0320 	and.w	r3, r3, #32
 8009970:	2b20      	cmp	r3, #32
 8009972:	d118      	bne.n	80099a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009974:	4b5a      	ldr	r3, [pc, #360]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009976:	689b      	ldr	r3, [r3, #8]
 8009978:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800997c:	2b00      	cmp	r3, #0
 800997e:	d005      	beq.n	800998c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 8009980:	4b57      	ldr	r3, [pc, #348]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009982:	689b      	ldr	r3, [r3, #8]
 8009984:	0e1b      	lsrs	r3, r3, #24
 8009986:	f003 030f 	and.w	r3, r3, #15
 800998a:	e006      	b.n	800999a <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 800998c:	4b54      	ldr	r3, [pc, #336]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800998e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009992:	041b      	lsls	r3, r3, #16
 8009994:	0e1b      	lsrs	r3, r3, #24
 8009996:	f003 030f 	and.w	r3, r3, #15
 800999a:	4a52      	ldr	r2, [pc, #328]	@ (8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800999c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099a0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80099a2:	f000 bccd 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80099a6:	2300      	movs	r3, #0
 80099a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80099aa:	f000 bcc9 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80099ae:	2300      	movs	r3, #0
 80099b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80099b2:	f000 bcc5 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80099b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099ba:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 80099be:	430b      	orrs	r3, r1
 80099c0:	d14c      	bne.n	8009a5c <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80099c2:	4b47      	ldr	r3, [pc, #284]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80099c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80099c8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80099cc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80099ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d104      	bne.n	80099de <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80099d4:	f7fe f860 	bl	8007a98 <HAL_RCC_GetPCLK1Freq>
 80099d8:	6378      	str	r0, [r7, #52]	@ 0x34
 80099da:	f000 bcb1 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80099de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099e4:	d104      	bne.n	80099f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80099e6:	f7fd ff3b 	bl	8007860 <HAL_RCC_GetSysClockFreq>
 80099ea:	6378      	str	r0, [r7, #52]	@ 0x34
 80099ec:	f000 bca8 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80099f0:	4b3b      	ldr	r3, [pc, #236]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80099f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099fc:	d107      	bne.n	8009a0e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 80099fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009a04:	d103      	bne.n	8009a0e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 8009a06:	4b38      	ldr	r3, [pc, #224]	@ (8009ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009a08:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a0a:	f000 bc99 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8009a0e:	4b34      	ldr	r3, [pc, #208]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f003 0320 	and.w	r3, r3, #32
 8009a16:	2b20      	cmp	r3, #32
 8009a18:	d11c      	bne.n	8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8009a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a1c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009a20:	d118      	bne.n	8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009a22:	4b2f      	ldr	r3, [pc, #188]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009a24:	689b      	ldr	r3, [r3, #8]
 8009a26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d005      	beq.n	8009a3a <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8009a2e:	4b2c      	ldr	r3, [pc, #176]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009a30:	689b      	ldr	r3, [r3, #8]
 8009a32:	0e1b      	lsrs	r3, r3, #24
 8009a34:	f003 030f 	and.w	r3, r3, #15
 8009a38:	e006      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 8009a3a:	4b29      	ldr	r3, [pc, #164]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009a3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009a40:	041b      	lsls	r3, r3, #16
 8009a42:	0e1b      	lsrs	r3, r3, #24
 8009a44:	f003 030f 	and.w	r3, r3, #15
 8009a48:	4a26      	ldr	r2, [pc, #152]	@ (8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8009a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a50:	f000 bc76 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8009a54:	2300      	movs	r3, #0
 8009a56:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a58:	f000 bc72 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8009a5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a60:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8009a64:	430b      	orrs	r3, r1
 8009a66:	d152      	bne.n	8009b0e <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8009a68:	4b1d      	ldr	r3, [pc, #116]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009a6e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009a72:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8009a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d104      	bne.n	8009a84 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009a7a:	f7fe f80d 	bl	8007a98 <HAL_RCC_GetPCLK1Freq>
 8009a7e:	6378      	str	r0, [r7, #52]	@ 0x34
 8009a80:	f000 bc5e 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8009a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a8a:	d104      	bne.n	8009a96 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009a8c:	f7fd fee8 	bl	8007860 <HAL_RCC_GetSysClockFreq>
 8009a90:	6378      	str	r0, [r7, #52]	@ 0x34
 8009a92:	f000 bc55 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8009a96:	4b12      	ldr	r3, [pc, #72]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009a9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009aa2:	d107      	bne.n	8009ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 8009aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aa6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009aaa:	d103      	bne.n	8009ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 8009aac:	4b0e      	ldr	r3, [pc, #56]	@ (8009ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009aae:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ab0:	f000 bc46 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8009ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f003 0320 	and.w	r3, r3, #32
 8009abc:	2b20      	cmp	r3, #32
 8009abe:	d122      	bne.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 8009ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ac2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009ac6:	d11e      	bne.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009ac8:	4b05      	ldr	r3, [pc, #20]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009aca:	689b      	ldr	r3, [r3, #8]
 8009acc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d00b      	beq.n	8009aec <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 8009ad4:	4b02      	ldr	r3, [pc, #8]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009ad6:	689b      	ldr	r3, [r3, #8]
 8009ad8:	0e1b      	lsrs	r3, r3, #24
 8009ada:	f003 030f 	and.w	r3, r3, #15
 8009ade:	e00c      	b.n	8009afa <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8009ae0:	46020c00 	.word	0x46020c00
 8009ae4:	0802e994 	.word	0x0802e994
 8009ae8:	00f42400 	.word	0x00f42400
 8009aec:	4ba1      	ldr	r3, [pc, #644]	@ (8009d74 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009aee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009af2:	041b      	lsls	r3, r3, #16
 8009af4:	0e1b      	lsrs	r3, r3, #24
 8009af6:	f003 030f 	and.w	r3, r3, #15
 8009afa:	4a9f      	ldr	r2, [pc, #636]	@ (8009d78 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b00:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b02:	f000 bc1d 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8009b06:	2300      	movs	r3, #0
 8009b08:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b0a:	f000 bc19 	b.w	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8009b0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b12:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8009b16:	430b      	orrs	r3, r1
 8009b18:	d151      	bne.n	8009bbe <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8009b1a:	4b96      	ldr	r3, [pc, #600]	@ (8009d74 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009b1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009b20:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009b24:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b28:	2bc0      	cmp	r3, #192	@ 0xc0
 8009b2a:	d024      	beq.n	8009b76 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8009b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b2e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009b30:	d842      	bhi.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8009b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b34:	2b80      	cmp	r3, #128	@ 0x80
 8009b36:	d00d      	beq.n	8009b54 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8009b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b3a:	2b80      	cmp	r3, #128	@ 0x80
 8009b3c:	d83c      	bhi.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8009b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d003      	beq.n	8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8009b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b46:	2b40      	cmp	r3, #64	@ 0x40
 8009b48:	d011      	beq.n	8009b6e <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 8009b4a:	e035      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8009b4c:	f7fd ffcc 	bl	8007ae8 <HAL_RCC_GetPCLK3Freq>
 8009b50:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009b52:	e3f5      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009b54:	4b87      	ldr	r3, [pc, #540]	@ (8009d74 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009b5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b60:	d102      	bne.n	8009b68 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 8009b62:	4b86      	ldr	r3, [pc, #536]	@ (8009d7c <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8009b64:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009b66:	e3eb      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b6c:	e3e8      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8009b6e:	f7fd fe77 	bl	8007860 <HAL_RCC_GetSysClockFreq>
 8009b72:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009b74:	e3e4      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009b76:	4b7f      	ldr	r3, [pc, #508]	@ (8009d74 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f003 0320 	and.w	r3, r3, #32
 8009b7e:	2b20      	cmp	r3, #32
 8009b80:	d117      	bne.n	8009bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009b82:	4b7c      	ldr	r3, [pc, #496]	@ (8009d74 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009b84:	689b      	ldr	r3, [r3, #8]
 8009b86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d005      	beq.n	8009b9a <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 8009b8e:	4b79      	ldr	r3, [pc, #484]	@ (8009d74 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009b90:	689b      	ldr	r3, [r3, #8]
 8009b92:	0e1b      	lsrs	r3, r3, #24
 8009b94:	f003 030f 	and.w	r3, r3, #15
 8009b98:	e006      	b.n	8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8009b9a:	4b76      	ldr	r3, [pc, #472]	@ (8009d74 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009b9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009ba0:	041b      	lsls	r3, r3, #16
 8009ba2:	0e1b      	lsrs	r3, r3, #24
 8009ba4:	f003 030f 	and.w	r3, r3, #15
 8009ba8:	4a73      	ldr	r2, [pc, #460]	@ (8009d78 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009bae:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009bb0:	e3c6      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009bb6:	e3c3      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009bbc:	e3c0      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8009bbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bc2:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8009bc6:	430b      	orrs	r3, r1
 8009bc8:	d147      	bne.n	8009c5a <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8009bca:	4b6a      	ldr	r3, [pc, #424]	@ (8009d74 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009bd0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009bd4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8009bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d103      	bne.n	8009be4 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009bdc:	f7fd ff5c 	bl	8007a98 <HAL_RCC_GetPCLK1Freq>
 8009be0:	6378      	str	r0, [r7, #52]	@ 0x34
 8009be2:	e3ad      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8009be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009be6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009bea:	d103      	bne.n	8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009bec:	f7fd fe38 	bl	8007860 <HAL_RCC_GetSysClockFreq>
 8009bf0:	6378      	str	r0, [r7, #52]	@ 0x34
 8009bf2:	e3a5      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8009bf4:	4b5f      	ldr	r3, [pc, #380]	@ (8009d74 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009bfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c00:	d106      	bne.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8009c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c08:	d102      	bne.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 8009c0a:	4b5c      	ldr	r3, [pc, #368]	@ (8009d7c <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8009c0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c0e:	e397      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8009c10:	4b58      	ldr	r3, [pc, #352]	@ (8009d74 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f003 0320 	and.w	r3, r3, #32
 8009c18:	2b20      	cmp	r3, #32
 8009c1a:	d11b      	bne.n	8009c54 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8009c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c1e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009c22:	d117      	bne.n	8009c54 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009c24:	4b53      	ldr	r3, [pc, #332]	@ (8009d74 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009c26:	689b      	ldr	r3, [r3, #8]
 8009c28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d005      	beq.n	8009c3c <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 8009c30:	4b50      	ldr	r3, [pc, #320]	@ (8009d74 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009c32:	689b      	ldr	r3, [r3, #8]
 8009c34:	0e1b      	lsrs	r3, r3, #24
 8009c36:	f003 030f 	and.w	r3, r3, #15
 8009c3a:	e006      	b.n	8009c4a <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8009c3c:	4b4d      	ldr	r3, [pc, #308]	@ (8009d74 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009c3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009c42:	041b      	lsls	r3, r3, #16
 8009c44:	0e1b      	lsrs	r3, r3, #24
 8009c46:	f003 030f 	and.w	r3, r3, #15
 8009c4a:	4a4b      	ldr	r2, [pc, #300]	@ (8009d78 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c50:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c52:	e375      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8009c54:	2300      	movs	r3, #0
 8009c56:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c58:	e372      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8009c5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c5e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8009c62:	430b      	orrs	r3, r1
 8009c64:	d164      	bne.n	8009d30 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8009c66:	4b43      	ldr	r3, [pc, #268]	@ (8009d74 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009c68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009c6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009c70:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8009c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d120      	bne.n	8009cba <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009c78:	4b3e      	ldr	r3, [pc, #248]	@ (8009d74 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f003 0320 	and.w	r3, r3, #32
 8009c80:	2b20      	cmp	r3, #32
 8009c82:	d117      	bne.n	8009cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009c84:	4b3b      	ldr	r3, [pc, #236]	@ (8009d74 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009c86:	689b      	ldr	r3, [r3, #8]
 8009c88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d005      	beq.n	8009c9c <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8009c90:	4b38      	ldr	r3, [pc, #224]	@ (8009d74 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009c92:	689b      	ldr	r3, [r3, #8]
 8009c94:	0e1b      	lsrs	r3, r3, #24
 8009c96:	f003 030f 	and.w	r3, r3, #15
 8009c9a:	e006      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8009c9c:	4b35      	ldr	r3, [pc, #212]	@ (8009d74 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009c9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009ca2:	041b      	lsls	r3, r3, #16
 8009ca4:	0e1b      	lsrs	r3, r3, #24
 8009ca6:	f003 030f 	and.w	r3, r3, #15
 8009caa:	4a33      	ldr	r2, [pc, #204]	@ (8009d78 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009cb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cb2:	e345      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cb8:	e342      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8009cba:	4b2e      	ldr	r3, [pc, #184]	@ (8009d74 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009cbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009cc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009cc4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009cc8:	d112      	bne.n	8009cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8009cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ccc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009cd0:	d10e      	bne.n	8009cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009cd2:	4b28      	ldr	r3, [pc, #160]	@ (8009d74 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009cd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009cd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009cdc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009ce0:	d102      	bne.n	8009ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 8009ce2:	23fa      	movs	r3, #250	@ 0xfa
 8009ce4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009ce6:	e32b      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8009ce8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009cec:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009cee:	e327      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8009cf0:	4b20      	ldr	r3, [pc, #128]	@ (8009d74 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009cf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009cfc:	d106      	bne.n	8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8009cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d04:	d102      	bne.n	8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 8009d06:	4b1d      	ldr	r3, [pc, #116]	@ (8009d7c <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8009d08:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d0a:	e319      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8009d0c:	4b19      	ldr	r3, [pc, #100]	@ (8009d74 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009d0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009d12:	f003 0302 	and.w	r3, r3, #2
 8009d16:	2b02      	cmp	r3, #2
 8009d18:	d107      	bne.n	8009d2a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8009d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009d20:	d103      	bne.n	8009d2a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 8009d22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d26:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d28:	e30a      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d2e:	e307      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8009d30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d34:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8009d38:	430b      	orrs	r3, r1
 8009d3a:	d16b      	bne.n	8009e14 <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009d3c:	4b0d      	ldr	r3, [pc, #52]	@ (8009d74 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009d3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009d42:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009d46:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8009d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d127      	bne.n	8009d9e <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009d4e:	4b09      	ldr	r3, [pc, #36]	@ (8009d74 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f003 0320 	and.w	r3, r3, #32
 8009d56:	2b20      	cmp	r3, #32
 8009d58:	d11e      	bne.n	8009d98 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009d5a:	4b06      	ldr	r3, [pc, #24]	@ (8009d74 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009d5c:	689b      	ldr	r3, [r3, #8]
 8009d5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d00c      	beq.n	8009d80 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 8009d66:	4b03      	ldr	r3, [pc, #12]	@ (8009d74 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009d68:	689b      	ldr	r3, [r3, #8]
 8009d6a:	0e1b      	lsrs	r3, r3, #24
 8009d6c:	f003 030f 	and.w	r3, r3, #15
 8009d70:	e00d      	b.n	8009d8e <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8009d72:	bf00      	nop
 8009d74:	46020c00 	.word	0x46020c00
 8009d78:	0802e994 	.word	0x0802e994
 8009d7c:	00f42400 	.word	0x00f42400
 8009d80:	4b94      	ldr	r3, [pc, #592]	@ (8009fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009d82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009d86:	041b      	lsls	r3, r3, #16
 8009d88:	0e1b      	lsrs	r3, r3, #24
 8009d8a:	f003 030f 	and.w	r3, r3, #15
 8009d8e:	4a92      	ldr	r2, [pc, #584]	@ (8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8009d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d94:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d96:	e2d3      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d9c:	e2d0      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8009d9e:	4b8d      	ldr	r3, [pc, #564]	@ (8009fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009da0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009da4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009da8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009dac:	d112      	bne.n	8009dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 8009dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009db0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009db4:	d10e      	bne.n	8009dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009db6:	4b87      	ldr	r3, [pc, #540]	@ (8009fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009db8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009dbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009dc0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009dc4:	d102      	bne.n	8009dcc <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 8009dc6:	23fa      	movs	r3, #250	@ 0xfa
 8009dc8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009dca:	e2b9      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8009dcc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009dd0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009dd2:	e2b5      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8009dd4:	4b7f      	ldr	r3, [pc, #508]	@ (8009fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009ddc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009de0:	d106      	bne.n	8009df0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 8009de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009de4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009de8:	d102      	bne.n	8009df0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 8009dea:	4b7c      	ldr	r3, [pc, #496]	@ (8009fdc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009dec:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dee:	e2a7      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8009df0:	4b78      	ldr	r3, [pc, #480]	@ (8009fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009df2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009df6:	f003 0302 	and.w	r3, r3, #2
 8009dfa:	2b02      	cmp	r3, #2
 8009dfc:	d107      	bne.n	8009e0e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 8009dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e00:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009e04:	d103      	bne.n	8009e0e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 8009e06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e0c:	e298      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e12:	e295      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8009e14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e18:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009e1c:	430b      	orrs	r3, r1
 8009e1e:	d147      	bne.n	8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009e20:	4b6c      	ldr	r3, [pc, #432]	@ (8009fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009e26:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8009e2a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8009e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d103      	bne.n	8009e3a <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009e32:	f7fd fe31 	bl	8007a98 <HAL_RCC_GetPCLK1Freq>
 8009e36:	6378      	str	r0, [r7, #52]	@ 0x34
 8009e38:	e282      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8009e3a:	4b66      	ldr	r3, [pc, #408]	@ (8009fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009e3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009e40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009e48:	d112      	bne.n	8009e70 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 8009e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e4c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009e50:	d10e      	bne.n	8009e70 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009e52:	4b60      	ldr	r3, [pc, #384]	@ (8009fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009e54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009e58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009e5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e60:	d102      	bne.n	8009e68 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 8009e62:	23fa      	movs	r3, #250	@ 0xfa
 8009e64:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009e66:	e26b      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8009e68:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009e6c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009e6e:	e267      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8009e70:	4b58      	ldr	r3, [pc, #352]	@ (8009fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009e78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e7c:	d106      	bne.n	8009e8c <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 8009e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e80:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009e84:	d102      	bne.n	8009e8c <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 8009e86:	4b55      	ldr	r3, [pc, #340]	@ (8009fdc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009e88:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e8a:	e259      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8009e8c:	4b51      	ldr	r3, [pc, #324]	@ (8009fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009e8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009e92:	f003 0302 	and.w	r3, r3, #2
 8009e96:	2b02      	cmp	r3, #2
 8009e98:	d107      	bne.n	8009eaa <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 8009e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e9c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009ea0:	d103      	bne.n	8009eaa <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 8009ea2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ea6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ea8:	e24a      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	637b      	str	r3, [r7, #52]	@ 0x34
 8009eae:	e247      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8009eb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009eb4:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8009eb8:	430b      	orrs	r3, r1
 8009eba:	d12d      	bne.n	8009f18 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8009ebc:	4b45      	ldr	r3, [pc, #276]	@ (8009fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009ec2:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8009ec6:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8009ec8:	4b42      	ldr	r3, [pc, #264]	@ (8009fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ed0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ed4:	d105      	bne.n	8009ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 8009ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d102      	bne.n	8009ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 8009edc:	4b3f      	ldr	r3, [pc, #252]	@ (8009fdc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009ede:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ee0:	e22e      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8009ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ee4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009ee8:	d107      	bne.n	8009efa <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009eea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f7fe fc70 	bl	80087d4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8009ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ef6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ef8:	e222      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8009efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009efc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009f00:	d107      	bne.n	8009f12 <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f02:	f107 0318 	add.w	r3, r7, #24
 8009f06:	4618      	mov	r0, r3
 8009f08:	f7fe fdbe 	bl	8008a88 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8009f0c:	69bb      	ldr	r3, [r7, #24]
 8009f0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f10:	e216      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8009f12:	2300      	movs	r3, #0
 8009f14:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f16:	e213      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8009f18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f1c:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8009f20:	430b      	orrs	r3, r1
 8009f22:	d15d      	bne.n	8009fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8009f24:	4b2b      	ldr	r3, [pc, #172]	@ (8009fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009f2a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8009f2e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8009f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f32:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009f36:	d028      	beq.n	8009f8a <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 8009f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f3a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009f3e:	d845      	bhi.n	8009fcc <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8009f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009f46:	d013      	beq.n	8009f70 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 8009f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f4a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009f4e:	d83d      	bhi.n	8009fcc <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8009f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d004      	beq.n	8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 8009f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009f5c:	d004      	beq.n	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 8009f5e:	e035      	b.n	8009fcc <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8009f60:	f7fd fdae 	bl	8007ac0 <HAL_RCC_GetPCLK2Freq>
 8009f64:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009f66:	e1eb      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009f68:	f7fd fc7a 	bl	8007860 <HAL_RCC_GetSysClockFreq>
 8009f6c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009f6e:	e1e7      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009f70:	4b18      	ldr	r3, [pc, #96]	@ (8009fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009f78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f7c:	d102      	bne.n	8009f84 <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 8009f7e:	4b17      	ldr	r3, [pc, #92]	@ (8009fdc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009f80:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009f82:	e1dd      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009f84:	2300      	movs	r3, #0
 8009f86:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009f88:	e1da      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009f8a:	4b12      	ldr	r3, [pc, #72]	@ (8009fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f003 0320 	and.w	r3, r3, #32
 8009f92:	2b20      	cmp	r3, #32
 8009f94:	d117      	bne.n	8009fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009f96:	4b0f      	ldr	r3, [pc, #60]	@ (8009fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009f98:	689b      	ldr	r3, [r3, #8]
 8009f9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d005      	beq.n	8009fae <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8009fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8009fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009fa4:	689b      	ldr	r3, [r3, #8]
 8009fa6:	0e1b      	lsrs	r3, r3, #24
 8009fa8:	f003 030f 	and.w	r3, r3, #15
 8009fac:	e006      	b.n	8009fbc <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 8009fae:	4b09      	ldr	r3, [pc, #36]	@ (8009fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009fb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009fb4:	041b      	lsls	r3, r3, #16
 8009fb6:	0e1b      	lsrs	r3, r3, #24
 8009fb8:	f003 030f 	and.w	r3, r3, #15
 8009fbc:	4a06      	ldr	r2, [pc, #24]	@ (8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8009fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009fc2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009fc4:	e1bc      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009fca:	e1b9      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009fd0:	e1b6      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8009fd2:	bf00      	nop
 8009fd4:	46020c00 	.word	0x46020c00
 8009fd8:	0802e994 	.word	0x0802e994
 8009fdc:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8009fe0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fe4:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8009fe8:	430b      	orrs	r3, r1
 8009fea:	d156      	bne.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8009fec:	4ba5      	ldr	r3, [pc, #660]	@ (800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8009fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009ff2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009ff6:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8009ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ffa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009ffe:	d028      	beq.n	800a052 <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 800a000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a002:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a006:	d845      	bhi.n	800a094 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 800a008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a00a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a00e:	d013      	beq.n	800a038 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 800a010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a012:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a016:	d83d      	bhi.n	800a094 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 800a018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d004      	beq.n	800a028 <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 800a01e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a020:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a024:	d004      	beq.n	800a030 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 800a026:	e035      	b.n	800a094 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800a028:	f7fd fd36 	bl	8007a98 <HAL_RCC_GetPCLK1Freq>
 800a02c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a02e:	e187      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800a030:	f7fd fc16 	bl	8007860 <HAL_RCC_GetSysClockFreq>
 800a034:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a036:	e183      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a038:	4b92      	ldr	r3, [pc, #584]	@ (800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a040:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a044:	d102      	bne.n	800a04c <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 800a046:	4b90      	ldr	r3, [pc, #576]	@ (800a288 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 800a048:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a04a:	e179      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800a04c:	2300      	movs	r3, #0
 800a04e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a050:	e176      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a052:	4b8c      	ldr	r3, [pc, #560]	@ (800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f003 0320 	and.w	r3, r3, #32
 800a05a:	2b20      	cmp	r3, #32
 800a05c:	d117      	bne.n	800a08e <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a05e:	4b89      	ldr	r3, [pc, #548]	@ (800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a060:	689b      	ldr	r3, [r3, #8]
 800a062:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a066:	2b00      	cmp	r3, #0
 800a068:	d005      	beq.n	800a076 <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 800a06a:	4b86      	ldr	r3, [pc, #536]	@ (800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a06c:	689b      	ldr	r3, [r3, #8]
 800a06e:	0e1b      	lsrs	r3, r3, #24
 800a070:	f003 030f 	and.w	r3, r3, #15
 800a074:	e006      	b.n	800a084 <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 800a076:	4b83      	ldr	r3, [pc, #524]	@ (800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a078:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a07c:	041b      	lsls	r3, r3, #16
 800a07e:	0e1b      	lsrs	r3, r3, #24
 800a080:	f003 030f 	and.w	r3, r3, #15
 800a084:	4a81      	ldr	r2, [pc, #516]	@ (800a28c <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800a086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a08a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a08c:	e158      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800a08e:	2300      	movs	r3, #0
 800a090:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a092:	e155      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800a094:	2300      	movs	r3, #0
 800a096:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a098:	e152      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800a09a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a09e:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800a0a2:	430b      	orrs	r3, r1
 800a0a4:	d177      	bne.n	800a196 <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800a0a6:	4b77      	ldr	r3, [pc, #476]	@ (800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a0a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a0ac:	f003 0318 	and.w	r3, r3, #24
 800a0b0:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800a0b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0b4:	2b18      	cmp	r3, #24
 800a0b6:	d86b      	bhi.n	800a190 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 800a0b8:	a201      	add	r2, pc, #4	@ (adr r2, 800a0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 800a0ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0be:	bf00      	nop
 800a0c0:	0800a125 	.word	0x0800a125
 800a0c4:	0800a191 	.word	0x0800a191
 800a0c8:	0800a191 	.word	0x0800a191
 800a0cc:	0800a191 	.word	0x0800a191
 800a0d0:	0800a191 	.word	0x0800a191
 800a0d4:	0800a191 	.word	0x0800a191
 800a0d8:	0800a191 	.word	0x0800a191
 800a0dc:	0800a191 	.word	0x0800a191
 800a0e0:	0800a12d 	.word	0x0800a12d
 800a0e4:	0800a191 	.word	0x0800a191
 800a0e8:	0800a191 	.word	0x0800a191
 800a0ec:	0800a191 	.word	0x0800a191
 800a0f0:	0800a191 	.word	0x0800a191
 800a0f4:	0800a191 	.word	0x0800a191
 800a0f8:	0800a191 	.word	0x0800a191
 800a0fc:	0800a191 	.word	0x0800a191
 800a100:	0800a135 	.word	0x0800a135
 800a104:	0800a191 	.word	0x0800a191
 800a108:	0800a191 	.word	0x0800a191
 800a10c:	0800a191 	.word	0x0800a191
 800a110:	0800a191 	.word	0x0800a191
 800a114:	0800a191 	.word	0x0800a191
 800a118:	0800a191 	.word	0x0800a191
 800a11c:	0800a191 	.word	0x0800a191
 800a120:	0800a14f 	.word	0x0800a14f
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800a124:	f7fd fce0 	bl	8007ae8 <HAL_RCC_GetPCLK3Freq>
 800a128:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a12a:	e109      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800a12c:	f7fd fb98 	bl	8007860 <HAL_RCC_GetSysClockFreq>
 800a130:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a132:	e105      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a134:	4b53      	ldr	r3, [pc, #332]	@ (800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a13c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a140:	d102      	bne.n	800a148 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 800a142:	4b51      	ldr	r3, [pc, #324]	@ (800a288 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 800a144:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a146:	e0fb      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800a148:	2300      	movs	r3, #0
 800a14a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a14c:	e0f8      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a14e:	4b4d      	ldr	r3, [pc, #308]	@ (800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f003 0320 	and.w	r3, r3, #32
 800a156:	2b20      	cmp	r3, #32
 800a158:	d117      	bne.n	800a18a <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a15a:	4b4a      	ldr	r3, [pc, #296]	@ (800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a15c:	689b      	ldr	r3, [r3, #8]
 800a15e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a162:	2b00      	cmp	r3, #0
 800a164:	d005      	beq.n	800a172 <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 800a166:	4b47      	ldr	r3, [pc, #284]	@ (800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a168:	689b      	ldr	r3, [r3, #8]
 800a16a:	0e1b      	lsrs	r3, r3, #24
 800a16c:	f003 030f 	and.w	r3, r3, #15
 800a170:	e006      	b.n	800a180 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 800a172:	4b44      	ldr	r3, [pc, #272]	@ (800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a174:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a178:	041b      	lsls	r3, r3, #16
 800a17a:	0e1b      	lsrs	r3, r3, #24
 800a17c:	f003 030f 	and.w	r3, r3, #15
 800a180:	4a42      	ldr	r2, [pc, #264]	@ (800a28c <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800a182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a186:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a188:	e0da      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800a18a:	2300      	movs	r3, #0
 800a18c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a18e:	e0d7      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800a190:	2300      	movs	r3, #0
 800a192:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a194:	e0d4      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800a196:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a19a:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800a19e:	430b      	orrs	r3, r1
 800a1a0:	d155      	bne.n	800a24e <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800a1a2:	4b38      	ldr	r3, [pc, #224]	@ (800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a1a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a1a8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800a1ac:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800a1ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1b0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a1b4:	d013      	beq.n	800a1de <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 800a1b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1b8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a1bc:	d844      	bhi.n	800a248 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 800a1be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a1c4:	d013      	beq.n	800a1ee <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 800a1c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a1cc:	d83c      	bhi.n	800a248 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 800a1ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d014      	beq.n	800a1fe <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 800a1d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a1da:	d014      	beq.n	800a206 <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 800a1dc:	e034      	b.n	800a248 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1de:	f107 0318 	add.w	r3, r7, #24
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f7fe fc50 	bl	8008a88 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800a1e8:	69fb      	ldr	r3, [r7, #28]
 800a1ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a1ec:	e0a8      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a1ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f7fe faee 	bl	80087d4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800a1f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a1fc:	e0a0      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800a1fe:	f7fd fb2f 	bl	8007860 <HAL_RCC_GetSysClockFreq>
 800a202:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a204:	e09c      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a206:	4b1f      	ldr	r3, [pc, #124]	@ (800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f003 0320 	and.w	r3, r3, #32
 800a20e:	2b20      	cmp	r3, #32
 800a210:	d117      	bne.n	800a242 <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a212:	4b1c      	ldr	r3, [pc, #112]	@ (800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a214:	689b      	ldr	r3, [r3, #8]
 800a216:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d005      	beq.n	800a22a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800a21e:	4b19      	ldr	r3, [pc, #100]	@ (800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a220:	689b      	ldr	r3, [r3, #8]
 800a222:	0e1b      	lsrs	r3, r3, #24
 800a224:	f003 030f 	and.w	r3, r3, #15
 800a228:	e006      	b.n	800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 800a22a:	4b16      	ldr	r3, [pc, #88]	@ (800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a22c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a230:	041b      	lsls	r3, r3, #16
 800a232:	0e1b      	lsrs	r3, r3, #24
 800a234:	f003 030f 	and.w	r3, r3, #15
 800a238:	4a14      	ldr	r2, [pc, #80]	@ (800a28c <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800a23a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a23e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a240:	e07e      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800a242:	2300      	movs	r3, #0
 800a244:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a246:	e07b      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800a248:	2300      	movs	r3, #0
 800a24a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a24c:	e078      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800a24e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a252:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800a256:	430b      	orrs	r3, r1
 800a258:	d138      	bne.n	800a2cc <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800a25a:	4b0a      	ldr	r3, [pc, #40]	@ (800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a25c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a260:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a264:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800a266:	4b07      	ldr	r3, [pc, #28]	@ (800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a268:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a26c:	f003 0302 	and.w	r3, r3, #2
 800a270:	2b02      	cmp	r3, #2
 800a272:	d10d      	bne.n	800a290 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 800a274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a276:	2b00      	cmp	r3, #0
 800a278:	d10a      	bne.n	800a290 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 800a27a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a27e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a280:	e05e      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800a282:	bf00      	nop
 800a284:	46020c00 	.word	0x46020c00
 800a288:	00f42400 	.word	0x00f42400
 800a28c:	0802e994 	.word	0x0802e994
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800a290:	4b2e      	ldr	r3, [pc, #184]	@ (800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800a292:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a296:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a29a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a29e:	d112      	bne.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 800a2a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a2a6:	d10e      	bne.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a2a8:	4b28      	ldr	r3, [pc, #160]	@ (800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800a2aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a2ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a2b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a2b6:	d102      	bne.n	800a2be <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 800a2b8:	23fa      	movs	r3, #250	@ 0xfa
 800a2ba:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a2bc:	e040      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800a2be:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a2c2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a2c4:	e03c      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2ca:	e039      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800a2cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2d0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a2d4:	430b      	orrs	r3, r1
 800a2d6:	d131      	bne.n	800a33c <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800a2d8:	4b1c      	ldr	r3, [pc, #112]	@ (800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800a2da:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a2de:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800a2e2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800a2e4:	4b19      	ldr	r3, [pc, #100]	@ (800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a2ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a2f0:	d105      	bne.n	800a2fe <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 800a2f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d102      	bne.n	800a2fe <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 800a2f8:	4b15      	ldr	r3, [pc, #84]	@ (800a350 <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 800a2fa:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2fc:	e020      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800a2fe:	4b13      	ldr	r3, [pc, #76]	@ (800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a306:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a30a:	d106      	bne.n	800a31a <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 800a30c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a30e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a312:	d102      	bne.n	800a31a <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 800a314:	4b0f      	ldr	r3, [pc, #60]	@ (800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 800a316:	637b      	str	r3, [r7, #52]	@ 0x34
 800a318:	e012      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800a31a:	4b0c      	ldr	r3, [pc, #48]	@ (800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a322:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a326:	d106      	bne.n	800a336 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 800a328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a32a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a32e:	d102      	bne.n	800a336 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 800a330:	4b09      	ldr	r3, [pc, #36]	@ (800a358 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800a332:	637b      	str	r3, [r7, #52]	@ 0x34
 800a334:	e004      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800a336:	2300      	movs	r3, #0
 800a338:	637b      	str	r3, [r7, #52]	@ 0x34
 800a33a:	e001      	b.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800a33c:	2300      	movs	r3, #0
 800a33e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800a340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a342:	4618      	mov	r0, r3
 800a344:	3738      	adds	r7, #56	@ 0x38
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}
 800a34a:	bf00      	nop
 800a34c:	46020c00 	.word	0x46020c00
 800a350:	02dc6c00 	.word	0x02dc6c00
 800a354:	016e3600 	.word	0x016e3600
 800a358:	00f42400 	.word	0x00f42400

0800a35c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b084      	sub	sp, #16
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800a364:	4b47      	ldr	r3, [pc, #284]	@ (800a484 <RCCEx_PLL2_Config+0x128>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4a46      	ldr	r2, [pc, #280]	@ (800a484 <RCCEx_PLL2_Config+0x128>)
 800a36a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a36e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a370:	f7f7 fdde 	bl	8001f30 <HAL_GetTick>
 800a374:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a376:	e008      	b.n	800a38a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a378:	f7f7 fdda 	bl	8001f30 <HAL_GetTick>
 800a37c:	4602      	mov	r2, r0
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	1ad3      	subs	r3, r2, r3
 800a382:	2b02      	cmp	r3, #2
 800a384:	d901      	bls.n	800a38a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a386:	2303      	movs	r3, #3
 800a388:	e077      	b.n	800a47a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a38a:	4b3e      	ldr	r3, [pc, #248]	@ (800a484 <RCCEx_PLL2_Config+0x128>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a392:	2b00      	cmp	r3, #0
 800a394:	d1f0      	bne.n	800a378 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800a396:	4b3b      	ldr	r3, [pc, #236]	@ (800a484 <RCCEx_PLL2_Config+0x128>)
 800a398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a39a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a39e:	f023 0303 	bic.w	r3, r3, #3
 800a3a2:	687a      	ldr	r2, [r7, #4]
 800a3a4:	6811      	ldr	r1, [r2, #0]
 800a3a6:	687a      	ldr	r2, [r7, #4]
 800a3a8:	6852      	ldr	r2, [r2, #4]
 800a3aa:	3a01      	subs	r2, #1
 800a3ac:	0212      	lsls	r2, r2, #8
 800a3ae:	430a      	orrs	r2, r1
 800a3b0:	4934      	ldr	r1, [pc, #208]	@ (800a484 <RCCEx_PLL2_Config+0x128>)
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800a3b6:	4b33      	ldr	r3, [pc, #204]	@ (800a484 <RCCEx_PLL2_Config+0x128>)
 800a3b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a3ba:	4b33      	ldr	r3, [pc, #204]	@ (800a488 <RCCEx_PLL2_Config+0x12c>)
 800a3bc:	4013      	ands	r3, r2
 800a3be:	687a      	ldr	r2, [r7, #4]
 800a3c0:	6892      	ldr	r2, [r2, #8]
 800a3c2:	3a01      	subs	r2, #1
 800a3c4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800a3c8:	687a      	ldr	r2, [r7, #4]
 800a3ca:	68d2      	ldr	r2, [r2, #12]
 800a3cc:	3a01      	subs	r2, #1
 800a3ce:	0252      	lsls	r2, r2, #9
 800a3d0:	b292      	uxth	r2, r2
 800a3d2:	4311      	orrs	r1, r2
 800a3d4:	687a      	ldr	r2, [r7, #4]
 800a3d6:	6912      	ldr	r2, [r2, #16]
 800a3d8:	3a01      	subs	r2, #1
 800a3da:	0412      	lsls	r2, r2, #16
 800a3dc:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800a3e0:	4311      	orrs	r1, r2
 800a3e2:	687a      	ldr	r2, [r7, #4]
 800a3e4:	6952      	ldr	r2, [r2, #20]
 800a3e6:	3a01      	subs	r2, #1
 800a3e8:	0612      	lsls	r2, r2, #24
 800a3ea:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800a3ee:	430a      	orrs	r2, r1
 800a3f0:	4924      	ldr	r1, [pc, #144]	@ (800a484 <RCCEx_PLL2_Config+0x128>)
 800a3f2:	4313      	orrs	r3, r2
 800a3f4:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800a3f6:	4b23      	ldr	r3, [pc, #140]	@ (800a484 <RCCEx_PLL2_Config+0x128>)
 800a3f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3fa:	f023 020c 	bic.w	r2, r3, #12
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	699b      	ldr	r3, [r3, #24]
 800a402:	4920      	ldr	r1, [pc, #128]	@ (800a484 <RCCEx_PLL2_Config+0x128>)
 800a404:	4313      	orrs	r3, r2
 800a406:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800a408:	4b1e      	ldr	r3, [pc, #120]	@ (800a484 <RCCEx_PLL2_Config+0x128>)
 800a40a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	6a1b      	ldr	r3, [r3, #32]
 800a410:	491c      	ldr	r1, [pc, #112]	@ (800a484 <RCCEx_PLL2_Config+0x128>)
 800a412:	4313      	orrs	r3, r2
 800a414:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800a416:	4b1b      	ldr	r3, [pc, #108]	@ (800a484 <RCCEx_PLL2_Config+0x128>)
 800a418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a41a:	4a1a      	ldr	r2, [pc, #104]	@ (800a484 <RCCEx_PLL2_Config+0x128>)
 800a41c:	f023 0310 	bic.w	r3, r3, #16
 800a420:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a422:	4b18      	ldr	r3, [pc, #96]	@ (800a484 <RCCEx_PLL2_Config+0x128>)
 800a424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a426:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a42a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a42e:	687a      	ldr	r2, [r7, #4]
 800a430:	69d2      	ldr	r2, [r2, #28]
 800a432:	00d2      	lsls	r2, r2, #3
 800a434:	4913      	ldr	r1, [pc, #76]	@ (800a484 <RCCEx_PLL2_Config+0x128>)
 800a436:	4313      	orrs	r3, r2
 800a438:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800a43a:	4b12      	ldr	r3, [pc, #72]	@ (800a484 <RCCEx_PLL2_Config+0x128>)
 800a43c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a43e:	4a11      	ldr	r2, [pc, #68]	@ (800a484 <RCCEx_PLL2_Config+0x128>)
 800a440:	f043 0310 	orr.w	r3, r3, #16
 800a444:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800a446:	4b0f      	ldr	r3, [pc, #60]	@ (800a484 <RCCEx_PLL2_Config+0x128>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	4a0e      	ldr	r2, [pc, #56]	@ (800a484 <RCCEx_PLL2_Config+0x128>)
 800a44c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a450:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a452:	f7f7 fd6d 	bl	8001f30 <HAL_GetTick>
 800a456:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a458:	e008      	b.n	800a46c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a45a:	f7f7 fd69 	bl	8001f30 <HAL_GetTick>
 800a45e:	4602      	mov	r2, r0
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	1ad3      	subs	r3, r2, r3
 800a464:	2b02      	cmp	r3, #2
 800a466:	d901      	bls.n	800a46c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800a468:	2303      	movs	r3, #3
 800a46a:	e006      	b.n	800a47a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a46c:	4b05      	ldr	r3, [pc, #20]	@ (800a484 <RCCEx_PLL2_Config+0x128>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a474:	2b00      	cmp	r3, #0
 800a476:	d0f0      	beq.n	800a45a <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800a478:	2300      	movs	r3, #0

}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3710      	adds	r7, #16
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}
 800a482:	bf00      	nop
 800a484:	46020c00 	.word	0x46020c00
 800a488:	80800000 	.word	0x80800000

0800a48c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b084      	sub	sp, #16
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800a494:	4b47      	ldr	r3, [pc, #284]	@ (800a5b4 <RCCEx_PLL3_Config+0x128>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	4a46      	ldr	r2, [pc, #280]	@ (800a5b4 <RCCEx_PLL3_Config+0x128>)
 800a49a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a49e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a4a0:	f7f7 fd46 	bl	8001f30 <HAL_GetTick>
 800a4a4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a4a6:	e008      	b.n	800a4ba <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a4a8:	f7f7 fd42 	bl	8001f30 <HAL_GetTick>
 800a4ac:	4602      	mov	r2, r0
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	1ad3      	subs	r3, r2, r3
 800a4b2:	2b02      	cmp	r3, #2
 800a4b4:	d901      	bls.n	800a4ba <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a4b6:	2303      	movs	r3, #3
 800a4b8:	e077      	b.n	800a5aa <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a4ba:	4b3e      	ldr	r3, [pc, #248]	@ (800a5b4 <RCCEx_PLL3_Config+0x128>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d1f0      	bne.n	800a4a8 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800a4c6:	4b3b      	ldr	r3, [pc, #236]	@ (800a5b4 <RCCEx_PLL3_Config+0x128>)
 800a4c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4ca:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a4ce:	f023 0303 	bic.w	r3, r3, #3
 800a4d2:	687a      	ldr	r2, [r7, #4]
 800a4d4:	6811      	ldr	r1, [r2, #0]
 800a4d6:	687a      	ldr	r2, [r7, #4]
 800a4d8:	6852      	ldr	r2, [r2, #4]
 800a4da:	3a01      	subs	r2, #1
 800a4dc:	0212      	lsls	r2, r2, #8
 800a4de:	430a      	orrs	r2, r1
 800a4e0:	4934      	ldr	r1, [pc, #208]	@ (800a5b4 <RCCEx_PLL3_Config+0x128>)
 800a4e2:	4313      	orrs	r3, r2
 800a4e4:	630b      	str	r3, [r1, #48]	@ 0x30
 800a4e6:	4b33      	ldr	r3, [pc, #204]	@ (800a5b4 <RCCEx_PLL3_Config+0x128>)
 800a4e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a4ea:	4b33      	ldr	r3, [pc, #204]	@ (800a5b8 <RCCEx_PLL3_Config+0x12c>)
 800a4ec:	4013      	ands	r3, r2
 800a4ee:	687a      	ldr	r2, [r7, #4]
 800a4f0:	6892      	ldr	r2, [r2, #8]
 800a4f2:	3a01      	subs	r2, #1
 800a4f4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800a4f8:	687a      	ldr	r2, [r7, #4]
 800a4fa:	68d2      	ldr	r2, [r2, #12]
 800a4fc:	3a01      	subs	r2, #1
 800a4fe:	0252      	lsls	r2, r2, #9
 800a500:	b292      	uxth	r2, r2
 800a502:	4311      	orrs	r1, r2
 800a504:	687a      	ldr	r2, [r7, #4]
 800a506:	6912      	ldr	r2, [r2, #16]
 800a508:	3a01      	subs	r2, #1
 800a50a:	0412      	lsls	r2, r2, #16
 800a50c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800a510:	4311      	orrs	r1, r2
 800a512:	687a      	ldr	r2, [r7, #4]
 800a514:	6952      	ldr	r2, [r2, #20]
 800a516:	3a01      	subs	r2, #1
 800a518:	0612      	lsls	r2, r2, #24
 800a51a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800a51e:	430a      	orrs	r2, r1
 800a520:	4924      	ldr	r1, [pc, #144]	@ (800a5b4 <RCCEx_PLL3_Config+0x128>)
 800a522:	4313      	orrs	r3, r2
 800a524:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800a526:	4b23      	ldr	r3, [pc, #140]	@ (800a5b4 <RCCEx_PLL3_Config+0x128>)
 800a528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a52a:	f023 020c 	bic.w	r2, r3, #12
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	699b      	ldr	r3, [r3, #24]
 800a532:	4920      	ldr	r1, [pc, #128]	@ (800a5b4 <RCCEx_PLL3_Config+0x128>)
 800a534:	4313      	orrs	r3, r2
 800a536:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800a538:	4b1e      	ldr	r3, [pc, #120]	@ (800a5b4 <RCCEx_PLL3_Config+0x128>)
 800a53a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6a1b      	ldr	r3, [r3, #32]
 800a540:	491c      	ldr	r1, [pc, #112]	@ (800a5b4 <RCCEx_PLL3_Config+0x128>)
 800a542:	4313      	orrs	r3, r2
 800a544:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800a546:	4b1b      	ldr	r3, [pc, #108]	@ (800a5b4 <RCCEx_PLL3_Config+0x128>)
 800a548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a54a:	4a1a      	ldr	r2, [pc, #104]	@ (800a5b4 <RCCEx_PLL3_Config+0x128>)
 800a54c:	f023 0310 	bic.w	r3, r3, #16
 800a550:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a552:	4b18      	ldr	r3, [pc, #96]	@ (800a5b4 <RCCEx_PLL3_Config+0x128>)
 800a554:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a556:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a55a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	69d2      	ldr	r2, [r2, #28]
 800a562:	00d2      	lsls	r2, r2, #3
 800a564:	4913      	ldr	r1, [pc, #76]	@ (800a5b4 <RCCEx_PLL3_Config+0x128>)
 800a566:	4313      	orrs	r3, r2
 800a568:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800a56a:	4b12      	ldr	r3, [pc, #72]	@ (800a5b4 <RCCEx_PLL3_Config+0x128>)
 800a56c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a56e:	4a11      	ldr	r2, [pc, #68]	@ (800a5b4 <RCCEx_PLL3_Config+0x128>)
 800a570:	f043 0310 	orr.w	r3, r3, #16
 800a574:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800a576:	4b0f      	ldr	r3, [pc, #60]	@ (800a5b4 <RCCEx_PLL3_Config+0x128>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	4a0e      	ldr	r2, [pc, #56]	@ (800a5b4 <RCCEx_PLL3_Config+0x128>)
 800a57c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a580:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a582:	f7f7 fcd5 	bl	8001f30 <HAL_GetTick>
 800a586:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a588:	e008      	b.n	800a59c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a58a:	f7f7 fcd1 	bl	8001f30 <HAL_GetTick>
 800a58e:	4602      	mov	r2, r0
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	1ad3      	subs	r3, r2, r3
 800a594:	2b02      	cmp	r3, #2
 800a596:	d901      	bls.n	800a59c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800a598:	2303      	movs	r3, #3
 800a59a:	e006      	b.n	800a5aa <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a59c:	4b05      	ldr	r3, [pc, #20]	@ (800a5b4 <RCCEx_PLL3_Config+0x128>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d0f0      	beq.n	800a58a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800a5a8:	2300      	movs	r3, #0
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3710      	adds	r7, #16
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}
 800a5b2:	bf00      	nop
 800a5b4:	46020c00 	.word	0x46020c00
 800a5b8:	80800000 	.word	0x80800000

0800a5bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b082      	sub	sp, #8
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d101      	bne.n	800a5ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	e049      	b.n	800a662 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a5d4:	b2db      	uxtb	r3, r3
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d106      	bne.n	800a5e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f7f7 fb5a 	bl	8001c9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2202      	movs	r2, #2
 800a5ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681a      	ldr	r2, [r3, #0]
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	3304      	adds	r3, #4
 800a5f8:	4619      	mov	r1, r3
 800a5fa:	4610      	mov	r0, r2
 800a5fc:	f000 fa4e 	bl	800aa9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2201      	movs	r2, #1
 800a604:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2201      	movs	r2, #1
 800a60c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2201      	movs	r2, #1
 800a614:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2201      	movs	r2, #1
 800a61c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2201      	movs	r2, #1
 800a624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2201      	movs	r2, #1
 800a62c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2201      	movs	r2, #1
 800a634:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2201      	movs	r2, #1
 800a63c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2201      	movs	r2, #1
 800a644:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2201      	movs	r2, #1
 800a64c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2201      	movs	r2, #1
 800a654:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2201      	movs	r2, #1
 800a65c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a660:	2300      	movs	r3, #0
}
 800a662:	4618      	mov	r0, r3
 800a664:	3708      	adds	r7, #8
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}
	...

0800a66c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b085      	sub	sp, #20
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a67a:	b2db      	uxtb	r3, r3
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	d001      	beq.n	800a684 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a680:	2301      	movs	r3, #1
 800a682:	e072      	b.n	800a76a <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2202      	movs	r2, #2
 800a688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	68da      	ldr	r2, [r3, #12]
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f042 0201 	orr.w	r2, r2, #1
 800a69a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	4a35      	ldr	r2, [pc, #212]	@ (800a778 <HAL_TIM_Base_Start_IT+0x10c>)
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d040      	beq.n	800a728 <HAL_TIM_Base_Start_IT+0xbc>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	4a34      	ldr	r2, [pc, #208]	@ (800a77c <HAL_TIM_Base_Start_IT+0x110>)
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d03b      	beq.n	800a728 <HAL_TIM_Base_Start_IT+0xbc>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6b8:	d036      	beq.n	800a728 <HAL_TIM_Base_Start_IT+0xbc>
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a6c2:	d031      	beq.n	800a728 <HAL_TIM_Base_Start_IT+0xbc>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	4a2d      	ldr	r2, [pc, #180]	@ (800a780 <HAL_TIM_Base_Start_IT+0x114>)
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	d02c      	beq.n	800a728 <HAL_TIM_Base_Start_IT+0xbc>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	4a2c      	ldr	r2, [pc, #176]	@ (800a784 <HAL_TIM_Base_Start_IT+0x118>)
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d027      	beq.n	800a728 <HAL_TIM_Base_Start_IT+0xbc>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	4a2a      	ldr	r2, [pc, #168]	@ (800a788 <HAL_TIM_Base_Start_IT+0x11c>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d022      	beq.n	800a728 <HAL_TIM_Base_Start_IT+0xbc>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4a29      	ldr	r2, [pc, #164]	@ (800a78c <HAL_TIM_Base_Start_IT+0x120>)
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d01d      	beq.n	800a728 <HAL_TIM_Base_Start_IT+0xbc>
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4a27      	ldr	r2, [pc, #156]	@ (800a790 <HAL_TIM_Base_Start_IT+0x124>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d018      	beq.n	800a728 <HAL_TIM_Base_Start_IT+0xbc>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	4a26      	ldr	r2, [pc, #152]	@ (800a794 <HAL_TIM_Base_Start_IT+0x128>)
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d013      	beq.n	800a728 <HAL_TIM_Base_Start_IT+0xbc>
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4a24      	ldr	r2, [pc, #144]	@ (800a798 <HAL_TIM_Base_Start_IT+0x12c>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d00e      	beq.n	800a728 <HAL_TIM_Base_Start_IT+0xbc>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	4a23      	ldr	r2, [pc, #140]	@ (800a79c <HAL_TIM_Base_Start_IT+0x130>)
 800a710:	4293      	cmp	r3, r2
 800a712:	d009      	beq.n	800a728 <HAL_TIM_Base_Start_IT+0xbc>
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	4a21      	ldr	r2, [pc, #132]	@ (800a7a0 <HAL_TIM_Base_Start_IT+0x134>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d004      	beq.n	800a728 <HAL_TIM_Base_Start_IT+0xbc>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4a20      	ldr	r2, [pc, #128]	@ (800a7a4 <HAL_TIM_Base_Start_IT+0x138>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d115      	bne.n	800a754 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	689a      	ldr	r2, [r3, #8]
 800a72e:	4b1e      	ldr	r3, [pc, #120]	@ (800a7a8 <HAL_TIM_Base_Start_IT+0x13c>)
 800a730:	4013      	ands	r3, r2
 800a732:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	2b06      	cmp	r3, #6
 800a738:	d015      	beq.n	800a766 <HAL_TIM_Base_Start_IT+0xfa>
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a740:	d011      	beq.n	800a766 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	681a      	ldr	r2, [r3, #0]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f042 0201 	orr.w	r2, r2, #1
 800a750:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a752:	e008      	b.n	800a766 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	681a      	ldr	r2, [r3, #0]
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f042 0201 	orr.w	r2, r2, #1
 800a762:	601a      	str	r2, [r3, #0]
 800a764:	e000      	b.n	800a768 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a766:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a768:	2300      	movs	r3, #0
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3714      	adds	r7, #20
 800a76e:	46bd      	mov	sp, r7
 800a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a774:	4770      	bx	lr
 800a776:	bf00      	nop
 800a778:	40012c00 	.word	0x40012c00
 800a77c:	50012c00 	.word	0x50012c00
 800a780:	40000400 	.word	0x40000400
 800a784:	50000400 	.word	0x50000400
 800a788:	40000800 	.word	0x40000800
 800a78c:	50000800 	.word	0x50000800
 800a790:	40000c00 	.word	0x40000c00
 800a794:	50000c00 	.word	0x50000c00
 800a798:	40013400 	.word	0x40013400
 800a79c:	50013400 	.word	0x50013400
 800a7a0:	40014000 	.word	0x40014000
 800a7a4:	50014000 	.word	0x50014000
 800a7a8:	00010007 	.word	0x00010007

0800a7ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b084      	sub	sp, #16
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	68db      	ldr	r3, [r3, #12]
 800a7ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	691b      	ldr	r3, [r3, #16]
 800a7c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	f003 0302 	and.w	r3, r3, #2
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d020      	beq.n	800a810 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	f003 0302 	and.w	r3, r3, #2
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d01b      	beq.n	800a810 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f06f 0202 	mvn.w	r2, #2
 800a7e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2201      	movs	r2, #1
 800a7e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	699b      	ldr	r3, [r3, #24]
 800a7ee:	f003 0303 	and.w	r3, r3, #3
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d003      	beq.n	800a7fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f000 f931 	bl	800aa5e <HAL_TIM_IC_CaptureCallback>
 800a7fc:	e005      	b.n	800a80a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f000 f923 	bl	800aa4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	f000 f934 	bl	800aa72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2200      	movs	r2, #0
 800a80e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	f003 0304 	and.w	r3, r3, #4
 800a816:	2b00      	cmp	r3, #0
 800a818:	d020      	beq.n	800a85c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	f003 0304 	and.w	r3, r3, #4
 800a820:	2b00      	cmp	r3, #0
 800a822:	d01b      	beq.n	800a85c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f06f 0204 	mvn.w	r2, #4
 800a82c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2202      	movs	r2, #2
 800a832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	699b      	ldr	r3, [r3, #24]
 800a83a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d003      	beq.n	800a84a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f000 f90b 	bl	800aa5e <HAL_TIM_IC_CaptureCallback>
 800a848:	e005      	b.n	800a856 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f000 f8fd 	bl	800aa4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	f000 f90e 	bl	800aa72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2200      	movs	r2, #0
 800a85a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	f003 0308 	and.w	r3, r3, #8
 800a862:	2b00      	cmp	r3, #0
 800a864:	d020      	beq.n	800a8a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	f003 0308 	and.w	r3, r3, #8
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d01b      	beq.n	800a8a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f06f 0208 	mvn.w	r2, #8
 800a878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2204      	movs	r2, #4
 800a87e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	69db      	ldr	r3, [r3, #28]
 800a886:	f003 0303 	and.w	r3, r3, #3
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d003      	beq.n	800a896 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f000 f8e5 	bl	800aa5e <HAL_TIM_IC_CaptureCallback>
 800a894:	e005      	b.n	800a8a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 f8d7 	bl	800aa4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f000 f8e8 	bl	800aa72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	f003 0310 	and.w	r3, r3, #16
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d020      	beq.n	800a8f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	f003 0310 	and.w	r3, r3, #16
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d01b      	beq.n	800a8f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f06f 0210 	mvn.w	r2, #16
 800a8c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2208      	movs	r2, #8
 800a8ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	69db      	ldr	r3, [r3, #28]
 800a8d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d003      	beq.n	800a8e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f000 f8bf 	bl	800aa5e <HAL_TIM_IC_CaptureCallback>
 800a8e0:	e005      	b.n	800a8ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f000 f8b1 	bl	800aa4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f000 f8c2 	bl	800aa72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	f003 0301 	and.w	r3, r3, #1
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d00c      	beq.n	800a918 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	f003 0301 	and.w	r3, r3, #1
 800a904:	2b00      	cmp	r3, #0
 800a906:	d007      	beq.n	800a918 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f06f 0201 	mvn.w	r2, #1
 800a910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f7f6 fe64 	bl	80015e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d104      	bne.n	800a92c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d00c      	beq.n	800a946 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a932:	2b00      	cmp	r3, #0
 800a934:	d007      	beq.n	800a946 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a93e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f000 fa77 	bl	800ae34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d00c      	beq.n	800a96a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a956:	2b00      	cmp	r3, #0
 800a958:	d007      	beq.n	800a96a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a962:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f000 fa6f 	bl	800ae48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a970:	2b00      	cmp	r3, #0
 800a972:	d00c      	beq.n	800a98e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d007      	beq.n	800a98e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f000 f87c 	bl	800aa86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	f003 0320 	and.w	r3, r3, #32
 800a994:	2b00      	cmp	r3, #0
 800a996:	d00c      	beq.n	800a9b2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	f003 0320 	and.w	r3, r3, #32
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d007      	beq.n	800a9b2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f06f 0220 	mvn.w	r2, #32
 800a9aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f000 fa37 	bl	800ae20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d00c      	beq.n	800a9d6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d007      	beq.n	800a9d6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800a9ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f000 fa43 	bl	800ae5c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d00c      	beq.n	800a9fa <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d007      	beq.n	800a9fa <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800a9f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f000 fa3b 	bl	800ae70 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d00c      	beq.n	800aa1e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d007      	beq.n	800aa1e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800aa16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f000 fa33 	bl	800ae84 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d00c      	beq.n	800aa42 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d007      	beq.n	800aa42 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800aa3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f000 fa2b 	bl	800ae98 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aa42:	bf00      	nop
 800aa44:	3710      	adds	r7, #16
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}

0800aa4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa4a:	b480      	push	{r7}
 800aa4c:	b083      	sub	sp, #12
 800aa4e:	af00      	add	r7, sp, #0
 800aa50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aa52:	bf00      	nop
 800aa54:	370c      	adds	r7, #12
 800aa56:	46bd      	mov	sp, r7
 800aa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5c:	4770      	bx	lr

0800aa5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aa5e:	b480      	push	{r7}
 800aa60:	b083      	sub	sp, #12
 800aa62:	af00      	add	r7, sp, #0
 800aa64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aa66:	bf00      	nop
 800aa68:	370c      	adds	r7, #12
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa70:	4770      	bx	lr

0800aa72 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aa72:	b480      	push	{r7}
 800aa74:	b083      	sub	sp, #12
 800aa76:	af00      	add	r7, sp, #0
 800aa78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aa7a:	bf00      	nop
 800aa7c:	370c      	adds	r7, #12
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa84:	4770      	bx	lr

0800aa86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aa86:	b480      	push	{r7}
 800aa88:	b083      	sub	sp, #12
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aa8e:	bf00      	nop
 800aa90:	370c      	adds	r7, #12
 800aa92:	46bd      	mov	sp, r7
 800aa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa98:	4770      	bx	lr
	...

0800aa9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b085      	sub	sp, #20
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
 800aaa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	4a6b      	ldr	r2, [pc, #428]	@ (800ac5c <TIM_Base_SetConfig+0x1c0>)
 800aab0:	4293      	cmp	r3, r2
 800aab2:	d02b      	beq.n	800ab0c <TIM_Base_SetConfig+0x70>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	4a6a      	ldr	r2, [pc, #424]	@ (800ac60 <TIM_Base_SetConfig+0x1c4>)
 800aab8:	4293      	cmp	r3, r2
 800aaba:	d027      	beq.n	800ab0c <TIM_Base_SetConfig+0x70>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aac2:	d023      	beq.n	800ab0c <TIM_Base_SetConfig+0x70>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aaca:	d01f      	beq.n	800ab0c <TIM_Base_SetConfig+0x70>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	4a65      	ldr	r2, [pc, #404]	@ (800ac64 <TIM_Base_SetConfig+0x1c8>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d01b      	beq.n	800ab0c <TIM_Base_SetConfig+0x70>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	4a64      	ldr	r2, [pc, #400]	@ (800ac68 <TIM_Base_SetConfig+0x1cc>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	d017      	beq.n	800ab0c <TIM_Base_SetConfig+0x70>
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	4a63      	ldr	r2, [pc, #396]	@ (800ac6c <TIM_Base_SetConfig+0x1d0>)
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d013      	beq.n	800ab0c <TIM_Base_SetConfig+0x70>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	4a62      	ldr	r2, [pc, #392]	@ (800ac70 <TIM_Base_SetConfig+0x1d4>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d00f      	beq.n	800ab0c <TIM_Base_SetConfig+0x70>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	4a61      	ldr	r2, [pc, #388]	@ (800ac74 <TIM_Base_SetConfig+0x1d8>)
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d00b      	beq.n	800ab0c <TIM_Base_SetConfig+0x70>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	4a60      	ldr	r2, [pc, #384]	@ (800ac78 <TIM_Base_SetConfig+0x1dc>)
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	d007      	beq.n	800ab0c <TIM_Base_SetConfig+0x70>
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	4a5f      	ldr	r2, [pc, #380]	@ (800ac7c <TIM_Base_SetConfig+0x1e0>)
 800ab00:	4293      	cmp	r3, r2
 800ab02:	d003      	beq.n	800ab0c <TIM_Base_SetConfig+0x70>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	4a5e      	ldr	r2, [pc, #376]	@ (800ac80 <TIM_Base_SetConfig+0x1e4>)
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	d108      	bne.n	800ab1e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	685b      	ldr	r3, [r3, #4]
 800ab18:	68fa      	ldr	r2, [r7, #12]
 800ab1a:	4313      	orrs	r3, r2
 800ab1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	4a4e      	ldr	r2, [pc, #312]	@ (800ac5c <TIM_Base_SetConfig+0x1c0>)
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d043      	beq.n	800abae <TIM_Base_SetConfig+0x112>
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	4a4d      	ldr	r2, [pc, #308]	@ (800ac60 <TIM_Base_SetConfig+0x1c4>)
 800ab2a:	4293      	cmp	r3, r2
 800ab2c:	d03f      	beq.n	800abae <TIM_Base_SetConfig+0x112>
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab34:	d03b      	beq.n	800abae <TIM_Base_SetConfig+0x112>
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ab3c:	d037      	beq.n	800abae <TIM_Base_SetConfig+0x112>
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	4a48      	ldr	r2, [pc, #288]	@ (800ac64 <TIM_Base_SetConfig+0x1c8>)
 800ab42:	4293      	cmp	r3, r2
 800ab44:	d033      	beq.n	800abae <TIM_Base_SetConfig+0x112>
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	4a47      	ldr	r2, [pc, #284]	@ (800ac68 <TIM_Base_SetConfig+0x1cc>)
 800ab4a:	4293      	cmp	r3, r2
 800ab4c:	d02f      	beq.n	800abae <TIM_Base_SetConfig+0x112>
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	4a46      	ldr	r2, [pc, #280]	@ (800ac6c <TIM_Base_SetConfig+0x1d0>)
 800ab52:	4293      	cmp	r3, r2
 800ab54:	d02b      	beq.n	800abae <TIM_Base_SetConfig+0x112>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	4a45      	ldr	r2, [pc, #276]	@ (800ac70 <TIM_Base_SetConfig+0x1d4>)
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d027      	beq.n	800abae <TIM_Base_SetConfig+0x112>
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	4a44      	ldr	r2, [pc, #272]	@ (800ac74 <TIM_Base_SetConfig+0x1d8>)
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d023      	beq.n	800abae <TIM_Base_SetConfig+0x112>
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	4a43      	ldr	r2, [pc, #268]	@ (800ac78 <TIM_Base_SetConfig+0x1dc>)
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	d01f      	beq.n	800abae <TIM_Base_SetConfig+0x112>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	4a42      	ldr	r2, [pc, #264]	@ (800ac7c <TIM_Base_SetConfig+0x1e0>)
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d01b      	beq.n	800abae <TIM_Base_SetConfig+0x112>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	4a41      	ldr	r2, [pc, #260]	@ (800ac80 <TIM_Base_SetConfig+0x1e4>)
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d017      	beq.n	800abae <TIM_Base_SetConfig+0x112>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	4a40      	ldr	r2, [pc, #256]	@ (800ac84 <TIM_Base_SetConfig+0x1e8>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d013      	beq.n	800abae <TIM_Base_SetConfig+0x112>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	4a3f      	ldr	r2, [pc, #252]	@ (800ac88 <TIM_Base_SetConfig+0x1ec>)
 800ab8a:	4293      	cmp	r3, r2
 800ab8c:	d00f      	beq.n	800abae <TIM_Base_SetConfig+0x112>
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	4a3e      	ldr	r2, [pc, #248]	@ (800ac8c <TIM_Base_SetConfig+0x1f0>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d00b      	beq.n	800abae <TIM_Base_SetConfig+0x112>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	4a3d      	ldr	r2, [pc, #244]	@ (800ac90 <TIM_Base_SetConfig+0x1f4>)
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d007      	beq.n	800abae <TIM_Base_SetConfig+0x112>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	4a3c      	ldr	r2, [pc, #240]	@ (800ac94 <TIM_Base_SetConfig+0x1f8>)
 800aba2:	4293      	cmp	r3, r2
 800aba4:	d003      	beq.n	800abae <TIM_Base_SetConfig+0x112>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	4a3b      	ldr	r2, [pc, #236]	@ (800ac98 <TIM_Base_SetConfig+0x1fc>)
 800abaa:	4293      	cmp	r3, r2
 800abac:	d108      	bne.n	800abc0 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800abb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	68db      	ldr	r3, [r3, #12]
 800abba:	68fa      	ldr	r2, [r7, #12]
 800abbc:	4313      	orrs	r3, r2
 800abbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	695b      	ldr	r3, [r3, #20]
 800abca:	4313      	orrs	r3, r2
 800abcc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	689a      	ldr	r2, [r3, #8]
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	681a      	ldr	r2, [r3, #0]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	4a1e      	ldr	r2, [pc, #120]	@ (800ac5c <TIM_Base_SetConfig+0x1c0>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d023      	beq.n	800ac2e <TIM_Base_SetConfig+0x192>
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	4a1d      	ldr	r2, [pc, #116]	@ (800ac60 <TIM_Base_SetConfig+0x1c4>)
 800abea:	4293      	cmp	r3, r2
 800abec:	d01f      	beq.n	800ac2e <TIM_Base_SetConfig+0x192>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	4a22      	ldr	r2, [pc, #136]	@ (800ac7c <TIM_Base_SetConfig+0x1e0>)
 800abf2:	4293      	cmp	r3, r2
 800abf4:	d01b      	beq.n	800ac2e <TIM_Base_SetConfig+0x192>
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	4a21      	ldr	r2, [pc, #132]	@ (800ac80 <TIM_Base_SetConfig+0x1e4>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d017      	beq.n	800ac2e <TIM_Base_SetConfig+0x192>
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	4a20      	ldr	r2, [pc, #128]	@ (800ac84 <TIM_Base_SetConfig+0x1e8>)
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d013      	beq.n	800ac2e <TIM_Base_SetConfig+0x192>
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	4a1f      	ldr	r2, [pc, #124]	@ (800ac88 <TIM_Base_SetConfig+0x1ec>)
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	d00f      	beq.n	800ac2e <TIM_Base_SetConfig+0x192>
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	4a1e      	ldr	r2, [pc, #120]	@ (800ac8c <TIM_Base_SetConfig+0x1f0>)
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d00b      	beq.n	800ac2e <TIM_Base_SetConfig+0x192>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	4a1d      	ldr	r2, [pc, #116]	@ (800ac90 <TIM_Base_SetConfig+0x1f4>)
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d007      	beq.n	800ac2e <TIM_Base_SetConfig+0x192>
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	4a1c      	ldr	r2, [pc, #112]	@ (800ac94 <TIM_Base_SetConfig+0x1f8>)
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d003      	beq.n	800ac2e <TIM_Base_SetConfig+0x192>
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	4a1b      	ldr	r2, [pc, #108]	@ (800ac98 <TIM_Base_SetConfig+0x1fc>)
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	d103      	bne.n	800ac36 <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	691a      	ldr	r2, [r3, #16]
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f043 0204 	orr.w	r2, r3, #4
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2201      	movs	r2, #1
 800ac46:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	68fa      	ldr	r2, [r7, #12]
 800ac4c:	601a      	str	r2, [r3, #0]
}
 800ac4e:	bf00      	nop
 800ac50:	3714      	adds	r7, #20
 800ac52:	46bd      	mov	sp, r7
 800ac54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac58:	4770      	bx	lr
 800ac5a:	bf00      	nop
 800ac5c:	40012c00 	.word	0x40012c00
 800ac60:	50012c00 	.word	0x50012c00
 800ac64:	40000400 	.word	0x40000400
 800ac68:	50000400 	.word	0x50000400
 800ac6c:	40000800 	.word	0x40000800
 800ac70:	50000800 	.word	0x50000800
 800ac74:	40000c00 	.word	0x40000c00
 800ac78:	50000c00 	.word	0x50000c00
 800ac7c:	40013400 	.word	0x40013400
 800ac80:	50013400 	.word	0x50013400
 800ac84:	40014000 	.word	0x40014000
 800ac88:	50014000 	.word	0x50014000
 800ac8c:	40014400 	.word	0x40014400
 800ac90:	50014400 	.word	0x50014400
 800ac94:	40014800 	.word	0x40014800
 800ac98:	50014800 	.word	0x50014800

0800ac9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b085      	sub	sp, #20
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
 800aca4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800acac:	2b01      	cmp	r3, #1
 800acae:	d101      	bne.n	800acb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800acb0:	2302      	movs	r3, #2
 800acb2:	e097      	b.n	800ade4 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2201      	movs	r2, #1
 800acb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2202      	movs	r2, #2
 800acc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	685b      	ldr	r3, [r3, #4]
 800acca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	689b      	ldr	r3, [r3, #8]
 800acd2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	4a45      	ldr	r2, [pc, #276]	@ (800adf0 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800acda:	4293      	cmp	r3, r2
 800acdc:	d00e      	beq.n	800acfc <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	4a44      	ldr	r2, [pc, #272]	@ (800adf4 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800ace4:	4293      	cmp	r3, r2
 800ace6:	d009      	beq.n	800acfc <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	4a42      	ldr	r2, [pc, #264]	@ (800adf8 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800acee:	4293      	cmp	r3, r2
 800acf0:	d004      	beq.n	800acfc <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	4a41      	ldr	r2, [pc, #260]	@ (800adfc <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d108      	bne.n	800ad0e <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ad02:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	685b      	ldr	r3, [r3, #4]
 800ad08:	68fa      	ldr	r2, [r7, #12]
 800ad0a:	4313      	orrs	r3, r2
 800ad0c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800ad14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad18:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	68fa      	ldr	r2, [r7, #12]
 800ad20:	4313      	orrs	r3, r2
 800ad22:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	68fa      	ldr	r2, [r7, #12]
 800ad2a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	4a2f      	ldr	r2, [pc, #188]	@ (800adf0 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800ad32:	4293      	cmp	r3, r2
 800ad34:	d040      	beq.n	800adb8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	4a2e      	ldr	r2, [pc, #184]	@ (800adf4 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	d03b      	beq.n	800adb8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad48:	d036      	beq.n	800adb8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ad52:	d031      	beq.n	800adb8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	4a29      	ldr	r2, [pc, #164]	@ (800ae00 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d02c      	beq.n	800adb8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	4a28      	ldr	r2, [pc, #160]	@ (800ae04 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d027      	beq.n	800adb8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	4a26      	ldr	r2, [pc, #152]	@ (800ae08 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d022      	beq.n	800adb8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	4a25      	ldr	r2, [pc, #148]	@ (800ae0c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800ad78:	4293      	cmp	r3, r2
 800ad7a:	d01d      	beq.n	800adb8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	4a23      	ldr	r2, [pc, #140]	@ (800ae10 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800ad82:	4293      	cmp	r3, r2
 800ad84:	d018      	beq.n	800adb8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	4a22      	ldr	r2, [pc, #136]	@ (800ae14 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800ad8c:	4293      	cmp	r3, r2
 800ad8e:	d013      	beq.n	800adb8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	4a18      	ldr	r2, [pc, #96]	@ (800adf8 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d00e      	beq.n	800adb8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	4a17      	ldr	r2, [pc, #92]	@ (800adfc <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800ada0:	4293      	cmp	r3, r2
 800ada2:	d009      	beq.n	800adb8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	4a1b      	ldr	r2, [pc, #108]	@ (800ae18 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800adaa:	4293      	cmp	r3, r2
 800adac:	d004      	beq.n	800adb8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	4a1a      	ldr	r2, [pc, #104]	@ (800ae1c <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d10c      	bne.n	800add2 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800adbe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	689b      	ldr	r3, [r3, #8]
 800adc4:	68ba      	ldr	r2, [r7, #8]
 800adc6:	4313      	orrs	r3, r2
 800adc8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	68ba      	ldr	r2, [r7, #8]
 800add0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2201      	movs	r2, #1
 800add6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2200      	movs	r2, #0
 800adde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ade2:	2300      	movs	r3, #0
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	3714      	adds	r7, #20
 800ade8:	46bd      	mov	sp, r7
 800adea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adee:	4770      	bx	lr
 800adf0:	40012c00 	.word	0x40012c00
 800adf4:	50012c00 	.word	0x50012c00
 800adf8:	40013400 	.word	0x40013400
 800adfc:	50013400 	.word	0x50013400
 800ae00:	40000400 	.word	0x40000400
 800ae04:	50000400 	.word	0x50000400
 800ae08:	40000800 	.word	0x40000800
 800ae0c:	50000800 	.word	0x50000800
 800ae10:	40000c00 	.word	0x40000c00
 800ae14:	50000c00 	.word	0x50000c00
 800ae18:	40014000 	.word	0x40014000
 800ae1c:	50014000 	.word	0x50014000

0800ae20 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ae20:	b480      	push	{r7}
 800ae22:	b083      	sub	sp, #12
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ae28:	bf00      	nop
 800ae2a:	370c      	adds	r7, #12
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae32:	4770      	bx	lr

0800ae34 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ae34:	b480      	push	{r7}
 800ae36:	b083      	sub	sp, #12
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ae3c:	bf00      	nop
 800ae3e:	370c      	adds	r7, #12
 800ae40:	46bd      	mov	sp, r7
 800ae42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae46:	4770      	bx	lr

0800ae48 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b083      	sub	sp, #12
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ae50:	bf00      	nop
 800ae52:	370c      	adds	r7, #12
 800ae54:	46bd      	mov	sp, r7
 800ae56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5a:	4770      	bx	lr

0800ae5c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b083      	sub	sp, #12
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800ae64:	bf00      	nop
 800ae66:	370c      	adds	r7, #12
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr

0800ae70 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b083      	sub	sp, #12
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800ae78:	bf00      	nop
 800ae7a:	370c      	adds	r7, #12
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae82:	4770      	bx	lr

0800ae84 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800ae84:	b480      	push	{r7}
 800ae86:	b083      	sub	sp, #12
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800ae8c:	bf00      	nop
 800ae8e:	370c      	adds	r7, #12
 800ae90:	46bd      	mov	sp, r7
 800ae92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae96:	4770      	bx	lr

0800ae98 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b083      	sub	sp, #12
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800aea0:	bf00      	nop
 800aea2:	370c      	adds	r7, #12
 800aea4:	46bd      	mov	sp, r7
 800aea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeaa:	4770      	bx	lr

0800aeac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b082      	sub	sp, #8
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d101      	bne.n	800aebe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aeba:	2301      	movs	r3, #1
 800aebc:	e042      	b.n	800af44 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d106      	bne.n	800aed6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2200      	movs	r2, #0
 800aecc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f7f6 ff57 	bl	8001d84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2224      	movs	r2, #36	@ 0x24
 800aeda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	681a      	ldr	r2, [r3, #0]
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f022 0201 	bic.w	r2, r2, #1
 800aeec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d002      	beq.n	800aefc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f000 fa68 	bl	800b3cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f000 f8c3 	bl	800b088 <UART_SetConfig>
 800af02:	4603      	mov	r3, r0
 800af04:	2b01      	cmp	r3, #1
 800af06:	d101      	bne.n	800af0c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800af08:	2301      	movs	r3, #1
 800af0a:	e01b      	b.n	800af44 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	685a      	ldr	r2, [r3, #4]
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800af1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	689a      	ldr	r2, [r3, #8]
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800af2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	681a      	ldr	r2, [r3, #0]
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f042 0201 	orr.w	r2, r2, #1
 800af3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f000 fae7 	bl	800b510 <UART_CheckIdleState>
 800af42:	4603      	mov	r3, r0
}
 800af44:	4618      	mov	r0, r3
 800af46:	3708      	adds	r7, #8
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}

0800af4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b08a      	sub	sp, #40	@ 0x28
 800af50:	af02      	add	r7, sp, #8
 800af52:	60f8      	str	r0, [r7, #12]
 800af54:	60b9      	str	r1, [r7, #8]
 800af56:	603b      	str	r3, [r7, #0]
 800af58:	4613      	mov	r3, r2
 800af5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af62:	2b20      	cmp	r3, #32
 800af64:	f040 808b 	bne.w	800b07e <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d002      	beq.n	800af74 <HAL_UART_Transmit+0x28>
 800af6e:	88fb      	ldrh	r3, [r7, #6]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d101      	bne.n	800af78 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800af74:	2301      	movs	r3, #1
 800af76:	e083      	b.n	800b080 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	689b      	ldr	r3, [r3, #8]
 800af7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af82:	2b80      	cmp	r3, #128	@ 0x80
 800af84:	d107      	bne.n	800af96 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	689a      	ldr	r2, [r3, #8]
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800af94:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	2200      	movs	r2, #0
 800af9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	2221      	movs	r2, #33	@ 0x21
 800afa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800afa6:	f7f6 ffc3 	bl	8001f30 <HAL_GetTick>
 800afaa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	88fa      	ldrh	r2, [r7, #6]
 800afb0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	88fa      	ldrh	r2, [r7, #6]
 800afb8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	689b      	ldr	r3, [r3, #8]
 800afc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800afc4:	d108      	bne.n	800afd8 <HAL_UART_Transmit+0x8c>
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	691b      	ldr	r3, [r3, #16]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d104      	bne.n	800afd8 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800afce:	2300      	movs	r3, #0
 800afd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	61bb      	str	r3, [r7, #24]
 800afd6:	e003      	b.n	800afe0 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800afdc:	2300      	movs	r3, #0
 800afde:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800afe0:	e030      	b.n	800b044 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	9300      	str	r3, [sp, #0]
 800afe6:	697b      	ldr	r3, [r7, #20]
 800afe8:	2200      	movs	r2, #0
 800afea:	2180      	movs	r1, #128	@ 0x80
 800afec:	68f8      	ldr	r0, [r7, #12]
 800afee:	f000 fb39 	bl	800b664 <UART_WaitOnFlagUntilTimeout>
 800aff2:	4603      	mov	r3, r0
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d005      	beq.n	800b004 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	2220      	movs	r2, #32
 800affc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b000:	2303      	movs	r3, #3
 800b002:	e03d      	b.n	800b080 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800b004:	69fb      	ldr	r3, [r7, #28]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d10b      	bne.n	800b022 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b00a:	69bb      	ldr	r3, [r7, #24]
 800b00c:	881b      	ldrh	r3, [r3, #0]
 800b00e:	461a      	mov	r2, r3
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b018:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b01a:	69bb      	ldr	r3, [r7, #24]
 800b01c:	3302      	adds	r3, #2
 800b01e:	61bb      	str	r3, [r7, #24]
 800b020:	e007      	b.n	800b032 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b022:	69fb      	ldr	r3, [r7, #28]
 800b024:	781a      	ldrb	r2, [r3, #0]
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b02c:	69fb      	ldr	r3, [r7, #28]
 800b02e:	3301      	adds	r3, #1
 800b030:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b038:	b29b      	uxth	r3, r3
 800b03a:	3b01      	subs	r3, #1
 800b03c:	b29a      	uxth	r2, r3
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b04a:	b29b      	uxth	r3, r3
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d1c8      	bne.n	800afe2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	9300      	str	r3, [sp, #0]
 800b054:	697b      	ldr	r3, [r7, #20]
 800b056:	2200      	movs	r2, #0
 800b058:	2140      	movs	r1, #64	@ 0x40
 800b05a:	68f8      	ldr	r0, [r7, #12]
 800b05c:	f000 fb02 	bl	800b664 <UART_WaitOnFlagUntilTimeout>
 800b060:	4603      	mov	r3, r0
 800b062:	2b00      	cmp	r3, #0
 800b064:	d005      	beq.n	800b072 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	2220      	movs	r2, #32
 800b06a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b06e:	2303      	movs	r3, #3
 800b070:	e006      	b.n	800b080 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	2220      	movs	r2, #32
 800b076:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b07a:	2300      	movs	r3, #0
 800b07c:	e000      	b.n	800b080 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800b07e:	2302      	movs	r3, #2
  }
}
 800b080:	4618      	mov	r0, r3
 800b082:	3720      	adds	r7, #32
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}

0800b088 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b088:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b08c:	b094      	sub	sp, #80	@ 0x50
 800b08e:	af00      	add	r7, sp, #0
 800b090:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b092:	2300      	movs	r3, #0
 800b094:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800b098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b09a:	681a      	ldr	r2, [r3, #0]
 800b09c:	4b7e      	ldr	r3, [pc, #504]	@ (800b298 <UART_SetConfig+0x210>)
 800b09e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b0a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0a2:	689a      	ldr	r2, [r3, #8]
 800b0a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0a6:	691b      	ldr	r3, [r3, #16]
 800b0a8:	431a      	orrs	r2, r3
 800b0aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0ac:	695b      	ldr	r3, [r3, #20]
 800b0ae:	431a      	orrs	r2, r3
 800b0b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0b2:	69db      	ldr	r3, [r3, #28]
 800b0b4:	4313      	orrs	r3, r2
 800b0b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b0b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	4977      	ldr	r1, [pc, #476]	@ (800b29c <UART_SetConfig+0x214>)
 800b0c0:	4019      	ands	r1, r3
 800b0c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0c4:	681a      	ldr	r2, [r3, #0]
 800b0c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b0c8:	430b      	orrs	r3, r1
 800b0ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b0cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	685b      	ldr	r3, [r3, #4]
 800b0d2:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b0d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0d8:	68d9      	ldr	r1, [r3, #12]
 800b0da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0dc:	681a      	ldr	r2, [r3, #0]
 800b0de:	ea40 0301 	orr.w	r3, r0, r1
 800b0e2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b0e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0e6:	699b      	ldr	r3, [r3, #24]
 800b0e8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b0ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0ec:	681a      	ldr	r2, [r3, #0]
 800b0ee:	4b6a      	ldr	r3, [pc, #424]	@ (800b298 <UART_SetConfig+0x210>)
 800b0f0:	429a      	cmp	r2, r3
 800b0f2:	d009      	beq.n	800b108 <UART_SetConfig+0x80>
 800b0f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0f6:	681a      	ldr	r2, [r3, #0]
 800b0f8:	4b69      	ldr	r3, [pc, #420]	@ (800b2a0 <UART_SetConfig+0x218>)
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	d004      	beq.n	800b108 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b0fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b100:	6a1a      	ldr	r2, [r3, #32]
 800b102:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b104:	4313      	orrs	r3, r2
 800b106:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	689b      	ldr	r3, [r3, #8]
 800b10e:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800b112:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800b116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b118:	681a      	ldr	r2, [r3, #0]
 800b11a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b11c:	430b      	orrs	r3, r1
 800b11e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b126:	f023 000f 	bic.w	r0, r3, #15
 800b12a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b12c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800b12e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b130:	681a      	ldr	r2, [r3, #0]
 800b132:	ea40 0301 	orr.w	r3, r0, r1
 800b136:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b13a:	681a      	ldr	r2, [r3, #0]
 800b13c:	4b59      	ldr	r3, [pc, #356]	@ (800b2a4 <UART_SetConfig+0x21c>)
 800b13e:	429a      	cmp	r2, r3
 800b140:	d102      	bne.n	800b148 <UART_SetConfig+0xc0>
 800b142:	2301      	movs	r3, #1
 800b144:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b146:	e029      	b.n	800b19c <UART_SetConfig+0x114>
 800b148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b14a:	681a      	ldr	r2, [r3, #0]
 800b14c:	4b56      	ldr	r3, [pc, #344]	@ (800b2a8 <UART_SetConfig+0x220>)
 800b14e:	429a      	cmp	r2, r3
 800b150:	d102      	bne.n	800b158 <UART_SetConfig+0xd0>
 800b152:	2302      	movs	r3, #2
 800b154:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b156:	e021      	b.n	800b19c <UART_SetConfig+0x114>
 800b158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b15a:	681a      	ldr	r2, [r3, #0]
 800b15c:	4b53      	ldr	r3, [pc, #332]	@ (800b2ac <UART_SetConfig+0x224>)
 800b15e:	429a      	cmp	r2, r3
 800b160:	d102      	bne.n	800b168 <UART_SetConfig+0xe0>
 800b162:	2304      	movs	r3, #4
 800b164:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b166:	e019      	b.n	800b19c <UART_SetConfig+0x114>
 800b168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b16a:	681a      	ldr	r2, [r3, #0]
 800b16c:	4b50      	ldr	r3, [pc, #320]	@ (800b2b0 <UART_SetConfig+0x228>)
 800b16e:	429a      	cmp	r2, r3
 800b170:	d102      	bne.n	800b178 <UART_SetConfig+0xf0>
 800b172:	2308      	movs	r3, #8
 800b174:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b176:	e011      	b.n	800b19c <UART_SetConfig+0x114>
 800b178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b17a:	681a      	ldr	r2, [r3, #0]
 800b17c:	4b4d      	ldr	r3, [pc, #308]	@ (800b2b4 <UART_SetConfig+0x22c>)
 800b17e:	429a      	cmp	r2, r3
 800b180:	d102      	bne.n	800b188 <UART_SetConfig+0x100>
 800b182:	2310      	movs	r3, #16
 800b184:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b186:	e009      	b.n	800b19c <UART_SetConfig+0x114>
 800b188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b18a:	681a      	ldr	r2, [r3, #0]
 800b18c:	4b42      	ldr	r3, [pc, #264]	@ (800b298 <UART_SetConfig+0x210>)
 800b18e:	429a      	cmp	r2, r3
 800b190:	d102      	bne.n	800b198 <UART_SetConfig+0x110>
 800b192:	2320      	movs	r3, #32
 800b194:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b196:	e001      	b.n	800b19c <UART_SetConfig+0x114>
 800b198:	2300      	movs	r3, #0
 800b19a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b19c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b19e:	681a      	ldr	r2, [r3, #0]
 800b1a0:	4b3d      	ldr	r3, [pc, #244]	@ (800b298 <UART_SetConfig+0x210>)
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d005      	beq.n	800b1b2 <UART_SetConfig+0x12a>
 800b1a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1a8:	681a      	ldr	r2, [r3, #0]
 800b1aa:	4b3d      	ldr	r3, [pc, #244]	@ (800b2a0 <UART_SetConfig+0x218>)
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	f040 8085 	bne.w	800b2bc <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b1b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	623b      	str	r3, [r7, #32]
 800b1b8:	627a      	str	r2, [r7, #36]	@ 0x24
 800b1ba:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800b1be:	f7fd ff17 	bl	8008ff0 <HAL_RCCEx_GetPeriphCLKFreq>
 800b1c2:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800b1c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	f000 80e8 	beq.w	800b39c <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b1cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1d0:	4a39      	ldr	r2, [pc, #228]	@ (800b2b8 <UART_SetConfig+0x230>)
 800b1d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b1d6:	461a      	mov	r2, r3
 800b1d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b1da:	fbb3 f3f2 	udiv	r3, r3, r2
 800b1de:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b1e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1e2:	685a      	ldr	r2, [r3, #4]
 800b1e4:	4613      	mov	r3, r2
 800b1e6:	005b      	lsls	r3, r3, #1
 800b1e8:	4413      	add	r3, r2
 800b1ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b1ec:	429a      	cmp	r2, r3
 800b1ee:	d305      	bcc.n	800b1fc <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b1f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1f2:	685b      	ldr	r3, [r3, #4]
 800b1f4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b1f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b1f8:	429a      	cmp	r2, r3
 800b1fa:	d903      	bls.n	800b204 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b202:	e048      	b.n	800b296 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b204:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b206:	2200      	movs	r2, #0
 800b208:	61bb      	str	r3, [r7, #24]
 800b20a:	61fa      	str	r2, [r7, #28]
 800b20c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b20e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b210:	4a29      	ldr	r2, [pc, #164]	@ (800b2b8 <UART_SetConfig+0x230>)
 800b212:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b216:	b29b      	uxth	r3, r3
 800b218:	2200      	movs	r2, #0
 800b21a:	613b      	str	r3, [r7, #16]
 800b21c:	617a      	str	r2, [r7, #20]
 800b21e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b222:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b226:	f7f5 f87b 	bl	8000320 <__aeabi_uldivmod>
 800b22a:	4602      	mov	r2, r0
 800b22c:	460b      	mov	r3, r1
 800b22e:	4610      	mov	r0, r2
 800b230:	4619      	mov	r1, r3
 800b232:	f04f 0200 	mov.w	r2, #0
 800b236:	f04f 0300 	mov.w	r3, #0
 800b23a:	020b      	lsls	r3, r1, #8
 800b23c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b240:	0202      	lsls	r2, r0, #8
 800b242:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b244:	6849      	ldr	r1, [r1, #4]
 800b246:	0849      	lsrs	r1, r1, #1
 800b248:	2000      	movs	r0, #0
 800b24a:	460c      	mov	r4, r1
 800b24c:	4605      	mov	r5, r0
 800b24e:	eb12 0804 	adds.w	r8, r2, r4
 800b252:	eb43 0905 	adc.w	r9, r3, r5
 800b256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b258:	685b      	ldr	r3, [r3, #4]
 800b25a:	2200      	movs	r2, #0
 800b25c:	60bb      	str	r3, [r7, #8]
 800b25e:	60fa      	str	r2, [r7, #12]
 800b260:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b264:	4640      	mov	r0, r8
 800b266:	4649      	mov	r1, r9
 800b268:	f7f5 f85a 	bl	8000320 <__aeabi_uldivmod>
 800b26c:	4602      	mov	r2, r0
 800b26e:	460b      	mov	r3, r1
 800b270:	4613      	mov	r3, r2
 800b272:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b274:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b276:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b27a:	d308      	bcc.n	800b28e <UART_SetConfig+0x206>
 800b27c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b27e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b282:	d204      	bcs.n	800b28e <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800b284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b28a:	60da      	str	r2, [r3, #12]
 800b28c:	e003      	b.n	800b296 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800b28e:	2301      	movs	r3, #1
 800b290:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800b294:	e082      	b.n	800b39c <UART_SetConfig+0x314>
 800b296:	e081      	b.n	800b39c <UART_SetConfig+0x314>
 800b298:	46002400 	.word	0x46002400
 800b29c:	cfff69f3 	.word	0xcfff69f3
 800b2a0:	56002400 	.word	0x56002400
 800b2a4:	40013800 	.word	0x40013800
 800b2a8:	40004400 	.word	0x40004400
 800b2ac:	40004800 	.word	0x40004800
 800b2b0:	40004c00 	.word	0x40004c00
 800b2b4:	40005000 	.word	0x40005000
 800b2b8:	0802ea54 	.word	0x0802ea54
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b2bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2be:	69db      	ldr	r3, [r3, #28]
 800b2c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b2c4:	d13c      	bne.n	800b340 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b2c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	603b      	str	r3, [r7, #0]
 800b2cc:	607a      	str	r2, [r7, #4]
 800b2ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b2d2:	f7fd fe8d 	bl	8008ff0 <HAL_RCCEx_GetPeriphCLKFreq>
 800b2d6:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b2d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d05e      	beq.n	800b39c <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b2de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2e2:	4a39      	ldr	r2, [pc, #228]	@ (800b3c8 <UART_SetConfig+0x340>)
 800b2e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2e8:	461a      	mov	r2, r3
 800b2ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b2ec:	fbb3 f3f2 	udiv	r3, r3, r2
 800b2f0:	005a      	lsls	r2, r3, #1
 800b2f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2f4:	685b      	ldr	r3, [r3, #4]
 800b2f6:	085b      	lsrs	r3, r3, #1
 800b2f8:	441a      	add	r2, r3
 800b2fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2fc:	685b      	ldr	r3, [r3, #4]
 800b2fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800b302:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b304:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b306:	2b0f      	cmp	r3, #15
 800b308:	d916      	bls.n	800b338 <UART_SetConfig+0x2b0>
 800b30a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b30c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b310:	d212      	bcs.n	800b338 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b312:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b314:	b29b      	uxth	r3, r3
 800b316:	f023 030f 	bic.w	r3, r3, #15
 800b31a:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b31c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b31e:	085b      	lsrs	r3, r3, #1
 800b320:	b29b      	uxth	r3, r3
 800b322:	f003 0307 	and.w	r3, r3, #7
 800b326:	b29a      	uxth	r2, r3
 800b328:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b32a:	4313      	orrs	r3, r2
 800b32c:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800b32e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800b334:	60da      	str	r2, [r3, #12]
 800b336:	e031      	b.n	800b39c <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800b338:	2301      	movs	r3, #1
 800b33a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b33e:	e02d      	b.n	800b39c <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b340:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b342:	2200      	movs	r2, #0
 800b344:	469a      	mov	sl, r3
 800b346:	4693      	mov	fp, r2
 800b348:	4650      	mov	r0, sl
 800b34a:	4659      	mov	r1, fp
 800b34c:	f7fd fe50 	bl	8008ff0 <HAL_RCCEx_GetPeriphCLKFreq>
 800b350:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800b352:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b354:	2b00      	cmp	r3, #0
 800b356:	d021      	beq.n	800b39c <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b35a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b35c:	4a1a      	ldr	r2, [pc, #104]	@ (800b3c8 <UART_SetConfig+0x340>)
 800b35e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b362:	461a      	mov	r2, r3
 800b364:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b366:	fbb3 f2f2 	udiv	r2, r3, r2
 800b36a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b36c:	685b      	ldr	r3, [r3, #4]
 800b36e:	085b      	lsrs	r3, r3, #1
 800b370:	441a      	add	r2, r3
 800b372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b374:	685b      	ldr	r3, [r3, #4]
 800b376:	fbb2 f3f3 	udiv	r3, r2, r3
 800b37a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b37c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b37e:	2b0f      	cmp	r3, #15
 800b380:	d909      	bls.n	800b396 <UART_SetConfig+0x30e>
 800b382:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b384:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b388:	d205      	bcs.n	800b396 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b38a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b38c:	b29a      	uxth	r2, r3
 800b38e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	60da      	str	r2, [r3, #12]
 800b394:	e002      	b.n	800b39c <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800b396:	2301      	movs	r3, #1
 800b398:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b39c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b39e:	2201      	movs	r2, #1
 800b3a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b3a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3a6:	2201      	movs	r2, #1
 800b3a8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b3ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b3b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b3b8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3750      	adds	r7, #80	@ 0x50
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b3c6:	bf00      	nop
 800b3c8:	0802ea54 	.word	0x0802ea54

0800b3cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b083      	sub	sp, #12
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3d8:	f003 0308 	and.w	r3, r3, #8
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d00a      	beq.n	800b3f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	685b      	ldr	r3, [r3, #4]
 800b3e6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	430a      	orrs	r2, r1
 800b3f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3fa:	f003 0301 	and.w	r3, r3, #1
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d00a      	beq.n	800b418 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	685b      	ldr	r3, [r3, #4]
 800b408:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	430a      	orrs	r2, r1
 800b416:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b41c:	f003 0302 	and.w	r3, r3, #2
 800b420:	2b00      	cmp	r3, #0
 800b422:	d00a      	beq.n	800b43a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	685b      	ldr	r3, [r3, #4]
 800b42a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	430a      	orrs	r2, r1
 800b438:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b43e:	f003 0304 	and.w	r3, r3, #4
 800b442:	2b00      	cmp	r3, #0
 800b444:	d00a      	beq.n	800b45c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	685b      	ldr	r3, [r3, #4]
 800b44c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	430a      	orrs	r2, r1
 800b45a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b460:	f003 0310 	and.w	r3, r3, #16
 800b464:	2b00      	cmp	r3, #0
 800b466:	d00a      	beq.n	800b47e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	689b      	ldr	r3, [r3, #8]
 800b46e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	430a      	orrs	r2, r1
 800b47c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b482:	f003 0320 	and.w	r3, r3, #32
 800b486:	2b00      	cmp	r3, #0
 800b488:	d00a      	beq.n	800b4a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	689b      	ldr	r3, [r3, #8]
 800b490:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	430a      	orrs	r2, r1
 800b49e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d01a      	beq.n	800b4e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	685b      	ldr	r3, [r3, #4]
 800b4b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	430a      	orrs	r2, r1
 800b4c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b4ca:	d10a      	bne.n	800b4e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	685b      	ldr	r3, [r3, #4]
 800b4d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	430a      	orrs	r2, r1
 800b4e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d00a      	beq.n	800b504 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	685b      	ldr	r3, [r3, #4]
 800b4f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	430a      	orrs	r2, r1
 800b502:	605a      	str	r2, [r3, #4]
  }
}
 800b504:	bf00      	nop
 800b506:	370c      	adds	r7, #12
 800b508:	46bd      	mov	sp, r7
 800b50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50e:	4770      	bx	lr

0800b510 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b098      	sub	sp, #96	@ 0x60
 800b514:	af02      	add	r7, sp, #8
 800b516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2200      	movs	r2, #0
 800b51c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b520:	f7f6 fd06 	bl	8001f30 <HAL_GetTick>
 800b524:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	f003 0308 	and.w	r3, r3, #8
 800b530:	2b08      	cmp	r3, #8
 800b532:	d12f      	bne.n	800b594 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b534:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b538:	9300      	str	r3, [sp, #0]
 800b53a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b53c:	2200      	movs	r2, #0
 800b53e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f000 f88e 	bl	800b664 <UART_WaitOnFlagUntilTimeout>
 800b548:	4603      	mov	r3, r0
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d022      	beq.n	800b594 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b556:	e853 3f00 	ldrex	r3, [r3]
 800b55a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b55c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b55e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b562:	653b      	str	r3, [r7, #80]	@ 0x50
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	461a      	mov	r2, r3
 800b56a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b56c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b56e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b570:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b572:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b574:	e841 2300 	strex	r3, r2, [r1]
 800b578:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b57a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d1e6      	bne.n	800b54e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2220      	movs	r2, #32
 800b584:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2200      	movs	r2, #0
 800b58c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b590:	2303      	movs	r3, #3
 800b592:	e063      	b.n	800b65c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	f003 0304 	and.w	r3, r3, #4
 800b59e:	2b04      	cmp	r3, #4
 800b5a0:	d149      	bne.n	800b636 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b5a2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b5a6:	9300      	str	r3, [sp, #0]
 800b5a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f000 f857 	bl	800b664 <UART_WaitOnFlagUntilTimeout>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d03c      	beq.n	800b636 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5c4:	e853 3f00 	ldrex	r3, [r3]
 800b5c8:	623b      	str	r3, [r7, #32]
   return(result);
 800b5ca:	6a3b      	ldr	r3, [r7, #32]
 800b5cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b5d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	461a      	mov	r2, r3
 800b5d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b5da:	633b      	str	r3, [r7, #48]	@ 0x30
 800b5dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b5e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b5e2:	e841 2300 	strex	r3, r2, [r1]
 800b5e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b5e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d1e6      	bne.n	800b5bc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	3308      	adds	r3, #8
 800b5f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5f6:	693b      	ldr	r3, [r7, #16]
 800b5f8:	e853 3f00 	ldrex	r3, [r3]
 800b5fc:	60fb      	str	r3, [r7, #12]
   return(result);
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	f023 0301 	bic.w	r3, r3, #1
 800b604:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	3308      	adds	r3, #8
 800b60c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b60e:	61fa      	str	r2, [r7, #28]
 800b610:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b612:	69b9      	ldr	r1, [r7, #24]
 800b614:	69fa      	ldr	r2, [r7, #28]
 800b616:	e841 2300 	strex	r3, r2, [r1]
 800b61a:	617b      	str	r3, [r7, #20]
   return(result);
 800b61c:	697b      	ldr	r3, [r7, #20]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d1e5      	bne.n	800b5ee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2220      	movs	r2, #32
 800b626:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2200      	movs	r2, #0
 800b62e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b632:	2303      	movs	r3, #3
 800b634:	e012      	b.n	800b65c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2220      	movs	r2, #32
 800b63a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2220      	movs	r2, #32
 800b642:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2200      	movs	r2, #0
 800b64a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2200      	movs	r2, #0
 800b650:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2200      	movs	r2, #0
 800b656:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b65a:	2300      	movs	r3, #0
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	3758      	adds	r7, #88	@ 0x58
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}

0800b664 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b084      	sub	sp, #16
 800b668:	af00      	add	r7, sp, #0
 800b66a:	60f8      	str	r0, [r7, #12]
 800b66c:	60b9      	str	r1, [r7, #8]
 800b66e:	603b      	str	r3, [r7, #0]
 800b670:	4613      	mov	r3, r2
 800b672:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b674:	e04f      	b.n	800b716 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b676:	69bb      	ldr	r3, [r7, #24]
 800b678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b67c:	d04b      	beq.n	800b716 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b67e:	f7f6 fc57 	bl	8001f30 <HAL_GetTick>
 800b682:	4602      	mov	r2, r0
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	1ad3      	subs	r3, r2, r3
 800b688:	69ba      	ldr	r2, [r7, #24]
 800b68a:	429a      	cmp	r2, r3
 800b68c:	d302      	bcc.n	800b694 <UART_WaitOnFlagUntilTimeout+0x30>
 800b68e:	69bb      	ldr	r3, [r7, #24]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d101      	bne.n	800b698 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b694:	2303      	movs	r3, #3
 800b696:	e04e      	b.n	800b736 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	f003 0304 	and.w	r3, r3, #4
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d037      	beq.n	800b716 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b6a6:	68bb      	ldr	r3, [r7, #8]
 800b6a8:	2b80      	cmp	r3, #128	@ 0x80
 800b6aa:	d034      	beq.n	800b716 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	2b40      	cmp	r3, #64	@ 0x40
 800b6b0:	d031      	beq.n	800b716 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	69db      	ldr	r3, [r3, #28]
 800b6b8:	f003 0308 	and.w	r3, r3, #8
 800b6bc:	2b08      	cmp	r3, #8
 800b6be:	d110      	bne.n	800b6e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	2208      	movs	r2, #8
 800b6c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b6c8:	68f8      	ldr	r0, [r7, #12]
 800b6ca:	f000 f838 	bl	800b73e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	2208      	movs	r2, #8
 800b6d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	2200      	movs	r2, #0
 800b6da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b6de:	2301      	movs	r3, #1
 800b6e0:	e029      	b.n	800b736 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	69db      	ldr	r3, [r3, #28]
 800b6e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b6ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b6f0:	d111      	bne.n	800b716 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b6fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b6fc:	68f8      	ldr	r0, [r7, #12]
 800b6fe:	f000 f81e 	bl	800b73e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	2220      	movs	r2, #32
 800b706:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	2200      	movs	r2, #0
 800b70e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b712:	2303      	movs	r3, #3
 800b714:	e00f      	b.n	800b736 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	69da      	ldr	r2, [r3, #28]
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	4013      	ands	r3, r2
 800b720:	68ba      	ldr	r2, [r7, #8]
 800b722:	429a      	cmp	r2, r3
 800b724:	bf0c      	ite	eq
 800b726:	2301      	moveq	r3, #1
 800b728:	2300      	movne	r3, #0
 800b72a:	b2db      	uxtb	r3, r3
 800b72c:	461a      	mov	r2, r3
 800b72e:	79fb      	ldrb	r3, [r7, #7]
 800b730:	429a      	cmp	r2, r3
 800b732:	d0a0      	beq.n	800b676 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b734:	2300      	movs	r3, #0
}
 800b736:	4618      	mov	r0, r3
 800b738:	3710      	adds	r7, #16
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}

0800b73e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b73e:	b480      	push	{r7}
 800b740:	b095      	sub	sp, #84	@ 0x54
 800b742:	af00      	add	r7, sp, #0
 800b744:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b74c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b74e:	e853 3f00 	ldrex	r3, [r3]
 800b752:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b756:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b75a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	461a      	mov	r2, r3
 800b762:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b764:	643b      	str	r3, [r7, #64]	@ 0x40
 800b766:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b768:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b76a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b76c:	e841 2300 	strex	r3, r2, [r1]
 800b770:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b774:	2b00      	cmp	r3, #0
 800b776:	d1e6      	bne.n	800b746 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	3308      	adds	r3, #8
 800b77e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b780:	6a3b      	ldr	r3, [r7, #32]
 800b782:	e853 3f00 	ldrex	r3, [r3]
 800b786:	61fb      	str	r3, [r7, #28]
   return(result);
 800b788:	69fb      	ldr	r3, [r7, #28]
 800b78a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b78e:	f023 0301 	bic.w	r3, r3, #1
 800b792:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	3308      	adds	r3, #8
 800b79a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b79c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b79e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b7a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b7a4:	e841 2300 	strex	r3, r2, [r1]
 800b7a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b7aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d1e3      	bne.n	800b778 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b7b4:	2b01      	cmp	r3, #1
 800b7b6:	d118      	bne.n	800b7ea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	e853 3f00 	ldrex	r3, [r3]
 800b7c4:	60bb      	str	r3, [r7, #8]
   return(result);
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	f023 0310 	bic.w	r3, r3, #16
 800b7cc:	647b      	str	r3, [r7, #68]	@ 0x44
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	461a      	mov	r2, r3
 800b7d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b7d6:	61bb      	str	r3, [r7, #24]
 800b7d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7da:	6979      	ldr	r1, [r7, #20]
 800b7dc:	69ba      	ldr	r2, [r7, #24]
 800b7de:	e841 2300 	strex	r3, r2, [r1]
 800b7e2:	613b      	str	r3, [r7, #16]
   return(result);
 800b7e4:	693b      	ldr	r3, [r7, #16]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d1e6      	bne.n	800b7b8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2220      	movs	r2, #32
 800b7ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b7fe:	bf00      	nop
 800b800:	3754      	adds	r7, #84	@ 0x54
 800b802:	46bd      	mov	sp, r7
 800b804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b808:	4770      	bx	lr

0800b80a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b80a:	b480      	push	{r7}
 800b80c:	b085      	sub	sp, #20
 800b80e:	af00      	add	r7, sp, #0
 800b810:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b818:	2b01      	cmp	r3, #1
 800b81a:	d101      	bne.n	800b820 <HAL_UARTEx_DisableFifoMode+0x16>
 800b81c:	2302      	movs	r3, #2
 800b81e:	e027      	b.n	800b870 <HAL_UARTEx_DisableFifoMode+0x66>
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2201      	movs	r2, #1
 800b824:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2224      	movs	r2, #36	@ 0x24
 800b82c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	681a      	ldr	r2, [r3, #0]
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	f022 0201 	bic.w	r2, r2, #1
 800b846:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b84e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2200      	movs	r2, #0
 800b854:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	68fa      	ldr	r2, [r7, #12]
 800b85c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	2220      	movs	r2, #32
 800b862:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	2200      	movs	r2, #0
 800b86a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b86e:	2300      	movs	r3, #0
}
 800b870:	4618      	mov	r0, r3
 800b872:	3714      	adds	r7, #20
 800b874:	46bd      	mov	sp, r7
 800b876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87a:	4770      	bx	lr

0800b87c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b084      	sub	sp, #16
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
 800b884:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b88c:	2b01      	cmp	r3, #1
 800b88e:	d101      	bne.n	800b894 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b890:	2302      	movs	r3, #2
 800b892:	e02d      	b.n	800b8f0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2201      	movs	r2, #1
 800b898:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2224      	movs	r2, #36	@ 0x24
 800b8a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	681a      	ldr	r2, [r3, #0]
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	f022 0201 	bic.w	r2, r2, #1
 800b8ba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	689b      	ldr	r3, [r3, #8]
 800b8c2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	683a      	ldr	r2, [r7, #0]
 800b8cc:	430a      	orrs	r2, r1
 800b8ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f000 f84f 	bl	800b974 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	68fa      	ldr	r2, [r7, #12]
 800b8dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2220      	movs	r2, #32
 800b8e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b8ee:	2300      	movs	r3, #0
}
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	3710      	adds	r7, #16
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	bd80      	pop	{r7, pc}

0800b8f8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b084      	sub	sp, #16
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
 800b900:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b908:	2b01      	cmp	r3, #1
 800b90a:	d101      	bne.n	800b910 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b90c:	2302      	movs	r3, #2
 800b90e:	e02d      	b.n	800b96c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2201      	movs	r2, #1
 800b914:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2224      	movs	r2, #36	@ 0x24
 800b91c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	681a      	ldr	r2, [r3, #0]
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	f022 0201 	bic.w	r2, r2, #1
 800b936:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	689b      	ldr	r3, [r3, #8]
 800b93e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	683a      	ldr	r2, [r7, #0]
 800b948:	430a      	orrs	r2, r1
 800b94a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	f000 f811 	bl	800b974 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	68fa      	ldr	r2, [r7, #12]
 800b958:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2220      	movs	r2, #32
 800b95e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2200      	movs	r2, #0
 800b966:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b96a:	2300      	movs	r3, #0
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	3710      	adds	r7, #16
 800b970:	46bd      	mov	sp, r7
 800b972:	bd80      	pop	{r7, pc}

0800b974 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b974:	b480      	push	{r7}
 800b976:	b085      	sub	sp, #20
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b980:	2b00      	cmp	r3, #0
 800b982:	d108      	bne.n	800b996 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2201      	movs	r2, #1
 800b988:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2201      	movs	r2, #1
 800b990:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b994:	e031      	b.n	800b9fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b996:	2308      	movs	r3, #8
 800b998:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b99a:	2308      	movs	r3, #8
 800b99c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	689b      	ldr	r3, [r3, #8]
 800b9a4:	0e5b      	lsrs	r3, r3, #25
 800b9a6:	b2db      	uxtb	r3, r3
 800b9a8:	f003 0307 	and.w	r3, r3, #7
 800b9ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	689b      	ldr	r3, [r3, #8]
 800b9b4:	0f5b      	lsrs	r3, r3, #29
 800b9b6:	b2db      	uxtb	r3, r3
 800b9b8:	f003 0307 	and.w	r3, r3, #7
 800b9bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b9be:	7bbb      	ldrb	r3, [r7, #14]
 800b9c0:	7b3a      	ldrb	r2, [r7, #12]
 800b9c2:	4911      	ldr	r1, [pc, #68]	@ (800ba08 <UARTEx_SetNbDataToProcess+0x94>)
 800b9c4:	5c8a      	ldrb	r2, [r1, r2]
 800b9c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b9ca:	7b3a      	ldrb	r2, [r7, #12]
 800b9cc:	490f      	ldr	r1, [pc, #60]	@ (800ba0c <UARTEx_SetNbDataToProcess+0x98>)
 800b9ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b9d0:	fb93 f3f2 	sdiv	r3, r3, r2
 800b9d4:	b29a      	uxth	r2, r3
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b9dc:	7bfb      	ldrb	r3, [r7, #15]
 800b9de:	7b7a      	ldrb	r2, [r7, #13]
 800b9e0:	4909      	ldr	r1, [pc, #36]	@ (800ba08 <UARTEx_SetNbDataToProcess+0x94>)
 800b9e2:	5c8a      	ldrb	r2, [r1, r2]
 800b9e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b9e8:	7b7a      	ldrb	r2, [r7, #13]
 800b9ea:	4908      	ldr	r1, [pc, #32]	@ (800ba0c <UARTEx_SetNbDataToProcess+0x98>)
 800b9ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b9ee:	fb93 f3f2 	sdiv	r3, r3, r2
 800b9f2:	b29a      	uxth	r2, r3
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b9fa:	bf00      	nop
 800b9fc:	3714      	adds	r7, #20
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba04:	4770      	bx	lr
 800ba06:	bf00      	nop
 800ba08:	0802ea6c 	.word	0x0802ea6c
 800ba0c:	0802ea74 	.word	0x0802ea74

0800ba10 <LL_DLYB_SetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is set.
  *          - ERROR: the Delay value is not set.
  */
void LL_DLYB_SetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 800ba10:	b480      	push	{r7}
 800ba12:	b083      	sub	sp, #12
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	f043 0202 	orr.w	r2, r3, #2
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	601a      	str	r2, [r3, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	685a      	ldr	r2, [r3, #4]
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	021b      	lsls	r3, r3, #8
 800ba30:	431a      	orrs	r2, r3
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	605a      	str	r2, [r3, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f023 0202 	bic.w	r2, r3, #2
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	601a      	str	r2, [r3, #0]
}
 800ba42:	bf00      	nop
 800ba44:	370c      	adds	r7, #12
 800ba46:	46bd      	mov	sp, r7
 800ba48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4c:	4770      	bx	lr
	...

0800ba50 <__NVIC_SetPriority>:
{
 800ba50:	b480      	push	{r7}
 800ba52:	b083      	sub	sp, #12
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	4603      	mov	r3, r0
 800ba58:	6039      	str	r1, [r7, #0]
 800ba5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ba5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	db0a      	blt.n	800ba7a <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	b2da      	uxtb	r2, r3
 800ba68:	490c      	ldr	r1, [pc, #48]	@ (800ba9c <__NVIC_SetPriority+0x4c>)
 800ba6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ba6e:	0112      	lsls	r2, r2, #4
 800ba70:	b2d2      	uxtb	r2, r2
 800ba72:	440b      	add	r3, r1
 800ba74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800ba78:	e00a      	b.n	800ba90 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	b2da      	uxtb	r2, r3
 800ba7e:	4908      	ldr	r1, [pc, #32]	@ (800baa0 <__NVIC_SetPriority+0x50>)
 800ba80:	79fb      	ldrb	r3, [r7, #7]
 800ba82:	f003 030f 	and.w	r3, r3, #15
 800ba86:	3b04      	subs	r3, #4
 800ba88:	0112      	lsls	r2, r2, #4
 800ba8a:	b2d2      	uxtb	r2, r2
 800ba8c:	440b      	add	r3, r1
 800ba8e:	761a      	strb	r2, [r3, #24]
}
 800ba90:	bf00      	nop
 800ba92:	370c      	adds	r7, #12
 800ba94:	46bd      	mov	sp, r7
 800ba96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9a:	4770      	bx	lr
 800ba9c:	e000e100 	.word	0xe000e100
 800baa0:	e000ed00 	.word	0xe000ed00

0800baa4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800baa4:	b580      	push	{r7, lr}
 800baa6:	af00      	add	r7, sp, #0
#if (configUSE_TICKLESS_IDLE == 0)
  /* Clear overflow flag */
  SysTick->CTRL;
 800baa8:	4b05      	ldr	r3, [pc, #20]	@ (800bac0 <SysTick_Handler+0x1c>)
 800baaa:	681b      	ldr	r3, [r3, #0]
#endif

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800baac:	f002 fa82 	bl	800dfb4 <xTaskGetSchedulerState>
 800bab0:	4603      	mov	r3, r0
 800bab2:	2b01      	cmp	r3, #1
 800bab4:	d001      	beq.n	800baba <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800bab6:	f003 f80d 	bl	800ead4 <xPortSysTickHandler>
  }
}
 800baba:	bf00      	nop
 800babc:	bd80      	pop	{r7, pc}
 800babe:	bf00      	nop
 800bac0:	e000e010 	.word	0xe000e010

0800bac4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bac4:	b580      	push	{r7, lr}
 800bac6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start      */
  /* and when its priority is lower or equal to BASEPRI, svc instruction */
  /* causes a Hard Fault.                                                */
  NVIC_SetPriority (SVCall_IRQn, 0U);
 800bac8:	2100      	movs	r1, #0
 800baca:	f06f 0004 	mvn.w	r0, #4
 800bace:	f7ff ffbf 	bl	800ba50 <__NVIC_SetPriority>
#endif
}
 800bad2:	bf00      	nop
 800bad4:	bd80      	pop	{r7, pc}

0800bad6 <IRQ_Context>:
#endif

/*
  Determine if CPU executes from interrupt context or if interrupts are masked.
*/
__STATIC_INLINE uint32_t IRQ_Context (void) {
 800bad6:	b580      	push	{r7, lr}
 800bad8:	b086      	sub	sp, #24
 800bada:	af00      	add	r7, sp, #0
  uint32_t irq;
  BaseType_t state;

  irq = 0U;
 800badc:	2300      	movs	r3, #0
 800bade:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bae0:	f3ef 8305 	mrs	r3, IPSR
 800bae4:	60fb      	str	r3, [r7, #12]
  return(result);
 800bae6:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ_MODE()) {
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d002      	beq.n	800baf2 <IRQ_Context+0x1c>
    /* Called from interrupt context */
    irq = 1U;
 800baec:	2301      	movs	r3, #1
 800baee:	617b      	str	r3, [r7, #20]
 800baf0:	e013      	b.n	800bb1a <IRQ_Context+0x44>
  }
  else {
    /* Get FreeRTOS scheduler state */
    state = xTaskGetSchedulerState();
 800baf2:	f002 fa5f 	bl	800dfb4 <xTaskGetSchedulerState>
 800baf6:	6138      	str	r0, [r7, #16]

    if (state != taskSCHEDULER_NOT_STARTED) {
 800baf8:	693b      	ldr	r3, [r7, #16]
 800bafa:	2b01      	cmp	r3, #1
 800bafc:	d00d      	beq.n	800bb1a <IRQ_Context+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800bafe:	f3ef 8310 	mrs	r3, PRIMASK
 800bb02:	60bb      	str	r3, [r7, #8]
  return(result);
 800bb04:	68bb      	ldr	r3, [r7, #8]
      /* Scheduler was started */
      if (IS_IRQ_MASKED()) {
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d105      	bne.n	800bb16 <IRQ_Context+0x40>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bb0a:	f3ef 8311 	mrs	r3, BASEPRI
 800bb0e:	607b      	str	r3, [r7, #4]
  return(result);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d001      	beq.n	800bb1a <IRQ_Context+0x44>
        /* Interrupts are masked */
        irq = 1U;
 800bb16:	2301      	movs	r3, #1
 800bb18:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return context, 0: thread context, 1: IRQ context */
  return (irq);
 800bb1a:	697b      	ldr	r3, [r7, #20]
}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	3718      	adds	r7, #24
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}

0800bb24 <osKernelInitialize>:
/* ==== Kernel Management Functions ==== */

/*
  Initialize the RTOS Kernel.
*/
osStatus_t osKernelInitialize (void) {
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b082      	sub	sp, #8
 800bb28:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 800bb2a:	f7ff ffd4 	bl	800bad6 <IRQ_Context>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d003      	beq.n	800bb3c <osKernelInitialize+0x18>
    stat = osErrorISR;
 800bb34:	f06f 0305 	mvn.w	r3, #5
 800bb38:	607b      	str	r3, [r7, #4]
 800bb3a:	e012      	b.n	800bb62 <osKernelInitialize+0x3e>
  }
  else {
    state = xTaskGetSchedulerState();
 800bb3c:	f002 fa3a 	bl	800dfb4 <xTaskGetSchedulerState>
 800bb40:	6038      	str	r0, [r7, #0]

    /* Initialize if scheduler not started and not initialized before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelInactive)) {
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	2b01      	cmp	r3, #1
 800bb46:	d109      	bne.n	800bb5c <osKernelInitialize+0x38>
 800bb48:	4b08      	ldr	r3, [pc, #32]	@ (800bb6c <osKernelInitialize+0x48>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d105      	bne.n	800bb5c <osKernelInitialize+0x38>
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        /* Initialize the memory regions when using heap_5 variant */
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bb50:	4b06      	ldr	r3, [pc, #24]	@ (800bb6c <osKernelInitialize+0x48>)
 800bb52:	2201      	movs	r2, #1
 800bb54:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bb56:	2300      	movs	r3, #0
 800bb58:	607b      	str	r3, [r7, #4]
 800bb5a:	e002      	b.n	800bb62 <osKernelInitialize+0x3e>
    } else {
      stat = osError;
 800bb5c:	f04f 33ff 	mov.w	r3, #4294967295
 800bb60:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 800bb62:	687b      	ldr	r3, [r7, #4]
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3708      	adds	r7, #8
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}
 800bb6c:	20045c8c 	.word	0x20045c8c

0800bb70 <osKernelStart>:
}

/*
  Start the RTOS Kernel scheduler.
*/
osStatus_t osKernelStart (void) {
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b082      	sub	sp, #8
 800bb74:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 800bb76:	f7ff ffae 	bl	800bad6 <IRQ_Context>
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d003      	beq.n	800bb88 <osKernelStart+0x18>
    stat = osErrorISR;
 800bb80:	f06f 0305 	mvn.w	r3, #5
 800bb84:	607b      	str	r3, [r7, #4]
 800bb86:	e016      	b.n	800bbb6 <osKernelStart+0x46>
  }
  else {
    state = xTaskGetSchedulerState();
 800bb88:	f002 fa14 	bl	800dfb4 <xTaskGetSchedulerState>
 800bb8c:	6038      	str	r0, [r7, #0]

    /* Start scheduler if initialized and not started before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelReady)) {
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	2b01      	cmp	r3, #1
 800bb92:	d10d      	bne.n	800bbb0 <osKernelStart+0x40>
 800bb94:	4b0a      	ldr	r3, [pc, #40]	@ (800bbc0 <osKernelStart+0x50>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	2b01      	cmp	r3, #1
 800bb9a:	d109      	bne.n	800bbb0 <osKernelStart+0x40>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bb9c:	f7ff ff92 	bl	800bac4 <SVC_Setup>
      /* Change state to ensure correct API flow */
      KernelState = osKernelRunning;
 800bba0:	4b07      	ldr	r3, [pc, #28]	@ (800bbc0 <osKernelStart+0x50>)
 800bba2:	2202      	movs	r2, #2
 800bba4:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bba6:	f001 fcc7 	bl	800d538 <vTaskStartScheduler>
      stat = osOK;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	607b      	str	r3, [r7, #4]
 800bbae:	e002      	b.n	800bbb6 <osKernelStart+0x46>
    } else {
      stat = osError;
 800bbb0:	f04f 33ff 	mov.w	r3, #4294967295
 800bbb4:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 800bbb6:	687b      	ldr	r3, [r7, #4]
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	3708      	adds	r7, #8
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}
 800bbc0:	20045c8c 	.word	0x20045c8c

0800bbc4 <osThreadNew>:
  Limitations:
  - The memory for control block and stack must be provided in the osThreadAttr_t
    structure in order to allocate object statically.
  - Attribute osThreadJoinable is not supported, NULL is returned if used.
*/
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b08e      	sub	sp, #56	@ 0x38
 800bbc8:	af04      	add	r7, sp, #16
 800bbca:	60f8      	str	r0, [r7, #12]
 800bbcc:	60b9      	str	r1, [r7, #8]
 800bbce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (func != NULL)) {
 800bbd4:	f7ff ff7f 	bl	800bad6 <IRQ_Context>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d17f      	bne.n	800bcde <osThreadNew+0x11a>
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d07c      	beq.n	800bcde <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bbe4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bbe8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bbea:	2318      	movs	r3, #24
 800bbec:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bbee:	2300      	movs	r3, #0
 800bbf0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800bbf2:	f04f 33ff 	mov.w	r3, #4294967295
 800bbf6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d045      	beq.n	800bc8a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d002      	beq.n	800bc0c <osThreadNew+0x48>
        name = attr->name;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	699b      	ldr	r3, [r3, #24]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d002      	beq.n	800bc1a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	699b      	ldr	r3, [r3, #24]
 800bc18:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bc1a:	69fb      	ldr	r3, [r7, #28]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d008      	beq.n	800bc32 <osThreadNew+0x6e>
 800bc20:	69fb      	ldr	r3, [r7, #28]
 800bc22:	2b38      	cmp	r3, #56	@ 0x38
 800bc24:	d805      	bhi.n	800bc32 <osThreadNew+0x6e>
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	685b      	ldr	r3, [r3, #4]
 800bc2a:	f003 0301 	and.w	r3, r3, #1
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d001      	beq.n	800bc36 <osThreadNew+0x72>
        /* Invalid priority or unsupported osThreadJoinable attribute used */
        return (NULL);
 800bc32:	2300      	movs	r3, #0
 800bc34:	e054      	b.n	800bce0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	695b      	ldr	r3, [r3, #20]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d003      	beq.n	800bc46 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	695b      	ldr	r3, [r3, #20]
 800bc42:	089b      	lsrs	r3, r3, #2
 800bc44:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	689b      	ldr	r3, [r3, #8]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d00e      	beq.n	800bc6c <osThreadNew+0xa8>
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	68db      	ldr	r3, [r3, #12]
 800bc52:	2b5b      	cmp	r3, #91	@ 0x5b
 800bc54:	d90a      	bls.n	800bc6c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d006      	beq.n	800bc6c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	695b      	ldr	r3, [r3, #20]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d002      	beq.n	800bc6c <osThreadNew+0xa8>
        /* The memory for control block and stack is provided, use static object */
        mem = 1;
 800bc66:	2301      	movs	r3, #1
 800bc68:	61bb      	str	r3, [r7, #24]
 800bc6a:	e010      	b.n	800bc8e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	689b      	ldr	r3, [r3, #8]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d10c      	bne.n	800bc8e <osThreadNew+0xca>
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	68db      	ldr	r3, [r3, #12]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d108      	bne.n	800bc8e <osThreadNew+0xca>
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	691b      	ldr	r3, [r3, #16]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d104      	bne.n	800bc8e <osThreadNew+0xca>
          /* Control block and stack memory will be allocated from the dynamic pool */
          mem = 0;
 800bc84:	2300      	movs	r3, #0
 800bc86:	61bb      	str	r3, [r7, #24]
 800bc88:	e001      	b.n	800bc8e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bc8e:	69bb      	ldr	r3, [r7, #24]
 800bc90:	2b01      	cmp	r3, #1
 800bc92:	d110      	bne.n	800bcb6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bc98:	687a      	ldr	r2, [r7, #4]
 800bc9a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bc9c:	9202      	str	r2, [sp, #8]
 800bc9e:	9301      	str	r3, [sp, #4]
 800bca0:	69fb      	ldr	r3, [r7, #28]
 800bca2:	9300      	str	r3, [sp, #0]
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	6a3a      	ldr	r2, [r7, #32]
 800bca8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bcaa:	68f8      	ldr	r0, [r7, #12]
 800bcac:	f001 fa74 	bl	800d198 <xTaskCreateStatic>
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	617b      	str	r3, [r7, #20]
 800bcb4:	e013      	b.n	800bcde <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bcb6:	69bb      	ldr	r3, [r7, #24]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d110      	bne.n	800bcde <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (configSTACK_DEPTH_TYPE)stack, argument, prio, &hTask) != pdPASS) {
 800bcbc:	6a3b      	ldr	r3, [r7, #32]
 800bcbe:	b29a      	uxth	r2, r3
 800bcc0:	f107 0314 	add.w	r3, r7, #20
 800bcc4:	9301      	str	r3, [sp, #4]
 800bcc6:	69fb      	ldr	r3, [r7, #28]
 800bcc8:	9300      	str	r3, [sp, #0]
 800bcca:	68bb      	ldr	r3, [r7, #8]
 800bccc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bcce:	68f8      	ldr	r0, [r7, #12]
 800bcd0:	f001 faaf 	bl	800d232 <xTaskCreate>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	2b01      	cmp	r3, #1
 800bcd8:	d001      	beq.n	800bcde <osThreadNew+0x11a>
            hTask = NULL;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return thread ID */
  return ((osThreadId_t)hTask);
 800bcde:	697b      	ldr	r3, [r7, #20]
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	3728      	adds	r7, #40	@ 0x28
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}

0800bce8 <osDelay>:
/* ==== Generic Wait Functions ==== */

/*
  Wait for Timeout (Time Delay).
*/
osStatus_t osDelay (uint32_t ticks) {
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b084      	sub	sp, #16
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
  osStatus_t stat;

  if (IRQ_Context() != 0U) {
 800bcf0:	f7ff fef1 	bl	800bad6 <IRQ_Context>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d003      	beq.n	800bd02 <osDelay+0x1a>
    stat = osErrorISR;
 800bcfa:	f06f 0305 	mvn.w	r3, #5
 800bcfe:	60fb      	str	r3, [r7, #12]
 800bd00:	e007      	b.n	800bd12 <osDelay+0x2a>
  }
  else {
    stat = osOK;
 800bd02:	2300      	movs	r3, #0
 800bd04:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d002      	beq.n	800bd12 <osDelay+0x2a>
      vTaskDelay(ticks);
 800bd0c:	6878      	ldr	r0, [r7, #4]
 800bd0e:	f001 fbed 	bl	800d4ec <vTaskDelay>
    }
  }

  /* Return execution status */
  return (stat);
 800bd12:	68fb      	ldr	r3, [r7, #12]
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	3710      	adds	r7, #16
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bd80      	pop	{r7, pc}

0800bd1c <osSemaphoreNew>:
/* ==== Semaphore Management Functions ==== */

/*
  Create and Initialize a Semaphore object.
*/
osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b088      	sub	sp, #32
 800bd20:	af02      	add	r7, sp, #8
 800bd22:	60f8      	str	r0, [r7, #12]
 800bd24:	60b9      	str	r1, [r7, #8]
 800bd26:	607a      	str	r2, [r7, #4]
  SemaphoreHandle_t hSemaphore;
  int32_t mem;

  hSemaphore = NULL;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (max_count > 0U) && (initial_count <= max_count)) {
 800bd2c:	f7ff fed3 	bl	800bad6 <IRQ_Context>
 800bd30:	4603      	mov	r3, r0
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d175      	bne.n	800be22 <osSemaphoreNew+0x106>
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d072      	beq.n	800be22 <osSemaphoreNew+0x106>
 800bd3c:	68ba      	ldr	r2, [r7, #8]
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	429a      	cmp	r2, r3
 800bd42:	d86e      	bhi.n	800be22 <osSemaphoreNew+0x106>
    mem = -1;
 800bd44:	f04f 33ff 	mov.w	r3, #4294967295
 800bd48:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d015      	beq.n	800bd7c <osSemaphoreNew+0x60>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	689b      	ldr	r3, [r3, #8]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d006      	beq.n	800bd66 <osSemaphoreNew+0x4a>
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	68db      	ldr	r3, [r3, #12]
 800bd5c:	2b4f      	cmp	r3, #79	@ 0x4f
 800bd5e:	d902      	bls.n	800bd66 <osSemaphoreNew+0x4a>
        /* The memory for control block is provided, use static object */
        mem = 1;
 800bd60:	2301      	movs	r3, #1
 800bd62:	613b      	str	r3, [r7, #16]
 800bd64:	e00c      	b.n	800bd80 <osSemaphoreNew+0x64>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	689b      	ldr	r3, [r3, #8]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d108      	bne.n	800bd80 <osSemaphoreNew+0x64>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	68db      	ldr	r3, [r3, #12]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d104      	bne.n	800bd80 <osSemaphoreNew+0x64>
          /* Control block will be allocated from the dynamic pool */
          mem = 0;
 800bd76:	2300      	movs	r3, #0
 800bd78:	613b      	str	r3, [r7, #16]
 800bd7a:	e001      	b.n	800bd80 <osSemaphoreNew+0x64>
        }
      }
    }
    else {
      mem = 0;
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	613b      	str	r3, [r7, #16]
    }

    if (mem != -1) {
 800bd80:	693b      	ldr	r3, [r7, #16]
 800bd82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd86:	d04c      	beq.n	800be22 <osSemaphoreNew+0x106>
      if (max_count == 1U) {
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	2b01      	cmp	r3, #1
 800bd8c:	d128      	bne.n	800bde0 <osSemaphoreNew+0xc4>
        if (mem == 1) {
 800bd8e:	693b      	ldr	r3, [r7, #16]
 800bd90:	2b01      	cmp	r3, #1
 800bd92:	d10a      	bne.n	800bdaa <osSemaphoreNew+0x8e>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	689b      	ldr	r3, [r3, #8]
 800bd98:	2203      	movs	r2, #3
 800bd9a:	9200      	str	r2, [sp, #0]
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	2100      	movs	r1, #0
 800bda0:	2001      	movs	r0, #1
 800bda2:	f000 fb2e 	bl	800c402 <xQueueGenericCreateStatic>
 800bda6:	6178      	str	r0, [r7, #20]
 800bda8:	e005      	b.n	800bdb6 <osSemaphoreNew+0x9a>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800bdaa:	2203      	movs	r2, #3
 800bdac:	2100      	movs	r1, #0
 800bdae:	2001      	movs	r0, #1
 800bdb0:	f000 fb70 	bl	800c494 <xQueueGenericCreate>
 800bdb4:	6178      	str	r0, [r7, #20]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800bdb6:	697b      	ldr	r3, [r7, #20]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d022      	beq.n	800be02 <osSemaphoreNew+0xe6>
 800bdbc:	68bb      	ldr	r3, [r7, #8]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d01f      	beq.n	800be02 <osSemaphoreNew+0xe6>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	2100      	movs	r1, #0
 800bdc8:	6978      	ldr	r0, [r7, #20]
 800bdca:	f000 fc23 	bl	800c614 <xQueueGenericSend>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	2b01      	cmp	r3, #1
 800bdd2:	d016      	beq.n	800be02 <osSemaphoreNew+0xe6>
            vSemaphoreDelete (hSemaphore);
 800bdd4:	6978      	ldr	r0, [r7, #20]
 800bdd6:	f000 fff0 	bl	800cdba <vQueueDelete>
            hSemaphore = NULL;
 800bdda:	2300      	movs	r3, #0
 800bddc:	617b      	str	r3, [r7, #20]
 800bdde:	e010      	b.n	800be02 <osSemaphoreNew+0xe6>
          }
        }
      }
      else {
        if (mem == 1) {
 800bde0:	693b      	ldr	r3, [r7, #16]
 800bde2:	2b01      	cmp	r3, #1
 800bde4:	d108      	bne.n	800bdf8 <osSemaphoreNew+0xdc>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	689b      	ldr	r3, [r3, #8]
 800bdea:	461a      	mov	r2, r3
 800bdec:	68b9      	ldr	r1, [r7, #8]
 800bdee:	68f8      	ldr	r0, [r7, #12]
 800bdf0:	f000 fbbe 	bl	800c570 <xQueueCreateCountingSemaphoreStatic>
 800bdf4:	6178      	str	r0, [r7, #20]
 800bdf6:	e004      	b.n	800be02 <osSemaphoreNew+0xe6>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800bdf8:	68b9      	ldr	r1, [r7, #8]
 800bdfa:	68f8      	ldr	r0, [r7, #12]
 800bdfc:	f000 fbe3 	bl	800c5c6 <xQueueCreateCountingSemaphore>
 800be00:	6178      	str	r0, [r7, #20]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800be02:	697b      	ldr	r3, [r7, #20]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d00c      	beq.n	800be22 <osSemaphoreNew+0x106>
        if ((attr != NULL) && (attr->name != NULL)) {
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d009      	beq.n	800be22 <osSemaphoreNew+0x106>
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d005      	beq.n	800be22 <osSemaphoreNew+0x106>
          /* Only non-NULL name objects are added to the Queue Registry */
          vQueueAddToRegistry (hSemaphore, attr->name);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	4619      	mov	r1, r3
 800be1c:	6978      	ldr	r0, [r7, #20]
 800be1e:	f001 f911 	bl	800d044 <vQueueAddToRegistry>
      #endif
    }
  }

  /* Return semaphore ID */
  return ((osSemaphoreId_t)hSemaphore);
 800be22:	697b      	ldr	r3, [r7, #20]
}
 800be24:	4618      	mov	r0, r3
 800be26:	3718      	adds	r7, #24
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}

0800be2c <osSemaphoreAcquire>:

/*
  Acquire a Semaphore token or timeout if no tokens are available.
*/
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b086      	sub	sp, #24
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
 800be34:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800be3a:	2300      	movs	r3, #0
 800be3c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800be3e:	693b      	ldr	r3, [r7, #16]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d103      	bne.n	800be4c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800be44:	f06f 0303 	mvn.w	r3, #3
 800be48:	617b      	str	r3, [r7, #20]
 800be4a:	e034      	b.n	800beb6 <osSemaphoreAcquire+0x8a>
  }
  else if (IRQ_Context() != 0U) {
 800be4c:	f7ff fe43 	bl	800bad6 <IRQ_Context>
 800be50:	4603      	mov	r3, r0
 800be52:	2b00      	cmp	r3, #0
 800be54:	d01e      	beq.n	800be94 <osSemaphoreAcquire+0x68>
    if (timeout != 0U) {
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d003      	beq.n	800be64 <osSemaphoreAcquire+0x38>
      stat = osErrorParameter;
 800be5c:	f06f 0303 	mvn.w	r3, #3
 800be60:	617b      	str	r3, [r7, #20]
 800be62:	e028      	b.n	800beb6 <osSemaphoreAcquire+0x8a>
    }
    else {
      yield = pdFALSE;
 800be64:	2300      	movs	r3, #0
 800be66:	60fb      	str	r3, [r7, #12]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800be68:	f107 030c 	add.w	r3, r7, #12
 800be6c:	461a      	mov	r2, r3
 800be6e:	2100      	movs	r1, #0
 800be70:	6938      	ldr	r0, [r7, #16]
 800be72:	f000 ff30 	bl	800ccd6 <xQueueReceiveFromISR>
 800be76:	4603      	mov	r3, r0
 800be78:	2b01      	cmp	r3, #1
 800be7a:	d003      	beq.n	800be84 <osSemaphoreAcquire+0x58>
        stat = osErrorResource;
 800be7c:	f06f 0302 	mvn.w	r3, #2
 800be80:	617b      	str	r3, [r7, #20]
 800be82:	e018      	b.n	800beb6 <osSemaphoreAcquire+0x8a>
      } else {
        portYIELD_FROM_ISR (yield);
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d015      	beq.n	800beb6 <osSemaphoreAcquire+0x8a>
 800be8a:	4b0d      	ldr	r3, [pc, #52]	@ (800bec0 <osSemaphoreAcquire+0x94>)
 800be8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be90:	601a      	str	r2, [r3, #0]
 800be92:	e010      	b.n	800beb6 <osSemaphoreAcquire+0x8a>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800be94:	6839      	ldr	r1, [r7, #0]
 800be96:	6938      	ldr	r0, [r7, #16]
 800be98:	f000 fe43 	bl	800cb22 <xQueueSemaphoreTake>
 800be9c:	4603      	mov	r3, r0
 800be9e:	2b01      	cmp	r3, #1
 800bea0:	d009      	beq.n	800beb6 <osSemaphoreAcquire+0x8a>
      if (timeout != 0U) {
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d003      	beq.n	800beb0 <osSemaphoreAcquire+0x84>
        stat = osErrorTimeout;
 800bea8:	f06f 0301 	mvn.w	r3, #1
 800beac:	617b      	str	r3, [r7, #20]
 800beae:	e002      	b.n	800beb6 <osSemaphoreAcquire+0x8a>
      } else {
        stat = osErrorResource;
 800beb0:	f06f 0302 	mvn.w	r3, #2
 800beb4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return execution status */
  return (stat);
 800beb6:	697b      	ldr	r3, [r7, #20]
}
 800beb8:	4618      	mov	r0, r3
 800beba:	3718      	adds	r7, #24
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd80      	pop	{r7, pc}
 800bec0:	e000ed04 	.word	0xe000ed04

0800bec4 <osSemaphoreRelease>:

/*
  Release a Semaphore token up to the initial maximum count.
*/
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b086      	sub	sp, #24
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800bed0:	2300      	movs	r3, #0
 800bed2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800bed4:	693b      	ldr	r3, [r7, #16]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d103      	bne.n	800bee2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800beda:	f06f 0303 	mvn.w	r3, #3
 800bede:	617b      	str	r3, [r7, #20]
 800bee0:	e027      	b.n	800bf32 <osSemaphoreRelease+0x6e>
  }
  else if (IRQ_Context() != 0U) {
 800bee2:	f7ff fdf8 	bl	800bad6 <IRQ_Context>
 800bee6:	4603      	mov	r3, r0
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d016      	beq.n	800bf1a <osSemaphoreRelease+0x56>
    yield = pdFALSE;
 800beec:	2300      	movs	r3, #0
 800beee:	60fb      	str	r3, [r7, #12]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800bef0:	f107 030c 	add.w	r3, r7, #12
 800bef4:	4619      	mov	r1, r3
 800bef6:	6938      	ldr	r0, [r7, #16]
 800bef8:	f000 fcdf 	bl	800c8ba <xQueueGiveFromISR>
 800befc:	4603      	mov	r3, r0
 800befe:	2b01      	cmp	r3, #1
 800bf00:	d003      	beq.n	800bf0a <osSemaphoreRelease+0x46>
      stat = osErrorResource;
 800bf02:	f06f 0302 	mvn.w	r3, #2
 800bf06:	617b      	str	r3, [r7, #20]
 800bf08:	e013      	b.n	800bf32 <osSemaphoreRelease+0x6e>
    } else {
      portYIELD_FROM_ISR (yield);
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d010      	beq.n	800bf32 <osSemaphoreRelease+0x6e>
 800bf10:	4b0a      	ldr	r3, [pc, #40]	@ (800bf3c <osSemaphoreRelease+0x78>)
 800bf12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf16:	601a      	str	r2, [r3, #0]
 800bf18:	e00b      	b.n	800bf32 <osSemaphoreRelease+0x6e>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	2100      	movs	r1, #0
 800bf20:	6938      	ldr	r0, [r7, #16]
 800bf22:	f000 fb77 	bl	800c614 <xQueueGenericSend>
 800bf26:	4603      	mov	r3, r0
 800bf28:	2b01      	cmp	r3, #1
 800bf2a:	d002      	beq.n	800bf32 <osSemaphoreRelease+0x6e>
      stat = osErrorResource;
 800bf2c:	f06f 0302 	mvn.w	r3, #2
 800bf30:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return execution status */
  return (stat);
 800bf32:	697b      	ldr	r3, [r7, #20]
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3718      	adds	r7, #24
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}
 800bf3c:	e000ed04 	.word	0xe000ed04

0800bf40 <osMessageQueueNew>:

  Limitations:
  - The memory for control block and and message data must be provided in the
    osThreadAttr_t structure in order to allocate object statically.
*/
osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b088      	sub	sp, #32
 800bf44:	af02      	add	r7, sp, #8
 800bf46:	60f8      	str	r0, [r7, #12]
 800bf48:	60b9      	str	r1, [r7, #8]
 800bf4a:	607a      	str	r2, [r7, #4]
  QueueHandle_t hQueue;
  int32_t mem;

  hQueue = NULL;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (msg_count > 0U) && (msg_size > 0U)) {
 800bf50:	f7ff fdc1 	bl	800bad6 <IRQ_Context>
 800bf54:	4603      	mov	r3, r0
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d15f      	bne.n	800c01a <osMessageQueueNew+0xda>
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d05c      	beq.n	800c01a <osMessageQueueNew+0xda>
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d059      	beq.n	800c01a <osMessageQueueNew+0xda>
    mem = -1;
 800bf66:	f04f 33ff 	mov.w	r3, #4294967295
 800bf6a:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d029      	beq.n	800bfc6 <osMessageQueueNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	689b      	ldr	r3, [r3, #8]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d012      	beq.n	800bfa0 <osMessageQueueNew+0x60>
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	68db      	ldr	r3, [r3, #12]
 800bf7e:	2b4f      	cmp	r3, #79	@ 0x4f
 800bf80:	d90e      	bls.n	800bfa0 <osMessageQueueNew+0x60>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d00a      	beq.n	800bfa0 <osMessageQueueNew+0x60>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	695a      	ldr	r2, [r3, #20]
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	68b9      	ldr	r1, [r7, #8]
 800bf92:	fb01 f303 	mul.w	r3, r1, r3
 800bf96:	429a      	cmp	r2, r3
 800bf98:	d302      	bcc.n	800bfa0 <osMessageQueueNew+0x60>
        /* The memory for control block and message data is provided, use static object */
        mem = 1;
 800bf9a:	2301      	movs	r3, #1
 800bf9c:	613b      	str	r3, [r7, #16]
 800bf9e:	e014      	b.n	800bfca <osMessageQueueNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	689b      	ldr	r3, [r3, #8]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d110      	bne.n	800bfca <osMessageQueueNew+0x8a>
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	68db      	ldr	r3, [r3, #12]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d10c      	bne.n	800bfca <osMessageQueueNew+0x8a>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d108      	bne.n	800bfca <osMessageQueueNew+0x8a>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	695b      	ldr	r3, [r3, #20]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d104      	bne.n	800bfca <osMessageQueueNew+0x8a>
          /* Control block will be allocated from the dynamic pool */
          mem = 0;
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	613b      	str	r3, [r7, #16]
 800bfc4:	e001      	b.n	800bfca <osMessageQueueNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800bfca:	693b      	ldr	r3, [r7, #16]
 800bfcc:	2b01      	cmp	r3, #1
 800bfce:	d10b      	bne.n	800bfe8 <osMessageQueueNew+0xa8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	691a      	ldr	r2, [r3, #16]
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	689b      	ldr	r3, [r3, #8]
 800bfd8:	2100      	movs	r1, #0
 800bfda:	9100      	str	r1, [sp, #0]
 800bfdc:	68b9      	ldr	r1, [r7, #8]
 800bfde:	68f8      	ldr	r0, [r7, #12]
 800bfe0:	f000 fa0f 	bl	800c402 <xQueueGenericCreateStatic>
 800bfe4:	6178      	str	r0, [r7, #20]
 800bfe6:	e008      	b.n	800bffa <osMessageQueueNew+0xba>
      #endif
    }
    else {
      if (mem == 0) {
 800bfe8:	693b      	ldr	r3, [r7, #16]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d105      	bne.n	800bffa <osMessageQueueNew+0xba>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800bfee:	2200      	movs	r2, #0
 800bff0:	68b9      	ldr	r1, [r7, #8]
 800bff2:	68f8      	ldr	r0, [r7, #12]
 800bff4:	f000 fa4e 	bl	800c494 <xQueueGenericCreate>
 800bff8:	6178      	str	r0, [r7, #20]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800bffa:	697b      	ldr	r3, [r7, #20]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d00c      	beq.n	800c01a <osMessageQueueNew+0xda>
      if ((attr != NULL) && (attr->name != NULL)) {
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d009      	beq.n	800c01a <osMessageQueueNew+0xda>
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d005      	beq.n	800c01a <osMessageQueueNew+0xda>
        /* Only non-NULL name objects are added to the Queue Registry */
        vQueueAddToRegistry (hQueue, attr->name);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	4619      	mov	r1, r3
 800c014:	6978      	ldr	r0, [r7, #20]
 800c016:	f001 f815 	bl	800d044 <vQueueAddToRegistry>
    #endif

  }

  /* Return message queue ID */
  return ((osMessageQueueId_t)hQueue);
 800c01a:	697b      	ldr	r3, [r7, #20]
}
 800c01c:	4618      	mov	r0, r3
 800c01e:	3718      	adds	r7, #24
 800c020:	46bd      	mov	sp, r7
 800c022:	bd80      	pop	{r7, pc}

0800c024 <osMessageQueuePut>:
  Put a Message into a Queue or timeout if Queue is full.

  Limitations:
  - Message priority is ignored
*/
osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800c024:	b580      	push	{r7, lr}
 800c026:	b088      	sub	sp, #32
 800c028:	af00      	add	r7, sp, #0
 800c02a:	60f8      	str	r0, [r7, #12]
 800c02c:	60b9      	str	r1, [r7, #8]
 800c02e:	603b      	str	r3, [r7, #0]
 800c030:	4613      	mov	r3, r2
 800c032:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c038:	2300      	movs	r3, #0
 800c03a:	61fb      	str	r3, [r7, #28]

  if (IRQ_Context() != 0U) {
 800c03c:	f7ff fd4b 	bl	800bad6 <IRQ_Context>
 800c040:	4603      	mov	r3, r0
 800c042:	2b00      	cmp	r3, #0
 800c044:	d024      	beq.n	800c090 <osMessageQueuePut+0x6c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c046:	69bb      	ldr	r3, [r7, #24]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d005      	beq.n	800c058 <osMessageQueuePut+0x34>
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d002      	beq.n	800c058 <osMessageQueuePut+0x34>
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d003      	beq.n	800c060 <osMessageQueuePut+0x3c>
      stat = osErrorParameter;
 800c058:	f06f 0303 	mvn.w	r3, #3
 800c05c:	61fb      	str	r3, [r7, #28]
 800c05e:	e034      	b.n	800c0ca <osMessageQueuePut+0xa6>
    }
    else {
      yield = pdFALSE;
 800c060:	2300      	movs	r3, #0
 800c062:	617b      	str	r3, [r7, #20]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c064:	f107 0214 	add.w	r2, r7, #20
 800c068:	2300      	movs	r3, #0
 800c06a:	68b9      	ldr	r1, [r7, #8]
 800c06c:	69b8      	ldr	r0, [r7, #24]
 800c06e:	f000 fb9e 	bl	800c7ae <xQueueGenericSendFromISR>
 800c072:	4603      	mov	r3, r0
 800c074:	2b01      	cmp	r3, #1
 800c076:	d003      	beq.n	800c080 <osMessageQueuePut+0x5c>
        stat = osErrorResource;
 800c078:	f06f 0302 	mvn.w	r3, #2
 800c07c:	61fb      	str	r3, [r7, #28]
 800c07e:	e024      	b.n	800c0ca <osMessageQueuePut+0xa6>
      } else {
        portYIELD_FROM_ISR (yield);
 800c080:	697b      	ldr	r3, [r7, #20]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d021      	beq.n	800c0ca <osMessageQueuePut+0xa6>
 800c086:	4b13      	ldr	r3, [pc, #76]	@ (800c0d4 <osMessageQueuePut+0xb0>)
 800c088:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c08c:	601a      	str	r2, [r3, #0]
 800c08e:	e01c      	b.n	800c0ca <osMessageQueuePut+0xa6>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c090:	69bb      	ldr	r3, [r7, #24]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d002      	beq.n	800c09c <osMessageQueuePut+0x78>
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d103      	bne.n	800c0a4 <osMessageQueuePut+0x80>
      stat = osErrorParameter;
 800c09c:	f06f 0303 	mvn.w	r3, #3
 800c0a0:	61fb      	str	r3, [r7, #28]
 800c0a2:	e012      	b.n	800c0ca <osMessageQueuePut+0xa6>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	683a      	ldr	r2, [r7, #0]
 800c0a8:	68b9      	ldr	r1, [r7, #8]
 800c0aa:	69b8      	ldr	r0, [r7, #24]
 800c0ac:	f000 fab2 	bl	800c614 <xQueueGenericSend>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	2b01      	cmp	r3, #1
 800c0b4:	d009      	beq.n	800c0ca <osMessageQueuePut+0xa6>
        if (timeout != 0U) {
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d003      	beq.n	800c0c4 <osMessageQueuePut+0xa0>
          stat = osErrorTimeout;
 800c0bc:	f06f 0301 	mvn.w	r3, #1
 800c0c0:	61fb      	str	r3, [r7, #28]
 800c0c2:	e002      	b.n	800c0ca <osMessageQueuePut+0xa6>
        } else {
          stat = osErrorResource;
 800c0c4:	f06f 0302 	mvn.w	r3, #2
 800c0c8:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Return execution status */
  return (stat);
 800c0ca:	69fb      	ldr	r3, [r7, #28]
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3720      	adds	r7, #32
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}
 800c0d4:	e000ed04 	.word	0xe000ed04

0800c0d8 <osMessageQueueGet>:
  Get a Message from a Queue or timeout if Queue is empty.

  Limitations:
  - Message priority is ignored
*/
osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b088      	sub	sp, #32
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	60f8      	str	r0, [r7, #12]
 800c0e0:	60b9      	str	r1, [r7, #8]
 800c0e2:	607a      	str	r2, [r7, #4]
 800c0e4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	61fb      	str	r3, [r7, #28]

  if (IRQ_Context() != 0U) {
 800c0ee:	f7ff fcf2 	bl	800bad6 <IRQ_Context>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d024      	beq.n	800c142 <osMessageQueueGet+0x6a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c0f8:	69bb      	ldr	r3, [r7, #24]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d005      	beq.n	800c10a <osMessageQueueGet+0x32>
 800c0fe:	68bb      	ldr	r3, [r7, #8]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d002      	beq.n	800c10a <osMessageQueueGet+0x32>
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d003      	beq.n	800c112 <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 800c10a:	f06f 0303 	mvn.w	r3, #3
 800c10e:	61fb      	str	r3, [r7, #28]
 800c110:	e033      	b.n	800c17a <osMessageQueueGet+0xa2>
    }
    else {
      yield = pdFALSE;
 800c112:	2300      	movs	r3, #0
 800c114:	617b      	str	r3, [r7, #20]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c116:	f107 0314 	add.w	r3, r7, #20
 800c11a:	461a      	mov	r2, r3
 800c11c:	68b9      	ldr	r1, [r7, #8]
 800c11e:	69b8      	ldr	r0, [r7, #24]
 800c120:	f000 fdd9 	bl	800ccd6 <xQueueReceiveFromISR>
 800c124:	4603      	mov	r3, r0
 800c126:	2b01      	cmp	r3, #1
 800c128:	d003      	beq.n	800c132 <osMessageQueueGet+0x5a>
        stat = osErrorResource;
 800c12a:	f06f 0302 	mvn.w	r3, #2
 800c12e:	61fb      	str	r3, [r7, #28]
 800c130:	e023      	b.n	800c17a <osMessageQueueGet+0xa2>
      } else {
        portYIELD_FROM_ISR (yield);
 800c132:	697b      	ldr	r3, [r7, #20]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d020      	beq.n	800c17a <osMessageQueueGet+0xa2>
 800c138:	4b12      	ldr	r3, [pc, #72]	@ (800c184 <osMessageQueueGet+0xac>)
 800c13a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c13e:	601a      	str	r2, [r3, #0]
 800c140:	e01b      	b.n	800c17a <osMessageQueueGet+0xa2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c142:	69bb      	ldr	r3, [r7, #24]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d002      	beq.n	800c14e <osMessageQueueGet+0x76>
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d103      	bne.n	800c156 <osMessageQueueGet+0x7e>
      stat = osErrorParameter;
 800c14e:	f06f 0303 	mvn.w	r3, #3
 800c152:	61fb      	str	r3, [r7, #28]
 800c154:	e011      	b.n	800c17a <osMessageQueueGet+0xa2>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c156:	683a      	ldr	r2, [r7, #0]
 800c158:	68b9      	ldr	r1, [r7, #8]
 800c15a:	69b8      	ldr	r0, [r7, #24]
 800c15c:	f000 fc25 	bl	800c9aa <xQueueReceive>
 800c160:	4603      	mov	r3, r0
 800c162:	2b01      	cmp	r3, #1
 800c164:	d009      	beq.n	800c17a <osMessageQueueGet+0xa2>
        if (timeout != 0U) {
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d003      	beq.n	800c174 <osMessageQueueGet+0x9c>
          stat = osErrorTimeout;
 800c16c:	f06f 0301 	mvn.w	r3, #1
 800c170:	61fb      	str	r3, [r7, #28]
 800c172:	e002      	b.n	800c17a <osMessageQueueGet+0xa2>
        } else {
          stat = osErrorResource;
 800c174:	f06f 0302 	mvn.w	r3, #2
 800c178:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Return execution status */
  return (stat);
 800c17a:	69fb      	ldr	r3, [r7, #28]
}
 800c17c:	4618      	mov	r0, r3
 800c17e:	3720      	adds	r7, #32
 800c180:	46bd      	mov	sp, r7
 800c182:	bd80      	pop	{r7, pc}
 800c184:	e000ed04 	.word	0xe000ed04

0800c188 <vApplicationGetIdleTaskMemory>:
#if (configSUPPORT_STATIC_ALLOCATION == 1)
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c188:	b480      	push	{r7}
 800c18a:	b085      	sub	sp, #20
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	60f8      	str	r0, [r7, #12]
 800c190:	60b9      	str	r1, [r7, #8]
 800c192:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	4a07      	ldr	r2, [pc, #28]	@ (800c1b4 <vApplicationGetIdleTaskMemory+0x2c>)
 800c198:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c19a:	68bb      	ldr	r3, [r7, #8]
 800c19c:	4a06      	ldr	r2, [pc, #24]	@ (800c1b8 <vApplicationGetIdleTaskMemory+0x30>)
 800c19e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c1a6:	601a      	str	r2, [r3, #0]
}
 800c1a8:	bf00      	nop
 800c1aa:	3714      	adds	r7, #20
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b2:	4770      	bx	lr
 800c1b4:	20045c90 	.word	0x20045c90
 800c1b8:	20045cec 	.word	0x20045cec

0800c1bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c1bc:	b480      	push	{r7}
 800c1be:	b085      	sub	sp, #20
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	60f8      	str	r0, [r7, #12]
 800c1c4:	60b9      	str	r1, [r7, #8]
 800c1c6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	4a07      	ldr	r2, [pc, #28]	@ (800c1e8 <vApplicationGetTimerTaskMemory+0x2c>)
 800c1cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c1ce:	68bb      	ldr	r3, [r7, #8]
 800c1d0:	4a06      	ldr	r2, [pc, #24]	@ (800c1ec <vApplicationGetTimerTaskMemory+0x30>)
 800c1d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2280      	movs	r2, #128	@ 0x80
 800c1d8:	601a      	str	r2, [r3, #0]
}
 800c1da:	bf00      	nop
 800c1dc:	3714      	adds	r7, #20
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e4:	4770      	bx	lr
 800c1e6:	bf00      	nop
 800c1e8:	200464ec 	.word	0x200464ec
 800c1ec:	20046548 	.word	0x20046548

0800c1f0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c1f0:	b480      	push	{r7}
 800c1f2:	b083      	sub	sp, #12
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f103 0208 	add.w	r2, r3, #8
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	f04f 32ff 	mov.w	r2, #4294967295
 800c208:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f103 0208 	add.w	r2, r3, #8
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f103 0208 	add.w	r2, r3, #8
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2200      	movs	r2, #0
 800c222:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c224:	bf00      	nop
 800c226:	370c      	adds	r7, #12
 800c228:	46bd      	mov	sp, r7
 800c22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22e:	4770      	bx	lr

0800c230 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c230:	b480      	push	{r7}
 800c232:	b083      	sub	sp, #12
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2200      	movs	r2, #0
 800c23c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c23e:	bf00      	nop
 800c240:	370c      	adds	r7, #12
 800c242:	46bd      	mov	sp, r7
 800c244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c248:	4770      	bx	lr

0800c24a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800c24a:	b480      	push	{r7}
 800c24c:	b085      	sub	sp, #20
 800c24e:	af00      	add	r7, sp, #0
 800c250:	6078      	str	r0, [r7, #4]
 800c252:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800c25a:	68bb      	ldr	r3, [r7, #8]
 800c25c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c260:	d103      	bne.n	800c26a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	691b      	ldr	r3, [r3, #16]
 800c266:	60fb      	str	r3, [r7, #12]
 800c268:	e00c      	b.n	800c284 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	3308      	adds	r3, #8
 800c26e:	60fb      	str	r3, [r7, #12]
 800c270:	e002      	b.n	800c278 <vListInsert+0x2e>
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	685b      	ldr	r3, [r3, #4]
 800c276:	60fb      	str	r3, [r7, #12]
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	685b      	ldr	r3, [r3, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	68ba      	ldr	r2, [r7, #8]
 800c280:	429a      	cmp	r2, r3
 800c282:	d2f6      	bcs.n	800c272 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	685a      	ldr	r2, [r3, #4]
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	685b      	ldr	r3, [r3, #4]
 800c290:	683a      	ldr	r2, [r7, #0]
 800c292:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	68fa      	ldr	r2, [r7, #12]
 800c298:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	683a      	ldr	r2, [r7, #0]
 800c29e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	687a      	ldr	r2, [r7, #4]
 800c2a4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	1c5a      	adds	r2, r3, #1
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	601a      	str	r2, [r3, #0]
}
 800c2b0:	bf00      	nop
 800c2b2:	3714      	adds	r7, #20
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ba:	4770      	bx	lr

0800c2bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c2bc:	b480      	push	{r7}
 800c2be:	b085      	sub	sp, #20
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	691b      	ldr	r3, [r3, #16]
 800c2c8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	685b      	ldr	r3, [r3, #4]
 800c2ce:	687a      	ldr	r2, [r7, #4]
 800c2d0:	6892      	ldr	r2, [r2, #8]
 800c2d2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	689b      	ldr	r3, [r3, #8]
 800c2d8:	687a      	ldr	r2, [r7, #4]
 800c2da:	6852      	ldr	r2, [r2, #4]
 800c2dc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	685b      	ldr	r3, [r3, #4]
 800c2e2:	687a      	ldr	r2, [r7, #4]
 800c2e4:	429a      	cmp	r2, r3
 800c2e6:	d103      	bne.n	800c2f0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	689a      	ldr	r2, [r3, #8]
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	1e5a      	subs	r2, r3, #1
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	681b      	ldr	r3, [r3, #0]
}
 800c304:	4618      	mov	r0, r3
 800c306:	3714      	adds	r7, #20
 800c308:	46bd      	mov	sp, r7
 800c30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30e:	4770      	bx	lr

0800c310 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b084      	sub	sp, #16
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
 800c318:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800c31a:	2301      	movs	r3, #1
 800c31c:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 800c322:	68bb      	ldr	r3, [r7, #8]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d103      	bne.n	800c330 <xQueueGenericReset+0x20>
 800c328:	f002 fd76 	bl	800ee18 <ulSetInterruptMask>
 800c32c:	bf00      	nop
 800c32e:	e7fd      	b.n	800c32c <xQueueGenericReset+0x1c>

    if( ( pxQueue != NULL ) &&
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d057      	beq.n	800c3e6 <xQueueGenericReset+0xd6>
        ( pxQueue->uxLength >= 1U ) &&
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d053      	beq.n	800c3e6 <xQueueGenericReset+0xd6>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c342:	68bb      	ldr	r3, [r7, #8]
 800c344:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c346:	2100      	movs	r1, #0
 800c348:	fba3 2302 	umull	r2, r3, r3, r2
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d000      	beq.n	800c352 <xQueueGenericReset+0x42>
 800c350:	2101      	movs	r1, #1
 800c352:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800c354:	2b00      	cmp	r3, #0
 800c356:	d146      	bne.n	800c3e6 <xQueueGenericReset+0xd6>
    {
        taskENTER_CRITICAL();
 800c358:	f002 fb90 	bl	800ea7c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	681a      	ldr	r2, [r3, #0]
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c364:	68b9      	ldr	r1, [r7, #8]
 800c366:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c368:	fb01 f303 	mul.w	r3, r1, r3
 800c36c:	441a      	add	r2, r3
 800c36e:	68bb      	ldr	r3, [r7, #8]
 800c370:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	2200      	movs	r2, #0
 800c376:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	681a      	ldr	r2, [r3, #0]
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c380:	68bb      	ldr	r3, [r7, #8]
 800c382:	681a      	ldr	r2, [r3, #0]
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c388:	3b01      	subs	r3, #1
 800c38a:	68b9      	ldr	r1, [r7, #8]
 800c38c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c38e:	fb01 f303 	mul.w	r3, r1, r3
 800c392:	441a      	add	r2, r3
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	22ff      	movs	r2, #255	@ 0xff
 800c39c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800c3a0:	68bb      	ldr	r3, [r7, #8]
 800c3a2:	22ff      	movs	r2, #255	@ 0xff
 800c3a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d10e      	bne.n	800c3cc <xQueueGenericReset+0xbc>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	691b      	ldr	r3, [r3, #16]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d014      	beq.n	800c3e0 <xQueueGenericReset+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	3310      	adds	r3, #16
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f001 fbf0 	bl	800dba0 <xTaskRemoveFromEventList>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d00c      	beq.n	800c3e0 <xQueueGenericReset+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800c3c6:	f002 fb47 	bl	800ea58 <vPortYield>
 800c3ca:	e009      	b.n	800c3e0 <xQueueGenericReset+0xd0>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	3310      	adds	r3, #16
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	f7ff ff0d 	bl	800c1f0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c3d6:	68bb      	ldr	r3, [r7, #8]
 800c3d8:	3324      	adds	r3, #36	@ 0x24
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f7ff ff08 	bl	800c1f0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800c3e0:	f002 fb5e 	bl	800eaa0 <vPortExitCritical>
 800c3e4:	e001      	b.n	800c3ea <xQueueGenericReset+0xda>
    }
    else
    {
        xReturn = pdFAIL;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d103      	bne.n	800c3f8 <xQueueGenericReset+0xe8>
 800c3f0:	f002 fd12 	bl	800ee18 <ulSetInterruptMask>
 800c3f4:	bf00      	nop
 800c3f6:	e7fd      	b.n	800c3f4 <xQueueGenericReset+0xe4>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
}
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	3710      	adds	r7, #16
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bd80      	pop	{r7, pc}

0800c402 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 800c402:	b580      	push	{r7, lr}
 800c404:	b088      	sub	sp, #32
 800c406:	af02      	add	r7, sp, #8
 800c408:	60f8      	str	r0, [r7, #12]
 800c40a:	60b9      	str	r1, [r7, #8]
 800c40c:	607a      	str	r2, [r7, #4]
 800c40e:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 800c410:	2300      	movs	r3, #0
 800c412:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d103      	bne.n	800c422 <xQueueGenericCreateStatic+0x20>
 800c41a:	f002 fcfd 	bl	800ee18 <ulSetInterruptMask>
 800c41e:	bf00      	nop
 800c420:	e7fd      	b.n	800c41e <xQueueGenericCreateStatic+0x1c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d029      	beq.n	800c47c <xQueueGenericCreateStatic+0x7a>
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d026      	beq.n	800c47c <xQueueGenericCreateStatic+0x7a>
            ( pxStaticQueue != NULL ) &&
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d002      	beq.n	800c43a <xQueueGenericCreateStatic+0x38>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d020      	beq.n	800c47c <xQueueGenericCreateStatic+0x7a>
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d102      	bne.n	800c446 <xQueueGenericCreateStatic+0x44>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 800c440:	68bb      	ldr	r3, [r7, #8]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d11a      	bne.n	800c47c <xQueueGenericCreateStatic+0x7a>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 800c446:	2350      	movs	r3, #80	@ 0x50
 800c448:	613b      	str	r3, [r7, #16]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 800c44a:	693b      	ldr	r3, [r7, #16]
 800c44c:	2b50      	cmp	r3, #80	@ 0x50
 800c44e:	d003      	beq.n	800c458 <xQueueGenericCreateStatic+0x56>
 800c450:	f002 fce2 	bl	800ee18 <ulSetInterruptMask>
 800c454:	bf00      	nop
 800c456:	e7fd      	b.n	800c454 <xQueueGenericCreateStatic+0x52>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 800c458:	693b      	ldr	r3, [r7, #16]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	2201      	movs	r2, #1
 800c462:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c466:	f897 2020 	ldrb.w	r2, [r7, #32]
 800c46a:	697b      	ldr	r3, [r7, #20]
 800c46c:	9300      	str	r3, [sp, #0]
 800c46e:	4613      	mov	r3, r2
 800c470:	687a      	ldr	r2, [r7, #4]
 800c472:	68b9      	ldr	r1, [r7, #8]
 800c474:	68f8      	ldr	r0, [r7, #12]
 800c476:	f000 f858 	bl	800c52a <prvInitialiseNewQueue>
 800c47a:	e006      	b.n	800c48a <xQueueGenericCreateStatic+0x88>
        }
        else
        {
            configASSERT( pxNewQueue );
 800c47c:	697b      	ldr	r3, [r7, #20]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d103      	bne.n	800c48a <xQueueGenericCreateStatic+0x88>
 800c482:	f002 fcc9 	bl	800ee18 <ulSetInterruptMask>
 800c486:	bf00      	nop
 800c488:	e7fd      	b.n	800c486 <xQueueGenericCreateStatic+0x84>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800c48a:	697b      	ldr	r3, [r7, #20]
    }
 800c48c:	4618      	mov	r0, r3
 800c48e:	3718      	adds	r7, #24
 800c490:	46bd      	mov	sp, r7
 800c492:	bd80      	pop	{r7, pc}

0800c494 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800c494:	b580      	push	{r7, lr}
 800c496:	b08a      	sub	sp, #40	@ 0x28
 800c498:	af02      	add	r7, sp, #8
 800c49a:	60f8      	str	r0, [r7, #12]
 800c49c:	60b9      	str	r1, [r7, #8]
 800c49e:	4613      	mov	r3, r2
 800c4a0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d032      	beq.n	800c512 <xQueueGenericCreate+0x7e>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800c4ac:	2100      	movs	r1, #0
 800c4ae:	68ba      	ldr	r2, [r7, #8]
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	fba3 2302 	umull	r2, r3, r3, r2
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d000      	beq.n	800c4bc <xQueueGenericCreate+0x28>
 800c4ba:	2101      	movs	r1, #1
 800c4bc:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d127      	bne.n	800c512 <xQueueGenericCreate+0x7e>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	68ba      	ldr	r2, [r7, #8]
 800c4c6:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800c4ca:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800c4ce:	d820      	bhi.n	800c512 <xQueueGenericCreate+0x7e>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	68ba      	ldr	r2, [r7, #8]
 800c4d4:	fb02 f303 	mul.w	r3, r2, r3
 800c4d8:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c4da:	69bb      	ldr	r3, [r7, #24]
 800c4dc:	3350      	adds	r3, #80	@ 0x50
 800c4de:	4618      	mov	r0, r3
 800c4e0:	f002 fd02 	bl	800eee8 <pvPortMalloc>
 800c4e4:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800c4e6:	69fb      	ldr	r3, [r7, #28]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d019      	beq.n	800c520 <xQueueGenericCreate+0x8c>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c4ec:	69fb      	ldr	r3, [r7, #28]
 800c4ee:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c4f0:	697b      	ldr	r3, [r7, #20]
 800c4f2:	3350      	adds	r3, #80	@ 0x50
 800c4f4:	617b      	str	r3, [r7, #20]
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c4f6:	69fb      	ldr	r3, [r7, #28]
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c4fe:	79fa      	ldrb	r2, [r7, #7]
 800c500:	69fb      	ldr	r3, [r7, #28]
 800c502:	9300      	str	r3, [sp, #0]
 800c504:	4613      	mov	r3, r2
 800c506:	697a      	ldr	r2, [r7, #20]
 800c508:	68b9      	ldr	r1, [r7, #8]
 800c50a:	68f8      	ldr	r0, [r7, #12]
 800c50c:	f000 f80d 	bl	800c52a <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800c510:	e006      	b.n	800c520 <xQueueGenericCreate+0x8c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800c512:	69fb      	ldr	r3, [r7, #28]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d103      	bne.n	800c520 <xQueueGenericCreate+0x8c>
 800c518:	f002 fc7e 	bl	800ee18 <ulSetInterruptMask>
 800c51c:	bf00      	nop
 800c51e:	e7fd      	b.n	800c51c <xQueueGenericCreate+0x88>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800c520:	69fb      	ldr	r3, [r7, #28]
    }
 800c522:	4618      	mov	r0, r3
 800c524:	3720      	adds	r7, #32
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}

0800c52a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800c52a:	b580      	push	{r7, lr}
 800c52c:	b084      	sub	sp, #16
 800c52e:	af00      	add	r7, sp, #0
 800c530:	60f8      	str	r0, [r7, #12]
 800c532:	60b9      	str	r1, [r7, #8]
 800c534:	607a      	str	r2, [r7, #4]
 800c536:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800c538:	68bb      	ldr	r3, [r7, #8]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d103      	bne.n	800c546 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c53e:	69bb      	ldr	r3, [r7, #24]
 800c540:	69ba      	ldr	r2, [r7, #24]
 800c542:	601a      	str	r2, [r3, #0]
 800c544:	e002      	b.n	800c54c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c546:	69bb      	ldr	r3, [r7, #24]
 800c548:	687a      	ldr	r2, [r7, #4]
 800c54a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800c54c:	69bb      	ldr	r3, [r7, #24]
 800c54e:	68fa      	ldr	r2, [r7, #12]
 800c550:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800c552:	69bb      	ldr	r3, [r7, #24]
 800c554:	68ba      	ldr	r2, [r7, #8]
 800c556:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c558:	2101      	movs	r1, #1
 800c55a:	69b8      	ldr	r0, [r7, #24]
 800c55c:	f7ff fed8 	bl	800c310 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800c560:	69bb      	ldr	r3, [r7, #24]
 800c562:	78fa      	ldrb	r2, [r7, #3]
 800c564:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800c568:	bf00      	nop
 800c56a:	3710      	adds	r7, #16
 800c56c:	46bd      	mov	sp, r7
 800c56e:	bd80      	pop	{r7, pc}

0800c570 <xQueueCreateCountingSemaphoreStatic>:
#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount,
                                                       const UBaseType_t uxInitialCount,
                                                       StaticQueue_t * pxStaticQueue )
    {
 800c570:	b580      	push	{r7, lr}
 800c572:	b088      	sub	sp, #32
 800c574:	af02      	add	r7, sp, #8
 800c576:	60f8      	str	r0, [r7, #12]
 800c578:	60b9      	str	r1, [r7, #8]
 800c57a:	607a      	str	r2, [r7, #4]
        QueueHandle_t xHandle = NULL;
 800c57c:	2300      	movs	r3, #0
 800c57e:	617b      	str	r3, [r7, #20]

        if( ( uxMaxCount != 0 ) &&
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d013      	beq.n	800c5ae <xQueueCreateCountingSemaphoreStatic+0x3e>
 800c586:	68ba      	ldr	r2, [r7, #8]
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	429a      	cmp	r2, r3
 800c58c:	d80f      	bhi.n	800c5ae <xQueueCreateCountingSemaphoreStatic+0x3e>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c58e:	2302      	movs	r3, #2
 800c590:	9300      	str	r3, [sp, #0]
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2200      	movs	r2, #0
 800c596:	2100      	movs	r1, #0
 800c598:	68f8      	ldr	r0, [r7, #12]
 800c59a:	f7ff ff32 	bl	800c402 <xQueueGenericCreateStatic>
 800c59e:	6178      	str	r0, [r7, #20]

            if( xHandle != NULL )
 800c5a0:	697b      	ldr	r3, [r7, #20]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d00a      	beq.n	800c5bc <xQueueCreateCountingSemaphoreStatic+0x4c>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c5a6:	697b      	ldr	r3, [r7, #20]
 800c5a8:	68ba      	ldr	r2, [r7, #8]
 800c5aa:	639a      	str	r2, [r3, #56]	@ 0x38
            if( xHandle != NULL )
 800c5ac:	e006      	b.n	800c5bc <xQueueCreateCountingSemaphoreStatic+0x4c>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 800c5ae:	697b      	ldr	r3, [r7, #20]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d103      	bne.n	800c5bc <xQueueCreateCountingSemaphoreStatic+0x4c>
 800c5b4:	f002 fc30 	bl	800ee18 <ulSetInterruptMask>
 800c5b8:	bf00      	nop
 800c5ba:	e7fd      	b.n	800c5b8 <xQueueCreateCountingSemaphoreStatic+0x48>
            mtCOVERAGE_TEST_MARKER();
        }

        return xHandle;
 800c5bc:	697b      	ldr	r3, [r7, #20]
    }
 800c5be:	4618      	mov	r0, r3
 800c5c0:	3718      	adds	r7, #24
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}

0800c5c6 <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 800c5c6:	b580      	push	{r7, lr}
 800c5c8:	b084      	sub	sp, #16
 800c5ca:	af00      	add	r7, sp, #0
 800c5cc:	6078      	str	r0, [r7, #4]
 800c5ce:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle = NULL;
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	60fb      	str	r3, [r7, #12]

        if( ( uxMaxCount != 0 ) &&
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d010      	beq.n	800c5fc <xQueueCreateCountingSemaphore+0x36>
 800c5da:	683a      	ldr	r2, [r7, #0]
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	429a      	cmp	r2, r3
 800c5e0:	d80c      	bhi.n	800c5fc <xQueueCreateCountingSemaphore+0x36>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c5e2:	2202      	movs	r2, #2
 800c5e4:	2100      	movs	r1, #0
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f7ff ff54 	bl	800c494 <xQueueGenericCreate>
 800c5ec:	60f8      	str	r0, [r7, #12]

            if( xHandle != NULL )
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d00a      	beq.n	800c60a <xQueueCreateCountingSemaphore+0x44>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	683a      	ldr	r2, [r7, #0]
 800c5f8:	639a      	str	r2, [r3, #56]	@ 0x38
            if( xHandle != NULL )
 800c5fa:	e006      	b.n	800c60a <xQueueCreateCountingSemaphore+0x44>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d103      	bne.n	800c60a <xQueueCreateCountingSemaphore+0x44>
 800c602:	f002 fc09 	bl	800ee18 <ulSetInterruptMask>
 800c606:	bf00      	nop
 800c608:	e7fd      	b.n	800c606 <xQueueCreateCountingSemaphore+0x40>
            mtCOVERAGE_TEST_MARKER();
        }

        return xHandle;
 800c60a:	68fb      	ldr	r3, [r7, #12]
    }
 800c60c:	4618      	mov	r0, r3
 800c60e:	3710      	adds	r7, #16
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}

0800c614 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b08a      	sub	sp, #40	@ 0x28
 800c618:	af00      	add	r7, sp, #0
 800c61a:	60f8      	str	r0, [r7, #12]
 800c61c:	60b9      	str	r1, [r7, #8]
 800c61e:	607a      	str	r2, [r7, #4]
 800c620:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c622:	2300      	movs	r3, #0
 800c624:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 800c62a:	6a3b      	ldr	r3, [r7, #32]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d103      	bne.n	800c638 <xQueueGenericSend+0x24>
 800c630:	f002 fbf2 	bl	800ee18 <ulSetInterruptMask>
 800c634:	bf00      	nop
 800c636:	e7fd      	b.n	800c634 <xQueueGenericSend+0x20>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c638:	68bb      	ldr	r3, [r7, #8]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d103      	bne.n	800c646 <xQueueGenericSend+0x32>
 800c63e:	6a3b      	ldr	r3, [r7, #32]
 800c640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c642:	2b00      	cmp	r3, #0
 800c644:	d101      	bne.n	800c64a <xQueueGenericSend+0x36>
 800c646:	2301      	movs	r3, #1
 800c648:	e000      	b.n	800c64c <xQueueGenericSend+0x38>
 800c64a:	2300      	movs	r3, #0
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d103      	bne.n	800c658 <xQueueGenericSend+0x44>
 800c650:	f002 fbe2 	bl	800ee18 <ulSetInterruptMask>
 800c654:	bf00      	nop
 800c656:	e7fd      	b.n	800c654 <xQueueGenericSend+0x40>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	2b02      	cmp	r3, #2
 800c65c:	d103      	bne.n	800c666 <xQueueGenericSend+0x52>
 800c65e:	6a3b      	ldr	r3, [r7, #32]
 800c660:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c662:	2b01      	cmp	r3, #1
 800c664:	d101      	bne.n	800c66a <xQueueGenericSend+0x56>
 800c666:	2301      	movs	r3, #1
 800c668:	e000      	b.n	800c66c <xQueueGenericSend+0x58>
 800c66a:	2300      	movs	r3, #0
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d103      	bne.n	800c678 <xQueueGenericSend+0x64>
 800c670:	f002 fbd2 	bl	800ee18 <ulSetInterruptMask>
 800c674:	bf00      	nop
 800c676:	e7fd      	b.n	800c674 <xQueueGenericSend+0x60>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c678:	f001 fc9c 	bl	800dfb4 <xTaskGetSchedulerState>
 800c67c:	4603      	mov	r3, r0
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d102      	bne.n	800c688 <xQueueGenericSend+0x74>
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d101      	bne.n	800c68c <xQueueGenericSend+0x78>
 800c688:	2301      	movs	r3, #1
 800c68a:	e000      	b.n	800c68e <xQueueGenericSend+0x7a>
 800c68c:	2300      	movs	r3, #0
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d103      	bne.n	800c69a <xQueueGenericSend+0x86>
 800c692:	f002 fbc1 	bl	800ee18 <ulSetInterruptMask>
 800c696:	bf00      	nop
 800c698:	e7fd      	b.n	800c696 <xQueueGenericSend+0x82>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800c69a:	f002 f9ef 	bl	800ea7c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c69e:	6a3b      	ldr	r3, [r7, #32]
 800c6a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c6a2:	6a3b      	ldr	r3, [r7, #32]
 800c6a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6a6:	429a      	cmp	r2, r3
 800c6a8:	d302      	bcc.n	800c6b0 <xQueueGenericSend+0x9c>
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	2b02      	cmp	r3, #2
 800c6ae:	d11d      	bne.n	800c6ec <xQueueGenericSend+0xd8>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c6b0:	683a      	ldr	r2, [r7, #0]
 800c6b2:	68b9      	ldr	r1, [r7, #8]
 800c6b4:	6a38      	ldr	r0, [r7, #32]
 800c6b6:	f000 fbb4 	bl	800ce22 <prvCopyDataToQueue>
 800c6ba:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c6bc:	6a3b      	ldr	r3, [r7, #32]
 800c6be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d00a      	beq.n	800c6da <xQueueGenericSend+0xc6>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c6c4:	6a3b      	ldr	r3, [r7, #32]
 800c6c6:	3324      	adds	r3, #36	@ 0x24
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	f001 fa69 	bl	800dba0 <xTaskRemoveFromEventList>
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d007      	beq.n	800c6e4 <xQueueGenericSend+0xd0>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 800c6d4:	f002 f9c0 	bl	800ea58 <vPortYield>
 800c6d8:	e004      	b.n	800c6e4 <xQueueGenericSend+0xd0>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 800c6da:	69fb      	ldr	r3, [r7, #28]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d001      	beq.n	800c6e4 <xQueueGenericSend+0xd0>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 800c6e0:	f002 f9ba 	bl	800ea58 <vPortYield>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800c6e4:	f002 f9dc 	bl	800eaa0 <vPortExitCritical>
                return pdPASS;
 800c6e8:	2301      	movs	r3, #1
 800c6ea:	e05c      	b.n	800c7a6 <xQueueGenericSend+0x192>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d103      	bne.n	800c6fa <xQueueGenericSend+0xe6>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800c6f2:	f002 f9d5 	bl	800eaa0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	e055      	b.n	800c7a6 <xQueueGenericSend+0x192>
                }
                else if( xEntryTimeSet == pdFALSE )
 800c6fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d106      	bne.n	800c70e <xQueueGenericSend+0xfa>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800c700:	f107 0314 	add.w	r3, r7, #20
 800c704:	4618      	mov	r0, r3
 800c706:	f001 fb19 	bl	800dd3c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800c70a:	2301      	movs	r3, #1
 800c70c:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800c70e:	f002 f9c7 	bl	800eaa0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800c712:	f000 ff6d 	bl	800d5f0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800c716:	f002 f9b1 	bl	800ea7c <vPortEnterCritical>
 800c71a:	6a3b      	ldr	r3, [r7, #32]
 800c71c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c720:	b25b      	sxtb	r3, r3
 800c722:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c726:	d103      	bne.n	800c730 <xQueueGenericSend+0x11c>
 800c728:	6a3b      	ldr	r3, [r7, #32]
 800c72a:	2200      	movs	r2, #0
 800c72c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c730:	6a3b      	ldr	r3, [r7, #32]
 800c732:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c736:	b25b      	sxtb	r3, r3
 800c738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c73c:	d103      	bne.n	800c746 <xQueueGenericSend+0x132>
 800c73e:	6a3b      	ldr	r3, [r7, #32]
 800c740:	2200      	movs	r2, #0
 800c742:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c746:	f002 f9ab 	bl	800eaa0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c74a:	1d3a      	adds	r2, r7, #4
 800c74c:	f107 0314 	add.w	r3, r7, #20
 800c750:	4611      	mov	r1, r2
 800c752:	4618      	mov	r0, r3
 800c754:	f001 fb08 	bl	800dd68 <xTaskCheckForTimeOut>
 800c758:	4603      	mov	r3, r0
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d11d      	bne.n	800c79a <xQueueGenericSend+0x186>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c75e:	6a38      	ldr	r0, [r7, #32]
 800c760:	f000 fc57 	bl	800d012 <prvIsQueueFull>
 800c764:	4603      	mov	r3, r0
 800c766:	2b00      	cmp	r3, #0
 800c768:	d011      	beq.n	800c78e <xQueueGenericSend+0x17a>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c76a:	6a3b      	ldr	r3, [r7, #32]
 800c76c:	3310      	adds	r3, #16
 800c76e:	687a      	ldr	r2, [r7, #4]
 800c770:	4611      	mov	r1, r2
 800c772:	4618      	mov	r0, r3
 800c774:	f001 f9b8 	bl	800dae8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800c778:	6a38      	ldr	r0, [r7, #32]
 800c77a:	f000 fbe2 	bl	800cf42 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800c77e:	f000 ff45 	bl	800d60c <xTaskResumeAll>
 800c782:	4603      	mov	r3, r0
 800c784:	2b00      	cmp	r3, #0
 800c786:	d188      	bne.n	800c69a <xQueueGenericSend+0x86>
                {
                    portYIELD_WITHIN_API();
 800c788:	f002 f966 	bl	800ea58 <vPortYield>
 800c78c:	e785      	b.n	800c69a <xQueueGenericSend+0x86>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800c78e:	6a38      	ldr	r0, [r7, #32]
 800c790:	f000 fbd7 	bl	800cf42 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800c794:	f000 ff3a 	bl	800d60c <xTaskResumeAll>
 800c798:	e77f      	b.n	800c69a <xQueueGenericSend+0x86>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800c79a:	6a38      	ldr	r0, [r7, #32]
 800c79c:	f000 fbd1 	bl	800cf42 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800c7a0:	f000 ff34 	bl	800d60c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800c7a4:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	3728      	adds	r7, #40	@ 0x28
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd80      	pop	{r7, pc}

0800c7ae <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800c7ae:	b580      	push	{r7, lr}
 800c7b0:	b08a      	sub	sp, #40	@ 0x28
 800c7b2:	af00      	add	r7, sp, #0
 800c7b4:	60f8      	str	r0, [r7, #12]
 800c7b6:	60b9      	str	r1, [r7, #8]
 800c7b8:	607a      	str	r2, [r7, #4]
 800c7ba:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 800c7c0:	6a3b      	ldr	r3, [r7, #32]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d103      	bne.n	800c7ce <xQueueGenericSendFromISR+0x20>
 800c7c6:	f002 fb27 	bl	800ee18 <ulSetInterruptMask>
 800c7ca:	bf00      	nop
 800c7cc:	e7fd      	b.n	800c7ca <xQueueGenericSendFromISR+0x1c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c7ce:	68bb      	ldr	r3, [r7, #8]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d103      	bne.n	800c7dc <xQueueGenericSendFromISR+0x2e>
 800c7d4:	6a3b      	ldr	r3, [r7, #32]
 800c7d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d101      	bne.n	800c7e0 <xQueueGenericSendFromISR+0x32>
 800c7dc:	2301      	movs	r3, #1
 800c7de:	e000      	b.n	800c7e2 <xQueueGenericSendFromISR+0x34>
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d103      	bne.n	800c7ee <xQueueGenericSendFromISR+0x40>
 800c7e6:	f002 fb17 	bl	800ee18 <ulSetInterruptMask>
 800c7ea:	bf00      	nop
 800c7ec:	e7fd      	b.n	800c7ea <xQueueGenericSendFromISR+0x3c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	2b02      	cmp	r3, #2
 800c7f2:	d103      	bne.n	800c7fc <xQueueGenericSendFromISR+0x4e>
 800c7f4:	6a3b      	ldr	r3, [r7, #32]
 800c7f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7f8:	2b01      	cmp	r3, #1
 800c7fa:	d101      	bne.n	800c800 <xQueueGenericSendFromISR+0x52>
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	e000      	b.n	800c802 <xQueueGenericSendFromISR+0x54>
 800c800:	2300      	movs	r3, #0
 800c802:	2b00      	cmp	r3, #0
 800c804:	d103      	bne.n	800c80e <xQueueGenericSendFromISR+0x60>
 800c806:	f002 fb07 	bl	800ee18 <ulSetInterruptMask>
 800c80a:	bf00      	nop
 800c80c:	e7fd      	b.n	800c80a <xQueueGenericSendFromISR+0x5c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c80e:	f002 fa99 	bl	800ed44 <vPortValidateInterruptPriority>
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c812:	f002 fb01 	bl	800ee18 <ulSetInterruptMask>
 800c816:	61f8      	str	r0, [r7, #28]
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c818:	6a3b      	ldr	r3, [r7, #32]
 800c81a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c81c:	6a3b      	ldr	r3, [r7, #32]
 800c81e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c820:	429a      	cmp	r2, r3
 800c822:	d302      	bcc.n	800c82a <xQueueGenericSendFromISR+0x7c>
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	2b02      	cmp	r3, #2
 800c828:	d13d      	bne.n	800c8a6 <xQueueGenericSendFromISR+0xf8>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800c82a:	6a3b      	ldr	r3, [r7, #32]
 800c82c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c830:	76fb      	strb	r3, [r7, #27]
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c832:	6a3b      	ldr	r3, [r7, #32]
 800c834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c836:	617b      	str	r3, [r7, #20]
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c838:	683a      	ldr	r2, [r7, #0]
 800c83a:	68b9      	ldr	r1, [r7, #8]
 800c83c:	6a38      	ldr	r0, [r7, #32]
 800c83e:	f000 faf0 	bl	800ce22 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800c842:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c84a:	d112      	bne.n	800c872 <xQueueGenericSendFromISR+0xc4>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c84c:	6a3b      	ldr	r3, [r7, #32]
 800c84e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c850:	2b00      	cmp	r3, #0
 800c852:	d025      	beq.n	800c8a0 <xQueueGenericSendFromISR+0xf2>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c854:	6a3b      	ldr	r3, [r7, #32]
 800c856:	3324      	adds	r3, #36	@ 0x24
 800c858:	4618      	mov	r0, r3
 800c85a:	f001 f9a1 	bl	800dba0 <xTaskRemoveFromEventList>
 800c85e:	4603      	mov	r3, r0
 800c860:	2b00      	cmp	r3, #0
 800c862:	d01d      	beq.n	800c8a0 <xQueueGenericSendFromISR+0xf2>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d01a      	beq.n	800c8a0 <xQueueGenericSendFromISR+0xf2>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	2201      	movs	r2, #1
 800c86e:	601a      	str	r2, [r3, #0]
 800c870:	e016      	b.n	800c8a0 <xQueueGenericSendFromISR+0xf2>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 800c872:	f000 ffc9 	bl	800d808 <uxTaskGetNumberOfTasks>
 800c876:	6138      	str	r0, [r7, #16]
 800c878:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c87c:	693a      	ldr	r2, [r7, #16]
 800c87e:	429a      	cmp	r2, r3
 800c880:	d90e      	bls.n	800c8a0 <xQueueGenericSendFromISR+0xf2>
 800c882:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c886:	2b7f      	cmp	r3, #127	@ 0x7f
 800c888:	d103      	bne.n	800c892 <xQueueGenericSendFromISR+0xe4>
 800c88a:	f002 fac5 	bl	800ee18 <ulSetInterruptMask>
 800c88e:	bf00      	nop
 800c890:	e7fd      	b.n	800c88e <xQueueGenericSendFromISR+0xe0>
 800c892:	7efb      	ldrb	r3, [r7, #27]
 800c894:	3301      	adds	r3, #1
 800c896:	b2db      	uxtb	r3, r3
 800c898:	b25a      	sxtb	r2, r3
 800c89a:	6a3b      	ldr	r3, [r7, #32]
 800c89c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	627b      	str	r3, [r7, #36]	@ 0x24
        {
 800c8a4:	e001      	b.n	800c8aa <xQueueGenericSendFromISR+0xfc>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800c8aa:	69f8      	ldr	r0, [r7, #28]
 800c8ac:	f002 fac1 	bl	800ee32 <vClearInterruptMask>

    return xReturn;
 800c8b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	3728      	adds	r7, #40	@ 0x28
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}

0800c8ba <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c8ba:	b580      	push	{r7, lr}
 800c8bc:	b088      	sub	sp, #32
 800c8be:	af00      	add	r7, sp, #0
 800c8c0:	6078      	str	r0, [r7, #4]
 800c8c2:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	61bb      	str	r3, [r7, #24]
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 800c8c8:	69bb      	ldr	r3, [r7, #24]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d103      	bne.n	800c8d6 <xQueueGiveFromISR+0x1c>
 800c8ce:	f002 faa3 	bl	800ee18 <ulSetInterruptMask>
 800c8d2:	bf00      	nop
 800c8d4:	e7fd      	b.n	800c8d2 <xQueueGiveFromISR+0x18>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800c8d6:	69bb      	ldr	r3, [r7, #24]
 800c8d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d003      	beq.n	800c8e6 <xQueueGiveFromISR+0x2c>
 800c8de:	f002 fa9b 	bl	800ee18 <ulSetInterruptMask>
 800c8e2:	bf00      	nop
 800c8e4:	e7fd      	b.n	800c8e2 <xQueueGiveFromISR+0x28>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c8e6:	69bb      	ldr	r3, [r7, #24]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d103      	bne.n	800c8f6 <xQueueGiveFromISR+0x3c>
 800c8ee:	69bb      	ldr	r3, [r7, #24]
 800c8f0:	689b      	ldr	r3, [r3, #8]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d101      	bne.n	800c8fa <xQueueGiveFromISR+0x40>
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	e000      	b.n	800c8fc <xQueueGiveFromISR+0x42>
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d103      	bne.n	800c908 <xQueueGiveFromISR+0x4e>
 800c900:	f002 fa8a 	bl	800ee18 <ulSetInterruptMask>
 800c904:	bf00      	nop
 800c906:	e7fd      	b.n	800c904 <xQueueGiveFromISR+0x4a>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c908:	f002 fa1c 	bl	800ed44 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c90c:	f002 fa84 	bl	800ee18 <ulSetInterruptMask>
 800c910:	6178      	str	r0, [r7, #20]
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c912:	69bb      	ldr	r3, [r7, #24]
 800c914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c916:	613b      	str	r3, [r7, #16]

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 800c918:	69bb      	ldr	r3, [r7, #24]
 800c91a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c91c:	693a      	ldr	r2, [r7, #16]
 800c91e:	429a      	cmp	r2, r3
 800c920:	d239      	bcs.n	800c996 <xQueueGiveFromISR+0xdc>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800c922:	69bb      	ldr	r3, [r7, #24]
 800c924:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c928:	73fb      	strb	r3, [r7, #15]
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c92a:	693b      	ldr	r3, [r7, #16]
 800c92c:	1c5a      	adds	r2, r3, #1
 800c92e:	69bb      	ldr	r3, [r7, #24]
 800c930:	639a      	str	r2, [r3, #56]	@ 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800c932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c93a:	d112      	bne.n	800c962 <xQueueGiveFromISR+0xa8>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c93c:	69bb      	ldr	r3, [r7, #24]
 800c93e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c940:	2b00      	cmp	r3, #0
 800c942:	d025      	beq.n	800c990 <xQueueGiveFromISR+0xd6>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c944:	69bb      	ldr	r3, [r7, #24]
 800c946:	3324      	adds	r3, #36	@ 0x24
 800c948:	4618      	mov	r0, r3
 800c94a:	f001 f929 	bl	800dba0 <xTaskRemoveFromEventList>
 800c94e:	4603      	mov	r3, r0
 800c950:	2b00      	cmp	r3, #0
 800c952:	d01d      	beq.n	800c990 <xQueueGiveFromISR+0xd6>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d01a      	beq.n	800c990 <xQueueGiveFromISR+0xd6>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	2201      	movs	r2, #1
 800c95e:	601a      	str	r2, [r3, #0]
 800c960:	e016      	b.n	800c990 <xQueueGiveFromISR+0xd6>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 800c962:	f000 ff51 	bl	800d808 <uxTaskGetNumberOfTasks>
 800c966:	60b8      	str	r0, [r7, #8]
 800c968:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c96c:	68ba      	ldr	r2, [r7, #8]
 800c96e:	429a      	cmp	r2, r3
 800c970:	d90e      	bls.n	800c990 <xQueueGiveFromISR+0xd6>
 800c972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c976:	2b7f      	cmp	r3, #127	@ 0x7f
 800c978:	d103      	bne.n	800c982 <xQueueGiveFromISR+0xc8>
 800c97a:	f002 fa4d 	bl	800ee18 <ulSetInterruptMask>
 800c97e:	bf00      	nop
 800c980:	e7fd      	b.n	800c97e <xQueueGiveFromISR+0xc4>
 800c982:	7bfb      	ldrb	r3, [r7, #15]
 800c984:	3301      	adds	r3, #1
 800c986:	b2db      	uxtb	r3, r3
 800c988:	b25a      	sxtb	r2, r3
 800c98a:	69bb      	ldr	r3, [r7, #24]
 800c98c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 800c990:	2301      	movs	r3, #1
 800c992:	61fb      	str	r3, [r7, #28]
 800c994:	e001      	b.n	800c99a <xQueueGiveFromISR+0xe0>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800c996:	2300      	movs	r3, #0
 800c998:	61fb      	str	r3, [r7, #28]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800c99a:	6978      	ldr	r0, [r7, #20]
 800c99c:	f002 fa49 	bl	800ee32 <vClearInterruptMask>

    return xReturn;
 800c9a0:	69fb      	ldr	r3, [r7, #28]
}
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	3720      	adds	r7, #32
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	bd80      	pop	{r7, pc}

0800c9aa <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800c9aa:	b580      	push	{r7, lr}
 800c9ac:	b08a      	sub	sp, #40	@ 0x28
 800c9ae:	af00      	add	r7, sp, #0
 800c9b0:	60f8      	str	r0, [r7, #12]
 800c9b2:	60b9      	str	r1, [r7, #8]
 800c9b4:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800c9be:	6a3b      	ldr	r3, [r7, #32]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d103      	bne.n	800c9cc <xQueueReceive+0x22>
 800c9c4:	f002 fa28 	bl	800ee18 <ulSetInterruptMask>
 800c9c8:	bf00      	nop
 800c9ca:	e7fd      	b.n	800c9c8 <xQueueReceive+0x1e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c9cc:	68bb      	ldr	r3, [r7, #8]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d103      	bne.n	800c9da <xQueueReceive+0x30>
 800c9d2:	6a3b      	ldr	r3, [r7, #32]
 800c9d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d101      	bne.n	800c9de <xQueueReceive+0x34>
 800c9da:	2301      	movs	r3, #1
 800c9dc:	e000      	b.n	800c9e0 <xQueueReceive+0x36>
 800c9de:	2300      	movs	r3, #0
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d103      	bne.n	800c9ec <xQueueReceive+0x42>
 800c9e4:	f002 fa18 	bl	800ee18 <ulSetInterruptMask>
 800c9e8:	bf00      	nop
 800c9ea:	e7fd      	b.n	800c9e8 <xQueueReceive+0x3e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c9ec:	f001 fae2 	bl	800dfb4 <xTaskGetSchedulerState>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d102      	bne.n	800c9fc <xQueueReceive+0x52>
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d101      	bne.n	800ca00 <xQueueReceive+0x56>
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	e000      	b.n	800ca02 <xQueueReceive+0x58>
 800ca00:	2300      	movs	r3, #0
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d103      	bne.n	800ca0e <xQueueReceive+0x64>
 800ca06:	f002 fa07 	bl	800ee18 <ulSetInterruptMask>
 800ca0a:	bf00      	nop
 800ca0c:	e7fd      	b.n	800ca0a <xQueueReceive+0x60>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800ca0e:	f002 f835 	bl	800ea7c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ca12:	6a3b      	ldr	r3, [r7, #32]
 800ca14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca16:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ca18:	69fb      	ldr	r3, [r7, #28]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d019      	beq.n	800ca52 <xQueueReceive+0xa8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ca1e:	68b9      	ldr	r1, [r7, #8]
 800ca20:	6a38      	ldr	r0, [r7, #32]
 800ca22:	f000 fa68 	bl	800cef6 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ca26:	69fb      	ldr	r3, [r7, #28]
 800ca28:	1e5a      	subs	r2, r3, #1
 800ca2a:	6a3b      	ldr	r3, [r7, #32]
 800ca2c:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca2e:	6a3b      	ldr	r3, [r7, #32]
 800ca30:	691b      	ldr	r3, [r3, #16]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d009      	beq.n	800ca4a <xQueueReceive+0xa0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca36:	6a3b      	ldr	r3, [r7, #32]
 800ca38:	3310      	adds	r3, #16
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	f001 f8b0 	bl	800dba0 <xTaskRemoveFromEventList>
 800ca40:	4603      	mov	r3, r0
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d001      	beq.n	800ca4a <xQueueReceive+0xa0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800ca46:	f002 f807 	bl	800ea58 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800ca4a:	f002 f829 	bl	800eaa0 <vPortExitCritical>
                return pdPASS;
 800ca4e:	2301      	movs	r3, #1
 800ca50:	e063      	b.n	800cb1a <xQueueReceive+0x170>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d103      	bne.n	800ca60 <xQueueReceive+0xb6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800ca58:	f002 f822 	bl	800eaa0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	e05c      	b.n	800cb1a <xQueueReceive+0x170>
                }
                else if( xEntryTimeSet == pdFALSE )
 800ca60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d106      	bne.n	800ca74 <xQueueReceive+0xca>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800ca66:	f107 0314 	add.w	r3, r7, #20
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f001 f966 	bl	800dd3c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800ca70:	2301      	movs	r3, #1
 800ca72:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800ca74:	f002 f814 	bl	800eaa0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800ca78:	f000 fdba 	bl	800d5f0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800ca7c:	f001 fffe 	bl	800ea7c <vPortEnterCritical>
 800ca80:	6a3b      	ldr	r3, [r7, #32]
 800ca82:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ca86:	b25b      	sxtb	r3, r3
 800ca88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca8c:	d103      	bne.n	800ca96 <xQueueReceive+0xec>
 800ca8e:	6a3b      	ldr	r3, [r7, #32]
 800ca90:	2200      	movs	r2, #0
 800ca92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ca96:	6a3b      	ldr	r3, [r7, #32]
 800ca98:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ca9c:	b25b      	sxtb	r3, r3
 800ca9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caa2:	d103      	bne.n	800caac <xQueueReceive+0x102>
 800caa4:	6a3b      	ldr	r3, [r7, #32]
 800caa6:	2200      	movs	r2, #0
 800caa8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800caac:	f001 fff8 	bl	800eaa0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cab0:	1d3a      	adds	r2, r7, #4
 800cab2:	f107 0314 	add.w	r3, r7, #20
 800cab6:	4611      	mov	r1, r2
 800cab8:	4618      	mov	r0, r3
 800caba:	f001 f955 	bl	800dd68 <xTaskCheckForTimeOut>
 800cabe:	4603      	mov	r3, r0
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d11d      	bne.n	800cb00 <xQueueReceive+0x156>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cac4:	6a38      	ldr	r0, [r7, #32]
 800cac6:	f000 fa8e 	bl	800cfe6 <prvIsQueueEmpty>
 800caca:	4603      	mov	r3, r0
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d011      	beq.n	800caf4 <xQueueReceive+0x14a>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cad0:	6a3b      	ldr	r3, [r7, #32]
 800cad2:	3324      	adds	r3, #36	@ 0x24
 800cad4:	687a      	ldr	r2, [r7, #4]
 800cad6:	4611      	mov	r1, r2
 800cad8:	4618      	mov	r0, r3
 800cada:	f001 f805 	bl	800dae8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800cade:	6a38      	ldr	r0, [r7, #32]
 800cae0:	f000 fa2f 	bl	800cf42 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800cae4:	f000 fd92 	bl	800d60c <xTaskResumeAll>
 800cae8:	4603      	mov	r3, r0
 800caea:	2b00      	cmp	r3, #0
 800caec:	d18f      	bne.n	800ca0e <xQueueReceive+0x64>
                {
                    portYIELD_WITHIN_API();
 800caee:	f001 ffb3 	bl	800ea58 <vPortYield>
 800caf2:	e78c      	b.n	800ca0e <xQueueReceive+0x64>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800caf4:	6a38      	ldr	r0, [r7, #32]
 800caf6:	f000 fa24 	bl	800cf42 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800cafa:	f000 fd87 	bl	800d60c <xTaskResumeAll>
 800cafe:	e786      	b.n	800ca0e <xQueueReceive+0x64>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800cb00:	6a38      	ldr	r0, [r7, #32]
 800cb02:	f000 fa1e 	bl	800cf42 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800cb06:	f000 fd81 	bl	800d60c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cb0a:	6a38      	ldr	r0, [r7, #32]
 800cb0c:	f000 fa6b 	bl	800cfe6 <prvIsQueueEmpty>
 800cb10:	4603      	mov	r3, r0
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	f43f af7b 	beq.w	800ca0e <xQueueReceive+0x64>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800cb18:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	3728      	adds	r7, #40	@ 0x28
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	bd80      	pop	{r7, pc}

0800cb22 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 800cb22:	b580      	push	{r7, lr}
 800cb24:	b08a      	sub	sp, #40	@ 0x28
 800cb26:	af00      	add	r7, sp, #0
 800cb28:	6078      	str	r0, [r7, #4]
 800cb2a:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	61fb      	str	r3, [r7, #28]

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800cb34:	2300      	movs	r3, #0
 800cb36:	623b      	str	r3, [r7, #32]
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800cb38:	69fb      	ldr	r3, [r7, #28]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d103      	bne.n	800cb46 <xQueueSemaphoreTake+0x24>
 800cb3e:	f002 f96b 	bl	800ee18 <ulSetInterruptMask>
 800cb42:	bf00      	nop
 800cb44:	e7fd      	b.n	800cb42 <xQueueSemaphoreTake+0x20>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800cb46:	69fb      	ldr	r3, [r7, #28]
 800cb48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d003      	beq.n	800cb56 <xQueueSemaphoreTake+0x34>
 800cb4e:	f002 f963 	bl	800ee18 <ulSetInterruptMask>
 800cb52:	bf00      	nop
 800cb54:	e7fd      	b.n	800cb52 <xQueueSemaphoreTake+0x30>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cb56:	f001 fa2d 	bl	800dfb4 <xTaskGetSchedulerState>
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d102      	bne.n	800cb66 <xQueueSemaphoreTake+0x44>
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d101      	bne.n	800cb6a <xQueueSemaphoreTake+0x48>
 800cb66:	2301      	movs	r3, #1
 800cb68:	e000      	b.n	800cb6c <xQueueSemaphoreTake+0x4a>
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d103      	bne.n	800cb78 <xQueueSemaphoreTake+0x56>
 800cb70:	f002 f952 	bl	800ee18 <ulSetInterruptMask>
 800cb74:	bf00      	nop
 800cb76:	e7fd      	b.n	800cb74 <xQueueSemaphoreTake+0x52>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800cb78:	f001 ff80 	bl	800ea7c <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cb7c:	69fb      	ldr	r3, [r7, #28]
 800cb7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb80:	61bb      	str	r3, [r7, #24]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cb82:	69bb      	ldr	r3, [r7, #24]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d01e      	beq.n	800cbc6 <xQueueSemaphoreTake+0xa4>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800cb88:	69bb      	ldr	r3, [r7, #24]
 800cb8a:	1e5a      	subs	r2, r3, #1
 800cb8c:	69fb      	ldr	r3, [r7, #28]
 800cb8e:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cb90:	69fb      	ldr	r3, [r7, #28]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d104      	bne.n	800cba2 <xQueueSemaphoreTake+0x80>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cb98:	f001 fbde 	bl	800e358 <pvTaskIncrementMutexHeldCount>
 800cb9c:	4602      	mov	r2, r0
 800cb9e:	69fb      	ldr	r3, [r7, #28]
 800cba0:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cba2:	69fb      	ldr	r3, [r7, #28]
 800cba4:	691b      	ldr	r3, [r3, #16]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d009      	beq.n	800cbbe <xQueueSemaphoreTake+0x9c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cbaa:	69fb      	ldr	r3, [r7, #28]
 800cbac:	3310      	adds	r3, #16
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f000 fff6 	bl	800dba0 <xTaskRemoveFromEventList>
 800cbb4:	4603      	mov	r3, r0
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d001      	beq.n	800cbbe <xQueueSemaphoreTake+0x9c>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800cbba:	f001 ff4d 	bl	800ea58 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800cbbe:	f001 ff6f 	bl	800eaa0 <vPortExitCritical>
                return pdPASS;
 800cbc2:	2301      	movs	r3, #1
 800cbc4:	e083      	b.n	800ccce <xQueueSemaphoreTake+0x1ac>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d103      	bne.n	800cbd4 <xQueueSemaphoreTake+0xb2>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 800cbcc:	f001 ff68 	bl	800eaa0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	e07c      	b.n	800ccce <xQueueSemaphoreTake+0x1ac>
                }
                else if( xEntryTimeSet == pdFALSE )
 800cbd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d106      	bne.n	800cbe8 <xQueueSemaphoreTake+0xc6>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800cbda:	f107 030c 	add.w	r3, r7, #12
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f001 f8ac 	bl	800dd3c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800cbe4:	2301      	movs	r3, #1
 800cbe6:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800cbe8:	f001 ff5a 	bl	800eaa0 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800cbec:	f000 fd00 	bl	800d5f0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800cbf0:	f001 ff44 	bl	800ea7c <vPortEnterCritical>
 800cbf4:	69fb      	ldr	r3, [r7, #28]
 800cbf6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cbfa:	b25b      	sxtb	r3, r3
 800cbfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc00:	d103      	bne.n	800cc0a <xQueueSemaphoreTake+0xe8>
 800cc02:	69fb      	ldr	r3, [r7, #28]
 800cc04:	2200      	movs	r2, #0
 800cc06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cc0a:	69fb      	ldr	r3, [r7, #28]
 800cc0c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cc10:	b25b      	sxtb	r3, r3
 800cc12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc16:	d103      	bne.n	800cc20 <xQueueSemaphoreTake+0xfe>
 800cc18:	69fb      	ldr	r3, [r7, #28]
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cc20:	f001 ff3e 	bl	800eaa0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cc24:	463a      	mov	r2, r7
 800cc26:	f107 030c 	add.w	r3, r7, #12
 800cc2a:	4611      	mov	r1, r2
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	f001 f89b 	bl	800dd68 <xTaskCheckForTimeOut>
 800cc32:	4603      	mov	r3, r0
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d12c      	bne.n	800cc92 <xQueueSemaphoreTake+0x170>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cc38:	69f8      	ldr	r0, [r7, #28]
 800cc3a:	f000 f9d4 	bl	800cfe6 <prvIsQueueEmpty>
 800cc3e:	4603      	mov	r3, r0
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d020      	beq.n	800cc86 <xQueueSemaphoreTake+0x164>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cc44:	69fb      	ldr	r3, [r7, #28]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d109      	bne.n	800cc60 <xQueueSemaphoreTake+0x13e>
                    {
                        taskENTER_CRITICAL();
 800cc4c:	f001 ff16 	bl	800ea7c <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cc50:	69fb      	ldr	r3, [r7, #28]
 800cc52:	689b      	ldr	r3, [r3, #8]
 800cc54:	4618      	mov	r0, r3
 800cc56:	f001 f9cb 	bl	800dff0 <xTaskPriorityInherit>
 800cc5a:	6238      	str	r0, [r7, #32]
                        }
                        taskEXIT_CRITICAL();
 800cc5c:	f001 ff20 	bl	800eaa0 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cc60:	69fb      	ldr	r3, [r7, #28]
 800cc62:	3324      	adds	r3, #36	@ 0x24
 800cc64:	683a      	ldr	r2, [r7, #0]
 800cc66:	4611      	mov	r1, r2
 800cc68:	4618      	mov	r0, r3
 800cc6a:	f000 ff3d 	bl	800dae8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800cc6e:	69f8      	ldr	r0, [r7, #28]
 800cc70:	f000 f967 	bl	800cf42 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800cc74:	f000 fcca 	bl	800d60c <xTaskResumeAll>
 800cc78:	4603      	mov	r3, r0
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	f47f af7c 	bne.w	800cb78 <xQueueSemaphoreTake+0x56>
                {
                    portYIELD_WITHIN_API();
 800cc80:	f001 feea 	bl	800ea58 <vPortYield>
 800cc84:	e778      	b.n	800cb78 <xQueueSemaphoreTake+0x56>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800cc86:	69f8      	ldr	r0, [r7, #28]
 800cc88:	f000 f95b 	bl	800cf42 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800cc8c:	f000 fcbe 	bl	800d60c <xTaskResumeAll>
 800cc90:	e772      	b.n	800cb78 <xQueueSemaphoreTake+0x56>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 800cc92:	69f8      	ldr	r0, [r7, #28]
 800cc94:	f000 f955 	bl	800cf42 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800cc98:	f000 fcb8 	bl	800d60c <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cc9c:	69f8      	ldr	r0, [r7, #28]
 800cc9e:	f000 f9a2 	bl	800cfe6 <prvIsQueueEmpty>
 800cca2:	4603      	mov	r3, r0
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	f43f af67 	beq.w	800cb78 <xQueueSemaphoreTake+0x56>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 800ccaa:	6a3b      	ldr	r3, [r7, #32]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d00d      	beq.n	800cccc <xQueueSemaphoreTake+0x1aa>
                    {
                        taskENTER_CRITICAL();
 800ccb0:	f001 fee4 	bl	800ea7c <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ccb4:	69f8      	ldr	r0, [r7, #28]
 800ccb6:	f000 f89c 	bl	800cdf2 <prvGetDisinheritPriorityAfterTimeout>
 800ccba:	6178      	str	r0, [r7, #20]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ccbc:	69fb      	ldr	r3, [r7, #28]
 800ccbe:	689b      	ldr	r3, [r3, #8]
 800ccc0:	6979      	ldr	r1, [r7, #20]
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	f001 faac 	bl	800e220 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 800ccc8:	f001 feea 	bl	800eaa0 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800cccc:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	3728      	adds	r7, #40	@ 0x28
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}

0800ccd6 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ccd6:	b580      	push	{r7, lr}
 800ccd8:	b08a      	sub	sp, #40	@ 0x28
 800ccda:	af00      	add	r7, sp, #0
 800ccdc:	60f8      	str	r0, [r7, #12]
 800ccde:	60b9      	str	r1, [r7, #8]
 800cce0:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 800cce6:	6a3b      	ldr	r3, [r7, #32]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d103      	bne.n	800ccf4 <xQueueReceiveFromISR+0x1e>
 800ccec:	f002 f894 	bl	800ee18 <ulSetInterruptMask>
 800ccf0:	bf00      	nop
 800ccf2:	e7fd      	b.n	800ccf0 <xQueueReceiveFromISR+0x1a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d103      	bne.n	800cd02 <xQueueReceiveFromISR+0x2c>
 800ccfa:	6a3b      	ldr	r3, [r7, #32]
 800ccfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d101      	bne.n	800cd06 <xQueueReceiveFromISR+0x30>
 800cd02:	2301      	movs	r3, #1
 800cd04:	e000      	b.n	800cd08 <xQueueReceiveFromISR+0x32>
 800cd06:	2300      	movs	r3, #0
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d103      	bne.n	800cd14 <xQueueReceiveFromISR+0x3e>
 800cd0c:	f002 f884 	bl	800ee18 <ulSetInterruptMask>
 800cd10:	bf00      	nop
 800cd12:	e7fd      	b.n	800cd10 <xQueueReceiveFromISR+0x3a>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cd14:	f002 f816 	bl	800ed44 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cd18:	f002 f87e 	bl	800ee18 <ulSetInterruptMask>
 800cd1c:	61f8      	str	r0, [r7, #28]
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cd1e:	6a3b      	ldr	r3, [r7, #32]
 800cd20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd22:	61bb      	str	r3, [r7, #24]

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cd24:	69bb      	ldr	r3, [r7, #24]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d03d      	beq.n	800cda6 <xQueueReceiveFromISR+0xd0>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 800cd2a:	6a3b      	ldr	r3, [r7, #32]
 800cd2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cd30:	75fb      	strb	r3, [r7, #23]

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cd32:	68b9      	ldr	r1, [r7, #8]
 800cd34:	6a38      	ldr	r0, [r7, #32]
 800cd36:	f000 f8de 	bl	800cef6 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cd3a:	69bb      	ldr	r3, [r7, #24]
 800cd3c:	1e5a      	subs	r2, r3, #1
 800cd3e:	6a3b      	ldr	r3, [r7, #32]
 800cd40:	639a      	str	r2, [r3, #56]	@ 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 800cd42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cd46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd4a:	d112      	bne.n	800cd72 <xQueueReceiveFromISR+0x9c>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd4c:	6a3b      	ldr	r3, [r7, #32]
 800cd4e:	691b      	ldr	r3, [r3, #16]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d025      	beq.n	800cda0 <xQueueReceiveFromISR+0xca>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd54:	6a3b      	ldr	r3, [r7, #32]
 800cd56:	3310      	adds	r3, #16
 800cd58:	4618      	mov	r0, r3
 800cd5a:	f000 ff21 	bl	800dba0 <xTaskRemoveFromEventList>
 800cd5e:	4603      	mov	r3, r0
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d01d      	beq.n	800cda0 <xQueueReceiveFromISR+0xca>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d01a      	beq.n	800cda0 <xQueueReceiveFromISR+0xca>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2201      	movs	r2, #1
 800cd6e:	601a      	str	r2, [r3, #0]
 800cd70:	e016      	b.n	800cda0 <xQueueReceiveFromISR+0xca>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
 800cd72:	f000 fd49 	bl	800d808 <uxTaskGetNumberOfTasks>
 800cd76:	6138      	str	r0, [r7, #16]
 800cd78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cd7c:	693a      	ldr	r2, [r7, #16]
 800cd7e:	429a      	cmp	r2, r3
 800cd80:	d90e      	bls.n	800cda0 <xQueueReceiveFromISR+0xca>
 800cd82:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cd86:	2b7f      	cmp	r3, #127	@ 0x7f
 800cd88:	d103      	bne.n	800cd92 <xQueueReceiveFromISR+0xbc>
 800cd8a:	f002 f845 	bl	800ee18 <ulSetInterruptMask>
 800cd8e:	bf00      	nop
 800cd90:	e7fd      	b.n	800cd8e <xQueueReceiveFromISR+0xb8>
 800cd92:	7dfb      	ldrb	r3, [r7, #23]
 800cd94:	3301      	adds	r3, #1
 800cd96:	b2db      	uxtb	r3, r3
 800cd98:	b25a      	sxtb	r2, r3
 800cd9a:	6a3b      	ldr	r3, [r7, #32]
 800cd9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            }

            xReturn = pdPASS;
 800cda0:	2301      	movs	r3, #1
 800cda2:	627b      	str	r3, [r7, #36]	@ 0x24
 800cda4:	e001      	b.n	800cdaa <xQueueReceiveFromISR+0xd4>
        }
        else
        {
            xReturn = pdFAIL;
 800cda6:	2300      	movs	r3, #0
 800cda8:	627b      	str	r3, [r7, #36]	@ 0x24
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800cdaa:	69f8      	ldr	r0, [r7, #28]
 800cdac:	f002 f841 	bl	800ee32 <vClearInterruptMask>

    return xReturn;
 800cdb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	3728      	adds	r7, #40	@ 0x28
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}

0800cdba <vQueueDelete>:
    return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800cdba:	b580      	push	{r7, lr}
 800cdbc:	b084      	sub	sp, #16
 800cdbe:	af00      	add	r7, sp, #0
 800cdc0:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d103      	bne.n	800cdd4 <vQueueDelete+0x1a>
 800cdcc:	f002 f824 	bl	800ee18 <ulSetInterruptMask>
 800cdd0:	bf00      	nop
 800cdd2:	e7fd      	b.n	800cdd0 <vQueueDelete+0x16>
    traceQUEUE_DELETE( pxQueue );

    #if ( configQUEUE_REGISTRY_SIZE > 0 )
    {
        vQueueUnregisterQueue( pxQueue );
 800cdd4:	68f8      	ldr	r0, [r7, #12]
 800cdd6:	f000 f97b 	bl	800d0d0 <vQueueUnregisterQueue>
    }
    #elif ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
    {
        /* The queue could have been allocated statically or dynamically, so
         * check before attempting to free the memory. */
        if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d102      	bne.n	800cdea <vQueueDelete+0x30>
        {
            vPortFree( pxQueue );
 800cde4:	68f8      	ldr	r0, [r7, #12]
 800cde6:	f002 f93b 	bl	800f060 <vPortFree>
        /* The queue must have been statically allocated, so is not going to be
         * deleted.  Avoid compiler warnings about the unused parameter. */
        ( void ) pxQueue;
    }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800cdea:	bf00      	nop
 800cdec:	3710      	adds	r7, #16
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd80      	pop	{r7, pc}

0800cdf2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 800cdf2:	b480      	push	{r7}
 800cdf4:	b085      	sub	sp, #20
 800cdf6:	af00      	add	r7, sp, #0
 800cdf8:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d006      	beq.n	800ce10 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800ce0c:	60fb      	str	r3, [r7, #12]
 800ce0e:	e001      	b.n	800ce14 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ce10:	2300      	movs	r3, #0
 800ce12:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800ce14:	68fb      	ldr	r3, [r7, #12]
    }
 800ce16:	4618      	mov	r0, r3
 800ce18:	3714      	adds	r7, #20
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce20:	4770      	bx	lr

0800ce22 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800ce22:	b580      	push	{r7, lr}
 800ce24:	b086      	sub	sp, #24
 800ce26:	af00      	add	r7, sp, #0
 800ce28:	60f8      	str	r0, [r7, #12]
 800ce2a:	60b9      	str	r1, [r7, #8]
 800ce2c:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce36:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d10d      	bne.n	800ce5c <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d14d      	bne.n	800cee4 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	689b      	ldr	r3, [r3, #8]
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	f001 f95f 	bl	800e110 <xTaskPriorityDisinherit>
 800ce52:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	2200      	movs	r2, #0
 800ce58:	609a      	str	r2, [r3, #8]
 800ce5a:	e043      	b.n	800cee4 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d119      	bne.n	800ce96 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	6858      	ldr	r0, [r3, #4]
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce6a:	461a      	mov	r2, r3
 800ce6c:	68b9      	ldr	r1, [r7, #8]
 800ce6e:	f020 f9dc 	bl	802d22a <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	685a      	ldr	r2, [r3, #4]
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce7a:	441a      	add	r2, r3
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	685a      	ldr	r2, [r3, #4]
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	689b      	ldr	r3, [r3, #8]
 800ce88:	429a      	cmp	r2, r3
 800ce8a:	d32b      	bcc.n	800cee4 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	681a      	ldr	r2, [r3, #0]
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	605a      	str	r2, [r3, #4]
 800ce94:	e026      	b.n	800cee4 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	68d8      	ldr	r0, [r3, #12]
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce9e:	461a      	mov	r2, r3
 800cea0:	68b9      	ldr	r1, [r7, #8]
 800cea2:	f020 f9c2 	bl	802d22a <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	68da      	ldr	r2, [r3, #12]
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ceae:	425b      	negs	r3, r3
 800ceb0:	441a      	add	r2, r3
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	68da      	ldr	r2, [r3, #12]
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	429a      	cmp	r2, r3
 800cec0:	d207      	bcs.n	800ced2 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	689a      	ldr	r2, [r3, #8]
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ceca:	425b      	negs	r3, r3
 800cecc:	441a      	add	r2, r3
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2b02      	cmp	r3, #2
 800ced6:	d105      	bne.n	800cee4 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ced8:	693b      	ldr	r3, [r7, #16]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d002      	beq.n	800cee4 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800cede:	693b      	ldr	r3, [r7, #16]
 800cee0:	3b01      	subs	r3, #1
 800cee2:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cee4:	693b      	ldr	r3, [r7, #16]
 800cee6:	1c5a      	adds	r2, r3, #1
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 800ceec:	697b      	ldr	r3, [r7, #20]
}
 800ceee:	4618      	mov	r0, r3
 800cef0:	3718      	adds	r7, #24
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}

0800cef6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800cef6:	b580      	push	{r7, lr}
 800cef8:	b082      	sub	sp, #8
 800cefa:	af00      	add	r7, sp, #0
 800cefc:	6078      	str	r0, [r7, #4]
 800cefe:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d018      	beq.n	800cf3a <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	68da      	ldr	r2, [r3, #12]
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf10:	441a      	add	r2, r3
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	68da      	ldr	r2, [r3, #12]
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	689b      	ldr	r3, [r3, #8]
 800cf1e:	429a      	cmp	r2, r3
 800cf20:	d303      	bcc.n	800cf2a <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681a      	ldr	r2, [r3, #0]
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	68d9      	ldr	r1, [r3, #12]
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf32:	461a      	mov	r2, r3
 800cf34:	6838      	ldr	r0, [r7, #0]
 800cf36:	f020 f978 	bl	802d22a <memcpy>
    }
}
 800cf3a:	bf00      	nop
 800cf3c:	3708      	adds	r7, #8
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	bd80      	pop	{r7, pc}

0800cf42 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cf42:	b580      	push	{r7, lr}
 800cf44:	b084      	sub	sp, #16
 800cf46:	af00      	add	r7, sp, #0
 800cf48:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800cf4a:	f001 fd97 	bl	800ea7c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cf54:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800cf56:	e011      	b.n	800cf7c <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d012      	beq.n	800cf86 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	3324      	adds	r3, #36	@ 0x24
 800cf64:	4618      	mov	r0, r3
 800cf66:	f000 fe1b 	bl	800dba0 <xTaskRemoveFromEventList>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d001      	beq.n	800cf74 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800cf70:	f000 ff52 	bl	800de18 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800cf74:	7bfb      	ldrb	r3, [r7, #15]
 800cf76:	3b01      	subs	r3, #1
 800cf78:	b2db      	uxtb	r3, r3
 800cf7a:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800cf7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	dce9      	bgt.n	800cf58 <prvUnlockQueue+0x16>
 800cf84:	e000      	b.n	800cf88 <prvUnlockQueue+0x46>
                    break;
 800cf86:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	22ff      	movs	r2, #255	@ 0xff
 800cf8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800cf90:	f001 fd86 	bl	800eaa0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800cf94:	f001 fd72 	bl	800ea7c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cf9e:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800cfa0:	e011      	b.n	800cfc6 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	691b      	ldr	r3, [r3, #16]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d012      	beq.n	800cfd0 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	3310      	adds	r3, #16
 800cfae:	4618      	mov	r0, r3
 800cfb0:	f000 fdf6 	bl	800dba0 <xTaskRemoveFromEventList>
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d001      	beq.n	800cfbe <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800cfba:	f000 ff2d 	bl	800de18 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800cfbe:	7bbb      	ldrb	r3, [r7, #14]
 800cfc0:	3b01      	subs	r3, #1
 800cfc2:	b2db      	uxtb	r3, r3
 800cfc4:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800cfc6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	dce9      	bgt.n	800cfa2 <prvUnlockQueue+0x60>
 800cfce:	e000      	b.n	800cfd2 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800cfd0:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	22ff      	movs	r2, #255	@ 0xff
 800cfd6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800cfda:	f001 fd61 	bl	800eaa0 <vPortExitCritical>
}
 800cfde:	bf00      	nop
 800cfe0:	3710      	adds	r7, #16
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}

0800cfe6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800cfe6:	b580      	push	{r7, lr}
 800cfe8:	b084      	sub	sp, #16
 800cfea:	af00      	add	r7, sp, #0
 800cfec:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800cfee:	f001 fd45 	bl	800ea7c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d102      	bne.n	800d000 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800cffa:	2301      	movs	r3, #1
 800cffc:	60fb      	str	r3, [r7, #12]
 800cffe:	e001      	b.n	800d004 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800d000:	2300      	movs	r3, #0
 800d002:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800d004:	f001 fd4c 	bl	800eaa0 <vPortExitCritical>

    return xReturn;
 800d008:	68fb      	ldr	r3, [r7, #12]
}
 800d00a:	4618      	mov	r0, r3
 800d00c:	3710      	adds	r7, #16
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}

0800d012 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800d012:	b580      	push	{r7, lr}
 800d014:	b084      	sub	sp, #16
 800d016:	af00      	add	r7, sp, #0
 800d018:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800d01a:	f001 fd2f 	bl	800ea7c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d026:	429a      	cmp	r2, r3
 800d028:	d102      	bne.n	800d030 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800d02a:	2301      	movs	r3, #1
 800d02c:	60fb      	str	r3, [r7, #12]
 800d02e:	e001      	b.n	800d034 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800d030:	2300      	movs	r3, #0
 800d032:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800d034:	f001 fd34 	bl	800eaa0 <vPortExitCritical>

    return xReturn;
 800d038:	68fb      	ldr	r3, [r7, #12]
}
 800d03a:	4618      	mov	r0, r3
 800d03c:	3710      	adds	r7, #16
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}
	...

0800d044 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800d044:	b580      	push	{r7, lr}
 800d046:	b084      	sub	sp, #16
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
 800d04c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800d04e:	2300      	movs	r3, #0
 800d050:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d103      	bne.n	800d060 <vQueueAddToRegistry+0x1c>
 800d058:	f001 fede 	bl	800ee18 <ulSetInterruptMask>
 800d05c:	bf00      	nop
 800d05e:	e7fd      	b.n	800d05c <vQueueAddToRegistry+0x18>

        if( pcQueueName != NULL )
 800d060:	683b      	ldr	r3, [r7, #0]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d024      	beq.n	800d0b0 <vQueueAddToRegistry+0x6c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d066:	2300      	movs	r3, #0
 800d068:	60fb      	str	r3, [r7, #12]
 800d06a:	e01e      	b.n	800d0aa <vQueueAddToRegistry+0x66>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800d06c:	4a17      	ldr	r2, [pc, #92]	@ (800d0cc <vQueueAddToRegistry+0x88>)
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	00db      	lsls	r3, r3, #3
 800d072:	4413      	add	r3, r2
 800d074:	685b      	ldr	r3, [r3, #4]
 800d076:	687a      	ldr	r2, [r7, #4]
 800d078:	429a      	cmp	r2, r3
 800d07a:	d105      	bne.n	800d088 <vQueueAddToRegistry+0x44>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	00db      	lsls	r3, r3, #3
 800d080:	4a12      	ldr	r2, [pc, #72]	@ (800d0cc <vQueueAddToRegistry+0x88>)
 800d082:	4413      	add	r3, r2
 800d084:	60bb      	str	r3, [r7, #8]
                    break;
 800d086:	e013      	b.n	800d0b0 <vQueueAddToRegistry+0x6c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800d088:	68bb      	ldr	r3, [r7, #8]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d10a      	bne.n	800d0a4 <vQueueAddToRegistry+0x60>
 800d08e:	4a0f      	ldr	r2, [pc, #60]	@ (800d0cc <vQueueAddToRegistry+0x88>)
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d104      	bne.n	800d0a4 <vQueueAddToRegistry+0x60>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	00db      	lsls	r3, r3, #3
 800d09e:	4a0b      	ldr	r2, [pc, #44]	@ (800d0cc <vQueueAddToRegistry+0x88>)
 800d0a0:	4413      	add	r3, r2
 800d0a2:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	3301      	adds	r3, #1
 800d0a8:	60fb      	str	r3, [r7, #12]
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	2b07      	cmp	r3, #7
 800d0ae:	d9dd      	bls.n	800d06c <vQueueAddToRegistry+0x28>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800d0b0:	68bb      	ldr	r3, [r7, #8]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d005      	beq.n	800d0c2 <vQueueAddToRegistry+0x7e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800d0b6:	68bb      	ldr	r3, [r7, #8]
 800d0b8:	683a      	ldr	r2, [r7, #0]
 800d0ba:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800d0bc:	68bb      	ldr	r3, [r7, #8]
 800d0be:	687a      	ldr	r2, [r7, #4]
 800d0c0:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800d0c2:	bf00      	nop
 800d0c4:	3710      	adds	r7, #16
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd80      	pop	{r7, pc}
 800d0ca:	bf00      	nop
 800d0cc:	20046748 	.word	0x20046748

0800d0d0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b084      	sub	sp, #16
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
        UBaseType_t ux;

        configASSERT( xQueue );
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d103      	bne.n	800d0e6 <vQueueUnregisterQueue+0x16>
 800d0de:	f001 fe9b 	bl	800ee18 <ulSetInterruptMask>
 800d0e2:	bf00      	nop
 800d0e4:	e7fd      	b.n	800d0e2 <vQueueUnregisterQueue+0x12>

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	60fb      	str	r3, [r7, #12]
 800d0ea:	e016      	b.n	800d11a <vQueueUnregisterQueue+0x4a>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d0ec:	4a0f      	ldr	r2, [pc, #60]	@ (800d12c <vQueueUnregisterQueue+0x5c>)
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	00db      	lsls	r3, r3, #3
 800d0f2:	4413      	add	r3, r2
 800d0f4:	685b      	ldr	r3, [r3, #4]
 800d0f6:	687a      	ldr	r2, [r7, #4]
 800d0f8:	429a      	cmp	r2, r3
 800d0fa:	d10b      	bne.n	800d114 <vQueueUnregisterQueue+0x44>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
 800d0fc:	4a0b      	ldr	r2, [pc, #44]	@ (800d12c <vQueueUnregisterQueue+0x5c>)
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	2100      	movs	r1, #0
 800d102:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d106:	4a09      	ldr	r2, [pc, #36]	@ (800d12c <vQueueUnregisterQueue+0x5c>)
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	00db      	lsls	r3, r3, #3
 800d10c:	4413      	add	r3, r2
 800d10e:	2200      	movs	r2, #0
 800d110:	605a      	str	r2, [r3, #4]
                break;
 800d112:	e006      	b.n	800d122 <vQueueUnregisterQueue+0x52>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	3301      	adds	r3, #1
 800d118:	60fb      	str	r3, [r7, #12]
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	2b07      	cmp	r3, #7
 800d11e:	d9e5      	bls.n	800d0ec <vQueueUnregisterQueue+0x1c>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d120:	bf00      	nop
 800d122:	bf00      	nop
 800d124:	3710      	adds	r7, #16
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}
 800d12a:	bf00      	nop
 800d12c:	20046748 	.word	0x20046748

0800d130 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800d130:	b580      	push	{r7, lr}
 800d132:	b086      	sub	sp, #24
 800d134:	af00      	add	r7, sp, #0
 800d136:	60f8      	str	r0, [r7, #12]
 800d138:	60b9      	str	r1, [r7, #8]
 800d13a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800d140:	f001 fc9c 	bl	800ea7c <vPortEnterCritical>
 800d144:	697b      	ldr	r3, [r7, #20]
 800d146:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d14a:	b25b      	sxtb	r3, r3
 800d14c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d150:	d103      	bne.n	800d15a <vQueueWaitForMessageRestricted+0x2a>
 800d152:	697b      	ldr	r3, [r7, #20]
 800d154:	2200      	movs	r2, #0
 800d156:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d160:	b25b      	sxtb	r3, r3
 800d162:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d166:	d103      	bne.n	800d170 <vQueueWaitForMessageRestricted+0x40>
 800d168:	697b      	ldr	r3, [r7, #20]
 800d16a:	2200      	movs	r2, #0
 800d16c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d170:	f001 fc96 	bl	800eaa0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d174:	697b      	ldr	r3, [r7, #20]
 800d176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d106      	bne.n	800d18a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d17c:	697b      	ldr	r3, [r7, #20]
 800d17e:	3324      	adds	r3, #36	@ 0x24
 800d180:	687a      	ldr	r2, [r7, #4]
 800d182:	68b9      	ldr	r1, [r7, #8]
 800d184:	4618      	mov	r0, r3
 800d186:	f000 fccd 	bl	800db24 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800d18a:	6978      	ldr	r0, [r7, #20]
 800d18c:	f7ff fed9 	bl	800cf42 <prvUnlockQueue>
    }
 800d190:	bf00      	nop
 800d192:	3718      	adds	r7, #24
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}

0800d198 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 800d198:	b580      	push	{r7, lr}
 800d19a:	b08c      	sub	sp, #48	@ 0x30
 800d19c:	af04      	add	r7, sp, #16
 800d19e:	60f8      	str	r0, [r7, #12]
 800d1a0:	60b9      	str	r1, [r7, #8]
 800d1a2:	607a      	str	r2, [r7, #4]
 800d1a4:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 800d1a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d103      	bne.n	800d1b4 <xTaskCreateStatic+0x1c>
 800d1ac:	f001 fe34 	bl	800ee18 <ulSetInterruptMask>
 800d1b0:	bf00      	nop
 800d1b2:	e7fd      	b.n	800d1b0 <xTaskCreateStatic+0x18>
        configASSERT( pxTaskBuffer != NULL );
 800d1b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d103      	bne.n	800d1c2 <xTaskCreateStatic+0x2a>
 800d1ba:	f001 fe2d 	bl	800ee18 <ulSetInterruptMask>
 800d1be:	bf00      	nop
 800d1c0:	e7fd      	b.n	800d1be <xTaskCreateStatic+0x26>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 800d1c2:	235c      	movs	r3, #92	@ 0x5c
 800d1c4:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 800d1c6:	697b      	ldr	r3, [r7, #20]
 800d1c8:	2b5c      	cmp	r3, #92	@ 0x5c
 800d1ca:	d003      	beq.n	800d1d4 <xTaskCreateStatic+0x3c>
 800d1cc:	f001 fe24 	bl	800ee18 <ulSetInterruptMask>
 800d1d0:	bf00      	nop
 800d1d2:	e7fd      	b.n	800d1d0 <xTaskCreateStatic+0x38>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d1d4:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d1d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d023      	beq.n	800d224 <xTaskCreateStatic+0x8c>
 800d1dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d020      	beq.n	800d224 <xTaskCreateStatic+0x8c>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d1e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1e4:	61fb      	str	r3, [r7, #28]
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800d1e6:	225c      	movs	r2, #92	@ 0x5c
 800d1e8:	2100      	movs	r1, #0
 800d1ea:	69f8      	ldr	r0, [r7, #28]
 800d1ec:	f01f ff4e 	bl	802d08c <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d1f0:	69fb      	ldr	r3, [r7, #28]
 800d1f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d1f4:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d1f6:	69fb      	ldr	r3, [r7, #28]
 800d1f8:	2202      	movs	r2, #2
 800d1fa:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d1fe:	2300      	movs	r3, #0
 800d200:	9303      	str	r3, [sp, #12]
 800d202:	69fb      	ldr	r3, [r7, #28]
 800d204:	9302      	str	r3, [sp, #8]
 800d206:	f107 0318 	add.w	r3, r7, #24
 800d20a:	9301      	str	r3, [sp, #4]
 800d20c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d20e:	9300      	str	r3, [sp, #0]
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	687a      	ldr	r2, [r7, #4]
 800d214:	68b9      	ldr	r1, [r7, #8]
 800d216:	68f8      	ldr	r0, [r7, #12]
 800d218:	f000 f855 	bl	800d2c6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800d21c:	69f8      	ldr	r0, [r7, #28]
 800d21e:	f000 f8d5 	bl	800d3cc <prvAddNewTaskToReadyList>
 800d222:	e001      	b.n	800d228 <xTaskCreateStatic+0x90>
        }
        else
        {
            xReturn = NULL;
 800d224:	2300      	movs	r3, #0
 800d226:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800d228:	69bb      	ldr	r3, [r7, #24]
    }
 800d22a:	4618      	mov	r0, r3
 800d22c:	3720      	adds	r7, #32
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}

0800d232 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800d232:	b580      	push	{r7, lr}
 800d234:	b08c      	sub	sp, #48	@ 0x30
 800d236:	af04      	add	r7, sp, #16
 800d238:	60f8      	str	r0, [r7, #12]
 800d23a:	60b9      	str	r1, [r7, #8]
 800d23c:	603b      	str	r3, [r7, #0]
 800d23e:	4613      	mov	r3, r2
 800d240:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d242:	88fb      	ldrh	r3, [r7, #6]
 800d244:	009b      	lsls	r3, r3, #2
 800d246:	4618      	mov	r0, r3
 800d248:	f001 fe4e 	bl	800eee8 <pvPortMalloc>
 800d24c:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800d24e:	697b      	ldr	r3, [r7, #20]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d013      	beq.n	800d27c <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d254:	205c      	movs	r0, #92	@ 0x5c
 800d256:	f001 fe47 	bl	800eee8 <pvPortMalloc>
 800d25a:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800d25c:	69fb      	ldr	r3, [r7, #28]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d008      	beq.n	800d274 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800d262:	225c      	movs	r2, #92	@ 0x5c
 800d264:	2100      	movs	r1, #0
 800d266:	69f8      	ldr	r0, [r7, #28]
 800d268:	f01f ff10 	bl	802d08c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800d26c:	69fb      	ldr	r3, [r7, #28]
 800d26e:	697a      	ldr	r2, [r7, #20]
 800d270:	631a      	str	r2, [r3, #48]	@ 0x30
 800d272:	e005      	b.n	800d280 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800d274:	6978      	ldr	r0, [r7, #20]
 800d276:	f001 fef3 	bl	800f060 <vPortFree>
 800d27a:	e001      	b.n	800d280 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800d27c:	2300      	movs	r3, #0
 800d27e:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800d280:	69fb      	ldr	r3, [r7, #28]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d017      	beq.n	800d2b6 <xTaskCreate+0x84>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d286:	69fb      	ldr	r3, [r7, #28]
 800d288:	2200      	movs	r2, #0
 800d28a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d28e:	88fa      	ldrh	r2, [r7, #6]
 800d290:	2300      	movs	r3, #0
 800d292:	9303      	str	r3, [sp, #12]
 800d294:	69fb      	ldr	r3, [r7, #28]
 800d296:	9302      	str	r3, [sp, #8]
 800d298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d29a:	9301      	str	r3, [sp, #4]
 800d29c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d29e:	9300      	str	r3, [sp, #0]
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	68b9      	ldr	r1, [r7, #8]
 800d2a4:	68f8      	ldr	r0, [r7, #12]
 800d2a6:	f000 f80e 	bl	800d2c6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800d2aa:	69f8      	ldr	r0, [r7, #28]
 800d2ac:	f000 f88e 	bl	800d3cc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	61bb      	str	r3, [r7, #24]
 800d2b4:	e002      	b.n	800d2bc <xTaskCreate+0x8a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d2b6:	f04f 33ff 	mov.w	r3, #4294967295
 800d2ba:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800d2bc:	69bb      	ldr	r3, [r7, #24]
    }
 800d2be:	4618      	mov	r0, r3
 800d2c0:	3720      	adds	r7, #32
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	bd80      	pop	{r7, pc}

0800d2c6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800d2c6:	b580      	push	{r7, lr}
 800d2c8:	b086      	sub	sp, #24
 800d2ca:	af00      	add	r7, sp, #0
 800d2cc:	60f8      	str	r0, [r7, #12]
 800d2ce:	60b9      	str	r1, [r7, #8]
 800d2d0:	607a      	str	r2, [r7, #4]
 800d2d2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d2d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2d6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	009b      	lsls	r3, r3, #2
 800d2dc:	461a      	mov	r2, r3
 800d2de:	21a5      	movs	r1, #165	@ 0xa5
 800d2e0:	f01f fed4 	bl	802d08c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d2e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d2ee:	3b01      	subs	r3, #1
 800d2f0:	009b      	lsls	r3, r3, #2
 800d2f2:	4413      	add	r3, r2
 800d2f4:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d2f6:	693b      	ldr	r3, [r7, #16]
 800d2f8:	f023 0307 	bic.w	r3, r3, #7
 800d2fc:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d2fe:	693b      	ldr	r3, [r7, #16]
 800d300:	f003 0307 	and.w	r3, r3, #7
 800d304:	2b00      	cmp	r3, #0
 800d306:	d003      	beq.n	800d310 <prvInitialiseNewTask+0x4a>
 800d308:	f001 fd86 	bl	800ee18 <ulSetInterruptMask>
 800d30c:	bf00      	nop
 800d30e:	e7fd      	b.n	800d30c <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800d310:	68bb      	ldr	r3, [r7, #8]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d01e      	beq.n	800d354 <prvInitialiseNewTask+0x8e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d316:	2300      	movs	r3, #0
 800d318:	617b      	str	r3, [r7, #20]
 800d31a:	e012      	b.n	800d342 <prvInitialiseNewTask+0x7c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d31c:	68ba      	ldr	r2, [r7, #8]
 800d31e:	697b      	ldr	r3, [r7, #20]
 800d320:	4413      	add	r3, r2
 800d322:	7819      	ldrb	r1, [r3, #0]
 800d324:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d326:	697b      	ldr	r3, [r7, #20]
 800d328:	4413      	add	r3, r2
 800d32a:	3334      	adds	r3, #52	@ 0x34
 800d32c:	460a      	mov	r2, r1
 800d32e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800d330:	68ba      	ldr	r2, [r7, #8]
 800d332:	697b      	ldr	r3, [r7, #20]
 800d334:	4413      	add	r3, r2
 800d336:	781b      	ldrb	r3, [r3, #0]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d006      	beq.n	800d34a <prvInitialiseNewTask+0x84>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d33c:	697b      	ldr	r3, [r7, #20]
 800d33e:	3301      	adds	r3, #1
 800d340:	617b      	str	r3, [r7, #20]
 800d342:	697b      	ldr	r3, [r7, #20]
 800d344:	2b0f      	cmp	r3, #15
 800d346:	d9e9      	bls.n	800d31c <prvInitialiseNewTask+0x56>
 800d348:	e000      	b.n	800d34c <prvInitialiseNewTask+0x86>
            {
                break;
 800d34a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d34c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d34e:	2200      	movs	r2, #0
 800d350:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800d354:	6a3b      	ldr	r3, [r7, #32]
 800d356:	2b37      	cmp	r3, #55	@ 0x37
 800d358:	d903      	bls.n	800d362 <prvInitialiseNewTask+0x9c>
 800d35a:	f001 fd5d 	bl	800ee18 <ulSetInterruptMask>
 800d35e:	bf00      	nop
 800d360:	e7fd      	b.n	800d35e <prvInitialiseNewTask+0x98>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d362:	6a3b      	ldr	r3, [r7, #32]
 800d364:	2b37      	cmp	r3, #55	@ 0x37
 800d366:	d901      	bls.n	800d36c <prvInitialiseNewTask+0xa6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d368:	2337      	movs	r3, #55	@ 0x37
 800d36a:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800d36c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d36e:	6a3a      	ldr	r2, [r7, #32]
 800d370:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800d372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d374:	6a3a      	ldr	r2, [r7, #32]
 800d376:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d37a:	3304      	adds	r3, #4
 800d37c:	4618      	mov	r0, r3
 800d37e:	f7fe ff57 	bl	800c230 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d384:	3318      	adds	r3, #24
 800d386:	4618      	mov	r0, r3
 800d388:	f7fe ff52 	bl	800c230 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d38c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d38e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d390:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d392:	6a3b      	ldr	r3, [r7, #32]
 800d394:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d39a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d39c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d39e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d3a0:	625a      	str	r2, [r3, #36]	@ 0x24
         * function as well. */
        #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
        {
            #if ( portSTACK_GROWTH < 0 )
            {
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 800d3a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3a4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	68fa      	ldr	r2, [r7, #12]
 800d3aa:	6938      	ldr	r0, [r7, #16]
 800d3ac:	f001 fbc6 	bl	800eb3c <pxPortInitialiseStack>
 800d3b0:	4602      	mov	r2, r0
 800d3b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3b4:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800d3b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d002      	beq.n	800d3c2 <prvInitialiseNewTask+0xfc>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d3bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d3c0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800d3c2:	bf00      	nop
 800d3c4:	3718      	adds	r7, #24
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	bd80      	pop	{r7, pc}
	...

0800d3cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b084      	sub	sp, #16
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800d3d4:	f001 fb52 	bl	800ea7c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800d3d8:	4b3e      	ldr	r3, [pc, #248]	@ (800d4d4 <prvAddNewTaskToReadyList+0x108>)
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	3301      	adds	r3, #1
 800d3de:	4a3d      	ldr	r2, [pc, #244]	@ (800d4d4 <prvAddNewTaskToReadyList+0x108>)
 800d3e0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800d3e2:	4b3d      	ldr	r3, [pc, #244]	@ (800d4d8 <prvAddNewTaskToReadyList+0x10c>)
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d109      	bne.n	800d3fe <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800d3ea:	4a3b      	ldr	r2, [pc, #236]	@ (800d4d8 <prvAddNewTaskToReadyList+0x10c>)
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d3f0:	4b38      	ldr	r3, [pc, #224]	@ (800d4d4 <prvAddNewTaskToReadyList+0x108>)
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	2b01      	cmp	r3, #1
 800d3f6:	d110      	bne.n	800d41a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800d3f8:	f000 fd2a 	bl	800de50 <prvInitialiseTaskLists>
 800d3fc:	e00d      	b.n	800d41a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800d3fe:	4b37      	ldr	r3, [pc, #220]	@ (800d4dc <prvAddNewTaskToReadyList+0x110>)
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d109      	bne.n	800d41a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d406:	4b34      	ldr	r3, [pc, #208]	@ (800d4d8 <prvAddNewTaskToReadyList+0x10c>)
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d410:	429a      	cmp	r2, r3
 800d412:	d802      	bhi.n	800d41a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800d414:	4a30      	ldr	r2, [pc, #192]	@ (800d4d8 <prvAddNewTaskToReadyList+0x10c>)
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800d41a:	4b31      	ldr	r3, [pc, #196]	@ (800d4e0 <prvAddNewTaskToReadyList+0x114>)
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	3301      	adds	r3, #1
 800d420:	4a2f      	ldr	r2, [pc, #188]	@ (800d4e0 <prvAddNewTaskToReadyList+0x114>)
 800d422:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d424:	4b2e      	ldr	r3, [pc, #184]	@ (800d4e0 <prvAddNewTaskToReadyList+0x114>)
 800d426:	681a      	ldr	r2, [r3, #0]
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d430:	4b2c      	ldr	r3, [pc, #176]	@ (800d4e4 <prvAddNewTaskToReadyList+0x118>)
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	429a      	cmp	r2, r3
 800d436:	d903      	bls.n	800d440 <prvAddNewTaskToReadyList+0x74>
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d43c:	4a29      	ldr	r2, [pc, #164]	@ (800d4e4 <prvAddNewTaskToReadyList+0x118>)
 800d43e:	6013      	str	r3, [r2, #0]
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d444:	4928      	ldr	r1, [pc, #160]	@ (800d4e8 <prvAddNewTaskToReadyList+0x11c>)
 800d446:	4613      	mov	r3, r2
 800d448:	009b      	lsls	r3, r3, #2
 800d44a:	4413      	add	r3, r2
 800d44c:	009b      	lsls	r3, r3, #2
 800d44e:	440b      	add	r3, r1
 800d450:	3304      	adds	r3, #4
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	60fb      	str	r3, [r7, #12]
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	68fa      	ldr	r2, [r7, #12]
 800d45a:	609a      	str	r2, [r3, #8]
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	689a      	ldr	r2, [r3, #8]
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	60da      	str	r2, [r3, #12]
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	689b      	ldr	r3, [r3, #8]
 800d468:	687a      	ldr	r2, [r7, #4]
 800d46a:	3204      	adds	r2, #4
 800d46c:	605a      	str	r2, [r3, #4]
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	1d1a      	adds	r2, r3, #4
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	609a      	str	r2, [r3, #8]
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d47a:	4613      	mov	r3, r2
 800d47c:	009b      	lsls	r3, r3, #2
 800d47e:	4413      	add	r3, r2
 800d480:	009b      	lsls	r3, r3, #2
 800d482:	4a19      	ldr	r2, [pc, #100]	@ (800d4e8 <prvAddNewTaskToReadyList+0x11c>)
 800d484:	441a      	add	r2, r3
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	615a      	str	r2, [r3, #20]
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d48e:	4916      	ldr	r1, [pc, #88]	@ (800d4e8 <prvAddNewTaskToReadyList+0x11c>)
 800d490:	4613      	mov	r3, r2
 800d492:	009b      	lsls	r3, r3, #2
 800d494:	4413      	add	r3, r2
 800d496:	009b      	lsls	r3, r3, #2
 800d498:	440b      	add	r3, r1
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	1c59      	adds	r1, r3, #1
 800d49e:	4812      	ldr	r0, [pc, #72]	@ (800d4e8 <prvAddNewTaskToReadyList+0x11c>)
 800d4a0:	4613      	mov	r3, r2
 800d4a2:	009b      	lsls	r3, r3, #2
 800d4a4:	4413      	add	r3, r2
 800d4a6:	009b      	lsls	r3, r3, #2
 800d4a8:	4403      	add	r3, r0
 800d4aa:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800d4ac:	f001 faf8 	bl	800eaa0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800d4b0:	4b0a      	ldr	r3, [pc, #40]	@ (800d4dc <prvAddNewTaskToReadyList+0x110>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d008      	beq.n	800d4ca <prvAddNewTaskToReadyList+0xfe>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d4b8:	4b07      	ldr	r3, [pc, #28]	@ (800d4d8 <prvAddNewTaskToReadyList+0x10c>)
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4c2:	429a      	cmp	r2, r3
 800d4c4:	d201      	bcs.n	800d4ca <prvAddNewTaskToReadyList+0xfe>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800d4c6:	f001 fac7 	bl	800ea58 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800d4ca:	bf00      	nop
 800d4cc:	3710      	adds	r7, #16
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bd80      	pop	{r7, pc}
 800d4d2:	bf00      	nop
 800d4d4:	20046c5c 	.word	0x20046c5c
 800d4d8:	20046788 	.word	0x20046788
 800d4dc:	20046c68 	.word	0x20046c68
 800d4e0:	20046c78 	.word	0x20046c78
 800d4e4:	20046c64 	.word	0x20046c64
 800d4e8:	2004678c 	.word	0x2004678c

0800d4ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b084      	sub	sp, #16
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d010      	beq.n	800d520 <vTaskDelay+0x34>
        {
            configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );
 800d4fe:	4b0d      	ldr	r3, [pc, #52]	@ (800d534 <vTaskDelay+0x48>)
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d003      	beq.n	800d50e <vTaskDelay+0x22>
 800d506:	f001 fc87 	bl	800ee18 <ulSetInterruptMask>
 800d50a:	bf00      	nop
 800d50c:	e7fd      	b.n	800d50a <vTaskDelay+0x1e>
            vTaskSuspendAll();
 800d50e:	f000 f86f 	bl	800d5f0 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d512:	2100      	movs	r1, #0
 800d514:	6878      	ldr	r0, [r7, #4]
 800d516:	f000 ff33 	bl	800e380 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800d51a:	f000 f877 	bl	800d60c <xTaskResumeAll>
 800d51e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d101      	bne.n	800d52a <vTaskDelay+0x3e>
        {
            portYIELD_WITHIN_API();
 800d526:	f001 fa97 	bl	800ea58 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800d52a:	bf00      	nop
 800d52c:	3710      	adds	r7, #16
 800d52e:	46bd      	mov	sp, r7
 800d530:	bd80      	pop	{r7, pc}
 800d532:	bf00      	nop
 800d534:	20046c84 	.word	0x20046c84

0800d538 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b088      	sub	sp, #32
 800d53c:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 800d53e:	2300      	movs	r3, #0
 800d540:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 800d542:	2300      	movs	r3, #0
 800d544:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d546:	463a      	mov	r2, r7
 800d548:	1d39      	adds	r1, r7, #4
 800d54a:	f107 0308 	add.w	r3, r7, #8
 800d54e:	4618      	mov	r0, r3
 800d550:	f7fe fe1a 	bl	800c188 <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 800d554:	6839      	ldr	r1, [r7, #0]
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	68ba      	ldr	r2, [r7, #8]
 800d55a:	9202      	str	r2, [sp, #8]
 800d55c:	9301      	str	r3, [sp, #4]
 800d55e:	2300      	movs	r3, #0
 800d560:	9300      	str	r3, [sp, #0]
 800d562:	2300      	movs	r3, #0
 800d564:	460a      	mov	r2, r1
 800d566:	491b      	ldr	r1, [pc, #108]	@ (800d5d4 <vTaskStartScheduler+0x9c>)
 800d568:	481b      	ldr	r0, [pc, #108]	@ (800d5d8 <vTaskStartScheduler+0xa0>)
 800d56a:	f7ff fe15 	bl	800d198 <xTaskCreateStatic>
 800d56e:	4603      	mov	r3, r0
 800d570:	4a1a      	ldr	r2, [pc, #104]	@ (800d5dc <vTaskStartScheduler+0xa4>)
 800d572:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 800d574:	4b19      	ldr	r3, [pc, #100]	@ (800d5dc <vTaskStartScheduler+0xa4>)
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d002      	beq.n	800d582 <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 800d57c:	2301      	movs	r3, #1
 800d57e:	60fb      	str	r3, [r7, #12]
 800d580:	e001      	b.n	800d586 <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 800d582:	2300      	movs	r3, #0
 800d584:	60fb      	str	r3, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	2b01      	cmp	r3, #1
 800d58a:	d102      	bne.n	800d592 <vTaskStartScheduler+0x5a>
        {
            xReturn = xTimerCreateTimerTask();
 800d58c:	f000 ff66 	bl	800e45c <xTimerCreateTimerTask>
 800d590:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	2b01      	cmp	r3, #1
 800d596:	d10e      	bne.n	800d5b6 <vTaskStartScheduler+0x7e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 800d598:	f001 fc3e 	bl	800ee18 <ulSetInterruptMask>
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800d59c:	4b10      	ldr	r3, [pc, #64]	@ (800d5e0 <vTaskStartScheduler+0xa8>)
 800d59e:	f04f 32ff 	mov.w	r2, #4294967295
 800d5a2:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800d5a4:	4b0f      	ldr	r3, [pc, #60]	@ (800d5e4 <vTaskStartScheduler+0xac>)
 800d5a6:	2201      	movs	r2, #1
 800d5a8:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d5aa:	4b0f      	ldr	r3, [pc, #60]	@ (800d5e8 <vTaskStartScheduler+0xb0>)
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800d5b0:	f001 fb4e 	bl	800ec50 <xPortStartScheduler>
 800d5b4:	e007      	b.n	800d5c6 <vTaskStartScheduler+0x8e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5bc:	d103      	bne.n	800d5c6 <vTaskStartScheduler+0x8e>
 800d5be:	f001 fc2b 	bl	800ee18 <ulSetInterruptMask>
 800d5c2:	bf00      	nop
 800d5c4:	e7fd      	b.n	800d5c2 <vTaskStartScheduler+0x8a>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800d5c6:	4b09      	ldr	r3, [pc, #36]	@ (800d5ec <vTaskStartScheduler+0xb4>)
 800d5c8:	681b      	ldr	r3, [r3, #0]
}
 800d5ca:	bf00      	nop
 800d5cc:	3710      	adds	r7, #16
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}
 800d5d2:	bf00      	nop
 800d5d4:	0802dd08 	.word	0x0802dd08
 800d5d8:	0800de31 	.word	0x0800de31
 800d5dc:	20046c80 	.word	0x20046c80
 800d5e0:	20046c7c 	.word	0x20046c7c
 800d5e4:	20046c68 	.word	0x20046c68
 800d5e8:	20046c60 	.word	0x20046c60
 800d5ec:	0802ea7c 	.word	0x0802ea7c

0800d5f0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d5f0:	b480      	push	{r7}
 800d5f2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800d5f4:	4b04      	ldr	r3, [pc, #16]	@ (800d608 <vTaskSuspendAll+0x18>)
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	3301      	adds	r3, #1
 800d5fa:	4a03      	ldr	r2, [pc, #12]	@ (800d608 <vTaskSuspendAll+0x18>)
 800d5fc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800d5fe:	bf00      	nop
 800d600:	46bd      	mov	sp, r7
 800d602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d606:	4770      	bx	lr
 800d608:	20046c84 	.word	0x20046c84

0800d60c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b086      	sub	sp, #24
 800d610:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800d612:	2300      	movs	r3, #0
 800d614:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 800d616:	2300      	movs	r3, #0
 800d618:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 800d61a:	4b6b      	ldr	r3, [pc, #428]	@ (800d7c8 <xTaskResumeAll+0x1bc>)
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d103      	bne.n	800d62a <xTaskResumeAll+0x1e>
 800d622:	f001 fbf9 	bl	800ee18 <ulSetInterruptMask>
 800d626:	bf00      	nop
 800d628:	e7fd      	b.n	800d626 <xTaskResumeAll+0x1a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800d62a:	f001 fa27 	bl	800ea7c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800d62e:	4b66      	ldr	r3, [pc, #408]	@ (800d7c8 <xTaskResumeAll+0x1bc>)
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	3b01      	subs	r3, #1
 800d634:	4a64      	ldr	r2, [pc, #400]	@ (800d7c8 <xTaskResumeAll+0x1bc>)
 800d636:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800d638:	4b63      	ldr	r3, [pc, #396]	@ (800d7c8 <xTaskResumeAll+0x1bc>)
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	f040 80bb 	bne.w	800d7b8 <xTaskResumeAll+0x1ac>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d642:	4b62      	ldr	r3, [pc, #392]	@ (800d7cc <xTaskResumeAll+0x1c0>)
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	2b00      	cmp	r3, #0
 800d648:	f000 80b6 	beq.w	800d7b8 <xTaskResumeAll+0x1ac>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d64c:	e08b      	b.n	800d766 <xTaskResumeAll+0x15a>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d64e:	4b60      	ldr	r3, [pc, #384]	@ (800d7d0 <xTaskResumeAll+0x1c4>)
 800d650:	68db      	ldr	r3, [r3, #12]
 800d652:	68db      	ldr	r3, [r3, #12]
 800d654:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800d656:	697b      	ldr	r3, [r7, #20]
 800d658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d65a:	60bb      	str	r3, [r7, #8]
 800d65c:	697b      	ldr	r3, [r7, #20]
 800d65e:	69db      	ldr	r3, [r3, #28]
 800d660:	697a      	ldr	r2, [r7, #20]
 800d662:	6a12      	ldr	r2, [r2, #32]
 800d664:	609a      	str	r2, [r3, #8]
 800d666:	697b      	ldr	r3, [r7, #20]
 800d668:	6a1b      	ldr	r3, [r3, #32]
 800d66a:	697a      	ldr	r2, [r7, #20]
 800d66c:	69d2      	ldr	r2, [r2, #28]
 800d66e:	605a      	str	r2, [r3, #4]
 800d670:	68bb      	ldr	r3, [r7, #8]
 800d672:	685a      	ldr	r2, [r3, #4]
 800d674:	697b      	ldr	r3, [r7, #20]
 800d676:	3318      	adds	r3, #24
 800d678:	429a      	cmp	r2, r3
 800d67a:	d103      	bne.n	800d684 <xTaskResumeAll+0x78>
 800d67c:	697b      	ldr	r3, [r7, #20]
 800d67e:	6a1a      	ldr	r2, [r3, #32]
 800d680:	68bb      	ldr	r3, [r7, #8]
 800d682:	605a      	str	r2, [r3, #4]
 800d684:	697b      	ldr	r3, [r7, #20]
 800d686:	2200      	movs	r2, #0
 800d688:	629a      	str	r2, [r3, #40]	@ 0x28
 800d68a:	68bb      	ldr	r3, [r7, #8]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	1e5a      	subs	r2, r3, #1
 800d690:	68bb      	ldr	r3, [r7, #8]
 800d692:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800d694:	697b      	ldr	r3, [r7, #20]
 800d696:	695b      	ldr	r3, [r3, #20]
 800d698:	607b      	str	r3, [r7, #4]
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	689b      	ldr	r3, [r3, #8]
 800d69e:	697a      	ldr	r2, [r7, #20]
 800d6a0:	68d2      	ldr	r2, [r2, #12]
 800d6a2:	609a      	str	r2, [r3, #8]
 800d6a4:	697b      	ldr	r3, [r7, #20]
 800d6a6:	68db      	ldr	r3, [r3, #12]
 800d6a8:	697a      	ldr	r2, [r7, #20]
 800d6aa:	6892      	ldr	r2, [r2, #8]
 800d6ac:	605a      	str	r2, [r3, #4]
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	685a      	ldr	r2, [r3, #4]
 800d6b2:	697b      	ldr	r3, [r7, #20]
 800d6b4:	3304      	adds	r3, #4
 800d6b6:	429a      	cmp	r2, r3
 800d6b8:	d103      	bne.n	800d6c2 <xTaskResumeAll+0xb6>
 800d6ba:	697b      	ldr	r3, [r7, #20]
 800d6bc:	68da      	ldr	r2, [r3, #12]
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	605a      	str	r2, [r3, #4]
 800d6c2:	697b      	ldr	r3, [r7, #20]
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	615a      	str	r2, [r3, #20]
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	1e5a      	subs	r2, r3, #1
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800d6d2:	697b      	ldr	r3, [r7, #20]
 800d6d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6d6:	4b3f      	ldr	r3, [pc, #252]	@ (800d7d4 <xTaskResumeAll+0x1c8>)
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	429a      	cmp	r2, r3
 800d6dc:	d903      	bls.n	800d6e6 <xTaskResumeAll+0xda>
 800d6de:	697b      	ldr	r3, [r7, #20]
 800d6e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6e2:	4a3c      	ldr	r2, [pc, #240]	@ (800d7d4 <xTaskResumeAll+0x1c8>)
 800d6e4:	6013      	str	r3, [r2, #0]
 800d6e6:	697b      	ldr	r3, [r7, #20]
 800d6e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6ea:	493b      	ldr	r1, [pc, #236]	@ (800d7d8 <xTaskResumeAll+0x1cc>)
 800d6ec:	4613      	mov	r3, r2
 800d6ee:	009b      	lsls	r3, r3, #2
 800d6f0:	4413      	add	r3, r2
 800d6f2:	009b      	lsls	r3, r3, #2
 800d6f4:	440b      	add	r3, r1
 800d6f6:	3304      	adds	r3, #4
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	603b      	str	r3, [r7, #0]
 800d6fc:	697b      	ldr	r3, [r7, #20]
 800d6fe:	683a      	ldr	r2, [r7, #0]
 800d700:	609a      	str	r2, [r3, #8]
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	689a      	ldr	r2, [r3, #8]
 800d706:	697b      	ldr	r3, [r7, #20]
 800d708:	60da      	str	r2, [r3, #12]
 800d70a:	683b      	ldr	r3, [r7, #0]
 800d70c:	689b      	ldr	r3, [r3, #8]
 800d70e:	697a      	ldr	r2, [r7, #20]
 800d710:	3204      	adds	r2, #4
 800d712:	605a      	str	r2, [r3, #4]
 800d714:	697b      	ldr	r3, [r7, #20]
 800d716:	1d1a      	adds	r2, r3, #4
 800d718:	683b      	ldr	r3, [r7, #0]
 800d71a:	609a      	str	r2, [r3, #8]
 800d71c:	697b      	ldr	r3, [r7, #20]
 800d71e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d720:	4613      	mov	r3, r2
 800d722:	009b      	lsls	r3, r3, #2
 800d724:	4413      	add	r3, r2
 800d726:	009b      	lsls	r3, r3, #2
 800d728:	4a2b      	ldr	r2, [pc, #172]	@ (800d7d8 <xTaskResumeAll+0x1cc>)
 800d72a:	441a      	add	r2, r3
 800d72c:	697b      	ldr	r3, [r7, #20]
 800d72e:	615a      	str	r2, [r3, #20]
 800d730:	697b      	ldr	r3, [r7, #20]
 800d732:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d734:	4928      	ldr	r1, [pc, #160]	@ (800d7d8 <xTaskResumeAll+0x1cc>)
 800d736:	4613      	mov	r3, r2
 800d738:	009b      	lsls	r3, r3, #2
 800d73a:	4413      	add	r3, r2
 800d73c:	009b      	lsls	r3, r3, #2
 800d73e:	440b      	add	r3, r1
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	1c59      	adds	r1, r3, #1
 800d744:	4824      	ldr	r0, [pc, #144]	@ (800d7d8 <xTaskResumeAll+0x1cc>)
 800d746:	4613      	mov	r3, r2
 800d748:	009b      	lsls	r3, r3, #2
 800d74a:	4413      	add	r3, r2
 800d74c:	009b      	lsls	r3, r3, #2
 800d74e:	4403      	add	r3, r0
 800d750:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d752:	697b      	ldr	r3, [r7, #20]
 800d754:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d756:	4b21      	ldr	r3, [pc, #132]	@ (800d7dc <xTaskResumeAll+0x1d0>)
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d75c:	429a      	cmp	r2, r3
 800d75e:	d902      	bls.n	800d766 <xTaskResumeAll+0x15a>
                    {
                        xYieldPending = pdTRUE;
 800d760:	4b1f      	ldr	r3, [pc, #124]	@ (800d7e0 <xTaskResumeAll+0x1d4>)
 800d762:	2201      	movs	r2, #1
 800d764:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d766:	4b1a      	ldr	r3, [pc, #104]	@ (800d7d0 <xTaskResumeAll+0x1c4>)
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	f47f af6f 	bne.w	800d64e <xTaskResumeAll+0x42>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800d770:	697b      	ldr	r3, [r7, #20]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d001      	beq.n	800d77a <xTaskResumeAll+0x16e>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800d776:	f000 fc01 	bl	800df7c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d77a:	4b1a      	ldr	r3, [pc, #104]	@ (800d7e4 <xTaskResumeAll+0x1d8>)
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d010      	beq.n	800d7a8 <xTaskResumeAll+0x19c>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800d786:	f000 f84b 	bl	800d820 <xTaskIncrementTick>
 800d78a:	4603      	mov	r3, r0
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d002      	beq.n	800d796 <xTaskResumeAll+0x18a>
                            {
                                xYieldPending = pdTRUE;
 800d790:	4b13      	ldr	r3, [pc, #76]	@ (800d7e0 <xTaskResumeAll+0x1d4>)
 800d792:	2201      	movs	r2, #1
 800d794:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	3b01      	subs	r3, #1
 800d79a:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d1f1      	bne.n	800d786 <xTaskResumeAll+0x17a>

                        xPendedTicks = 0;
 800d7a2:	4b10      	ldr	r3, [pc, #64]	@ (800d7e4 <xTaskResumeAll+0x1d8>)
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800d7a8:	4b0d      	ldr	r3, [pc, #52]	@ (800d7e0 <xTaskResumeAll+0x1d4>)
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d003      	beq.n	800d7b8 <xTaskResumeAll+0x1ac>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800d7b0:	2301      	movs	r3, #1
 800d7b2:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800d7b4:	f001 f950 	bl	800ea58 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800d7b8:	f001 f972 	bl	800eaa0 <vPortExitCritical>

    return xAlreadyYielded;
 800d7bc:	693b      	ldr	r3, [r7, #16]
}
 800d7be:	4618      	mov	r0, r3
 800d7c0:	3718      	adds	r7, #24
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	bd80      	pop	{r7, pc}
 800d7c6:	bf00      	nop
 800d7c8:	20046c84 	.word	0x20046c84
 800d7cc:	20046c5c 	.word	0x20046c5c
 800d7d0:	20046c1c 	.word	0x20046c1c
 800d7d4:	20046c64 	.word	0x20046c64
 800d7d8:	2004678c 	.word	0x2004678c
 800d7dc:	20046788 	.word	0x20046788
 800d7e0:	20046c70 	.word	0x20046c70
 800d7e4:	20046c6c 	.word	0x20046c6c

0800d7e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d7e8:	b480      	push	{r7}
 800d7ea:	b083      	sub	sp, #12
 800d7ec:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800d7ee:	4b05      	ldr	r3, [pc, #20]	@ (800d804 <xTaskGetTickCount+0x1c>)
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800d7f4:	687b      	ldr	r3, [r7, #4]
}
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	370c      	adds	r7, #12
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d800:	4770      	bx	lr
 800d802:	bf00      	nop
 800d804:	20046c60 	.word	0x20046c60

0800d808 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 800d808:	b480      	push	{r7}
 800d80a:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 800d80c:	4b03      	ldr	r3, [pc, #12]	@ (800d81c <uxTaskGetNumberOfTasks+0x14>)
 800d80e:	681b      	ldr	r3, [r3, #0]
}
 800d810:	4618      	mov	r0, r3
 800d812:	46bd      	mov	sp, r7
 800d814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d818:	4770      	bx	lr
 800d81a:	bf00      	nop
 800d81c:	20046c5c 	.word	0x20046c5c

0800d820 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b088      	sub	sp, #32
 800d824:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800d826:	2300      	movs	r3, #0
 800d828:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800d82a:	4b7a      	ldr	r3, [pc, #488]	@ (800da14 <xTaskIncrementTick+0x1f4>)
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	f040 80e6 	bne.w	800da00 <xTaskIncrementTick+0x1e0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d834:	4b78      	ldr	r3, [pc, #480]	@ (800da18 <xTaskIncrementTick+0x1f8>)
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	3301      	adds	r3, #1
 800d83a:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800d83c:	4a76      	ldr	r2, [pc, #472]	@ (800da18 <xTaskIncrementTick+0x1f8>)
 800d83e:	69bb      	ldr	r3, [r7, #24]
 800d840:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d842:	69bb      	ldr	r3, [r7, #24]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d119      	bne.n	800d87c <xTaskIncrementTick+0x5c>
        {
            taskSWITCH_DELAYED_LISTS();
 800d848:	4b74      	ldr	r3, [pc, #464]	@ (800da1c <xTaskIncrementTick+0x1fc>)
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d003      	beq.n	800d85a <xTaskIncrementTick+0x3a>
 800d852:	f001 fae1 	bl	800ee18 <ulSetInterruptMask>
 800d856:	bf00      	nop
 800d858:	e7fd      	b.n	800d856 <xTaskIncrementTick+0x36>
 800d85a:	4b70      	ldr	r3, [pc, #448]	@ (800da1c <xTaskIncrementTick+0x1fc>)
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	617b      	str	r3, [r7, #20]
 800d860:	4b6f      	ldr	r3, [pc, #444]	@ (800da20 <xTaskIncrementTick+0x200>)
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	4a6d      	ldr	r2, [pc, #436]	@ (800da1c <xTaskIncrementTick+0x1fc>)
 800d866:	6013      	str	r3, [r2, #0]
 800d868:	4a6d      	ldr	r2, [pc, #436]	@ (800da20 <xTaskIncrementTick+0x200>)
 800d86a:	697b      	ldr	r3, [r7, #20]
 800d86c:	6013      	str	r3, [r2, #0]
 800d86e:	4b6d      	ldr	r3, [pc, #436]	@ (800da24 <xTaskIncrementTick+0x204>)
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	3301      	adds	r3, #1
 800d874:	4a6b      	ldr	r2, [pc, #428]	@ (800da24 <xTaskIncrementTick+0x204>)
 800d876:	6013      	str	r3, [r2, #0]
 800d878:	f000 fb80 	bl	800df7c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800d87c:	4b6a      	ldr	r3, [pc, #424]	@ (800da28 <xTaskIncrementTick+0x208>)
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	69ba      	ldr	r2, [r7, #24]
 800d882:	429a      	cmp	r2, r3
 800d884:	f0c0 80a7 	bcc.w	800d9d6 <xTaskIncrementTick+0x1b6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d888:	4b64      	ldr	r3, [pc, #400]	@ (800da1c <xTaskIncrementTick+0x1fc>)
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d104      	bne.n	800d89c <xTaskIncrementTick+0x7c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d892:	4b65      	ldr	r3, [pc, #404]	@ (800da28 <xTaskIncrementTick+0x208>)
 800d894:	f04f 32ff 	mov.w	r2, #4294967295
 800d898:	601a      	str	r2, [r3, #0]
                    break;
 800d89a:	e09c      	b.n	800d9d6 <xTaskIncrementTick+0x1b6>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d89c:	4b5f      	ldr	r3, [pc, #380]	@ (800da1c <xTaskIncrementTick+0x1fc>)
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	68db      	ldr	r3, [r3, #12]
 800d8a2:	68db      	ldr	r3, [r3, #12]
 800d8a4:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d8a6:	693b      	ldr	r3, [r7, #16]
 800d8a8:	685b      	ldr	r3, [r3, #4]
 800d8aa:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 800d8ac:	69ba      	ldr	r2, [r7, #24]
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	429a      	cmp	r2, r3
 800d8b2:	d203      	bcs.n	800d8bc <xTaskIncrementTick+0x9c>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800d8b4:	4a5c      	ldr	r2, [pc, #368]	@ (800da28 <xTaskIncrementTick+0x208>)
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800d8ba:	e08c      	b.n	800d9d6 <xTaskIncrementTick+0x1b6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800d8bc:	693b      	ldr	r3, [r7, #16]
 800d8be:	695b      	ldr	r3, [r3, #20]
 800d8c0:	60bb      	str	r3, [r7, #8]
 800d8c2:	693b      	ldr	r3, [r7, #16]
 800d8c4:	689b      	ldr	r3, [r3, #8]
 800d8c6:	693a      	ldr	r2, [r7, #16]
 800d8c8:	68d2      	ldr	r2, [r2, #12]
 800d8ca:	609a      	str	r2, [r3, #8]
 800d8cc:	693b      	ldr	r3, [r7, #16]
 800d8ce:	68db      	ldr	r3, [r3, #12]
 800d8d0:	693a      	ldr	r2, [r7, #16]
 800d8d2:	6892      	ldr	r2, [r2, #8]
 800d8d4:	605a      	str	r2, [r3, #4]
 800d8d6:	68bb      	ldr	r3, [r7, #8]
 800d8d8:	685a      	ldr	r2, [r3, #4]
 800d8da:	693b      	ldr	r3, [r7, #16]
 800d8dc:	3304      	adds	r3, #4
 800d8de:	429a      	cmp	r2, r3
 800d8e0:	d103      	bne.n	800d8ea <xTaskIncrementTick+0xca>
 800d8e2:	693b      	ldr	r3, [r7, #16]
 800d8e4:	68da      	ldr	r2, [r3, #12]
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	605a      	str	r2, [r3, #4]
 800d8ea:	693b      	ldr	r3, [r7, #16]
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	615a      	str	r2, [r3, #20]
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	1e5a      	subs	r2, r3, #1
 800d8f6:	68bb      	ldr	r3, [r7, #8]
 800d8f8:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d8fa:	693b      	ldr	r3, [r7, #16]
 800d8fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d01e      	beq.n	800d940 <xTaskIncrementTick+0x120>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800d902:	693b      	ldr	r3, [r7, #16]
 800d904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d906:	607b      	str	r3, [r7, #4]
 800d908:	693b      	ldr	r3, [r7, #16]
 800d90a:	69db      	ldr	r3, [r3, #28]
 800d90c:	693a      	ldr	r2, [r7, #16]
 800d90e:	6a12      	ldr	r2, [r2, #32]
 800d910:	609a      	str	r2, [r3, #8]
 800d912:	693b      	ldr	r3, [r7, #16]
 800d914:	6a1b      	ldr	r3, [r3, #32]
 800d916:	693a      	ldr	r2, [r7, #16]
 800d918:	69d2      	ldr	r2, [r2, #28]
 800d91a:	605a      	str	r2, [r3, #4]
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	685a      	ldr	r2, [r3, #4]
 800d920:	693b      	ldr	r3, [r7, #16]
 800d922:	3318      	adds	r3, #24
 800d924:	429a      	cmp	r2, r3
 800d926:	d103      	bne.n	800d930 <xTaskIncrementTick+0x110>
 800d928:	693b      	ldr	r3, [r7, #16]
 800d92a:	6a1a      	ldr	r2, [r3, #32]
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	605a      	str	r2, [r3, #4]
 800d930:	693b      	ldr	r3, [r7, #16]
 800d932:	2200      	movs	r2, #0
 800d934:	629a      	str	r2, [r3, #40]	@ 0x28
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	1e5a      	subs	r2, r3, #1
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800d940:	693b      	ldr	r3, [r7, #16]
 800d942:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d944:	4b39      	ldr	r3, [pc, #228]	@ (800da2c <xTaskIncrementTick+0x20c>)
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	429a      	cmp	r2, r3
 800d94a:	d903      	bls.n	800d954 <xTaskIncrementTick+0x134>
 800d94c:	693b      	ldr	r3, [r7, #16]
 800d94e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d950:	4a36      	ldr	r2, [pc, #216]	@ (800da2c <xTaskIncrementTick+0x20c>)
 800d952:	6013      	str	r3, [r2, #0]
 800d954:	693b      	ldr	r3, [r7, #16]
 800d956:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d958:	4935      	ldr	r1, [pc, #212]	@ (800da30 <xTaskIncrementTick+0x210>)
 800d95a:	4613      	mov	r3, r2
 800d95c:	009b      	lsls	r3, r3, #2
 800d95e:	4413      	add	r3, r2
 800d960:	009b      	lsls	r3, r3, #2
 800d962:	440b      	add	r3, r1
 800d964:	3304      	adds	r3, #4
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	603b      	str	r3, [r7, #0]
 800d96a:	693b      	ldr	r3, [r7, #16]
 800d96c:	683a      	ldr	r2, [r7, #0]
 800d96e:	609a      	str	r2, [r3, #8]
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	689a      	ldr	r2, [r3, #8]
 800d974:	693b      	ldr	r3, [r7, #16]
 800d976:	60da      	str	r2, [r3, #12]
 800d978:	683b      	ldr	r3, [r7, #0]
 800d97a:	689b      	ldr	r3, [r3, #8]
 800d97c:	693a      	ldr	r2, [r7, #16]
 800d97e:	3204      	adds	r2, #4
 800d980:	605a      	str	r2, [r3, #4]
 800d982:	693b      	ldr	r3, [r7, #16]
 800d984:	1d1a      	adds	r2, r3, #4
 800d986:	683b      	ldr	r3, [r7, #0]
 800d988:	609a      	str	r2, [r3, #8]
 800d98a:	693b      	ldr	r3, [r7, #16]
 800d98c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d98e:	4613      	mov	r3, r2
 800d990:	009b      	lsls	r3, r3, #2
 800d992:	4413      	add	r3, r2
 800d994:	009b      	lsls	r3, r3, #2
 800d996:	4a26      	ldr	r2, [pc, #152]	@ (800da30 <xTaskIncrementTick+0x210>)
 800d998:	441a      	add	r2, r3
 800d99a:	693b      	ldr	r3, [r7, #16]
 800d99c:	615a      	str	r2, [r3, #20]
 800d99e:	693b      	ldr	r3, [r7, #16]
 800d9a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9a2:	4923      	ldr	r1, [pc, #140]	@ (800da30 <xTaskIncrementTick+0x210>)
 800d9a4:	4613      	mov	r3, r2
 800d9a6:	009b      	lsls	r3, r3, #2
 800d9a8:	4413      	add	r3, r2
 800d9aa:	009b      	lsls	r3, r3, #2
 800d9ac:	440b      	add	r3, r1
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	1c59      	adds	r1, r3, #1
 800d9b2:	481f      	ldr	r0, [pc, #124]	@ (800da30 <xTaskIncrementTick+0x210>)
 800d9b4:	4613      	mov	r3, r2
 800d9b6:	009b      	lsls	r3, r3, #2
 800d9b8:	4413      	add	r3, r2
 800d9ba:	009b      	lsls	r3, r3, #2
 800d9bc:	4403      	add	r3, r0
 800d9be:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d9c0:	693b      	ldr	r3, [r7, #16]
 800d9c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9c4:	4b1b      	ldr	r3, [pc, #108]	@ (800da34 <xTaskIncrementTick+0x214>)
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9ca:	429a      	cmp	r2, r3
 800d9cc:	f67f af5c 	bls.w	800d888 <xTaskIncrementTick+0x68>
                        {
                            xSwitchRequired = pdTRUE;
 800d9d0:	2301      	movs	r3, #1
 800d9d2:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d9d4:	e758      	b.n	800d888 <xTaskIncrementTick+0x68>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d9d6:	4b17      	ldr	r3, [pc, #92]	@ (800da34 <xTaskIncrementTick+0x214>)
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9dc:	4914      	ldr	r1, [pc, #80]	@ (800da30 <xTaskIncrementTick+0x210>)
 800d9de:	4613      	mov	r3, r2
 800d9e0:	009b      	lsls	r3, r3, #2
 800d9e2:	4413      	add	r3, r2
 800d9e4:	009b      	lsls	r3, r3, #2
 800d9e6:	440b      	add	r3, r1
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	2b01      	cmp	r3, #1
 800d9ec:	d901      	bls.n	800d9f2 <xTaskIncrementTick+0x1d2>
            {
                xSwitchRequired = pdTRUE;
 800d9ee:	2301      	movs	r3, #1
 800d9f0:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800d9f2:	4b11      	ldr	r3, [pc, #68]	@ (800da38 <xTaskIncrementTick+0x218>)
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d007      	beq.n	800da0a <xTaskIncrementTick+0x1ea>
            {
                xSwitchRequired = pdTRUE;
 800d9fa:	2301      	movs	r3, #1
 800d9fc:	61fb      	str	r3, [r7, #28]
 800d9fe:	e004      	b.n	800da0a <xTaskIncrementTick+0x1ea>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800da00:	4b0e      	ldr	r3, [pc, #56]	@ (800da3c <xTaskIncrementTick+0x21c>)
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	3301      	adds	r3, #1
 800da06:	4a0d      	ldr	r2, [pc, #52]	@ (800da3c <xTaskIncrementTick+0x21c>)
 800da08:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800da0a:	69fb      	ldr	r3, [r7, #28]
}
 800da0c:	4618      	mov	r0, r3
 800da0e:	3720      	adds	r7, #32
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}
 800da14:	20046c84 	.word	0x20046c84
 800da18:	20046c60 	.word	0x20046c60
 800da1c:	20046c14 	.word	0x20046c14
 800da20:	20046c18 	.word	0x20046c18
 800da24:	20046c74 	.word	0x20046c74
 800da28:	20046c7c 	.word	0x20046c7c
 800da2c:	20046c64 	.word	0x20046c64
 800da30:	2004678c 	.word	0x2004678c
 800da34:	20046788 	.word	0x20046788
 800da38:	20046c70 	.word	0x20046c70
 800da3c:	20046c6c 	.word	0x20046c6c

0800da40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b082      	sub	sp, #8
 800da44:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 800da46:	4b23      	ldr	r3, [pc, #140]	@ (800dad4 <vTaskSwitchContext+0x94>)
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d003      	beq.n	800da56 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800da4e:	4b22      	ldr	r3, [pc, #136]	@ (800dad8 <vTaskSwitchContext+0x98>)
 800da50:	2201      	movs	r2, #1
 800da52:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800da54:	e039      	b.n	800daca <vTaskSwitchContext+0x8a>
        xYieldPending = pdFALSE;
 800da56:	4b20      	ldr	r3, [pc, #128]	@ (800dad8 <vTaskSwitchContext+0x98>)
 800da58:	2200      	movs	r2, #0
 800da5a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da5c:	4b1f      	ldr	r3, [pc, #124]	@ (800dadc <vTaskSwitchContext+0x9c>)
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	607b      	str	r3, [r7, #4]
 800da62:	e009      	b.n	800da78 <vTaskSwitchContext+0x38>
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d103      	bne.n	800da72 <vTaskSwitchContext+0x32>
 800da6a:	f001 f9d5 	bl	800ee18 <ulSetInterruptMask>
 800da6e:	bf00      	nop
 800da70:	e7fd      	b.n	800da6e <vTaskSwitchContext+0x2e>
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	3b01      	subs	r3, #1
 800da76:	607b      	str	r3, [r7, #4]
 800da78:	4919      	ldr	r1, [pc, #100]	@ (800dae0 <vTaskSwitchContext+0xa0>)
 800da7a:	687a      	ldr	r2, [r7, #4]
 800da7c:	4613      	mov	r3, r2
 800da7e:	009b      	lsls	r3, r3, #2
 800da80:	4413      	add	r3, r2
 800da82:	009b      	lsls	r3, r3, #2
 800da84:	440b      	add	r3, r1
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d0eb      	beq.n	800da64 <vTaskSwitchContext+0x24>
 800da8c:	687a      	ldr	r2, [r7, #4]
 800da8e:	4613      	mov	r3, r2
 800da90:	009b      	lsls	r3, r3, #2
 800da92:	4413      	add	r3, r2
 800da94:	009b      	lsls	r3, r3, #2
 800da96:	4a12      	ldr	r2, [pc, #72]	@ (800dae0 <vTaskSwitchContext+0xa0>)
 800da98:	4413      	add	r3, r2
 800da9a:	603b      	str	r3, [r7, #0]
 800da9c:	683b      	ldr	r3, [r7, #0]
 800da9e:	685b      	ldr	r3, [r3, #4]
 800daa0:	685a      	ldr	r2, [r3, #4]
 800daa2:	683b      	ldr	r3, [r7, #0]
 800daa4:	605a      	str	r2, [r3, #4]
 800daa6:	683b      	ldr	r3, [r7, #0]
 800daa8:	685a      	ldr	r2, [r3, #4]
 800daaa:	683b      	ldr	r3, [r7, #0]
 800daac:	3308      	adds	r3, #8
 800daae:	429a      	cmp	r2, r3
 800dab0:	d103      	bne.n	800daba <vTaskSwitchContext+0x7a>
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	68da      	ldr	r2, [r3, #12]
 800dab6:	683b      	ldr	r3, [r7, #0]
 800dab8:	605a      	str	r2, [r3, #4]
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	685b      	ldr	r3, [r3, #4]
 800dabe:	68db      	ldr	r3, [r3, #12]
 800dac0:	4a08      	ldr	r2, [pc, #32]	@ (800dae4 <vTaskSwitchContext+0xa4>)
 800dac2:	6013      	str	r3, [r2, #0]
 800dac4:	4a05      	ldr	r2, [pc, #20]	@ (800dadc <vTaskSwitchContext+0x9c>)
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	6013      	str	r3, [r2, #0]
}
 800daca:	bf00      	nop
 800dacc:	3708      	adds	r7, #8
 800dace:	46bd      	mov	sp, r7
 800dad0:	bd80      	pop	{r7, pc}
 800dad2:	bf00      	nop
 800dad4:	20046c84 	.word	0x20046c84
 800dad8:	20046c70 	.word	0x20046c70
 800dadc:	20046c64 	.word	0x20046c64
 800dae0:	2004678c 	.word	0x2004678c
 800dae4:	20046788 	.word	0x20046788

0800dae8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b082      	sub	sp, #8
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
 800daf0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d103      	bne.n	800db00 <vTaskPlaceOnEventList+0x18>
 800daf8:	f001 f98e 	bl	800ee18 <ulSetInterruptMask>
 800dafc:	bf00      	nop
 800dafe:	e7fd      	b.n	800dafc <vTaskPlaceOnEventList+0x14>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800db00:	4b07      	ldr	r3, [pc, #28]	@ (800db20 <vTaskPlaceOnEventList+0x38>)
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	3318      	adds	r3, #24
 800db06:	4619      	mov	r1, r3
 800db08:	6878      	ldr	r0, [r7, #4]
 800db0a:	f7fe fb9e 	bl	800c24a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800db0e:	2101      	movs	r1, #1
 800db10:	6838      	ldr	r0, [r7, #0]
 800db12:	f000 fc35 	bl	800e380 <prvAddCurrentTaskToDelayedList>
}
 800db16:	bf00      	nop
 800db18:	3708      	adds	r7, #8
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}
 800db1e:	bf00      	nop
 800db20:	20046788 	.word	0x20046788

0800db24 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800db24:	b580      	push	{r7, lr}
 800db26:	b086      	sub	sp, #24
 800db28:	af00      	add	r7, sp, #0
 800db2a:	60f8      	str	r0, [r7, #12]
 800db2c:	60b9      	str	r1, [r7, #8]
 800db2e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d103      	bne.n	800db3e <vTaskPlaceOnEventListRestricted+0x1a>
 800db36:	f001 f96f 	bl	800ee18 <ulSetInterruptMask>
 800db3a:	bf00      	nop
 800db3c:	e7fd      	b.n	800db3a <vTaskPlaceOnEventListRestricted+0x16>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	685b      	ldr	r3, [r3, #4]
 800db42:	617b      	str	r3, [r7, #20]
 800db44:	4b15      	ldr	r3, [pc, #84]	@ (800db9c <vTaskPlaceOnEventListRestricted+0x78>)
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	697a      	ldr	r2, [r7, #20]
 800db4a:	61da      	str	r2, [r3, #28]
 800db4c:	4b13      	ldr	r3, [pc, #76]	@ (800db9c <vTaskPlaceOnEventListRestricted+0x78>)
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	697a      	ldr	r2, [r7, #20]
 800db52:	6892      	ldr	r2, [r2, #8]
 800db54:	621a      	str	r2, [r3, #32]
 800db56:	4b11      	ldr	r3, [pc, #68]	@ (800db9c <vTaskPlaceOnEventListRestricted+0x78>)
 800db58:	681a      	ldr	r2, [r3, #0]
 800db5a:	697b      	ldr	r3, [r7, #20]
 800db5c:	689b      	ldr	r3, [r3, #8]
 800db5e:	3218      	adds	r2, #24
 800db60:	605a      	str	r2, [r3, #4]
 800db62:	4b0e      	ldr	r3, [pc, #56]	@ (800db9c <vTaskPlaceOnEventListRestricted+0x78>)
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	f103 0218 	add.w	r2, r3, #24
 800db6a:	697b      	ldr	r3, [r7, #20]
 800db6c:	609a      	str	r2, [r3, #8]
 800db6e:	4b0b      	ldr	r3, [pc, #44]	@ (800db9c <vTaskPlaceOnEventListRestricted+0x78>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	68fa      	ldr	r2, [r7, #12]
 800db74:	629a      	str	r2, [r3, #40]	@ 0x28
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	1c5a      	adds	r2, r3, #1
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d002      	beq.n	800db8c <vTaskPlaceOnEventListRestricted+0x68>
        {
            xTicksToWait = portMAX_DELAY;
 800db86:	f04f 33ff 	mov.w	r3, #4294967295
 800db8a:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800db8c:	6879      	ldr	r1, [r7, #4]
 800db8e:	68b8      	ldr	r0, [r7, #8]
 800db90:	f000 fbf6 	bl	800e380 <prvAddCurrentTaskToDelayedList>
    }
 800db94:	bf00      	nop
 800db96:	3718      	adds	r7, #24
 800db98:	46bd      	mov	sp, r7
 800db9a:	bd80      	pop	{r7, pc}
 800db9c:	20046788 	.word	0x20046788

0800dba0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b088      	sub	sp, #32
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	68db      	ldr	r3, [r3, #12]
 800dbac:	68db      	ldr	r3, [r3, #12]
 800dbae:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 800dbb0:	69bb      	ldr	r3, [r7, #24]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d103      	bne.n	800dbbe <xTaskRemoveFromEventList+0x1e>
 800dbb6:	f001 f92f 	bl	800ee18 <ulSetInterruptMask>
 800dbba:	bf00      	nop
 800dbbc:	e7fd      	b.n	800dbba <xTaskRemoveFromEventList+0x1a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800dbbe:	69bb      	ldr	r3, [r7, #24]
 800dbc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbc2:	617b      	str	r3, [r7, #20]
 800dbc4:	69bb      	ldr	r3, [r7, #24]
 800dbc6:	69db      	ldr	r3, [r3, #28]
 800dbc8:	69ba      	ldr	r2, [r7, #24]
 800dbca:	6a12      	ldr	r2, [r2, #32]
 800dbcc:	609a      	str	r2, [r3, #8]
 800dbce:	69bb      	ldr	r3, [r7, #24]
 800dbd0:	6a1b      	ldr	r3, [r3, #32]
 800dbd2:	69ba      	ldr	r2, [r7, #24]
 800dbd4:	69d2      	ldr	r2, [r2, #28]
 800dbd6:	605a      	str	r2, [r3, #4]
 800dbd8:	697b      	ldr	r3, [r7, #20]
 800dbda:	685a      	ldr	r2, [r3, #4]
 800dbdc:	69bb      	ldr	r3, [r7, #24]
 800dbde:	3318      	adds	r3, #24
 800dbe0:	429a      	cmp	r2, r3
 800dbe2:	d103      	bne.n	800dbec <xTaskRemoveFromEventList+0x4c>
 800dbe4:	69bb      	ldr	r3, [r7, #24]
 800dbe6:	6a1a      	ldr	r2, [r3, #32]
 800dbe8:	697b      	ldr	r3, [r7, #20]
 800dbea:	605a      	str	r2, [r3, #4]
 800dbec:	69bb      	ldr	r3, [r7, #24]
 800dbee:	2200      	movs	r2, #0
 800dbf0:	629a      	str	r2, [r3, #40]	@ 0x28
 800dbf2:	697b      	ldr	r3, [r7, #20]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	1e5a      	subs	r2, r3, #1
 800dbf8:	697b      	ldr	r3, [r7, #20]
 800dbfa:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800dbfc:	4b49      	ldr	r3, [pc, #292]	@ (800dd24 <xTaskRemoveFromEventList+0x184>)
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d15f      	bne.n	800dcc4 <xTaskRemoveFromEventList+0x124>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800dc04:	69bb      	ldr	r3, [r7, #24]
 800dc06:	695b      	ldr	r3, [r3, #20]
 800dc08:	60fb      	str	r3, [r7, #12]
 800dc0a:	69bb      	ldr	r3, [r7, #24]
 800dc0c:	689b      	ldr	r3, [r3, #8]
 800dc0e:	69ba      	ldr	r2, [r7, #24]
 800dc10:	68d2      	ldr	r2, [r2, #12]
 800dc12:	609a      	str	r2, [r3, #8]
 800dc14:	69bb      	ldr	r3, [r7, #24]
 800dc16:	68db      	ldr	r3, [r3, #12]
 800dc18:	69ba      	ldr	r2, [r7, #24]
 800dc1a:	6892      	ldr	r2, [r2, #8]
 800dc1c:	605a      	str	r2, [r3, #4]
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	685a      	ldr	r2, [r3, #4]
 800dc22:	69bb      	ldr	r3, [r7, #24]
 800dc24:	3304      	adds	r3, #4
 800dc26:	429a      	cmp	r2, r3
 800dc28:	d103      	bne.n	800dc32 <xTaskRemoveFromEventList+0x92>
 800dc2a:	69bb      	ldr	r3, [r7, #24]
 800dc2c:	68da      	ldr	r2, [r3, #12]
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	605a      	str	r2, [r3, #4]
 800dc32:	69bb      	ldr	r3, [r7, #24]
 800dc34:	2200      	movs	r2, #0
 800dc36:	615a      	str	r2, [r3, #20]
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	1e5a      	subs	r2, r3, #1
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800dc42:	69bb      	ldr	r3, [r7, #24]
 800dc44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc46:	4b38      	ldr	r3, [pc, #224]	@ (800dd28 <xTaskRemoveFromEventList+0x188>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	429a      	cmp	r2, r3
 800dc4c:	d903      	bls.n	800dc56 <xTaskRemoveFromEventList+0xb6>
 800dc4e:	69bb      	ldr	r3, [r7, #24]
 800dc50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc52:	4a35      	ldr	r2, [pc, #212]	@ (800dd28 <xTaskRemoveFromEventList+0x188>)
 800dc54:	6013      	str	r3, [r2, #0]
 800dc56:	69bb      	ldr	r3, [r7, #24]
 800dc58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc5a:	4934      	ldr	r1, [pc, #208]	@ (800dd2c <xTaskRemoveFromEventList+0x18c>)
 800dc5c:	4613      	mov	r3, r2
 800dc5e:	009b      	lsls	r3, r3, #2
 800dc60:	4413      	add	r3, r2
 800dc62:	009b      	lsls	r3, r3, #2
 800dc64:	440b      	add	r3, r1
 800dc66:	3304      	adds	r3, #4
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	60bb      	str	r3, [r7, #8]
 800dc6c:	69bb      	ldr	r3, [r7, #24]
 800dc6e:	68ba      	ldr	r2, [r7, #8]
 800dc70:	609a      	str	r2, [r3, #8]
 800dc72:	68bb      	ldr	r3, [r7, #8]
 800dc74:	689a      	ldr	r2, [r3, #8]
 800dc76:	69bb      	ldr	r3, [r7, #24]
 800dc78:	60da      	str	r2, [r3, #12]
 800dc7a:	68bb      	ldr	r3, [r7, #8]
 800dc7c:	689b      	ldr	r3, [r3, #8]
 800dc7e:	69ba      	ldr	r2, [r7, #24]
 800dc80:	3204      	adds	r2, #4
 800dc82:	605a      	str	r2, [r3, #4]
 800dc84:	69bb      	ldr	r3, [r7, #24]
 800dc86:	1d1a      	adds	r2, r3, #4
 800dc88:	68bb      	ldr	r3, [r7, #8]
 800dc8a:	609a      	str	r2, [r3, #8]
 800dc8c:	69bb      	ldr	r3, [r7, #24]
 800dc8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc90:	4613      	mov	r3, r2
 800dc92:	009b      	lsls	r3, r3, #2
 800dc94:	4413      	add	r3, r2
 800dc96:	009b      	lsls	r3, r3, #2
 800dc98:	4a24      	ldr	r2, [pc, #144]	@ (800dd2c <xTaskRemoveFromEventList+0x18c>)
 800dc9a:	441a      	add	r2, r3
 800dc9c:	69bb      	ldr	r3, [r7, #24]
 800dc9e:	615a      	str	r2, [r3, #20]
 800dca0:	69bb      	ldr	r3, [r7, #24]
 800dca2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dca4:	4921      	ldr	r1, [pc, #132]	@ (800dd2c <xTaskRemoveFromEventList+0x18c>)
 800dca6:	4613      	mov	r3, r2
 800dca8:	009b      	lsls	r3, r3, #2
 800dcaa:	4413      	add	r3, r2
 800dcac:	009b      	lsls	r3, r3, #2
 800dcae:	440b      	add	r3, r1
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	1c59      	adds	r1, r3, #1
 800dcb4:	481d      	ldr	r0, [pc, #116]	@ (800dd2c <xTaskRemoveFromEventList+0x18c>)
 800dcb6:	4613      	mov	r3, r2
 800dcb8:	009b      	lsls	r3, r3, #2
 800dcba:	4413      	add	r3, r2
 800dcbc:	009b      	lsls	r3, r3, #2
 800dcbe:	4403      	add	r3, r0
 800dcc0:	6019      	str	r1, [r3, #0]
 800dcc2:	e01b      	b.n	800dcfc <xTaskRemoveFromEventList+0x15c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dcc4:	4b1a      	ldr	r3, [pc, #104]	@ (800dd30 <xTaskRemoveFromEventList+0x190>)
 800dcc6:	685b      	ldr	r3, [r3, #4]
 800dcc8:	613b      	str	r3, [r7, #16]
 800dcca:	69bb      	ldr	r3, [r7, #24]
 800dccc:	693a      	ldr	r2, [r7, #16]
 800dcce:	61da      	str	r2, [r3, #28]
 800dcd0:	693b      	ldr	r3, [r7, #16]
 800dcd2:	689a      	ldr	r2, [r3, #8]
 800dcd4:	69bb      	ldr	r3, [r7, #24]
 800dcd6:	621a      	str	r2, [r3, #32]
 800dcd8:	693b      	ldr	r3, [r7, #16]
 800dcda:	689b      	ldr	r3, [r3, #8]
 800dcdc:	69ba      	ldr	r2, [r7, #24]
 800dcde:	3218      	adds	r2, #24
 800dce0:	605a      	str	r2, [r3, #4]
 800dce2:	69bb      	ldr	r3, [r7, #24]
 800dce4:	f103 0218 	add.w	r2, r3, #24
 800dce8:	693b      	ldr	r3, [r7, #16]
 800dcea:	609a      	str	r2, [r3, #8]
 800dcec:	69bb      	ldr	r3, [r7, #24]
 800dcee:	4a10      	ldr	r2, [pc, #64]	@ (800dd30 <xTaskRemoveFromEventList+0x190>)
 800dcf0:	629a      	str	r2, [r3, #40]	@ 0x28
 800dcf2:	4b0f      	ldr	r3, [pc, #60]	@ (800dd30 <xTaskRemoveFromEventList+0x190>)
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	3301      	adds	r3, #1
 800dcf8:	4a0d      	ldr	r2, [pc, #52]	@ (800dd30 <xTaskRemoveFromEventList+0x190>)
 800dcfa:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dcfc:	69bb      	ldr	r3, [r7, #24]
 800dcfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd00:	4b0c      	ldr	r3, [pc, #48]	@ (800dd34 <xTaskRemoveFromEventList+0x194>)
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd06:	429a      	cmp	r2, r3
 800dd08:	d905      	bls.n	800dd16 <xTaskRemoveFromEventList+0x176>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800dd0a:	2301      	movs	r3, #1
 800dd0c:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800dd0e:	4b0a      	ldr	r3, [pc, #40]	@ (800dd38 <xTaskRemoveFromEventList+0x198>)
 800dd10:	2201      	movs	r2, #1
 800dd12:	601a      	str	r2, [r3, #0]
 800dd14:	e001      	b.n	800dd1a <xTaskRemoveFromEventList+0x17a>
    }
    else
    {
        xReturn = pdFALSE;
 800dd16:	2300      	movs	r3, #0
 800dd18:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 800dd1a:	69fb      	ldr	r3, [r7, #28]
}
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	3720      	adds	r7, #32
 800dd20:	46bd      	mov	sp, r7
 800dd22:	bd80      	pop	{r7, pc}
 800dd24:	20046c84 	.word	0x20046c84
 800dd28:	20046c64 	.word	0x20046c64
 800dd2c:	2004678c 	.word	0x2004678c
 800dd30:	20046c1c 	.word	0x20046c1c
 800dd34:	20046788 	.word	0x20046788
 800dd38:	20046c70 	.word	0x20046c70

0800dd3c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800dd3c:	b480      	push	{r7}
 800dd3e:	b083      	sub	sp, #12
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dd44:	4b06      	ldr	r3, [pc, #24]	@ (800dd60 <vTaskInternalSetTimeOutState+0x24>)
 800dd46:	681a      	ldr	r2, [r3, #0]
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800dd4c:	4b05      	ldr	r3, [pc, #20]	@ (800dd64 <vTaskInternalSetTimeOutState+0x28>)
 800dd4e:	681a      	ldr	r2, [r3, #0]
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	605a      	str	r2, [r3, #4]
}
 800dd54:	bf00      	nop
 800dd56:	370c      	adds	r7, #12
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5e:	4770      	bx	lr
 800dd60:	20046c74 	.word	0x20046c74
 800dd64:	20046c60 	.word	0x20046c60

0800dd68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b086      	sub	sp, #24
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
 800dd70:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d103      	bne.n	800dd80 <xTaskCheckForTimeOut+0x18>
 800dd78:	f001 f84e 	bl	800ee18 <ulSetInterruptMask>
 800dd7c:	bf00      	nop
 800dd7e:	e7fd      	b.n	800dd7c <xTaskCheckForTimeOut+0x14>
    configASSERT( pxTicksToWait );
 800dd80:	683b      	ldr	r3, [r7, #0]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d103      	bne.n	800dd8e <xTaskCheckForTimeOut+0x26>
 800dd86:	f001 f847 	bl	800ee18 <ulSetInterruptMask>
 800dd8a:	bf00      	nop
 800dd8c:	e7fd      	b.n	800dd8a <xTaskCheckForTimeOut+0x22>

    taskENTER_CRITICAL();
 800dd8e:	f000 fe75 	bl	800ea7c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800dd92:	4b1f      	ldr	r3, [pc, #124]	@ (800de10 <xTaskCheckForTimeOut+0xa8>)
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	685b      	ldr	r3, [r3, #4]
 800dd9c:	693a      	ldr	r2, [r7, #16]
 800dd9e:	1ad3      	subs	r3, r2, r3
 800dda0:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800dda2:	683b      	ldr	r3, [r7, #0]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddaa:	d102      	bne.n	800ddb2 <xTaskCheckForTimeOut+0x4a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800ddac:	2300      	movs	r3, #0
 800ddae:	617b      	str	r3, [r7, #20]
 800ddb0:	e026      	b.n	800de00 <xTaskCheckForTimeOut+0x98>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681a      	ldr	r2, [r3, #0]
 800ddb6:	4b17      	ldr	r3, [pc, #92]	@ (800de14 <xTaskCheckForTimeOut+0xac>)
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	429a      	cmp	r2, r3
 800ddbc:	d00a      	beq.n	800ddd4 <xTaskCheckForTimeOut+0x6c>
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	685b      	ldr	r3, [r3, #4]
 800ddc2:	693a      	ldr	r2, [r7, #16]
 800ddc4:	429a      	cmp	r2, r3
 800ddc6:	d305      	bcc.n	800ddd4 <xTaskCheckForTimeOut+0x6c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800ddc8:	2301      	movs	r3, #1
 800ddca:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 800ddcc:	683b      	ldr	r3, [r7, #0]
 800ddce:	2200      	movs	r2, #0
 800ddd0:	601a      	str	r2, [r3, #0]
 800ddd2:	e015      	b.n	800de00 <xTaskCheckForTimeOut+0x98>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ddd4:	683b      	ldr	r3, [r7, #0]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	68fa      	ldr	r2, [r7, #12]
 800ddda:	429a      	cmp	r2, r3
 800dddc:	d20b      	bcs.n	800ddf6 <xTaskCheckForTimeOut+0x8e>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800ddde:	683b      	ldr	r3, [r7, #0]
 800dde0:	681a      	ldr	r2, [r3, #0]
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	1ad2      	subs	r2, r2, r3
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800ddea:	6878      	ldr	r0, [r7, #4]
 800ddec:	f7ff ffa6 	bl	800dd3c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	617b      	str	r3, [r7, #20]
 800ddf4:	e004      	b.n	800de00 <xTaskCheckForTimeOut+0x98>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800ddf6:	683b      	ldr	r3, [r7, #0]
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800ddfc:	2301      	movs	r3, #1
 800ddfe:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 800de00:	f000 fe4e 	bl	800eaa0 <vPortExitCritical>

    return xReturn;
 800de04:	697b      	ldr	r3, [r7, #20]
}
 800de06:	4618      	mov	r0, r3
 800de08:	3718      	adds	r7, #24
 800de0a:	46bd      	mov	sp, r7
 800de0c:	bd80      	pop	{r7, pc}
 800de0e:	bf00      	nop
 800de10:	20046c60 	.word	0x20046c60
 800de14:	20046c74 	.word	0x20046c74

0800de18 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800de18:	b480      	push	{r7}
 800de1a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800de1c:	4b03      	ldr	r3, [pc, #12]	@ (800de2c <vTaskMissedYield+0x14>)
 800de1e:	2201      	movs	r2, #1
 800de20:	601a      	str	r2, [r3, #0]
}
 800de22:	bf00      	nop
 800de24:	46bd      	mov	sp, r7
 800de26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2a:	4770      	bx	lr
 800de2c:	20046c70 	.word	0x20046c70

0800de30 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b082      	sub	sp, #8
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800de38:	f000 f84a 	bl	800ded0 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800de3c:	4b03      	ldr	r3, [pc, #12]	@ (800de4c <prvIdleTask+0x1c>)
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	2b01      	cmp	r3, #1
 800de42:	d9f9      	bls.n	800de38 <prvIdleTask+0x8>
            {
                taskYIELD();
 800de44:	f000 fe08 	bl	800ea58 <vPortYield>
        prvCheckTasksWaitingTermination();
 800de48:	e7f6      	b.n	800de38 <prvIdleTask+0x8>
 800de4a:	bf00      	nop
 800de4c:	2004678c 	.word	0x2004678c

0800de50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800de50:	b580      	push	{r7, lr}
 800de52:	b082      	sub	sp, #8
 800de54:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800de56:	2300      	movs	r3, #0
 800de58:	607b      	str	r3, [r7, #4]
 800de5a:	e00c      	b.n	800de76 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800de5c:	687a      	ldr	r2, [r7, #4]
 800de5e:	4613      	mov	r3, r2
 800de60:	009b      	lsls	r3, r3, #2
 800de62:	4413      	add	r3, r2
 800de64:	009b      	lsls	r3, r3, #2
 800de66:	4a12      	ldr	r2, [pc, #72]	@ (800deb0 <prvInitialiseTaskLists+0x60>)
 800de68:	4413      	add	r3, r2
 800de6a:	4618      	mov	r0, r3
 800de6c:	f7fe f9c0 	bl	800c1f0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	3301      	adds	r3, #1
 800de74:	607b      	str	r3, [r7, #4]
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	2b37      	cmp	r3, #55	@ 0x37
 800de7a:	d9ef      	bls.n	800de5c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800de7c:	480d      	ldr	r0, [pc, #52]	@ (800deb4 <prvInitialiseTaskLists+0x64>)
 800de7e:	f7fe f9b7 	bl	800c1f0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800de82:	480d      	ldr	r0, [pc, #52]	@ (800deb8 <prvInitialiseTaskLists+0x68>)
 800de84:	f7fe f9b4 	bl	800c1f0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800de88:	480c      	ldr	r0, [pc, #48]	@ (800debc <prvInitialiseTaskLists+0x6c>)
 800de8a:	f7fe f9b1 	bl	800c1f0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800de8e:	480c      	ldr	r0, [pc, #48]	@ (800dec0 <prvInitialiseTaskLists+0x70>)
 800de90:	f7fe f9ae 	bl	800c1f0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800de94:	480b      	ldr	r0, [pc, #44]	@ (800dec4 <prvInitialiseTaskLists+0x74>)
 800de96:	f7fe f9ab 	bl	800c1f0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800de9a:	4b0b      	ldr	r3, [pc, #44]	@ (800dec8 <prvInitialiseTaskLists+0x78>)
 800de9c:	4a05      	ldr	r2, [pc, #20]	@ (800deb4 <prvInitialiseTaskLists+0x64>)
 800de9e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800dea0:	4b0a      	ldr	r3, [pc, #40]	@ (800decc <prvInitialiseTaskLists+0x7c>)
 800dea2:	4a05      	ldr	r2, [pc, #20]	@ (800deb8 <prvInitialiseTaskLists+0x68>)
 800dea4:	601a      	str	r2, [r3, #0]
}
 800dea6:	bf00      	nop
 800dea8:	3708      	adds	r7, #8
 800deaa:	46bd      	mov	sp, r7
 800deac:	bd80      	pop	{r7, pc}
 800deae:	bf00      	nop
 800deb0:	2004678c 	.word	0x2004678c
 800deb4:	20046bec 	.word	0x20046bec
 800deb8:	20046c00 	.word	0x20046c00
 800debc:	20046c1c 	.word	0x20046c1c
 800dec0:	20046c30 	.word	0x20046c30
 800dec4:	20046c48 	.word	0x20046c48
 800dec8:	20046c14 	.word	0x20046c14
 800decc:	20046c18 	.word	0x20046c18

0800ded0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b082      	sub	sp, #8
 800ded4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ded6:	e019      	b.n	800df0c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800ded8:	f000 fdd0 	bl	800ea7c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dedc:	4b10      	ldr	r3, [pc, #64]	@ (800df20 <prvCheckTasksWaitingTermination+0x50>)
 800dede:	68db      	ldr	r3, [r3, #12]
 800dee0:	68db      	ldr	r3, [r3, #12]
 800dee2:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	3304      	adds	r3, #4
 800dee8:	4618      	mov	r0, r3
 800deea:	f7fe f9e7 	bl	800c2bc <uxListRemove>
                --uxCurrentNumberOfTasks;
 800deee:	4b0d      	ldr	r3, [pc, #52]	@ (800df24 <prvCheckTasksWaitingTermination+0x54>)
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	3b01      	subs	r3, #1
 800def4:	4a0b      	ldr	r2, [pc, #44]	@ (800df24 <prvCheckTasksWaitingTermination+0x54>)
 800def6:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800def8:	4b0b      	ldr	r3, [pc, #44]	@ (800df28 <prvCheckTasksWaitingTermination+0x58>)
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	3b01      	subs	r3, #1
 800defe:	4a0a      	ldr	r2, [pc, #40]	@ (800df28 <prvCheckTasksWaitingTermination+0x58>)
 800df00:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800df02:	f000 fdcd 	bl	800eaa0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800df06:	6878      	ldr	r0, [r7, #4]
 800df08:	f000 f810 	bl	800df2c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800df0c:	4b06      	ldr	r3, [pc, #24]	@ (800df28 <prvCheckTasksWaitingTermination+0x58>)
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d1e1      	bne.n	800ded8 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800df14:	bf00      	nop
 800df16:	bf00      	nop
 800df18:	3708      	adds	r7, #8
 800df1a:	46bd      	mov	sp, r7
 800df1c:	bd80      	pop	{r7, pc}
 800df1e:	bf00      	nop
 800df20:	20046c30 	.word	0x20046c30
 800df24:	20046c5c 	.word	0x20046c5c
 800df28:	20046c44 	.word	0x20046c44

0800df2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b082      	sub	sp, #8
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d108      	bne.n	800df50 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df42:	4618      	mov	r0, r3
 800df44:	f001 f88c 	bl	800f060 <vPortFree>
                vPortFree( pxTCB );
 800df48:	6878      	ldr	r0, [r7, #4]
 800df4a:	f001 f889 	bl	800f060 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800df4e:	e011      	b.n	800df74 <prvDeleteTCB+0x48>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800df56:	2b01      	cmp	r3, #1
 800df58:	d103      	bne.n	800df62 <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 800df5a:	6878      	ldr	r0, [r7, #4]
 800df5c:	f001 f880 	bl	800f060 <vPortFree>
    }
 800df60:	e008      	b.n	800df74 <prvDeleteTCB+0x48>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800df68:	2b02      	cmp	r3, #2
 800df6a:	d003      	beq.n	800df74 <prvDeleteTCB+0x48>
 800df6c:	f000 ff54 	bl	800ee18 <ulSetInterruptMask>
 800df70:	bf00      	nop
 800df72:	e7fd      	b.n	800df70 <prvDeleteTCB+0x44>
    }
 800df74:	bf00      	nop
 800df76:	3708      	adds	r7, #8
 800df78:	46bd      	mov	sp, r7
 800df7a:	bd80      	pop	{r7, pc}

0800df7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800df7c:	b480      	push	{r7}
 800df7e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800df80:	4b0a      	ldr	r3, [pc, #40]	@ (800dfac <prvResetNextTaskUnblockTime+0x30>)
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d104      	bne.n	800df94 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800df8a:	4b09      	ldr	r3, [pc, #36]	@ (800dfb0 <prvResetNextTaskUnblockTime+0x34>)
 800df8c:	f04f 32ff 	mov.w	r2, #4294967295
 800df90:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800df92:	e005      	b.n	800dfa0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800df94:	4b05      	ldr	r3, [pc, #20]	@ (800dfac <prvResetNextTaskUnblockTime+0x30>)
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	68db      	ldr	r3, [r3, #12]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	4a04      	ldr	r2, [pc, #16]	@ (800dfb0 <prvResetNextTaskUnblockTime+0x34>)
 800df9e:	6013      	str	r3, [r2, #0]
}
 800dfa0:	bf00      	nop
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa8:	4770      	bx	lr
 800dfaa:	bf00      	nop
 800dfac:	20046c14 	.word	0x20046c14
 800dfb0:	20046c7c 	.word	0x20046c7c

0800dfb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800dfb4:	b480      	push	{r7}
 800dfb6:	b083      	sub	sp, #12
 800dfb8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800dfba:	4b0b      	ldr	r3, [pc, #44]	@ (800dfe8 <xTaskGetSchedulerState+0x34>)
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d102      	bne.n	800dfc8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800dfc2:	2301      	movs	r3, #1
 800dfc4:	607b      	str	r3, [r7, #4]
 800dfc6:	e008      	b.n	800dfda <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800dfc8:	4b08      	ldr	r3, [pc, #32]	@ (800dfec <xTaskGetSchedulerState+0x38>)
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d102      	bne.n	800dfd6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800dfd0:	2302      	movs	r3, #2
 800dfd2:	607b      	str	r3, [r7, #4]
 800dfd4:	e001      	b.n	800dfda <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800dfda:	687b      	ldr	r3, [r7, #4]
    }
 800dfdc:	4618      	mov	r0, r3
 800dfde:	370c      	adds	r7, #12
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe6:	4770      	bx	lr
 800dfe8:	20046c68 	.word	0x20046c68
 800dfec:	20046c84 	.word	0x20046c84

0800dff0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b086      	sub	sp, #24
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800dffc:	2300      	movs	r3, #0
 800dffe:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d079      	beq.n	800e0fa <xTaskPriorityInherit+0x10a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e006:	693b      	ldr	r3, [r7, #16]
 800e008:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e00a:	4b3e      	ldr	r3, [pc, #248]	@ (800e104 <xTaskPriorityInherit+0x114>)
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e010:	429a      	cmp	r2, r3
 800e012:	d269      	bcs.n	800e0e8 <xTaskPriorityInherit+0xf8>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e014:	693b      	ldr	r3, [r7, #16]
 800e016:	699b      	ldr	r3, [r3, #24]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	db06      	blt.n	800e02a <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e01c:	4b39      	ldr	r3, [pc, #228]	@ (800e104 <xTaskPriorityInherit+0x114>)
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e022:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e026:	693b      	ldr	r3, [r7, #16]
 800e028:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e02a:	693b      	ldr	r3, [r7, #16]
 800e02c:	6959      	ldr	r1, [r3, #20]
 800e02e:	693b      	ldr	r3, [r7, #16]
 800e030:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e032:	4613      	mov	r3, r2
 800e034:	009b      	lsls	r3, r3, #2
 800e036:	4413      	add	r3, r2
 800e038:	009b      	lsls	r3, r3, #2
 800e03a:	4a33      	ldr	r2, [pc, #204]	@ (800e108 <xTaskPriorityInherit+0x118>)
 800e03c:	4413      	add	r3, r2
 800e03e:	4299      	cmp	r1, r3
 800e040:	d14a      	bne.n	800e0d8 <xTaskPriorityInherit+0xe8>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e042:	693b      	ldr	r3, [r7, #16]
 800e044:	3304      	adds	r3, #4
 800e046:	4618      	mov	r0, r3
 800e048:	f7fe f938 	bl	800c2bc <uxListRemove>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e04c:	4b2d      	ldr	r3, [pc, #180]	@ (800e104 <xTaskPriorityInherit+0x114>)
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e052:	693b      	ldr	r3, [r7, #16]
 800e054:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800e056:	693b      	ldr	r3, [r7, #16]
 800e058:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e05a:	4b2c      	ldr	r3, [pc, #176]	@ (800e10c <xTaskPriorityInherit+0x11c>)
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	429a      	cmp	r2, r3
 800e060:	d903      	bls.n	800e06a <xTaskPriorityInherit+0x7a>
 800e062:	693b      	ldr	r3, [r7, #16]
 800e064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e066:	4a29      	ldr	r2, [pc, #164]	@ (800e10c <xTaskPriorityInherit+0x11c>)
 800e068:	6013      	str	r3, [r2, #0]
 800e06a:	693b      	ldr	r3, [r7, #16]
 800e06c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e06e:	4926      	ldr	r1, [pc, #152]	@ (800e108 <xTaskPriorityInherit+0x118>)
 800e070:	4613      	mov	r3, r2
 800e072:	009b      	lsls	r3, r3, #2
 800e074:	4413      	add	r3, r2
 800e076:	009b      	lsls	r3, r3, #2
 800e078:	440b      	add	r3, r1
 800e07a:	3304      	adds	r3, #4
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	60fb      	str	r3, [r7, #12]
 800e080:	693b      	ldr	r3, [r7, #16]
 800e082:	68fa      	ldr	r2, [r7, #12]
 800e084:	609a      	str	r2, [r3, #8]
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	689a      	ldr	r2, [r3, #8]
 800e08a:	693b      	ldr	r3, [r7, #16]
 800e08c:	60da      	str	r2, [r3, #12]
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	689b      	ldr	r3, [r3, #8]
 800e092:	693a      	ldr	r2, [r7, #16]
 800e094:	3204      	adds	r2, #4
 800e096:	605a      	str	r2, [r3, #4]
 800e098:	693b      	ldr	r3, [r7, #16]
 800e09a:	1d1a      	adds	r2, r3, #4
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	609a      	str	r2, [r3, #8]
 800e0a0:	693b      	ldr	r3, [r7, #16]
 800e0a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0a4:	4613      	mov	r3, r2
 800e0a6:	009b      	lsls	r3, r3, #2
 800e0a8:	4413      	add	r3, r2
 800e0aa:	009b      	lsls	r3, r3, #2
 800e0ac:	4a16      	ldr	r2, [pc, #88]	@ (800e108 <xTaskPriorityInherit+0x118>)
 800e0ae:	441a      	add	r2, r3
 800e0b0:	693b      	ldr	r3, [r7, #16]
 800e0b2:	615a      	str	r2, [r3, #20]
 800e0b4:	693b      	ldr	r3, [r7, #16]
 800e0b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0b8:	4913      	ldr	r1, [pc, #76]	@ (800e108 <xTaskPriorityInherit+0x118>)
 800e0ba:	4613      	mov	r3, r2
 800e0bc:	009b      	lsls	r3, r3, #2
 800e0be:	4413      	add	r3, r2
 800e0c0:	009b      	lsls	r3, r3, #2
 800e0c2:	440b      	add	r3, r1
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	1c59      	adds	r1, r3, #1
 800e0c8:	480f      	ldr	r0, [pc, #60]	@ (800e108 <xTaskPriorityInherit+0x118>)
 800e0ca:	4613      	mov	r3, r2
 800e0cc:	009b      	lsls	r3, r3, #2
 800e0ce:	4413      	add	r3, r2
 800e0d0:	009b      	lsls	r3, r3, #2
 800e0d2:	4403      	add	r3, r0
 800e0d4:	6019      	str	r1, [r3, #0]
 800e0d6:	e004      	b.n	800e0e2 <xTaskPriorityInherit+0xf2>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e0d8:	4b0a      	ldr	r3, [pc, #40]	@ (800e104 <xTaskPriorityInherit+0x114>)
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0de:	693b      	ldr	r3, [r7, #16]
 800e0e0:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800e0e2:	2301      	movs	r3, #1
 800e0e4:	617b      	str	r3, [r7, #20]
 800e0e6:	e008      	b.n	800e0fa <xTaskPriorityInherit+0x10a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e0e8:	693b      	ldr	r3, [r7, #16]
 800e0ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e0ec:	4b05      	ldr	r3, [pc, #20]	@ (800e104 <xTaskPriorityInherit+0x114>)
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0f2:	429a      	cmp	r2, r3
 800e0f4:	d201      	bcs.n	800e0fa <xTaskPriorityInherit+0x10a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800e0f6:	2301      	movs	r3, #1
 800e0f8:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800e0fa:	697b      	ldr	r3, [r7, #20]
    }
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	3718      	adds	r7, #24
 800e100:	46bd      	mov	sp, r7
 800e102:	bd80      	pop	{r7, pc}
 800e104:	20046788 	.word	0x20046788
 800e108:	2004678c 	.word	0x2004678c
 800e10c:	20046c64 	.word	0x20046c64

0800e110 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800e110:	b580      	push	{r7, lr}
 800e112:	b086      	sub	sp, #24
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800e11c:	2300      	movs	r3, #0
 800e11e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d070      	beq.n	800e208 <xTaskPriorityDisinherit+0xf8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800e126:	4b3b      	ldr	r3, [pc, #236]	@ (800e214 <xTaskPriorityDisinherit+0x104>)
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	693a      	ldr	r2, [r7, #16]
 800e12c:	429a      	cmp	r2, r3
 800e12e:	d003      	beq.n	800e138 <xTaskPriorityDisinherit+0x28>
 800e130:	f000 fe72 	bl	800ee18 <ulSetInterruptMask>
 800e134:	bf00      	nop
 800e136:	e7fd      	b.n	800e134 <xTaskPriorityDisinherit+0x24>
            configASSERT( pxTCB->uxMutexesHeld );
 800e138:	693b      	ldr	r3, [r7, #16]
 800e13a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d103      	bne.n	800e148 <xTaskPriorityDisinherit+0x38>
 800e140:	f000 fe6a 	bl	800ee18 <ulSetInterruptMask>
 800e144:	bf00      	nop
 800e146:	e7fd      	b.n	800e144 <xTaskPriorityDisinherit+0x34>
            ( pxTCB->uxMutexesHeld )--;
 800e148:	693b      	ldr	r3, [r7, #16]
 800e14a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e14c:	1e5a      	subs	r2, r3, #1
 800e14e:	693b      	ldr	r3, [r7, #16]
 800e150:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e152:	693b      	ldr	r3, [r7, #16]
 800e154:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e156:	693b      	ldr	r3, [r7, #16]
 800e158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e15a:	429a      	cmp	r2, r3
 800e15c:	d054      	beq.n	800e208 <xTaskPriorityDisinherit+0xf8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e15e:	693b      	ldr	r3, [r7, #16]
 800e160:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e162:	2b00      	cmp	r3, #0
 800e164:	d150      	bne.n	800e208 <xTaskPriorityDisinherit+0xf8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e166:	693b      	ldr	r3, [r7, #16]
 800e168:	3304      	adds	r3, #4
 800e16a:	4618      	mov	r0, r3
 800e16c:	f7fe f8a6 	bl	800c2bc <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e170:	693b      	ldr	r3, [r7, #16]
 800e172:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e174:	693b      	ldr	r3, [r7, #16]
 800e176:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e178:	693b      	ldr	r3, [r7, #16]
 800e17a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e17c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e180:	693b      	ldr	r3, [r7, #16]
 800e182:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800e184:	693b      	ldr	r3, [r7, #16]
 800e186:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e188:	4b23      	ldr	r3, [pc, #140]	@ (800e218 <xTaskPriorityDisinherit+0x108>)
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	429a      	cmp	r2, r3
 800e18e:	d903      	bls.n	800e198 <xTaskPriorityDisinherit+0x88>
 800e190:	693b      	ldr	r3, [r7, #16]
 800e192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e194:	4a20      	ldr	r2, [pc, #128]	@ (800e218 <xTaskPriorityDisinherit+0x108>)
 800e196:	6013      	str	r3, [r2, #0]
 800e198:	693b      	ldr	r3, [r7, #16]
 800e19a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e19c:	491f      	ldr	r1, [pc, #124]	@ (800e21c <xTaskPriorityDisinherit+0x10c>)
 800e19e:	4613      	mov	r3, r2
 800e1a0:	009b      	lsls	r3, r3, #2
 800e1a2:	4413      	add	r3, r2
 800e1a4:	009b      	lsls	r3, r3, #2
 800e1a6:	440b      	add	r3, r1
 800e1a8:	3304      	adds	r3, #4
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	60fb      	str	r3, [r7, #12]
 800e1ae:	693b      	ldr	r3, [r7, #16]
 800e1b0:	68fa      	ldr	r2, [r7, #12]
 800e1b2:	609a      	str	r2, [r3, #8]
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	689a      	ldr	r2, [r3, #8]
 800e1b8:	693b      	ldr	r3, [r7, #16]
 800e1ba:	60da      	str	r2, [r3, #12]
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	689b      	ldr	r3, [r3, #8]
 800e1c0:	693a      	ldr	r2, [r7, #16]
 800e1c2:	3204      	adds	r2, #4
 800e1c4:	605a      	str	r2, [r3, #4]
 800e1c6:	693b      	ldr	r3, [r7, #16]
 800e1c8:	1d1a      	adds	r2, r3, #4
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	609a      	str	r2, [r3, #8]
 800e1ce:	693b      	ldr	r3, [r7, #16]
 800e1d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1d2:	4613      	mov	r3, r2
 800e1d4:	009b      	lsls	r3, r3, #2
 800e1d6:	4413      	add	r3, r2
 800e1d8:	009b      	lsls	r3, r3, #2
 800e1da:	4a10      	ldr	r2, [pc, #64]	@ (800e21c <xTaskPriorityDisinherit+0x10c>)
 800e1dc:	441a      	add	r2, r3
 800e1de:	693b      	ldr	r3, [r7, #16]
 800e1e0:	615a      	str	r2, [r3, #20]
 800e1e2:	693b      	ldr	r3, [r7, #16]
 800e1e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1e6:	490d      	ldr	r1, [pc, #52]	@ (800e21c <xTaskPriorityDisinherit+0x10c>)
 800e1e8:	4613      	mov	r3, r2
 800e1ea:	009b      	lsls	r3, r3, #2
 800e1ec:	4413      	add	r3, r2
 800e1ee:	009b      	lsls	r3, r3, #2
 800e1f0:	440b      	add	r3, r1
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	1c59      	adds	r1, r3, #1
 800e1f6:	4809      	ldr	r0, [pc, #36]	@ (800e21c <xTaskPriorityDisinherit+0x10c>)
 800e1f8:	4613      	mov	r3, r2
 800e1fa:	009b      	lsls	r3, r3, #2
 800e1fc:	4413      	add	r3, r2
 800e1fe:	009b      	lsls	r3, r3, #2
 800e200:	4403      	add	r3, r0
 800e202:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800e204:	2301      	movs	r3, #1
 800e206:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800e208:	697b      	ldr	r3, [r7, #20]
    }
 800e20a:	4618      	mov	r0, r3
 800e20c:	3718      	adds	r7, #24
 800e20e:	46bd      	mov	sp, r7
 800e210:	bd80      	pop	{r7, pc}
 800e212:	bf00      	nop
 800e214:	20046788 	.word	0x20046788
 800e218:	20046c64 	.word	0x20046c64
 800e21c:	2004678c 	.word	0x2004678c

0800e220 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800e220:	b580      	push	{r7, lr}
 800e222:	b088      	sub	sp, #32
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
 800e228:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e22e:	2301      	movs	r3, #1
 800e230:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	2b00      	cmp	r3, #0
 800e236:	f000 8085 	beq.w	800e344 <vTaskPriorityDisinheritAfterTimeout+0x124>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800e23a:	69bb      	ldr	r3, [r7, #24]
 800e23c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d103      	bne.n	800e24a <vTaskPriorityDisinheritAfterTimeout+0x2a>
 800e242:	f000 fde9 	bl	800ee18 <ulSetInterruptMask>
 800e246:	bf00      	nop
 800e248:	e7fd      	b.n	800e246 <vTaskPriorityDisinheritAfterTimeout+0x26>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e24a:	69bb      	ldr	r3, [r7, #24]
 800e24c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e24e:	683a      	ldr	r2, [r7, #0]
 800e250:	429a      	cmp	r2, r3
 800e252:	d902      	bls.n	800e25a <vTaskPriorityDisinheritAfterTimeout+0x3a>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e254:	683b      	ldr	r3, [r7, #0]
 800e256:	61fb      	str	r3, [r7, #28]
 800e258:	e002      	b.n	800e260 <vTaskPriorityDisinheritAfterTimeout+0x40>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800e25a:	69bb      	ldr	r3, [r7, #24]
 800e25c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e25e:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800e260:	69bb      	ldr	r3, [r7, #24]
 800e262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e264:	69fa      	ldr	r2, [r7, #28]
 800e266:	429a      	cmp	r2, r3
 800e268:	d06c      	beq.n	800e344 <vTaskPriorityDisinheritAfterTimeout+0x124>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e26a:	69bb      	ldr	r3, [r7, #24]
 800e26c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e26e:	697a      	ldr	r2, [r7, #20]
 800e270:	429a      	cmp	r2, r3
 800e272:	d167      	bne.n	800e344 <vTaskPriorityDisinheritAfterTimeout+0x124>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800e274:	4b35      	ldr	r3, [pc, #212]	@ (800e34c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	69ba      	ldr	r2, [r7, #24]
 800e27a:	429a      	cmp	r2, r3
 800e27c:	d103      	bne.n	800e286 <vTaskPriorityDisinheritAfterTimeout+0x66>
 800e27e:	f000 fdcb 	bl	800ee18 <ulSetInterruptMask>
 800e282:	bf00      	nop
 800e284:	e7fd      	b.n	800e282 <vTaskPriorityDisinheritAfterTimeout+0x62>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e286:	69bb      	ldr	r3, [r7, #24]
 800e288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e28a:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 800e28c:	69bb      	ldr	r3, [r7, #24]
 800e28e:	69fa      	ldr	r2, [r7, #28]
 800e290:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e292:	69bb      	ldr	r3, [r7, #24]
 800e294:	699b      	ldr	r3, [r3, #24]
 800e296:	2b00      	cmp	r3, #0
 800e298:	db04      	blt.n	800e2a4 <vTaskPriorityDisinheritAfterTimeout+0x84>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e29a:	69fb      	ldr	r3, [r7, #28]
 800e29c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e2a0:	69bb      	ldr	r3, [r7, #24]
 800e2a2:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e2a4:	69bb      	ldr	r3, [r7, #24]
 800e2a6:	6959      	ldr	r1, [r3, #20]
 800e2a8:	693a      	ldr	r2, [r7, #16]
 800e2aa:	4613      	mov	r3, r2
 800e2ac:	009b      	lsls	r3, r3, #2
 800e2ae:	4413      	add	r3, r2
 800e2b0:	009b      	lsls	r3, r3, #2
 800e2b2:	4a27      	ldr	r2, [pc, #156]	@ (800e350 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e2b4:	4413      	add	r3, r2
 800e2b6:	4299      	cmp	r1, r3
 800e2b8:	d144      	bne.n	800e344 <vTaskPriorityDisinheritAfterTimeout+0x124>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e2ba:	69bb      	ldr	r3, [r7, #24]
 800e2bc:	3304      	adds	r3, #4
 800e2be:	4618      	mov	r0, r3
 800e2c0:	f7fd fffc 	bl	800c2bc <uxListRemove>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800e2c4:	69bb      	ldr	r3, [r7, #24]
 800e2c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2c8:	4b22      	ldr	r3, [pc, #136]	@ (800e354 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	429a      	cmp	r2, r3
 800e2ce:	d903      	bls.n	800e2d8 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800e2d0:	69bb      	ldr	r3, [r7, #24]
 800e2d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2d4:	4a1f      	ldr	r2, [pc, #124]	@ (800e354 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e2d6:	6013      	str	r3, [r2, #0]
 800e2d8:	69bb      	ldr	r3, [r7, #24]
 800e2da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2dc:	491c      	ldr	r1, [pc, #112]	@ (800e350 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e2de:	4613      	mov	r3, r2
 800e2e0:	009b      	lsls	r3, r3, #2
 800e2e2:	4413      	add	r3, r2
 800e2e4:	009b      	lsls	r3, r3, #2
 800e2e6:	440b      	add	r3, r1
 800e2e8:	3304      	adds	r3, #4
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	60fb      	str	r3, [r7, #12]
 800e2ee:	69bb      	ldr	r3, [r7, #24]
 800e2f0:	68fa      	ldr	r2, [r7, #12]
 800e2f2:	609a      	str	r2, [r3, #8]
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	689a      	ldr	r2, [r3, #8]
 800e2f8:	69bb      	ldr	r3, [r7, #24]
 800e2fa:	60da      	str	r2, [r3, #12]
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	689b      	ldr	r3, [r3, #8]
 800e300:	69ba      	ldr	r2, [r7, #24]
 800e302:	3204      	adds	r2, #4
 800e304:	605a      	str	r2, [r3, #4]
 800e306:	69bb      	ldr	r3, [r7, #24]
 800e308:	1d1a      	adds	r2, r3, #4
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	609a      	str	r2, [r3, #8]
 800e30e:	69bb      	ldr	r3, [r7, #24]
 800e310:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e312:	4613      	mov	r3, r2
 800e314:	009b      	lsls	r3, r3, #2
 800e316:	4413      	add	r3, r2
 800e318:	009b      	lsls	r3, r3, #2
 800e31a:	4a0d      	ldr	r2, [pc, #52]	@ (800e350 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e31c:	441a      	add	r2, r3
 800e31e:	69bb      	ldr	r3, [r7, #24]
 800e320:	615a      	str	r2, [r3, #20]
 800e322:	69bb      	ldr	r3, [r7, #24]
 800e324:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e326:	490a      	ldr	r1, [pc, #40]	@ (800e350 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e328:	4613      	mov	r3, r2
 800e32a:	009b      	lsls	r3, r3, #2
 800e32c:	4413      	add	r3, r2
 800e32e:	009b      	lsls	r3, r3, #2
 800e330:	440b      	add	r3, r1
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	1c59      	adds	r1, r3, #1
 800e336:	4806      	ldr	r0, [pc, #24]	@ (800e350 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e338:	4613      	mov	r3, r2
 800e33a:	009b      	lsls	r3, r3, #2
 800e33c:	4413      	add	r3, r2
 800e33e:	009b      	lsls	r3, r3, #2
 800e340:	4403      	add	r3, r0
 800e342:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800e344:	bf00      	nop
 800e346:	3720      	adds	r7, #32
 800e348:	46bd      	mov	sp, r7
 800e34a:	bd80      	pop	{r7, pc}
 800e34c:	20046788 	.word	0x20046788
 800e350:	2004678c 	.word	0x2004678c
 800e354:	20046c64 	.word	0x20046c64

0800e358 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800e358:	b480      	push	{r7}
 800e35a:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 800e35c:	4b07      	ldr	r3, [pc, #28]	@ (800e37c <pvTaskIncrementMutexHeldCount+0x24>)
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d004      	beq.n	800e36e <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 800e364:	4b05      	ldr	r3, [pc, #20]	@ (800e37c <pvTaskIncrementMutexHeldCount+0x24>)
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e36a:	3201      	adds	r2, #1
 800e36c:	651a      	str	r2, [r3, #80]	@ 0x50
        }

        return pxCurrentTCB;
 800e36e:	4b03      	ldr	r3, [pc, #12]	@ (800e37c <pvTaskIncrementMutexHeldCount+0x24>)
 800e370:	681b      	ldr	r3, [r3, #0]
    }
 800e372:	4618      	mov	r0, r3
 800e374:	46bd      	mov	sp, r7
 800e376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37a:	4770      	bx	lr
 800e37c:	20046788 	.word	0x20046788

0800e380 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b086      	sub	sp, #24
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
 800e388:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800e38a:	4b2e      	ldr	r3, [pc, #184]	@ (800e444 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e390:	4b2d      	ldr	r3, [pc, #180]	@ (800e448 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	3304      	adds	r3, #4
 800e396:	4618      	mov	r0, r3
 800e398:	f7fd ff90 	bl	800c2bc <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3a2:	d124      	bne.n	800e3ee <prvAddCurrentTaskToDelayedList+0x6e>
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d021      	beq.n	800e3ee <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e3aa:	4b28      	ldr	r3, [pc, #160]	@ (800e44c <prvAddCurrentTaskToDelayedList+0xcc>)
 800e3ac:	685b      	ldr	r3, [r3, #4]
 800e3ae:	613b      	str	r3, [r7, #16]
 800e3b0:	4b25      	ldr	r3, [pc, #148]	@ (800e448 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	693a      	ldr	r2, [r7, #16]
 800e3b6:	609a      	str	r2, [r3, #8]
 800e3b8:	4b23      	ldr	r3, [pc, #140]	@ (800e448 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	693a      	ldr	r2, [r7, #16]
 800e3be:	6892      	ldr	r2, [r2, #8]
 800e3c0:	60da      	str	r2, [r3, #12]
 800e3c2:	4b21      	ldr	r3, [pc, #132]	@ (800e448 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e3c4:	681a      	ldr	r2, [r3, #0]
 800e3c6:	693b      	ldr	r3, [r7, #16]
 800e3c8:	689b      	ldr	r3, [r3, #8]
 800e3ca:	3204      	adds	r2, #4
 800e3cc:	605a      	str	r2, [r3, #4]
 800e3ce:	4b1e      	ldr	r3, [pc, #120]	@ (800e448 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	1d1a      	adds	r2, r3, #4
 800e3d4:	693b      	ldr	r3, [r7, #16]
 800e3d6:	609a      	str	r2, [r3, #8]
 800e3d8:	4b1b      	ldr	r3, [pc, #108]	@ (800e448 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	4a1b      	ldr	r2, [pc, #108]	@ (800e44c <prvAddCurrentTaskToDelayedList+0xcc>)
 800e3de:	615a      	str	r2, [r3, #20]
 800e3e0:	4b1a      	ldr	r3, [pc, #104]	@ (800e44c <prvAddCurrentTaskToDelayedList+0xcc>)
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	3301      	adds	r3, #1
 800e3e6:	4a19      	ldr	r2, [pc, #100]	@ (800e44c <prvAddCurrentTaskToDelayedList+0xcc>)
 800e3e8:	6013      	str	r3, [r2, #0]
 800e3ea:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800e3ec:	e026      	b.n	800e43c <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800e3ee:	697a      	ldr	r2, [r7, #20]
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	4413      	add	r3, r2
 800e3f4:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e3f6:	4b14      	ldr	r3, [pc, #80]	@ (800e448 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	68fa      	ldr	r2, [r7, #12]
 800e3fc:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800e3fe:	68fa      	ldr	r2, [r7, #12]
 800e400:	697b      	ldr	r3, [r7, #20]
 800e402:	429a      	cmp	r2, r3
 800e404:	d209      	bcs.n	800e41a <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e406:	4b12      	ldr	r3, [pc, #72]	@ (800e450 <prvAddCurrentTaskToDelayedList+0xd0>)
 800e408:	681a      	ldr	r2, [r3, #0]
 800e40a:	4b0f      	ldr	r3, [pc, #60]	@ (800e448 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	3304      	adds	r3, #4
 800e410:	4619      	mov	r1, r3
 800e412:	4610      	mov	r0, r2
 800e414:	f7fd ff19 	bl	800c24a <vListInsert>
}
 800e418:	e010      	b.n	800e43c <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e41a:	4b0e      	ldr	r3, [pc, #56]	@ (800e454 <prvAddCurrentTaskToDelayedList+0xd4>)
 800e41c:	681a      	ldr	r2, [r3, #0]
 800e41e:	4b0a      	ldr	r3, [pc, #40]	@ (800e448 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	3304      	adds	r3, #4
 800e424:	4619      	mov	r1, r3
 800e426:	4610      	mov	r0, r2
 800e428:	f7fd ff0f 	bl	800c24a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800e42c:	4b0a      	ldr	r3, [pc, #40]	@ (800e458 <prvAddCurrentTaskToDelayedList+0xd8>)
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	68fa      	ldr	r2, [r7, #12]
 800e432:	429a      	cmp	r2, r3
 800e434:	d202      	bcs.n	800e43c <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 800e436:	4a08      	ldr	r2, [pc, #32]	@ (800e458 <prvAddCurrentTaskToDelayedList+0xd8>)
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	6013      	str	r3, [r2, #0]
}
 800e43c:	bf00      	nop
 800e43e:	3718      	adds	r7, #24
 800e440:	46bd      	mov	sp, r7
 800e442:	bd80      	pop	{r7, pc}
 800e444:	20046c60 	.word	0x20046c60
 800e448:	20046788 	.word	0x20046788
 800e44c:	20046c48 	.word	0x20046c48
 800e450:	20046c18 	.word	0x20046c18
 800e454:	20046c14 	.word	0x20046c14
 800e458:	20046c7c 	.word	0x20046c7c

0800e45c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b088      	sub	sp, #32
 800e460:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 800e462:	2300      	movs	r3, #0
 800e464:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800e466:	f000 fa5f 	bl	800e928 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800e46a:	4b18      	ldr	r3, [pc, #96]	@ (800e4cc <xTimerCreateTimerTask+0x70>)
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d020      	beq.n	800e4b4 <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800e472:	2300      	movs	r3, #0
 800e474:	60bb      	str	r3, [r7, #8]
                StackType_t * pxTimerTaskStackBuffer = NULL;
 800e476:	2300      	movs	r3, #0
 800e478:	607b      	str	r3, [r7, #4]
                uint32_t ulTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e47a:	463a      	mov	r2, r7
 800e47c:	1d39      	adds	r1, r7, #4
 800e47e:	f107 0308 	add.w	r3, r7, #8
 800e482:	4618      	mov	r0, r3
 800e484:	f7fd fe9a 	bl	800c1bc <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 800e488:	6839      	ldr	r1, [r7, #0]
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	68ba      	ldr	r2, [r7, #8]
 800e48e:	9202      	str	r2, [sp, #8]
 800e490:	9301      	str	r3, [sp, #4]
 800e492:	2302      	movs	r3, #2
 800e494:	9300      	str	r3, [sp, #0]
 800e496:	2300      	movs	r3, #0
 800e498:	460a      	mov	r2, r1
 800e49a:	490d      	ldr	r1, [pc, #52]	@ (800e4d0 <xTimerCreateTimerTask+0x74>)
 800e49c:	480d      	ldr	r0, [pc, #52]	@ (800e4d4 <xTimerCreateTimerTask+0x78>)
 800e49e:	f7fe fe7b 	bl	800d198 <xTaskCreateStatic>
 800e4a2:	4603      	mov	r3, r0
 800e4a4:	4a0c      	ldr	r2, [pc, #48]	@ (800e4d8 <xTimerCreateTimerTask+0x7c>)
 800e4a6:	6013      	str	r3, [r2, #0]
                                                      NULL,
                                                      ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                      pxTimerTaskStackBuffer,
                                                      pxTimerTaskTCBBuffer );

                if( xTimerTaskHandle != NULL )
 800e4a8:	4b0b      	ldr	r3, [pc, #44]	@ (800e4d8 <xTimerCreateTimerTask+0x7c>)
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d001      	beq.n	800e4b4 <xTimerCreateTimerTask+0x58>
                {
                    xReturn = pdPASS;
 800e4b0:	2301      	movs	r3, #1
 800e4b2:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d103      	bne.n	800e4c2 <xTimerCreateTimerTask+0x66>
 800e4ba:	f000 fcad 	bl	800ee18 <ulSetInterruptMask>
 800e4be:	bf00      	nop
 800e4c0:	e7fd      	b.n	800e4be <xTimerCreateTimerTask+0x62>
        return xReturn;
 800e4c2:	68fb      	ldr	r3, [r7, #12]
    }
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	3710      	adds	r7, #16
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	bd80      	pop	{r7, pc}
 800e4cc:	20046cb8 	.word	0x20046cb8
 800e4d0:	0802dd10 	.word	0x0802dd10
 800e4d4:	0800e581 	.word	0x0800e581
 800e4d8:	20046cbc 	.word	0x20046cbc

0800e4dc <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b084      	sub	sp, #16
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	60f8      	str	r0, [r7, #12]
 800e4e4:	60b9      	str	r1, [r7, #8]
 800e4e6:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800e4e8:	e008      	b.n	800e4fc <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	699b      	ldr	r3, [r3, #24]
 800e4ee:	68ba      	ldr	r2, [r7, #8]
 800e4f0:	4413      	add	r3, r2
 800e4f2:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	6a1b      	ldr	r3, [r3, #32]
 800e4f8:	68f8      	ldr	r0, [r7, #12]
 800e4fa:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	699a      	ldr	r2, [r3, #24]
 800e500:	68bb      	ldr	r3, [r7, #8]
 800e502:	18d1      	adds	r1, r2, r3
 800e504:	68bb      	ldr	r3, [r7, #8]
 800e506:	687a      	ldr	r2, [r7, #4]
 800e508:	68f8      	ldr	r0, [r7, #12]
 800e50a:	f000 f8d7 	bl	800e6bc <prvInsertTimerInActiveList>
 800e50e:	4603      	mov	r3, r0
 800e510:	2b00      	cmp	r3, #0
 800e512:	d1ea      	bne.n	800e4ea <prvReloadTimer+0xe>
        }
    }
 800e514:	bf00      	nop
 800e516:	bf00      	nop
 800e518:	3710      	adds	r7, #16
 800e51a:	46bd      	mov	sp, r7
 800e51c:	bd80      	pop	{r7, pc}
	...

0800e520 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800e520:	b580      	push	{r7, lr}
 800e522:	b084      	sub	sp, #16
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
 800e528:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e52a:	4b14      	ldr	r3, [pc, #80]	@ (800e57c <prvProcessExpiredTimer+0x5c>)
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	68db      	ldr	r3, [r3, #12]
 800e530:	68db      	ldr	r3, [r3, #12]
 800e532:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	3304      	adds	r3, #4
 800e538:	4618      	mov	r0, r3
 800e53a:	f7fd febf 	bl	800c2bc <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e544:	f003 0304 	and.w	r3, r3, #4
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d005      	beq.n	800e558 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800e54c:	683a      	ldr	r2, [r7, #0]
 800e54e:	6879      	ldr	r1, [r7, #4]
 800e550:	68f8      	ldr	r0, [r7, #12]
 800e552:	f7ff ffc3 	bl	800e4dc <prvReloadTimer>
 800e556:	e008      	b.n	800e56a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e55e:	f023 0301 	bic.w	r3, r3, #1
 800e562:	b2da      	uxtb	r2, r3
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	6a1b      	ldr	r3, [r3, #32]
 800e56e:	68f8      	ldr	r0, [r7, #12]
 800e570:	4798      	blx	r3
    }
 800e572:	bf00      	nop
 800e574:	3710      	adds	r7, #16
 800e576:	46bd      	mov	sp, r7
 800e578:	bd80      	pop	{r7, pc}
 800e57a:	bf00      	nop
 800e57c:	20046cb0 	.word	0x20046cb0

0800e580 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800e580:	b580      	push	{r7, lr}
 800e582:	b084      	sub	sp, #16
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e588:	f107 0308 	add.w	r3, r7, #8
 800e58c:	4618      	mov	r0, r3
 800e58e:	f000 f851 	bl	800e634 <prvGetNextExpireTime>
 800e592:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e594:	68bb      	ldr	r3, [r7, #8]
 800e596:	4619      	mov	r1, r3
 800e598:	68f8      	ldr	r0, [r7, #12]
 800e59a:	f000 f805 	bl	800e5a8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800e59e:	f000 f8cf 	bl	800e740 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e5a2:	bf00      	nop
 800e5a4:	e7f0      	b.n	800e588 <prvTimerTask+0x8>
	...

0800e5a8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b084      	sub	sp, #16
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
 800e5b0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800e5b2:	f7ff f81d 	bl	800d5f0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e5b6:	f107 0308 	add.w	r3, r7, #8
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	f000 f85e 	bl	800e67c <prvSampleTimeNow>
 800e5c0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800e5c2:	68bb      	ldr	r3, [r7, #8]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d12a      	bne.n	800e61e <prvProcessTimerOrBlockTask+0x76>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e5c8:	683b      	ldr	r3, [r7, #0]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d10a      	bne.n	800e5e4 <prvProcessTimerOrBlockTask+0x3c>
 800e5ce:	687a      	ldr	r2, [r7, #4]
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	429a      	cmp	r2, r3
 800e5d4:	d806      	bhi.n	800e5e4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800e5d6:	f7ff f819 	bl	800d60c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e5da:	68f9      	ldr	r1, [r7, #12]
 800e5dc:	6878      	ldr	r0, [r7, #4]
 800e5de:	f7ff ff9f 	bl	800e520 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800e5e2:	e01e      	b.n	800e622 <prvProcessTimerOrBlockTask+0x7a>
                    if( xListWasEmpty != pdFALSE )
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d008      	beq.n	800e5fc <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e5ea:	4b10      	ldr	r3, [pc, #64]	@ (800e62c <prvProcessTimerOrBlockTask+0x84>)
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d101      	bne.n	800e5f8 <prvProcessTimerOrBlockTask+0x50>
 800e5f4:	2301      	movs	r3, #1
 800e5f6:	e000      	b.n	800e5fa <prvProcessTimerOrBlockTask+0x52>
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e5fc:	4b0c      	ldr	r3, [pc, #48]	@ (800e630 <prvProcessTimerOrBlockTask+0x88>)
 800e5fe:	6818      	ldr	r0, [r3, #0]
 800e600:	687a      	ldr	r2, [r7, #4]
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	1ad3      	subs	r3, r2, r3
 800e606:	683a      	ldr	r2, [r7, #0]
 800e608:	4619      	mov	r1, r3
 800e60a:	f7fe fd91 	bl	800d130 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800e60e:	f7fe fffd 	bl	800d60c <xTaskResumeAll>
 800e612:	4603      	mov	r3, r0
 800e614:	2b00      	cmp	r3, #0
 800e616:	d104      	bne.n	800e622 <prvProcessTimerOrBlockTask+0x7a>
                        portYIELD_WITHIN_API();
 800e618:	f000 fa1e 	bl	800ea58 <vPortYield>
    }
 800e61c:	e001      	b.n	800e622 <prvProcessTimerOrBlockTask+0x7a>
                ( void ) xTaskResumeAll();
 800e61e:	f7fe fff5 	bl	800d60c <xTaskResumeAll>
    }
 800e622:	bf00      	nop
 800e624:	3710      	adds	r7, #16
 800e626:	46bd      	mov	sp, r7
 800e628:	bd80      	pop	{r7, pc}
 800e62a:	bf00      	nop
 800e62c:	20046cb4 	.word	0x20046cb4
 800e630:	20046cb8 	.word	0x20046cb8

0800e634 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800e634:	b480      	push	{r7}
 800e636:	b085      	sub	sp, #20
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e63c:	4b0e      	ldr	r3, [pc, #56]	@ (800e678 <prvGetNextExpireTime+0x44>)
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d101      	bne.n	800e64a <prvGetNextExpireTime+0x16>
 800e646:	2201      	movs	r2, #1
 800e648:	e000      	b.n	800e64c <prvGetNextExpireTime+0x18>
 800e64a:	2200      	movs	r2, #0
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d105      	bne.n	800e664 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e658:	4b07      	ldr	r3, [pc, #28]	@ (800e678 <prvGetNextExpireTime+0x44>)
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	68db      	ldr	r3, [r3, #12]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	60fb      	str	r3, [r7, #12]
 800e662:	e001      	b.n	800e668 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800e664:	2300      	movs	r3, #0
 800e666:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800e668:	68fb      	ldr	r3, [r7, #12]
    }
 800e66a:	4618      	mov	r0, r3
 800e66c:	3714      	adds	r7, #20
 800e66e:	46bd      	mov	sp, r7
 800e670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e674:	4770      	bx	lr
 800e676:	bf00      	nop
 800e678:	20046cb0 	.word	0x20046cb0

0800e67c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b084      	sub	sp, #16
 800e680:	af00      	add	r7, sp, #0
 800e682:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800e684:	f7ff f8b0 	bl	800d7e8 <xTaskGetTickCount>
 800e688:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800e68a:	4b0b      	ldr	r3, [pc, #44]	@ (800e6b8 <prvSampleTimeNow+0x3c>)
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	68fa      	ldr	r2, [r7, #12]
 800e690:	429a      	cmp	r2, r3
 800e692:	d205      	bcs.n	800e6a0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800e694:	f000 f922 	bl	800e8dc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	2201      	movs	r2, #1
 800e69c:	601a      	str	r2, [r3, #0]
 800e69e:	e002      	b.n	800e6a6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800e6a6:	4a04      	ldr	r2, [pc, #16]	@ (800e6b8 <prvSampleTimeNow+0x3c>)
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800e6ac:	68fb      	ldr	r3, [r7, #12]
    }
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	3710      	adds	r7, #16
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	bd80      	pop	{r7, pc}
 800e6b6:	bf00      	nop
 800e6b8:	20046cc0 	.word	0x20046cc0

0800e6bc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b086      	sub	sp, #24
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	60f8      	str	r0, [r7, #12]
 800e6c4:	60b9      	str	r1, [r7, #8]
 800e6c6:	607a      	str	r2, [r7, #4]
 800e6c8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	68ba      	ldr	r2, [r7, #8]
 800e6d2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	68fa      	ldr	r2, [r7, #12]
 800e6d8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800e6da:	68ba      	ldr	r2, [r7, #8]
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	429a      	cmp	r2, r3
 800e6e0:	d812      	bhi.n	800e708 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e6e2:	687a      	ldr	r2, [r7, #4]
 800e6e4:	683b      	ldr	r3, [r7, #0]
 800e6e6:	1ad2      	subs	r2, r2, r3
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	699b      	ldr	r3, [r3, #24]
 800e6ec:	429a      	cmp	r2, r3
 800e6ee:	d302      	bcc.n	800e6f6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800e6f0:	2301      	movs	r3, #1
 800e6f2:	617b      	str	r3, [r7, #20]
 800e6f4:	e01b      	b.n	800e72e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e6f6:	4b10      	ldr	r3, [pc, #64]	@ (800e738 <prvInsertTimerInActiveList+0x7c>)
 800e6f8:	681a      	ldr	r2, [r3, #0]
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	3304      	adds	r3, #4
 800e6fe:	4619      	mov	r1, r3
 800e700:	4610      	mov	r0, r2
 800e702:	f7fd fda2 	bl	800c24a <vListInsert>
 800e706:	e012      	b.n	800e72e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e708:	687a      	ldr	r2, [r7, #4]
 800e70a:	683b      	ldr	r3, [r7, #0]
 800e70c:	429a      	cmp	r2, r3
 800e70e:	d206      	bcs.n	800e71e <prvInsertTimerInActiveList+0x62>
 800e710:	68ba      	ldr	r2, [r7, #8]
 800e712:	683b      	ldr	r3, [r7, #0]
 800e714:	429a      	cmp	r2, r3
 800e716:	d302      	bcc.n	800e71e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800e718:	2301      	movs	r3, #1
 800e71a:	617b      	str	r3, [r7, #20]
 800e71c:	e007      	b.n	800e72e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e71e:	4b07      	ldr	r3, [pc, #28]	@ (800e73c <prvInsertTimerInActiveList+0x80>)
 800e720:	681a      	ldr	r2, [r3, #0]
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	3304      	adds	r3, #4
 800e726:	4619      	mov	r1, r3
 800e728:	4610      	mov	r0, r2
 800e72a:	f7fd fd8e 	bl	800c24a <vListInsert>
            }
        }

        return xProcessTimerNow;
 800e72e:	697b      	ldr	r3, [r7, #20]
    }
 800e730:	4618      	mov	r0, r3
 800e732:	3718      	adds	r7, #24
 800e734:	46bd      	mov	sp, r7
 800e736:	bd80      	pop	{r7, pc}
 800e738:	20046cb4 	.word	0x20046cb4
 800e73c:	20046cb0 	.word	0x20046cb0

0800e740 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800e740:	b580      	push	{r7, lr}
 800e742:	b088      	sub	sp, #32
 800e744:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e746:	e0b7      	b.n	800e8b8 <prvProcessReceivedCommands+0x178>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	da11      	bge.n	800e772 <prvProcessReceivedCommands+0x32>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e74e:	1d3b      	adds	r3, r7, #4
 800e750:	3304      	adds	r3, #4
 800e752:	61fb      	str	r3, [r7, #28]

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 800e754:	69fb      	ldr	r3, [r7, #28]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d103      	bne.n	800e762 <prvProcessReceivedCommands+0x22>
 800e75a:	f000 fb5d 	bl	800ee18 <ulSetInterruptMask>
 800e75e:	bf00      	nop
 800e760:	e7fd      	b.n	800e75e <prvProcessReceivedCommands+0x1e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e762:	69fb      	ldr	r3, [r7, #28]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	69fa      	ldr	r2, [r7, #28]
 800e768:	6850      	ldr	r0, [r2, #4]
 800e76a:	69fa      	ldr	r2, [r7, #28]
 800e76c:	6892      	ldr	r2, [r2, #8]
 800e76e:	4611      	mov	r1, r2
 800e770:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	2b00      	cmp	r3, #0
 800e776:	f2c0 809f 	blt.w	800e8b8 <prvProcessReceivedCommands+0x178>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e77e:	69bb      	ldr	r3, [r7, #24]
 800e780:	695b      	ldr	r3, [r3, #20]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d004      	beq.n	800e790 <prvProcessReceivedCommands+0x50>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e786:	69bb      	ldr	r3, [r7, #24]
 800e788:	3304      	adds	r3, #4
 800e78a:	4618      	mov	r0, r3
 800e78c:	f7fd fd96 	bl	800c2bc <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e790:	463b      	mov	r3, r7
 800e792:	4618      	mov	r0, r3
 800e794:	f7ff ff72 	bl	800e67c <prvSampleTimeNow>
 800e798:	6178      	str	r0, [r7, #20]

                switch( xMessage.xMessageID )
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	3b01      	subs	r3, #1
 800e79e:	2b08      	cmp	r3, #8
 800e7a0:	f200 8087 	bhi.w	800e8b2 <prvProcessReceivedCommands+0x172>
 800e7a4:	a201      	add	r2, pc, #4	@ (adr r2, 800e7ac <prvProcessReceivedCommands+0x6c>)
 800e7a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7aa:	bf00      	nop
 800e7ac:	0800e7d1 	.word	0x0800e7d1
 800e7b0:	0800e7d1 	.word	0x0800e7d1
 800e7b4:	0800e839 	.word	0x0800e839
 800e7b8:	0800e84d 	.word	0x0800e84d
 800e7bc:	0800e889 	.word	0x0800e889
 800e7c0:	0800e7d1 	.word	0x0800e7d1
 800e7c4:	0800e7d1 	.word	0x0800e7d1
 800e7c8:	0800e839 	.word	0x0800e839
 800e7cc:	0800e84d 	.word	0x0800e84d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e7d0:	69bb      	ldr	r3, [r7, #24]
 800e7d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e7d6:	f043 0301 	orr.w	r3, r3, #1
 800e7da:	b2da      	uxtb	r2, r3
 800e7dc:	69bb      	ldr	r3, [r7, #24]
 800e7de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e7e2:	68ba      	ldr	r2, [r7, #8]
 800e7e4:	69bb      	ldr	r3, [r7, #24]
 800e7e6:	699b      	ldr	r3, [r3, #24]
 800e7e8:	18d1      	adds	r1, r2, r3
 800e7ea:	68bb      	ldr	r3, [r7, #8]
 800e7ec:	697a      	ldr	r2, [r7, #20]
 800e7ee:	69b8      	ldr	r0, [r7, #24]
 800e7f0:	f7ff ff64 	bl	800e6bc <prvInsertTimerInActiveList>
 800e7f4:	4603      	mov	r3, r0
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d05d      	beq.n	800e8b6 <prvProcessReceivedCommands+0x176>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e7fa:	69bb      	ldr	r3, [r7, #24]
 800e7fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e800:	f003 0304 	and.w	r3, r3, #4
 800e804:	2b00      	cmp	r3, #0
 800e806:	d009      	beq.n	800e81c <prvProcessReceivedCommands+0xdc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800e808:	68ba      	ldr	r2, [r7, #8]
 800e80a:	69bb      	ldr	r3, [r7, #24]
 800e80c:	699b      	ldr	r3, [r3, #24]
 800e80e:	4413      	add	r3, r2
 800e810:	697a      	ldr	r2, [r7, #20]
 800e812:	4619      	mov	r1, r3
 800e814:	69b8      	ldr	r0, [r7, #24]
 800e816:	f7ff fe61 	bl	800e4dc <prvReloadTimer>
 800e81a:	e008      	b.n	800e82e <prvProcessReceivedCommands+0xee>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800e81c:	69bb      	ldr	r3, [r7, #24]
 800e81e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e822:	f023 0301 	bic.w	r3, r3, #1
 800e826:	b2da      	uxtb	r2, r3
 800e828:	69bb      	ldr	r3, [r7, #24]
 800e82a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e82e:	69bb      	ldr	r3, [r7, #24]
 800e830:	6a1b      	ldr	r3, [r3, #32]
 800e832:	69b8      	ldr	r0, [r7, #24]
 800e834:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800e836:	e03e      	b.n	800e8b6 <prvProcessReceivedCommands+0x176>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800e838:	69bb      	ldr	r3, [r7, #24]
 800e83a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e83e:	f023 0301 	bic.w	r3, r3, #1
 800e842:	b2da      	uxtb	r2, r3
 800e844:	69bb      	ldr	r3, [r7, #24]
 800e846:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800e84a:	e035      	b.n	800e8b8 <prvProcessReceivedCommands+0x178>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e84c:	69bb      	ldr	r3, [r7, #24]
 800e84e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e852:	f043 0301 	orr.w	r3, r3, #1
 800e856:	b2da      	uxtb	r2, r3
 800e858:	69bb      	ldr	r3, [r7, #24]
 800e85a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e85e:	68ba      	ldr	r2, [r7, #8]
 800e860:	69bb      	ldr	r3, [r7, #24]
 800e862:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e864:	69bb      	ldr	r3, [r7, #24]
 800e866:	699b      	ldr	r3, [r3, #24]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d103      	bne.n	800e874 <prvProcessReceivedCommands+0x134>
 800e86c:	f000 fad4 	bl	800ee18 <ulSetInterruptMask>
 800e870:	bf00      	nop
 800e872:	e7fd      	b.n	800e870 <prvProcessReceivedCommands+0x130>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e874:	69bb      	ldr	r3, [r7, #24]
 800e876:	699a      	ldr	r2, [r3, #24]
 800e878:	697b      	ldr	r3, [r7, #20]
 800e87a:	18d1      	adds	r1, r2, r3
 800e87c:	697b      	ldr	r3, [r7, #20]
 800e87e:	697a      	ldr	r2, [r7, #20]
 800e880:	69b8      	ldr	r0, [r7, #24]
 800e882:	f7ff ff1b 	bl	800e6bc <prvInsertTimerInActiveList>
                        break;
 800e886:	e017      	b.n	800e8b8 <prvProcessReceivedCommands+0x178>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e888:	69bb      	ldr	r3, [r7, #24]
 800e88a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e88e:	f003 0302 	and.w	r3, r3, #2
 800e892:	2b00      	cmp	r3, #0
 800e894:	d103      	bne.n	800e89e <prvProcessReceivedCommands+0x15e>
                            {
                                vPortFree( pxTimer );
 800e896:	69b8      	ldr	r0, [r7, #24]
 800e898:	f000 fbe2 	bl	800f060 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800e89c:	e00c      	b.n	800e8b8 <prvProcessReceivedCommands+0x178>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800e89e:	69bb      	ldr	r3, [r7, #24]
 800e8a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e8a4:	f023 0301 	bic.w	r3, r3, #1
 800e8a8:	b2da      	uxtb	r2, r3
 800e8aa:	69bb      	ldr	r3, [r7, #24]
 800e8ac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800e8b0:	e002      	b.n	800e8b8 <prvProcessReceivedCommands+0x178>

                    default:
                        /* Don't expect to get here. */
                        break;
 800e8b2:	bf00      	nop
 800e8b4:	e000      	b.n	800e8b8 <prvProcessReceivedCommands+0x178>
                        break;
 800e8b6:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e8b8:	4b07      	ldr	r3, [pc, #28]	@ (800e8d8 <prvProcessReceivedCommands+0x198>)
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	1d39      	adds	r1, r7, #4
 800e8be:	2200      	movs	r2, #0
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	f7fe f872 	bl	800c9aa <xQueueReceive>
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	f47f af3d 	bne.w	800e748 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800e8ce:	bf00      	nop
 800e8d0:	bf00      	nop
 800e8d2:	3720      	adds	r7, #32
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	bd80      	pop	{r7, pc}
 800e8d8:	20046cb8 	.word	0x20046cb8

0800e8dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b082      	sub	sp, #8
 800e8e0:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e8e2:	e009      	b.n	800e8f8 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e8e4:	4b0e      	ldr	r3, [pc, #56]	@ (800e920 <prvSwitchTimerLists+0x44>)
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	68db      	ldr	r3, [r3, #12]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800e8ee:	f04f 31ff 	mov.w	r1, #4294967295
 800e8f2:	6838      	ldr	r0, [r7, #0]
 800e8f4:	f7ff fe14 	bl	800e520 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e8f8:	4b09      	ldr	r3, [pc, #36]	@ (800e920 <prvSwitchTimerLists+0x44>)
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d1f0      	bne.n	800e8e4 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800e902:	4b07      	ldr	r3, [pc, #28]	@ (800e920 <prvSwitchTimerLists+0x44>)
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800e908:	4b06      	ldr	r3, [pc, #24]	@ (800e924 <prvSwitchTimerLists+0x48>)
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	4a04      	ldr	r2, [pc, #16]	@ (800e920 <prvSwitchTimerLists+0x44>)
 800e90e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800e910:	4a04      	ldr	r2, [pc, #16]	@ (800e924 <prvSwitchTimerLists+0x48>)
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	6013      	str	r3, [r2, #0]
    }
 800e916:	bf00      	nop
 800e918:	3708      	adds	r7, #8
 800e91a:	46bd      	mov	sp, r7
 800e91c:	bd80      	pop	{r7, pc}
 800e91e:	bf00      	nop
 800e920:	20046cb0 	.word	0x20046cb0
 800e924:	20046cb4 	.word	0x20046cb4

0800e928 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800e928:	b580      	push	{r7, lr}
 800e92a:	b082      	sub	sp, #8
 800e92c:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800e92e:	f000 f8a5 	bl	800ea7c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800e932:	4b15      	ldr	r3, [pc, #84]	@ (800e988 <prvCheckForValidListAndQueue+0x60>)
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d120      	bne.n	800e97c <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 800e93a:	4814      	ldr	r0, [pc, #80]	@ (800e98c <prvCheckForValidListAndQueue+0x64>)
 800e93c:	f7fd fc58 	bl	800c1f0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800e940:	4813      	ldr	r0, [pc, #76]	@ (800e990 <prvCheckForValidListAndQueue+0x68>)
 800e942:	f7fd fc55 	bl	800c1f0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800e946:	4b13      	ldr	r3, [pc, #76]	@ (800e994 <prvCheckForValidListAndQueue+0x6c>)
 800e948:	4a10      	ldr	r2, [pc, #64]	@ (800e98c <prvCheckForValidListAndQueue+0x64>)
 800e94a:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800e94c:	4b12      	ldr	r3, [pc, #72]	@ (800e998 <prvCheckForValidListAndQueue+0x70>)
 800e94e:	4a10      	ldr	r2, [pc, #64]	@ (800e990 <prvCheckForValidListAndQueue+0x68>)
 800e950:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e952:	2300      	movs	r3, #0
 800e954:	9300      	str	r3, [sp, #0]
 800e956:	4b11      	ldr	r3, [pc, #68]	@ (800e99c <prvCheckForValidListAndQueue+0x74>)
 800e958:	4a11      	ldr	r2, [pc, #68]	@ (800e9a0 <prvCheckForValidListAndQueue+0x78>)
 800e95a:	2110      	movs	r1, #16
 800e95c:	200a      	movs	r0, #10
 800e95e:	f7fd fd50 	bl	800c402 <xQueueGenericCreateStatic>
 800e962:	4603      	mov	r3, r0
 800e964:	4a08      	ldr	r2, [pc, #32]	@ (800e988 <prvCheckForValidListAndQueue+0x60>)
 800e966:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800e968:	4b07      	ldr	r3, [pc, #28]	@ (800e988 <prvCheckForValidListAndQueue+0x60>)
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d005      	beq.n	800e97c <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e970:	4b05      	ldr	r3, [pc, #20]	@ (800e988 <prvCheckForValidListAndQueue+0x60>)
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	490b      	ldr	r1, [pc, #44]	@ (800e9a4 <prvCheckForValidListAndQueue+0x7c>)
 800e976:	4618      	mov	r0, r3
 800e978:	f7fe fb64 	bl	800d044 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800e97c:	f000 f890 	bl	800eaa0 <vPortExitCritical>
    }
 800e980:	bf00      	nop
 800e982:	46bd      	mov	sp, r7
 800e984:	bd80      	pop	{r7, pc}
 800e986:	bf00      	nop
 800e988:	20046cb8 	.word	0x20046cb8
 800e98c:	20046c88 	.word	0x20046c88
 800e990:	20046c9c 	.word	0x20046c9c
 800e994:	20046cb0 	.word	0x20046cb0
 800e998:	20046cb4 	.word	0x20046cb4
 800e99c:	20046d64 	.word	0x20046d64
 800e9a0:	20046cc4 	.word	0x20046cc4
 800e9a4:	0802dd18 	.word	0x0802dd18

0800e9a8 <vPortSetupTimerInterrupt>:
    }
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 800e9a8:	b480      	push	{r7}
 800e9aa:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e9ac:	4b0b      	ldr	r3, [pc, #44]	@ (800e9dc <vPortSetupTimerInterrupt+0x34>)
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e9b2:	4b0b      	ldr	r3, [pc, #44]	@ (800e9e0 <vPortSetupTimerInterrupt+0x38>)
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e9b8:	4b0a      	ldr	r3, [pc, #40]	@ (800e9e4 <vPortSetupTimerInterrupt+0x3c>)
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	4a0a      	ldr	r2, [pc, #40]	@ (800e9e8 <vPortSetupTimerInterrupt+0x40>)
 800e9be:	fba2 2303 	umull	r2, r3, r2, r3
 800e9c2:	099b      	lsrs	r3, r3, #6
 800e9c4:	4a09      	ldr	r2, [pc, #36]	@ (800e9ec <vPortSetupTimerInterrupt+0x44>)
 800e9c6:	3b01      	subs	r3, #1
 800e9c8:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800e9ca:	4b04      	ldr	r3, [pc, #16]	@ (800e9dc <vPortSetupTimerInterrupt+0x34>)
 800e9cc:	2207      	movs	r2, #7
 800e9ce:	601a      	str	r2, [r3, #0]
}
 800e9d0:	bf00      	nop
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d8:	4770      	bx	lr
 800e9da:	bf00      	nop
 800e9dc:	e000e010 	.word	0xe000e010
 800e9e0:	e000e018 	.word	0xe000e018
 800e9e4:	20000004 	.word	0x20000004
 800e9e8:	10624dd3 	.word	0x10624dd3
 800e9ec:	e000e014 	.word	0xe000e014

0800e9f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e9f0:	b580      	push	{r7, lr}
 800e9f2:	b082      	sub	sp, #8
 800e9f4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 800e9f6:	2300      	movs	r3, #0
 800e9f8:	607b      	str	r3, [r7, #4]
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
 800e9fa:	4b0a      	ldr	r3, [pc, #40]	@ (800ea24 <prvTaskExitError+0x34>)
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea02:	d003      	beq.n	800ea0c <prvTaskExitError+0x1c>
 800ea04:	f000 fa08 	bl	800ee18 <ulSetInterruptMask>
 800ea08:	bf00      	nop
 800ea0a:	e7fd      	b.n	800ea08 <prvTaskExitError+0x18>
    portDISABLE_INTERRUPTS();
 800ea0c:	f000 fa04 	bl	800ee18 <ulSetInterruptMask>

    while( ulDummy == 0 )
 800ea10:	bf00      	nop
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d0fc      	beq.n	800ea12 <prvTaskExitError+0x22>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
 800ea18:	bf00      	nop
 800ea1a:	bf00      	nop
 800ea1c:	3708      	adds	r7, #8
 800ea1e:	46bd      	mov	sp, r7
 800ea20:	bd80      	pop	{r7, pc}
 800ea22:	bf00      	nop
 800ea24:	20000010 	.word	0x20000010

0800ea28 <prvSetupFPU>:
#endif /* configENABLE_MPU */
/*-----------------------------------------------------------*/

#if ( configENABLE_FPU == 1 )
    static void prvSetupFPU( void ) /* PRIVILEGED_FUNCTION */
    {
 800ea28:	b480      	push	{r7}
 800ea2a:	af00      	add	r7, sp, #0
        #endif /* configENABLE_TRUSTZONE */

        /* CP10 = 11 ==> Full access to FPU i.e. both privileged and
         * unprivileged code should be able to access FPU. CP11 should be
         * programmed to the same value as CP10. */
        *( portCPACR ) |= ( ( portCPACR_CP10_VALUE << portCPACR_CP10_POS ) |
 800ea2c:	4b08      	ldr	r3, [pc, #32]	@ (800ea50 <prvSetupFPU+0x28>)
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	4a07      	ldr	r2, [pc, #28]	@ (800ea50 <prvSetupFPU+0x28>)
 800ea32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ea36:	6013      	str	r3, [r2, #0]
                            );

        /* ASPEN = 1 ==> Hardware should automatically preserve floating point
         * context on exception entry and restore on exception return.
         * LSPEN = 1 ==> Enable lazy context save of FP state. */
        *( portFPCCR ) |= ( portFPCCR_ASPEN_MASK | portFPCCR_LSPEN_MASK );
 800ea38:	4b06      	ldr	r3, [pc, #24]	@ (800ea54 <prvSetupFPU+0x2c>)
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	4a05      	ldr	r2, [pc, #20]	@ (800ea54 <prvSetupFPU+0x2c>)
 800ea3e:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ea42:	6013      	str	r3, [r2, #0]
    }
 800ea44:	bf00      	nop
 800ea46:	46bd      	mov	sp, r7
 800ea48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4c:	4770      	bx	lr
 800ea4e:	bf00      	nop
 800ea50:	e000ed88 	.word	0xe000ed88
 800ea54:	e000ef34 	.word	0xe000ef34

0800ea58 <vPortYield>:
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 800ea58:	b480      	push	{r7}
 800ea5a:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ea5c:	4b06      	ldr	r3, [pc, #24]	@ (800ea78 <vPortYield+0x20>)
 800ea5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ea62:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800ea64:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800ea68:	f3bf 8f6f 	isb	sy
}
 800ea6c:	bf00      	nop
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea74:	4770      	bx	lr
 800ea76:	bf00      	nop
 800ea78:	e000ed04 	.word	0xe000ed04

0800ea7c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 800ea80:	f000 f9ca 	bl	800ee18 <ulSetInterruptMask>
    ulCriticalNesting++;
 800ea84:	4b05      	ldr	r3, [pc, #20]	@ (800ea9c <vPortEnterCritical+0x20>)
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	3301      	adds	r3, #1
 800ea8a:	4a04      	ldr	r2, [pc, #16]	@ (800ea9c <vPortEnterCritical+0x20>)
 800ea8c:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800ea8e:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800ea92:	f3bf 8f6f 	isb	sy
}
 800ea96:	bf00      	nop
 800ea98:	bd80      	pop	{r7, pc}
 800ea9a:	bf00      	nop
 800ea9c:	20000010 	.word	0x20000010

0800eaa0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	af00      	add	r7, sp, #0
    configASSERT( ulCriticalNesting );
 800eaa4:	4b0a      	ldr	r3, [pc, #40]	@ (800ead0 <vPortExitCritical+0x30>)
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d103      	bne.n	800eab4 <vPortExitCritical+0x14>
 800eaac:	f000 f9b4 	bl	800ee18 <ulSetInterruptMask>
 800eab0:	bf00      	nop
 800eab2:	e7fd      	b.n	800eab0 <vPortExitCritical+0x10>
    ulCriticalNesting--;
 800eab4:	4b06      	ldr	r3, [pc, #24]	@ (800ead0 <vPortExitCritical+0x30>)
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	3b01      	subs	r3, #1
 800eaba:	4a05      	ldr	r2, [pc, #20]	@ (800ead0 <vPortExitCritical+0x30>)
 800eabc:	6013      	str	r3, [r2, #0]

    if( ulCriticalNesting == 0 )
 800eabe:	4b04      	ldr	r3, [pc, #16]	@ (800ead0 <vPortExitCritical+0x30>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d102      	bne.n	800eacc <vPortExitCritical+0x2c>
    {
        portENABLE_INTERRUPTS();
 800eac6:	2000      	movs	r0, #0
 800eac8:	f000 f9b3 	bl	800ee32 <vClearInterruptMask>
    }
}
 800eacc:	bf00      	nop
 800eace:	bd80      	pop	{r7, pc}
 800ead0:	20000010 	.word	0x20000010

0800ead4 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b082      	sub	sp, #8
 800ead8:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800eada:	f000 f99d 	bl	800ee18 <ulSetInterruptMask>
 800eade:	6078      	str	r0, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800eae0:	f7fe fe9e 	bl	800d820 <xTaskIncrementTick>
 800eae4:	4603      	mov	r3, r0
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d003      	beq.n	800eaf2 <xPortSysTickHandler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800eaea:	4b05      	ldr	r3, [pc, #20]	@ (800eb00 <xPortSysTickHandler+0x2c>)
 800eaec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eaf0:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800eaf2:	6878      	ldr	r0, [r7, #4]
 800eaf4:	f000 f99d 	bl	800ee32 <vClearInterruptMask>
}
 800eaf8:	bf00      	nop
 800eafa:	3708      	adds	r7, #8
 800eafc:	46bd      	mov	sp, r7
 800eafe:	bd80      	pop	{r7, pc}
 800eb00:	e000ed04 	.word	0xe000ed04

0800eb04 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b084      	sub	sp, #16
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
    #endif /* configENABLE_TRUSTZONE */
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ portOFFSET_TO_PC ];
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	699b      	ldr	r3, [r3, #24]
 800eb10:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	3b02      	subs	r3, #2
 800eb16:	781b      	ldrb	r3, [r3, #0]
 800eb18:	72fb      	strb	r3, [r7, #11]

    switch( ucSVCNumber )
 800eb1a:	7afb      	ldrb	r3, [r7, #11]
 800eb1c:	2b66      	cmp	r3, #102	@ 0x66
 800eb1e:	d104      	bne.n	800eb2a <vPortSVCHandler_C+0x26>
            #endif /* configENABLE_TRUSTZONE */

            #if ( configENABLE_FPU == 1 )
            {
                /* Setup the Floating Point Unit (FPU). */
                prvSetupFPU();
 800eb20:	f7ff ff82 	bl	800ea28 <prvSetupFPU>
            }
            #endif /* configENABLE_FPU */

            /* Setup the context of the first task so that the first task starts
             * executing. */
            vRestoreContextOfFirstTask();
 800eb24:	f000 f944 	bl	800edb0 <vRestoreContextOfFirstTask>
            break;
 800eb28:	e003      	b.n	800eb32 <vPortSVCHandler_C+0x2e>
                break;
        #endif /* ( configENABLE_MPU == 1 ) && ( configUSE_MPU_WRAPPERS_V1 == 1 ) */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 800eb2a:	f000 f975 	bl	800ee18 <ulSetInterruptMask>
 800eb2e:	bf00      	nop
 800eb30:	e7fd      	b.n	800eb2e <vPortSVCHandler_C+0x2a>
    }
}
 800eb32:	bf00      	nop
 800eb34:	3710      	adds	r7, #16
 800eb36:	46bd      	mov	sp, r7
 800eb38:	bd80      	pop	{r7, pc}
	...

0800eb3c <pxPortInitialiseStack>:

    StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
    {
 800eb3c:	b480      	push	{r7}
 800eb3e:	b085      	sub	sp, #20
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	60f8      	str	r0, [r7, #12]
 800eb44:	60b9      	str	r1, [r7, #8]
 800eb46:	607a      	str	r2, [r7, #4]
 800eb48:	603b      	str	r3, [r7, #0]
            }
            #endif /* configENABLE_TRUSTZONE */
        }
        #else /* portPRELOAD_REGISTERS */
        {
            pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	3b04      	subs	r3, #4
 800eb4e:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR. */
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800eb56:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	3b04      	subs	r3, #4
 800eb5c:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC. */
 800eb5e:	687a      	ldr	r2, [r7, #4]
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	3b04      	subs	r3, #4
 800eb68:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR. */
 800eb6a:	4a38      	ldr	r2, [pc, #224]	@ (800ec4c <pxPortInitialiseStack+0x110>)
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	3b04      	subs	r3, #4
 800eb74:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12. */
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 800eb7c:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	3b04      	subs	r3, #4
 800eb82:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3. */
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 800eb8a:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	3b04      	subs	r3, #4
 800eb90:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2. */
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 800eb98:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	3b04      	subs	r3, #4
 800eb9e:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1. */
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 800eba6:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	3b04      	subs	r3, #4
 800ebac:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0. */
 800ebae:	683a      	ldr	r2, [r7, #0]
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	3b04      	subs	r3, #4
 800ebb8:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11. */
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 800ebc0:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	3b04      	subs	r3, #4
 800ebc6:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10. */
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 800ebce:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	3b04      	subs	r3, #4
 800ebd4:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09. */
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 800ebdc:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	3b04      	subs	r3, #4
 800ebe2:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08. */
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 800ebea:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	3b04      	subs	r3, #4
 800ebf0:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07. */
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 800ebf8:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	3b04      	subs	r3, #4
 800ebfe:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06. */
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 800ec06:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	3b04      	subs	r3, #4
 800ec0c:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05. */
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 800ec14:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	3b04      	subs	r3, #4
 800ec1a:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04. */
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 800ec22:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	3b04      	subs	r3, #4
 800ec28:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN. */
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	f06f 0243 	mvn.w	r2, #67	@ 0x43
 800ec30:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	3b04      	subs	r3, #4
 800ec36:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pxEndOfStack; /* Slot used to hold this task's PSPLIM value. */
 800ec38:	68ba      	ldr	r2, [r7, #8]
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	601a      	str	r2, [r3, #0]
            }
            #endif /* configENABLE_TRUSTZONE */
        }
        #endif /* portPRELOAD_REGISTERS */

        return pxTopOfStack;
 800ec3e:	68fb      	ldr	r3, [r7, #12]
    }
 800ec40:	4618      	mov	r0, r3
 800ec42:	3714      	adds	r7, #20
 800ec44:	46bd      	mov	sp, r7
 800ec46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4a:	4770      	bx	lr
 800ec4c:	0800e9f1 	.word	0x0800e9f1

0800ec50 <xPortStartScheduler>:

#endif /* configENABLE_MPU */
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b084      	sub	sp, #16
 800ec54:	af00      	add	r7, sp, #0
    #if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_BASEPRI == 1 ) )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800ec56:	2300      	movs	r3, #0
 800ec58:	60bb      	str	r3, [r7, #8]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = portNVIC_SHPR2_REG;
 800ec5a:	4b35      	ldr	r3, [pc, #212]	@ (800ed30 <xPortStartScheduler+0xe0>)
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	60fb      	str	r3, [r7, #12]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        portNVIC_SHPR2_REG = 0xFF000000;
 800ec60:	4b33      	ldr	r3, [pc, #204]	@ (800ed30 <xPortStartScheduler+0xe0>)
 800ec62:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 800ec66:	601a      	str	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = ( uint8_t ) ( ( portNVIC_SHPR2_REG & 0xFF000000 ) >> 24 );
 800ec68:	4b31      	ldr	r3, [pc, #196]	@ (800ed30 <xPortStartScheduler+0xe0>)
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	0e1b      	lsrs	r3, r3, #24
 800ec6e:	b2db      	uxtb	r3, r3
 800ec70:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ec72:	79fb      	ldrb	r3, [r7, #7]
 800ec74:	b2db      	uxtb	r3, r3
 800ec76:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ec7a:	b2da      	uxtb	r2, r3
 800ec7c:	4b2d      	ldr	r3, [pc, #180]	@ (800ed34 <xPortStartScheduler+0xe4>)
 800ec7e:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 800ec80:	4b2c      	ldr	r3, [pc, #176]	@ (800ed34 <xPortStartScheduler+0xe4>)
 800ec82:	781b      	ldrb	r3, [r3, #0]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d103      	bne.n	800ec90 <xPortStartScheduler+0x40>
 800ec88:	f000 f8c6 	bl	800ee18 <ulSetInterruptMask>
 800ec8c:	bf00      	nop
 800ec8e:	e7fd      	b.n	800ec8c <xPortStartScheduler+0x3c>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 800ec90:	79fb      	ldrb	r3, [r7, #7]
 800ec92:	b2db      	uxtb	r3, r3
 800ec94:	43db      	mvns	r3, r3
 800ec96:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d00b      	beq.n	800ecb6 <xPortStartScheduler+0x66>
 800ec9e:	f000 f8bb 	bl	800ee18 <ulSetInterruptMask>
 800eca2:	bf00      	nop
 800eca4:	e7fd      	b.n	800eca2 <xPortStartScheduler+0x52>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800eca6:	68bb      	ldr	r3, [r7, #8]
 800eca8:	3301      	adds	r3, #1
 800ecaa:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ecac:	79fb      	ldrb	r3, [r7, #7]
 800ecae:	b2db      	uxtb	r3, r3
 800ecb0:	005b      	lsls	r3, r3, #1
 800ecb2:	b2db      	uxtb	r3, r3
 800ecb4:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ecb6:	79fb      	ldrb	r3, [r7, #7]
 800ecb8:	b2db      	uxtb	r3, r3
 800ecba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ecbe:	2b80      	cmp	r3, #128	@ 0x80
 800ecc0:	d0f1      	beq.n	800eca6 <xPortStartScheduler+0x56>
        }

        if( ulImplementedPrioBits == 8 )
 800ecc2:	68bb      	ldr	r3, [r7, #8]
 800ecc4:	2b08      	cmp	r3, #8
 800ecc6:	d103      	bne.n	800ecd0 <xPortStartScheduler+0x80>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 800ecc8:	4b1b      	ldr	r3, [pc, #108]	@ (800ed38 <xPortStartScheduler+0xe8>)
 800ecca:	2200      	movs	r2, #0
 800eccc:	601a      	str	r2, [r3, #0]
 800ecce:	e004      	b.n	800ecda <xPortStartScheduler+0x8a>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 800ecd0:	68bb      	ldr	r3, [r7, #8]
 800ecd2:	f1c3 0307 	rsb	r3, r3, #7
 800ecd6:	4a18      	ldr	r2, [pc, #96]	@ (800ed38 <xPortStartScheduler+0xe8>)
 800ecd8:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ecda:	4b17      	ldr	r3, [pc, #92]	@ (800ed38 <xPortStartScheduler+0xe8>)
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	021b      	lsls	r3, r3, #8
 800ece0:	4a15      	ldr	r2, [pc, #84]	@ (800ed38 <xPortStartScheduler+0xe8>)
 800ece2:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ece4:	4b14      	ldr	r3, [pc, #80]	@ (800ed38 <xPortStartScheduler+0xe8>)
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ecec:	4a12      	ldr	r2, [pc, #72]	@ (800ed38 <xPortStartScheduler+0xe8>)
 800ecee:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        portNVIC_SHPR2_REG = ulOriginalPriority;
 800ecf0:	4a0f      	ldr	r2, [pc, #60]	@ (800ed30 <xPortStartScheduler+0xe0>)
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	6013      	str	r3, [r2, #0]
    }
    #endif /* #if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_BASEPRI == 1 ) ) */

    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800ecf6:	4b11      	ldr	r3, [pc, #68]	@ (800ed3c <xPortStartScheduler+0xec>)
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	4a10      	ldr	r2, [pc, #64]	@ (800ed3c <xPortStartScheduler+0xec>)
 800ecfc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ed00:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800ed02:	4b0e      	ldr	r3, [pc, #56]	@ (800ed3c <xPortStartScheduler+0xec>)
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	4a0d      	ldr	r2, [pc, #52]	@ (800ed3c <xPortStartScheduler+0xec>)
 800ed08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ed0c:	6013      	str	r3, [r2, #0]
    }
    #endif /* configENABLE_MPU */

    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800ed0e:	f7ff fe4b 	bl	800e9a8 <vPortSetupTimerInterrupt>

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
 800ed12:	4b0b      	ldr	r3, [pc, #44]	@ (800ed40 <xPortStartScheduler+0xf0>)
 800ed14:	2200      	movs	r2, #0
 800ed16:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
    }
    #endif

    /* Start the first task. */
    vStartFirstTask();
 800ed18:	f000 f86a 	bl	800edf0 <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
 800ed1c:	f7fe fe90 	bl	800da40 <vTaskSwitchContext>
    prvTaskExitError();
 800ed20:	f7ff fe66 	bl	800e9f0 <prvTaskExitError>

    /* Should not get here. */
    return 0;
 800ed24:	2300      	movs	r3, #0
}
 800ed26:	4618      	mov	r0, r3
 800ed28:	3710      	adds	r7, #16
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	bd80      	pop	{r7, pc}
 800ed2e:	bf00      	nop
 800ed30:	e000ed1c 	.word	0xe000ed1c
 800ed34:	20046db4 	.word	0x20046db4
 800ed38:	20046db8 	.word	0x20046db8
 800ed3c:	e000ed20 	.word	0xe000ed20
 800ed40:	20000010 	.word	0x20000010

0800ed44 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_BASEPRI == 1 ) )

    void vPortValidateInterruptPriority( void )
    {
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b082      	sub	sp, #8
 800ed48:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800ed4a:	f3ef 8305 	mrs	r3, IPSR
 800ed4e:	607b      	str	r3, [r7, #4]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	2b0f      	cmp	r3, #15
 800ed54:	d90d      	bls.n	800ed72 <vPortValidateInterruptPriority+0x2e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ed56:	4a0f      	ldr	r2, [pc, #60]	@ (800ed94 <vPortValidateInterruptPriority+0x50>)
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	4413      	add	r3, r2
 800ed5c:	781b      	ldrb	r3, [r3, #0]
 800ed5e:	70fb      	strb	r3, [r7, #3]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ed60:	4b0d      	ldr	r3, [pc, #52]	@ (800ed98 <vPortValidateInterruptPriority+0x54>)
 800ed62:	781b      	ldrb	r3, [r3, #0]
 800ed64:	78fa      	ldrb	r2, [r7, #3]
 800ed66:	429a      	cmp	r2, r3
 800ed68:	d203      	bcs.n	800ed72 <vPortValidateInterruptPriority+0x2e>
 800ed6a:	f000 f855 	bl	800ee18 <ulSetInterruptMask>
 800ed6e:	bf00      	nop
 800ed70:	e7fd      	b.n	800ed6e <vPortValidateInterruptPriority+0x2a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ed72:	4b0a      	ldr	r3, [pc, #40]	@ (800ed9c <vPortValidateInterruptPriority+0x58>)
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ed7a:	4b09      	ldr	r3, [pc, #36]	@ (800eda0 <vPortValidateInterruptPriority+0x5c>)
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	429a      	cmp	r2, r3
 800ed80:	d903      	bls.n	800ed8a <vPortValidateInterruptPriority+0x46>
 800ed82:	f000 f849 	bl	800ee18 <ulSetInterruptMask>
 800ed86:	bf00      	nop
 800ed88:	e7fd      	b.n	800ed86 <vPortValidateInterruptPriority+0x42>
    }
 800ed8a:	bf00      	nop
 800ed8c:	3708      	adds	r7, #8
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	bd80      	pop	{r7, pc}
 800ed92:	bf00      	nop
 800ed94:	e000e3f0 	.word	0xe000e3f0
 800ed98:	20046db4 	.word	0x20046db4
 800ed9c:	e000ed0c 	.word	0xe000ed0c
 800eda0:	20046db8 	.word	0x20046db8
	...

0800edb0 <vRestoreContextOfFirstTask>:

#else /* configENABLE_MPU */

    void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 800edb0:	4a0b      	ldr	r2, [pc, #44]	@ (800ede0 <pxCurrentTCBConst2>)
 800edb2:	6811      	ldr	r1, [r2, #0]
 800edb4:	6808      	ldr	r0, [r1, #0]
 800edb6:	c806      	ldmia	r0!, {r1, r2}
 800edb8:	f381 880b 	msr	PSPLIM, r1
 800edbc:	2102      	movs	r1, #2
 800edbe:	f381 8814 	msr	CONTROL, r1
 800edc2:	3020      	adds	r0, #32
 800edc4:	f380 8809 	msr	PSP, r0
 800edc8:	f3bf 8f6f 	isb	sy
 800edcc:	f04f 0000 	mov.w	r0, #0
 800edd0:	f380 8811 	msr	BASEPRI, r0
 800edd4:	4710      	bx	r2
 800edd6:	bf00      	nop
 800edd8:	f3af 8000 	nop.w
 800eddc:	f3af 8000 	nop.w

0800ede0 <pxCurrentTCBConst2>:
 800ede0:	20046788 	.word	0x20046788
            "   bx   r2                                         \n" /* Finally, branch to EXC_RETURN. */
            "                                                   \n"
            "   .align 4                                        \n"
            "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
    }
 800ede4:	bf00      	nop
 800ede6:	bf00      	nop
	...

0800edf0 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800edf0:	4807      	ldr	r0, [pc, #28]	@ (800ee10 <xVTORConst>)
 800edf2:	6800      	ldr	r0, [r0, #0]
 800edf4:	6800      	ldr	r0, [r0, #0]
 800edf6:	f380 8808 	msr	MSP, r0
 800edfa:	b662      	cpsie	i
 800edfc:	b661      	cpsie	f
 800edfe:	f3bf 8f4f 	dsb	sy
 800ee02:	f3bf 8f6f 	isb	sy
 800ee06:	df66      	svc	102	@ 0x66
 800ee08:	bf00      	nop
 800ee0a:	bf00      	nop
 800ee0c:	f3af 8000 	nop.w

0800ee10 <xVTORConst>:
 800ee10:	e000ed08 	.word	0xe000ed08
        "                                                   \n"
        "   .align 4                                        \n"
        "xVTORConst: .word 0xe000ed08                       \n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory"
    );
}
 800ee14:	bf00      	nop
 800ee16:	bf00      	nop

0800ee18 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800ee18:	f3ef 8011 	mrs	r0, BASEPRI
 800ee1c:	f04f 0150 	mov.w	r1, #80	@ 0x50
 800ee20:	f381 8811 	msr	BASEPRI, r1
 800ee24:	f3bf 8f4f 	dsb	sy
 800ee28:	f3bf 8f6f 	isb	sy
 800ee2c:	4770      	bx	lr
        "   dsb                                             \n"
        "   isb                                             \n"
        "   bx lr                                           \n" /* Return. */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800ee2e:	bf00      	nop
 800ee30:	4618      	mov	r0, r3

0800ee32 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800ee32:	f380 8811 	msr	BASEPRI, r0
 800ee36:	f3bf 8f4f 	dsb	sy
 800ee3a:	f3bf 8f6f 	isb	sy
 800ee3e:	4770      	bx	lr
        "   dsb                                             \n"
        "   isb                                             \n"
        "   bx lr                                           \n" /* Return. */
        ::: "memory"
    );
}
 800ee40:	bf00      	nop
	...

0800ee50 <PendSV_Handler>:

#else /* configENABLE_MPU */

    void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 800ee50:	f3ef 8009 	mrs	r0, PSP
 800ee54:	f01e 0f10 	tst.w	lr, #16
 800ee58:	bf08      	it	eq
 800ee5a:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ee5e:	f3ef 820b 	mrs	r2, PSPLIM
 800ee62:	4673      	mov	r3, lr
 800ee64:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800ee68:	4a11      	ldr	r2, [pc, #68]	@ (800eeb0 <pxCurrentTCBConst>)
 800ee6a:	6811      	ldr	r1, [r2, #0]
 800ee6c:	6008      	str	r0, [r1, #0]
 800ee6e:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ee72:	f380 8811 	msr	BASEPRI, r0
 800ee76:	f3bf 8f4f 	dsb	sy
 800ee7a:	f3bf 8f6f 	isb	sy
 800ee7e:	f7fe fddf 	bl	800da40 <vTaskSwitchContext>
 800ee82:	f04f 0000 	mov.w	r0, #0
 800ee86:	f380 8811 	msr	BASEPRI, r0
 800ee8a:	4a09      	ldr	r2, [pc, #36]	@ (800eeb0 <pxCurrentTCBConst>)
 800ee8c:	6811      	ldr	r1, [r2, #0]
 800ee8e:	6808      	ldr	r0, [r1, #0]
 800ee90:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800ee94:	f013 0f10 	tst.w	r3, #16
 800ee98:	bf08      	it	eq
 800ee9a:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ee9e:	f382 880b 	msr	PSPLIM, r2
 800eea2:	f380 8809 	msr	PSP, r0
 800eea6:	4718      	bx	r3
 800eea8:	f3af 8000 	nop.w
 800eeac:	f3af 8000 	nop.w

0800eeb0 <pxCurrentTCBConst>:
 800eeb0:	20046788 	.word	0x20046788
            "                                                   \n"
            "   .align 4                                        \n"
            "pxCurrentTCBConst: .word pxCurrentTCB              \n"
            ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
        );
    }
 800eeb4:	bf00      	nop
 800eeb6:	bf00      	nop
	...

0800eec0 <SVC_Handler>:

#else /* ( configENABLE_MPU == 1 ) && ( configUSE_MPU_WRAPPERS_V1 == 0 ) */

    void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 800eec0:	f01e 0f04 	tst.w	lr, #4
 800eec4:	bf0c      	ite	eq
 800eec6:	f3ef 8008 	mrseq	r0, MSP
 800eeca:	f3ef 8009 	mrsne	r0, PSP
 800eece:	4904      	ldr	r1, [pc, #16]	@ (800eee0 <svchandler_address_const>)
 800eed0:	4708      	bx	r1
 800eed2:	bf00      	nop
 800eed4:	f3af 8000 	nop.w
 800eed8:	f3af 8000 	nop.w
 800eedc:	f3af 8000 	nop.w

0800eee0 <svchandler_address_const>:
 800eee0:	0800eb05 	.word	0x0800eb05
            "   bx r1                                           \n"
            "                                                   \n"
            "   .align 4                                        \n"
            "svchandler_address_const: .word vPortSVCHandler_C  \n"
        );
    }
 800eee4:	bf00      	nop
 800eee6:	bf00      	nop

0800eee8 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b088      	sub	sp, #32
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 800eef0:	2300      	movs	r3, #0
 800eef2:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800eef4:	f7fe fb7c 	bl	800d5f0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800eef8:	4b54      	ldr	r3, [pc, #336]	@ (800f04c <pvPortMalloc+0x164>)
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d101      	bne.n	800ef04 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800ef00:	f000 f8f8 	bl	800f0f4 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d022      	beq.n	800ef50 <pvPortMalloc+0x68>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 800ef0a:	2308      	movs	r3, #8
 800ef0c:	43db      	mvns	r3, r3
 800ef0e:	687a      	ldr	r2, [r7, #4]
 800ef10:	429a      	cmp	r2, r3
 800ef12:	d81b      	bhi.n	800ef4c <pvPortMalloc+0x64>
            {
                xWantedSize += xHeapStructSize;
 800ef14:	2208      	movs	r2, #8
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	4413      	add	r3, r2
 800ef1a:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned to the required number
                 * of bytes. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	f003 0307 	and.w	r3, r3, #7
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d014      	beq.n	800ef50 <pvPortMalloc+0x68>
                {
                    /* Byte alignment required. */
                    xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	f003 0307 	and.w	r3, r3, #7
 800ef2c:	f1c3 0308 	rsb	r3, r3, #8
 800ef30:	613b      	str	r3, [r7, #16]

                    if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800ef32:	693b      	ldr	r3, [r7, #16]
 800ef34:	43db      	mvns	r3, r3
 800ef36:	687a      	ldr	r2, [r7, #4]
 800ef38:	429a      	cmp	r2, r3
 800ef3a:	d804      	bhi.n	800ef46 <pvPortMalloc+0x5e>
                    {
                        xWantedSize += xAdditionalRequiredSize;
 800ef3c:	687a      	ldr	r2, [r7, #4]
 800ef3e:	693b      	ldr	r3, [r7, #16]
 800ef40:	4413      	add	r3, r2
 800ef42:	607b      	str	r3, [r7, #4]
 800ef44:	e004      	b.n	800ef50 <pvPortMalloc+0x68>
                    }
                    else
                    {
                        xWantedSize = 0;
 800ef46:	2300      	movs	r3, #0
 800ef48:	607b      	str	r3, [r7, #4]
 800ef4a:	e001      	b.n	800ef50 <pvPortMalloc+0x68>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	db69      	blt.n	800f02a <pvPortMalloc+0x142>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d066      	beq.n	800f02a <pvPortMalloc+0x142>
 800ef5c:	4b3c      	ldr	r3, [pc, #240]	@ (800f050 <pvPortMalloc+0x168>)
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	687a      	ldr	r2, [r7, #4]
 800ef62:	429a      	cmp	r2, r3
 800ef64:	d861      	bhi.n	800f02a <pvPortMalloc+0x142>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800ef66:	4b3b      	ldr	r3, [pc, #236]	@ (800f054 <pvPortMalloc+0x16c>)
 800ef68:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 800ef6a:	4b3a      	ldr	r3, [pc, #232]	@ (800f054 <pvPortMalloc+0x16c>)
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ef70:	e004      	b.n	800ef7c <pvPortMalloc+0x94>
                {
                    pxPreviousBlock = pxBlock;
 800ef72:	69fb      	ldr	r3, [r7, #28]
 800ef74:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800ef76:	69fb      	ldr	r3, [r7, #28]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ef7c:	69fb      	ldr	r3, [r7, #28]
 800ef7e:	685b      	ldr	r3, [r3, #4]
 800ef80:	687a      	ldr	r2, [r7, #4]
 800ef82:	429a      	cmp	r2, r3
 800ef84:	d903      	bls.n	800ef8e <pvPortMalloc+0xa6>
 800ef86:	69fb      	ldr	r3, [r7, #28]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d1f1      	bne.n	800ef72 <pvPortMalloc+0x8a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800ef8e:	4b2f      	ldr	r3, [pc, #188]	@ (800f04c <pvPortMalloc+0x164>)
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	69fa      	ldr	r2, [r7, #28]
 800ef94:	429a      	cmp	r2, r3
 800ef96:	d048      	beq.n	800f02a <pvPortMalloc+0x142>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ef98:	69bb      	ldr	r3, [r7, #24]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	2208      	movs	r2, #8
 800ef9e:	4413      	add	r3, r2
 800efa0:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800efa2:	69fb      	ldr	r3, [r7, #28]
 800efa4:	681a      	ldr	r2, [r3, #0]
 800efa6:	69bb      	ldr	r3, [r7, #24]
 800efa8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800efaa:	69fb      	ldr	r3, [r7, #28]
 800efac:	685a      	ldr	r2, [r3, #4]
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	1ad2      	subs	r2, r2, r3
 800efb2:	2308      	movs	r3, #8
 800efb4:	005b      	lsls	r3, r3, #1
 800efb6:	429a      	cmp	r2, r3
 800efb8:	d918      	bls.n	800efec <pvPortMalloc+0x104>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800efba:	69fa      	ldr	r2, [r7, #28]
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	4413      	add	r3, r2
 800efc0:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	f003 0307 	and.w	r3, r3, #7
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d003      	beq.n	800efd4 <pvPortMalloc+0xec>
 800efcc:	f7ff ff24 	bl	800ee18 <ulSetInterruptMask>
 800efd0:	bf00      	nop
 800efd2:	e7fd      	b.n	800efd0 <pvPortMalloc+0xe8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800efd4:	69fb      	ldr	r3, [r7, #28]
 800efd6:	685a      	ldr	r2, [r3, #4]
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	1ad2      	subs	r2, r2, r3
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800efe0:	69fb      	ldr	r3, [r7, #28]
 800efe2:	687a      	ldr	r2, [r7, #4]
 800efe4:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800efe6:	68f8      	ldr	r0, [r7, #12]
 800efe8:	f000 f8e2 	bl	800f1b0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800efec:	4b18      	ldr	r3, [pc, #96]	@ (800f050 <pvPortMalloc+0x168>)
 800efee:	681a      	ldr	r2, [r3, #0]
 800eff0:	69fb      	ldr	r3, [r7, #28]
 800eff2:	685b      	ldr	r3, [r3, #4]
 800eff4:	1ad3      	subs	r3, r2, r3
 800eff6:	4a16      	ldr	r2, [pc, #88]	@ (800f050 <pvPortMalloc+0x168>)
 800eff8:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800effa:	4b15      	ldr	r3, [pc, #84]	@ (800f050 <pvPortMalloc+0x168>)
 800effc:	681a      	ldr	r2, [r3, #0]
 800effe:	4b16      	ldr	r3, [pc, #88]	@ (800f058 <pvPortMalloc+0x170>)
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	429a      	cmp	r2, r3
 800f004:	d203      	bcs.n	800f00e <pvPortMalloc+0x126>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f006:	4b12      	ldr	r3, [pc, #72]	@ (800f050 <pvPortMalloc+0x168>)
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	4a13      	ldr	r2, [pc, #76]	@ (800f058 <pvPortMalloc+0x170>)
 800f00c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800f00e:	69fb      	ldr	r3, [r7, #28]
 800f010:	685b      	ldr	r3, [r3, #4]
 800f012:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800f016:	69fb      	ldr	r3, [r7, #28]
 800f018:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800f01a:	69fb      	ldr	r3, [r7, #28]
 800f01c:	2200      	movs	r2, #0
 800f01e:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800f020:	4b0e      	ldr	r3, [pc, #56]	@ (800f05c <pvPortMalloc+0x174>)
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	3301      	adds	r3, #1
 800f026:	4a0d      	ldr	r2, [pc, #52]	@ (800f05c <pvPortMalloc+0x174>)
 800f028:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800f02a:	f7fe faef 	bl	800d60c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f02e:	697b      	ldr	r3, [r7, #20]
 800f030:	f003 0307 	and.w	r3, r3, #7
 800f034:	2b00      	cmp	r3, #0
 800f036:	d003      	beq.n	800f040 <pvPortMalloc+0x158>
 800f038:	f7ff feee 	bl	800ee18 <ulSetInterruptMask>
 800f03c:	bf00      	nop
 800f03e:	e7fd      	b.n	800f03c <pvPortMalloc+0x154>
    return pvReturn;
 800f040:	697b      	ldr	r3, [r7, #20]
}
 800f042:	4618      	mov	r0, r3
 800f044:	3720      	adds	r7, #32
 800f046:	46bd      	mov	sp, r7
 800f048:	bd80      	pop	{r7, pc}
 800f04a:	bf00      	nop
 800f04c:	2005a644 	.word	0x2005a644
 800f050:	2005a648 	.word	0x2005a648
 800f054:	2005a63c 	.word	0x2005a63c
 800f058:	2005a64c 	.word	0x2005a64c
 800f05c:	2005a650 	.word	0x2005a650

0800f060 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800f060:	b580      	push	{r7, lr}
 800f062:	b084      	sub	sp, #16
 800f064:	af00      	add	r7, sp, #0
 800f066:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d037      	beq.n	800f0e2 <vPortFree+0x82>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800f072:	2308      	movs	r3, #8
 800f074:	425b      	negs	r3, r3
 800f076:	68fa      	ldr	r2, [r7, #12]
 800f078:	4413      	add	r3, r2
 800f07a:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800f080:	68bb      	ldr	r3, [r7, #8]
 800f082:	685b      	ldr	r3, [r3, #4]
 800f084:	2b00      	cmp	r3, #0
 800f086:	db03      	blt.n	800f090 <vPortFree+0x30>
 800f088:	f7ff fec6 	bl	800ee18 <ulSetInterruptMask>
 800f08c:	bf00      	nop
 800f08e:	e7fd      	b.n	800f08c <vPortFree+0x2c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f090:	68bb      	ldr	r3, [r7, #8]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d003      	beq.n	800f0a0 <vPortFree+0x40>
 800f098:	f7ff febe 	bl	800ee18 <ulSetInterruptMask>
 800f09c:	bf00      	nop
 800f09e:	e7fd      	b.n	800f09c <vPortFree+0x3c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800f0a0:	68bb      	ldr	r3, [r7, #8]
 800f0a2:	685b      	ldr	r3, [r3, #4]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	da1c      	bge.n	800f0e2 <vPortFree+0x82>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800f0a8:	68bb      	ldr	r3, [r7, #8]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d118      	bne.n	800f0e2 <vPortFree+0x82>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800f0b0:	68bb      	ldr	r3, [r7, #8]
 800f0b2:	685b      	ldr	r3, [r3, #4]
 800f0b4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800f0b8:	68bb      	ldr	r3, [r7, #8]
 800f0ba:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800f0bc:	f7fe fa98 	bl	800d5f0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800f0c0:	68bb      	ldr	r3, [r7, #8]
 800f0c2:	685a      	ldr	r2, [r3, #4]
 800f0c4:	4b09      	ldr	r3, [pc, #36]	@ (800f0ec <vPortFree+0x8c>)
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	4413      	add	r3, r2
 800f0ca:	4a08      	ldr	r2, [pc, #32]	@ (800f0ec <vPortFree+0x8c>)
 800f0cc:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f0ce:	68b8      	ldr	r0, [r7, #8]
 800f0d0:	f000 f86e 	bl	800f1b0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800f0d4:	4b06      	ldr	r3, [pc, #24]	@ (800f0f0 <vPortFree+0x90>)
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	3301      	adds	r3, #1
 800f0da:	4a05      	ldr	r2, [pc, #20]	@ (800f0f0 <vPortFree+0x90>)
 800f0dc:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800f0de:	f7fe fa95 	bl	800d60c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800f0e2:	bf00      	nop
 800f0e4:	3710      	adds	r7, #16
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	bd80      	pop	{r7, pc}
 800f0ea:	bf00      	nop
 800f0ec:	2005a648 	.word	0x2005a648
 800f0f0:	2005a654 	.word	0x2005a654

0800f0f4 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800f0f4:	b480      	push	{r7}
 800f0f6:	b085      	sub	sp, #20
 800f0f8:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f0fa:	4b27      	ldr	r3, [pc, #156]	@ (800f198 <prvHeapInit+0xa4>)
 800f0fc:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800f0fe:	4b27      	ldr	r3, [pc, #156]	@ (800f19c <prvHeapInit+0xa8>)
 800f100:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	f003 0307 	and.w	r3, r3, #7
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d00c      	beq.n	800f126 <prvHeapInit+0x32>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	3307      	adds	r3, #7
 800f110:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	f023 0307 	bic.w	r3, r3, #7
 800f118:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 800f11a:	68ba      	ldr	r2, [r7, #8]
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	1ad3      	subs	r3, r2, r3
 800f120:	4a1e      	ldr	r2, [pc, #120]	@ (800f19c <prvHeapInit+0xa8>)
 800f122:	4413      	add	r3, r2
 800f124:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f12a:	4a1d      	ldr	r2, [pc, #116]	@ (800f1a0 <prvHeapInit+0xac>)
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800f130:	4b1b      	ldr	r3, [pc, #108]	@ (800f1a0 <prvHeapInit+0xac>)
 800f132:	2200      	movs	r2, #0
 800f134:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ( pucAlignedHeap + xTotalHeapSize );
 800f136:	687a      	ldr	r2, [r7, #4]
 800f138:	68bb      	ldr	r3, [r7, #8]
 800f13a:	4413      	add	r3, r2
 800f13c:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800f13e:	2208      	movs	r2, #8
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	1a9b      	subs	r3, r3, r2
 800f144:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	f023 0307 	bic.w	r3, r3, #7
 800f14c:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	4a14      	ldr	r2, [pc, #80]	@ (800f1a4 <prvHeapInit+0xb0>)
 800f152:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800f154:	4b13      	ldr	r3, [pc, #76]	@ (800f1a4 <prvHeapInit+0xb0>)
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	2200      	movs	r2, #0
 800f15a:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800f15c:	4b11      	ldr	r3, [pc, #68]	@ (800f1a4 <prvHeapInit+0xb0>)
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	2200      	movs	r2, #0
 800f162:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800f168:	683b      	ldr	r3, [r7, #0]
 800f16a:	68fa      	ldr	r2, [r7, #12]
 800f16c:	1ad2      	subs	r2, r2, r3
 800f16e:	683b      	ldr	r3, [r7, #0]
 800f170:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f172:	4b0c      	ldr	r3, [pc, #48]	@ (800f1a4 <prvHeapInit+0xb0>)
 800f174:	681a      	ldr	r2, [r3, #0]
 800f176:	683b      	ldr	r3, [r7, #0]
 800f178:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f17a:	683b      	ldr	r3, [r7, #0]
 800f17c:	685b      	ldr	r3, [r3, #4]
 800f17e:	4a0a      	ldr	r2, [pc, #40]	@ (800f1a8 <prvHeapInit+0xb4>)
 800f180:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f182:	683b      	ldr	r3, [r7, #0]
 800f184:	685b      	ldr	r3, [r3, #4]
 800f186:	4a09      	ldr	r2, [pc, #36]	@ (800f1ac <prvHeapInit+0xb8>)
 800f188:	6013      	str	r3, [r2, #0]
}
 800f18a:	bf00      	nop
 800f18c:	3714      	adds	r7, #20
 800f18e:	46bd      	mov	sp, r7
 800f190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f194:	4770      	bx	lr
 800f196:	bf00      	nop
 800f198:	00013880 	.word	0x00013880
 800f19c:	20046dbc 	.word	0x20046dbc
 800f1a0:	2005a63c 	.word	0x2005a63c
 800f1a4:	2005a644 	.word	0x2005a644
 800f1a8:	2005a64c 	.word	0x2005a64c
 800f1ac:	2005a648 	.word	0x2005a648

0800f1b0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800f1b0:	b480      	push	{r7}
 800f1b2:	b085      	sub	sp, #20
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f1b8:	4b28      	ldr	r3, [pc, #160]	@ (800f25c <prvInsertBlockIntoFreeList+0xac>)
 800f1ba:	60fb      	str	r3, [r7, #12]
 800f1bc:	e002      	b.n	800f1c4 <prvInsertBlockIntoFreeList+0x14>
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	60fb      	str	r3, [r7, #12]
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	687a      	ldr	r2, [r7, #4]
 800f1ca:	429a      	cmp	r2, r3
 800f1cc:	d8f7      	bhi.n	800f1be <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	685b      	ldr	r3, [r3, #4]
 800f1d6:	68ba      	ldr	r2, [r7, #8]
 800f1d8:	4413      	add	r3, r2
 800f1da:	687a      	ldr	r2, [r7, #4]
 800f1dc:	429a      	cmp	r2, r3
 800f1de:	d108      	bne.n	800f1f2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	685a      	ldr	r2, [r3, #4]
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	685b      	ldr	r3, [r3, #4]
 800f1e8:	441a      	add	r2, r3
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	685b      	ldr	r3, [r3, #4]
 800f1fa:	68ba      	ldr	r2, [r7, #8]
 800f1fc:	441a      	add	r2, r3
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	429a      	cmp	r2, r3
 800f204:	d118      	bne.n	800f238 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	681a      	ldr	r2, [r3, #0]
 800f20a:	4b15      	ldr	r3, [pc, #84]	@ (800f260 <prvInsertBlockIntoFreeList+0xb0>)
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	429a      	cmp	r2, r3
 800f210:	d00d      	beq.n	800f22e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	685a      	ldr	r2, [r3, #4]
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	685b      	ldr	r3, [r3, #4]
 800f21c:	441a      	add	r2, r3
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	681a      	ldr	r2, [r3, #0]
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	601a      	str	r2, [r3, #0]
 800f22c:	e008      	b.n	800f240 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f22e:	4b0c      	ldr	r3, [pc, #48]	@ (800f260 <prvInsertBlockIntoFreeList+0xb0>)
 800f230:	681a      	ldr	r2, [r3, #0]
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	601a      	str	r2, [r3, #0]
 800f236:	e003      	b.n	800f240 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	681a      	ldr	r2, [r3, #0]
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800f240:	68fa      	ldr	r2, [r7, #12]
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	429a      	cmp	r2, r3
 800f246:	d002      	beq.n	800f24e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	687a      	ldr	r2, [r7, #4]
 800f24c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800f24e:	bf00      	nop
 800f250:	3714      	adds	r7, #20
 800f252:	46bd      	mov	sp, r7
 800f254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f258:	4770      	bx	lr
 800f25a:	bf00      	nop
 800f25c:	2005a63c 	.word	0x2005a63c
 800f260:	2005a644 	.word	0x2005a644

0800f264 <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 800f264:	b480      	push	{r7}
 800f266:	af00      	add	r7, sp, #0
}
 800f268:	bf00      	nop
 800f26a:	46bd      	mov	sp, r7
 800f26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f270:	4770      	bx	lr

0800f272 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800f272:	b580      	push	{r7, lr}
 800f274:	af00      	add	r7, sp, #0
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 800f276:	f003 fee7 	bl	8013048 <touchgfx_components_init>
    touchgfx_init();
 800f27a:	f003 feb3 	bl	8012fe4 <touchgfx_init>
}
 800f27e:	bf00      	nop
 800f280:	bd80      	pop	{r7, pc}

0800f282 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 800f282:	b580      	push	{r7, lr}
 800f284:	af00      	add	r7, sp, #0
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 800f286:	f003 fee7 	bl	8013058 <touchgfx_taskEntry>
}
 800f28a:	bf00      	nop
 800f28c:	bd80      	pop	{r7, pc}
	...

0800f290 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800f290:	b480      	push	{r7}
 800f292:	b083      	sub	sp, #12
 800f294:	af00      	add	r7, sp, #0
 800f296:	6078      	str	r0, [r7, #4]
    {
 800f298:	4a04      	ldr	r2, [pc, #16]	@ (800f2ac <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	601a      	str	r2, [r3, #0]
    }
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	370c      	adds	r7, #12
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2aa:	4770      	bx	lr
 800f2ac:	0802ea9c 	.word	0x0802ea9c

0800f2b0 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b082      	sub	sp, #8
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
    }
 800f2b8:	6878      	ldr	r0, [r7, #4]
 800f2ba:	f7ff ffe9 	bl	800f290 <_ZN8touchgfx12FontProviderD1Ev>
 800f2be:	2104      	movs	r1, #4
 800f2c0:	6878      	ldr	r0, [r7, #4]
 800f2c2:	f01c fce2 	bl	802bc8a <_ZdlPvj>
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	3708      	adds	r7, #8
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	bd80      	pop	{r7, pc}

0800f2d0 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b082      	sub	sp, #8
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	6078      	str	r0, [r7, #4]
 800f2d8:	460b      	mov	r3, r1
 800f2da:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800f2dc:	887b      	ldrh	r3, [r7, #2]
 800f2de:	2b02      	cmp	r3, #2
 800f2e0:	d010      	beq.n	800f304 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 800f2e2:	2b02      	cmp	r3, #2
 800f2e4:	dc13      	bgt.n	800f30e <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d002      	beq.n	800f2f0 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 800f2ea:	2b01      	cmp	r3, #1
 800f2ec:	d005      	beq.n	800f2fa <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 800f2ee:	e00e      	b.n	800f30e <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800f2f0:	f001 fea6 	bl	8011040 <_ZN17TypedTextDatabase8getFontsEv>
 800f2f4:	4603      	mov	r3, r0
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	e00a      	b.n	800f310 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800f2fa:	f001 fea1 	bl	8011040 <_ZN17TypedTextDatabase8getFontsEv>
 800f2fe:	4603      	mov	r3, r0
 800f300:	685b      	ldr	r3, [r3, #4]
 800f302:	e005      	b.n	800f310 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800f304:	f001 fe9c 	bl	8011040 <_ZN17TypedTextDatabase8getFontsEv>
 800f308:	4603      	mov	r3, r0
 800f30a:	689b      	ldr	r3, [r3, #8]
 800f30c:	e000      	b.n	800f310 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 800f30e:	2300      	movs	r3, #0
    }
}
 800f310:	4618      	mov	r0, r3
 800f312:	3708      	adds	r7, #8
 800f314:	46bd      	mov	sp, r7
 800f316:	bd80      	pop	{r7, pc}

0800f318 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800f318:	b580      	push	{r7, lr}
 800f31a:	b082      	sub	sp, #8
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	6078      	str	r0, [r7, #4]
 800f320:	4a05      	ldr	r2, [pc, #20]	@ (800f338 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	601a      	str	r2, [r3, #0]
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	4618      	mov	r0, r3
 800f32a:	f7ff ffb1 	bl	800f290 <_ZN8touchgfx12FontProviderD1Ev>
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	4618      	mov	r0, r3
 800f332:	3708      	adds	r7, #8
 800f334:	46bd      	mov	sp, r7
 800f336:	bd80      	pop	{r7, pc}
 800f338:	0802ea88 	.word	0x0802ea88

0800f33c <_ZN23ApplicationFontProviderD0Ev>:
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b082      	sub	sp, #8
 800f340:	af00      	add	r7, sp, #0
 800f342:	6078      	str	r0, [r7, #4]
 800f344:	6878      	ldr	r0, [r7, #4]
 800f346:	f7ff ffe7 	bl	800f318 <_ZN23ApplicationFontProviderD1Ev>
 800f34a:	2104      	movs	r1, #4
 800f34c:	6878      	ldr	r0, [r7, #4]
 800f34e:	f01c fc9c 	bl	802bc8a <_ZdlPvj>
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	4618      	mov	r0, r3
 800f356:	3708      	adds	r7, #8
 800f358:	46bd      	mov	sp, r7
 800f35a:	bd80      	pop	{r7, pc}

0800f35c <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800f35c:	b480      	push	{r7}
 800f35e:	b083      	sub	sp, #12
 800f360:	af00      	add	r7, sp, #0
 800f362:	6078      	str	r0, [r7, #4]
    {
 800f364:	4a04      	ldr	r2, [pc, #16]	@ (800f378 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	601a      	str	r2, [r3, #0]
    }
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	4618      	mov	r0, r3
 800f36e:	370c      	adds	r7, #12
 800f370:	46bd      	mov	sp, r7
 800f372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f376:	4770      	bx	lr
 800f378:	0802ed58 	.word	0x0802ed58

0800f37c <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b082      	sub	sp, #8
 800f380:	af00      	add	r7, sp, #0
 800f382:	6078      	str	r0, [r7, #4]
    }
 800f384:	6878      	ldr	r0, [r7, #4]
 800f386:	f7ff ffe9 	bl	800f35c <_ZN8touchgfx4FontD1Ev>
 800f38a:	2114      	movs	r1, #20
 800f38c:	6878      	ldr	r0, [r7, #4]
 800f38e:	f01c fc7c 	bl	802bc8a <_ZdlPvj>
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	4618      	mov	r0, r3
 800f396:	3708      	adds	r7, #8
 800f398:	46bd      	mov	sp, r7
 800f39a:	bd80      	pop	{r7, pc}

0800f39c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800f39c:	b590      	push	{r4, r7, lr}
 800f39e:	b087      	sub	sp, #28
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]
 800f3a4:	460b      	mov	r3, r1
 800f3a6:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800f3a8:	887b      	ldrh	r3, [r7, #2]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d101      	bne.n	800f3b2 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	e010      	b.n	800f3d4 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	3308      	adds	r3, #8
 800f3c0:	681c      	ldr	r4, [r3, #0]
 800f3c2:	f107 030f 	add.w	r3, r7, #15
 800f3c6:	f107 0210 	add.w	r2, r7, #16
 800f3ca:	8879      	ldrh	r1, [r7, #2]
 800f3cc:	6878      	ldr	r0, [r7, #4]
 800f3ce:	47a0      	blx	r4
 800f3d0:	6178      	str	r0, [r7, #20]
        return glyph;
 800f3d2:	697b      	ldr	r3, [r7, #20]
    }
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	371c      	adds	r7, #28
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	bd90      	pop	{r4, r7, pc}

0800f3dc <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800f3dc:	b480      	push	{r7}
 800f3de:	b083      	sub	sp, #12
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	89db      	ldrh	r3, [r3, #14]
    }
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	370c      	adds	r7, #12
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f2:	4770      	bx	lr

0800f3f4 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800f3f4:	b480      	push	{r7}
 800f3f6:	b083      	sub	sp, #12
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	8a1b      	ldrh	r3, [r3, #16]
    }
 800f400:	4618      	mov	r0, r3
 800f402:	370c      	adds	r7, #12
 800f404:	46bd      	mov	sp, r7
 800f406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f40a:	4770      	bx	lr

0800f40c <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The baseline position.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 800f40c:	b480      	push	{r7}
 800f40e:	b083      	sub	sp, #12
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	88db      	ldrh	r3, [r3, #6]
    }
 800f418:	4618      	mov	r0, r3
 800f41a:	370c      	adds	r7, #12
 800f41c:	46bd      	mov	sp, r7
 800f41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f422:	4770      	bx	lr

0800f424 <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 800f424:	b480      	push	{r7}
 800f426:	b083      	sub	sp, #12
 800f428:	af00      	add	r7, sp, #0
 800f42a:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	889b      	ldrh	r3, [r3, #4]
    }
 800f430:	4618      	mov	r0, r3
 800f432:	370c      	adds	r7, #12
 800f434:	46bd      	mov	sp, r7
 800f436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f43a:	4770      	bx	lr

0800f43c <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800f43c:	b480      	push	{r7}
 800f43e:	b083      	sub	sp, #12
 800f440:	af00      	add	r7, sp, #0
 800f442:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	7a9b      	ldrb	r3, [r3, #10]
 800f448:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800f44c:	b2db      	uxtb	r3, r3
    }
 800f44e:	4618      	mov	r0, r3
 800f450:	370c      	adds	r7, #12
 800f452:	46bd      	mov	sp, r7
 800f454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f458:	4770      	bx	lr

0800f45a <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800f45a:	b480      	push	{r7}
 800f45c:	b083      	sub	sp, #12
 800f45e:	af00      	add	r7, sp, #0
 800f460:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	7a9b      	ldrb	r3, [r3, #10]
 800f466:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800f46a:	b2db      	uxtb	r3, r3
    }
 800f46c:	4618      	mov	r0, r3
 800f46e:	370c      	adds	r7, #12
 800f470:	46bd      	mov	sp, r7
 800f472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f476:	4770      	bx	lr

0800f478 <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
    /**
     * Returns true if this Font is vector based. Default is false.
     *
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
 800f478:	b480      	push	{r7}
 800f47a:	b083      	sub	sp, #12
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	6078      	str	r0, [r7, #4]
    {
        return false;
 800f480:	2300      	movs	r3, #0
    }
 800f482:	4618      	mov	r0, r3
 800f484:	370c      	adds	r7, #12
 800f486:	46bd      	mov	sp, r7
 800f488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48c:	4770      	bx	lr

0800f48e <_ZNK8touchgfx4Font14getScaleFactorEv>:
    /**
     * Returns the scale factor
     *
     * @return The scale factor
     */
    virtual float getScaleFactor() const
 800f48e:	b480      	push	{r7}
 800f490:	b083      	sub	sp, #12
 800f492:	af00      	add	r7, sp, #0
 800f494:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800f496:	f04f 0300 	mov.w	r3, #0
 800f49a:	ee07 3a90 	vmov	s15, r3
    }
 800f49e:	eeb0 0a67 	vmov.f32	s0, s15
 800f4a2:	370c      	adds	r7, #12
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4aa:	4770      	bx	lr

0800f4ac <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b082      	sub	sp, #8
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
 800f4b4:	4a05      	ldr	r2, [pc, #20]	@ (800f4cc <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	601a      	str	r2, [r3, #0]
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	4618      	mov	r0, r3
 800f4be:	f7ff ff4d 	bl	800f35c <_ZN8touchgfx4FontD1Ev>
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	3708      	adds	r7, #8
 800f4c8:	46bd      	mov	sp, r7
 800f4ca:	bd80      	pop	{r7, pc}
 800f4cc:	0802fb4c 	.word	0x0802fb4c

0800f4d0 <_ZN8touchgfx9ConstFontD0Ev>:
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b082      	sub	sp, #8
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
 800f4d8:	6878      	ldr	r0, [r7, #4]
 800f4da:	f7ff ffe7 	bl	800f4ac <_ZN8touchgfx9ConstFontD1Ev>
 800f4de:	211c      	movs	r1, #28
 800f4e0:	6878      	ldr	r0, [r7, #4]
 800f4e2:	f01c fbd2 	bl	802bc8a <_ZdlPvj>
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	3708      	adds	r7, #8
 800f4ec:	46bd      	mov	sp, r7
 800f4ee:	bd80      	pop	{r7, pc}

0800f4f0 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b082      	sub	sp, #8
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
 800f4f8:	4a05      	ldr	r2, [pc, #20]	@ (800f510 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	601a      	str	r2, [r3, #0]
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	4618      	mov	r0, r3
 800f502:	f7ff ffd3 	bl	800f4ac <_ZN8touchgfx9ConstFontD1Ev>
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	4618      	mov	r0, r3
 800f50a:	3708      	adds	r7, #8
 800f50c:	46bd      	mov	sp, r7
 800f50e:	bd80      	pop	{r7, pc}
 800f510:	0802eab0 	.word	0x0802eab0

0800f514 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800f514:	b580      	push	{r7, lr}
 800f516:	b082      	sub	sp, #8
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
 800f51c:	6878      	ldr	r0, [r7, #4]
 800f51e:	f7ff ffe7 	bl	800f4f0 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f522:	212c      	movs	r1, #44	@ 0x2c
 800f524:	6878      	ldr	r0, [r7, #4]
 800f526:	f01c fbb0 	bl	802bc8a <_ZdlPvj>
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	4618      	mov	r0, r3
 800f52e:	3708      	adds	r7, #8
 800f530:	46bd      	mov	sp, r7
 800f532:	bd80      	pop	{r7, pc}

0800f534 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800f534:	b480      	push	{r7}
 800f536:	af00      	add	r7, sp, #0
    {
        return instance;
 800f538:	4b03      	ldr	r3, [pc, #12]	@ (800f548 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800f53a:	681b      	ldr	r3, [r3, #0]
    }
 800f53c:	4618      	mov	r0, r3
 800f53e:	46bd      	mov	sp, r7
 800f540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f544:	4770      	bx	lr
 800f546:	bf00      	nop
 800f548:	2005ba7c 	.word	0x2005ba7c

0800f54c <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 800f54c:	b480      	push	{r7}
 800f54e:	b083      	sub	sp, #12
 800f550:	af00      	add	r7, sp, #0
 800f552:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 800f558:	4618      	mov	r0, r3
 800f55a:	370c      	adds	r7, #12
 800f55c:	46bd      	mov	sp, r7
 800f55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f562:	4770      	bx	lr

0800f564 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800f564:	b480      	push	{r7}
 800f566:	b083      	sub	sp, #12
 800f568:	af00      	add	r7, sp, #0
 800f56a:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    }
 800f570:	4618      	mov	r0, r3
 800f572:	370c      	adds	r7, #12
 800f574:	46bd      	mov	sp, r7
 800f576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57a:	4770      	bx	lr

0800f57c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
#include <math.h>
#include <stddef.h>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b08e      	sub	sp, #56	@ 0x38
 800f580:	af0a      	add	r7, sp, #40	@ 0x28
 800f582:	60f8      	str	r0, [r7, #12]
 800f584:	60b9      	str	r1, [r7, #8]
 800f586:	4611      	mov	r1, r2
 800f588:	461a      	mov	r2, r3
 800f58a:	460b      	mov	r3, r1
 800f58c:	80fb      	strh	r3, [r7, #6]
 800f58e:	4613      	mov	r3, r2
 800f590:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800f592:	68f8      	ldr	r0, [r7, #12]
 800f594:	88b9      	ldrh	r1, [r7, #4]
 800f596:	88fa      	ldrh	r2, [r7, #6]
 800f598:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800f59c:	9308      	str	r3, [sp, #32]
 800f59e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f5a0:	9307      	str	r3, [sp, #28]
 800f5a2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800f5a6:	9306      	str	r3, [sp, #24]
 800f5a8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800f5ac:	9305      	str	r3, [sp, #20]
 800f5ae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f5b2:	9304      	str	r3, [sp, #16]
 800f5b4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f5b8:	9303      	str	r3, [sp, #12]
 800f5ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f5be:	9302      	str	r3, [sp, #8]
 800f5c0:	7f3b      	ldrb	r3, [r7, #28]
 800f5c2:	9301      	str	r3, [sp, #4]
 800f5c4:	8b3b      	ldrh	r3, [r7, #24]
 800f5c6:	9300      	str	r3, [sp, #0]
 800f5c8:	460b      	mov	r3, r1
 800f5ca:	68b9      	ldr	r1, [r7, #8]
 800f5cc:	f00b ff20 	bl	801b410 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 800f5d0:	4a09      	ldr	r2, [pc, #36]	@ (800f5f8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	601a      	str	r2, [r3, #0]
      glyphData(glyphDataInternalFlash),
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f5da:	61da      	str	r2, [r3, #28]
      kerningData(kerningList),
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f5e0:	621a      	str	r2, [r3, #32]
      gsubTable(gsubData),
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f5e6:	625a      	str	r2, [r3, #36]	@ 0x24
      arabicTable(formsTable)
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f5ec:	629a      	str	r2, [r3, #40]	@ 0x28
{
}
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	4618      	mov	r0, r3
 800f5f2:	3710      	adds	r7, #16
 800f5f4:	46bd      	mov	sp, r7
 800f5f6:	bd80      	pop	{r7, pc}
 800f5f8:	0802eab0 	.word	0x0802eab0

0800f5fc <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800f5fc:	b480      	push	{r7}
 800f5fe:	b087      	sub	sp, #28
 800f600:	af00      	add	r7, sp, #0
 800f602:	6078      	str	r0, [r7, #4]
 800f604:	6039      	str	r1, [r7, #0]
    // Read dataOffset as 16bit, as it may be unaligned
    volatile const uint16_t* dataOffset = (const uint16_t*)((const uint8_t*)glyph + offsetof(GlyphNode, dataOffset));
 800f606:	683b      	ldr	r3, [r7, #0]
 800f608:	617b      	str	r3, [r7, #20]
    uint32_t offset = dataOffset[0];
 800f60a:	697b      	ldr	r3, [r7, #20]
 800f60c:	881b      	ldrh	r3, [r3, #0]
 800f60e:	b29b      	uxth	r3, r3
 800f610:	613b      	str	r3, [r7, #16]
    offset |= dataOffset[1] << 16;
 800f612:	697b      	ldr	r3, [r7, #20]
 800f614:	3302      	adds	r3, #2
 800f616:	881b      	ldrh	r3, [r3, #0]
 800f618:	b29b      	uxth	r3, r3
 800f61a:	041b      	lsls	r3, r3, #16
 800f61c:	461a      	mov	r2, r3
 800f61e:	693b      	ldr	r3, [r7, #16]
 800f620:	4313      	orrs	r3, r2
 800f622:	613b      	str	r3, [r7, #16]

    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	69db      	ldr	r3, [r3, #28]
 800f628:	60fb      	str	r3, [r7, #12]
    const uint8_t* pixels = table[glyph->unicode / 2048];
 800f62a:	683b      	ldr	r3, [r7, #0]
 800f62c:	889b      	ldrh	r3, [r3, #4]
 800f62e:	0adb      	lsrs	r3, r3, #11
 800f630:	b29b      	uxth	r3, r3
 800f632:	009b      	lsls	r3, r3, #2
 800f634:	68fa      	ldr	r2, [r7, #12]
 800f636:	4413      	add	r3, r2
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	60bb      	str	r3, [r7, #8]
    return pixels + offset;
 800f63c:	68ba      	ldr	r2, [r7, #8]
 800f63e:	693b      	ldr	r3, [r7, #16]
 800f640:	4413      	add	r3, r2
}
 800f642:	4618      	mov	r0, r3
 800f644:	371c      	adds	r7, #28
 800f646:	46bd      	mov	sp, r7
 800f648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f64c:	4770      	bx	lr

0800f64e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800f64e:	b480      	push	{r7}
 800f650:	b089      	sub	sp, #36	@ 0x24
 800f652:	af00      	add	r7, sp, #0
 800f654:	60f8      	str	r0, [r7, #12]
 800f656:	460b      	mov	r3, r1
 800f658:	607a      	str	r2, [r7, #4]
 800f65a:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d003      	beq.n	800f66a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	7b1b      	ldrb	r3, [r3, #12]
 800f666:	2b00      	cmp	r3, #0
 800f668:	d101      	bne.n	800f66e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800f66a:	2300      	movs	r3, #0
 800f66c:	e032      	b.n	800f6d4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x86>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	6a1a      	ldr	r2, [r3, #32]
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800f676:	697b      	ldr	r3, [r7, #20]
 800f678:	7b5b      	ldrb	r3, [r3, #13]
 800f67a:	b21b      	sxth	r3, r3
 800f67c:	021b      	lsls	r3, r3, #8
 800f67e:	b21b      	sxth	r3, r3
 800f680:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f684:	b219      	sxth	r1, r3
 800f686:	697b      	ldr	r3, [r7, #20]
 800f688:	7adb      	ldrb	r3, [r3, #11]
 800f68a:	b21b      	sxth	r3, r3
 800f68c:	430b      	orrs	r3, r1
 800f68e:	b21b      	sxth	r3, r3
 800f690:	b29b      	uxth	r3, r3
 800f692:	009b      	lsls	r3, r3, #2
 800f694:	4413      	add	r3, r2
 800f696:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	7b1b      	ldrb	r3, [r3, #12]
 800f69c:	837b      	strh	r3, [r7, #26]
 800f69e:	e013      	b.n	800f6c8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7a>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800f6a0:	69fb      	ldr	r3, [r7, #28]
 800f6a2:	881b      	ldrh	r3, [r3, #0]
 800f6a4:	897a      	ldrh	r2, [r7, #10]
 800f6a6:	429a      	cmp	r2, r3
 800f6a8:	d103      	bne.n	800f6b2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x64>
        {
            return kerndata->distance;
 800f6aa:	69fb      	ldr	r3, [r7, #28]
 800f6ac:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800f6b0:	e010      	b.n	800f6d4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x86>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800f6b2:	69fb      	ldr	r3, [r7, #28]
 800f6b4:	881b      	ldrh	r3, [r3, #0]
 800f6b6:	897a      	ldrh	r2, [r7, #10]
 800f6b8:	429a      	cmp	r2, r3
 800f6ba:	d309      	bcc.n	800f6d0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800f6bc:	8b7b      	ldrh	r3, [r7, #26]
 800f6be:	3b01      	subs	r3, #1
 800f6c0:	837b      	strh	r3, [r7, #26]
 800f6c2:	69fb      	ldr	r3, [r7, #28]
 800f6c4:	3304      	adds	r3, #4
 800f6c6:	61fb      	str	r3, [r7, #28]
 800f6c8:	8b7b      	ldrh	r3, [r7, #26]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d1e8      	bne.n	800f6a0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x52>
 800f6ce:	e000      	b.n	800f6d2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
        {
            break;
 800f6d0:	bf00      	nop
        }
    }
    return 0;
 800f6d2:	2300      	movs	r3, #0
}
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	3724      	adds	r7, #36	@ 0x24
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6de:	4770      	bx	lr

0800f6e0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800f6e0:	b580      	push	{r7, lr}
 800f6e2:	af00      	add	r7, sp, #0
 800f6e4:	4801      	ldr	r0, [pc, #4]	@ (800f6ec <__tcf_0+0xc>)
 800f6e6:	f7ff ff03 	bl	800f4f0 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f6ea:	bd80      	pop	{r7, pc}
 800f6ec:	2005a658 	.word	0x2005a658

0800f6f0 <_Z23getFont_verdana_10_4bppv>:
{
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	b08e      	sub	sp, #56	@ 0x38
 800f6f4:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800f6f6:	4b20      	ldr	r3, [pc, #128]	@ (800f778 <_Z23getFont_verdana_10_4bppv+0x88>)
 800f6f8:	e8d3 3faf 	lda	r3, [r3]
 800f6fc:	f003 0301 	and.w	r3, r3, #1
 800f700:	2b00      	cmp	r3, #0
 800f702:	bf0c      	ite	eq
 800f704:	2301      	moveq	r3, #1
 800f706:	2300      	movne	r3, #0
 800f708:	b2db      	uxtb	r3, r3
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d030      	beq.n	800f770 <_Z23getFont_verdana_10_4bppv+0x80>
 800f70e:	481a      	ldr	r0, [pc, #104]	@ (800f778 <_Z23getFont_verdana_10_4bppv+0x88>)
 800f710:	f01c fabd 	bl	802bc8e <__cxa_guard_acquire>
 800f714:	4603      	mov	r3, r0
 800f716:	2b00      	cmp	r3, #0
 800f718:	bf14      	ite	ne
 800f71a:	2301      	movne	r3, #1
 800f71c:	2300      	moveq	r3, #0
 800f71e:	b2db      	uxtb	r3, r3
 800f720:	2b00      	cmp	r3, #0
 800f722:	d025      	beq.n	800f770 <_Z23getFont_verdana_10_4bppv+0x80>
 800f724:	2300      	movs	r3, #0
 800f726:	930c      	str	r3, [sp, #48]	@ 0x30
 800f728:	2300      	movs	r3, #0
 800f72a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f72c:	2300      	movs	r3, #0
 800f72e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f730:	233f      	movs	r3, #63	@ 0x3f
 800f732:	9309      	str	r3, [sp, #36]	@ 0x24
 800f734:	4b11      	ldr	r3, [pc, #68]	@ (800f77c <_Z23getFont_verdana_10_4bppv+0x8c>)
 800f736:	9308      	str	r3, [sp, #32]
 800f738:	4b11      	ldr	r3, [pc, #68]	@ (800f780 <_Z23getFont_verdana_10_4bppv+0x90>)
 800f73a:	9307      	str	r3, [sp, #28]
 800f73c:	2300      	movs	r3, #0
 800f73e:	9306      	str	r3, [sp, #24]
 800f740:	2300      	movs	r3, #0
 800f742:	9305      	str	r3, [sp, #20]
 800f744:	2301      	movs	r3, #1
 800f746:	9304      	str	r3, [sp, #16]
 800f748:	2304      	movs	r3, #4
 800f74a:	9303      	str	r3, [sp, #12]
 800f74c:	2300      	movs	r3, #0
 800f74e:	9302      	str	r3, [sp, #8]
 800f750:	2300      	movs	r3, #0
 800f752:	9301      	str	r3, [sp, #4]
 800f754:	230a      	movs	r3, #10
 800f756:	9300      	str	r3, [sp, #0]
 800f758:	230a      	movs	r3, #10
 800f75a:	2201      	movs	r2, #1
 800f75c:	4909      	ldr	r1, [pc, #36]	@ (800f784 <_Z23getFont_verdana_10_4bppv+0x94>)
 800f75e:	480a      	ldr	r0, [pc, #40]	@ (800f788 <_Z23getFont_verdana_10_4bppv+0x98>)
 800f760:	f7ff ff0c 	bl	800f57c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800f764:	4809      	ldr	r0, [pc, #36]	@ (800f78c <_Z23getFont_verdana_10_4bppv+0x9c>)
 800f766:	f01d f9a3 	bl	802cab0 <atexit>
 800f76a:	4803      	ldr	r0, [pc, #12]	@ (800f778 <_Z23getFont_verdana_10_4bppv+0x88>)
 800f76c:	f01c fa9b 	bl	802bca6 <__cxa_guard_release>
    return verdana_10_4bpp;
 800f770:	4b05      	ldr	r3, [pc, #20]	@ (800f788 <_Z23getFont_verdana_10_4bppv+0x98>)
}
 800f772:	4618      	mov	r0, r3
 800f774:	46bd      	mov	sp, r7
 800f776:	bd80      	pop	{r7, pc}
 800f778:	2005a684 	.word	0x2005a684
 800f77c:	08030548 	.word	0x08030548
 800f780:	08030554 	.word	0x08030554
 800f784:	08030518 	.word	0x08030518
 800f788:	2005a658 	.word	0x2005a658
 800f78c:	0800f6e1 	.word	0x0800f6e1

0800f790 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800f790:	b580      	push	{r7, lr}
 800f792:	af00      	add	r7, sp, #0
 800f794:	4801      	ldr	r0, [pc, #4]	@ (800f79c <__tcf_0+0xc>)
 800f796:	f7ff feab 	bl	800f4f0 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f79a:	bd80      	pop	{r7, pc}
 800f79c:	2005a688 	.word	0x2005a688

0800f7a0 <_Z23getFont_verdana_20_4bppv>:
{
 800f7a0:	b580      	push	{r7, lr}
 800f7a2:	b08e      	sub	sp, #56	@ 0x38
 800f7a4:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800f7a6:	4b20      	ldr	r3, [pc, #128]	@ (800f828 <_Z23getFont_verdana_20_4bppv+0x88>)
 800f7a8:	e8d3 3faf 	lda	r3, [r3]
 800f7ac:	f003 0301 	and.w	r3, r3, #1
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	bf0c      	ite	eq
 800f7b4:	2301      	moveq	r3, #1
 800f7b6:	2300      	movne	r3, #0
 800f7b8:	b2db      	uxtb	r3, r3
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d030      	beq.n	800f820 <_Z23getFont_verdana_20_4bppv+0x80>
 800f7be:	481a      	ldr	r0, [pc, #104]	@ (800f828 <_Z23getFont_verdana_20_4bppv+0x88>)
 800f7c0:	f01c fa65 	bl	802bc8e <__cxa_guard_acquire>
 800f7c4:	4603      	mov	r3, r0
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	bf14      	ite	ne
 800f7ca:	2301      	movne	r3, #1
 800f7cc:	2300      	moveq	r3, #0
 800f7ce:	b2db      	uxtb	r3, r3
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d025      	beq.n	800f820 <_Z23getFont_verdana_20_4bppv+0x80>
 800f7d4:	2300      	movs	r3, #0
 800f7d6:	930c      	str	r3, [sp, #48]	@ 0x30
 800f7d8:	2300      	movs	r3, #0
 800f7da:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f7dc:	2300      	movs	r3, #0
 800f7de:	930a      	str	r3, [sp, #40]	@ 0x28
 800f7e0:	233f      	movs	r3, #63	@ 0x3f
 800f7e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800f7e4:	4b11      	ldr	r3, [pc, #68]	@ (800f82c <_Z23getFont_verdana_20_4bppv+0x8c>)
 800f7e6:	9308      	str	r3, [sp, #32]
 800f7e8:	4b11      	ldr	r3, [pc, #68]	@ (800f830 <_Z23getFont_verdana_20_4bppv+0x90>)
 800f7ea:	9307      	str	r3, [sp, #28]
 800f7ec:	2300      	movs	r3, #0
 800f7ee:	9306      	str	r3, [sp, #24]
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	9305      	str	r3, [sp, #20]
 800f7f4:	2301      	movs	r3, #1
 800f7f6:	9304      	str	r3, [sp, #16]
 800f7f8:	2304      	movs	r3, #4
 800f7fa:	9303      	str	r3, [sp, #12]
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	9302      	str	r3, [sp, #8]
 800f800:	2300      	movs	r3, #0
 800f802:	9301      	str	r3, [sp, #4]
 800f804:	2314      	movs	r3, #20
 800f806:	9300      	str	r3, [sp, #0]
 800f808:	2314      	movs	r3, #20
 800f80a:	2201      	movs	r2, #1
 800f80c:	4909      	ldr	r1, [pc, #36]	@ (800f834 <_Z23getFont_verdana_20_4bppv+0x94>)
 800f80e:	480a      	ldr	r0, [pc, #40]	@ (800f838 <_Z23getFont_verdana_20_4bppv+0x98>)
 800f810:	f7ff feb4 	bl	800f57c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800f814:	4809      	ldr	r0, [pc, #36]	@ (800f83c <_Z23getFont_verdana_20_4bppv+0x9c>)
 800f816:	f01d f94b 	bl	802cab0 <atexit>
 800f81a:	4803      	ldr	r0, [pc, #12]	@ (800f828 <_Z23getFont_verdana_20_4bppv+0x88>)
 800f81c:	f01c fa43 	bl	802bca6 <__cxa_guard_release>
    return verdana_20_4bpp;
 800f820:	4b05      	ldr	r3, [pc, #20]	@ (800f838 <_Z23getFont_verdana_20_4bppv+0x98>)
}
 800f822:	4618      	mov	r0, r3
 800f824:	46bd      	mov	sp, r7
 800f826:	bd80      	pop	{r7, pc}
 800f828:	2005a6b4 	.word	0x2005a6b4
 800f82c:	0803054c 	.word	0x0803054c
 800f830:	08030558 	.word	0x08030558
 800f834:	08030528 	.word	0x08030528
 800f838:	2005a688 	.word	0x2005a688
 800f83c:	0800f791 	.word	0x0800f791

0800f840 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800f840:	b580      	push	{r7, lr}
 800f842:	af00      	add	r7, sp, #0
 800f844:	4801      	ldr	r0, [pc, #4]	@ (800f84c <__tcf_0+0xc>)
 800f846:	f7ff fe53 	bl	800f4f0 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f84a:	bd80      	pop	{r7, pc}
 800f84c:	2005a6b8 	.word	0x2005a6b8

0800f850 <_Z23getFont_verdana_40_4bppv>:
{
 800f850:	b580      	push	{r7, lr}
 800f852:	b08e      	sub	sp, #56	@ 0x38
 800f854:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800f856:	4b20      	ldr	r3, [pc, #128]	@ (800f8d8 <_Z23getFont_verdana_40_4bppv+0x88>)
 800f858:	e8d3 3faf 	lda	r3, [r3]
 800f85c:	f003 0301 	and.w	r3, r3, #1
 800f860:	2b00      	cmp	r3, #0
 800f862:	bf0c      	ite	eq
 800f864:	2301      	moveq	r3, #1
 800f866:	2300      	movne	r3, #0
 800f868:	b2db      	uxtb	r3, r3
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d030      	beq.n	800f8d0 <_Z23getFont_verdana_40_4bppv+0x80>
 800f86e:	481a      	ldr	r0, [pc, #104]	@ (800f8d8 <_Z23getFont_verdana_40_4bppv+0x88>)
 800f870:	f01c fa0d 	bl	802bc8e <__cxa_guard_acquire>
 800f874:	4603      	mov	r3, r0
 800f876:	2b00      	cmp	r3, #0
 800f878:	bf14      	ite	ne
 800f87a:	2301      	movne	r3, #1
 800f87c:	2300      	moveq	r3, #0
 800f87e:	b2db      	uxtb	r3, r3
 800f880:	2b00      	cmp	r3, #0
 800f882:	d025      	beq.n	800f8d0 <_Z23getFont_verdana_40_4bppv+0x80>
 800f884:	2300      	movs	r3, #0
 800f886:	930c      	str	r3, [sp, #48]	@ 0x30
 800f888:	2300      	movs	r3, #0
 800f88a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f88c:	2300      	movs	r3, #0
 800f88e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f890:	233f      	movs	r3, #63	@ 0x3f
 800f892:	9309      	str	r3, [sp, #36]	@ 0x24
 800f894:	4b11      	ldr	r3, [pc, #68]	@ (800f8dc <_Z23getFont_verdana_40_4bppv+0x8c>)
 800f896:	9308      	str	r3, [sp, #32]
 800f898:	4b11      	ldr	r3, [pc, #68]	@ (800f8e0 <_Z23getFont_verdana_40_4bppv+0x90>)
 800f89a:	9307      	str	r3, [sp, #28]
 800f89c:	2300      	movs	r3, #0
 800f89e:	9306      	str	r3, [sp, #24]
 800f8a0:	2300      	movs	r3, #0
 800f8a2:	9305      	str	r3, [sp, #20]
 800f8a4:	2301      	movs	r3, #1
 800f8a6:	9304      	str	r3, [sp, #16]
 800f8a8:	2304      	movs	r3, #4
 800f8aa:	9303      	str	r3, [sp, #12]
 800f8ac:	2300      	movs	r3, #0
 800f8ae:	9302      	str	r3, [sp, #8]
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	9301      	str	r3, [sp, #4]
 800f8b4:	2328      	movs	r3, #40	@ 0x28
 800f8b6:	9300      	str	r3, [sp, #0]
 800f8b8:	2328      	movs	r3, #40	@ 0x28
 800f8ba:	2201      	movs	r2, #1
 800f8bc:	4909      	ldr	r1, [pc, #36]	@ (800f8e4 <_Z23getFont_verdana_40_4bppv+0x94>)
 800f8be:	480a      	ldr	r0, [pc, #40]	@ (800f8e8 <_Z23getFont_verdana_40_4bppv+0x98>)
 800f8c0:	f7ff fe5c 	bl	800f57c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800f8c4:	4809      	ldr	r0, [pc, #36]	@ (800f8ec <_Z23getFont_verdana_40_4bppv+0x9c>)
 800f8c6:	f01d f8f3 	bl	802cab0 <atexit>
 800f8ca:	4803      	ldr	r0, [pc, #12]	@ (800f8d8 <_Z23getFont_verdana_40_4bppv+0x88>)
 800f8cc:	f01c f9eb 	bl	802bca6 <__cxa_guard_release>
    return verdana_40_4bpp;
 800f8d0:	4b05      	ldr	r3, [pc, #20]	@ (800f8e8 <_Z23getFont_verdana_40_4bppv+0x98>)
}
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	bd80      	pop	{r7, pc}
 800f8d8:	2005a6e4 	.word	0x2005a6e4
 800f8dc:	08030550 	.word	0x08030550
 800f8e0:	0803055c 	.word	0x0803055c
 800f8e4:	08030538 	.word	0x08030538
 800f8e8:	2005a6b8 	.word	0x2005a6b8
 800f8ec:	0800f841 	.word	0x0800f841

0800f8f0 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>:
/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */
#include <touchgfx/VectorFontRendererImpl.hpp>

void touchgfx::VectorFontRendererImpl::getVectorFontBuffers(float*& pointArray, int& pointArraySize, uint8_t*& commandArray, int& commandArraySize)
{
 800f8f0:	b480      	push	{r7}
 800f8f2:	b085      	sub	sp, #20
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	60f8      	str	r0, [r7, #12]
 800f8f8:	60b9      	str	r1, [r7, #8]
 800f8fa:	607a      	str	r2, [r7, #4]
 800f8fc:	603b      	str	r3, [r7, #0]
    pointArray = 0;
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	2200      	movs	r2, #0
 800f902:	601a      	str	r2, [r3, #0]
    pointArraySize = 0;
 800f904:	68bb      	ldr	r3, [r7, #8]
 800f906:	2200      	movs	r2, #0
 800f908:	601a      	str	r2, [r3, #0]
    commandArray = 0;
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	2200      	movs	r2, #0
 800f90e:	601a      	str	r2, [r3, #0]
    commandArraySize = 0;
 800f910:	683b      	ldr	r3, [r7, #0]
 800f912:	2200      	movs	r2, #0
 800f914:	601a      	str	r2, [r3, #0]
}
 800f916:	bf00      	nop
 800f918:	3714      	adds	r7, #20
 800f91a:	46bd      	mov	sp, r7
 800f91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f920:	4770      	bx	lr

0800f922 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800f922:	b480      	push	{r7}
 800f924:	b083      	sub	sp, #12
 800f926:	af00      	add	r7, sp, #0
 800f928:	6078      	str	r0, [r7, #4]
 800f92a:	6039      	str	r1, [r7, #0]
 800f92c:	683b      	ldr	r3, [r7, #0]
 800f92e:	4618      	mov	r0, r3
 800f930:	370c      	adds	r7, #12
 800f932:	46bd      	mov	sp, r7
 800f934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f938:	4770      	bx	lr

0800f93a <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800f93a:	b480      	push	{r7}
 800f93c:	b083      	sub	sp, #12
 800f93e:	af00      	add	r7, sp, #0
 800f940:	6078      	str	r0, [r7, #4]
 800f942:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800f944:	bf00      	nop
 800f946:	370c      	adds	r7, #12
 800f948:	46bd      	mov	sp, r7
 800f94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94e:	4770      	bx	lr

0800f950 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800f950:	b480      	push	{r7}
 800f952:	b083      	sub	sp, #12
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
 800f958:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800f95a:	bf00      	nop
 800f95c:	370c      	adds	r7, #12
 800f95e:	46bd      	mov	sp, r7
 800f960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f964:	4770      	bx	lr

0800f966 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800f966:	b480      	push	{r7}
 800f968:	b083      	sub	sp, #12
 800f96a:	af00      	add	r7, sp, #0
 800f96c:	6078      	str	r0, [r7, #4]
 800f96e:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800f970:	bf00      	nop
 800f972:	370c      	adds	r7, #12
 800f974:	46bd      	mov	sp, r7
 800f976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f97a:	4770      	bx	lr

0800f97c <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800f97c:	b480      	push	{r7}
 800f97e:	b083      	sub	sp, #12
 800f980:	af00      	add	r7, sp, #0
 800f982:	6078      	str	r0, [r7, #4]
 800f984:	460b      	mov	r3, r1
 800f986:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 800f988:	bf00      	nop
 800f98a:	370c      	adds	r7, #12
 800f98c:	46bd      	mov	sp, r7
 800f98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f992:	4770      	bx	lr

0800f994 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800f994:	b480      	push	{r7}
 800f996:	b083      	sub	sp, #12
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
    {
    }
 800f99c:	bf00      	nop
 800f99e:	370c      	adds	r7, #12
 800f9a0:	46bd      	mov	sp, r7
 800f9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a6:	4770      	bx	lr

0800f9a8 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800f9a8:	b480      	push	{r7}
 800f9aa:	b083      	sub	sp, #12
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
    {
    }
 800f9b0:	bf00      	nop
 800f9b2:	370c      	adds	r7, #12
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ba:	4770      	bx	lr

0800f9bc <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800f9bc:	b480      	push	{r7}
 800f9be:	b083      	sub	sp, #12
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]
    {
 800f9c4:	4a04      	ldr	r2, [pc, #16]	@ (800f9d8 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	601a      	str	r2, [r3, #0]
    }
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	4618      	mov	r0, r3
 800f9ce:	370c      	adds	r7, #12
 800f9d0:	46bd      	mov	sp, r7
 800f9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d6:	4770      	bx	lr
 800f9d8:	0802ec38 	.word	0x0802ec38

0800f9dc <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b082      	sub	sp, #8
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
    }
 800f9e4:	6878      	ldr	r0, [r7, #4]
 800f9e6:	f7ff ffe9 	bl	800f9bc <_ZN8touchgfx15UIEventListenerD1Ev>
 800f9ea:	2104      	movs	r1, #4
 800f9ec:	6878      	ldr	r0, [r7, #4]
 800f9ee:	f01c f94c 	bl	802bc8a <_ZdlPvj>
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	3708      	adds	r7, #8
 800f9f8:	46bd      	mov	sp, r7
 800f9fa:	bd80      	pop	{r7, pc}

0800f9fc <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 800f9fc:	b480      	push	{r7}
 800f9fe:	b083      	sub	sp, #12
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]
    {
    }
 800fa04:	bf00      	nop
 800fa06:	370c      	adds	r7, #12
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa0e:	4770      	bx	lr

0800fa10 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800fa10:	b480      	push	{r7}
 800fa12:	b083      	sub	sp, #12
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	6078      	str	r0, [r7, #4]
 800fa18:	460b      	mov	r3, r1
 800fa1a:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 800fa1c:	bf00      	nop
 800fa1e:	370c      	adds	r7, #12
 800fa20:	46bd      	mov	sp, r7
 800fa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa26:	4770      	bx	lr

0800fa28 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800fa28:	b480      	push	{r7}
 800fa2a:	b083      	sub	sp, #12
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	6078      	str	r0, [r7, #4]
 800fa30:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	683a      	ldr	r2, [r7, #0]
 800fa36:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800fa3a:	6810      	ldr	r0, [r2, #0]
 800fa3c:	6851      	ldr	r1, [r2, #4]
 800fa3e:	c303      	stmia	r3!, {r0, r1}
    }
 800fa40:	bf00      	nop
 800fa42:	370c      	adds	r7, #12
 800fa44:	46bd      	mov	sp, r7
 800fa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa4a:	4770      	bx	lr

0800fa4c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
        timerWidgets.add(w);
    }

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
 800fa4c:	b580      	push	{r7, lr}
 800fa4e:	b082      	sub	sp, #8
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	6078      	str	r0, [r7, #4]
    {
        timerWidgets.clear();
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	3304      	adds	r3, #4
 800fa58:	4618      	mov	r0, r3
 800fa5a:	f009 fecb 	bl	80197f4 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    }
 800fa5e:	bf00      	nop
 800fa60:	3708      	adds	r7, #8
 800fa62:	46bd      	mov	sp, r7
 800fa64:	bd80      	pop	{r7, pc}
	...

0800fa68 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800fa68:	b480      	push	{r7}
 800fa6a:	b083      	sub	sp, #12
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	6078      	str	r0, [r7, #4]
    {
 800fa70:	4a04      	ldr	r2, [pc, #16]	@ (800fa84 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	601a      	str	r2, [r3, #0]
    }
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	4618      	mov	r0, r3
 800fa7a:	370c      	adds	r7, #12
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa82:	4770      	bx	lr
 800fa84:	0802ec20 	.word	0x0802ec20

0800fa88 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b082      	sub	sp, #8
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	6078      	str	r0, [r7, #4]
    }
 800fa90:	6878      	ldr	r0, [r7, #4]
 800fa92:	f7ff ffe9 	bl	800fa68 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800fa96:	2104      	movs	r1, #4
 800fa98:	6878      	ldr	r0, [r7, #4]
 800fa9a:	f01c f8f6 	bl	802bc8a <_ZdlPvj>
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	4618      	mov	r0, r3
 800faa2:	3708      	adds	r7, #8
 800faa4:	46bd      	mov	sp, r7
 800faa6:	bd80      	pop	{r7, pc}

0800faa8 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800faa8:	b480      	push	{r7}
 800faaa:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800faac:	4b0b      	ldr	r3, [pc, #44]	@ (800fadc <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d008      	beq.n	800faca <_ZN8touchgfx3HAL3lcdEv+0x22>
 800fab8:	4b08      	ldr	r3, [pc, #32]	@ (800fadc <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d003      	beq.n	800faca <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800fac2:	4b06      	ldr	r3, [pc, #24]	@ (800fadc <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fac8:	e002      	b.n	800fad0 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 800faca:	4b04      	ldr	r3, [pc, #16]	@ (800fadc <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	689b      	ldr	r3, [r3, #8]
    }
 800fad0:	4618      	mov	r0, r3
 800fad2:	46bd      	mov	sp, r7
 800fad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad8:	4770      	bx	lr
 800fada:	bf00      	nop
 800fadc:	2005ba7c 	.word	0x2005ba7c

0800fae0 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800fae0:	b480      	push	{r7}
 800fae2:	b083      	sub	sp, #12
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800fae8:	4a07      	ldr	r2, [pc, #28]	@ (800fb08 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	601a      	str	r2, [r3, #0]
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	2200      	movs	r2, #0
 800faf2:	605a      	str	r2, [r3, #4]
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	2200      	movs	r2, #0
 800faf8:	721a      	strb	r2, [r3, #8]
    {
    }
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	4618      	mov	r0, r3
 800fafe:	370c      	adds	r7, #12
 800fb00:	46bd      	mov	sp, r7
 800fb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb06:	4770      	bx	lr
 800fb08:	0802ebfc 	.word	0x0802ebfc

0800fb0c <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800fb0c:	b480      	push	{r7}
 800fb0e:	b083      	sub	sp, #12
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	6078      	str	r0, [r7, #4]
    {
 800fb14:	4a04      	ldr	r2, [pc, #16]	@ (800fb28 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	601a      	str	r2, [r3, #0]
    }
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	370c      	adds	r7, #12
 800fb20:	46bd      	mov	sp, r7
 800fb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb26:	4770      	bx	lr
 800fb28:	0802ebfc 	.word	0x0802ebfc

0800fb2c <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b082      	sub	sp, #8
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
    }
 800fb34:	6878      	ldr	r0, [r7, #4]
 800fb36:	f7ff ffe9 	bl	800fb0c <_ZN8touchgfx10TransitionD1Ev>
 800fb3a:	210c      	movs	r1, #12
 800fb3c:	6878      	ldr	r0, [r7, #4]
 800fb3e:	f01c f8a4 	bl	802bc8a <_ZdlPvj>
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	4618      	mov	r0, r3
 800fb46:	3708      	adds	r7, #8
 800fb48:	46bd      	mov	sp, r7
 800fb4a:	bd80      	pop	{r7, pc}

0800fb4c <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800fb4c:	b480      	push	{r7}
 800fb4e:	b083      	sub	sp, #12
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	6078      	str	r0, [r7, #4]
    {
    }
 800fb54:	bf00      	nop
 800fb56:	370c      	adds	r7, #12
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb5e:	4770      	bx	lr

0800fb60 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800fb60:	b480      	push	{r7}
 800fb62:	b083      	sub	sp, #12
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	6078      	str	r0, [r7, #4]
    {
    }
 800fb68:	bf00      	nop
 800fb6a:	370c      	adds	r7, #12
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb72:	4770      	bx	lr

0800fb74 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800fb74:	b480      	push	{r7}
 800fb76:	b083      	sub	sp, #12
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	6078      	str	r0, [r7, #4]
    {
    }
 800fb7c:	bf00      	nop
 800fb7e:	370c      	adds	r7, #12
 800fb80:	46bd      	mov	sp, r7
 800fb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb86:	4770      	bx	lr

0800fb88 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	b082      	sub	sp, #8
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 800fb90:	f009 fdf2 	bl	8019778 <_ZN8touchgfx11Application11getInstanceEv>
 800fb94:	4603      	mov	r3, r0
 800fb96:	681a      	ldr	r2, [r3, #0]
 800fb98:	323c      	adds	r2, #60	@ 0x3c
 800fb9a:	6812      	ldr	r2, [r2, #0]
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	4790      	blx	r2
    }
 800fba0:	bf00      	nop
 800fba2:	3708      	adds	r7, #8
 800fba4:	46bd      	mov	sp, r7
 800fba6:	bd80      	pop	{r7, pc}

0800fba8 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800fba8:	b480      	push	{r7}
 800fbaa:	b083      	sub	sp, #12
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	6078      	str	r0, [r7, #4]
 800fbb0:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	683a      	ldr	r2, [r7, #0]
 800fbb6:	605a      	str	r2, [r3, #4]
    }
 800fbb8:	bf00      	nop
 800fbba:	370c      	adds	r7, #12
 800fbbc:	46bd      	mov	sp, r7
 800fbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc2:	4770      	bx	lr

0800fbc4 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	b082      	sub	sp, #8
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	6078      	str	r0, [r7, #4]
 800fbcc:	4a05      	ldr	r2, [pc, #20]	@ (800fbe4 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	601a      	str	r2, [r3, #0]
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	f7ff fef1 	bl	800f9bc <_ZN8touchgfx15UIEventListenerD1Ev>
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	4618      	mov	r0, r3
 800fbde:	3708      	adds	r7, #8
 800fbe0:	46bd      	mov	sp, r7
 800fbe2:	bd80      	pop	{r7, pc}
 800fbe4:	0802fa7c 	.word	0x0802fa7c

0800fbe8 <_ZN8touchgfx11ApplicationD0Ev>:
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b082      	sub	sp, #8
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
 800fbf0:	6878      	ldr	r0, [r7, #4]
 800fbf2:	f7ff ffe7 	bl	800fbc4 <_ZN8touchgfx11ApplicationD1Ev>
 800fbf6:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 800fbfa:	6878      	ldr	r0, [r7, #4]
 800fbfc:	f01c f845 	bl	802bc8a <_ZdlPvj>
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	4618      	mov	r0, r3
 800fc04:	3708      	adds	r7, #8
 800fc06:	46bd      	mov	sp, r7
 800fc08:	bd80      	pop	{r7, pc}
	...

0800fc0c <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800fc0c:	b580      	push	{r7, lr}
 800fc0e:	b082      	sub	sp, #8
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	4618      	mov	r0, r3
 800fc18:	f009 feba 	bl	8019990 <_ZN8touchgfx11ApplicationC1Ev>
 800fc1c:	4a09      	ldr	r2, [pc, #36]	@ (800fc44 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	601a      	str	r2, [r3, #0]
        : currentPresenter(0),
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	2200      	movs	r2, #0
 800fc26:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
          pendingScreenTransitionCallback(0)
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	2200      	movs	r2, #0
 800fc2e:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    {
        instance = this;
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	4a04      	ldr	r2, [pc, #16]	@ (800fc48 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800fc36:	6013      	str	r3, [r2, #0]
    }
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	3708      	adds	r7, #8
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	bd80      	pop	{r7, pc}
 800fc42:	bf00      	nop
 800fc44:	0802eba8 	.word	0x0802eba8
 800fc48:	2005bad0 	.word	0x2005bad0

0800fc4c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	b082      	sub	sp, #8
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800fc54:	6878      	ldr	r0, [r7, #4]
 800fc56:	f000 f804 	bl	800fc62 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800fc5a:	bf00      	nop
 800fc5c:	3708      	adds	r7, #8
 800fc5e:	46bd      	mov	sp, r7
 800fc60:	bd80      	pop	{r7, pc}

0800fc62 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800fc62:	b580      	push	{r7, lr}
 800fc64:	b082      	sub	sp, #8
 800fc66:	af00      	add	r7, sp, #0
 800fc68:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d00f      	beq.n	800fc94 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	330c      	adds	r3, #12
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	4610      	mov	r0, r2
 800fc88:	4798      	blx	r3
 800fc8a:	4603      	mov	r3, r0
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d001      	beq.n	800fc94 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800fc90:	2301      	movs	r3, #1
 800fc92:	e000      	b.n	800fc96 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800fc94:	2300      	movs	r3, #0
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d00e      	beq.n	800fcb8 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	3308      	adds	r3, #8
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	4610      	mov	r0, r2
 800fcae:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	2200      	movs	r2, #0
 800fcb4:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
        }
    }
 800fcb8:	bf00      	nop
 800fcba:	3708      	adds	r7, #8
 800fcbc:	46bd      	mov	sp, r7
 800fcbe:	bd80      	pop	{r7, pc}

0800fcc0 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800fcc0:	b480      	push	{r7}
 800fcc2:	b083      	sub	sp, #12
 800fcc4:	af00      	add	r7, sp, #0
 800fcc6:	6078      	str	r0, [r7, #4]
 800fcc8:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	683a      	ldr	r2, [r7, #0]
 800fcce:	601a      	str	r2, [r3, #0]
    }
 800fcd0:	bf00      	nop
 800fcd2:	370c      	adds	r7, #12
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcda:	4770      	bx	lr

0800fcdc <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	b082      	sub	sp, #8
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	6078      	str	r0, [r7, #4]
 800fce4:	4a05      	ldr	r2, [pc, #20]	@ (800fcfc <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	601a      	str	r2, [r3, #0]
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	4618      	mov	r0, r3
 800fcee:	f7ff ff69 	bl	800fbc4 <_ZN8touchgfx11ApplicationD1Ev>
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	3708      	adds	r7, #8
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	bd80      	pop	{r7, pc}
 800fcfc:	0802eba8 	.word	0x0802eba8

0800fd00 <_ZN8touchgfx14MVPApplicationD0Ev>:
 800fd00:	b580      	push	{r7, lr}
 800fd02:	b082      	sub	sp, #8
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	6078      	str	r0, [r7, #4]
 800fd08:	6878      	ldr	r0, [r7, #4]
 800fd0a:	f7ff ffe7 	bl	800fcdc <_ZN8touchgfx14MVPApplicationD1Ev>
 800fd0e:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 800fd12:	6878      	ldr	r0, [r7, #4]
 800fd14:	f01b ffb9 	bl	802bc8a <_ZdlPvj>
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	3708      	adds	r7, #8
 800fd1e:	46bd      	mov	sp, r7
 800fd20:	bd80      	pop	{r7, pc}
	...

0800fd24 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800fd24:	b580      	push	{r7, lr}
 800fd26:	b082      	sub	sp, #8
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	6078      	str	r0, [r7, #4]
 800fd2c:	4a05      	ldr	r2, [pc, #20]	@ (800fd44 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	601a      	str	r2, [r3, #0]
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	4618      	mov	r0, r3
 800fd36:	f7ff fe97 	bl	800fa68 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	3708      	adds	r7, #8
 800fd40:	46bd      	mov	sp, r7
 800fd42:	bd80      	pop	{r7, pc}
 800fd44:	0802eb90 	.word	0x0802eb90

0800fd48 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800fd48:	b580      	push	{r7, lr}
 800fd4a:	b082      	sub	sp, #8
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	6078      	str	r0, [r7, #4]
 800fd50:	6878      	ldr	r0, [r7, #4]
 800fd52:	f7ff ffe7 	bl	800fd24 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800fd56:	2110      	movs	r1, #16
 800fd58:	6878      	ldr	r0, [r7, #4]
 800fd5a:	f01b ff96 	bl	802bc8a <_ZdlPvj>
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	4618      	mov	r0, r3
 800fd62:	3708      	adds	r7, #8
 800fd64:	46bd      	mov	sp, r7
 800fd66:	bd80      	pop	{r7, pc}

0800fd68 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800fd68:	b580      	push	{r7, lr}
 800fd6a:	b082      	sub	sp, #8
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	6078      	str	r0, [r7, #4]
 800fd70:	4a08      	ldr	r2, [pc, #32]	@ (800fd94 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	601a      	str	r2, [r3, #0]
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	f7ff ffd1 	bl	800fd24 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	4618      	mov	r0, r3
 800fd86:	f7ff ffa9 	bl	800fcdc <_ZN8touchgfx14MVPApplicationD1Ev>
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	3708      	adds	r7, #8
 800fd90:	46bd      	mov	sp, r7
 800fd92:	bd80      	pop	{r7, pc}
 800fd94:	0802eb3c 	.word	0x0802eb3c

0800fd98 <_ZN23FrontendApplicationBaseD0Ev>:
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b082      	sub	sp, #8
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
 800fda0:	6878      	ldr	r0, [r7, #4]
 800fda2:	f7ff ffe1 	bl	800fd68 <_ZN23FrontendApplicationBaseD1Ev>
 800fda6:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 800fdaa:	6878      	ldr	r0, [r7, #4]
 800fdac:	f01b ff6d 	bl	802bc8a <_ZdlPvj>
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	3708      	adds	r7, #8
 800fdb6:	46bd      	mov	sp, r7
 800fdb8:	bd80      	pop	{r7, pc}

0800fdba <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 800fdba:	b580      	push	{r7, lr}
 800fdbc:	b082      	sub	sp, #8
 800fdbe:	af00      	add	r7, sp, #0
 800fdc0:	6078      	str	r0, [r7, #4]
    {
        gotoscreenScreenNoTransition();
 800fdc2:	6878      	ldr	r0, [r7, #4]
 800fdc4:	f000 f886 	bl	800fed4 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
 800fdc8:	bf00      	nop
 800fdca:	3708      	adds	r7, #8
 800fdcc:	46bd      	mov	sp, r7
 800fdce:	bd80      	pop	{r7, pc}

0800fdd0 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800fdd0:	b480      	push	{r7}
 800fdd2:	b083      	sub	sp, #12
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	2201      	movs	r2, #1
 800fddc:	721a      	strb	r2, [r3, #8]
    }
 800fdde:	bf00      	nop
 800fde0:	370c      	adds	r7, #12
 800fde2:	46bd      	mov	sp, r7
 800fde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde8:	4770      	bx	lr

0800fdea <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800fdea:	b480      	push	{r7}
 800fdec:	b083      	sub	sp, #12
 800fdee:	af00      	add	r7, sp, #0
 800fdf0:	6078      	str	r0, [r7, #4]
 800fdf2:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	683a      	ldr	r2, [r7, #0]
 800fdf8:	605a      	str	r2, [r3, #4]
    }
 800fdfa:	bf00      	nop
 800fdfc:	370c      	adds	r7, #12
 800fdfe:	46bd      	mov	sp, r7
 800fe00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe04:	4770      	bx	lr
	...

0800fe08 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b084      	sub	sp, #16
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	60f8      	str	r0, [r7, #12]
 800fe10:	60b9      	str	r1, [r7, #8]
 800fe12:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	4618      	mov	r0, r3
 800fe18:	f7ff fef8 	bl	800fc0c <_ZN8touchgfx14MVPApplicationC1Ev>
 800fe1c:	4a18      	ldr	r2, [pc, #96]	@ (800fe80 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x78>)
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	601a      	str	r2, [r3, #0]
      transitionCallback(),
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800fe28:	4618      	mov	r0, r3
 800fe2a:	f000 f8a9 	bl	800ff80 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
      frontendHeap(heap),
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	687a      	ldr	r2, [r7, #4]
 800fe32:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
      model(m)
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	68ba      	ldr	r2, [r7, #8]
 800fe3a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_PORTRAIT);
 800fe3e:	f7ff fb79 	bl	800f534 <_ZN8touchgfx3HAL11getInstanceEv>
 800fe42:	4603      	mov	r3, r0
 800fe44:	681a      	ldr	r2, [r3, #0]
 800fe46:	3208      	adds	r2, #8
 800fe48:	6812      	ldr	r2, [r2, #0]
 800fe4a:	2101      	movs	r1, #1
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	4790      	blx	r2
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800fe50:	f7ff fe2a 	bl	800faa8 <_ZN8touchgfx3HAL3lcdEv>
 800fe54:	4603      	mov	r3, r0
 800fe56:	4618      	mov	r0, r3
 800fe58:	f013 fe3d 	bl	8023ad6 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 800fe5c:	f7ff fe24 	bl	800faa8 <_ZN8touchgfx3HAL3lcdEv>
 800fe60:	4603      	mov	r3, r0
 800fe62:	4618      	mov	r0, r3
 800fe64:	f013 feae 	bl	8023bc4 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorRGB();
 800fe68:	f7ff fe1e 	bl	800faa8 <_ZN8touchgfx3HAL3lcdEv>
 800fe6c:	4603      	mov	r3, r0
 800fe6e:	4618      	mov	r0, r3
 800fe70:	f013 feb4 	bl	8023bdc <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv>
}
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	4618      	mov	r0, r3
 800fe78:	3710      	adds	r7, #16
 800fe7a:	46bd      	mov	sp, r7
 800fe7c:	bd80      	pop	{r7, pc}
 800fe7e:	bf00      	nop
 800fe80:	0802eb3c 	.word	0x0802eb3c

0800fe84 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800fe84:	b480      	push	{r7}
 800fe86:	b083      	sub	sp, #12
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	6078      	str	r0, [r7, #4]
 800fe8c:	6039      	str	r1, [r7, #0]
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	4618      	mov	r0, r3
 800fe92:	370c      	adds	r7, #12
 800fe94:	46bd      	mov	sp, r7
 800fe96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9a:	4770      	bx	lr

0800fe9c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800fe9c:	b580      	push	{r7, lr}
 800fe9e:	b082      	sub	sp, #8
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	6078      	str	r0, [r7, #4]
 800fea4:	6039      	str	r1, [r7, #0]
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	683a      	ldr	r2, [r7, #0]
 800feaa:	4611      	mov	r1, r2
 800feac:	4618      	mov	r0, r3
 800feae:	f7ff ffe9 	bl	800fe84 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800feb2:	683b      	ldr	r3, [r7, #0]
 800feb4:	685a      	ldr	r2, [r3, #4]
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	605a      	str	r2, [r3, #4]
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	683a      	ldr	r2, [r7, #0]
 800febe:	3308      	adds	r3, #8
 800fec0:	3208      	adds	r2, #8
 800fec2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fec6:	e883 0003 	stmia.w	r3, {r0, r1}
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	4618      	mov	r0, r3
 800fece:	3708      	adds	r7, #8
 800fed0:	46bd      	mov	sp, r7
 800fed2:	bd80      	pop	{r7, pc}

0800fed4 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>:
 */

// screen

void FrontendApplicationBase::gotoscreenScreenNoTransition()
{
 800fed4:	b590      	push	{r4, r7, lr}
 800fed6:	b089      	sub	sp, #36	@ 0x24
 800fed8:	af00      	add	r7, sp, #0
 800feda:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoscreenScreenNoTransitionImpl);
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	f503 74a2 	add.w	r4, r3, #324	@ 0x144
 800fee2:	4b10      	ldr	r3, [pc, #64]	@ (800ff24 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv+0x50>)
 800fee4:	61bb      	str	r3, [r7, #24]
 800fee6:	2300      	movs	r3, #0
 800fee8:	61fb      	str	r3, [r7, #28]
 800feea:	f107 0008 	add.w	r0, r7, #8
 800feee:	f107 0318 	add.w	r3, r7, #24
 800fef2:	cb0c      	ldmia	r3, {r2, r3}
 800fef4:	6879      	ldr	r1, [r7, #4]
 800fef6:	f000 f85f 	bl	800ffb8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800fefa:	f107 0308 	add.w	r3, r7, #8
 800fefe:	4619      	mov	r1, r3
 800ff00:	4620      	mov	r0, r4
 800ff02:	f7ff ffcb 	bl	800fe9c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800ff06:	f107 0308 	add.w	r3, r7, #8
 800ff0a:	4618      	mov	r0, r3
 800ff0c:	f7ff ff0a 	bl	800fd24 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	f503 72a2 	add.w	r2, r3, #324	@ 0x144
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
}
 800ff1c:	bf00      	nop
 800ff1e:	3724      	adds	r7, #36	@ 0x24
 800ff20:	46bd      	mov	sp, r7
 800ff22:	bd90      	pop	{r4, r7, pc}
 800ff24:	0800ff29 	.word	0x0800ff29

0800ff28 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoscreenScreenNoTransitionImpl()
{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b084      	sub	sp, #16
 800ff2c:	af02      	add	r7, sp, #8
 800ff2e:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<screenView, screenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	f503 719e 	add.w	r1, r3, #316	@ 0x13c
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800ff3c:	461a      	mov	r2, r3
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800ff44:	9300      	str	r3, [sp, #0]
 800ff46:	4b04      	ldr	r3, [pc, #16]	@ (800ff58 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x30>)
 800ff48:	4804      	ldr	r0, [pc, #16]	@ (800ff5c <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x34>)
 800ff4a:	f000 f867 	bl	801001c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800ff4e:	bf00      	nop
 800ff50:	3708      	adds	r7, #8
 800ff52:	46bd      	mov	sp, r7
 800ff54:	bd80      	pop	{r7, pc}
 800ff56:	bf00      	nop
 800ff58:	2005bac4 	.word	0x2005bac4
 800ff5c:	2005bac0 	.word	0x2005bac0

0800ff60 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800ff60:	b480      	push	{r7}
 800ff62:	b083      	sub	sp, #12
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]
 800ff68:	4a04      	ldr	r2, [pc, #16]	@ (800ff7c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	601a      	str	r2, [r3, #0]
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	4618      	mov	r0, r3
 800ff72:	370c      	adds	r7, #12
 800ff74:	46bd      	mov	sp, r7
 800ff76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7a:	4770      	bx	lr
 800ff7c:	0802ec20 	.word	0x0802ec20

0800ff80 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800ff80:	b580      	push	{r7, lr}
 800ff82:	b082      	sub	sp, #8
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	f7ff ffe8 	bl	800ff60 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800ff90:	4a08      	ldr	r2, [pc, #32]	@ (800ffb4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	601a      	str	r2, [r3, #0]
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	2200      	movs	r2, #0
 800ff9a:	605a      	str	r2, [r3, #4]
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	2200      	movs	r2, #0
 800ffa0:	609a      	str	r2, [r3, #8]
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	2200      	movs	r2, #0
 800ffa6:	60da      	str	r2, [r3, #12]
    {
    }
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	4618      	mov	r0, r3
 800ffac:	3708      	adds	r7, #8
 800ffae:	46bd      	mov	sp, r7
 800ffb0:	bd80      	pop	{r7, pc}
 800ffb2:	bf00      	nop
 800ffb4:	0802eb90 	.word	0x0802eb90

0800ffb8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 800ffb8:	b580      	push	{r7, lr}
 800ffba:	b084      	sub	sp, #16
 800ffbc:	af00      	add	r7, sp, #0
 800ffbe:	60f8      	str	r0, [r7, #12]
 800ffc0:	60b9      	str	r1, [r7, #8]
 800ffc2:	4639      	mov	r1, r7
 800ffc4:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	4618      	mov	r0, r3
 800ffcc:	f7ff ffc8 	bl	800ff60 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800ffd0:	4a08      	ldr	r2, [pc, #32]	@ (800fff4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	601a      	str	r2, [r3, #0]
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	68ba      	ldr	r2, [r7, #8]
 800ffda:	605a      	str	r2, [r3, #4]
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	3308      	adds	r3, #8
 800ffe0:	463a      	mov	r2, r7
 800ffe2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ffe6:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	4618      	mov	r0, r3
 800ffee:	3710      	adds	r7, #16
 800fff0:	46bd      	mov	sp, r7
 800fff2:	bd80      	pop	{r7, pc}
 800fff4:	0802eb90 	.word	0x0802eb90

0800fff8 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800fff8:	b580      	push	{r7, lr}
 800fffa:	b082      	sub	sp, #8
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	6078      	str	r0, [r7, #4]
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	4618      	mov	r0, r3
 8010004:	f7ff fd6c 	bl	800fae0 <_ZN8touchgfx10TransitionC1Ev>
 8010008:	4a03      	ldr	r2, [pc, #12]	@ (8010018 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	601a      	str	r2, [r3, #0]
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	4618      	mov	r0, r3
 8010012:	3708      	adds	r7, #8
 8010014:	46bd      	mov	sp, r7
 8010016:	bd80      	pop	{r7, pc}
 8010018:	0802eb18 	.word	0x0802eb18

0801001c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 801001c:	b590      	push	{r4, r7, lr}
 801001e:	b08f      	sub	sp, #60	@ 0x3c
 8010020:	af00      	add	r7, sp, #0
 8010022:	60f8      	str	r0, [r7, #12]
 8010024:	60b9      	str	r1, [r7, #8]
 8010026:	607a      	str	r2, [r7, #4]
 8010028:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	689a      	ldr	r2, [r3, #8]
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	689b      	ldr	r3, [r3, #8]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	3320      	adds	r3, #32
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	4610      	mov	r0, r2
 801003a:	4798      	blx	r3
 801003c:	4603      	mov	r3, r0
 801003e:	f5b3 7f05 	cmp.w	r3, #532	@ 0x214
 8010042:	d205      	bcs.n	8010050 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8010044:	4b7d      	ldr	r3, [pc, #500]	@ (801023c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 8010046:	4a7e      	ldr	r2, [pc, #504]	@ (8010240 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8010048:	21a3      	movs	r1, #163	@ 0xa3
 801004a:	487e      	ldr	r0, [pc, #504]	@ (8010244 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 801004c:	f01c fd12 	bl	802ca74 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	685a      	ldr	r2, [r3, #4]
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	685b      	ldr	r3, [r3, #4]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	3320      	adds	r3, #32
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	4610      	mov	r0, r2
 8010060:	4798      	blx	r3
 8010062:	4603      	mov	r3, r0
 8010064:	2b0f      	cmp	r3, #15
 8010066:	d805      	bhi.n	8010074 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 8010068:	4b77      	ldr	r3, [pc, #476]	@ (8010248 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 801006a:	4a75      	ldr	r2, [pc, #468]	@ (8010240 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 801006c:	21a4      	movs	r1, #164	@ 0xa4
 801006e:	4875      	ldr	r0, [pc, #468]	@ (8010244 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8010070:	f01c fd00 	bl	802ca74 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	68da      	ldr	r2, [r3, #12]
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	68db      	ldr	r3, [r3, #12]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	3320      	adds	r3, #32
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	4610      	mov	r0, r2
 8010084:	4798      	blx	r3
 8010086:	4603      	mov	r3, r0
 8010088:	2b0b      	cmp	r3, #11
 801008a:	d805      	bhi.n	8010098 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7c>
 801008c:	4b6f      	ldr	r3, [pc, #444]	@ (801024c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 801008e:	4a6c      	ldr	r2, [pc, #432]	@ (8010240 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8010090:	21a5      	movs	r1, #165	@ 0xa5
 8010092:	486c      	ldr	r0, [pc, #432]	@ (8010244 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8010094:	f01c fcee 	bl	802ca74 <__assert_func>
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801009c:	68bb      	ldr	r3, [r7, #8]
 801009e:	627b      	str	r3, [r7, #36]	@ 0x24
 80100a0:	683b      	ldr	r3, [r7, #0]
 80100a2:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 80100a4:	f009 fb68 	bl	8019778 <_ZN8touchgfx11Application11getInstanceEv>
 80100a8:	4603      	mov	r3, r0
 80100aa:	4618      	mov	r0, r3
 80100ac:	f7ff fcce 	bl	800fa4c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 80100b0:	6a3b      	ldr	r3, [r7, #32]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d008      	beq.n	80100ca <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xae>
        (*currentTrans)->tearDown();
 80100b8:	6a3b      	ldr	r3, [r7, #32]
 80100ba:	681a      	ldr	r2, [r3, #0]
 80100bc:	6a3b      	ldr	r3, [r7, #32]
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	330c      	adds	r3, #12
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	4610      	mov	r0, r2
 80100c8:	4798      	blx	r3
    if (*currentTrans)
 80100ca:	6a3b      	ldr	r3, [r7, #32]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d007      	beq.n	80100e2 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc6>
        (*currentTrans)->~Transition();
 80100d2:	6a3b      	ldr	r3, [r7, #32]
 80100d4:	681a      	ldr	r2, [r3, #0]
 80100d6:	6a3b      	ldr	r3, [r7, #32]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	4610      	mov	r0, r2
 80100e0:	4798      	blx	r3
    if (*currentScreen)
 80100e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d008      	beq.n	80100fc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
        (*currentScreen)->tearDownScreen();
 80100ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100ec:	681a      	ldr	r2, [r3, #0]
 80100ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	3314      	adds	r3, #20
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	4610      	mov	r0, r2
 80100fa:	4798      	blx	r3
    if (*currentPresenter)
 80100fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	2b00      	cmp	r3, #0
 8010102:	d008      	beq.n	8010116 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfa>
        (*currentPresenter)->deactivate();
 8010104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010106:	681a      	ldr	r2, [r3, #0]
 8010108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	3304      	adds	r3, #4
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	4610      	mov	r0, r2
 8010114:	4798      	blx	r3
    if (*currentScreen)
 8010116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	2b00      	cmp	r3, #0
 801011c:	d007      	beq.n	801012e <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x112>
        (*currentScreen)->~Screen();
 801011e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010120:	681a      	ldr	r2, [r3, #0]
 8010122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	4610      	mov	r0, r2
 801012c:	4798      	blx	r3
    if (*currentPresenter)
 801012e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d008      	beq.n	8010148 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
        (*currentPresenter)->~Presenter();
 8010136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010138:	681a      	ldr	r2, [r3, #0]
 801013a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	3308      	adds	r3, #8
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	4610      	mov	r0, r2
 8010146:	4798      	blx	r3
}
 8010148:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	68db      	ldr	r3, [r3, #12]
 801014e:	2100      	movs	r1, #0
 8010150:	4618      	mov	r0, r3
 8010152:	f000 f87d 	bl	8010250 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8010156:	4603      	mov	r3, r0
 8010158:	4619      	mov	r1, r3
 801015a:	200c      	movs	r0, #12
 801015c:	f7ff fbe1 	bl	800f922 <_ZnwjPv>
 8010160:	4604      	mov	r4, r0
 8010162:	4620      	mov	r0, r4
 8010164:	f7ff ff48 	bl	800fff8 <_ZN8touchgfx12NoTransitionC1Ev>
 8010168:	637c      	str	r4, [r7, #52]	@ 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	689b      	ldr	r3, [r3, #8]
 801016e:	2100      	movs	r1, #0
 8010170:	4618      	mov	r0, r3
 8010172:	f000 f880 	bl	8010276 <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>
 8010176:	4603      	mov	r3, r0
 8010178:	4619      	mov	r1, r3
 801017a:	f44f 7005 	mov.w	r0, #532	@ 0x214
 801017e:	f7ff fbd0 	bl	800f922 <_ZnwjPv>
 8010182:	4604      	mov	r4, r0
 8010184:	4620      	mov	r0, r4
 8010186:	f001 f8e9 	bl	801135c <_ZN10screenViewC1Ev>
 801018a:	633c      	str	r4, [r7, #48]	@ 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	685b      	ldr	r3, [r3, #4]
 8010190:	2100      	movs	r1, #0
 8010192:	4618      	mov	r0, r3
 8010194:	f000 f882 	bl	801029c <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>
 8010198:	4603      	mov	r3, r0
 801019a:	4619      	mov	r1, r3
 801019c:	2010      	movs	r0, #16
 801019e:	f7ff fbc0 	bl	800f922 <_ZnwjPv>
 80101a2:	4604      	mov	r4, r0
 80101a4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80101a6:	4620      	mov	r0, r4
 80101a8:	f001 f880 	bl	80112ac <_ZN15screenPresenterC1ER10screenView>
 80101ac:	62fc      	str	r4, [r7, #44]	@ 0x2c
    *currentTrans = newTransition;
 80101ae:	683b      	ldr	r3, [r7, #0]
 80101b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80101b2:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 80101b4:	68bb      	ldr	r3, [r7, #8]
 80101b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80101b8:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80101be:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 80101c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d002      	beq.n	80101cc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b0>
 80101c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101c8:	3304      	adds	r3, #4
 80101ca:	e000      	b.n	80101ce <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 80101cc:	2300      	movs	r3, #0
 80101ce:	4619      	mov	r1, r3
 80101d0:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80101d2:	f7ff fd75 	bl	800fcc0 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 80101d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101d8:	3304      	adds	r3, #4
 80101da:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80101dc:	4618      	mov	r0, r3
 80101de:	f7ff fe04 	bl	800fdea <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 80101e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80101e6:	4618      	mov	r0, r3
 80101e8:	f000 f86b 	bl	80102c2 <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>
 80101ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101ee:	61fb      	str	r3, [r7, #28]
 80101f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101f2:	61bb      	str	r3, [r7, #24]
 80101f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80101f6:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 80101f8:	69fb      	ldr	r3, [r7, #28]
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	330c      	adds	r3, #12
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	69f8      	ldr	r0, [r7, #28]
 8010202:	4798      	blx	r3
    newPresenter->activate();
 8010204:	69bb      	ldr	r3, [r7, #24]
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	69b8      	ldr	r0, [r7, #24]
 801020c:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 801020e:	6979      	ldr	r1, [r7, #20]
 8010210:	69f8      	ldr	r0, [r7, #28]
 8010212:	f00b fc9b 	bl	801bb4c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8010216:	697b      	ldr	r3, [r7, #20]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	3310      	adds	r3, #16
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	6978      	ldr	r0, [r7, #20]
 8010220:	4798      	blx	r3
    newTransition->invalidate();
 8010222:	697b      	ldr	r3, [r7, #20]
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	3314      	adds	r3, #20
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	6978      	ldr	r0, [r7, #20]
 801022c:	4798      	blx	r3
}
 801022e:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 8010230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8010232:	4618      	mov	r0, r3
 8010234:	373c      	adds	r7, #60	@ 0x3c
 8010236:	46bd      	mov	sp, r7
 8010238:	bd90      	pop	{r4, r7, pc}
 801023a:	bf00      	nop
 801023c:	0802dd20 	.word	0x0802dd20
 8010240:	0802ddb0 	.word	0x0802ddb0
 8010244:	0802de80 	.word	0x0802de80
 8010248:	0802dec4 	.word	0x0802dec4
 801024c:	0802df68 	.word	0x0802df68

08010250 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8010250:	b580      	push	{r7, lr}
 8010252:	b082      	sub	sp, #8
 8010254:	af00      	add	r7, sp, #0
 8010256:	6078      	str	r0, [r7, #4]
 8010258:	460b      	mov	r3, r1
 801025a:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	3324      	adds	r3, #36	@ 0x24
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	887a      	ldrh	r2, [r7, #2]
 8010266:	4611      	mov	r1, r2
 8010268:	6878      	ldr	r0, [r7, #4]
 801026a:	4798      	blx	r3
 801026c:	4603      	mov	r3, r0
    }
 801026e:	4618      	mov	r0, r3
 8010270:	3708      	adds	r7, #8
 8010272:	46bd      	mov	sp, r7
 8010274:	bd80      	pop	{r7, pc}

08010276 <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>:
    T& at(const uint16_t index)
 8010276:	b580      	push	{r7, lr}
 8010278:	b082      	sub	sp, #8
 801027a:	af00      	add	r7, sp, #0
 801027c:	6078      	str	r0, [r7, #4]
 801027e:	460b      	mov	r3, r1
 8010280:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	3324      	adds	r3, #36	@ 0x24
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	887a      	ldrh	r2, [r7, #2]
 801028c:	4611      	mov	r1, r2
 801028e:	6878      	ldr	r0, [r7, #4]
 8010290:	4798      	blx	r3
 8010292:	4603      	mov	r3, r0
    }
 8010294:	4618      	mov	r0, r3
 8010296:	3708      	adds	r7, #8
 8010298:	46bd      	mov	sp, r7
 801029a:	bd80      	pop	{r7, pc}

0801029c <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>:
    T& at(const uint16_t index)
 801029c:	b580      	push	{r7, lr}
 801029e:	b082      	sub	sp, #8
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	6078      	str	r0, [r7, #4]
 80102a4:	460b      	mov	r3, r1
 80102a6:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	3324      	adds	r3, #36	@ 0x24
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	887a      	ldrh	r2, [r7, #2]
 80102b2:	4611      	mov	r1, r2
 80102b4:	6878      	ldr	r0, [r7, #4]
 80102b6:	4798      	blx	r3
 80102b8:	4603      	mov	r3, r0
    }
 80102ba:	4618      	mov	r0, r3
 80102bc:	3708      	adds	r7, #8
 80102be:	46bd      	mov	sp, r7
 80102c0:	bd80      	pop	{r7, pc}

080102c2 <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 80102c2:	b480      	push	{r7}
 80102c4:	b083      	sub	sp, #12
 80102c6:	af00      	add	r7, sp, #0
 80102c8:	6078      	str	r0, [r7, #4]
 80102ca:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	683a      	ldr	r2, [r7, #0]
 80102d0:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 80102d2:	bf00      	nop
 80102d4:	370c      	adds	r7, #12
 80102d6:	46bd      	mov	sp, r7
 80102d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102dc:	4770      	bx	lr
	...

080102e0 <_ZN8touchgfx12NoTransitionD1Ev>:
 80102e0:	b580      	push	{r7, lr}
 80102e2:	b082      	sub	sp, #8
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	6078      	str	r0, [r7, #4]
 80102e8:	4a05      	ldr	r2, [pc, #20]	@ (8010300 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	601a      	str	r2, [r3, #0]
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	4618      	mov	r0, r3
 80102f2:	f7ff fc0b 	bl	800fb0c <_ZN8touchgfx10TransitionD1Ev>
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	4618      	mov	r0, r3
 80102fa:	3708      	adds	r7, #8
 80102fc:	46bd      	mov	sp, r7
 80102fe:	bd80      	pop	{r7, pc}
 8010300:	0802eb18 	.word	0x0802eb18

08010304 <_ZN8touchgfx12NoTransitionD0Ev>:
 8010304:	b580      	push	{r7, lr}
 8010306:	b082      	sub	sp, #8
 8010308:	af00      	add	r7, sp, #0
 801030a:	6078      	str	r0, [r7, #4]
 801030c:	6878      	ldr	r0, [r7, #4]
 801030e:	f7ff ffe7 	bl	80102e0 <_ZN8touchgfx12NoTransitionD1Ev>
 8010312:	210c      	movs	r1, #12
 8010314:	6878      	ldr	r0, [r7, #4]
 8010316:	f01b fcb8 	bl	802bc8a <_ZdlPvj>
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	4618      	mov	r0, r3
 801031e:	3708      	adds	r7, #8
 8010320:	46bd      	mov	sp, r7
 8010322:	bd80      	pop	{r7, pc}

08010324 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8010324:	b580      	push	{r7, lr}
 8010326:	b082      	sub	sp, #8
 8010328:	af00      	add	r7, sp, #0
 801032a:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	685b      	ldr	r3, [r3, #4]
 8010330:	687a      	ldr	r2, [r7, #4]
 8010332:	68d2      	ldr	r2, [r2, #12]
 8010334:	1052      	asrs	r2, r2, #1
 8010336:	1899      	adds	r1, r3, r2
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	68db      	ldr	r3, [r3, #12]
 801033c:	f003 0301 	and.w	r3, r3, #1
 8010340:	2b00      	cmp	r3, #0
 8010342:	d102      	bne.n	801034a <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	689b      	ldr	r3, [r3, #8]
 8010348:	e00a      	b.n	8010360 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	685b      	ldr	r3, [r3, #4]
 801034e:	687a      	ldr	r2, [r7, #4]
 8010350:	68d2      	ldr	r2, [r2, #12]
 8010352:	1052      	asrs	r2, r2, #1
 8010354:	4413      	add	r3, r2
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	687a      	ldr	r2, [r7, #4]
 801035a:	6892      	ldr	r2, [r2, #8]
 801035c:	4413      	add	r3, r2
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	4608      	mov	r0, r1
 8010362:	4798      	blx	r3
    }
 8010364:	bf00      	nop
 8010366:	3708      	adds	r7, #8
 8010368:	46bd      	mov	sp, r7
 801036a:	bd80      	pop	{r7, pc}

0801036c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 801036c:	b480      	push	{r7}
 801036e:	b083      	sub	sp, #12
 8010370:	af00      	add	r7, sp, #0
 8010372:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	685b      	ldr	r3, [r3, #4]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d010      	beq.n	801039e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	689b      	ldr	r3, [r3, #8]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d107      	bne.n	8010394 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	68db      	ldr	r3, [r3, #12]
 8010388:	f003 0301 	and.w	r3, r3, #1
 801038c:	2b00      	cmp	r3, #0
 801038e:	d101      	bne.n	8010394 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8010390:	2301      	movs	r3, #1
 8010392:	e000      	b.n	8010396 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8010394:	2300      	movs	r3, #0
 8010396:	2b01      	cmp	r3, #1
 8010398:	d001      	beq.n	801039e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 801039a:	2301      	movs	r3, #1
 801039c:	e000      	b.n	80103a0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 801039e:	2300      	movs	r3, #0
    }
 80103a0:	4618      	mov	r0, r3
 80103a2:	370c      	adds	r7, #12
 80103a4:	46bd      	mov	sp, r7
 80103a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103aa:	4770      	bx	lr

080103ac <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFromRGB
     */
    colortype(uint32_t col)
 80103ac:	b480      	push	{r7}
 80103ae:	b083      	sub	sp, #12
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	6078      	str	r0, [r7, #4]
 80103b4:	6039      	str	r1, [r7, #0]
        : color(col)
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	683a      	ldr	r2, [r7, #0]
 80103ba:	601a      	str	r2, [r3, #0]
    {
    }
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	4618      	mov	r0, r3
 80103c0:	370c      	adds	r7, #12
 80103c2:	46bd      	mov	sp, r7
 80103c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c8:	4770      	bx	lr

080103ca <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 80103ca:	b480      	push	{r7}
 80103cc:	b083      	sub	sp, #12
 80103ce:	af00      	add	r7, sp, #0
 80103d0:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	2200      	movs	r2, #0
 80103d6:	801a      	strh	r2, [r3, #0]
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	2200      	movs	r2, #0
 80103dc:	805a      	strh	r2, [r3, #2]
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	2200      	movs	r2, #0
 80103e2:	809a      	strh	r2, [r3, #4]
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	2200      	movs	r2, #0
 80103e8:	80da      	strh	r2, [r3, #6]
    {
    }
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	4618      	mov	r0, r3
 80103ee:	370c      	adds	r7, #12
 80103f0:	46bd      	mov	sp, r7
 80103f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f6:	4770      	bx	lr

080103f8 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b082      	sub	sp, #8
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 8010400:	4a14      	ldr	r2, [pc, #80]	@ (8010454 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	601a      	str	r2, [r3, #0]
        : rect(),
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	3304      	adds	r3, #4
 801040a:	4618      	mov	r0, r3
 801040c:	f7ff ffdd 	bl	80103ca <_ZN8touchgfx4RectC1Ev>
          cachedVisibleRect(),
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	330c      	adds	r3, #12
 8010414:	4618      	mov	r0, r3
 8010416:	f7ff ffd8 	bl	80103ca <_ZN8touchgfx4RectC1Ev>
          parent(0),
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	2200      	movs	r2, #0
 801041e:	615a      	str	r2, [r3, #20]
          nextSibling(0),
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	2200      	movs	r2, #0
 8010424:	619a      	str	r2, [r3, #24]
          nextDrawChainElement(0),
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	2200      	movs	r2, #0
 801042a:	61da      	str	r2, [r3, #28]
          cachedAbsX(0),
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	2200      	movs	r2, #0
 8010430:	841a      	strh	r2, [r3, #32]
          cachedAbsY(0),
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	2200      	movs	r2, #0
 8010436:	845a      	strh	r2, [r3, #34]	@ 0x22
          touchable(false),
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	2200      	movs	r2, #0
 801043c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          visible(true)
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	2201      	movs	r2, #1
 8010444:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    {
    }
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	4618      	mov	r0, r3
 801044c:	3708      	adds	r7, #8
 801044e:	46bd      	mov	sp, r7
 8010450:	bd80      	pop	{r7, pc}
 8010452:	bf00      	nop
 8010454:	0802fad0 	.word	0x0802fad0

08010458 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8010458:	b480      	push	{r7}
 801045a:	b083      	sub	sp, #12
 801045c:	af00      	add	r7, sp, #0
 801045e:	6078      	str	r0, [r7, #4]
    {
 8010460:	4a04      	ldr	r2, [pc, #16]	@ (8010474 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	601a      	str	r2, [r3, #0]
    }
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	4618      	mov	r0, r3
 801046a:	370c      	adds	r7, #12
 801046c:	46bd      	mov	sp, r7
 801046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010472:	4770      	bx	lr
 8010474:	0802fad0 	.word	0x0802fad0

08010478 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8010478:	b580      	push	{r7, lr}
 801047a:	b082      	sub	sp, #8
 801047c:	af00      	add	r7, sp, #0
 801047e:	6078      	str	r0, [r7, #4]
    }
 8010480:	6878      	ldr	r0, [r7, #4]
 8010482:	f7ff ffe9 	bl	8010458 <_ZN8touchgfx8DrawableD1Ev>
 8010486:	2128      	movs	r1, #40	@ 0x28
 8010488:	6878      	ldr	r0, [r7, #4]
 801048a:	f01b fbfe 	bl	802bc8a <_ZdlPvj>
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	4618      	mov	r0, r3
 8010492:	3708      	adds	r7, #8
 8010494:	46bd      	mov	sp, r7
 8010496:	bd80      	pop	{r7, pc}

08010498 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 8010498:	b580      	push	{r7, lr}
 801049a:	b082      	sub	sp, #8
 801049c:	af00      	add	r7, sp, #0
 801049e:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d005      	beq.n	80104b6 <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	3314      	adds	r3, #20
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	6878      	ldr	r0, [r7, #4]
 80104b4:	4798      	blx	r3
        }
    }
 80104b6:	bf00      	nop
 80104b8:	3708      	adds	r7, #8
 80104ba:	46bd      	mov	sp, r7
 80104bc:	bd80      	pop	{r7, pc}

080104be <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 80104be:	b480      	push	{r7}
 80104c0:	b083      	sub	sp, #12
 80104c2:	af00      	add	r7, sp, #0
 80104c4:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80104c6:	2300      	movs	r3, #0
    }
 80104c8:	4618      	mov	r0, r3
 80104ca:	370c      	adds	r7, #12
 80104cc:	46bd      	mov	sp, r7
 80104ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d2:	4770      	bx	lr

080104d4 <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 80104d4:	b580      	push	{r7, lr}
 80104d6:	b084      	sub	sp, #16
 80104d8:	af00      	add	r7, sp, #0
 80104da:	60f8      	str	r0, [r7, #12]
 80104dc:	4608      	mov	r0, r1
 80104de:	4611      	mov	r1, r2
 80104e0:	461a      	mov	r2, r3
 80104e2:	4603      	mov	r3, r0
 80104e4:	817b      	strh	r3, [r7, #10]
 80104e6:	460b      	mov	r3, r1
 80104e8:	813b      	strh	r3, [r7, #8]
 80104ea:	4613      	mov	r3, r2
 80104ec:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 80104ee:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80104f2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80104f6:	4619      	mov	r1, r3
 80104f8:	68f8      	ldr	r0, [r7, #12]
 80104fa:	f000 f82a 	bl	8010552 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 80104fe:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8010502:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010506:	4619      	mov	r1, r3
 8010508:	68f8      	ldr	r0, [r7, #12]
 801050a:	f000 f87e 	bl	801060a <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 801050e:	bf00      	nop
 8010510:	3710      	adds	r7, #16
 8010512:	46bd      	mov	sp, r7
 8010514:	bd80      	pop	{r7, pc}

08010516 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 8010516:	b480      	push	{r7}
 8010518:	b083      	sub	sp, #12
 801051a:	af00      	add	r7, sp, #0
 801051c:	6078      	str	r0, [r7, #4]
 801051e:	460b      	mov	r3, r1
 8010520:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	887a      	ldrh	r2, [r7, #2]
 8010526:	809a      	strh	r2, [r3, #4]
    }
 8010528:	bf00      	nop
 801052a:	370c      	adds	r7, #12
 801052c:	46bd      	mov	sp, r7
 801052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010532:	4770      	bx	lr

08010534 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8010534:	b480      	push	{r7}
 8010536:	b083      	sub	sp, #12
 8010538:	af00      	add	r7, sp, #0
 801053a:	6078      	str	r0, [r7, #4]
 801053c:	460b      	mov	r3, r1
 801053e:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	887a      	ldrh	r2, [r7, #2]
 8010544:	80da      	strh	r2, [r3, #6]
    }
 8010546:	bf00      	nop
 8010548:	370c      	adds	r7, #12
 801054a:	46bd      	mov	sp, r7
 801054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010550:	4770      	bx	lr

08010552 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 8010552:	b580      	push	{r7, lr}
 8010554:	b082      	sub	sp, #8
 8010556:	af00      	add	r7, sp, #0
 8010558:	6078      	str	r0, [r7, #4]
 801055a:	460b      	mov	r3, r1
 801055c:	807b      	strh	r3, [r7, #2]
 801055e:	4613      	mov	r3, r2
 8010560:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	3330      	adds	r3, #48	@ 0x30
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801056e:	4611      	mov	r1, r2
 8010570:	6878      	ldr	r0, [r7, #4]
 8010572:	4798      	blx	r3
        setY(y);
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	3334      	adds	r3, #52	@ 0x34
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8010580:	4611      	mov	r1, r2
 8010582:	6878      	ldr	r0, [r7, #4]
 8010584:	4798      	blx	r3
    }
 8010586:	bf00      	nop
 8010588:	3708      	adds	r7, #8
 801058a:	46bd      	mov	sp, r7
 801058c:	bd80      	pop	{r7, pc}

0801058e <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 801058e:	b480      	push	{r7}
 8010590:	b083      	sub	sp, #12
 8010592:	af00      	add	r7, sp, #0
 8010594:	6078      	str	r0, [r7, #4]
 8010596:	460b      	mov	r3, r1
 8010598:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	887a      	ldrh	r2, [r7, #2]
 801059e:	811a      	strh	r2, [r3, #8]
    }
 80105a0:	bf00      	nop
 80105a2:	370c      	adds	r7, #12
 80105a4:	46bd      	mov	sp, r7
 80105a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105aa:	4770      	bx	lr

080105ac <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 80105ac:	b480      	push	{r7}
 80105ae:	b083      	sub	sp, #12
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	6078      	str	r0, [r7, #4]
 80105b4:	460b      	mov	r3, r1
 80105b6:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	887a      	ldrh	r2, [r7, #2]
 80105bc:	815a      	strh	r2, [r3, #10]
    }
 80105be:	bf00      	nop
 80105c0:	370c      	adds	r7, #12
 80105c2:	46bd      	mov	sp, r7
 80105c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c8:	4770      	bx	lr

080105ca <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 80105ca:	b480      	push	{r7}
 80105cc:	b083      	sub	sp, #12
 80105ce:	af00      	add	r7, sp, #0
 80105d0:	6078      	str	r0, [r7, #4]
    {
    }
 80105d2:	bf00      	nop
 80105d4:	370c      	adds	r7, #12
 80105d6:	46bd      	mov	sp, r7
 80105d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105dc:	4770      	bx	lr

080105de <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80105de:	b480      	push	{r7}
 80105e0:	b083      	sub	sp, #12
 80105e2:	af00      	add	r7, sp, #0
 80105e4:	6078      	str	r0, [r7, #4]
 80105e6:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80105e8:	bf00      	nop
 80105ea:	370c      	adds	r7, #12
 80105ec:	46bd      	mov	sp, r7
 80105ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f2:	4770      	bx	lr

080105f4 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 80105f4:	b480      	push	{r7}
 80105f6:	b083      	sub	sp, #12
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	6078      	str	r0, [r7, #4]
 80105fc:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80105fe:	bf00      	nop
 8010600:	370c      	adds	r7, #12
 8010602:	46bd      	mov	sp, r7
 8010604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010608:	4770      	bx	lr

0801060a <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 801060a:	b580      	push	{r7, lr}
 801060c:	b082      	sub	sp, #8
 801060e:	af00      	add	r7, sp, #0
 8010610:	6078      	str	r0, [r7, #4]
 8010612:	460b      	mov	r3, r1
 8010614:	807b      	strh	r3, [r7, #2]
 8010616:	4613      	mov	r3, r2
 8010618:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	3338      	adds	r3, #56	@ 0x38
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8010626:	4611      	mov	r1, r2
 8010628:	6878      	ldr	r0, [r7, #4]
 801062a:	4798      	blx	r3
        setHeight(height);
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	333c      	adds	r3, #60	@ 0x3c
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	f9b7 2000 	ldrsh.w	r2, [r7]
 8010638:	4611      	mov	r1, r2
 801063a:	6878      	ldr	r0, [r7, #4]
 801063c:	4798      	blx	r3
    }
 801063e:	bf00      	nop
 8010640:	3708      	adds	r7, #8
 8010642:	46bd      	mov	sp, r7
 8010644:	bd80      	pop	{r7, pc}

08010646 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8010646:	b480      	push	{r7}
 8010648:	b083      	sub	sp, #12
 801064a:	af00      	add	r7, sp, #0
 801064c:	6078      	str	r0, [r7, #4]
 801064e:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8010650:	bf00      	nop
 8010652:	370c      	adds	r7, #12
 8010654:	46bd      	mov	sp, r7
 8010656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801065a:	4770      	bx	lr

0801065c <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 801065c:	b480      	push	{r7}
 801065e:	b083      	sub	sp, #12
 8010660:	af00      	add	r7, sp, #0
 8010662:	6078      	str	r0, [r7, #4]
    {
    }
 8010664:	bf00      	nop
 8010666:	370c      	adds	r7, #12
 8010668:	46bd      	mov	sp, r7
 801066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801066e:	4770      	bx	lr

08010670 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8010670:	b480      	push	{r7}
 8010672:	b083      	sub	sp, #12
 8010674:	af00      	add	r7, sp, #0
 8010676:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
    }
 801067e:	4618      	mov	r0, r3
 8010680:	370c      	adds	r7, #12
 8010682:	46bd      	mov	sp, r7
 8010684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010688:	4770      	bx	lr

0801068a <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 801068a:	b480      	push	{r7}
 801068c:	b083      	sub	sp, #12
 801068e:	af00      	add	r7, sp, #0
 8010690:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
    }
 8010698:	4618      	mov	r0, r3
 801069a:	370c      	adds	r7, #12
 801069c:	46bd      	mov	sp, r7
 801069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a2:	4770      	bx	lr

080106a4 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 80106a4:	b580      	push	{r7, lr}
 80106a6:	b082      	sub	sp, #8
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	6078      	str	r0, [r7, #4]
 80106ac:	460b      	mov	r3, r1
 80106ae:	807b      	strh	r3, [r7, #2]
 80106b0:	4613      	mov	r3, r2
 80106b2:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	3354      	adds	r3, #84	@ 0x54
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	8879      	ldrh	r1, [r7, #2]
 80106be:	687a      	ldr	r2, [r7, #4]
 80106c0:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80106c4:	b292      	uxth	r2, r2
 80106c6:	1a8a      	subs	r2, r1, r2
 80106c8:	b292      	uxth	r2, r2
 80106ca:	b210      	sxth	r0, r2
 80106cc:	8839      	ldrh	r1, [r7, #0]
 80106ce:	687a      	ldr	r2, [r7, #4]
 80106d0:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80106d4:	b292      	uxth	r2, r2
 80106d6:	1a8a      	subs	r2, r1, r2
 80106d8:	b292      	uxth	r2, r2
 80106da:	b212      	sxth	r2, r2
 80106dc:	4601      	mov	r1, r0
 80106de:	6878      	ldr	r0, [r7, #4]
 80106e0:	4798      	blx	r3
    }
 80106e2:	bf00      	nop
 80106e4:	3708      	adds	r7, #8
 80106e6:	46bd      	mov	sp, r7
 80106e8:	bd80      	pop	{r7, pc}

080106ea <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 80106ea:	b480      	push	{r7}
 80106ec:	b083      	sub	sp, #12
 80106ee:	af00      	add	r7, sp, #0
 80106f0:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80106f8:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010700:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010708:	845a      	strh	r2, [r3, #34]	@ 0x22
    }
 801070a:	bf00      	nop
 801070c:	370c      	adds	r7, #12
 801070e:	46bd      	mov	sp, r7
 8010710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010714:	4770      	bx	lr

08010716 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8010716:	b580      	push	{r7, lr}
 8010718:	b084      	sub	sp, #16
 801071a:	af00      	add	r7, sp, #0
 801071c:	60f8      	str	r0, [r7, #12]
 801071e:	60b9      	str	r1, [r7, #8]
 8010720:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 8010722:	68f8      	ldr	r0, [r7, #12]
 8010724:	f7ff ffe1 	bl	80106ea <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	681a      	ldr	r2, [r3, #0]
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	68fa      	ldr	r2, [r7, #12]
 8010734:	601a      	str	r2, [r3, #0]
    }
 8010736:	bf00      	nop
 8010738:	3710      	adds	r7, #16
 801073a:	46bd      	mov	sp, r7
 801073c:	bd80      	pop	{r7, pc}

0801073e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 801073e:	b580      	push	{r7, lr}
 8010740:	b084      	sub	sp, #16
 8010742:	af00      	add	r7, sp, #0
 8010744:	60f8      	str	r0, [r7, #12]
 8010746:	607b      	str	r3, [r7, #4]
 8010748:	460b      	mov	r3, r1
 801074a:	817b      	strh	r3, [r7, #10]
 801074c:	4613      	mov	r3, r2
 801074e:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	4618      	mov	r0, r3
 8010754:	f7ff ff8c 	bl	8010670 <_ZNK8touchgfx8Drawable9isVisibleEv>
 8010758:	4603      	mov	r3, r0
 801075a:	2b00      	cmp	r3, #0
 801075c:	d008      	beq.n	8010770 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	4618      	mov	r0, r3
 8010762:	f7ff ff92 	bl	801068a <_ZNK8touchgfx8Drawable11isTouchableEv>
 8010766:	4603      	mov	r3, r0
 8010768:	2b00      	cmp	r3, #0
 801076a:	d001      	beq.n	8010770 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 801076c:	2301      	movs	r3, #1
 801076e:	e000      	b.n	8010772 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8010770:	2300      	movs	r3, #0
 8010772:	2b00      	cmp	r3, #0
 8010774:	d002      	beq.n	801077c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8010776:	68fa      	ldr	r2, [r7, #12]
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	601a      	str	r2, [r3, #0]
        }
    }
 801077c:	bf00      	nop
 801077e:	3710      	adds	r7, #16
 8010780:	46bd      	mov	sp, r7
 8010782:	bd80      	pop	{r7, pc}

08010784 <_ZN8touchgfx9ContainerC1Ev>:
 * @see Drawable
 */
class Container : public Drawable
{
public:
    Container()
 8010784:	b580      	push	{r7, lr}
 8010786:	b082      	sub	sp, #8
 8010788:	af00      	add	r7, sp, #0
 801078a:	6078      	str	r0, [r7, #4]
        : Drawable(),
          firstChild(0)
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	4618      	mov	r0, r3
 8010790:	f7ff fe32 	bl	80103f8 <_ZN8touchgfx8DrawableC1Ev>
 8010794:	4a05      	ldr	r2, [pc, #20]	@ (80107ac <_ZN8touchgfx9ContainerC1Ev+0x28>)
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	601a      	str	r2, [r3, #0]
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	2200      	movs	r2, #0
 801079e:	629a      	str	r2, [r3, #40]	@ 0x28
    {
    }
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	4618      	mov	r0, r3
 80107a4:	3708      	adds	r7, #8
 80107a6:	46bd      	mov	sp, r7
 80107a8:	bd80      	pop	{r7, pc}
 80107aa:	bf00      	nop
 80107ac:	0802f3a4 	.word	0x0802f3a4

080107b0 <_ZN8touchgfx9ContainerD1Ev>:
class Container : public Drawable
 80107b0:	b580      	push	{r7, lr}
 80107b2:	b082      	sub	sp, #8
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	6078      	str	r0, [r7, #4]
 80107b8:	4a05      	ldr	r2, [pc, #20]	@ (80107d0 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	601a      	str	r2, [r3, #0]
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	4618      	mov	r0, r3
 80107c2:	f7ff fe49 	bl	8010458 <_ZN8touchgfx8DrawableD1Ev>
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	4618      	mov	r0, r3
 80107ca:	3708      	adds	r7, #8
 80107cc:	46bd      	mov	sp, r7
 80107ce:	bd80      	pop	{r7, pc}
 80107d0:	0802f3a4 	.word	0x0802f3a4

080107d4 <_ZN8touchgfx9ContainerD0Ev>:
 80107d4:	b580      	push	{r7, lr}
 80107d6:	b082      	sub	sp, #8
 80107d8:	af00      	add	r7, sp, #0
 80107da:	6078      	str	r0, [r7, #4]
 80107dc:	6878      	ldr	r0, [r7, #4]
 80107de:	f7ff ffe7 	bl	80107b0 <_ZN8touchgfx9ContainerD1Ev>
 80107e2:	212c      	movs	r1, #44	@ 0x2c
 80107e4:	6878      	ldr	r0, [r7, #4]
 80107e6:	f01b fa50 	bl	802bc8a <_ZdlPvj>
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	4618      	mov	r0, r3
 80107ee:	3708      	adds	r7, #8
 80107f0:	46bd      	mov	sp, r7
 80107f2:	bd80      	pop	{r7, pc}

080107f4 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 80107f4:	b580      	push	{r7, lr}
 80107f6:	b082      	sub	sp, #8
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	6078      	str	r0, [r7, #4]
    {
 80107fc:	4a06      	ldr	r2, [pc, #24]	@ (8010818 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	601a      	str	r2, [r3, #0]
    }
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	3304      	adds	r3, #4
 8010806:	4618      	mov	r0, r3
 8010808:	f7ff ffd2 	bl	80107b0 <_ZN8touchgfx9ContainerD1Ev>
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	4618      	mov	r0, r3
 8010810:	3708      	adds	r7, #8
 8010812:	46bd      	mov	sp, r7
 8010814:	bd80      	pop	{r7, pc}
 8010816:	bf00      	nop
 8010818:	0802fbf0 	.word	0x0802fbf0

0801081c <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 801081c:	b580      	push	{r7, lr}
 801081e:	b082      	sub	sp, #8
 8010820:	af00      	add	r7, sp, #0
 8010822:	6078      	str	r0, [r7, #4]
    }
 8010824:	6878      	ldr	r0, [r7, #4]
 8010826:	f7ff ffe5 	bl	80107f4 <_ZN8touchgfx6ScreenD1Ev>
 801082a:	213c      	movs	r1, #60	@ 0x3c
 801082c:	6878      	ldr	r0, [r7, #4]
 801082e:	f01b fa2c 	bl	802bc8a <_ZdlPvj>
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	4618      	mov	r0, r3
 8010836:	3708      	adds	r7, #8
 8010838:	46bd      	mov	sp, r7
 801083a:	bd80      	pop	{r7, pc}

0801083c <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 801083c:	b480      	push	{r7}
 801083e:	b083      	sub	sp, #12
 8010840:	af00      	add	r7, sp, #0
 8010842:	6078      	str	r0, [r7, #4]
    {
    }
 8010844:	bf00      	nop
 8010846:	370c      	adds	r7, #12
 8010848:	46bd      	mov	sp, r7
 801084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801084e:	4770      	bx	lr

08010850 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 8010850:	b480      	push	{r7}
 8010852:	b083      	sub	sp, #12
 8010854:	af00      	add	r7, sp, #0
 8010856:	6078      	str	r0, [r7, #4]
    {
    }
 8010858:	bf00      	nop
 801085a:	370c      	adds	r7, #12
 801085c:	46bd      	mov	sp, r7
 801085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010862:	4770      	bx	lr

08010864 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 8010864:	b480      	push	{r7}
 8010866:	b083      	sub	sp, #12
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]
    {
    }
 801086c:	bf00      	nop
 801086e:	370c      	adds	r7, #12
 8010870:	46bd      	mov	sp, r7
 8010872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010876:	4770      	bx	lr

08010878 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8010878:	b480      	push	{r7}
 801087a:	b083      	sub	sp, #12
 801087c:	af00      	add	r7, sp, #0
 801087e:	6078      	str	r0, [r7, #4]
    {
    }
 8010880:	bf00      	nop
 8010882:	370c      	adds	r7, #12
 8010884:	46bd      	mov	sp, r7
 8010886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801088a:	4770      	bx	lr

0801088c <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 801088c:	b480      	push	{r7}
 801088e:	b083      	sub	sp, #12
 8010890:	af00      	add	r7, sp, #0
 8010892:	6078      	str	r0, [r7, #4]
 8010894:	460b      	mov	r3, r1
 8010896:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 8010898:	bf00      	nop
 801089a:	370c      	adds	r7, #12
 801089c:	46bd      	mov	sp, r7
 801089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a2:	4770      	bx	lr

080108a4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 80108a4:	b580      	push	{r7, lr}
 80108a6:	b082      	sub	sp, #8
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	6078      	str	r0, [r7, #4]
 80108ac:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	3304      	adds	r3, #4
 80108b2:	6839      	ldr	r1, [r7, #0]
 80108b4:	4618      	mov	r0, r3
 80108b6:	f003 fac1 	bl	8013e3c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 80108ba:	bf00      	nop
 80108bc:	3708      	adds	r7, #8
 80108be:	46bd      	mov	sp, r7
 80108c0:	bd80      	pop	{r7, pc}
	...

080108c4 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 80108c4:	b580      	push	{r7, lr}
 80108c6:	b082      	sub	sp, #8
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	6078      	str	r0, [r7, #4]
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	4618      	mov	r0, r3
 80108d0:	f7ff fd92 	bl	80103f8 <_ZN8touchgfx8DrawableC1Ev>
 80108d4:	4a03      	ldr	r2, [pc, #12]	@ (80108e4 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	601a      	str	r2, [r3, #0]
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	4618      	mov	r0, r3
 80108de:	3708      	adds	r7, #8
 80108e0:	46bd      	mov	sp, r7
 80108e2:	bd80      	pop	{r7, pc}
 80108e4:	0802ecc8 	.word	0x0802ecc8

080108e8 <_ZN8touchgfx6WidgetD1Ev>:
 80108e8:	b580      	push	{r7, lr}
 80108ea:	b082      	sub	sp, #8
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	6078      	str	r0, [r7, #4]
 80108f0:	4a05      	ldr	r2, [pc, #20]	@ (8010908 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	601a      	str	r2, [r3, #0]
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	4618      	mov	r0, r3
 80108fa:	f7ff fdad 	bl	8010458 <_ZN8touchgfx8DrawableD1Ev>
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	4618      	mov	r0, r3
 8010902:	3708      	adds	r7, #8
 8010904:	46bd      	mov	sp, r7
 8010906:	bd80      	pop	{r7, pc}
 8010908:	0802ecc8 	.word	0x0802ecc8

0801090c <_ZN8touchgfx6WidgetD0Ev>:
 801090c:	b580      	push	{r7, lr}
 801090e:	b082      	sub	sp, #8
 8010910:	af00      	add	r7, sp, #0
 8010912:	6078      	str	r0, [r7, #4]
 8010914:	6878      	ldr	r0, [r7, #4]
 8010916:	f7ff ffe7 	bl	80108e8 <_ZN8touchgfx6WidgetD1Ev>
 801091a:	2128      	movs	r1, #40	@ 0x28
 801091c:	6878      	ldr	r0, [r7, #4]
 801091e:	f01b f9b4 	bl	802bc8a <_ZdlPvj>
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	4618      	mov	r0, r3
 8010926:	3708      	adds	r7, #8
 8010928:	46bd      	mov	sp, r7
 801092a:	bd80      	pop	{r7, pc}

0801092c <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 801092c:	b580      	push	{r7, lr}
 801092e:	b082      	sub	sp, #8
 8010930:	af00      	add	r7, sp, #0
 8010932:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	4618      	mov	r0, r3
 8010938:	2326      	movs	r3, #38	@ 0x26
 801093a:	461a      	mov	r2, r3
 801093c:	2100      	movs	r1, #0
 801093e:	f01c fba5 	bl	802d08c <memset>
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	4618      	mov	r0, r3
 8010946:	f7ff ffbd 	bl	80108c4 <_ZN8touchgfx6WidgetC1Ev>
 801094a:	4a09      	ldr	r2, [pc, #36]	@ (8010970 <_ZN8touchgfx3BoxC1Ev+0x44>)
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	601a      	str	r2, [r3, #0]
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	22ff      	movs	r2, #255	@ 0xff
 8010954:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	3328      	adds	r3, #40	@ 0x28
 801095c:	2100      	movs	r1, #0
 801095e:	4618      	mov	r0, r3
 8010960:	f7ff fd24 	bl	80103ac <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	4618      	mov	r0, r3
 8010968:	3708      	adds	r7, #8
 801096a:	46bd      	mov	sp, r7
 801096c:	bd80      	pop	{r7, pc}
 801096e:	bf00      	nop
 8010970:	0802f8bc 	.word	0x0802f8bc

08010974 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 8010974:	b480      	push	{r7}
 8010976:	b083      	sub	sp, #12
 8010978:	af00      	add	r7, sp, #0
 801097a:	6078      	str	r0, [r7, #4]
 801097c:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	683a      	ldr	r2, [r7, #0]
 8010982:	629a      	str	r2, [r3, #40]	@ 0x28
    }
 8010984:	bf00      	nop
 8010986:	370c      	adds	r7, #12
 8010988:	46bd      	mov	sp, r7
 801098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801098e:	4770      	bx	lr

08010990 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>:
class View : public Screen
 8010990:	b580      	push	{r7, lr}
 8010992:	b082      	sub	sp, #8
 8010994:	af00      	add	r7, sp, #0
 8010996:	6078      	str	r0, [r7, #4]
 8010998:	4a05      	ldr	r2, [pc, #20]	@ (80109b0 <_ZN8touchgfx4ViewI15screenPresenterED1Ev+0x20>)
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	601a      	str	r2, [r3, #0]
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	4618      	mov	r0, r3
 80109a2:	f7ff ff27 	bl	80107f4 <_ZN8touchgfx6ScreenD1Ev>
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	4618      	mov	r0, r3
 80109aa:	3708      	adds	r7, #8
 80109ac:	46bd      	mov	sp, r7
 80109ae:	bd80      	pop	{r7, pc}
 80109b0:	0802ec94 	.word	0x0802ec94

080109b4 <_ZN8touchgfx4ViewI15screenPresenterED0Ev>:
 80109b4:	b580      	push	{r7, lr}
 80109b6:	b082      	sub	sp, #8
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
 80109bc:	6878      	ldr	r0, [r7, #4]
 80109be:	f7ff ffe7 	bl	8010990 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 80109c2:	2140      	movs	r1, #64	@ 0x40
 80109c4:	6878      	ldr	r0, [r7, #4]
 80109c6:	f01b f960 	bl	802bc8a <_ZdlPvj>
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	4618      	mov	r0, r3
 80109ce:	3708      	adds	r7, #8
 80109d0:	46bd      	mov	sp, r7
 80109d2:	bd80      	pop	{r7, pc}

080109d4 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 80109d4:	b580      	push	{r7, lr}
 80109d6:	b082      	sub	sp, #8
 80109d8:	af00      	add	r7, sp, #0
 80109da:	6078      	str	r0, [r7, #4]
 80109dc:	4a05      	ldr	r2, [pc, #20]	@ (80109f4 <_ZN8touchgfx3BoxD1Ev+0x20>)
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	601a      	str	r2, [r3, #0]
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	4618      	mov	r0, r3
 80109e6:	f7ff ff7f 	bl	80108e8 <_ZN8touchgfx6WidgetD1Ev>
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	4618      	mov	r0, r3
 80109ee:	3708      	adds	r7, #8
 80109f0:	46bd      	mov	sp, r7
 80109f2:	bd80      	pop	{r7, pc}
 80109f4:	0802f8bc 	.word	0x0802f8bc

080109f8 <_ZN8touchgfx3BoxD0Ev>:
 80109f8:	b580      	push	{r7, lr}
 80109fa:	b082      	sub	sp, #8
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
 8010a00:	6878      	ldr	r0, [r7, #4]
 8010a02:	f7ff ffe7 	bl	80109d4 <_ZN8touchgfx3BoxD1Ev>
 8010a06:	212c      	movs	r1, #44	@ 0x2c
 8010a08:	6878      	ldr	r0, [r7, #4]
 8010a0a:	f01b f93e 	bl	802bc8a <_ZdlPvj>
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	4618      	mov	r0, r3
 8010a12:	3708      	adds	r7, #8
 8010a14:	46bd      	mov	sp, r7
 8010a16:	bd80      	pop	{r7, pc}

08010a18 <_ZN14screenViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen_screen/screenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>

screenViewBase::screenViewBase()
 8010a18:	b590      	push	{r4, r7, lr}
 8010a1a:	b08b      	sub	sp, #44	@ 0x2c
 8010a1c:	af02      	add	r7, sp, #8
 8010a1e:	6078      	str	r0, [r7, #4]
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	4618      	mov	r0, r3
 8010a24:	f000 f962 	bl	8010cec <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>
 8010a28:	4a87      	ldr	r2, [pc, #540]	@ (8010c48 <_ZN14screenViewBaseC1Ev+0x230>)
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	601a      	str	r2, [r3, #0]
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	3340      	adds	r3, #64	@ 0x40
 8010a32:	4618      	mov	r0, r3
 8010a34:	f7ff ff7a 	bl	801092c <_ZN8touchgfx3BoxC1Ev>
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	336c      	adds	r3, #108	@ 0x6c
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	f003 fdb1 	bl	80145a4 <_ZN8touchgfx14SwipeContainerC1Ev>
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010a48:	4618      	mov	r0, r3
 8010a4a:	f7ff fe9b 	bl	8010784 <_ZN8touchgfx9ContainerC1Ev>
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8010a54:	4618      	mov	r0, r3
 8010a56:	f7ff ff69 	bl	801092c <_ZN8touchgfx3BoxC1Ev>
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8010a60:	4618      	mov	r0, r3
 8010a62:	f7ff fe8f 	bl	8010784 <_ZN8touchgfx9ContainerC1Ev>
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	f7ff ff5d 	bl	801092c <_ZN8touchgfx3BoxC1Ev>
{
    __background.setPosition(0, 0, 240, 296);
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8010a78:	f44f 7394 	mov.w	r3, #296	@ 0x128
 8010a7c:	9300      	str	r3, [sp, #0]
 8010a7e:	23f0      	movs	r3, #240	@ 0xf0
 8010a80:	2200      	movs	r2, #0
 8010a82:	2100      	movs	r1, #0
 8010a84:	f7ff fd26 	bl	80104d4 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8010a8e:	2300      	movs	r3, #0
 8010a90:	767b      	strb	r3, [r7, #25]
 8010a92:	2300      	movs	r3, #0
 8010a94:	763b      	strb	r3, [r7, #24]
 8010a96:	2300      	movs	r3, #0
 8010a98:	75fb      	strb	r3, [r7, #23]
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8010a9a:	7e7b      	ldrb	r3, [r7, #25]
 8010a9c:	041a      	lsls	r2, r3, #16
 8010a9e:	7e3b      	ldrb	r3, [r7, #24]
 8010aa0:	021b      	lsls	r3, r3, #8
 8010aa2:	431a      	orrs	r2, r3
 8010aa4:	7dfb      	ldrb	r3, [r7, #23]
 8010aa6:	4313      	orrs	r3, r2
 8010aa8:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8010aac:	f107 0310 	add.w	r3, r7, #16
 8010ab0:	4611      	mov	r1, r2
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	f7ff fc7a 	bl	80103ac <_ZN8touchgfx9colortypeC1Em>
 8010ab8:	693b      	ldr	r3, [r7, #16]
 8010aba:	4619      	mov	r1, r3
 8010abc:	4620      	mov	r0, r4
 8010abe:	f7ff ff59 	bl	8010974 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 8010ac2:	687a      	ldr	r2, [r7, #4]
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	3340      	adds	r3, #64	@ 0x40
 8010ac8:	4619      	mov	r1, r3
 8010aca:	4610      	mov	r0, r2
 8010acc:	f7ff feea 	bl	80108a4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    swipeContainer1.setXY(0, 0);
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	336c      	adds	r3, #108	@ 0x6c
 8010ad4:	2200      	movs	r2, #0
 8010ad6:	2100      	movs	r1, #0
 8010ad8:	4618      	mov	r0, r3
 8010ada:	f7ff fd3a 	bl	8010552 <_ZN8touchgfx8Drawable5setXYEss>
    swipeContainer1.setSwipeCutoff(50);
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	336c      	adds	r3, #108	@ 0x6c
 8010ae2:	2132      	movs	r1, #50	@ 0x32
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	f003 fc28 	bl	801433a <_ZN8touchgfx14SwipeContainer14setSwipeCutoffEt>
    swipeContainer1.setEndSwipeElasticWidth(50);
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	336c      	adds	r3, #108	@ 0x6c
 8010aee:	2132      	movs	r1, #50	@ 0x32
 8010af0:	4618      	mov	r0, r3
 8010af2:	f003 fca7 	bl	8014444 <_ZN8touchgfx14SwipeContainer23setEndSwipeElasticWidthEt>

    swipeContainer1Page2.setWidth(240);
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010afc:	21f0      	movs	r1, #240	@ 0xf0
 8010afe:	4618      	mov	r0, r3
 8010b00:	f7ff fd45 	bl	801058e <_ZN8touchgfx8Drawable8setWidthEs>
    swipeContainer1Page2.setHeight(296);
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010b0a:	f44f 7194 	mov.w	r1, #296	@ 0x128
 8010b0e:	4618      	mov	r0, r3
 8010b10:	f7ff fd4c 	bl	80105ac <_ZN8touchgfx8Drawable9setHeightEs>
    box1.setPosition(0, 0, 240, 296);
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	f503 70c8 	add.w	r0, r3, #400	@ 0x190
 8010b1a:	f44f 7394 	mov.w	r3, #296	@ 0x128
 8010b1e:	9300      	str	r3, [sp, #0]
 8010b20:	23f0      	movs	r3, #240	@ 0xf0
 8010b22:	2200      	movs	r2, #0
 8010b24:	2100      	movs	r1, #0
 8010b26:	f7ff fcd5 	bl	80104d4 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	f503 74c8 	add.w	r4, r3, #400	@ 0x190
 8010b30:	23ff      	movs	r3, #255	@ 0xff
 8010b32:	773b      	strb	r3, [r7, #28]
 8010b34:	23ff      	movs	r3, #255	@ 0xff
 8010b36:	76fb      	strb	r3, [r7, #27]
 8010b38:	23ff      	movs	r3, #255	@ 0xff
 8010b3a:	76bb      	strb	r3, [r7, #26]
 8010b3c:	7f3b      	ldrb	r3, [r7, #28]
 8010b3e:	041a      	lsls	r2, r3, #16
 8010b40:	7efb      	ldrb	r3, [r7, #27]
 8010b42:	021b      	lsls	r3, r3, #8
 8010b44:	431a      	orrs	r2, r3
 8010b46:	7ebb      	ldrb	r3, [r7, #26]
 8010b48:	4313      	orrs	r3, r2
 8010b4a:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8010b4e:	f107 030c 	add.w	r3, r7, #12
 8010b52:	4611      	mov	r1, r2
 8010b54:	4618      	mov	r0, r3
 8010b56:	f7ff fc29 	bl	80103ac <_ZN8touchgfx9colortypeC1Em>
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	4619      	mov	r1, r3
 8010b5e:	4620      	mov	r0, r4
 8010b60:	f7ff ff08 	bl	8010974 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    swipeContainer1Page2.add(box1);
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	f503 72b2 	add.w	r2, r3, #356	@ 0x164
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8010b70:	4619      	mov	r1, r3
 8010b72:	4610      	mov	r0, r2
 8010b74:	f003 f962 	bl	8013e3c <_ZN8touchgfx9Container3addERNS_8DrawableE>

    swipeContainer1.add(swipeContainer1Page2);
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	f103 026c 	add.w	r2, r3, #108	@ 0x6c
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010b84:	4619      	mov	r1, r3
 8010b86:	4610      	mov	r0, r2
 8010b88:	f003 fe0d 	bl	80147a6 <_ZN8touchgfx14SwipeContainer3addERNS_8DrawableE>

    swipeContainer1Page3.setWidth(240);
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8010b92:	21f0      	movs	r1, #240	@ 0xf0
 8010b94:	4618      	mov	r0, r3
 8010b96:	f7ff fcfa 	bl	801058e <_ZN8touchgfx8Drawable8setWidthEs>
    swipeContainer1Page3.setHeight(296);
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8010ba0:	f44f 7194 	mov.w	r1, #296	@ 0x128
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	f7ff fd01 	bl	80105ac <_ZN8touchgfx8Drawable9setHeightEs>
    box2.setPosition(0, 0, 240, 296);
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	f503 70f4 	add.w	r0, r3, #488	@ 0x1e8
 8010bb0:	f44f 7394 	mov.w	r3, #296	@ 0x128
 8010bb4:	9300      	str	r3, [sp, #0]
 8010bb6:	23f0      	movs	r3, #240	@ 0xf0
 8010bb8:	2200      	movs	r2, #0
 8010bba:	2100      	movs	r1, #0
 8010bbc:	f7ff fc8a 	bl	80104d4 <_ZN8touchgfx8Drawable11setPositionEssss>
    box2.setColor(touchgfx::Color::getColorFromRGB(250, 25, 25));
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	f503 74f4 	add.w	r4, r3, #488	@ 0x1e8
 8010bc6:	23fa      	movs	r3, #250	@ 0xfa
 8010bc8:	77fb      	strb	r3, [r7, #31]
 8010bca:	2319      	movs	r3, #25
 8010bcc:	77bb      	strb	r3, [r7, #30]
 8010bce:	2319      	movs	r3, #25
 8010bd0:	777b      	strb	r3, [r7, #29]
 8010bd2:	7ffb      	ldrb	r3, [r7, #31]
 8010bd4:	041a      	lsls	r2, r3, #16
 8010bd6:	7fbb      	ldrb	r3, [r7, #30]
 8010bd8:	021b      	lsls	r3, r3, #8
 8010bda:	431a      	orrs	r2, r3
 8010bdc:	7f7b      	ldrb	r3, [r7, #29]
 8010bde:	4313      	orrs	r3, r2
 8010be0:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8010be4:	f107 0308 	add.w	r3, r7, #8
 8010be8:	4611      	mov	r1, r2
 8010bea:	4618      	mov	r0, r3
 8010bec:	f7ff fbde 	bl	80103ac <_ZN8touchgfx9colortypeC1Em>
 8010bf0:	68bb      	ldr	r3, [r7, #8]
 8010bf2:	4619      	mov	r1, r3
 8010bf4:	4620      	mov	r0, r4
 8010bf6:	f7ff febd 	bl	8010974 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    swipeContainer1Page3.add(box2);
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	f503 72de 	add.w	r2, r3, #444	@ 0x1bc
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8010c06:	4619      	mov	r1, r3
 8010c08:	4610      	mov	r0, r2
 8010c0a:	f003 f917 	bl	8013e3c <_ZN8touchgfx9Container3addERNS_8DrawableE>

    swipeContainer1.add(swipeContainer1Page3);
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	f103 026c 	add.w	r2, r3, #108	@ 0x6c
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8010c1a:	4619      	mov	r1, r3
 8010c1c:	4610      	mov	r0, r2
 8010c1e:	f003 fdc2 	bl	80147a6 <_ZN8touchgfx14SwipeContainer3addERNS_8DrawableE>

    swipeContainer1.setSelectedPage(1);
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	336c      	adds	r3, #108	@ 0x6c
 8010c26:	2101      	movs	r1, #1
 8010c28:	4618      	mov	r0, r3
 8010c2a:	f003 fdad 	bl	8014788 <_ZN8touchgfx14SwipeContainer15setSelectedPageEh>
    add(swipeContainer1);
 8010c2e:	687a      	ldr	r2, [r7, #4]
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	336c      	adds	r3, #108	@ 0x6c
 8010c34:	4619      	mov	r1, r3
 8010c36:	4610      	mov	r0, r2
 8010c38:	f7ff fe34 	bl	80108a4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	4618      	mov	r0, r3
 8010c40:	3724      	adds	r7, #36	@ 0x24
 8010c42:	46bd      	mov	sp, r7
 8010c44:	bd90      	pop	{r4, r7, pc}
 8010c46:	bf00      	nop
 8010c48:	0802ec60 	.word	0x0802ec60

08010c4c <_ZN14screenViewBaseD1Ev>:

screenViewBase::~screenViewBase()
 8010c4c:	b580      	push	{r7, lr}
 8010c4e:	b082      	sub	sp, #8
 8010c50:	af00      	add	r7, sp, #0
 8010c52:	6078      	str	r0, [r7, #4]
 8010c54:	4a16      	ldr	r2, [pc, #88]	@ (8010cb0 <_ZN14screenViewBaseD1Ev+0x64>)
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	601a      	str	r2, [r3, #0]
{

}
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8010c60:	4618      	mov	r0, r3
 8010c62:	f7ff feb7 	bl	80109d4 <_ZN8touchgfx3BoxD1Ev>
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	f7ff fd9f 	bl	80107b0 <_ZN8touchgfx9ContainerD1Ev>
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8010c78:	4618      	mov	r0, r3
 8010c7a:	f7ff feab 	bl	80109d4 <_ZN8touchgfx3BoxD1Ev>
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010c84:	4618      	mov	r0, r3
 8010c86:	f7ff fd93 	bl	80107b0 <_ZN8touchgfx9ContainerD1Ev>
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	336c      	adds	r3, #108	@ 0x6c
 8010c8e:	4618      	mov	r0, r3
 8010c90:	f003 fb5e 	bl	8014350 <_ZN8touchgfx14SwipeContainerD1Ev>
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	3340      	adds	r3, #64	@ 0x40
 8010c98:	4618      	mov	r0, r3
 8010c9a:	f7ff fe9b 	bl	80109d4 <_ZN8touchgfx3BoxD1Ev>
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	f7ff fe75 	bl	8010990 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	4618      	mov	r0, r3
 8010caa:	3708      	adds	r7, #8
 8010cac:	46bd      	mov	sp, r7
 8010cae:	bd80      	pop	{r7, pc}
 8010cb0:	0802ec60 	.word	0x0802ec60

08010cb4 <_ZN14screenViewBaseD0Ev>:
screenViewBase::~screenViewBase()
 8010cb4:	b580      	push	{r7, lr}
 8010cb6:	b082      	sub	sp, #8
 8010cb8:	af00      	add	r7, sp, #0
 8010cba:	6078      	str	r0, [r7, #4]
}
 8010cbc:	6878      	ldr	r0, [r7, #4]
 8010cbe:	f7ff ffc5 	bl	8010c4c <_ZN14screenViewBaseD1Ev>
 8010cc2:	f44f 7105 	mov.w	r1, #532	@ 0x214
 8010cc6:	6878      	ldr	r0, [r7, #4]
 8010cc8:	f01a ffdf 	bl	802bc8a <_ZdlPvj>
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	4618      	mov	r0, r3
 8010cd0:	3708      	adds	r7, #8
 8010cd2:	46bd      	mov	sp, r7
 8010cd4:	bd80      	pop	{r7, pc}

08010cd6 <_ZN14screenViewBase11setupScreenEv>:

void screenViewBase::setupScreen()
{
 8010cd6:	b480      	push	{r7}
 8010cd8:	b083      	sub	sp, #12
 8010cda:	af00      	add	r7, sp, #0
 8010cdc:	6078      	str	r0, [r7, #4]

}
 8010cde:	bf00      	nop
 8010ce0:	370c      	adds	r7, #12
 8010ce2:	46bd      	mov	sp, r7
 8010ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce8:	4770      	bx	lr
	...

08010cec <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>:
    View()
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b082      	sub	sp, #8
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	f00a fd7c 	bl	801b7f4 <_ZN8touchgfx6ScreenC1Ev>
 8010cfc:	4a05      	ldr	r2, [pc, #20]	@ (8010d14 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev+0x28>)
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	601a      	str	r2, [r3, #0]
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	2200      	movs	r2, #0
 8010d06:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	4618      	mov	r0, r3
 8010d0c:	3708      	adds	r7, #8
 8010d0e:	46bd      	mov	sp, r7
 8010d10:	bd80      	pop	{r7, pc}
 8010d12:	bf00      	nop
 8010d14:	0802ec94 	.word	0x0802ec94

08010d18 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8010d18:	b480      	push	{r7}
 8010d1a:	af00      	add	r7, sp, #0
    return bitmap_database;
 8010d1c:	4b02      	ldr	r3, [pc, #8]	@ (8010d28 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8010d1e:	4618      	mov	r0, r3
 8010d20:	46bd      	mov	sp, r7
 8010d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d26:	4770      	bx	lr
 8010d28:	0802ed28 	.word	0x0802ed28

08010d2c <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8010d2c:	b480      	push	{r7}
 8010d2e:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8010d30:	2302      	movs	r3, #2
}
 8010d32:	4618      	mov	r0, r3
 8010d34:	46bd      	mov	sp, r7
 8010d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d3a:	4770      	bx	lr

08010d3c <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8010d3c:	b480      	push	{r7}
 8010d3e:	b085      	sub	sp, #20
 8010d40:	af00      	add	r7, sp, #0
 8010d42:	60f8      	str	r0, [r7, #12]
 8010d44:	460b      	mov	r3, r1
 8010d46:	607a      	str	r2, [r7, #4]
 8010d48:	817b      	strh	r3, [r7, #10]
        return 0;
 8010d4a:	2300      	movs	r3, #0
    }
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	3714      	adds	r7, #20
 8010d50:	46bd      	mov	sp, r7
 8010d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d56:	4770      	bx	lr

08010d58 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    virtual const uint16_t* getGSUBTable() const
 8010d58:	b480      	push	{r7}
 8010d5a:	b083      	sub	sp, #12
 8010d5c:	af00      	add	r7, sp, #0
 8010d5e:	6078      	str	r0, [r7, #4]
        return 0;
 8010d60:	2300      	movs	r3, #0
    }
 8010d62:	4618      	mov	r0, r3
 8010d64:	370c      	adds	r7, #12
 8010d66:	46bd      	mov	sp, r7
 8010d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d6c:	4770      	bx	lr

08010d6e <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8010d6e:	b480      	push	{r7}
 8010d70:	b083      	sub	sp, #12
 8010d72:	af00      	add	r7, sp, #0
 8010d74:	6078      	str	r0, [r7, #4]
        return 0;
 8010d76:	2300      	movs	r3, #0
    }
 8010d78:	4618      	mov	r0, r3
 8010d7a:	370c      	adds	r7, #12
 8010d7c:	46bd      	mov	sp, r7
 8010d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d82:	4770      	bx	lr

08010d84 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8010d84:	b480      	push	{r7}
 8010d86:	b085      	sub	sp, #20
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	60f8      	str	r0, [r7, #12]
 8010d8c:	60b9      	str	r1, [r7, #8]
 8010d8e:	4613      	mov	r3, r2
 8010d90:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 8010d92:	4a07      	ldr	r2, [pc, #28]	@ (8010db0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	6013      	str	r3, [r2, #0]
        fonts = f;
 8010d98:	4a06      	ldr	r2, [pc, #24]	@ (8010db4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8010d9a:	68bb      	ldr	r3, [r7, #8]
 8010d9c:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8010d9e:	4a06      	ldr	r2, [pc, #24]	@ (8010db8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8010da0:	88fb      	ldrh	r3, [r7, #6]
 8010da2:	8013      	strh	r3, [r2, #0]
    }
 8010da4:	bf00      	nop
 8010da6:	3714      	adds	r7, #20
 8010da8:	46bd      	mov	sp, r7
 8010daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dae:	4770      	bx	lr
 8010db0:	2005bad4 	.word	0x2005bad4
 8010db4:	2005badc 	.word	0x2005badc
 8010db8:	2005bad8 	.word	0x2005bad8

08010dbc <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8010dbc:	b40e      	push	{r1, r2, r3}
 8010dbe:	b580      	push	{r7, lr}
 8010dc0:	b085      	sub	sp, #20
 8010dc2:	af00      	add	r7, sp, #0
 8010dc4:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8010dc6:	f107 0320 	add.w	r3, r7, #32
 8010dca:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8010dcc:	68bb      	ldr	r3, [r7, #8]
 8010dce:	69fa      	ldr	r2, [r7, #28]
 8010dd0:	2100      	movs	r1, #0
 8010dd2:	6878      	ldr	r0, [r7, #4]
 8010dd4:	f009 fda2 	bl	801a91c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8010dd8:	4603      	mov	r3, r0
 8010dda:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8010ddc:	89fb      	ldrh	r3, [r7, #14]
}
 8010dde:	4618      	mov	r0, r3
 8010de0:	3714      	adds	r7, #20
 8010de2:	46bd      	mov	sp, r7
 8010de4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010de8:	b003      	add	sp, #12
 8010dea:	4770      	bx	lr

08010dec <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8010dec:	b40c      	push	{r2, r3}
 8010dee:	b580      	push	{r7, lr}
 8010df0:	b084      	sub	sp, #16
 8010df2:	af00      	add	r7, sp, #0
 8010df4:	6078      	str	r0, [r7, #4]
 8010df6:	460b      	mov	r3, r1
 8010df8:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8010dfa:	f107 031c 	add.w	r3, r7, #28
 8010dfe:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8010e00:	78f9      	ldrb	r1, [r7, #3]
 8010e02:	68bb      	ldr	r3, [r7, #8]
 8010e04:	69ba      	ldr	r2, [r7, #24]
 8010e06:	6878      	ldr	r0, [r7, #4]
 8010e08:	f009 fd88 	bl	801a91c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8010e0c:	4603      	mov	r3, r0
 8010e0e:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8010e10:	89fb      	ldrh	r3, [r7, #14]
}
 8010e12:	4618      	mov	r0, r3
 8010e14:	3710      	adds	r7, #16
 8010e16:	46bd      	mov	sp, r7
 8010e18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010e1c:	b002      	add	sp, #8
 8010e1e:	4770      	bx	lr

08010e20 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8010e20:	b580      	push	{r7, lr}
 8010e22:	b08a      	sub	sp, #40	@ 0x28
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	6078      	str	r0, [r7, #4]
 8010e28:	460b      	mov	r3, r1
 8010e2a:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d016      	beq.n	8010e62 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	3322      	adds	r3, #34	@ 0x22
 8010e38:	627b      	str	r3, [r7, #36]	@ 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8010e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e3c:	8adb      	ldrh	r3, [r3, #22]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d105      	bne.n	8010e4e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8010e42:	4b43      	ldr	r3, [pc, #268]	@ (8010f50 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8010e44:	4a43      	ldr	r2, [pc, #268]	@ (8010f54 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8010e46:	21c5      	movs	r1, #197	@ 0xc5
 8010e48:	4843      	ldr	r0, [pc, #268]	@ (8010f58 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8010e4a:	f01b fe13 	bl	802ca74 <__assert_func>
            return buffer[pos];
 8010e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e50:	8a9b      	ldrh	r3, [r3, #20]
 8010e52:	461a      	mov	r2, r3
 8010e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e56:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d001      	beq.n	8010e62 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8010e5e:	2301      	movs	r3, #1
 8010e60:	e000      	b.n	8010e64 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8010e62:	2300      	movs	r3, #0
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d06a      	beq.n	8010f3e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8010e68:	6878      	ldr	r0, [r7, #4]
 8010e6a:	f00b fbd4 	bl	801c616 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	3322      	adds	r3, #34	@ 0x22
 8010e72:	623b      	str	r3, [r7, #32]
 8010e74:	2301      	movs	r3, #1
 8010e76:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8010e78:	6a3b      	ldr	r3, [r7, #32]
 8010e7a:	8adb      	ldrh	r3, [r3, #22]
 8010e7c:	8bfa      	ldrh	r2, [r7, #30]
 8010e7e:	429a      	cmp	r2, r3
 8010e80:	d305      	bcc.n	8010e8e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8010e82:	4b36      	ldr	r3, [pc, #216]	@ (8010f5c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8010e84:	4a36      	ldr	r2, [pc, #216]	@ (8010f60 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8010e86:	21cb      	movs	r1, #203	@ 0xcb
 8010e88:	4833      	ldr	r0, [pc, #204]	@ (8010f58 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8010e8a:	f01b fdf3 	bl	802ca74 <__assert_func>
            const uint16_t index = pos + offset;
 8010e8e:	6a3b      	ldr	r3, [r7, #32]
 8010e90:	8a9a      	ldrh	r2, [r3, #20]
 8010e92:	8bfb      	ldrh	r3, [r7, #30]
 8010e94:	4413      	add	r3, r2
 8010e96:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8010e98:	8bbb      	ldrh	r3, [r7, #28]
 8010e9a:	2b09      	cmp	r3, #9
 8010e9c:	d801      	bhi.n	8010ea2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8010e9e:	8bbb      	ldrh	r3, [r7, #28]
 8010ea0:	e001      	b.n	8010ea6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8010ea2:	8bbb      	ldrh	r3, [r7, #28]
 8010ea4:	3b0a      	subs	r3, #10
 8010ea6:	6a3a      	ldr	r2, [r7, #32]
 8010ea8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010eac:	f640 123f 	movw	r2, #2367	@ 0x93f
 8010eb0:	4293      	cmp	r3, r2
 8010eb2:	bf0c      	ite	eq
 8010eb4:	2301      	moveq	r3, #1
 8010eb6:	2300      	movne	r3, #0
 8010eb8:	b2db      	uxtb	r3, r3
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d03f      	beq.n	8010f3e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	3322      	adds	r3, #34	@ 0x22
 8010ec2:	687a      	ldr	r2, [r7, #4]
 8010ec4:	3222      	adds	r2, #34	@ 0x22
 8010ec6:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8010ec8:	68ba      	ldr	r2, [r7, #8]
 8010eca:	8ad2      	ldrh	r2, [r2, #22]
 8010ecc:	2a00      	cmp	r2, #0
 8010ece:	d105      	bne.n	8010edc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8010ed0:	4b1f      	ldr	r3, [pc, #124]	@ (8010f50 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8010ed2:	4a20      	ldr	r2, [pc, #128]	@ (8010f54 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8010ed4:	21c5      	movs	r1, #197	@ 0xc5
 8010ed6:	4820      	ldr	r0, [pc, #128]	@ (8010f58 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8010ed8:	f01b fdcc 	bl	802ca74 <__assert_func>
            return buffer[pos];
 8010edc:	68ba      	ldr	r2, [r7, #8]
 8010ede:	8a92      	ldrh	r2, [r2, #20]
 8010ee0:	4611      	mov	r1, r2
 8010ee2:	68ba      	ldr	r2, [r7, #8]
 8010ee4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8010ee8:	613b      	str	r3, [r7, #16]
 8010eea:	4613      	mov	r3, r2
 8010eec:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8010eee:	693b      	ldr	r3, [r7, #16]
 8010ef0:	8adb      	ldrh	r3, [r3, #22]
 8010ef2:	2b01      	cmp	r3, #1
 8010ef4:	d806      	bhi.n	8010f04 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8010ef6:	4b1b      	ldr	r3, [pc, #108]	@ (8010f64 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8010ef8:	4a1b      	ldr	r2, [pc, #108]	@ (8010f68 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8010efa:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 8010efe:	4816      	ldr	r0, [pc, #88]	@ (8010f58 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8010f00:	f01b fdb8 	bl	802ca74 <__assert_func>
            const uint16_t index = pos + 1;
 8010f04:	693b      	ldr	r3, [r7, #16]
 8010f06:	8a9b      	ldrh	r3, [r3, #20]
 8010f08:	3301      	adds	r3, #1
 8010f0a:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8010f0c:	89bb      	ldrh	r3, [r7, #12]
 8010f0e:	2b09      	cmp	r3, #9
 8010f10:	d801      	bhi.n	8010f16 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8010f12:	89bb      	ldrh	r3, [r7, #12]
 8010f14:	e000      	b.n	8010f18 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8010f16:	2300      	movs	r3, #0
 8010f18:	693a      	ldr	r2, [r7, #16]
 8010f1a:	89f9      	ldrh	r1, [r7, #14]
 8010f1c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8010f20:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	3322      	adds	r3, #34	@ 0x22
 8010f26:	61bb      	str	r3, [r7, #24]
 8010f28:	f640 133f 	movw	r3, #2367	@ 0x93f
 8010f2c:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8010f2e:	69bb      	ldr	r3, [r7, #24]
 8010f30:	8a9b      	ldrh	r3, [r3, #20]
 8010f32:	4619      	mov	r1, r3
 8010f34:	69bb      	ldr	r3, [r7, #24]
 8010f36:	8afa      	ldrh	r2, [r7, #22]
 8010f38:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8010f3c:	bf00      	nop
        }
    }
    return getNextChar();
 8010f3e:	6878      	ldr	r0, [r7, #4]
 8010f40:	f00b fa6c 	bl	801c41c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8010f44:	4603      	mov	r3, r0
}
 8010f46:	4618      	mov	r0, r3
 8010f48:	3728      	adds	r7, #40	@ 0x28
 8010f4a:	46bd      	mov	sp, r7
 8010f4c:	bd80      	pop	{r7, pc}
 8010f4e:	bf00      	nop
 8010f50:	0802e00c 	.word	0x0802e00c
 8010f54:	0802e018 	.word	0x0802e018
 8010f58:	0802e0c4 	.word	0x0802e0c4
 8010f5c:	0802e10c 	.word	0x0802e10c
 8010f60:	0802e11c 	.word	0x0802e11c
 8010f64:	0802e1f0 	.word	0x0802e1f0
 8010f68:	0802e1fc 	.word	0x0802e1fc

08010f6c <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8010f6c:	b580      	push	{r7, lr}
 8010f6e:	b082      	sub	sp, #8
 8010f70:	af00      	add	r7, sp, #0
 8010f72:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8010f74:	6878      	ldr	r0, [r7, #4]
 8010f76:	f00b fa18 	bl	801c3aa <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8010f7a:	bf00      	nop
 8010f7c:	3708      	adds	r7, #8
 8010f7e:	46bd      	mov	sp, r7
 8010f80:	bd80      	pop	{r7, pc}
	...

08010f84 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8010f84:	b590      	push	{r4, r7, lr}
 8010f86:	b085      	sub	sp, #20
 8010f88:	af00      	add	r7, sp, #0
 8010f8a:	4603      	mov	r3, r0
 8010f8c:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8010f8e:	2300      	movs	r3, #0
 8010f90:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8010f92:	88fb      	ldrh	r3, [r7, #6]
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d127      	bne.n	8010fe8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8010f98:	88fb      	ldrh	r3, [r7, #6]
 8010f9a:	4a1e      	ldr	r2, [pc, #120]	@ (8011014 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8010f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d016      	beq.n	8010fd2 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8010fa4:	88fb      	ldrh	r3, [r7, #6]
 8010fa6:	4a1b      	ldr	r2, [pc, #108]	@ (8011014 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8010fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010fac:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8010fae:	68bb      	ldr	r3, [r7, #8]
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	68ba      	ldr	r2, [r7, #8]
 8010fb4:	4413      	add	r3, r2
 8010fb6:	4a18      	ldr	r2, [pc, #96]	@ (8011018 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8010fb8:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8010fba:	68bb      	ldr	r3, [r7, #8]
 8010fbc:	685b      	ldr	r3, [r3, #4]
 8010fbe:	68ba      	ldr	r2, [r7, #8]
 8010fc0:	4413      	add	r3, r2
 8010fc2:	4a16      	ldr	r2, [pc, #88]	@ (801101c <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8010fc4:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8010fc6:	68bb      	ldr	r3, [r7, #8]
 8010fc8:	689b      	ldr	r3, [r3, #8]
 8010fca:	68ba      	ldr	r2, [r7, #8]
 8010fcc:	4413      	add	r3, r2
 8010fce:	60fb      	str	r3, [r7, #12]
 8010fd0:	e00a      	b.n	8010fe8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8010fd2:	4b11      	ldr	r3, [pc, #68]	@ (8011018 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8010fd4:	4a12      	ldr	r2, [pc, #72]	@ (8011020 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8010fd6:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8010fd8:	4a12      	ldr	r2, [pc, #72]	@ (8011024 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8010fda:	4b10      	ldr	r3, [pc, #64]	@ (801101c <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8010fdc:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8010fde:	88fb      	ldrh	r3, [r7, #6]
 8010fe0:	4a11      	ldr	r2, [pc, #68]	@ (8011028 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8010fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010fe6:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d00d      	beq.n	801100a <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8010fee:	4a0f      	ldr	r2, [pc, #60]	@ (801102c <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8010ff0:	88fb      	ldrh	r3, [r7, #6]
 8010ff2:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8010ff4:	f000 f824 	bl	8011040 <_ZN17TypedTextDatabase8getFontsEv>
 8010ff8:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8010ffa:	f000 f819 	bl	8011030 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8010ffe:	4603      	mov	r3, r0
 8011000:	461a      	mov	r2, r3
 8011002:	4621      	mov	r1, r4
 8011004:	68f8      	ldr	r0, [r7, #12]
 8011006:	f7ff febd 	bl	8010d84 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 801100a:	bf00      	nop
 801100c:	3714      	adds	r7, #20
 801100e:	46bd      	mov	sp, r7
 8011010:	bd90      	pop	{r4, r7, pc}
 8011012:	bf00      	nop
 8011014:	2005a6e8 	.word	0x2005a6e8
 8011018:	2005a6f0 	.word	0x2005a6f0
 801101c:	2005a6f4 	.word	0x2005a6f4
 8011020:	080311e4 	.word	0x080311e4
 8011024:	080311e0 	.word	0x080311e0
 8011028:	080311ec 	.word	0x080311ec
 801102c:	2005a6ec 	.word	0x2005a6ec

08011030 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8011030:	b480      	push	{r7}
 8011032:	af00      	add	r7, sp, #0
    return 0;
 8011034:	2300      	movs	r3, #0
}
 8011036:	4618      	mov	r0, r3
 8011038:	46bd      	mov	sp, r7
 801103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801103e:	4770      	bx	lr

08011040 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8011040:	b480      	push	{r7}
 8011042:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8011044:	4b02      	ldr	r3, [pc, #8]	@ (8011050 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8011046:	4618      	mov	r0, r3
 8011048:	46bd      	mov	sp, r7
 801104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801104e:	4770      	bx	lr
 8011050:	2005a6f8 	.word	0x2005a6f8

08011054 <_Z41__static_initialization_and_destruction_0v>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8011054:	b580      	push	{r7, lr}
 8011056:	af00      	add	r7, sp, #0
    &(getFont_verdana_20_4bpp()),
 8011058:	f7fe fba2 	bl	800f7a0 <_Z23getFont_verdana_20_4bppv>
 801105c:	4603      	mov	r3, r0
};
 801105e:	4a07      	ldr	r2, [pc, #28]	@ (801107c <_Z41__static_initialization_and_destruction_0v+0x28>)
 8011060:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 8011062:	f7fe fbf5 	bl	800f850 <_Z23getFont_verdana_40_4bppv>
 8011066:	4603      	mov	r3, r0
};
 8011068:	4a04      	ldr	r2, [pc, #16]	@ (801107c <_Z41__static_initialization_and_destruction_0v+0x28>)
 801106a:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 801106c:	f7fe fb40 	bl	800f6f0 <_Z23getFont_verdana_10_4bppv>
 8011070:	4603      	mov	r3, r0
};
 8011072:	4a02      	ldr	r2, [pc, #8]	@ (801107c <_Z41__static_initialization_and_destruction_0v+0x28>)
 8011074:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 8011076:	bf00      	nop
 8011078:	bd80      	pop	{r7, pc}
 801107a:	bf00      	nop
 801107c:	2005a6f8 	.word	0x2005a6f8

08011080 <_GLOBAL__sub_I_touchgfx_fonts>:
 8011080:	b580      	push	{r7, lr}
 8011082:	af00      	add	r7, sp, #0
 8011084:	f7ff ffe6 	bl	8011054 <_Z41__static_initialization_and_destruction_0v>
 8011088:	bd80      	pop	{r7, pc}
	...

0801108c <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 801108c:	b580      	push	{r7, lr}
 801108e:	b082      	sub	sp, #8
 8011090:	af00      	add	r7, sp, #0
 8011092:	6078      	str	r0, [r7, #4]
 8011094:	4a05      	ldr	r2, [pc, #20]	@ (80110ac <_ZN19FrontendApplicationD1Ev+0x20>)
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	601a      	str	r2, [r3, #0]
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	4618      	mov	r0, r3
 801109e:	f7fe fe63 	bl	800fd68 <_ZN23FrontendApplicationBaseD1Ev>
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	4618      	mov	r0, r3
 80110a6:	3708      	adds	r7, #8
 80110a8:	46bd      	mov	sp, r7
 80110aa:	bd80      	pop	{r7, pc}
 80110ac:	0802edbc 	.word	0x0802edbc

080110b0 <_ZN19FrontendApplicationD0Ev>:
 80110b0:	b580      	push	{r7, lr}
 80110b2:	b082      	sub	sp, #8
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	6078      	str	r0, [r7, #4]
 80110b8:	6878      	ldr	r0, [r7, #4]
 80110ba:	f7ff ffe7 	bl	801108c <_ZN19FrontendApplicationD1Ev>
 80110be:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 80110c2:	6878      	ldr	r0, [r7, #4]
 80110c4:	f01a fde1 	bl	802bc8a <_ZdlPvj>
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	4618      	mov	r0, r3
 80110cc:	3708      	adds	r7, #8
 80110ce:	46bd      	mov	sp, r7
 80110d0:	bd80      	pop	{r7, pc}

080110d2 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 80110d2:	b580      	push	{r7, lr}
 80110d4:	b082      	sub	sp, #8
 80110d6:	af00      	add	r7, sp, #0
 80110d8:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 80110e0:	4618      	mov	r0, r3
 80110e2:	f000 f82d 	bl	8011140 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	4618      	mov	r0, r3
 80110ea:	f008 fbe1 	bl	80198b0 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 80110ee:	bf00      	nop
 80110f0:	3708      	adds	r7, #8
 80110f2:	46bd      	mov	sp, r7
 80110f4:	bd80      	pop	{r7, pc}
	...

080110f8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80110f8:	b580      	push	{r7, lr}
 80110fa:	b084      	sub	sp, #16
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	60f8      	str	r0, [r7, #12]
 8011100:	60b9      	str	r1, [r7, #8]
 8011102:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	687a      	ldr	r2, [r7, #4]
 8011108:	68b9      	ldr	r1, [r7, #8]
 801110a:	4618      	mov	r0, r3
 801110c:	f7fe fe7c 	bl	800fe08 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8011110:	4a03      	ldr	r2, [pc, #12]	@ (8011120 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	601a      	str	r2, [r3, #0]
{

}
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	4618      	mov	r0, r3
 801111a:	3710      	adds	r7, #16
 801111c:	46bd      	mov	sp, r7
 801111e:	bd80      	pop	{r7, pc}
 8011120:	0802edbc 	.word	0x0802edbc

08011124 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8011124:	b480      	push	{r7}
 8011126:	b083      	sub	sp, #12
 8011128:	af00      	add	r7, sp, #0
 801112a:	6078      	str	r0, [r7, #4]
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	2200      	movs	r2, #0
 8011130:	601a      	str	r2, [r3, #0]
{

}
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	4618      	mov	r0, r3
 8011136:	370c      	adds	r7, #12
 8011138:	46bd      	mov	sp, r7
 801113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801113e:	4770      	bx	lr

08011140 <_ZN5Model4tickEv>:

void Model::tick()
{
 8011140:	b480      	push	{r7}
 8011142:	b083      	sub	sp, #12
 8011144:	af00      	add	r7, sp, #0
 8011146:	6078      	str	r0, [r7, #4]

}
 8011148:	bf00      	nop
 801114a:	370c      	adds	r7, #12
 801114c:	46bd      	mov	sp, r7
 801114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011152:	4770      	bx	lr

08011154 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8011154:	b480      	push	{r7}
 8011156:	b083      	sub	sp, #12
 8011158:	af00      	add	r7, sp, #0
 801115a:	6078      	str	r0, [r7, #4]
    {
    }
 801115c:	bf00      	nop
 801115e:	370c      	adds	r7, #12
 8011160:	46bd      	mov	sp, r7
 8011162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011166:	4770      	bx	lr

08011168 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8011168:	b480      	push	{r7}
 801116a:	b083      	sub	sp, #12
 801116c:	af00      	add	r7, sp, #0
 801116e:	6078      	str	r0, [r7, #4]
    {
    }
 8011170:	bf00      	nop
 8011172:	370c      	adds	r7, #12
 8011174:	46bd      	mov	sp, r7
 8011176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801117a:	4770      	bx	lr

0801117c <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 801117c:	b480      	push	{r7}
 801117e:	b083      	sub	sp, #12
 8011180:	af00      	add	r7, sp, #0
 8011182:	6078      	str	r0, [r7, #4]
    {
 8011184:	4a04      	ldr	r2, [pc, #16]	@ (8011198 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	601a      	str	r2, [r3, #0]
    }
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	4618      	mov	r0, r3
 801118e:	370c      	adds	r7, #12
 8011190:	46bd      	mov	sp, r7
 8011192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011196:	4770      	bx	lr
 8011198:	0802ee48 	.word	0x0802ee48

0801119c <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 801119c:	b580      	push	{r7, lr}
 801119e:	b082      	sub	sp, #8
 80111a0:	af00      	add	r7, sp, #0
 80111a2:	6078      	str	r0, [r7, #4]
    }
 80111a4:	6878      	ldr	r0, [r7, #4]
 80111a6:	f7ff ffe9 	bl	801117c <_ZN8touchgfx9PresenterD1Ev>
 80111aa:	2104      	movs	r1, #4
 80111ac:	6878      	ldr	r0, [r7, #4]
 80111ae:	f01a fd6c 	bl	802bc8a <_ZdlPvj>
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	4618      	mov	r0, r3
 80111b6:	3708      	adds	r7, #8
 80111b8:	46bd      	mov	sp, r7
 80111ba:	bd80      	pop	{r7, pc}

080111bc <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 80111bc:	b480      	push	{r7}
 80111be:	b083      	sub	sp, #12
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	6078      	str	r0, [r7, #4]
    {
 80111c4:	4a04      	ldr	r2, [pc, #16]	@ (80111d8 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	601a      	str	r2, [r3, #0]
    }
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	4618      	mov	r0, r3
 80111ce:	370c      	adds	r7, #12
 80111d0:	46bd      	mov	sp, r7
 80111d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d6:	4770      	bx	lr
 80111d8:	0802ee48 	.word	0x0802ee48

080111dc <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 80111dc:	b480      	push	{r7}
 80111de:	b083      	sub	sp, #12
 80111e0:	af00      	add	r7, sp, #0
 80111e2:	6078      	str	r0, [r7, #4]
 80111e4:	4a06      	ldr	r2, [pc, #24]	@ (8011200 <_ZN13ModelListenerC1Ev+0x24>)
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	601a      	str	r2, [r3, #0]
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	2200      	movs	r2, #0
 80111ee:	605a      	str	r2, [r3, #4]
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	4618      	mov	r0, r3
 80111f4:	370c      	adds	r7, #12
 80111f6:	46bd      	mov	sp, r7
 80111f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111fc:	4770      	bx	lr
 80111fe:	bf00      	nop
 8011200:	0802ee38 	.word	0x0802ee38

08011204 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8011204:	b480      	push	{r7}
 8011206:	b083      	sub	sp, #12
 8011208:	af00      	add	r7, sp, #0
 801120a:	6078      	str	r0, [r7, #4]
 801120c:	4a04      	ldr	r2, [pc, #16]	@ (8011220 <_ZN13ModelListenerD1Ev+0x1c>)
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	601a      	str	r2, [r3, #0]
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	4618      	mov	r0, r3
 8011216:	370c      	adds	r7, #12
 8011218:	46bd      	mov	sp, r7
 801121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801121e:	4770      	bx	lr
 8011220:	0802ee38 	.word	0x0802ee38

08011224 <_ZN13ModelListenerD0Ev>:
 8011224:	b580      	push	{r7, lr}
 8011226:	b082      	sub	sp, #8
 8011228:	af00      	add	r7, sp, #0
 801122a:	6078      	str	r0, [r7, #4]
 801122c:	6878      	ldr	r0, [r7, #4]
 801122e:	f7ff ffe9 	bl	8011204 <_ZN13ModelListenerD1Ev>
 8011232:	2108      	movs	r1, #8
 8011234:	6878      	ldr	r0, [r7, #4]
 8011236:	f01a fd28 	bl	802bc8a <_ZdlPvj>
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	4618      	mov	r0, r3
 801123e:	3708      	adds	r7, #8
 8011240:	46bd      	mov	sp, r7
 8011242:	bd80      	pop	{r7, pc}

08011244 <_ZN15screenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~screenPresenter() {}
 8011244:	b580      	push	{r7, lr}
 8011246:	b082      	sub	sp, #8
 8011248:	af00      	add	r7, sp, #0
 801124a:	6078      	str	r0, [r7, #4]
 801124c:	4a09      	ldr	r2, [pc, #36]	@ (8011274 <_ZN15screenPresenterD1Ev+0x30>)
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	601a      	str	r2, [r3, #0]
 8011252:	4a09      	ldr	r2, [pc, #36]	@ (8011278 <_ZN15screenPresenterD1Ev+0x34>)
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	605a      	str	r2, [r3, #4]
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	3304      	adds	r3, #4
 801125c:	4618      	mov	r0, r3
 801125e:	f7ff ffd1 	bl	8011204 <_ZN13ModelListenerD1Ev>
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	4618      	mov	r0, r3
 8011266:	f7ff ff89 	bl	801117c <_ZN8touchgfx9PresenterD1Ev>
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	4618      	mov	r0, r3
 801126e:	3708      	adds	r7, #8
 8011270:	46bd      	mov	sp, r7
 8011272:	bd80      	pop	{r7, pc}
 8011274:	0802ee10 	.word	0x0802ee10
 8011278:	0802ee28 	.word	0x0802ee28

0801127c <_ZThn4_N15screenPresenterD1Ev>:
 801127c:	f1a0 0004 	sub.w	r0, r0, #4
 8011280:	e7e0      	b.n	8011244 <_ZN15screenPresenterD1Ev>
 8011282:	bf00      	nop

08011284 <_ZN15screenPresenterD0Ev>:
 8011284:	b580      	push	{r7, lr}
 8011286:	b082      	sub	sp, #8
 8011288:	af00      	add	r7, sp, #0
 801128a:	6078      	str	r0, [r7, #4]
 801128c:	6878      	ldr	r0, [r7, #4]
 801128e:	f7ff ffd9 	bl	8011244 <_ZN15screenPresenterD1Ev>
 8011292:	2110      	movs	r1, #16
 8011294:	6878      	ldr	r0, [r7, #4]
 8011296:	f01a fcf8 	bl	802bc8a <_ZdlPvj>
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	4618      	mov	r0, r3
 801129e:	3708      	adds	r7, #8
 80112a0:	46bd      	mov	sp, r7
 80112a2:	bd80      	pop	{r7, pc}

080112a4 <_ZThn4_N15screenPresenterD0Ev>:
 80112a4:	f1a0 0004 	sub.w	r0, r0, #4
 80112a8:	e7ec      	b.n	8011284 <_ZN15screenPresenterD0Ev>
	...

080112ac <_ZN15screenPresenterC1ER10screenView>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

screenPresenter::screenPresenter(screenView& v)
 80112ac:	b580      	push	{r7, lr}
 80112ae:	b082      	sub	sp, #8
 80112b0:	af00      	add	r7, sp, #0
 80112b2:	6078      	str	r0, [r7, #4]
 80112b4:	6039      	str	r1, [r7, #0]
    : view(v)
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	4618      	mov	r0, r3
 80112ba:	f7ff ff7f 	bl	80111bc <_ZN8touchgfx9PresenterC1Ev>
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	3304      	adds	r3, #4
 80112c2:	4618      	mov	r0, r3
 80112c4:	f7ff ff8a 	bl	80111dc <_ZN13ModelListenerC1Ev>
 80112c8:	4a06      	ldr	r2, [pc, #24]	@ (80112e4 <_ZN15screenPresenterC1ER10screenView+0x38>)
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	601a      	str	r2, [r3, #0]
 80112ce:	4a06      	ldr	r2, [pc, #24]	@ (80112e8 <_ZN15screenPresenterC1ER10screenView+0x3c>)
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	605a      	str	r2, [r3, #4]
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	683a      	ldr	r2, [r7, #0]
 80112d8:	60da      	str	r2, [r3, #12]
{

}
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	4618      	mov	r0, r3
 80112de:	3708      	adds	r7, #8
 80112e0:	46bd      	mov	sp, r7
 80112e2:	bd80      	pop	{r7, pc}
 80112e4:	0802ee10 	.word	0x0802ee10
 80112e8:	0802ee28 	.word	0x0802ee28

080112ec <_ZN15screenPresenter8activateEv>:

void screenPresenter::activate()
{
 80112ec:	b480      	push	{r7}
 80112ee:	b083      	sub	sp, #12
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	6078      	str	r0, [r7, #4]

}
 80112f4:	bf00      	nop
 80112f6:	370c      	adds	r7, #12
 80112f8:	46bd      	mov	sp, r7
 80112fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112fe:	4770      	bx	lr

08011300 <_ZN15screenPresenter10deactivateEv>:

void screenPresenter::deactivate()
{
 8011300:	b480      	push	{r7}
 8011302:	b083      	sub	sp, #12
 8011304:	af00      	add	r7, sp, #0
 8011306:	6078      	str	r0, [r7, #4]

}
 8011308:	bf00      	nop
 801130a:	370c      	adds	r7, #12
 801130c:	46bd      	mov	sp, r7
 801130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011312:	4770      	bx	lr

08011314 <_ZN10screenViewD1Ev>:

class screenView : public screenViewBase
{
public:
    screenView();
    virtual ~screenView() {}
 8011314:	b580      	push	{r7, lr}
 8011316:	b082      	sub	sp, #8
 8011318:	af00      	add	r7, sp, #0
 801131a:	6078      	str	r0, [r7, #4]
 801131c:	4a05      	ldr	r2, [pc, #20]	@ (8011334 <_ZN10screenViewD1Ev+0x20>)
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	601a      	str	r2, [r3, #0]
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	4618      	mov	r0, r3
 8011326:	f7ff fc91 	bl	8010c4c <_ZN14screenViewBaseD1Ev>
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	4618      	mov	r0, r3
 801132e:	3708      	adds	r7, #8
 8011330:	46bd      	mov	sp, r7
 8011332:	bd80      	pop	{r7, pc}
 8011334:	0802ee60 	.word	0x0802ee60

08011338 <_ZN10screenViewD0Ev>:
 8011338:	b580      	push	{r7, lr}
 801133a:	b082      	sub	sp, #8
 801133c:	af00      	add	r7, sp, #0
 801133e:	6078      	str	r0, [r7, #4]
 8011340:	6878      	ldr	r0, [r7, #4]
 8011342:	f7ff ffe7 	bl	8011314 <_ZN10screenViewD1Ev>
 8011346:	f44f 7105 	mov.w	r1, #532	@ 0x214
 801134a:	6878      	ldr	r0, [r7, #4]
 801134c:	f01a fc9d 	bl	802bc8a <_ZdlPvj>
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	4618      	mov	r0, r3
 8011354:	3708      	adds	r7, #8
 8011356:	46bd      	mov	sp, r7
 8011358:	bd80      	pop	{r7, pc}
	...

0801135c <_ZN10screenViewC1Ev>:
#include <gui/screen_screen/screenView.hpp>

screenView::screenView()
 801135c:	b580      	push	{r7, lr}
 801135e:	b082      	sub	sp, #8
 8011360:	af00      	add	r7, sp, #0
 8011362:	6078      	str	r0, [r7, #4]
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	4618      	mov	r0, r3
 8011368:	f7ff fb56 	bl	8010a18 <_ZN14screenViewBaseC1Ev>
 801136c:	4a03      	ldr	r2, [pc, #12]	@ (801137c <_ZN10screenViewC1Ev+0x20>)
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	601a      	str	r2, [r3, #0]
{

}
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	4618      	mov	r0, r3
 8011376:	3708      	adds	r7, #8
 8011378:	46bd      	mov	sp, r7
 801137a:	bd80      	pop	{r7, pc}
 801137c:	0802ee60 	.word	0x0802ee60

08011380 <_ZN10screenView11setupScreenEv>:

void screenView::setupScreen()
{
 8011380:	b580      	push	{r7, lr}
 8011382:	b082      	sub	sp, #8
 8011384:	af00      	add	r7, sp, #0
 8011386:	6078      	str	r0, [r7, #4]
    screenViewBase::setupScreen();
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	4618      	mov	r0, r3
 801138c:	f7ff fca3 	bl	8010cd6 <_ZN14screenViewBase11setupScreenEv>
}
 8011390:	bf00      	nop
 8011392:	3708      	adds	r7, #8
 8011394:	46bd      	mov	sp, r7
 8011396:	bd80      	pop	{r7, pc}

08011398 <_ZN10screenView14tearDownScreenEv>:

void screenView::tearDownScreen()
{
 8011398:	b580      	push	{r7, lr}
 801139a:	b082      	sub	sp, #8
 801139c:	af00      	add	r7, sp, #0
 801139e:	6078      	str	r0, [r7, #4]
    screenViewBase::tearDownScreen();
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	4618      	mov	r0, r3
 80113a4:	f7ff fa5e 	bl	8010864 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 80113a8:	bf00      	nop
 80113aa:	3708      	adds	r7, #8
 80113ac:	46bd      	mov	sp, r7
 80113ae:	bd80      	pop	{r7, pc}

080113b0 <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 80113b0:	b480      	push	{r7}
 80113b2:	b083      	sub	sp, #12
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	6078      	str	r0, [r7, #4]
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	bfb8      	it	lt
 80113be:	425b      	neglt	r3, r3
 80113c0:	4618      	mov	r0, r3
 80113c2:	370c      	adds	r7, #12
 80113c4:	46bd      	mov	sp, r7
 80113c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ca:	4770      	bx	lr

080113cc <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 80113cc:	b480      	push	{r7}
 80113ce:	b083      	sub	sp, #12
 80113d0:	af00      	add	r7, sp, #0
 80113d2:	6078      	str	r0, [r7, #4]
    {
 80113d4:	4a04      	ldr	r2, [pc, #16]	@ (80113e8 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	601a      	str	r2, [r3, #0]
    }
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	4618      	mov	r0, r3
 80113de:	370c      	adds	r7, #12
 80113e0:	46bd      	mov	sp, r7
 80113e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e6:	4770      	bx	lr
 80113e8:	0802eeac 	.word	0x0802eeac

080113ec <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 80113ec:	b580      	push	{r7, lr}
 80113ee:	b082      	sub	sp, #8
 80113f0:	af00      	add	r7, sp, #0
 80113f2:	6078      	str	r0, [r7, #4]
    }
 80113f4:	6878      	ldr	r0, [r7, #4]
 80113f6:	f7ff ffe9 	bl	80113cc <_ZN8touchgfx15TouchControllerD1Ev>
 80113fa:	2104      	movs	r1, #4
 80113fc:	6878      	ldr	r0, [r7, #4]
 80113fe:	f01a fc44 	bl	802bc8a <_ZdlPvj>
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	4618      	mov	r0, r3
 8011406:	3708      	adds	r7, #8
 8011408:	46bd      	mov	sp, r7
 801140a:	bd80      	pop	{r7, pc}

0801140c <_ZN20STM32TouchController4initEv>:
#include <stdio.h>

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 801140c:	b580      	push	{r7, lr}
 801140e:	b084      	sub	sp, #16
 8011410:	af00      	add	r7, sp, #0
 8011412:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
    CST816D_Init();
 8011414:	f7ef f97a 	bl	800070c <CST816D_Init>
    uint8_t irq_setting = EnTouch | EnChange | EnMotion;
 8011418:	2370      	movs	r3, #112	@ 0x70
 801141a:	73fb      	strb	r3, [r7, #15]
    CST816D_SetIrqCtl(irq_setting);
 801141c:	7bfb      	ldrb	r3, [r7, #15]
 801141e:	4618      	mov	r0, r3
 8011420:	f7ef fa42 	bl	80008a8 <CST816D_SetIrqCtl>
    CST816D_SetMotionMask(0x07);
 8011424:	2007      	movs	r0, #7
 8011426:	f7ef fa2f 	bl	8000888 <CST816D_SetMotionMask>
    printf("cst816d init\n");
 801142a:	4803      	ldr	r0, [pc, #12]	@ (8011438 <_ZN20STM32TouchController4initEv+0x2c>)
 801142c:	f01b fd4e 	bl	802cecc <puts>
}
 8011430:	bf00      	nop
 8011432:	3710      	adds	r7, #16
 8011434:	46bd      	mov	sp, r7
 8011436:	bd80      	pop	{r7, pc}
 8011438:	0802e2b0 	.word	0x0802e2b0

0801143c <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 801143c:	b580      	push	{r7, lr}
 801143e:	b08e      	sub	sp, #56	@ 0x38
 8011440:	af00      	add	r7, sp, #0
 8011442:	60f8      	str	r0, [r7, #12]
 8011444:	60b9      	str	r1, [r7, #8]
 8011446:	607a      	str	r2, [r7, #4]
	    static int32_t lastY = 0;
	    static bool wasTouched = false;
	    static bool justReleased = false;  // 新增：跟踪触摸刚刚释放的状态

	    // 设置有效的屏幕尺寸范围
	    const int32_t MIN_X = 0;
 8011448:	2300      	movs	r3, #0
 801144a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    const int32_t MAX_X = 239;  // 根据您的屏幕实际宽度-1
 801144c:	23ef      	movs	r3, #239	@ 0xef
 801144e:	62bb      	str	r3, [r7, #40]	@ 0x28
	    const int32_t MIN_Y = 0;
 8011450:	2300      	movs	r3, #0
 8011452:	627b      	str	r3, [r7, #36]	@ 0x24
	    const int32_t MAX_Y = 295;  // 根据您的屏幕实际高度-1
 8011454:	f240 1327 	movw	r3, #295	@ 0x127
 8011458:	623b      	str	r3, [r7, #32]
	    const int32_t MIN_DELTA = 2; // 防抖动阈值
 801145a:	2302      	movs	r3, #2
 801145c:	61fb      	str	r3, [r7, #28]

	    // 检查触摸状态
	    if (CST816D_IsTouched())
 801145e:	f7ef fa01 	bl	8000864 <CST816D_IsTouched>
 8011462:	4603      	mov	r3, r0
 8011464:	2b00      	cmp	r3, #0
 8011466:	bf14      	ite	ne
 8011468:	2301      	movne	r3, #1
 801146a:	2300      	moveq	r3, #0
 801146c:	b2db      	uxtb	r3, r3
 801146e:	2b00      	cmp	r3, #0
 8011470:	f000 8092 	beq.w	8011598 <_ZN20STM32TouchController11sampleTouchERlS0_+0x15c>
	    {
	        CST816D_TouchData touchData;

	        if (CST816D_GetTouchData(&touchData) == HAL_OK)
 8011474:	f107 0314 	add.w	r3, r7, #20
 8011478:	4618      	mov	r0, r3
 801147a:	f7ef f9a9 	bl	80007d0 <CST816D_GetTouchData>
 801147e:	4603      	mov	r3, r0
 8011480:	2b00      	cmp	r3, #0
 8011482:	bf0c      	ite	eq
 8011484:	2301      	moveq	r3, #1
 8011486:	2300      	movne	r3, #0
 8011488:	b2db      	uxtb	r3, r3
 801148a:	2b00      	cmp	r3, #0
 801148c:	f000 80a2 	beq.w	80115d4 <_ZN20STM32TouchController11sampleTouchERlS0_+0x198>
	        {
	            if (touchData.finger_num > 0)
 8011490:	7d7b      	ldrb	r3, [r7, #21]
 8011492:	2b00      	cmp	r3, #0
 8011494:	f000 809e 	beq.w	80115d4 <_ZN20STM32TouchController11sampleTouchERlS0_+0x198>
	            {
	                // 获取坐标
	                int32_t newX = touchData.x;
 8011498:	8afb      	ldrh	r3, [r7, #22]
 801149a:	637b      	str	r3, [r7, #52]	@ 0x34
	                int32_t newY = touchData.y;
 801149c:	8b3b      	ldrh	r3, [r7, #24]
 801149e:	633b      	str	r3, [r7, #48]	@ 0x30

	                // 确保坐标在有效范围内
	                if (newX < MIN_X) newX = MIN_X;
 80114a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	da01      	bge.n	80114aa <_ZN20STM32TouchController11sampleTouchERlS0_+0x6e>
 80114a6:	2300      	movs	r3, #0
 80114a8:	637b      	str	r3, [r7, #52]	@ 0x34
	                if (newX > MAX_X) newX = MAX_X;
 80114aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80114ac:	2bef      	cmp	r3, #239	@ 0xef
 80114ae:	dd01      	ble.n	80114b4 <_ZN20STM32TouchController11sampleTouchERlS0_+0x78>
 80114b0:	23ef      	movs	r3, #239	@ 0xef
 80114b2:	637b      	str	r3, [r7, #52]	@ 0x34
	                if (newY < MIN_Y) newY = MIN_Y;
 80114b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	da01      	bge.n	80114be <_ZN20STM32TouchController11sampleTouchERlS0_+0x82>
 80114ba:	2300      	movs	r3, #0
 80114bc:	633b      	str	r3, [r7, #48]	@ 0x30
	                if (newY > MAX_Y) newY = MAX_Y;
 80114be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114c0:	f5b3 7f94 	cmp.w	r3, #296	@ 0x128
 80114c4:	db02      	blt.n	80114cc <_ZN20STM32TouchController11sampleTouchERlS0_+0x90>
 80114c6:	f240 1327 	movw	r3, #295	@ 0x127
 80114ca:	633b      	str	r3, [r7, #48]	@ 0x30

	                // 简单的防抖动处理
	                bool significantChange = !wasTouched ||
 80114cc:	4b44      	ldr	r3, [pc, #272]	@ (80115e0 <_ZN20STM32TouchController11sampleTouchERlS0_+0x1a4>)
 80114ce:	781b      	ldrb	r3, [r3, #0]
 80114d0:	f083 0301 	eor.w	r3, r3, #1
 80114d4:	b2db      	uxtb	r3, r3
	                                      abs(newX - lastX) > MIN_DELTA ||
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d113      	bne.n	8011502 <_ZN20STM32TouchController11sampleTouchERlS0_+0xc6>
 80114da:	4b42      	ldr	r3, [pc, #264]	@ (80115e4 <_ZN20STM32TouchController11sampleTouchERlS0_+0x1a8>)
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80114e0:	1ad3      	subs	r3, r2, r3
 80114e2:	4618      	mov	r0, r3
 80114e4:	f7ff ff64 	bl	80113b0 <_ZSt3absl>
 80114e8:	4603      	mov	r3, r0
	                bool significantChange = !wasTouched ||
 80114ea:	2b02      	cmp	r3, #2
 80114ec:	dc09      	bgt.n	8011502 <_ZN20STM32TouchController11sampleTouchERlS0_+0xc6>
	                                      abs(newY - lastY) > MIN_DELTA;
 80114ee:	4b3e      	ldr	r3, [pc, #248]	@ (80115e8 <_ZN20STM32TouchController11sampleTouchERlS0_+0x1ac>)
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80114f4:	1ad3      	subs	r3, r2, r3
 80114f6:	4618      	mov	r0, r3
 80114f8:	f7ff ff5a 	bl	80113b0 <_ZSt3absl>
 80114fc:	4603      	mov	r3, r0
	                                      abs(newX - lastX) > MIN_DELTA ||
 80114fe:	2b02      	cmp	r3, #2
 8011500:	dd01      	ble.n	8011506 <_ZN20STM32TouchController11sampleTouchERlS0_+0xca>
 8011502:	2301      	movs	r3, #1
 8011504:	e000      	b.n	8011508 <_ZN20STM32TouchController11sampleTouchERlS0_+0xcc>
 8011506:	2300      	movs	r3, #0
	                                      abs(newY - lastY) > MIN_DELTA;
 8011508:	76fb      	strb	r3, [r7, #27]

	                if (significantChange || !wasTouched)
 801150a:	7efb      	ldrb	r3, [r7, #27]
 801150c:	2b00      	cmp	r3, #0
 801150e:	d106      	bne.n	801151e <_ZN20STM32TouchController11sampleTouchERlS0_+0xe2>
 8011510:	4b33      	ldr	r3, [pc, #204]	@ (80115e0 <_ZN20STM32TouchController11sampleTouchERlS0_+0x1a4>)
 8011512:	781b      	ldrb	r3, [r3, #0]
 8011514:	f083 0301 	eor.w	r3, r3, #1
 8011518:	b2db      	uxtb	r3, r3
 801151a:	2b00      	cmp	r3, #0
 801151c:	d00e      	beq.n	801153c <_ZN20STM32TouchController11sampleTouchERlS0_+0x100>
	                {
	                    // 更新坐标
	                    x = newX;
 801151e:	68bb      	ldr	r3, [r7, #8]
 8011520:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011522:	601a      	str	r2, [r3, #0]
	                    y = newY;
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011528:	601a      	str	r2, [r3, #0]
	                    lastX = x;
 801152a:	68bb      	ldr	r3, [r7, #8]
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	4a2d      	ldr	r2, [pc, #180]	@ (80115e4 <_ZN20STM32TouchController11sampleTouchERlS0_+0x1a8>)
 8011530:	6013      	str	r3, [r2, #0]
	                    lastY = y;
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	4a2c      	ldr	r2, [pc, #176]	@ (80115e8 <_ZN20STM32TouchController11sampleTouchERlS0_+0x1ac>)
 8011538:	6013      	str	r3, [r2, #0]
 801153a:	e007      	b.n	801154c <_ZN20STM32TouchController11sampleTouchERlS0_+0x110>
	                }
	                else
	                {
	                    // 使用上次的有效坐标
	                    x = lastX;
 801153c:	4b29      	ldr	r3, [pc, #164]	@ (80115e4 <_ZN20STM32TouchController11sampleTouchERlS0_+0x1a8>)
 801153e:	681a      	ldr	r2, [r3, #0]
 8011540:	68bb      	ldr	r3, [r7, #8]
 8011542:	601a      	str	r2, [r3, #0]
	                    y = lastY;
 8011544:	4b28      	ldr	r3, [pc, #160]	@ (80115e8 <_ZN20STM32TouchController11sampleTouchERlS0_+0x1ac>)
 8011546:	681a      	ldr	r2, [r3, #0]
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	601a      	str	r2, [r3, #0]
	                }

	                // 设置触摸状态
	                wasTouched = true;
 801154c:	4b24      	ldr	r3, [pc, #144]	@ (80115e0 <_ZN20STM32TouchController11sampleTouchERlS0_+0x1a4>)
 801154e:	2201      	movs	r2, #1
 8011550:	701a      	strb	r2, [r3, #0]
	                justReleased = false;
 8011552:	4b26      	ldr	r3, [pc, #152]	@ (80115ec <_ZN20STM32TouchController11sampleTouchERlS0_+0x1b0>)
 8011554:	2200      	movs	r2, #0
 8011556:	701a      	strb	r2, [r3, #0]

	                // 偶尔打印日志，而不是每次都打印
	                static uint32_t logCounter = 0;
	                if (++logCounter % 100 == 0) {
 8011558:	4b25      	ldr	r3, [pc, #148]	@ (80115f0 <_ZN20STM32TouchController11sampleTouchERlS0_+0x1b4>)
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	3301      	adds	r3, #1
 801155e:	4a24      	ldr	r2, [pc, #144]	@ (80115f0 <_ZN20STM32TouchController11sampleTouchERlS0_+0x1b4>)
 8011560:	6013      	str	r3, [r2, #0]
 8011562:	4b23      	ldr	r3, [pc, #140]	@ (80115f0 <_ZN20STM32TouchController11sampleTouchERlS0_+0x1b4>)
 8011564:	681a      	ldr	r2, [r3, #0]
 8011566:	4b23      	ldr	r3, [pc, #140]	@ (80115f4 <_ZN20STM32TouchController11sampleTouchERlS0_+0x1b8>)
 8011568:	fba3 1302 	umull	r1, r3, r3, r2
 801156c:	095b      	lsrs	r3, r3, #5
 801156e:	2164      	movs	r1, #100	@ 0x64
 8011570:	fb01 f303 	mul.w	r3, r1, r3
 8011574:	1ad3      	subs	r3, r2, r3
 8011576:	2b00      	cmp	r3, #0
 8011578:	bf0c      	ite	eq
 801157a:	2301      	moveq	r3, #1
 801157c:	2300      	movne	r3, #0
 801157e:	b2db      	uxtb	r3, r3
 8011580:	2b00      	cmp	r3, #0
 8011582:	d007      	beq.n	8011594 <_ZN20STM32TouchController11sampleTouchERlS0_+0x158>
	                    printf("Touch at: x=%ld, y=%ld\n", x, y);
 8011584:	68bb      	ldr	r3, [r7, #8]
 8011586:	6819      	ldr	r1, [r3, #0]
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	461a      	mov	r2, r3
 801158e:	481a      	ldr	r0, [pc, #104]	@ (80115f8 <_ZN20STM32TouchController11sampleTouchERlS0_+0x1bc>)
 8011590:	f01b fc34 	bl	802cdfc <iprintf>
	                }

	                return true;
 8011594:	2301      	movs	r3, #1
 8011596:	e01e      	b.n	80115d6 <_ZN20STM32TouchController11sampleTouchERlS0_+0x19a>
	            }
	        }
	    }
	    else if (wasTouched)
 8011598:	4b11      	ldr	r3, [pc, #68]	@ (80115e0 <_ZN20STM32TouchController11sampleTouchERlS0_+0x1a4>)
 801159a:	781b      	ldrb	r3, [r3, #0]
 801159c:	2b00      	cmp	r3, #0
 801159e:	d019      	beq.n	80115d4 <_ZN20STM32TouchController11sampleTouchERlS0_+0x198>
	    {
	        // 触摸刚刚结束
	        if (!justReleased) {
 80115a0:	4b12      	ldr	r3, [pc, #72]	@ (80115ec <_ZN20STM32TouchController11sampleTouchERlS0_+0x1b0>)
 80115a2:	781b      	ldrb	r3, [r3, #0]
 80115a4:	f083 0301 	eor.w	r3, r3, #1
 80115a8:	b2db      	uxtb	r3, r3
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d00f      	beq.n	80115ce <_ZN20STM32TouchController11sampleTouchERlS0_+0x192>
	            // 发送最后一个触摸位置，让TouchGFX识别释放事件
	            x = lastX;
 80115ae:	4b0d      	ldr	r3, [pc, #52]	@ (80115e4 <_ZN20STM32TouchController11sampleTouchERlS0_+0x1a8>)
 80115b0:	681a      	ldr	r2, [r3, #0]
 80115b2:	68bb      	ldr	r3, [r7, #8]
 80115b4:	601a      	str	r2, [r3, #0]
	            y = lastY;
 80115b6:	4b0c      	ldr	r3, [pc, #48]	@ (80115e8 <_ZN20STM32TouchController11sampleTouchERlS0_+0x1ac>)
 80115b8:	681a      	ldr	r2, [r3, #0]
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	601a      	str	r2, [r3, #0]
	            justReleased = true;
 80115be:	4b0b      	ldr	r3, [pc, #44]	@ (80115ec <_ZN20STM32TouchController11sampleTouchERlS0_+0x1b0>)
 80115c0:	2201      	movs	r2, #1
 80115c2:	701a      	strb	r2, [r3, #0]
	            wasTouched = false;
 80115c4:	4b06      	ldr	r3, [pc, #24]	@ (80115e0 <_ZN20STM32TouchController11sampleTouchERlS0_+0x1a4>)
 80115c6:	2200      	movs	r2, #0
 80115c8:	701a      	strb	r2, [r3, #0]

	            // 可选：记录触摸释放事件
	            // printf("Touch released at: x=%ld, y=%ld\n", x, y);

	            return true;  // 重要：返回true让TouchGFX知道这是释放事件
 80115ca:	2301      	movs	r3, #1
 80115cc:	e003      	b.n	80115d6 <_ZN20STM32TouchController11sampleTouchERlS0_+0x19a>
	        }
	        else {
	            // 已经处理过释放事件，恢复到未触摸状态
	            justReleased = false;
 80115ce:	4b07      	ldr	r3, [pc, #28]	@ (80115ec <_ZN20STM32TouchController11sampleTouchERlS0_+0x1b0>)
 80115d0:	2200      	movs	r2, #0
 80115d2:	701a      	strb	r2, [r3, #0]
	        }
	    }

	    return false;  // 无触摸
 80115d4:	2300      	movs	r3, #0

}
 80115d6:	4618      	mov	r0, r3
 80115d8:	3738      	adds	r7, #56	@ 0x38
 80115da:	46bd      	mov	sp, r7
 80115dc:	bd80      	pop	{r7, pc}
 80115de:	bf00      	nop
 80115e0:	2005a70c 	.word	0x2005a70c
 80115e4:	2005a704 	.word	0x2005a704
 80115e8:	2005a708 	.word	0x2005a708
 80115ec:	2005a70d 	.word	0x2005a70d
 80115f0:	2005a710 	.word	0x2005a710
 80115f4:	51eb851f 	.word	0x51eb851f
 80115f8:	0802e2c0 	.word	0x0802e2c0

080115fc <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80115fc:	b580      	push	{r7, lr}
 80115fe:	b082      	sub	sp, #8
 8011600:	af00      	add	r7, sp, #0
 8011602:	6078      	str	r0, [r7, #4]
 8011604:	4a05      	ldr	r2, [pc, #20]	@ (801161c <_ZN20STM32TouchControllerD1Ev+0x20>)
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	601a      	str	r2, [r3, #0]
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	4618      	mov	r0, r3
 801160e:	f7ff fedd 	bl	80113cc <_ZN8touchgfx15TouchControllerD1Ev>
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	4618      	mov	r0, r3
 8011616:	3708      	adds	r7, #8
 8011618:	46bd      	mov	sp, r7
 801161a:	bd80      	pop	{r7, pc}
 801161c:	0802ee94 	.word	0x0802ee94

08011620 <_ZN20STM32TouchControllerD0Ev>:
 8011620:	b580      	push	{r7, lr}
 8011622:	b082      	sub	sp, #8
 8011624:	af00      	add	r7, sp, #0
 8011626:	6078      	str	r0, [r7, #4]
 8011628:	6878      	ldr	r0, [r7, #4]
 801162a:	f7ff ffe7 	bl	80115fc <_ZN20STM32TouchControllerD1Ev>
 801162e:	2104      	movs	r1, #4
 8011630:	6878      	ldr	r0, [r7, #4]
 8011632:	f01a fb2a 	bl	802bc8a <_ZdlPvj>
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	4618      	mov	r0, r3
 801163a:	3708      	adds	r7, #8
 801163c:	46bd      	mov	sp, r7
 801163e:	bd80      	pop	{r7, pc}

08011640 <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
 8011640:	b480      	push	{r7}
 8011642:	af00      	add	r7, sp, #0

}
 8011644:	bf00      	nop
 8011646:	46bd      	mov	sp, r7
 8011648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801164c:	4770      	bx	lr
	...

08011650 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8011650:	b480      	push	{r7}
 8011652:	b083      	sub	sp, #12
 8011654:	af00      	add	r7, sp, #0
 8011656:	4603      	mov	r3, r0
 8011658:	71fb      	strb	r3, [r7, #7]
    switch (id)
 801165a:	79fb      	ldrb	r3, [r7, #7]
 801165c:	2b03      	cmp	r3, #3
 801165e:	d80c      	bhi.n	801167a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 8011660:	a201      	add	r2, pc, #4	@ (adr r2, 8011668 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 8011662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011666:	bf00      	nop
 8011668:	08011679 	.word	0x08011679
 801166c:	08011679 	.word	0x08011679
 8011670:	08011679 	.word	0x08011679
 8011674:	08011679 	.word	0x08011679
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
#endif
        break;
 8011678:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
#endif
        break;
    }
}
 801167a:	bf00      	nop
 801167c:	370c      	adds	r7, #12
 801167e:	46bd      	mov	sp, r7
 8011680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011684:	4770      	bx	lr
 8011686:	bf00      	nop

08011688 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8011688:	b480      	push	{r7}
 801168a:	b083      	sub	sp, #12
 801168c:	af00      	add	r7, sp, #0
 801168e:	4603      	mov	r3, r0
 8011690:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8011692:	79fb      	ldrb	r3, [r7, #7]
 8011694:	2b03      	cmp	r3, #3
 8011696:	d80c      	bhi.n	80116b2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 8011698:	a201      	add	r2, pc, #4	@ (adr r2, 80116a0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 801169a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801169e:	bf00      	nop
 80116a0:	080116b1 	.word	0x080116b1
 80116a4:	080116b1 	.word	0x080116b1
 80116a8:	080116b1 	.word	0x080116b1
 80116ac:	080116b1 	.word	0x080116b1
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
#endif
        break;
 80116b0:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
#endif
        break;
    }
}
 80116b2:	bf00      	nop
 80116b4:	370c      	adds	r7, #12
 80116b6:	46bd      	mov	sp, r7
 80116b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116bc:	4770      	bx	lr
 80116be:	bf00      	nop

080116c0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 80116c0:	b480      	push	{r7}
 80116c2:	b083      	sub	sp, #12
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	4603      	mov	r3, r0
 80116c8:	71fb      	strb	r3, [r7, #7]
    switch (id)
 80116ca:	79fb      	ldrb	r3, [r7, #7]
 80116cc:	2b03      	cmp	r3, #3
 80116ce:	d80c      	bhi.n	80116ea <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 80116d0:	a201      	add	r2, pc, #4	@ (adr r2, 80116d8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 80116d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116d6:	bf00      	nop
 80116d8:	080116e9 	.word	0x080116e9
 80116dc:	080116e9 	.word	0x080116e9
 80116e0:	080116e9 	.word	0x080116e9
 80116e4:	080116e9 	.word	0x080116e9
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 80116e8:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 80116ea:	bf00      	nop
 80116ec:	370c      	adds	r7, #12
 80116ee:	46bd      	mov	sp, r7
 80116f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116f4:	4770      	bx	lr
 80116f6:	bf00      	nop

080116f8 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 80116f8:	b480      	push	{r7}
 80116fa:	b083      	sub	sp, #12
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	6078      	str	r0, [r7, #4]
    {
 8011700:	4a04      	ldr	r2, [pc, #16]	@ (8011714 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	601a      	str	r2, [r3, #0]
    }
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	4618      	mov	r0, r3
 801170a:	370c      	adds	r7, #12
 801170c:	46bd      	mov	sp, r7
 801170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011712:	4770      	bx	lr
 8011714:	0802f62c 	.word	0x0802f62c

08011718 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8011718:	b580      	push	{r7, lr}
 801171a:	b082      	sub	sp, #8
 801171c:	af00      	add	r7, sp, #0
 801171e:	6078      	str	r0, [r7, #4]
    }
 8011720:	6878      	ldr	r0, [r7, #4]
 8011722:	f7ff ffe9 	bl	80116f8 <_ZN8touchgfx3HALD1Ev>
 8011726:	2184      	movs	r1, #132	@ 0x84
 8011728:	6878      	ldr	r0, [r7, #4]
 801172a:	f01a faae 	bl	802bc8a <_ZdlPvj>
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	4618      	mov	r0, r3
 8011732:	3708      	adds	r7, #8
 8011734:	46bd      	mov	sp, r7
 8011736:	bd80      	pop	{r7, pc}

08011738 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8011738:	b480      	push	{r7}
 801173a:	b083      	sub	sp, #12
 801173c:	af00      	add	r7, sp, #0
 801173e:	6078      	str	r0, [r7, #4]
 8011740:	460b      	mov	r3, r1
 8011742:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	78fa      	ldrb	r2, [r7, #3]
 8011748:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	2201      	movs	r2, #1
 8011750:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
    }
 8011754:	bf00      	nop
 8011756:	370c      	adds	r7, #12
 8011758:	46bd      	mov	sp, r7
 801175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801175e:	4770      	bx	lr

08011760 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8011760:	b580      	push	{r7, lr}
 8011762:	b082      	sub	sp, #8
 8011764:	af00      	add	r7, sp, #0
 8011766:	6078      	str	r0, [r7, #4]
 8011768:	460b      	mov	r3, r1
 801176a:	807b      	strh	r3, [r7, #2]
 801176c:	4613      	mov	r3, r2
 801176e:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8011770:	4b0c      	ldr	r3, [pc, #48]	@ (80117a4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 8011772:	881b      	ldrh	r3, [r3, #0]
 8011774:	887a      	ldrh	r2, [r7, #2]
 8011776:	429a      	cmp	r2, r3
 8011778:	d304      	bcc.n	8011784 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 801177a:	4b0b      	ldr	r3, [pc, #44]	@ (80117a8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 801177c:	881b      	ldrh	r3, [r3, #0]
 801177e:	883a      	ldrh	r2, [r7, #0]
 8011780:	429a      	cmp	r2, r3
 8011782:	d205      	bcs.n	8011790 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 8011784:	4b09      	ldr	r3, [pc, #36]	@ (80117ac <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 8011786:	4a0a      	ldr	r2, [pc, #40]	@ (80117b0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 8011788:	21a3      	movs	r1, #163	@ 0xa3
 801178a:	480a      	ldr	r0, [pc, #40]	@ (80117b4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 801178c:	f01b f972 	bl	802ca74 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8011790:	4a09      	ldr	r2, [pc, #36]	@ (80117b8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 8011792:	887b      	ldrh	r3, [r7, #2]
 8011794:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 8011796:	4a09      	ldr	r2, [pc, #36]	@ (80117bc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 8011798:	883b      	ldrh	r3, [r7, #0]
 801179a:	8013      	strh	r3, [r2, #0]
    }
 801179c:	bf00      	nop
 801179e:	3708      	adds	r7, #8
 80117a0:	46bd      	mov	sp, r7
 80117a2:	bd80      	pop	{r7, pc}
 80117a4:	2005ba70 	.word	0x2005ba70
 80117a8:	2005ba72 	.word	0x2005ba72
 80117ac:	0802e2d8 	.word	0x0802e2d8
 80117b0:	0802e33c 	.word	0x0802e33c
 80117b4:	0802e380 	.word	0x0802e380
 80117b8:	2005ba76 	.word	0x2005ba76
 80117bc:	2005ba78 	.word	0x2005ba78

080117c0 <_ZN8touchgfx3HAL11submitGPU2DEv>:
    virtual void submitGPU2D()
 80117c0:	b480      	push	{r7}
 80117c2:	b083      	sub	sp, #12
 80117c4:	af00      	add	r7, sp, #0
 80117c6:	6078      	str	r0, [r7, #4]
    }
 80117c8:	bf00      	nop
 80117ca:	370c      	adds	r7, #12
 80117cc:	46bd      	mov	sp, r7
 80117ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d2:	4770      	bx	lr

080117d4 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 80117d4:	b580      	push	{r7, lr}
 80117d6:	b082      	sub	sp, #8
 80117d8:	af00      	add	r7, sp, #0
 80117da:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d009      	beq.n	80117fa <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	685a      	ldr	r2, [r3, #4]
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	685b      	ldr	r3, [r3, #4]
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	4610      	mov	r0, r2
 80117f4:	4798      	blx	r3
 80117f6:	4603      	mov	r3, r0
 80117f8:	e000      	b.n	80117fc <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 80117fa:	2300      	movs	r3, #0
    }
 80117fc:	4618      	mov	r0, r3
 80117fe:	3708      	adds	r7, #8
 8011800:	46bd      	mov	sp, r7
 8011802:	bd80      	pop	{r7, pc}

08011804 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    }

    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 8011804:	b580      	push	{r7, lr}
 8011806:	b082      	sub	sp, #8
 8011808:	af00      	add	r7, sp, #0
 801180a:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 801180c:	6878      	ldr	r0, [r7, #4]
 801180e:	f004 f85d 	bl	80158cc <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	33bc      	adds	r3, #188	@ 0xbc
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	6878      	ldr	r0, [r7, #4]
 801181c:	4798      	blx	r3
    }
 801181e:	bf00      	nop
 8011820:	3708      	adds	r7, #8
 8011822:	46bd      	mov	sp, r7
 8011824:	bd80      	pop	{r7, pc}

08011826 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8011826:	b480      	push	{r7}
 8011828:	b083      	sub	sp, #12
 801182a:	af00      	add	r7, sp, #0
 801182c:	6078      	str	r0, [r7, #4]
 801182e:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 8011830:	2300      	movs	r3, #0
    }
 8011832:	4618      	mov	r0, r3
 8011834:	370c      	adds	r7, #12
 8011836:	46bd      	mov	sp, r7
 8011838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801183c:	4770      	bx	lr
	...

08011840 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8011840:	b580      	push	{r7, lr}
 8011842:	b084      	sub	sp, #16
 8011844:	af00      	add	r7, sp, #0
 8011846:	60f8      	str	r0, [r7, #12]
 8011848:	60b9      	str	r1, [r7, #8]
 801184a:	607a      	str	r2, [r7, #4]
 801184c:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 801184e:	68bb      	ldr	r3, [r7, #8]
 8011850:	2b00      	cmp	r3, #0
 8011852:	d106      	bne.n	8011862 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8011854:	4b0f      	ldr	r3, [pc, #60]	@ (8011894 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 8011856:	4a10      	ldr	r2, [pc, #64]	@ (8011898 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 8011858:	f240 21ff 	movw	r1, #767	@ 0x2ff
 801185c:	480f      	ldr	r0, [pc, #60]	@ (801189c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 801185e:	f01b f909 	bl	802ca74 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	68ba      	ldr	r2, [r7, #8]
 8011866:	63da      	str	r2, [r3, #60]	@ 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	687a      	ldr	r2, [r7, #4]
 801186c:	641a      	str	r2, [r3, #64]	@ 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	2b00      	cmp	r3, #0
 8011872:	bf14      	ite	ne
 8011874:	2301      	movne	r3, #1
 8011876:	2300      	moveq	r3, #0
 8011878:	b2da      	uxtb	r2, r3
 801187a:	4b09      	ldr	r3, [pc, #36]	@ (80118a0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 801187c:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	3390      	adds	r3, #144	@ 0x90
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	6839      	ldr	r1, [r7, #0]
 8011888:	68f8      	ldr	r0, [r7, #12]
 801188a:	4798      	blx	r3
    }
 801188c:	bf00      	nop
 801188e:	3710      	adds	r7, #16
 8011890:	46bd      	mov	sp, r7
 8011892:	bd80      	pop	{r7, pc}
 8011894:	0802e3c4 	.word	0x0802e3c4
 8011898:	0802e3fc 	.word	0x0802e3fc
 801189c:	0802e380 	.word	0x0802e380
 80118a0:	2005ba7a 	.word	0x2005ba7a

080118a4 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 80118a4:	b480      	push	{r7}
 80118a6:	b083      	sub	sp, #12
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	6078      	str	r0, [r7, #4]
 80118ac:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	683a      	ldr	r2, [r7, #0]
 80118b2:	645a      	str	r2, [r3, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80118b4:	683b      	ldr	r3, [r7, #0]
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	bf14      	ite	ne
 80118ba:	2301      	movne	r3, #1
 80118bc:	2300      	moveq	r3, #0
 80118be:	b2da      	uxtb	r2, r3
 80118c0:	4b03      	ldr	r3, [pc, #12]	@ (80118d0 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 80118c2:	701a      	strb	r2, [r3, #0]
    }
 80118c4:	bf00      	nop
 80118c6:	370c      	adds	r7, #12
 80118c8:	46bd      	mov	sp, r7
 80118ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ce:	4770      	bx	lr
 80118d0:	2005ba7b 	.word	0x2005ba7b

080118d4 <_ZN8touchgfx3HAL16waitForLTDCLinesEt>:
     * Only applicable on LTDC systems and when the partial framebuffer strategy is
     * enabled.
     *
     * @param numberOfLines Number of lines to wait.
     */
    virtual void waitForLTDCLines(uint16_t numberOfLines)
 80118d4:	b480      	push	{r7}
 80118d6:	b083      	sub	sp, #12
 80118d8:	af00      	add	r7, sp, #0
 80118da:	6078      	str	r0, [r7, #4]
 80118dc:	460b      	mov	r3, r1
 80118de:	807b      	strh	r3, [r7, #2]
    {
    }
 80118e0:	bf00      	nop
 80118e2:	370c      	adds	r7, #12
 80118e4:	46bd      	mov	sp, r7
 80118e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ea:	4770      	bx	lr

080118ec <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 80118ec:	b480      	push	{r7}
 80118ee:	b083      	sub	sp, #12
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80118f4:	2300      	movs	r3, #0
    }
 80118f6:	4618      	mov	r0, r3
 80118f8:	370c      	adds	r7, #12
 80118fa:	46bd      	mov	sp, r7
 80118fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011900:	4770      	bx	lr

08011902 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8011902:	b580      	push	{r7, lr}
 8011904:	b082      	sub	sp, #8
 8011906:	af00      	add	r7, sp, #0
 8011908:	6078      	str	r0, [r7, #4]
 801190a:	460b      	mov	r3, r1
 801190c:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011912:	2b00      	cmp	r3, #0
 8011914:	d004      	beq.n	8011920 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801191a:	887a      	ldrh	r2, [r7, #2]
 801191c:	4610      	mov	r0, r2
 801191e:	4798      	blx	r3
        }
    }
 8011920:	bf00      	nop
 8011922:	3708      	adds	r7, #8
 8011924:	46bd      	mov	sp, r7
 8011926:	bd80      	pop	{r7, pc}

08011928 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 8011928:	b480      	push	{r7}
 801192a:	b083      	sub	sp, #12
 801192c:	af00      	add	r7, sp, #0
 801192e:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 8011930:	f64f 73ff 	movw	r3, #65535	@ 0xffff
    }
 8011934:	4618      	mov	r0, r3
 8011936:	370c      	adds	r7, #12
 8011938:	46bd      	mov	sp, r7
 801193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801193e:	4770      	bx	lr

08011940 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8011940:	b580      	push	{r7, lr}
 8011942:	b082      	sub	sp, #8
 8011944:	af00      	add	r7, sp, #0
 8011946:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	685a      	ldr	r2, [r3, #4]
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	685b      	ldr	r3, [r3, #4]
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	3318      	adds	r3, #24
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	4610      	mov	r0, r2
 8011958:	4798      	blx	r3
 801195a:	4603      	mov	r3, r0
    }
 801195c:	4618      	mov	r0, r3
 801195e:	3708      	adds	r7, #8
 8011960:	46bd      	mov	sp, r7
 8011962:	bd80      	pop	{r7, pc}

08011964 <_ZN8touchgfx3HAL25partialLTDCDeadlineMissedEv>:
     * This occurrence will lead to tearing on the display.
     *
     * This empty function can be overridden to e.g. output this error condition
     * on a pin.
     */
    virtual void partialLTDCDeadlineMissed()
 8011964:	b480      	push	{r7}
 8011966:	b083      	sub	sp, #12
 8011968:	af00      	add	r7, sp, #0
 801196a:	6078      	str	r0, [r7, #4]
    {
    }
 801196c:	bf00      	nop
 801196e:	370c      	adds	r7, #12
 8011970:	46bd      	mov	sp, r7
 8011972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011976:	4770      	bx	lr

08011978 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
    /**
     * Gets client framebuffer.
     *
     * @return The address of the framebuffer currently used by the framework to draw in.
     */
    uint16_t* getClientFrameBuffer()
 8011978:	b580      	push	{r7, lr}
 801197a:	b082      	sub	sp, #8
 801197c:	af00      	add	r7, sp, #0
 801197e:	6078      	str	r0, [r7, #4]
    {
        if (USE_DOUBLE_BUFFERING && getTFTFrameBuffer() == frameBuffer0)
 8011980:	4b0e      	ldr	r3, [pc, #56]	@ (80119bc <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x44>)
 8011982:	781b      	ldrb	r3, [r3, #0]
 8011984:	2b00      	cmp	r3, #0
 8011986:	d00c      	beq.n	80119a2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x2a>
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	3334      	adds	r3, #52	@ 0x34
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	6878      	ldr	r0, [r7, #4]
 8011992:	4798      	blx	r3
 8011994:	4602      	mov	r2, r0
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801199a:	429a      	cmp	r2, r3
 801199c:	d101      	bne.n	80119a2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x2a>
 801199e:	2301      	movs	r3, #1
 80119a0:	e000      	b.n	80119a4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x2c>
 80119a2:	2300      	movs	r3, #0
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d002      	beq.n	80119ae <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x36>
        {
            return frameBuffer1;
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80119ac:	e001      	b.n	80119b2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x3a>
        }
        return frameBuffer0;
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    }
 80119b2:	4618      	mov	r0, r3
 80119b4:	3708      	adds	r7, #8
 80119b6:	46bd      	mov	sp, r7
 80119b8:	bd80      	pop	{r7, pc}
 80119ba:	bf00      	nop
 80119bc:	2005ba7a 	.word	0x2005ba7a

080119c0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 80119c0:	b480      	push	{r7}
 80119c2:	b085      	sub	sp, #20
 80119c4:	af00      	add	r7, sp, #0
 80119c6:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	f893 2078 	ldrb.w	r2, [r3, #120]	@ 0x78
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80119d4:	429a      	cmp	r2, r3
 80119d6:	d011      	beq.n	80119fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 80119d8:	4b14      	ldr	r3, [pc, #80]	@ (8011a2c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80119da:	781b      	ldrb	r3, [r3, #0]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d11e      	bne.n	8011a1e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 80119e0:	4b13      	ldr	r3, [pc, #76]	@ (8011a30 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80119e2:	881b      	ldrh	r3, [r3, #0]
 80119e4:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80119e6:	4b13      	ldr	r3, [pc, #76]	@ (8011a34 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80119e8:	881a      	ldrh	r2, [r3, #0]
 80119ea:	4b11      	ldr	r3, [pc, #68]	@ (8011a30 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80119ec:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 80119ee:	4a11      	ldr	r2, [pc, #68]	@ (8011a34 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80119f0:	89bb      	ldrh	r3, [r7, #12]
 80119f2:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 80119f4:	4b0d      	ldr	r3, [pc, #52]	@ (8011a2c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80119f6:	2201      	movs	r2, #1
 80119f8:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 80119fa:	e010      	b.n	8011a1e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 80119fc:	4b0b      	ldr	r3, [pc, #44]	@ (8011a2c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80119fe:	781b      	ldrb	r3, [r3, #0]
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d00c      	beq.n	8011a1e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8011a04:	4b0a      	ldr	r3, [pc, #40]	@ (8011a30 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8011a06:	881b      	ldrh	r3, [r3, #0]
 8011a08:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8011a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8011a34 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8011a0c:	881a      	ldrh	r2, [r3, #0]
 8011a0e:	4b08      	ldr	r3, [pc, #32]	@ (8011a30 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8011a10:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 8011a12:	4a08      	ldr	r2, [pc, #32]	@ (8011a34 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8011a14:	89fb      	ldrh	r3, [r7, #14]
 8011a16:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8011a18:	4b04      	ldr	r3, [pc, #16]	@ (8011a2c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8011a1a:	2200      	movs	r2, #0
 8011a1c:	701a      	strb	r2, [r3, #0]
    }
 8011a1e:	bf00      	nop
 8011a20:	3714      	adds	r7, #20
 8011a22:	46bd      	mov	sp, r7
 8011a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a28:	4770      	bx	lr
 8011a2a:	bf00      	nop
 8011a2c:	2005ba74 	.word	0x2005ba74
 8011a30:	2005ba72 	.word	0x2005ba72
 8011a34:	2005ba70 	.word	0x2005ba70

08011a38 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Invalidate D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
 8011a38:	b480      	push	{r7}
 8011a3a:	b083      	sub	sp, #12
 8011a3c:	af00      	add	r7, sp, #0
 8011a3e:	6078      	str	r0, [r7, #4]
    {
    }
 8011a40:	bf00      	nop
 8011a42:	370c      	adds	r7, #12
 8011a44:	46bd      	mov	sp, r7
 8011a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a4a:	4770      	bx	lr

08011a4c <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Flush D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
 8011a4c:	b480      	push	{r7}
 8011a4e:	b083      	sub	sp, #12
 8011a50:	af00      	add	r7, sp, #0
 8011a52:	6078      	str	r0, [r7, #4]
    {
    }
 8011a54:	bf00      	nop
 8011a56:	370c      	adds	r7, #12
 8011a58:	46bd      	mov	sp, r7
 8011a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a5e:	4770      	bx	lr

08011a60 <_ZN8touchgfx3HAL22InvalidateTextureCacheEv>:
     * Invalidate texture cache(s).
     *
     * Called on every tick before drawing into the framebuffer to enable
     * invalidation of any caches that may be incoherent with main memory.
     */
    virtual void InvalidateTextureCache()
 8011a60:	b480      	push	{r7}
 8011a62:	b083      	sub	sp, #12
 8011a64:	af00      	add	r7, sp, #0
 8011a66:	6078      	str	r0, [r7, #4]
    {
    }
 8011a68:	bf00      	nop
 8011a6a:	370c      	adds	r7, #12
 8011a6c:	46bd      	mov	sp, r7
 8011a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a72:	4770      	bx	lr

08011a74 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8011a74:	b580      	push	{r7, lr}
 8011a76:	b082      	sub	sp, #8
 8011a78:	af00      	add	r7, sp, #0
 8011a7a:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	4618      	mov	r0, r3
 8011a80:	f003 f951 	bl	8014d26 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8011a84:	bf00      	nop
 8011a86:	3708      	adds	r7, #8
 8011a88:	46bd      	mov	sp, r7
 8011a8a:	bd80      	pop	{r7, pc}

08011a8c <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8011a8c:	b580      	push	{r7, lr}
 8011a8e:	b082      	sub	sp, #8
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	6078      	str	r0, [r7, #4]
 8011a94:	4a05      	ldr	r2, [pc, #20]	@ (8011aac <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	601a      	str	r2, [r3, #0]
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	f7ff fe2b 	bl	80116f8 <_ZN8touchgfx3HALD1Ev>
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	4618      	mov	r0, r3
 8011aa6:	3708      	adds	r7, #8
 8011aa8:	46bd      	mov	sp, r7
 8011aaa:	bd80      	pop	{r7, pc}
 8011aac:	0802f244 	.word	0x0802f244

08011ab0 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8011ab0:	b580      	push	{r7, lr}
 8011ab2:	b082      	sub	sp, #8
 8011ab4:	af00      	add	r7, sp, #0
 8011ab6:	6078      	str	r0, [r7, #4]
 8011ab8:	6878      	ldr	r0, [r7, #4]
 8011aba:	f7ff ffe7 	bl	8011a8c <_ZN20TouchGFXGeneratedHALD1Ev>
 8011abe:	2184      	movs	r1, #132	@ 0x84
 8011ac0:	6878      	ldr	r0, [r7, #4]
 8011ac2:	f01a f8e2 	bl	802bc8a <_ZdlPvj>
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	4618      	mov	r0, r3
 8011aca:	3708      	adds	r7, #8
 8011acc:	46bd      	mov	sp, r7
 8011ace:	bd80      	pop	{r7, pc}

08011ad0 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8011ad0:	b580      	push	{r7, lr}
 8011ad2:	b082      	sub	sp, #8
 8011ad4:	af00      	add	r7, sp, #0
 8011ad6:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	4618      	mov	r0, r3
 8011adc:	f7ff ffca 	bl	8011a74 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8011ae0:	bf00      	nop
 8011ae2:	3708      	adds	r7, #8
 8011ae4:	46bd      	mov	sp, r7
 8011ae6:	bd80      	pop	{r7, pc}

08011ae8 <_ZN11TouchGFXHAL10initializeEv>:
#include <touchgfx/hal/GPIO.hpp>

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8011ae8:	b580      	push	{r7, lr}
 8011aea:	b082      	sub	sp, #8
 8011aec:	af00      	add	r7, sp, #0
 8011aee:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    printf("ICNA3306_Init\r\n");
 8011af0:	4806      	ldr	r0, [pc, #24]	@ (8011b0c <_ZN11TouchGFXHAL10initializeEv+0x24>)
 8011af2:	f01b f9eb 	bl	802cecc <puts>

    TouchGFXGeneratedHAL::initialize();
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	4618      	mov	r0, r3
 8011afa:	f002 f8c3 	bl	8013c84 <_ZN20TouchGFXGeneratedHAL10initializeEv>
    // setAnimationStorage((void *)animationBuffer); // Add animation storage
    ICNA3306_Init();
 8011afe:	f7ef fa07 	bl	8000f10 <ICNA3306_Init>
}
 8011b02:	bf00      	nop
 8011b04:	3708      	adds	r7, #8
 8011b06:	46bd      	mov	sp, r7
 8011b08:	bd80      	pop	{r7, pc}
 8011b0a:	bf00      	nop
 8011b0c:	0802e44c 	.word	0x0802e44c

08011b10 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8011b10:	b580      	push	{r7, lr}
 8011b12:	b082      	sub	sp, #8
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	f002 f91c 	bl	8013d58 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8011b20:	4603      	mov	r3, r0
}
 8011b22:	4618      	mov	r0, r3
 8011b24:	3708      	adds	r7, #8
 8011b26:	46bd      	mov	sp, r7
 8011b28:	bd80      	pop	{r7, pc}

08011b2a <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8011b2a:	b580      	push	{r7, lr}
 8011b2c:	b082      	sub	sp, #8
 8011b2e:	af00      	add	r7, sp, #0
 8011b30:	6078      	str	r0, [r7, #4]
 8011b32:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	6839      	ldr	r1, [r7, #0]
 8011b38:	4618      	mov	r0, r3
 8011b3a:	f002 f91b 	bl	8013d74 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8011b3e:	bf00      	nop
 8011b40:	3708      	adds	r7, #8
 8011b42:	46bd      	mov	sp, r7
 8011b44:	bd80      	pop	{r7, pc}
	...

08011b48 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8011b48:	b580      	push	{r7, lr}
 8011b4a:	b08a      	sub	sp, #40	@ 0x28
 8011b4c:	af02      	add	r7, sp, #8
 8011b4e:	6078      	str	r0, [r7, #4]
 8011b50:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate the start address of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp
	//printf("fluashBuffer\r\n");
    uint8_t *fbPtr = (uint8_t *)getClientFrameBuffer();
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	4618      	mov	r0, r3
 8011b56:	f7ff ff0f 	bl	8011978 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011b5a:	6138      	str	r0, [r7, #16]
    for (size_t row = 0; row < rect.height; row++)
 8011b5c:	2300      	movs	r3, #0
 8011b5e:	61fb      	str	r3, [r7, #28]
 8011b60:	e030      	b.n	8011bc4 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x7c>
    {
        uint8_t *pixel = fbPtr + ((rect.y + row) * 240 + rect.x) * 2;
 8011b62:	683b      	ldr	r3, [r7, #0]
 8011b64:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011b68:	461a      	mov	r2, r3
 8011b6a:	69fb      	ldr	r3, [r7, #28]
 8011b6c:	441a      	add	r2, r3
 8011b6e:	4613      	mov	r3, r2
 8011b70:	011b      	lsls	r3, r3, #4
 8011b72:	1a9b      	subs	r3, r3, r2
 8011b74:	011b      	lsls	r3, r3, #4
 8011b76:	461a      	mov	r2, r3
 8011b78:	683b      	ldr	r3, [r7, #0]
 8011b7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011b7e:	4413      	add	r3, r2
 8011b80:	005b      	lsls	r3, r3, #1
 8011b82:	693a      	ldr	r2, [r7, #16]
 8011b84:	4413      	add	r3, r2
 8011b86:	61bb      	str	r3, [r7, #24]
        for (size_t col = 0; col < rect.width; col++)
 8011b88:	2300      	movs	r3, #0
 8011b8a:	617b      	str	r3, [r7, #20]
 8011b8c:	e010      	b.n	8011bb0 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x68>
        {
            uint8_t temp = pixel[0];
 8011b8e:	69bb      	ldr	r3, [r7, #24]
 8011b90:	781b      	ldrb	r3, [r3, #0]
 8011b92:	73fb      	strb	r3, [r7, #15]
            pixel[0] = pixel[1];
 8011b94:	69bb      	ldr	r3, [r7, #24]
 8011b96:	785a      	ldrb	r2, [r3, #1]
 8011b98:	69bb      	ldr	r3, [r7, #24]
 8011b9a:	701a      	strb	r2, [r3, #0]
            pixel[1] = temp;
 8011b9c:	69bb      	ldr	r3, [r7, #24]
 8011b9e:	3301      	adds	r3, #1
 8011ba0:	7bfa      	ldrb	r2, [r7, #15]
 8011ba2:	701a      	strb	r2, [r3, #0]
            pixel += 2;
 8011ba4:	69bb      	ldr	r3, [r7, #24]
 8011ba6:	3302      	adds	r3, #2
 8011ba8:	61bb      	str	r3, [r7, #24]
        for (size_t col = 0; col < rect.width; col++)
 8011baa:	697b      	ldr	r3, [r7, #20]
 8011bac:	3301      	adds	r3, #1
 8011bae:	617b      	str	r3, [r7, #20]
 8011bb0:	683b      	ldr	r3, [r7, #0]
 8011bb2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011bb6:	461a      	mov	r2, r3
 8011bb8:	697b      	ldr	r3, [r7, #20]
 8011bba:	4293      	cmp	r3, r2
 8011bbc:	d3e7      	bcc.n	8011b8e <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x46>
    for (size_t row = 0; row < rect.height; row++)
 8011bbe:	69fb      	ldr	r3, [r7, #28]
 8011bc0:	3301      	adds	r3, #1
 8011bc2:	61fb      	str	r3, [r7, #28]
 8011bc4:	683b      	ldr	r3, [r7, #0]
 8011bc6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011bca:	461a      	mov	r2, r3
 8011bcc:	69fb      	ldr	r3, [r7, #28]
 8011bce:	4293      	cmp	r3, r2
 8011bd0:	d3c7      	bcc.n	8011b62 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x1a>
        }
    }
    //printf("fluashBuffer\r\n");
    ICNA3306_DrawBuffer(0, 0, 240, 296, fbPtr, (240 * 296) * 2);
 8011bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8011bfc <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0xb4>)
 8011bd4:	9301      	str	r3, [sp, #4]
 8011bd6:	693b      	ldr	r3, [r7, #16]
 8011bd8:	9300      	str	r3, [sp, #0]
 8011bda:	f44f 7394 	mov.w	r3, #296	@ 0x128
 8011bde:	22f0      	movs	r2, #240	@ 0xf0
 8011be0:	2100      	movs	r1, #0
 8011be2:	2000      	movs	r0, #0
 8011be4:	f7ef f922 	bl	8000e2c <ICNA3306_DrawBuffer>

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	6839      	ldr	r1, [r7, #0]
 8011bec:	4618      	mov	r0, r3
 8011bee:	f002 f8cc 	bl	8013d8a <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 8011bf2:	bf00      	nop
 8011bf4:	3720      	adds	r7, #32
 8011bf6:	46bd      	mov	sp, r7
 8011bf8:	bd80      	pop	{r7, pc}
 8011bfa:	bf00      	nop
 8011bfc:	00022b00 	.word	0x00022b00

08011c00 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8011c00:	b580      	push	{r7, lr}
 8011c02:	b084      	sub	sp, #16
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	60f8      	str	r0, [r7, #12]
 8011c08:	60b9      	str	r1, [r7, #8]
 8011c0a:	607a      	str	r2, [r7, #4]
 8011c0c:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8011c0e:	68f8      	ldr	r0, [r7, #12]
 8011c10:	683b      	ldr	r3, [r7, #0]
 8011c12:	687a      	ldr	r2, [r7, #4]
 8011c14:	68b9      	ldr	r1, [r7, #8]
 8011c16:	f002 f8c6 	bl	8013da6 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8011c1a:	4603      	mov	r3, r0
}
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	3710      	adds	r7, #16
 8011c20:	46bd      	mov	sp, r7
 8011c22:	bd80      	pop	{r7, pc}

08011c24 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8011c24:	b580      	push	{r7, lr}
 8011c26:	b082      	sub	sp, #8
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	4618      	mov	r0, r3
 8011c30:	f002 f84c 	bl	8013ccc <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8011c34:	bf00      	nop
 8011c36:	3708      	adds	r7, #8
 8011c38:	46bd      	mov	sp, r7
 8011c3a:	bd80      	pop	{r7, pc}

08011c3c <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8011c3c:	b580      	push	{r7, lr}
 8011c3e:	b082      	sub	sp, #8
 8011c40:	af00      	add	r7, sp, #0
 8011c42:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	4618      	mov	r0, r3
 8011c48:	f002 f84c 	bl	8013ce4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8011c4c:	bf00      	nop
 8011c4e:	3708      	adds	r7, #8
 8011c50:	46bd      	mov	sp, r7
 8011c52:	bd80      	pop	{r7, pc}

08011c54 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8011c54:	b580      	push	{r7, lr}
 8011c56:	b082      	sub	sp, #8
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	4618      	mov	r0, r3
 8011c60:	f002 f84b 	bl	8013cfa <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8011c64:	bf00      	nop
 8011c66:	3708      	adds	r7, #8
 8011c68:	46bd      	mov	sp, r7
 8011c6a:	bd80      	pop	{r7, pc}

08011c6c <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8011c6c:	b580      	push	{r7, lr}
 8011c6e:	b082      	sub	sp, #8
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	4618      	mov	r0, r3
 8011c78:	f002 f84a 	bl	8013d10 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8011c7c:	bf00      	nop
 8011c7e:	3708      	adds	r7, #8
 8011c80:	46bd      	mov	sp, r7
 8011c82:	bd80      	pop	{r7, pc}

08011c84 <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame()
{
 8011c84:	b580      	push	{r7, lr}
 8011c86:	b082      	sub	sp, #8
 8011c88:	af00      	add	r7, sp, #0
 8011c8a:	6078      	str	r0, [r7, #4]
    return TouchGFXGeneratedHAL::beginFrame();
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	4618      	mov	r0, r3
 8011c90:	f002 f848 	bl	8013d24 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 8011c94:	4603      	mov	r3, r0
}
 8011c96:	4618      	mov	r0, r3
 8011c98:	3708      	adds	r7, #8
 8011c9a:	46bd      	mov	sp, r7
 8011c9c:	bd80      	pop	{r7, pc}

08011c9e <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame()
{
 8011c9e:	b580      	push	{r7, lr}
 8011ca0:	b082      	sub	sp, #8
 8011ca2:	af00      	add	r7, sp, #0
 8011ca4:	6078      	str	r0, [r7, #4]
    TouchGFXGeneratedHAL::endFrame();
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	4618      	mov	r0, r3
 8011caa:	f002 f848 	bl	8013d3e <_ZN20TouchGFXGeneratedHAL8endFrameEv>
}
 8011cae:	bf00      	nop
 8011cb0:	3708      	adds	r7, #8
 8011cb2:	46bd      	mov	sp, r7
 8011cb4:	bd80      	pop	{r7, pc}

08011cb6 <touchgfx_tim_vsync>:
extern "C" void touchgfx_tim_vsync(void)
{
 8011cb6:	b580      	push	{r7, lr}
 8011cb8:	af00      	add	r7, sp, #0
    OSWrappers::signalVSync();
 8011cba:	f000 f88b 	bl	8011dd4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
    //printf("5555\r\n");
}
 8011cbe:	bf00      	nop
 8011cc0:	bd80      	pop	{r7, pc}
	...

08011cc4 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8011cc4:	b580      	push	{r7, lr}
 8011cc6:	b082      	sub	sp, #8
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	6078      	str	r0, [r7, #4]
 8011ccc:	4a05      	ldr	r2, [pc, #20]	@ (8011ce4 <_ZN11TouchGFXHALD1Ev+0x20>)
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	601a      	str	r2, [r3, #0]
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	4618      	mov	r0, r3
 8011cd6:	f7ff fed9 	bl	8011a8c <_ZN20TouchGFXGeneratedHALD1Ev>
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	4618      	mov	r0, r3
 8011cde:	3708      	adds	r7, #8
 8011ce0:	46bd      	mov	sp, r7
 8011ce2:	bd80      	pop	{r7, pc}
 8011ce4:	0802eec4 	.word	0x0802eec4

08011ce8 <_ZN11TouchGFXHALD0Ev>:
 8011ce8:	b580      	push	{r7, lr}
 8011cea:	b082      	sub	sp, #8
 8011cec:	af00      	add	r7, sp, #0
 8011cee:	6078      	str	r0, [r7, #4]
 8011cf0:	6878      	ldr	r0, [r7, #4]
 8011cf2:	f7ff ffe7 	bl	8011cc4 <_ZN11TouchGFXHALD1Ev>
 8011cf6:	2184      	movs	r1, #132	@ 0x84
 8011cf8:	6878      	ldr	r0, [r7, #4]
 8011cfa:	f019 ffc6 	bl	802bc8a <_ZdlPvj>
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	4618      	mov	r0, r3
 8011d02:	3708      	adds	r7, #8
 8011d04:	46bd      	mov	sp, r7
 8011d06:	bd80      	pop	{r7, pc}

08011d08 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8011d08:	b580      	push	{r7, lr}
 8011d0a:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8011d0c:	2200      	movs	r2, #0
 8011d0e:	2101      	movs	r1, #1
 8011d10:	2001      	movs	r0, #1
 8011d12:	f7fa f803 	bl	800bd1c <osSemaphoreNew>
 8011d16:	4603      	mov	r3, r0
 8011d18:	4a0f      	ldr	r2, [pc, #60]	@ (8011d58 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8011d1a:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8011d1c:	4b0e      	ldr	r3, [pc, #56]	@ (8011d58 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d105      	bne.n	8011d30 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8011d24:	4b0d      	ldr	r3, [pc, #52]	@ (8011d5c <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8011d26:	4a0e      	ldr	r2, [pc, #56]	@ (8011d60 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8011d28:	2128      	movs	r1, #40	@ 0x28
 8011d2a:	480e      	ldr	r0, [pc, #56]	@ (8011d64 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8011d2c:	f01a fea2 	bl	802ca74 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8011d30:	2200      	movs	r2, #0
 8011d32:	2104      	movs	r1, #4
 8011d34:	2001      	movs	r0, #1
 8011d36:	f7fa f903 	bl	800bf40 <osMessageQueueNew>
 8011d3a:	4603      	mov	r3, r0
 8011d3c:	4a0a      	ldr	r2, [pc, #40]	@ (8011d68 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8011d3e:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8011d40:	4b09      	ldr	r3, [pc, #36]	@ (8011d68 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d105      	bne.n	8011d54 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8011d48:	4b08      	ldr	r3, [pc, #32]	@ (8011d6c <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8011d4a:	4a05      	ldr	r2, [pc, #20]	@ (8011d60 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8011d4c:	212c      	movs	r1, #44	@ 0x2c
 8011d4e:	4805      	ldr	r0, [pc, #20]	@ (8011d64 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8011d50:	f01a fe90 	bl	802ca74 <__assert_func>
}
 8011d54:	bf00      	nop
 8011d56:	bd80      	pop	{r7, pc}
 8011d58:	2005a714 	.word	0x2005a714
 8011d5c:	0802e45c 	.word	0x0802e45c
 8011d60:	0802e4a8 	.word	0x0802e4a8
 8011d64:	0802e4d8 	.word	0x0802e4d8
 8011d68:	2005a718 	.word	0x2005a718
 8011d6c:	0802e504 	.word	0x0802e504

08011d70 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8011d70:	b580      	push	{r7, lr}
 8011d72:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8011d74:	4b04      	ldr	r3, [pc, #16]	@ (8011d88 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	f04f 31ff 	mov.w	r1, #4294967295
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	f7fa f855 	bl	800be2c <osSemaphoreAcquire>
}
 8011d82:	bf00      	nop
 8011d84:	bd80      	pop	{r7, pc}
 8011d86:	bf00      	nop
 8011d88:	2005a714 	.word	0x2005a714

08011d8c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8011d8c:	b580      	push	{r7, lr}
 8011d8e:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8011d90:	4b03      	ldr	r3, [pc, #12]	@ (8011da0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	4618      	mov	r0, r3
 8011d96:	f7fa f895 	bl	800bec4 <osSemaphoreRelease>
}
 8011d9a:	bf00      	nop
 8011d9c:	bd80      	pop	{r7, pc}
 8011d9e:	bf00      	nop
 8011da0:	2005a714 	.word	0x2005a714

08011da4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8011da4:	b580      	push	{r7, lr}
 8011da6:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8011da8:	4b03      	ldr	r3, [pc, #12]	@ (8011db8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	2100      	movs	r1, #0
 8011dae:	4618      	mov	r0, r3
 8011db0:	f7fa f83c 	bl	800be2c <osSemaphoreAcquire>
}
 8011db4:	bf00      	nop
 8011db6:	bd80      	pop	{r7, pc}
 8011db8:	2005a714 	.word	0x2005a714

08011dbc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8011dbc:	b580      	push	{r7, lr}
 8011dbe:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8011dc0:	4b03      	ldr	r3, [pc, #12]	@ (8011dd0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	4618      	mov	r0, r3
 8011dc6:	f7fa f87d 	bl	800bec4 <osSemaphoreRelease>
}
 8011dca:	bf00      	nop
 8011dcc:	bd80      	pop	{r7, pc}
 8011dce:	bf00      	nop
 8011dd0:	2005a714 	.word	0x2005a714

08011dd4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8011dd4:	b580      	push	{r7, lr}
 8011dd6:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8011dd8:	4b04      	ldr	r3, [pc, #16]	@ (8011dec <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 8011dda:	6818      	ldr	r0, [r3, #0]
 8011ddc:	2300      	movs	r3, #0
 8011dde:	2200      	movs	r2, #0
 8011de0:	4903      	ldr	r1, [pc, #12]	@ (8011df0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 8011de2:	f7fa f91f 	bl	800c024 <osMessageQueuePut>
}
 8011de6:	bf00      	nop
 8011de8:	bd80      	pop	{r7, pc}
 8011dea:	bf00      	nop
 8011dec:	2005a718 	.word	0x2005a718
 8011df0:	20000014 	.word	0x20000014

08011df4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8011df4:	b580      	push	{r7, lr}
 8011df6:	b082      	sub	sp, #8
 8011df8:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8011dfa:	4b09      	ldr	r3, [pc, #36]	@ (8011e20 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8011dfc:	6818      	ldr	r0, [r3, #0]
 8011dfe:	1d39      	adds	r1, r7, #4
 8011e00:	2300      	movs	r3, #0
 8011e02:	2200      	movs	r2, #0
 8011e04:	f7fa f968 	bl	800c0d8 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8011e08:	4b05      	ldr	r3, [pc, #20]	@ (8011e20 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8011e0a:	6818      	ldr	r0, [r3, #0]
 8011e0c:	1d39      	adds	r1, r7, #4
 8011e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8011e12:	2200      	movs	r2, #0
 8011e14:	f7fa f960 	bl	800c0d8 <osMessageQueueGet>
}
 8011e18:	bf00      	nop
 8011e1a:	3708      	adds	r7, #8
 8011e1c:	46bd      	mov	sp, r7
 8011e1e:	bd80      	pop	{r7, pc}
 8011e20:	2005a718 	.word	0x2005a718

08011e24 <__NVIC_EnableIRQ>:
{
 8011e24:	b480      	push	{r7}
 8011e26:	b083      	sub	sp, #12
 8011e28:	af00      	add	r7, sp, #0
 8011e2a:	4603      	mov	r3, r0
 8011e2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	db0b      	blt.n	8011e4e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011e36:	79fb      	ldrb	r3, [r7, #7]
 8011e38:	f003 021f 	and.w	r2, r3, #31
 8011e3c:	4907      	ldr	r1, [pc, #28]	@ (8011e5c <__NVIC_EnableIRQ+0x38>)
 8011e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011e42:	095b      	lsrs	r3, r3, #5
 8011e44:	2001      	movs	r0, #1
 8011e46:	fa00 f202 	lsl.w	r2, r0, r2
 8011e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8011e4e:	bf00      	nop
 8011e50:	370c      	adds	r7, #12
 8011e52:	46bd      	mov	sp, r7
 8011e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e58:	4770      	bx	lr
 8011e5a:	bf00      	nop
 8011e5c:	e000e100 	.word	0xe000e100

08011e60 <__NVIC_DisableIRQ>:
{
 8011e60:	b480      	push	{r7}
 8011e62:	b083      	sub	sp, #12
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	4603      	mov	r3, r0
 8011e68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	db12      	blt.n	8011e98 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011e72:	79fb      	ldrb	r3, [r7, #7]
 8011e74:	f003 021f 	and.w	r2, r3, #31
 8011e78:	490a      	ldr	r1, [pc, #40]	@ (8011ea4 <__NVIC_DisableIRQ+0x44>)
 8011e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011e7e:	095b      	lsrs	r3, r3, #5
 8011e80:	2001      	movs	r0, #1
 8011e82:	fa00 f202 	lsl.w	r2, r0, r2
 8011e86:	3320      	adds	r3, #32
 8011e88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8011e8c:	f3bf 8f4f 	dsb	sy
}
 8011e90:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011e92:	f3bf 8f6f 	isb	sy
}
 8011e96:	bf00      	nop
}
 8011e98:	bf00      	nop
 8011e9a:	370c      	adds	r7, #12
 8011e9c:	46bd      	mov	sp, r7
 8011e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea2:	4770      	bx	lr
 8011ea4:	e000e100 	.word	0xe000e100

08011ea8 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 8011ea8:	b480      	push	{r7}
 8011eaa:	b083      	sub	sp, #12
 8011eac:	af00      	add	r7, sp, #0
 8011eae:	6078      	str	r0, [r7, #4]
        : color(0)
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	2200      	movs	r2, #0
 8011eb4:	601a      	str	r2, [r3, #0]
    }
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	4618      	mov	r0, r3
 8011eba:	370c      	adds	r7, #12
 8011ebc:	46bd      	mov	sp, r7
 8011ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec2:	4770      	bx	lr

08011ec4 <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 8011ec4:	b480      	push	{r7}
 8011ec6:	b083      	sub	sp, #12
 8011ec8:	af00      	add	r7, sp, #0
 8011eca:	6078      	str	r0, [r7, #4]
        return color;
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	681b      	ldr	r3, [r3, #0]
    }
 8011ed0:	4618      	mov	r0, r3
 8011ed2:	370c      	adds	r7, #12
 8011ed4:	46bd      	mov	sp, r7
 8011ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eda:	4770      	bx	lr

08011edc <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8011edc:	b480      	push	{r7}
 8011ede:	b083      	sub	sp, #12
 8011ee0:	af00      	add	r7, sp, #0
 8011ee2:	6078      	str	r0, [r7, #4]
    {
 8011ee4:	4a04      	ldr	r2, [pc, #16]	@ (8011ef8 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	601a      	str	r2, [r3, #0]
    }
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	4618      	mov	r0, r3
 8011eee:	370c      	adds	r7, #12
 8011ef0:	46bd      	mov	sp, r7
 8011ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef6:	4770      	bx	lr
 8011ef8:	0802f000 	.word	0x0802f000

08011efc <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8011efc:	b580      	push	{r7, lr}
 8011efe:	b082      	sub	sp, #8
 8011f00:	af00      	add	r7, sp, #0
 8011f02:	6078      	str	r0, [r7, #4]
    }
 8011f04:	6878      	ldr	r0, [r7, #4]
 8011f06:	f7ff ffe9 	bl	8011edc <_ZN8touchgfx9DMA_QueueD1Ev>
 8011f0a:	2104      	movs	r1, #4
 8011f0c:	6878      	ldr	r0, [r7, #4]
 8011f0e:	f019 febc 	bl	802bc8a <_ZdlPvj>
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	4618      	mov	r0, r3
 8011f16:	3708      	adds	r7, #8
 8011f18:	46bd      	mov	sp, r7
 8011f1a:	bd80      	pop	{r7, pc}

08011f1c <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8011f1c:	b580      	push	{r7, lr}
 8011f1e:	b082      	sub	sp, #8
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	681b      	ldr	r3, [r3, #0]
 8011f28:	3344      	adds	r3, #68	@ 0x44
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	6878      	ldr	r0, [r7, #4]
 8011f2e:	4798      	blx	r3
    }
 8011f30:	bf00      	nop
 8011f32:	3708      	adds	r7, #8
 8011f34:	46bd      	mov	sp, r7
 8011f36:	bd80      	pop	{r7, pc}

08011f38 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8011f38:	b480      	push	{r7}
 8011f3a:	b083      	sub	sp, #12
 8011f3c:	af00      	add	r7, sp, #0
 8011f3e:	6078      	str	r0, [r7, #4]
    {
 8011f40:	4a04      	ldr	r2, [pc, #16]	@ (8011f54 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	601a      	str	r2, [r3, #0]
    }
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	4618      	mov	r0, r3
 8011f4a:	370c      	adds	r7, #12
 8011f4c:	46bd      	mov	sp, r7
 8011f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f52:	4770      	bx	lr
 8011f54:	0802f718 	.word	0x0802f718

08011f58 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b082      	sub	sp, #8
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	6078      	str	r0, [r7, #4]
    }
 8011f60:	6878      	ldr	r0, [r7, #4]
 8011f62:	f7ff ffe9 	bl	8011f38 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8011f66:	210c      	movs	r1, #12
 8011f68:	6878      	ldr	r0, [r7, #4]
 8011f6a:	f019 fe8e 	bl	802bc8a <_ZdlPvj>
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	4618      	mov	r0, r3
 8011f72:	3708      	adds	r7, #8
 8011f74:	46bd      	mov	sp, r7
 8011f76:	bd80      	pop	{r7, pc}

08011f78 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8011f78:	b480      	push	{r7}
 8011f7a:	b083      	sub	sp, #12
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	6078      	str	r0, [r7, #4]
 8011f80:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8011f82:	4a09      	ldr	r2, [pc, #36]	@ (8011fa8 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	601a      	str	r2, [r3, #0]
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	683a      	ldr	r2, [r7, #0]
 8011f8c:	605a      	str	r2, [r3, #4]
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	2200      	movs	r2, #0
 8011f92:	721a      	strb	r2, [r3, #8]
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	2200      	movs	r2, #0
 8011f98:	725a      	strb	r2, [r3, #9]
    {
    }
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	370c      	adds	r7, #12
 8011fa0:	46bd      	mov	sp, r7
 8011fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa6:	4770      	bx	lr
 8011fa8:	0802f718 	.word	0x0802f718

08011fac <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8011fac:	b480      	push	{r7}
 8011fae:	b083      	sub	sp, #12
 8011fb0:	af00      	add	r7, sp, #0
 8011fb2:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8011fb4:	2301      	movs	r3, #1
    }
 8011fb6:	4618      	mov	r0, r3
 8011fb8:	370c      	adds	r7, #12
 8011fba:	46bd      	mov	sp, r7
 8011fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc0:	4770      	bx	lr

08011fc2 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8011fc2:	b580      	push	{r7, lr}
 8011fc4:	b082      	sub	sp, #8
 8011fc6:	af00      	add	r7, sp, #0
 8011fc8:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8011fca:	687a      	ldr	r2, [r7, #4]
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	3328      	adds	r3, #40	@ 0x28
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	4610      	mov	r0, r2
 8011fd6:	4798      	blx	r3
    }
 8011fd8:	bf00      	nop
 8011fda:	3708      	adds	r7, #8
 8011fdc:	46bd      	mov	sp, r7
 8011fde:	bd80      	pop	{r7, pc}

08011fe0 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8011fe0:	b580      	push	{r7, lr}
 8011fe2:	b082      	sub	sp, #8
 8011fe4:	af00      	add	r7, sp, #0
 8011fe6:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	685a      	ldr	r2, [r3, #4]
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	685b      	ldr	r3, [r3, #4]
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	3314      	adds	r3, #20
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	4610      	mov	r0, r2
 8011ff8:	4798      	blx	r3
    }
 8011ffa:	bf00      	nop
 8011ffc:	3708      	adds	r7, #8
 8011ffe:	46bd      	mov	sp, r7
 8012000:	bd80      	pop	{r7, pc}

08012002 <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 8012002:	b580      	push	{r7, lr}
 8012004:	b082      	sub	sp, #8
 8012006:	af00      	add	r7, sp, #0
 8012008:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 801200a:	f7fd fa93 	bl	800f534 <_ZN8touchgfx3HAL11getInstanceEv>
 801200e:	4603      	mov	r3, r0
 8012010:	4618      	mov	r0, r3
 8012012:	f7ff ffe5 	bl	8011fe0 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 8012016:	bf00      	nop
 8012018:	3708      	adds	r7, #8
 801201a:	46bd      	mov	sp, r7
 801201c:	bd80      	pop	{r7, pc}

0801201e <DMA2D_XferErrorCallback>:

    static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
    {
 801201e:	b480      	push	{r7}
 8012020:	b083      	sub	sp, #12
 8012022:	af00      	add	r7, sp, #0
 8012024:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        while (1)
 8012026:	bf00      	nop
 8012028:	e7fd      	b.n	8012026 <DMA2D_XferErrorCallback+0x8>
	...

0801202c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 801202c:	b580      	push	{r7, lr}
 801202e:	b082      	sub	sp, #8
 8012030:	af00      	add	r7, sp, #0
 8012032:	6078      	str	r0, [r7, #4]
 8012034:	4a05      	ldr	r2, [pc, #20]	@ (801204c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	601a      	str	r2, [r3, #0]
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	4618      	mov	r0, r3
 801203e:	f7ff ff4d 	bl	8011edc <_ZN8touchgfx9DMA_QueueD1Ev>
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	4618      	mov	r0, r3
 8012046:	3708      	adds	r7, #8
 8012048:	46bd      	mov	sp, r7
 801204a:	bd80      	pop	{r7, pc}
 801204c:	0802f768 	.word	0x0802f768

08012050 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8012050:	b580      	push	{r7, lr}
 8012052:	b082      	sub	sp, #8
 8012054:	af00      	add	r7, sp, #0
 8012056:	6078      	str	r0, [r7, #4]
 8012058:	6878      	ldr	r0, [r7, #4]
 801205a:	f7ff ffe7 	bl	801202c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 801205e:	2114      	movs	r1, #20
 8012060:	6878      	ldr	r0, [r7, #4]
 8012062:	f019 fe12 	bl	802bc8a <_ZdlPvj>
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	4618      	mov	r0, r3
 801206a:	3708      	adds	r7, #8
 801206c:	46bd      	mov	sp, r7
 801206e:	bd80      	pop	{r7, pc}

08012070 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8012070:	b580      	push	{r7, lr}
 8012072:	b082      	sub	sp, #8
 8012074:	af00      	add	r7, sp, #0
 8012076:	6078      	str	r0, [r7, #4]
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	330c      	adds	r3, #12
 801207c:	4618      	mov	r0, r3
 801207e:	f7ff ff13 	bl	8011ea8 <_ZN8touchgfx9colortypeC1Ev>
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	4618      	mov	r0, r3
 8012086:	3708      	adds	r7, #8
 8012088:	46bd      	mov	sp, r7
 801208a:	bd80      	pop	{r7, pc}

0801208c <_ZN8STM32DMAC1Ev>:

        }
    }
}

STM32DMA::STM32DMA()
 801208c:	b5b0      	push	{r4, r5, r7, lr}
 801208e:	b082      	sub	sp, #8
 8012090:	af00      	add	r7, sp, #0
 8012092:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8012094:	687a      	ldr	r2, [r7, #4]
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	330c      	adds	r3, #12
 801209a:	4619      	mov	r1, r3
 801209c:	4610      	mov	r0, r2
 801209e:	f7ff ff6b 	bl	8011f78 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 80120a2:	4a0e      	ldr	r2, [pc, #56]	@ (80120dc <_ZN8STM32DMAC1Ev+0x50>)
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	601a      	str	r2, [r3, #0]
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	f103 000c 	add.w	r0, r3, #12
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	3320      	adds	r3, #32
 80120b2:	2260      	movs	r2, #96	@ 0x60
 80120b4:	4619      	mov	r1, r3
 80120b6:	f003 fd5b 	bl	8015b70 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	3320      	adds	r3, #32
 80120be:	245f      	movs	r4, #95	@ 0x5f
 80120c0:	461d      	mov	r5, r3
 80120c2:	e004      	b.n	80120ce <_ZN8STM32DMAC1Ev+0x42>
 80120c4:	4628      	mov	r0, r5
 80120c6:	f7ff ffd3 	bl	8012070 <_ZN8touchgfx6BlitOpC1Ev>
 80120ca:	3c01      	subs	r4, #1
 80120cc:	3524      	adds	r5, #36	@ 0x24
 80120ce:	2c00      	cmp	r4, #0
 80120d0:	daf8      	bge.n	80120c4 <_ZN8STM32DMAC1Ev+0x38>
{
}
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	4618      	mov	r0, r3
 80120d6:	3708      	adds	r7, #8
 80120d8:	46bd      	mov	sp, r7
 80120da:	bdb0      	pop	{r4, r5, r7, pc}
 80120dc:	0802efb0 	.word	0x0802efb0

080120e0 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 80120e0:	b580      	push	{r7, lr}
 80120e2:	b082      	sub	sp, #8
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	6078      	str	r0, [r7, #4]
 80120e8:	4a09      	ldr	r2, [pc, #36]	@ (8012110 <_ZN8STM32DMAD1Ev+0x30>)
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 80120ee:	2076      	movs	r0, #118	@ 0x76
 80120f0:	f7ff feb6 	bl	8011e60 <__NVIC_DisableIRQ>
}
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	330c      	adds	r3, #12
 80120f8:	4618      	mov	r0, r3
 80120fa:	f7ff ff97 	bl	801202c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	4618      	mov	r0, r3
 8012102:	f7ff ff19 	bl	8011f38 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	4618      	mov	r0, r3
 801210a:	3708      	adds	r7, #8
 801210c:	46bd      	mov	sp, r7
 801210e:	bd80      	pop	{r7, pc}
 8012110:	0802efb0 	.word	0x0802efb0

08012114 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8012114:	b580      	push	{r7, lr}
 8012116:	b082      	sub	sp, #8
 8012118:	af00      	add	r7, sp, #0
 801211a:	6078      	str	r0, [r7, #4]
}
 801211c:	6878      	ldr	r0, [r7, #4]
 801211e:	f7ff ffdf 	bl	80120e0 <_ZN8STM32DMAD1Ev>
 8012122:	f44f 615a 	mov.w	r1, #3488	@ 0xda0
 8012126:	6878      	ldr	r0, [r7, #4]
 8012128:	f019 fdaf 	bl	802bc8a <_ZdlPvj>
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	4618      	mov	r0, r3
 8012130:	3708      	adds	r7, #8
 8012132:	46bd      	mov	sp, r7
 8012134:	bd80      	pop	{r7, pc}
	...

08012138 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 8012138:	b580      	push	{r7, lr}
 801213a:	b084      	sub	sp, #16
 801213c:	af00      	add	r7, sp, #0
 801213e:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8012140:	4b13      	ldr	r3, [pc, #76]	@ (8012190 <_ZN8STM32DMA10initializeEv+0x58>)
 8012142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012146:	4a12      	ldr	r2, [pc, #72]	@ (8012190 <_ZN8STM32DMA10initializeEv+0x58>)
 8012148:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801214c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8012150:	4b0f      	ldr	r3, [pc, #60]	@ (8012190 <_ZN8STM32DMA10initializeEv+0x58>)
 8012152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012156:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801215a:	60fb      	str	r3, [r7, #12]
 801215c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 801215e:	4b0c      	ldr	r3, [pc, #48]	@ (8012190 <_ZN8STM32DMA10initializeEv+0x58>)
 8012160:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012162:	4a0b      	ldr	r2, [pc, #44]	@ (8012190 <_ZN8STM32DMA10initializeEv+0x58>)
 8012164:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8012168:	6613      	str	r3, [r2, #96]	@ 0x60
    __HAL_RCC_DMA2D_RELEASE_RESET();
 801216a:	4b09      	ldr	r3, [pc, #36]	@ (8012190 <_ZN8STM32DMA10initializeEv+0x58>)
 801216c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801216e:	4a08      	ldr	r2, [pc, #32]	@ (8012190 <_ZN8STM32DMA10initializeEv+0x58>)
 8012170:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8012174:	6613      	str	r3, [r2, #96]	@ 0x60

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8012176:	4b07      	ldr	r3, [pc, #28]	@ (8012194 <_ZN8STM32DMA10initializeEv+0x5c>)
 8012178:	4a07      	ldr	r2, [pc, #28]	@ (8012198 <_ZN8STM32DMA10initializeEv+0x60>)
 801217a:	621a      	str	r2, [r3, #32]

    /* Add transfer error callback function */
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 801217c:	4b05      	ldr	r3, [pc, #20]	@ (8012194 <_ZN8STM32DMA10initializeEv+0x5c>)
 801217e:	4a07      	ldr	r2, [pc, #28]	@ (801219c <_ZN8STM32DMA10initializeEv+0x64>)
 8012180:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 8012182:	2076      	movs	r0, #118	@ 0x76
 8012184:	f7ff fe4e 	bl	8011e24 <__NVIC_EnableIRQ>
}
 8012188:	bf00      	nop
 801218a:	3710      	adds	r7, #16
 801218c:	46bd      	mov	sp, r7
 801218e:	bd80      	pop	{r7, pc}
 8012190:	46020c00 	.word	0x46020c00
 8012194:	200459d0 	.word	0x200459d0
 8012198:	08012003 	.word	0x08012003
 801219c:	0801201f 	.word	0x0801201f

080121a0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 80121a0:	b580      	push	{r7, lr}
 80121a2:	b084      	sub	sp, #16
 80121a4:	af00      	add	r7, sp, #0
 80121a6:	6078      	str	r0, [r7, #4]
 80121a8:	460b      	mov	r3, r1
 80121aa:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80121ac:	2300      	movs	r3, #0
 80121ae:	60fb      	str	r3, [r7, #12]

    switch (format)
 80121b0:	78fb      	ldrb	r3, [r7, #3]
 80121b2:	2b0b      	cmp	r3, #11
 80121b4:	d826      	bhi.n	8012204 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 80121b6:	a201      	add	r2, pc, #4	@ (adr r2, 80121bc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 80121b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121bc:	080121f9 	.word	0x080121f9
 80121c0:	080121f3 	.word	0x080121f3
 80121c4:	080121ed 	.word	0x080121ed
 80121c8:	08012205 	.word	0x08012205
 80121cc:	08012205 	.word	0x08012205
 80121d0:	08012205 	.word	0x08012205
 80121d4:	08012205 	.word	0x08012205
 80121d8:	080121ff 	.word	0x080121ff
 80121dc:	080121ff 	.word	0x080121ff
 80121e0:	080121ff 	.word	0x080121ff
 80121e4:	080121ff 	.word	0x080121ff
 80121e8:	080121ff 	.word	0x080121ff
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80121ec:	2300      	movs	r3, #0
 80121ee:	60fb      	str	r3, [r7, #12]
        break;
 80121f0:	e00e      	b.n	8012210 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 80121f2:	2301      	movs	r3, #1
 80121f4:	60fb      	str	r3, [r7, #12]
        break;
 80121f6:	e00b      	b.n	8012210 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 80121f8:	2302      	movs	r3, #2
 80121fa:	60fb      	str	r3, [r7, #12]
        break;
 80121fc:	e008      	b.n	8012210 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 80121fe:	2305      	movs	r3, #5
 8012200:	60fb      	str	r3, [r7, #12]
        break;
 8012202:	e005      	b.n	8012210 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 8012204:	4b05      	ldr	r3, [pc, #20]	@ (801221c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 8012206:	4a06      	ldr	r2, [pc, #24]	@ (8012220 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 8012208:	216f      	movs	r1, #111	@ 0x6f
 801220a:	4806      	ldr	r0, [pc, #24]	@ (8012224 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 801220c:	f01a fc32 	bl	802ca74 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8012210:	68fb      	ldr	r3, [r7, #12]
}
 8012212:	4618      	mov	r0, r3
 8012214:	3710      	adds	r7, #16
 8012216:	46bd      	mov	sp, r7
 8012218:	bd80      	pop	{r7, pc}
 801221a:	bf00      	nop
 801221c:	0802e548 	.word	0x0802e548
 8012220:	0802e564 	.word	0x0802e564
 8012224:	0802e5b0 	.word	0x0802e5b0

08012228 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8012228:	b580      	push	{r7, lr}
 801222a:	b084      	sub	sp, #16
 801222c:	af00      	add	r7, sp, #0
 801222e:	6078      	str	r0, [r7, #4]
 8012230:	460b      	mov	r3, r1
 8012232:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8012234:	2300      	movs	r3, #0
 8012236:	60fb      	str	r3, [r7, #12]

    switch (format)
 8012238:	78fb      	ldrb	r3, [r7, #3]
 801223a:	2b0a      	cmp	r3, #10
 801223c:	d821      	bhi.n	8012282 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 801223e:	a201      	add	r2, pc, #4	@ (adr r2, 8012244 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8012240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012244:	0801227d 	.word	0x0801227d
 8012248:	08012277 	.word	0x08012277
 801224c:	08012271 	.word	0x08012271
 8012250:	08012283 	.word	0x08012283
 8012254:	08012283 	.word	0x08012283
 8012258:	08012283 	.word	0x08012283
 801225c:	08012283 	.word	0x08012283
 8012260:	08012277 	.word	0x08012277
 8012264:	08012277 	.word	0x08012277
 8012268:	08012277 	.word	0x08012277
 801226c:	08012277 	.word	0x08012277
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8012270:	2300      	movs	r3, #0
 8012272:	60fb      	str	r3, [r7, #12]
        break;
 8012274:	e00b      	b.n	801228e <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8012276:	2301      	movs	r3, #1
 8012278:	60fb      	str	r3, [r7, #12]
        break;
 801227a:	e008      	b.n	801228e <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 801227c:	2302      	movs	r3, #2
 801227e:	60fb      	str	r3, [r7, #12]
        break;
 8012280:	e005      	b.n	801228e <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8012282:	4b05      	ldr	r3, [pc, #20]	@ (8012298 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8012284:	4a05      	ldr	r2, [pc, #20]	@ (801229c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 8012286:	2190      	movs	r1, #144	@ 0x90
 8012288:	4805      	ldr	r0, [pc, #20]	@ (80122a0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 801228a:	f01a fbf3 	bl	802ca74 <__assert_func>
        break;
    }

    return dma2dColorMode;
 801228e:	68fb      	ldr	r3, [r7, #12]
}
 8012290:	4618      	mov	r0, r3
 8012292:	3710      	adds	r7, #16
 8012294:	46bd      	mov	sp, r7
 8012296:	bd80      	pop	{r7, pc}
 8012298:	0802e548 	.word	0x0802e548
 801229c:	0802e5dc 	.word	0x0802e5dc
 80122a0:	0802e5b0 	.word	0x0802e5b0

080122a4 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 80122a4:	b480      	push	{r7}
 80122a6:	b083      	sub	sp, #12
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 80122ac:	f240 33ef 	movw	r3, #1007	@ 0x3ef
}
 80122b0:	4618      	mov	r0, r3
 80122b2:	370c      	adds	r7, #12
 80122b4:	46bd      	mov	sp, r7
 80122b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ba:	4770      	bx	lr

080122bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 80122bc:	b590      	push	{r4, r7, lr}
 80122be:	b089      	sub	sp, #36	@ 0x24
 80122c0:	af00      	add	r7, sp, #0
 80122c2:	6078      	str	r0, [r7, #4]
 80122c4:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80122c6:	683b      	ldr	r3, [r7, #0]
 80122c8:	7f5b      	ldrb	r3, [r3, #29]
 80122ca:	4619      	mov	r1, r3
 80122cc:	6878      	ldr	r0, [r7, #4]
 80122ce:	f7ff ff67 	bl	80121a0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80122d2:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80122d4:	683b      	ldr	r3, [r7, #0]
 80122d6:	7f9b      	ldrb	r3, [r3, #30]
 80122d8:	4619      	mov	r1, r3
 80122da:	6878      	ldr	r0, [r7, #4]
 80122dc:	f7ff ff60 	bl	80121a0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80122e0:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80122e2:	683b      	ldr	r3, [r7, #0]
 80122e4:	7f9b      	ldrb	r3, [r3, #30]
 80122e6:	4619      	mov	r1, r3
 80122e8:	6878      	ldr	r0, [r7, #4]
 80122ea:	f7ff ff9d 	bl	8012228 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80122ee:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80122f0:	683b      	ldr	r3, [r7, #0]
 80122f2:	8b5b      	ldrh	r3, [r3, #26]
 80122f4:	461a      	mov	r2, r3
 80122f6:	683b      	ldr	r3, [r7, #0]
 80122f8:	8a9b      	ldrh	r3, [r3, #20]
 80122fa:	1ad2      	subs	r2, r2, r3
 80122fc:	4b97      	ldr	r3, [pc, #604]	@ (801255c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80122fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8012300:	683b      	ldr	r3, [r7, #0]
 8012302:	8b5b      	ldrh	r3, [r3, #26]
 8012304:	461a      	mov	r2, r3
 8012306:	683b      	ldr	r3, [r7, #0]
 8012308:	8a9b      	ldrh	r3, [r3, #20]
 801230a:	1ad2      	subs	r2, r2, r3
 801230c:	4b93      	ldr	r3, [pc, #588]	@ (801255c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801230e:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8012310:	683b      	ldr	r3, [r7, #0]
 8012312:	8b1b      	ldrh	r3, [r3, #24]
 8012314:	461a      	mov	r2, r3
 8012316:	683b      	ldr	r3, [r7, #0]
 8012318:	8a9b      	ldrh	r3, [r3, #20]
 801231a:	1ad2      	subs	r2, r2, r3
 801231c:	4b8f      	ldr	r3, [pc, #572]	@ (801255c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801231e:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8012320:	4a8e      	ldr	r2, [pc, #568]	@ (801255c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012322:	693b      	ldr	r3, [r7, #16]
 8012324:	6353      	str	r3, [r2, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8012326:	683b      	ldr	r3, [r7, #0]
 8012328:	8adb      	ldrh	r3, [r3, #22]
 801232a:	461a      	mov	r2, r3
 801232c:	683b      	ldr	r3, [r7, #0]
 801232e:	8a9b      	ldrh	r3, [r3, #20]
 8012330:	041b      	lsls	r3, r3, #16
 8012332:	431a      	orrs	r2, r3
 8012334:	4b89      	ldr	r3, [pc, #548]	@ (801255c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012336:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012338:	683b      	ldr	r3, [r7, #0]
 801233a:	691a      	ldr	r2, [r3, #16]
 801233c:	4b87      	ldr	r3, [pc, #540]	@ (801255c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801233e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8012340:	683b      	ldr	r3, [r7, #0]
 8012342:	685a      	ldr	r2, [r3, #4]
 8012344:	4b85      	ldr	r3, [pc, #532]	@ (801255c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012346:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8012348:	683b      	ldr	r3, [r7, #0]
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012350:	d037      	beq.n	80123c2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 8012352:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012356:	f200 80e4 	bhi.w	8012522 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 801235a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801235e:	d014      	beq.n	801238a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xce>
 8012360:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012364:	f200 80dd 	bhi.w	8012522 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 8012368:	2b80      	cmp	r3, #128	@ 0x80
 801236a:	d05a      	beq.n	8012422 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x166>
 801236c:	2b80      	cmp	r3, #128	@ 0x80
 801236e:	f200 80d8 	bhi.w	8012522 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 8012372:	2b40      	cmp	r3, #64	@ 0x40
 8012374:	f000 80c1 	beq.w	80124fa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23e>
 8012378:	2b40      	cmp	r3, #64	@ 0x40
 801237a:	f200 80d2 	bhi.w	8012522 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 801237e:	2b04      	cmp	r3, #4
 8012380:	d03b      	beq.n	80123fa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13e>
 8012382:	2b20      	cmp	r3, #32
 8012384:	f000 80b9 	beq.w	80124fa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23e>
 8012388:	e0cb      	b.n	8012522 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 801238a:	683b      	ldr	r3, [r7, #0]
 801238c:	7f1b      	ldrb	r3, [r3, #28]
 801238e:	061b      	lsls	r3, r3, #24
 8012390:	4a72      	ldr	r2, [pc, #456]	@ (801255c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012392:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012396:	f043 030a 	orr.w	r3, r3, #10
 801239a:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 801239c:	683b      	ldr	r3, [r7, #0]
 801239e:	330c      	adds	r3, #12
 80123a0:	4c6e      	ldr	r4, [pc, #440]	@ (801255c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80123a2:	4618      	mov	r0, r3
 80123a4:	f7ff fd8e 	bl	8011ec4 <_ZNK8touchgfx9colortypecvmEv>
 80123a8:	4603      	mov	r3, r0
 80123aa:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80123ac:	4a6b      	ldr	r2, [pc, #428]	@ (801255c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80123ae:	697b      	ldr	r3, [r7, #20]
 80123b0:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80123b2:	683b      	ldr	r3, [r7, #0]
 80123b4:	691a      	ldr	r2, [r3, #16]
 80123b6:	4b69      	ldr	r3, [pc, #420]	@ (801255c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80123b8:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 80123ba:	4b68      	ldr	r3, [pc, #416]	@ (801255c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80123bc:	4a68      	ldr	r2, [pc, #416]	@ (8012560 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80123be:	601a      	str	r2, [r3, #0]
        break;
 80123c0:	e0c7      	b.n	8012552 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80123c2:	683b      	ldr	r3, [r7, #0]
 80123c4:	7f1b      	ldrb	r3, [r3, #28]
 80123c6:	061b      	lsls	r3, r3, #24
 80123c8:	4a64      	ldr	r2, [pc, #400]	@ (801255c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80123ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80123ce:	f043 0309 	orr.w	r3, r3, #9
 80123d2:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80123d4:	683b      	ldr	r3, [r7, #0]
 80123d6:	330c      	adds	r3, #12
 80123d8:	4c60      	ldr	r4, [pc, #384]	@ (801255c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80123da:	4618      	mov	r0, r3
 80123dc:	f7ff fd72 	bl	8011ec4 <_ZNK8touchgfx9colortypecvmEv>
 80123e0:	4603      	mov	r3, r0
 80123e2:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80123e4:	4a5d      	ldr	r2, [pc, #372]	@ (801255c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80123e6:	697b      	ldr	r3, [r7, #20]
 80123e8:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80123ea:	683b      	ldr	r3, [r7, #0]
 80123ec:	691a      	ldr	r2, [r3, #16]
 80123ee:	4b5b      	ldr	r3, [pc, #364]	@ (801255c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80123f0:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 80123f2:	4b5a      	ldr	r3, [pc, #360]	@ (801255c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80123f4:	4a5a      	ldr	r2, [pc, #360]	@ (8012560 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80123f6:	601a      	str	r2, [r3, #0]
        break;
 80123f8:	e0ab      	b.n	8012552 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80123fa:	683b      	ldr	r3, [r7, #0]
 80123fc:	7f1b      	ldrb	r3, [r3, #28]
 80123fe:	061a      	lsls	r2, r3, #24
 8012400:	69bb      	ldr	r3, [r7, #24]
 8012402:	4313      	orrs	r3, r2
 8012404:	4a55      	ldr	r2, [pc, #340]	@ (801255c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012406:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801240a:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 801240c:	4a53      	ldr	r2, [pc, #332]	@ (801255c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801240e:	697b      	ldr	r3, [r7, #20]
 8012410:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012412:	683b      	ldr	r3, [r7, #0]
 8012414:	691a      	ldr	r2, [r3, #16]
 8012416:	4b51      	ldr	r3, [pc, #324]	@ (801255c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012418:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 801241a:	4b50      	ldr	r3, [pc, #320]	@ (801255c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801241c:	4a50      	ldr	r2, [pc, #320]	@ (8012560 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 801241e:	601a      	str	r2, [r3, #0]
        break;
 8012420:	e097      	b.n	8012552 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 8012422:	2301      	movs	r3, #1
 8012424:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8012426:	683b      	ldr	r3, [r7, #0]
 8012428:	689b      	ldr	r3, [r3, #8]
 801242a:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	1d1a      	adds	r2, r3, #4
 8012430:	4b4a      	ldr	r3, [pc, #296]	@ (801255c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012432:	62da      	str	r2, [r3, #44]	@ 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8012434:	683b      	ldr	r3, [r7, #0]
 8012436:	7f1b      	ldrb	r3, [r3, #28]
 8012438:	061a      	lsls	r2, r3, #24
 801243a:	69bb      	ldr	r3, [r7, #24]
 801243c:	4313      	orrs	r3, r2
 801243e:	4a47      	ldr	r2, [pc, #284]	@ (801255c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012440:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012444:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8012446:	4a45      	ldr	r2, [pc, #276]	@ (801255c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012448:	697b      	ldr	r3, [r7, #20]
 801244a:	6253      	str	r3, [r2, #36]	@ 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801244c:	683b      	ldr	r3, [r7, #0]
 801244e:	691a      	ldr	r2, [r3, #16]
 8012450:	4b42      	ldr	r3, [pc, #264]	@ (801255c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012452:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	881b      	ldrh	r3, [r3, #0]
 8012458:	b2db      	uxtb	r3, r3
 801245a:	2b00      	cmp	r3, #0
 801245c:	d002      	beq.n	8012464 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a8>
 801245e:	2b01      	cmp	r3, #1
 8012460:	d00e      	beq.n	8012480 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c4>
 8012462:	e023      	b.n	80124ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8012464:	4b3d      	ldr	r3, [pc, #244]	@ (801255c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012466:	69db      	ldr	r3, [r3, #28]
 8012468:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801246c:	f023 0310 	bic.w	r3, r3, #16
 8012470:	68fa      	ldr	r2, [r7, #12]
 8012472:	8852      	ldrh	r2, [r2, #2]
 8012474:	3a01      	subs	r2, #1
 8012476:	0212      	lsls	r2, r2, #8
 8012478:	4938      	ldr	r1, [pc, #224]	@ (801255c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801247a:	4313      	orrs	r3, r2
 801247c:	61cb      	str	r3, [r1, #28]
                break;
 801247e:	e01c      	b.n	80124ba <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1fe>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if (blitOp.alpha == 255)
 8012480:	683b      	ldr	r3, [r7, #0]
 8012482:	7f1b      	ldrb	r3, [r3, #28]
 8012484:	2bff      	cmp	r3, #255	@ 0xff
 8012486:	d101      	bne.n	801248c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>
                {
                    blend = false;
 8012488:	2300      	movs	r3, #0
 801248a:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 801248c:	4b33      	ldr	r3, [pc, #204]	@ (801255c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801248e:	69db      	ldr	r3, [r3, #28]
 8012490:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8012494:	f023 0310 	bic.w	r3, r3, #16
 8012498:	68fa      	ldr	r2, [r7, #12]
 801249a:	8852      	ldrh	r2, [r2, #2]
 801249c:	3a01      	subs	r2, #1
 801249e:	0212      	lsls	r2, r2, #8
 80124a0:	4313      	orrs	r3, r2
 80124a2:	4a2e      	ldr	r2, [pc, #184]	@ (801255c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80124a4:	f043 0310 	orr.w	r3, r3, #16
 80124a8:	61d3      	str	r3, [r2, #28]
                break;
 80124aa:	e006      	b.n	80124ba <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1fe>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 80124ac:	4b2d      	ldr	r3, [pc, #180]	@ (8012564 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80124ae:	4a2e      	ldr	r2, [pc, #184]	@ (8012568 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 80124b0:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 80124b4:	482d      	ldr	r0, [pc, #180]	@ (801256c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 80124b6:	f01a fadd 	bl	802ca74 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 80124ba:	4b28      	ldr	r3, [pc, #160]	@ (801255c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80124bc:	69db      	ldr	r3, [r3, #28]
 80124be:	4a27      	ldr	r2, [pc, #156]	@ (801255c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80124c0:	f043 0320 	orr.w	r3, r3, #32
 80124c4:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 80124c6:	bf00      	nop
 80124c8:	4b24      	ldr	r3, [pc, #144]	@ (801255c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80124ca:	69db      	ldr	r3, [r3, #28]
 80124cc:	f003 0320 	and.w	r3, r3, #32
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	bf14      	ite	ne
 80124d4:	2301      	movne	r3, #1
 80124d6:	2300      	moveq	r3, #0
 80124d8:	b2db      	uxtb	r3, r3
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d1f4      	bne.n	80124c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20c>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 80124de:	4b1f      	ldr	r3, [pc, #124]	@ (801255c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80124e0:	2210      	movs	r2, #16
 80124e2:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if (blend)
 80124e4:	7ffb      	ldrb	r3, [r7, #31]
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d003      	beq.n	80124f2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x236>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 80124ea:	4b1c      	ldr	r3, [pc, #112]	@ (801255c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80124ec:	4a1c      	ldr	r2, [pc, #112]	@ (8012560 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80124ee:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
            }
        }
        break;
 80124f0:	e02f      	b.n	8012552 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 80124f2:	4b1a      	ldr	r3, [pc, #104]	@ (801255c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80124f4:	4a1e      	ldr	r2, [pc, #120]	@ (8012570 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b4>)
 80124f6:	601a      	str	r2, [r3, #0]
        break;
 80124f8:	e02b      	b.n	8012552 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80124fa:	683b      	ldr	r3, [r7, #0]
 80124fc:	7f1b      	ldrb	r3, [r3, #28]
 80124fe:	061a      	lsls	r2, r3, #24
 8012500:	69bb      	ldr	r3, [r7, #24]
 8012502:	4313      	orrs	r3, r2
 8012504:	4a15      	ldr	r2, [pc, #84]	@ (801255c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012506:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801250a:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 801250c:	4a13      	ldr	r2, [pc, #76]	@ (801255c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801250e:	697b      	ldr	r3, [r7, #20]
 8012510:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012512:	683b      	ldr	r3, [r7, #0]
 8012514:	691a      	ldr	r2, [r3, #16]
 8012516:	4b11      	ldr	r3, [pc, #68]	@ (801255c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012518:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 801251a:	4b10      	ldr	r3, [pc, #64]	@ (801255c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801251c:	4a10      	ldr	r2, [pc, #64]	@ (8012560 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 801251e:	601a      	str	r2, [r3, #0]
        break;
 8012520:	e017      	b.n	8012552 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8012522:	683b      	ldr	r3, [r7, #0]
 8012524:	7f1b      	ldrb	r3, [r3, #28]
 8012526:	061a      	lsls	r2, r3, #24
 8012528:	69bb      	ldr	r3, [r7, #24]
 801252a:	4313      	orrs	r3, r2
 801252c:	4a0b      	ldr	r2, [pc, #44]	@ (801255c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801252e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012532:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8012534:	683b      	ldr	r3, [r7, #0]
 8012536:	7f5a      	ldrb	r2, [r3, #29]
 8012538:	683b      	ldr	r3, [r7, #0]
 801253a:	7f9b      	ldrb	r3, [r3, #30]
 801253c:	429a      	cmp	r2, r3
 801253e:	d003      	beq.n	8012548 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8012540:	4b06      	ldr	r3, [pc, #24]	@ (801255c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012542:	4a0b      	ldr	r2, [pc, #44]	@ (8012570 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b4>)
 8012544:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
        }
        break;
 8012546:	e003      	b.n	8012550 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8012548:	4b04      	ldr	r3, [pc, #16]	@ (801255c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801254a:	f242 3201 	movw	r2, #8961	@ 0x2301
 801254e:	601a      	str	r2, [r3, #0]
        break;
 8012550:	bf00      	nop
    }
}
 8012552:	bf00      	nop
 8012554:	3724      	adds	r7, #36	@ 0x24
 8012556:	46bd      	mov	sp, r7
 8012558:	bd90      	pop	{r4, r7, pc}
 801255a:	bf00      	nop
 801255c:	4002b000 	.word	0x4002b000
 8012560:	00022301 	.word	0x00022301
 8012564:	0802e628 	.word	0x0802e628
 8012568:	0802e644 	.word	0x0802e644
 801256c:	0802e5b0 	.word	0x0802e5b0
 8012570:	00012301 	.word	0x00012301

08012574 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8012574:	b590      	push	{r4, r7, lr}
 8012576:	b085      	sub	sp, #20
 8012578:	af00      	add	r7, sp, #0
 801257a:	6078      	str	r0, [r7, #4]
 801257c:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 801257e:	683b      	ldr	r3, [r7, #0]
 8012580:	7f9b      	ldrb	r3, [r3, #30]
 8012582:	4619      	mov	r1, r3
 8012584:	6878      	ldr	r0, [r7, #4]
 8012586:	f7ff fe4f 	bl	8012228 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 801258a:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 801258c:	4a3b      	ldr	r2, [pc, #236]	@ (801267c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	6353      	str	r3, [r2, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8012592:	683b      	ldr	r3, [r7, #0]
 8012594:	8adb      	ldrh	r3, [r3, #22]
 8012596:	461a      	mov	r2, r3
 8012598:	683b      	ldr	r3, [r7, #0]
 801259a:	8a9b      	ldrh	r3, [r3, #20]
 801259c:	041b      	lsls	r3, r3, #16
 801259e:	431a      	orrs	r2, r3
 80125a0:	4b36      	ldr	r3, [pc, #216]	@ (801267c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80125a2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80125a4:	683b      	ldr	r3, [r7, #0]
 80125a6:	691a      	ldr	r2, [r3, #16]
 80125a8:	4b34      	ldr	r3, [pc, #208]	@ (801267c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80125aa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80125ac:	683b      	ldr	r3, [r7, #0]
 80125ae:	8b5b      	ldrh	r3, [r3, #26]
 80125b0:	461a      	mov	r2, r3
 80125b2:	683b      	ldr	r3, [r7, #0]
 80125b4:	8a9b      	ldrh	r3, [r3, #20]
 80125b6:	1ad2      	subs	r2, r2, r3
 80125b8:	4b30      	ldr	r3, [pc, #192]	@ (801267c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80125ba:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 80125bc:	683b      	ldr	r3, [r7, #0]
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	2b08      	cmp	r3, #8
 80125c2:	d12f      	bne.n	8012624 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xb0>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80125c4:	683b      	ldr	r3, [r7, #0]
 80125c6:	8b5b      	ldrh	r3, [r3, #26]
 80125c8:	461a      	mov	r2, r3
 80125ca:	683b      	ldr	r3, [r7, #0]
 80125cc:	8a9b      	ldrh	r3, [r3, #20]
 80125ce:	1ad2      	subs	r2, r2, r3
 80125d0:	4b2a      	ldr	r3, [pc, #168]	@ (801267c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80125d2:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80125d4:	683b      	ldr	r3, [r7, #0]
 80125d6:	8b5b      	ldrh	r3, [r3, #26]
 80125d8:	461a      	mov	r2, r3
 80125da:	683b      	ldr	r3, [r7, #0]
 80125dc:	8a9b      	ldrh	r3, [r3, #20]
 80125de:	1ad2      	subs	r2, r2, r3
 80125e0:	4b26      	ldr	r3, [pc, #152]	@ (801267c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80125e2:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80125e4:	4a25      	ldr	r2, [pc, #148]	@ (801267c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 80125ea:	683b      	ldr	r3, [r7, #0]
 80125ec:	7f1b      	ldrb	r3, [r3, #28]
 80125ee:	061b      	lsls	r3, r3, #24
 80125f0:	4a22      	ldr	r2, [pc, #136]	@ (801267c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80125f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80125f6:	f043 0309 	orr.w	r3, r3, #9
 80125fa:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80125fc:	683b      	ldr	r3, [r7, #0]
 80125fe:	330c      	adds	r3, #12
 8012600:	4c1e      	ldr	r4, [pc, #120]	@ (801267c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8012602:	4618      	mov	r0, r3
 8012604:	f7ff fc5e 	bl	8011ec4 <_ZNK8touchgfx9colortypecvmEv>
 8012608:	4603      	mov	r3, r0
 801260a:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801260c:	683b      	ldr	r3, [r7, #0]
 801260e:	691a      	ldr	r2, [r3, #16]
 8012610:	4b1a      	ldr	r3, [pc, #104]	@ (801267c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8012612:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012614:	683b      	ldr	r3, [r7, #0]
 8012616:	691a      	ldr	r2, [r3, #16]
 8012618:	4b18      	ldr	r3, [pc, #96]	@ (801267c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801261a:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND | DMA2D_IT_CE | DMA2D_IT_TE));
 801261c:	4b17      	ldr	r3, [pc, #92]	@ (801267c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801261e:	4a18      	ldr	r2, [pc, #96]	@ (8012680 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>)
 8012620:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
    }
}
 8012622:	e027      	b.n	8012674 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x100>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8012624:	4a15      	ldr	r2, [pc, #84]	@ (801267c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 801262a:	4b14      	ldr	r3, [pc, #80]	@ (801267c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801262c:	2200      	movs	r2, #0
 801262e:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8012630:	683b      	ldr	r3, [r7, #0]
 8012632:	330c      	adds	r3, #12
 8012634:	4618      	mov	r0, r3
 8012636:	f7ff fc45 	bl	8011ec4 <_ZNK8touchgfx9colortypecvmEv>
 801263a:	4603      	mov	r3, r0
 801263c:	0a1b      	lsrs	r3, r3, #8
 801263e:	f403 4478 	and.w	r4, r3, #63488	@ 0xf800
 8012642:	683b      	ldr	r3, [r7, #0]
 8012644:	330c      	adds	r3, #12
 8012646:	4618      	mov	r0, r3
 8012648:	f7ff fc3c 	bl	8011ec4 <_ZNK8touchgfx9colortypecvmEv>
 801264c:	4603      	mov	r3, r0
 801264e:	095b      	lsrs	r3, r3, #5
 8012650:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8012654:	431c      	orrs	r4, r3
 8012656:	683b      	ldr	r3, [r7, #0]
 8012658:	330c      	adds	r3, #12
 801265a:	4618      	mov	r0, r3
 801265c:	f7ff fc32 	bl	8011ec4 <_ZNK8touchgfx9colortypecvmEv>
 8012660:	4603      	mov	r3, r0
 8012662:	08db      	lsrs	r3, r3, #3
 8012664:	f003 031f 	and.w	r3, r3, #31
 8012668:	4a04      	ldr	r2, [pc, #16]	@ (801267c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801266a:	4323      	orrs	r3, r4
 801266c:	6393      	str	r3, [r2, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 801266e:	4b03      	ldr	r3, [pc, #12]	@ (801267c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8012670:	4a04      	ldr	r2, [pc, #16]	@ (8012684 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 8012672:	601a      	str	r2, [r3, #0]
}
 8012674:	bf00      	nop
 8012676:	3714      	adds	r7, #20
 8012678:	46bd      	mov	sp, r7
 801267a:	bd90      	pop	{r4, r7, pc}
 801267c:	4002b000 	.word	0x4002b000
 8012680:	00022301 	.word	0x00022301
 8012684:	00032301 	.word	0x00032301

08012688 <_ZN8touchgfx5paint8tearDownEv>:
 * @fn void tearDown();
 *
 * @brief Waits until previous DMA drawing operation has finished
 */
void tearDown()
{
 8012688:	b480      	push	{r7}
 801268a:	af00      	add	r7, sp, #0
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 801268c:	bf00      	nop
 801268e:	4b09      	ldr	r3, [pc, #36]	@ (80126b4 <_ZN8touchgfx5paint8tearDownEv+0x2c>)
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	f003 0301 	and.w	r3, r3, #1
 8012696:	2b00      	cmp	r3, #0
 8012698:	bf14      	ite	ne
 801269a:	2301      	movne	r3, #1
 801269c:	2300      	moveq	r3, #0
 801269e:	b2db      	uxtb	r3, r3
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d1f4      	bne.n	801268e <_ZN8touchgfx5paint8tearDownEv+0x6>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80126a4:	4b03      	ldr	r3, [pc, #12]	@ (80126b4 <_ZN8touchgfx5paint8tearDownEv+0x2c>)
 80126a6:	2223      	movs	r2, #35	@ 0x23
 80126a8:	609a      	str	r2, [r3, #8]
}
 80126aa:	bf00      	nop
 80126ac:	46bd      	mov	sp, r7
 80126ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126b2:	4770      	bx	lr
 80126b4:	4002b000 	.word	0x4002b000

080126b8 <_ZN8touchgfx5paint9flushLineEPmi>:
/** Flushes a line of pixels in the data cache if used.
 *
 * @brief Flushes decoded RGB pixels when rendering compressed images
 */
void flushLine(uint32_t* addr, int sizebytes)
{
 80126b8:	b480      	push	{r7}
 80126ba:	b083      	sub	sp, #12
 80126bc:	af00      	add	r7, sp, #0
 80126be:	6078      	str	r0, [r7, #4]
 80126c0:	6039      	str	r1, [r7, #0]
}
 80126c2:	bf00      	nop
 80126c4:	370c      	adds	r7, #12
 80126c6:	46bd      	mov	sp, r7
 80126c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126cc:	4770      	bx	lr
	...

080126d0 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>:
 *
 * @brief Renders Canvas Widget chunks using DMA.
 * This functions will not generate an interrupt, and will not affect the DMA queue.
 */
void lineFromColor(uint16_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha, const uint32_t color565)
{
 80126d0:	b480      	push	{r7}
 80126d2:	b085      	sub	sp, #20
 80126d4:	af00      	add	r7, sp, #0
 80126d6:	60f8      	str	r0, [r7, #12]
 80126d8:	60b9      	str	r1, [r7, #8]
 80126da:	607a      	str	r2, [r7, #4]
 80126dc:	70fb      	strb	r3, [r7, #3]
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 80126de:	bf00      	nop
 80126e0:	4b21      	ldr	r3, [pc, #132]	@ (8012768 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	f003 0301 	and.w	r3, r3, #1
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	bf14      	ite	ne
 80126ec:	2301      	movne	r3, #1
 80126ee:	2300      	moveq	r3, #0
 80126f0:	b2db      	uxtb	r3, r3
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d1f4      	bne.n	80126e0 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x10>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80126f6:	4b1c      	ldr	r3, [pc, #112]	@ (8012768 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 80126f8:	2223      	movs	r2, #35	@ 0x23
 80126fa:	609a      	str	r2, [r3, #8]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 80126fc:	4b1a      	ldr	r3, [pc, #104]	@ (8012768 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 80126fe:	2202      	movs	r2, #2
 8012700:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8012702:	68bb      	ldr	r3, [r7, #8]
 8012704:	041b      	lsls	r3, r3, #16
 8012706:	4a18      	ldr	r2, [pc, #96]	@ (8012768 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012708:	f043 0301 	orr.w	r3, r3, #1
 801270c:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 801270e:	4a16      	ldr	r2, [pc, #88]	@ (8012768 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	63d3      	str	r3, [r2, #60]	@ 0x3c

    if (alpha < 0xFF)
 8012714:	78fb      	ldrb	r3, [r7, #3]
 8012716:	2bff      	cmp	r3, #255	@ 0xff
 8012718:	d017      	beq.n	801274a <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x7a>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 801271a:	4b13      	ldr	r3, [pc, #76]	@ (8012768 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 801271c:	2202      	movs	r2, #2
 801271e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8012720:	78fb      	ldrb	r3, [r7, #3]
 8012722:	061b      	lsls	r3, r3, #24
 8012724:	4a10      	ldr	r2, [pc, #64]	@ (8012768 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012726:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801272a:	f043 0309 	orr.w	r3, r3, #9
 801272e:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, color);
 8012730:	4a0d      	ldr	r2, [pc, #52]	@ (8012768 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	6213      	str	r3, [r2, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 8012736:	4a0c      	ldr	r2, [pc, #48]	@ (8012768 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012738:	68fb      	ldr	r3, [r7, #12]
 801273a:	6153      	str	r3, [r2, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 801273c:	4a0a      	ldr	r2, [pc, #40]	@ (8012768 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	60d3      	str	r3, [r2, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 8012742:	4b09      	ldr	r3, [pc, #36]	@ (8012768 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012744:	4a09      	ldr	r2, [pc, #36]	@ (801276c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x9c>)
 8012746:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, color565);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
    }
}
 8012748:	e008      	b.n	801275c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x8c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 801274a:	4b07      	ldr	r3, [pc, #28]	@ (8012768 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 801274c:	2202      	movs	r2, #2
 801274e:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->OCOLR, color565);
 8012750:	4a05      	ldr	r2, [pc, #20]	@ (8012768 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012752:	69bb      	ldr	r3, [r7, #24]
 8012754:	6393      	str	r3, [r2, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8012756:	4b04      	ldr	r3, [pc, #16]	@ (8012768 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012758:	4a05      	ldr	r2, [pc, #20]	@ (8012770 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0xa0>)
 801275a:	601a      	str	r2, [r3, #0]
}
 801275c:	bf00      	nop
 801275e:	3714      	adds	r7, #20
 8012760:	46bd      	mov	sp, r7
 8012762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012766:	4770      	bx	lr
 8012768:	4002b000 	.word	0x4002b000
 801276c:	00020001 	.word	0x00020001
 8012770:	00030001 	.word	0x00030001

08012774 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>:

void lineFromRGB565(uint16_t* const ptr, const uint16_t* const data, const unsigned count, const uint8_t alpha)
{
 8012774:	b480      	push	{r7}
 8012776:	b085      	sub	sp, #20
 8012778:	af00      	add	r7, sp, #0
 801277a:	60f8      	str	r0, [r7, #12]
 801277c:	60b9      	str	r1, [r7, #8]
 801277e:	607a      	str	r2, [r7, #4]
 8012780:	70fb      	strb	r3, [r7, #3]
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8012782:	bf00      	nop
 8012784:	4b1f      	ldr	r3, [pc, #124]	@ (8012804 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	f003 0301 	and.w	r3, r3, #1
 801278c:	2b00      	cmp	r3, #0
 801278e:	bf14      	ite	ne
 8012790:	2301      	movne	r3, #1
 8012792:	2300      	moveq	r3, #0
 8012794:	b2db      	uxtb	r3, r3
 8012796:	2b00      	cmp	r3, #0
 8012798:	d1f4      	bne.n	8012784 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x10>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 801279a:	4b1a      	ldr	r3, [pc, #104]	@ (8012804 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 801279c:	2223      	movs	r2, #35	@ 0x23
 801279e:	609a      	str	r2, [r3, #8]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 80127a0:	4b18      	ldr	r3, [pc, #96]	@ (8012804 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 80127a2:	2202      	movs	r2, #2
 80127a4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	041b      	lsls	r3, r3, #16
 80127aa:	4a16      	ldr	r2, [pc, #88]	@ (8012804 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 80127ac:	f043 0301 	orr.w	r3, r3, #1
 80127b0:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 80127b2:	4a14      	ldr	r2, [pc, #80]	@ (8012804 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 80127b4:	68fb      	ldr	r3, [r7, #12]
 80127b6:	63d3      	str	r3, [r2, #60]	@ 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 80127b8:	4a12      	ldr	r2, [pc, #72]	@ (8012804 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 80127ba:	68bb      	ldr	r3, [r7, #8]
 80127bc:	60d3      	str	r3, [r2, #12]

    if (alpha < 0xFF)
 80127be:	78fb      	ldrb	r3, [r7, #3]
 80127c0:	2bff      	cmp	r3, #255	@ 0xff
 80127c2:	d00f      	beq.n	80127e4 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x70>
    {
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 80127c4:	78fb      	ldrb	r3, [r7, #3]
 80127c6:	061b      	lsls	r3, r3, #24
 80127c8:	4a0e      	ldr	r2, [pc, #56]	@ (8012804 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 80127ca:	f043 1302 	orr.w	r3, r3, #131074	@ 0x20002
 80127ce:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80127d0:	4b0c      	ldr	r3, [pc, #48]	@ (8012804 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 80127d2:	2202      	movs	r2, #2
 80127d4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 80127d6:	4a0b      	ldr	r2, [pc, #44]	@ (8012804 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 80127d8:	68fb      	ldr	r3, [r7, #12]
 80127da:	6153      	str	r3, [r2, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 80127dc:	4b09      	ldr	r3, [pc, #36]	@ (8012804 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 80127de:	4a0a      	ldr	r2, [pc, #40]	@ (8012808 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x94>)
 80127e0:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));

        /* Start DMA2D : M2M Mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
    }
}
 80127e2:	e008      	b.n	80127f6 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x82>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 80127e4:	78fb      	ldrb	r3, [r7, #3]
 80127e6:	061b      	lsls	r3, r3, #24
 80127e8:	4a06      	ldr	r2, [pc, #24]	@ (8012804 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 80127ea:	f043 1302 	orr.w	r3, r3, #131074	@ 0x20002
 80127ee:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
 80127f0:	4b04      	ldr	r3, [pc, #16]	@ (8012804 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 80127f2:	2201      	movs	r2, #1
 80127f4:	601a      	str	r2, [r3, #0]
}
 80127f6:	bf00      	nop
 80127f8:	3714      	adds	r7, #20
 80127fa:	46bd      	mov	sp, r7
 80127fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012800:	4770      	bx	lr
 8012802:	bf00      	nop
 8012804:	4002b000 	.word	0x4002b000
 8012808:	00020001 	.word	0x00020001

0801280c <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>:

void lineFromARGB8888(uint16_t* const ptr, const uint32_t* const data, const unsigned count, const uint8_t alpha)
{
 801280c:	b480      	push	{r7}
 801280e:	b085      	sub	sp, #20
 8012810:	af00      	add	r7, sp, #0
 8012812:	60f8      	str	r0, [r7, #12]
 8012814:	60b9      	str	r1, [r7, #8]
 8012816:	607a      	str	r2, [r7, #4]
 8012818:	70fb      	strb	r3, [r7, #3]
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 801281a:	bf00      	nop
 801281c:	4b18      	ldr	r3, [pc, #96]	@ (8012880 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	f003 0301 	and.w	r3, r3, #1
 8012824:	2b00      	cmp	r3, #0
 8012826:	bf14      	ite	ne
 8012828:	2301      	movne	r3, #1
 801282a:	2300      	moveq	r3, #0
 801282c:	b2db      	uxtb	r3, r3
 801282e:	2b00      	cmp	r3, #0
 8012830:	d1f4      	bne.n	801281c <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x10>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8012832:	4b13      	ldr	r3, [pc, #76]	@ (8012880 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 8012834:	2223      	movs	r2, #35	@ 0x23
 8012836:	609a      	str	r2, [r3, #8]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 8012838:	4b11      	ldr	r3, [pc, #68]	@ (8012880 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 801283a:	2202      	movs	r2, #2
 801283c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	041b      	lsls	r3, r3, #16
 8012842:	4a0f      	ldr	r2, [pc, #60]	@ (8012880 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 8012844:	f043 0301 	orr.w	r3, r3, #1
 8012848:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 801284a:	4a0d      	ldr	r2, [pc, #52]	@ (8012880 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	63d3      	str	r3, [r2, #60]	@ 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8012850:	4a0b      	ldr	r2, [pc, #44]	@ (8012880 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 8012852:	68bb      	ldr	r3, [r7, #8]
 8012854:	60d3      	str	r3, [r2, #12]

    /* Set DMA2D color mode and alpha mode */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8012856:	78fb      	ldrb	r3, [r7, #3]
 8012858:	061b      	lsls	r3, r3, #24
 801285a:	4a09      	ldr	r2, [pc, #36]	@ (8012880 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 801285c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012860:	61d3      	str	r3, [r2, #28]

    /* Write DMA2D BGPFCCR register */
    WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8012862:	4b07      	ldr	r3, [pc, #28]	@ (8012880 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 8012864:	2202      	movs	r2, #2
 8012866:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Configure DMA2D Stream source2 address */
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8012868:	4a05      	ldr	r2, [pc, #20]	@ (8012880 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 801286a:	68fb      	ldr	r3, [r7, #12]
 801286c:	6153      	str	r3, [r2, #20]

    /* Set DMA2D mode */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 801286e:	4b04      	ldr	r3, [pc, #16]	@ (8012880 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 8012870:	4a04      	ldr	r2, [pc, #16]	@ (8012884 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x78>)
 8012872:	601a      	str	r2, [r3, #0]
}
 8012874:	bf00      	nop
 8012876:	3714      	adds	r7, #20
 8012878:	46bd      	mov	sp, r7
 801287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801287e:	4770      	bx	lr
 8012880:	4002b000 	.word	0x4002b000
 8012884:	00020001 	.word	0x00020001

08012888 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8012888:	b480      	push	{r7}
 801288a:	b083      	sub	sp, #12
 801288c:	af00      	add	r7, sp, #0
 801288e:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8012890:	4a04      	ldr	r2, [pc, #16]	@ (80128a4 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	6013      	str	r3, [r2, #0]
    }
 8012896:	bf00      	nop
 8012898:	370c      	adds	r7, #12
 801289a:	46bd      	mov	sp, r7
 801289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128a0:	4770      	bx	lr
 80128a2:	bf00      	nop
 80128a4:	2005bae0 	.word	0x2005bae0

080128a8 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 80128a8:	b480      	push	{r7}
 80128aa:	b085      	sub	sp, #20
 80128ac:	af00      	add	r7, sp, #0
 80128ae:	60f8      	str	r0, [r7, #12]
 80128b0:	60b9      	str	r1, [r7, #8]
 80128b2:	607a      	str	r2, [r7, #4]
 80128b4:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 80128b6:	4a0b      	ldr	r2, [pc, #44]	@ (80128e4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 80128b8:	68fb      	ldr	r3, [r7, #12]
 80128ba:	601a      	str	r2, [r3, #0]
        : presenterStorage(pres),
 80128bc:	68fb      	ldr	r3, [r7, #12]
 80128be:	68ba      	ldr	r2, [r7, #8]
 80128c0:	605a      	str	r2, [r3, #4]
          screenStorage(scr),
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	687a      	ldr	r2, [r7, #4]
 80128c6:	609a      	str	r2, [r3, #8]
          transitionStorage(tra),
 80128c8:	68fb      	ldr	r3, [r7, #12]
 80128ca:	683a      	ldr	r2, [r7, #0]
 80128cc:	60da      	str	r2, [r3, #12]
          frontendApplication(app)
 80128ce:	68fb      	ldr	r3, [r7, #12]
 80128d0:	69ba      	ldr	r2, [r7, #24]
 80128d2:	611a      	str	r2, [r3, #16]
    {
    }
 80128d4:	68fb      	ldr	r3, [r7, #12]
 80128d6:	4618      	mov	r0, r3
 80128d8:	3714      	adds	r7, #20
 80128da:	46bd      	mov	sp, r7
 80128dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128e0:	4770      	bx	lr
 80128e2:	bf00      	nop
 80128e4:	0802f0fc 	.word	0x0802f0fc

080128e8 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 80128e8:	b480      	push	{r7}
 80128ea:	b083      	sub	sp, #12
 80128ec:	af00      	add	r7, sp, #0
 80128ee:	6078      	str	r0, [r7, #4]
    {
 80128f0:	4a04      	ldr	r2, [pc, #16]	@ (8012904 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	601a      	str	r2, [r3, #0]
    }
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	4618      	mov	r0, r3
 80128fa:	370c      	adds	r7, #12
 80128fc:	46bd      	mov	sp, r7
 80128fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012902:	4770      	bx	lr
 8012904:	0802f0fc 	.word	0x0802f0fc

08012908 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8012908:	b580      	push	{r7, lr}
 801290a:	b082      	sub	sp, #8
 801290c:	af00      	add	r7, sp, #0
 801290e:	6078      	str	r0, [r7, #4]
    }
 8012910:	6878      	ldr	r0, [r7, #4]
 8012912:	f7ff ffe9 	bl	80128e8 <_ZN8touchgfx7MVPHeapD1Ev>
 8012916:	2114      	movs	r1, #20
 8012918:	6878      	ldr	r0, [r7, #4]
 801291a:	f019 f9b6 	bl	802bc8a <_ZdlPvj>
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	4618      	mov	r0, r3
 8012922:	3708      	adds	r7, #8
 8012924:	46bd      	mov	sp, r7
 8012926:	bd80      	pop	{r7, pc}

08012928 <_ZN8touchgfx18VectorFontRendererD1Ev>:
 */
class VectorFontRenderer
{
public:
    /** Virtual destructor. */
    virtual ~VectorFontRenderer()
 8012928:	b480      	push	{r7}
 801292a:	b083      	sub	sp, #12
 801292c:	af00      	add	r7, sp, #0
 801292e:	6078      	str	r0, [r7, #4]
    {
 8012930:	4a04      	ldr	r2, [pc, #16]	@ (8012944 <_ZN8touchgfx18VectorFontRendererD1Ev+0x1c>)
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	601a      	str	r2, [r3, #0]
    }
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	4618      	mov	r0, r3
 801293a:	370c      	adds	r7, #12
 801293c:	46bd      	mov	sp, r7
 801293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012942:	4770      	bx	lr
 8012944:	0802f0e8 	.word	0x0802f0e8

08012948 <_ZN8touchgfx18VectorFontRendererD0Ev>:
    virtual ~VectorFontRenderer()
 8012948:	b580      	push	{r7, lr}
 801294a:	b082      	sub	sp, #8
 801294c:	af00      	add	r7, sp, #0
 801294e:	6078      	str	r0, [r7, #4]
    }
 8012950:	6878      	ldr	r0, [r7, #4]
 8012952:	f7ff ffe9 	bl	8012928 <_ZN8touchgfx18VectorFontRendererD1Ev>
 8012956:	2104      	movs	r1, #4
 8012958:	6878      	ldr	r0, [r7, #4]
 801295a:	f019 f996 	bl	802bc8a <_ZdlPvj>
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	4618      	mov	r0, r3
 8012962:	3708      	adds	r7, #8
 8012964:	46bd      	mov	sp, r7
 8012966:	bd80      	pop	{r7, pc}

08012968 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0), vectorFontRenderer(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8012968:	b480      	push	{r7}
 801296a:	b083      	sub	sp, #12
 801296c:	af00      	add	r7, sp, #0
 801296e:	6078      	str	r0, [r7, #4]
    {
 8012970:	4a04      	ldr	r2, [pc, #16]	@ (8012984 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	601a      	str	r2, [r3, #0]
    }
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	4618      	mov	r0, r3
 801297a:	370c      	adds	r7, #12
 801297c:	46bd      	mov	sp, r7
 801297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012982:	4770      	bx	lr
 8012984:	0802fa24 	.word	0x0802fa24

08012988 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8012988:	b580      	push	{r7, lr}
 801298a:	b082      	sub	sp, #8
 801298c:	af00      	add	r7, sp, #0
 801298e:	6078      	str	r0, [r7, #4]
    }
 8012990:	6878      	ldr	r0, [r7, #4]
 8012992:	f7ff ffe9 	bl	8012968 <_ZN8touchgfx3LCDD1Ev>
 8012996:	210c      	movs	r1, #12
 8012998:	6878      	ldr	r0, [r7, #4]
 801299a:	f019 f976 	bl	802bc8a <_ZdlPvj>
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	4618      	mov	r0, r3
 80129a2:	3708      	adds	r7, #8
 80129a4:	46bd      	mov	sp, r7
 80129a6:	bd80      	pop	{r7, pc}

080129a8 <_ZN8touchgfx3LCD21setVectorFontRendererEPNS_18VectorFontRendererE>:
    /**
     * Set the vector font renderer
     *
     * @param renderer  The renderer to be used by LCD when dealing with vector fonts.
     */
    void setVectorFontRenderer(VectorFontRenderer* renderer)
 80129a8:	b480      	push	{r7}
 80129aa:	b083      	sub	sp, #12
 80129ac:	af00      	add	r7, sp, #0
 80129ae:	6078      	str	r0, [r7, #4]
 80129b0:	6039      	str	r1, [r7, #0]
    {
        vectorFontRenderer = renderer;
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	683a      	ldr	r2, [r7, #0]
 80129b6:	609a      	str	r2, [r3, #8]
    }
 80129b8:	bf00      	nop
 80129ba:	370c      	adds	r7, #12
 80129bc:	46bd      	mov	sp, r7
 80129be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129c2:	4770      	bx	lr

080129c4 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 80129c4:	b480      	push	{r7}
 80129c6:	b083      	sub	sp, #12
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	6078      	str	r0, [r7, #4]
            : startX(0),
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	2200      	movs	r2, #0
 80129d0:	801a      	strh	r2, [r3, #0]
              startY(0),
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	2200      	movs	r2, #0
 80129d6:	805a      	strh	r2, [r3, #2]
              downX(0),
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	2200      	movs	r2, #0
 80129dc:	809a      	strh	r2, [r3, #4]
              downY(0),
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	2200      	movs	r2, #0
 80129e2:	80da      	strh	r2, [r3, #6]
              tickCount(0),
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	2200      	movs	r2, #0
 80129e8:	811a      	strh	r2, [r3, #8]
              velocityX(0),
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	2200      	movs	r2, #0
 80129ee:	815a      	strh	r2, [r3, #10]
              velocityY(0),
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	2200      	movs	r2, #0
 80129f4:	819a      	strh	r2, [r3, #12]
              inProgress(false)
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	2200      	movs	r2, #0
 80129fa:	739a      	strb	r2, [r3, #14]
        {
        }
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	4618      	mov	r0, r3
 8012a00:	370c      	adds	r7, #12
 8012a02:	46bd      	mov	sp, r7
 8012a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a08:	4770      	bx	lr

08012a0a <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8012a0a:	b580      	push	{r7, lr}
 8012a0c:	b082      	sub	sp, #8
 8012a0e:	af00      	add	r7, sp, #0
 8012a10:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	4618      	mov	r0, r3
 8012a16:	f7ff ffd5 	bl	80129c4 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	2200      	movs	r2, #0
 8012a1e:	611a      	str	r2, [r3, #16]
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	2200      	movs	r2, #0
 8012a24:	829a      	strh	r2, [r3, #20]
    {
    }
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	4618      	mov	r0, r3
 8012a2a:	3708      	adds	r7, #8
 8012a2c:	46bd      	mov	sp, r7
 8012a2e:	bd80      	pop	{r7, pc}

08012a30 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8012a30:	b580      	push	{r7, lr}
 8012a32:	b084      	sub	sp, #16
 8012a34:	af00      	add	r7, sp, #0
 8012a36:	60f8      	str	r0, [r7, #12]
 8012a38:	60b9      	str	r1, [r7, #8]
 8012a3a:	607a      	str	r2, [r7, #4]
 8012a3c:	603b      	str	r3, [r7, #0]
          maxBlockLines(20)
 8012a3e:	4a65      	ldr	r2, [pc, #404]	@ (8012bd4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1a4>)
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	601a      	str	r2, [r3, #0]
        : dma(dmaInterface),
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	68ba      	ldr	r2, [r7, #8]
 8012a48:	605a      	str	r2, [r3, #4]
          lcdRef(display),
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	687a      	ldr	r2, [r7, #4]
 8012a4e:	609a      	str	r2, [r3, #8]
          touchController(touchCtrl),
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	683a      	ldr	r2, [r7, #0]
 8012a54:	60da      	str	r2, [r3, #12]
          mcuInstrumentation(0),
 8012a56:	68fb      	ldr	r3, [r7, #12]
 8012a58:	2200      	movs	r2, #0
 8012a5a:	611a      	str	r2, [r3, #16]
          buttonController(0),
 8012a5c:	68fb      	ldr	r3, [r7, #12]
 8012a5e:	2200      	movs	r2, #0
 8012a60:	615a      	str	r2, [r3, #20]
          frameBufferAllocator(0),
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	2200      	movs	r2, #0
 8012a66:	619a      	str	r2, [r3, #24]
          gestures(),
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	331c      	adds	r3, #28
 8012a6c:	4618      	mov	r0, r3
 8012a6e:	f7ff ffcc 	bl	8012a0a <_ZN8touchgfx8GesturesC1Ev>
          nativeDisplayOrientation(ORIENTATION_LANDSCAPE),
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	2200      	movs	r2, #0
 8012a76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          taskDelayFunc(0),
 8012a7a:	68fb      	ldr	r3, [r7, #12]
 8012a7c:	2200      	movs	r2, #0
 8012a7e:	639a      	str	r2, [r3, #56]	@ 0x38
          frameBuffer0(0),
 8012a80:	68fb      	ldr	r3, [r7, #12]
 8012a82:	2200      	movs	r2, #0
 8012a84:	63da      	str	r2, [r3, #60]	@ 0x3c
          frameBuffer1(0),
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	2200      	movs	r2, #0
 8012a8a:	641a      	str	r2, [r3, #64]	@ 0x40
          frameBuffer2(0),
 8012a8c:	68fb      	ldr	r3, [r7, #12]
 8012a8e:	2200      	movs	r2, #0
 8012a90:	645a      	str	r2, [r3, #68]	@ 0x44
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8012a92:	68fb      	ldr	r3, [r7, #12]
 8012a94:	2200      	movs	r2, #0
 8012a96:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
          fingerSize(1),
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	2201      	movs	r2, #1
 8012a9e:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
          lockDMAToPorch(false),
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	2200      	movs	r2, #0
 8012aa6:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
          frameBufferUpdatedThisFrame(false),
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	2200      	movs	r2, #0
 8012aae:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
          auxiliaryLCD(0),
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	2200      	movs	r2, #0
 8012ab6:	64da      	str	r2, [r3, #76]	@ 0x4c
          partialFrameBufferRect(),
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	3350      	adds	r3, #80	@ 0x50
 8012abc:	4618      	mov	r0, r3
 8012abe:	f7fd fc84 	bl	80103ca <_ZN8touchgfx4RectC1Ev>
          useAuxiliaryLCD(false),
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	2200      	movs	r2, #0
 8012ac6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
          listener(0),
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	2200      	movs	r2, #0
 8012ace:	65da      	str	r2, [r3, #92]	@ 0x5c
          lastX(0),
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	2200      	movs	r2, #0
 8012ad4:	661a      	str	r2, [r3, #96]	@ 0x60
          lastY(0),
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	2200      	movs	r2, #0
 8012ada:	665a      	str	r2, [r3, #100]	@ 0x64
          touchSampleRate(1),
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	2201      	movs	r2, #1
 8012ae0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
          mcuLoadPct(0),
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	2200      	movs	r2, #0
 8012ae8:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
          vSyncCnt(0),
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	2200      	movs	r2, #0
 8012af0:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
          vSyncForFrame(1),
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	2201      	movs	r2, #1
 8012af8:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
          vSyncCompensationEnabled(false),
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	2200      	movs	r2, #0
 8012b00:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
          clientDirty(false),
 8012b04:	68fb      	ldr	r3, [r7, #12]
 8012b06:	2200      	movs	r2, #0
 8012b08:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
          swapRequested(false),
 8012b0c:	68fb      	ldr	r3, [r7, #12]
 8012b0e:	2200      	movs	r2, #0
 8012b10:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
          lastTouched(false),
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	2200      	movs	r2, #0
 8012b18:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
          updateMCULoad(0),
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	2200      	movs	r2, #0
 8012b20:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
          cc_begin(0),
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	2200      	movs	r2, #0
 8012b28:	675a      	str	r2, [r3, #116]	@ 0x74
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8012b2a:	68fb      	ldr	r3, [r7, #12]
 8012b2c:	2200      	movs	r2, #0
 8012b2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
          displayOrientationChangeRequested(false),
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	2200      	movs	r2, #0
 8012b36:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
          useDMAAcceleration(true),
 8012b3a:	68fb      	ldr	r3, [r7, #12]
 8012b3c:	2201      	movs	r2, #1
 8012b3e:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
          lastRenderMethod(HARDWARE),
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	2201      	movs	r2, #1
 8012b46:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b
          isFrontPorchEntered(false),
 8012b4a:	68fb      	ldr	r3, [r7, #12]
 8012b4c:	2200      	movs	r2, #0
 8012b4e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
          numberOfBlocks(4),
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	2204      	movs	r2, #4
 8012b56:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
          maxDrawingHeight(height / numberOfBlocks), // Best guess based on testing (but not ideal in all cases)
 8012b5a:	8bbb      	ldrh	r3, [r7, #28]
 8012b5c:	68fa      	ldr	r2, [r7, #12]
 8012b5e:	f892 207d 	ldrb.w	r2, [r2, #125]	@ 0x7d
 8012b62:	fb93 f3f2 	sdiv	r3, r3, r2
 8012b66:	b29a      	uxth	r2, r3
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
          minDrawingHeight(maxDrawingHeight / 3),    // Best guess based on testing (but not ideal in all cases)
 8012b6e:	68fb      	ldr	r3, [r7, #12]
 8012b70:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 8012b74:	4a18      	ldr	r2, [pc, #96]	@ (8012bd8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1a8>)
 8012b76:	fba2 2303 	umull	r2, r3, r2, r3
 8012b7a:	085b      	lsrs	r3, r3, #1
 8012b7c:	b29a      	uxth	r2, r3
 8012b7e:	68fb      	ldr	r3, [r7, #12]
 8012b80:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
          maxBlockLines(20)
 8012b84:	68fb      	ldr	r3, [r7, #12]
 8012b86:	2214      	movs	r2, #20
 8012b88:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
        instance = this;
 8012b8c:	4a13      	ldr	r2, [pc, #76]	@ (8012bdc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1ac>)
 8012b8e:	68fb      	ldr	r3, [r7, #12]
 8012b90:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8012b92:	4a13      	ldr	r2, [pc, #76]	@ (8012be0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1b0>)
 8012b94:	8b3b      	ldrh	r3, [r7, #24]
 8012b96:	8013      	strh	r3, [r2, #0]
 8012b98:	4b11      	ldr	r3, [pc, #68]	@ (8012be0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1b0>)
 8012b9a:	881a      	ldrh	r2, [r3, #0]
 8012b9c:	4b11      	ldr	r3, [pc, #68]	@ (8012be4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1b4>)
 8012b9e:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8012ba0:	4a11      	ldr	r2, [pc, #68]	@ (8012be8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1b8>)
 8012ba2:	8bbb      	ldrh	r3, [r7, #28]
 8012ba4:	8013      	strh	r3, [r2, #0]
 8012ba6:	4b10      	ldr	r3, [pc, #64]	@ (8012be8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1b8>)
 8012ba8:	881a      	ldrh	r2, [r3, #0]
 8012baa:	4b10      	ldr	r3, [pc, #64]	@ (8012bec <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1bc>)
 8012bac:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8012bae:	4b10      	ldr	r3, [pc, #64]	@ (8012bf0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1c0>)
 8012bb0:	2200      	movs	r2, #0
 8012bb2:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8012bb4:	8b3a      	ldrh	r2, [r7, #24]
 8012bb6:	8bbb      	ldrh	r3, [r7, #28]
 8012bb8:	429a      	cmp	r2, r3
 8012bba:	bf34      	ite	cc
 8012bbc:	2301      	movcc	r3, #1
 8012bbe:	2300      	movcs	r3, #0
 8012bc0:	b2db      	uxtb	r3, r3
 8012bc2:	461a      	mov	r2, r3
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }
 8012bca:	68fb      	ldr	r3, [r7, #12]
 8012bcc:	4618      	mov	r0, r3
 8012bce:	3710      	adds	r7, #16
 8012bd0:	46bd      	mov	sp, r7
 8012bd2:	bd80      	pop	{r7, pc}
 8012bd4:	0802f62c 	.word	0x0802f62c
 8012bd8:	aaaaaaab 	.word	0xaaaaaaab
 8012bdc:	2005ba7c 	.word	0x2005ba7c
 8012be0:	2005ba70 	.word	0x2005ba70
 8012be4:	2005ba76 	.word	0x2005ba76
 8012be8:	2005ba72 	.word	0x2005ba72
 8012bec:	2005ba78 	.word	0x2005ba78
 8012bf0:	2005ba74 	.word	0x2005ba74

08012bf4 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8012bf4:	b580      	push	{r7, lr}
 8012bf6:	b082      	sub	sp, #8
 8012bf8:	af00      	add	r7, sp, #0
 8012bfa:	6078      	str	r0, [r7, #4]
 8012bfc:	6039      	str	r1, [r7, #0]
    {
        app.gotoscreenScreenNoTransition();
 8012bfe:	683b      	ldr	r3, [r7, #0]
 8012c00:	4618      	mov	r0, r3
 8012c02:	f7fd f967 	bl	800fed4 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
 8012c06:	bf00      	nop
 8012c08:	3708      	adds	r7, #8
 8012c0a:	46bd      	mov	sp, r7
 8012c0c:	bd80      	pop	{r7, pc}
	...

08012c10 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8012c10:	b580      	push	{r7, lr}
 8012c12:	b086      	sub	sp, #24
 8012c14:	af02      	add	r7, sp, #8
 8012c16:	60f8      	str	r0, [r7, #12]
 8012c18:	60b9      	str	r1, [r7, #8]
 8012c1a:	607a      	str	r2, [r7, #4]
 8012c1c:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8012c1e:	68f8      	ldr	r0, [r7, #12]
 8012c20:	69bb      	ldr	r3, [r7, #24]
 8012c22:	9300      	str	r3, [sp, #0]
 8012c24:	683b      	ldr	r3, [r7, #0]
 8012c26:	687a      	ldr	r2, [r7, #4]
 8012c28:	68b9      	ldr	r1, [r7, #8]
 8012c2a:	f7ff fe3d 	bl	80128a8 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8012c2e:	4a04      	ldr	r2, [pc, #16]	@ (8012c40 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8012c30:	68fb      	ldr	r3, [r7, #12]
 8012c32:	601a      	str	r2, [r3, #0]
    {

    }
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	4618      	mov	r0, r3
 8012c38:	3710      	adds	r7, #16
 8012c3a:	46bd      	mov	sp, r7
 8012c3c:	bd80      	pop	{r7, pc}
 8012c3e:	bf00      	nop
 8012c40:	0802f0d4 	.word	0x0802f0d4

08012c44 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8012c44:	b580      	push	{r7, lr}
 8012c46:	b082      	sub	sp, #8
 8012c48:	af00      	add	r7, sp, #0
 8012c4a:	6078      	str	r0, [r7, #4]
 8012c4c:	4a05      	ldr	r2, [pc, #20]	@ (8012c64 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	601a      	str	r2, [r3, #0]
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	4618      	mov	r0, r3
 8012c56:	f7ff fe47 	bl	80128e8 <_ZN8touchgfx7MVPHeapD1Ev>
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	4618      	mov	r0, r3
 8012c5e:	3708      	adds	r7, #8
 8012c60:	46bd      	mov	sp, r7
 8012c62:	bd80      	pop	{r7, pc}
 8012c64:	0802f0d4 	.word	0x0802f0d4

08012c68 <_ZN16FrontendHeapBaseD0Ev>:
 8012c68:	b580      	push	{r7, lr}
 8012c6a:	b082      	sub	sp, #8
 8012c6c:	af00      	add	r7, sp, #0
 8012c6e:	6078      	str	r0, [r7, #4]
 8012c70:	6878      	ldr	r0, [r7, #4]
 8012c72:	f7ff ffe7 	bl	8012c44 <_ZN16FrontendHeapBaseD1Ev>
 8012c76:	2114      	movs	r1, #20
 8012c78:	6878      	ldr	r0, [r7, #4]
 8012c7a:	f019 f806 	bl	802bc8a <_ZdlPvj>
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	4618      	mov	r0, r3
 8012c82:	3708      	adds	r7, #8
 8012c84:	46bd      	mov	sp, r7
 8012c86:	bd80      	pop	{r7, pc}

08012c88 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8012c88:	b580      	push	{r7, lr}
 8012c8a:	b082      	sub	sp, #8
 8012c8c:	af00      	add	r7, sp, #0
 8012c8e:	6078      	str	r0, [r7, #4]
 8012c90:	4a05      	ldr	r2, [pc, #20]	@ (8012ca8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	601a      	str	r2, [r3, #0]
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	4618      	mov	r0, r3
 8012c9a:	f001 f8b9 	bl	8013e10 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	4618      	mov	r0, r3
 8012ca2:	3708      	adds	r7, #8
 8012ca4:	46bd      	mov	sp, r7
 8012ca6:	bd80      	pop	{r7, pc}
 8012ca8:	0802f0a0 	.word	0x0802f0a0

08012cac <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8012cac:	b580      	push	{r7, lr}
 8012cae:	b082      	sub	sp, #8
 8012cb0:	af00      	add	r7, sp, #0
 8012cb2:	6078      	str	r0, [r7, #4]
 8012cb4:	6878      	ldr	r0, [r7, #4]
 8012cb6:	f7ff ffe7 	bl	8012c88 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8012cba:	2118      	movs	r1, #24
 8012cbc:	6878      	ldr	r0, [r7, #4]
 8012cbe:	f018 ffe4 	bl	802bc8a <_ZdlPvj>
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	4618      	mov	r0, r3
 8012cc6:	3708      	adds	r7, #8
 8012cc8:	46bd      	mov	sp, r7
 8012cca:	bd80      	pop	{r7, pc}

08012ccc <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8012ccc:	b580      	push	{r7, lr}
 8012cce:	b082      	sub	sp, #8
 8012cd0:	af00      	add	r7, sp, #0
 8012cd2:	6078      	str	r0, [r7, #4]
 8012cd4:	4a05      	ldr	r2, [pc, #20]	@ (8012cec <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	601a      	str	r2, [r3, #0]
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	4618      	mov	r0, r3
 8012cde:	f001 f897 	bl	8013e10 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	4618      	mov	r0, r3
 8012ce6:	3708      	adds	r7, #8
 8012ce8:	46bd      	mov	sp, r7
 8012cea:	bd80      	pop	{r7, pc}
 8012cec:	0802f06c 	.word	0x0802f06c

08012cf0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8012cf0:	b580      	push	{r7, lr}
 8012cf2:	b082      	sub	sp, #8
 8012cf4:	af00      	add	r7, sp, #0
 8012cf6:	6078      	str	r0, [r7, #4]
 8012cf8:	6878      	ldr	r0, [r7, #4]
 8012cfa:	f7ff ffe7 	bl	8012ccc <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8012cfe:	f44f 7107 	mov.w	r1, #540	@ 0x21c
 8012d02:	6878      	ldr	r0, [r7, #4]
 8012d04:	f018 ffc1 	bl	802bc8a <_ZdlPvj>
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	4618      	mov	r0, r3
 8012d0c:	3708      	adds	r7, #8
 8012d0e:	46bd      	mov	sp, r7
 8012d10:	bd80      	pop	{r7, pc}
	...

08012d14 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8012d14:	b580      	push	{r7, lr}
 8012d16:	b082      	sub	sp, #8
 8012d18:	af00      	add	r7, sp, #0
 8012d1a:	6078      	str	r0, [r7, #4]
 8012d1c:	4a05      	ldr	r2, [pc, #20]	@ (8012d34 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	601a      	str	r2, [r3, #0]
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	4618      	mov	r0, r3
 8012d26:	f001 f873 	bl	8013e10 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	4618      	mov	r0, r3
 8012d2e:	3708      	adds	r7, #8
 8012d30:	46bd      	mov	sp, r7
 8012d32:	bd80      	pop	{r7, pc}
 8012d34:	0802f038 	.word	0x0802f038

08012d38 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8012d38:	b580      	push	{r7, lr}
 8012d3a:	b082      	sub	sp, #8
 8012d3c:	af00      	add	r7, sp, #0
 8012d3e:	6078      	str	r0, [r7, #4]
 8012d40:	6878      	ldr	r0, [r7, #4]
 8012d42:	f7ff ffe7 	bl	8012d14 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8012d46:	2114      	movs	r1, #20
 8012d48:	6878      	ldr	r0, [r7, #4]
 8012d4a:	f018 ff9e 	bl	802bc8a <_ZdlPvj>
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	4618      	mov	r0, r3
 8012d52:	3708      	adds	r7, #8
 8012d54:	46bd      	mov	sp, r7
 8012d56:	bd80      	pop	{r7, pc}

08012d58 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8012d58:	b580      	push	{r7, lr}
 8012d5a:	b082      	sub	sp, #8
 8012d5c:	af00      	add	r7, sp, #0
 8012d5e:	6078      	str	r0, [r7, #4]
 8012d60:	4a10      	ldr	r2, [pc, #64]	@ (8012da4 <_ZN12FrontendHeapD1Ev+0x4c>)
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	601a      	str	r2, [r3, #0]
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8012d6c:	4618      	mov	r0, r3
 8012d6e:	f7fe f98d 	bl	801108c <_ZN19FrontendApplicationD1Ev>
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8012d78:	4618      	mov	r0, r3
 8012d7a:	f7ff ffcb 	bl	8012d14 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	332c      	adds	r3, #44	@ 0x2c
 8012d82:	4618      	mov	r0, r3
 8012d84:	f7ff ffa2 	bl	8012ccc <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	3314      	adds	r3, #20
 8012d8c:	4618      	mov	r0, r3
 8012d8e:	f7ff ff7b 	bl	8012c88 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	4618      	mov	r0, r3
 8012d96:	f7ff ff55 	bl	8012c44 <_ZN16FrontendHeapBaseD1Ev>
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	3708      	adds	r7, #8
 8012da0:	46bd      	mov	sp, r7
 8012da2:	bd80      	pop	{r7, pc}
 8012da4:	0802f024 	.word	0x0802f024

08012da8 <_ZN12FrontendHeapD0Ev>:
 8012da8:	b580      	push	{r7, lr}
 8012daa:	b082      	sub	sp, #8
 8012dac:	af00      	add	r7, sp, #0
 8012dae:	6078      	str	r0, [r7, #4]
 8012db0:	6878      	ldr	r0, [r7, #4]
 8012db2:	f7ff ffd1 	bl	8012d58 <_ZN12FrontendHeapD1Ev>
 8012db6:	f44f 716f 	mov.w	r1, #956	@ 0x3bc
 8012dba:	6878      	ldr	r0, [r7, #4]
 8012dbc:	f018 ff65 	bl	802bc8a <_ZdlPvj>
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	4618      	mov	r0, r3
 8012dc4:	3708      	adds	r7, #8
 8012dc6:	46bd      	mov	sp, r7
 8012dc8:	bd80      	pop	{r7, pc}
	...

08012dcc <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8012dcc:	b580      	push	{r7, lr}
 8012dce:	af00      	add	r7, sp, #0
 8012dd0:	4801      	ldr	r0, [pc, #4]	@ (8012dd8 <__tcf_0+0xc>)
 8012dd2:	f7ff ffc1 	bl	8012d58 <_ZN12FrontendHeapD1Ev>
 8012dd6:	bd80      	pop	{r7, pc}
 8012dd8:	2005a71c 	.word	0x2005a71c

08012ddc <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8012ddc:	b580      	push	{r7, lr}
 8012dde:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8012de0:	4b11      	ldr	r3, [pc, #68]	@ (8012e28 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8012de2:	e8d3 3faf 	lda	r3, [r3]
 8012de6:	f003 0301 	and.w	r3, r3, #1
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	bf0c      	ite	eq
 8012dee:	2301      	moveq	r3, #1
 8012df0:	2300      	movne	r3, #0
 8012df2:	b2db      	uxtb	r3, r3
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d013      	beq.n	8012e20 <_ZN12FrontendHeap11getInstanceEv+0x44>
 8012df8:	480b      	ldr	r0, [pc, #44]	@ (8012e28 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8012dfa:	f018 ff48 	bl	802bc8e <__cxa_guard_acquire>
 8012dfe:	4603      	mov	r3, r0
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	bf14      	ite	ne
 8012e04:	2301      	movne	r3, #1
 8012e06:	2300      	moveq	r3, #0
 8012e08:	b2db      	uxtb	r3, r3
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d008      	beq.n	8012e20 <_ZN12FrontendHeap11getInstanceEv+0x44>
 8012e0e:	4807      	ldr	r0, [pc, #28]	@ (8012e2c <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8012e10:	f000 f846 	bl	8012ea0 <_ZN12FrontendHeapC1Ev>
 8012e14:	4806      	ldr	r0, [pc, #24]	@ (8012e30 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8012e16:	f019 fe4b 	bl	802cab0 <atexit>
 8012e1a:	4803      	ldr	r0, [pc, #12]	@ (8012e28 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8012e1c:	f018 ff43 	bl	802bca6 <__cxa_guard_release>
        return instance;
 8012e20:	4b02      	ldr	r3, [pc, #8]	@ (8012e2c <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 8012e22:	4618      	mov	r0, r3
 8012e24:	bd80      	pop	{r7, pc}
 8012e26:	bf00      	nop
 8012e28:	2005aad8 	.word	0x2005aad8
 8012e2c:	2005a71c 	.word	0x2005a71c
 8012e30:	08012dcd 	.word	0x08012dcd

08012e34 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8012e34:	b580      	push	{r7, lr}
 8012e36:	b082      	sub	sp, #8
 8012e38:	af00      	add	r7, sp, #0
 8012e3a:	6078      	str	r0, [r7, #4]
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	4618      	mov	r0, r3
 8012e40:	f000 ffe8 	bl	8013e14 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8012e44:	4a03      	ldr	r2, [pc, #12]	@ (8012e54 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	601a      	str	r2, [r3, #0]
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	4618      	mov	r0, r3
 8012e4e:	3708      	adds	r7, #8
 8012e50:	46bd      	mov	sp, r7
 8012e52:	bd80      	pop	{r7, pc}
 8012e54:	0802f0a0 	.word	0x0802f0a0

08012e58 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8012e58:	b580      	push	{r7, lr}
 8012e5a:	b082      	sub	sp, #8
 8012e5c:	af00      	add	r7, sp, #0
 8012e5e:	6078      	str	r0, [r7, #4]
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	4618      	mov	r0, r3
 8012e64:	f000 ffd6 	bl	8013e14 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8012e68:	4a03      	ldr	r2, [pc, #12]	@ (8012e78 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	601a      	str	r2, [r3, #0]
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	4618      	mov	r0, r3
 8012e72:	3708      	adds	r7, #8
 8012e74:	46bd      	mov	sp, r7
 8012e76:	bd80      	pop	{r7, pc}
 8012e78:	0802f06c 	.word	0x0802f06c

08012e7c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8012e7c:	b580      	push	{r7, lr}
 8012e7e:	b082      	sub	sp, #8
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	6078      	str	r0, [r7, #4]
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	4618      	mov	r0, r3
 8012e88:	f000 ffc4 	bl	8013e14 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8012e8c:	4a03      	ldr	r2, [pc, #12]	@ (8012e9c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	601a      	str	r2, [r3, #0]
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	4618      	mov	r0, r3
 8012e96:	3708      	adds	r7, #8
 8012e98:	46bd      	mov	sp, r7
 8012e9a:	bd80      	pop	{r7, pc}
 8012e9c:	0802f038 	.word	0x0802f038

08012ea0 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8012ea0:	b590      	push	{r4, r7, lr}
 8012ea2:	b085      	sub	sp, #20
 8012ea4:	af02      	add	r7, sp, #8
 8012ea6:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8012ea8:	6878      	ldr	r0, [r7, #4]
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	f103 0114 	add.w	r1, r3, #20
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	f503 7412 	add.w	r4, r3, #584	@ 0x248
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	f503 7318 	add.w	r3, r3, #608	@ 0x260
                     app(model, *this)
 8012ec2:	9300      	str	r3, [sp, #0]
 8012ec4:	4623      	mov	r3, r4
 8012ec6:	f7ff fea3 	bl	8012c10 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8012eca:	4a18      	ldr	r2, [pc, #96]	@ (8012f2c <_ZN12FrontendHeapC1Ev+0x8c>)
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	601a      	str	r2, [r3, #0]
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	3314      	adds	r3, #20
 8012ed4:	4618      	mov	r0, r3
 8012ed6:	f7ff ffad 	bl	8012e34 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	332c      	adds	r3, #44	@ 0x2c
 8012ede:	4618      	mov	r0, r3
 8012ee0:	f7ff ffba 	bl	8012e58 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8012eea:	4618      	mov	r0, r3
 8012eec:	f7ff ffc6 	bl	8012e7c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8012ef6:	4618      	mov	r0, r3
 8012ef8:	f7fe f914 	bl	8011124 <_ZN5ModelC1Ev>
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	f503 7018 	add.w	r0, r3, #608	@ 0x260
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8012f08:	687a      	ldr	r2, [r7, #4]
 8012f0a:	4619      	mov	r1, r3
 8012f0c:	f7fe f8f4 	bl	80110f8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8012f10:	687a      	ldr	r2, [r7, #4]
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8012f18:	4619      	mov	r1, r3
 8012f1a:	4610      	mov	r0, r2
 8012f1c:	f7ff fe6a 	bl	8012bf4 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	4618      	mov	r0, r3
 8012f24:	370c      	adds	r7, #12
 8012f26:	46bd      	mov	sp, r7
 8012f28:	bd90      	pop	{r4, r7, pc}
 8012f2a:	bf00      	nop
 8012f2c:	0802f024 	.word	0x0802f024

08012f30 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8012f30:	b580      	push	{r7, lr}
 8012f32:	b086      	sub	sp, #24
 8012f34:	af02      	add	r7, sp, #8
 8012f36:	60f8      	str	r0, [r7, #12]
 8012f38:	60b9      	str	r1, [r7, #8]
 8012f3a:	607a      	str	r2, [r7, #4]
 8012f3c:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8012f3e:	68f8      	ldr	r0, [r7, #12]
 8012f40:	8bbb      	ldrh	r3, [r7, #28]
 8012f42:	9301      	str	r3, [sp, #4]
 8012f44:	8b3b      	ldrh	r3, [r7, #24]
 8012f46:	9300      	str	r3, [sp, #0]
 8012f48:	683b      	ldr	r3, [r7, #0]
 8012f4a:	687a      	ldr	r2, [r7, #4]
 8012f4c:	68b9      	ldr	r1, [r7, #8]
 8012f4e:	f7ff fd6f 	bl	8012a30 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8012f52:	4a04      	ldr	r2, [pc, #16]	@ (8012f64 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8012f54:	68fb      	ldr	r3, [r7, #12]
 8012f56:	601a      	str	r2, [r3, #0]
    }
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	3710      	adds	r7, #16
 8012f5e:	46bd      	mov	sp, r7
 8012f60:	bd80      	pop	{r7, pc}
 8012f62:	bf00      	nop
 8012f64:	0802f244 	.word	0x0802f244

08012f68 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8012f68:	b580      	push	{r7, lr}
 8012f6a:	b086      	sub	sp, #24
 8012f6c:	af02      	add	r7, sp, #8
 8012f6e:	60f8      	str	r0, [r7, #12]
 8012f70:	60b9      	str	r1, [r7, #8]
 8012f72:	607a      	str	r2, [r7, #4]
 8012f74:	603b      	str	r3, [r7, #0]
 8012f76:	68f8      	ldr	r0, [r7, #12]
 8012f78:	8bbb      	ldrh	r3, [r7, #28]
 8012f7a:	9301      	str	r3, [sp, #4]
 8012f7c:	8b3b      	ldrh	r3, [r7, #24]
 8012f7e:	9300      	str	r3, [sp, #0]
 8012f80:	683b      	ldr	r3, [r7, #0]
 8012f82:	687a      	ldr	r2, [r7, #4]
 8012f84:	68b9      	ldr	r1, [r7, #8]
 8012f86:	f7ff ffd3 	bl	8012f30 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8012f8a:	4a04      	ldr	r2, [pc, #16]	@ (8012f9c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8012f8c:	68fb      	ldr	r3, [r7, #12]
 8012f8e:	601a      	str	r2, [r3, #0]
    }
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	4618      	mov	r0, r3
 8012f94:	3710      	adds	r7, #16
 8012f96:	46bd      	mov	sp, r7
 8012f98:	bd80      	pop	{r7, pc}
 8012f9a:	bf00      	nop
 8012f9c:	0802eec4 	.word	0x0802eec4

08012fa0 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8012fa0:	b480      	push	{r7}
 8012fa2:	b083      	sub	sp, #12
 8012fa4:	af00      	add	r7, sp, #0
 8012fa6:	6078      	str	r0, [r7, #4]
 8012fa8:	4a04      	ldr	r2, [pc, #16]	@ (8012fbc <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	601a      	str	r2, [r3, #0]
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	4618      	mov	r0, r3
 8012fb2:	370c      	adds	r7, #12
 8012fb4:	46bd      	mov	sp, r7
 8012fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fba:	4770      	bx	lr
 8012fbc:	0802eeac 	.word	0x0802eeac

08012fc0 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8012fc0:	b580      	push	{r7, lr}
 8012fc2:	b082      	sub	sp, #8
 8012fc4:	af00      	add	r7, sp, #0
 8012fc6:	6078      	str	r0, [r7, #4]
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	4618      	mov	r0, r3
 8012fcc:	f7ff ffe8 	bl	8012fa0 <_ZN8touchgfx15TouchControllerC1Ev>
 8012fd0:	4a03      	ldr	r2, [pc, #12]	@ (8012fe0 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	601a      	str	r2, [r3, #0]
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	4618      	mov	r0, r3
 8012fda:	3708      	adds	r7, #8
 8012fdc:	46bd      	mov	sp, r7
 8012fde:	bd80      	pop	{r7, pc}
 8012fe0:	0802ee94 	.word	0x0802ee94

08012fe4 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 240, 296);

void touchgfx_init()
{
 8012fe4:	b590      	push	{r4, r7, lr}
 8012fe6:	b085      	sub	sp, #20
 8012fe8:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8012fea:	f7fd fe95 	bl	8010d18 <_ZN14BitmapDatabase11getInstanceEv>
 8012fee:	4604      	mov	r4, r0
 8012ff0:	f7fd fe9c 	bl	8010d2c <_ZN14BitmapDatabase15getInstanceSizeEv>
 8012ff4:	4603      	mov	r3, r0
 8012ff6:	4619      	mov	r1, r3
 8012ff8:	2300      	movs	r3, #0
 8012ffa:	9300      	str	r3, [sp, #0]
 8012ffc:	2300      	movs	r3, #0
 8012ffe:	2200      	movs	r2, #0
 8013000:	4620      	mov	r0, r4
 8013002:	f009 fddd 	bl	801cbc0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 8013006:	480b      	ldr	r0, [pc, #44]	@ (8013034 <touchgfx_init+0x50>)
 8013008:	f7ff fc3e 	bl	8012888 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 801300c:	2000      	movs	r0, #0
 801300e:	f7fd ffb9 	bl	8010f84 <_ZN8touchgfx5Texts11setLanguageEt>

    display.setVectorFontRenderer(&vectorFontRenderer);
 8013012:	4909      	ldr	r1, [pc, #36]	@ (8013038 <touchgfx_init+0x54>)
 8013014:	4809      	ldr	r0, [pc, #36]	@ (801303c <touchgfx_init+0x58>)
 8013016:	f7ff fcc7 	bl	80129a8 <_ZN8touchgfx3LCD21setVectorFontRendererEPNS_18VectorFontRendererE>

    FontManager::setFontProvider(&fontProvider);
 801301a:	4809      	ldr	r0, [pc, #36]	@ (8013040 <touchgfx_init+0x5c>)
 801301c:	f009 fd38 	bl	801ca90 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8013020:	f7ff fedc 	bl	8012ddc <_ZN12FrontendHeap11getInstanceEv>
 8013024:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8013026:	4807      	ldr	r0, [pc, #28]	@ (8013044 <touchgfx_init+0x60>)
 8013028:	f7fe fd5e 	bl	8011ae8 <_ZN11TouchGFXHAL10initializeEv>
}
 801302c:	bf00      	nop
 801302e:	370c      	adds	r7, #12
 8013030:	46bd      	mov	sp, r7
 8013032:	bd90      	pop	{r4, r7, pc}
 8013034:	2005b928 	.word	0x2005b928
 8013038:	2005b90c 	.word	0x2005b90c
 801303c:	2005b880 	.word	0x2005b880
 8013040:	20000018 	.word	0x20000018
 8013044:	2005b92c 	.word	0x2005b92c

08013048 <touchgfx_components_init>:

void touchgfx_components_init()
{
 8013048:	b480      	push	{r7}
 801304a:	af00      	add	r7, sp, #0
}
 801304c:	bf00      	nop
 801304e:	46bd      	mov	sp, r7
 8013050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013054:	4770      	bx	lr
	...

08013058 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8013058:	b580      	push	{r7, lr}
 801305a:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 801305c:	4802      	ldr	r0, [pc, #8]	@ (8013068 <touchgfx_taskEntry+0x10>)
 801305e:	f001 fecc 	bl	8014dfa <_ZN8touchgfx3HAL9taskEntryEv>
}
 8013062:	bf00      	nop
 8013064:	bd80      	pop	{r7, pc}
 8013066:	bf00      	nop
 8013068:	2005b92c 	.word	0x2005b92c

0801306c <_Z41__static_initialization_and_destruction_0v>:
 801306c:	b580      	push	{r7, lr}
 801306e:	b082      	sub	sp, #8
 8013070:	af02      	add	r7, sp, #8
static STM32TouchController tc;
 8013072:	480d      	ldr	r0, [pc, #52]	@ (80130a8 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 8013074:	f7ff ffa4 	bl	8012fc0 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 8013078:	480c      	ldr	r0, [pc, #48]	@ (80130ac <_Z41__static_initialization_and_destruction_0v+0x40>)
 801307a:	f7ff f807 	bl	801208c <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 801307e:	480c      	ldr	r0, [pc, #48]	@ (80130b0 <_Z41__static_initialization_and_destruction_0v+0x44>)
 8013080:	f00e fe9e 	bl	8021dc0 <_ZN8touchgfx8LCD16bppC1Ev>
static VectorFontRendererImpl vectorFontRenderer;
 8013084:	480b      	ldr	r0, [pc, #44]	@ (80130b4 <_Z41__static_initialization_and_destruction_0v+0x48>)
 8013086:	f007 fe21 	bl	801accc <_ZN8touchgfx22VectorFontRendererImplC1Ev>
static TouchGFXHAL hal(dma, display, tc, 240, 296);
 801308a:	f44f 7394 	mov.w	r3, #296	@ 0x128
 801308e:	9301      	str	r3, [sp, #4]
 8013090:	23f0      	movs	r3, #240	@ 0xf0
 8013092:	9300      	str	r3, [sp, #0]
 8013094:	4b04      	ldr	r3, [pc, #16]	@ (80130a8 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 8013096:	4a06      	ldr	r2, [pc, #24]	@ (80130b0 <_Z41__static_initialization_and_destruction_0v+0x44>)
 8013098:	4904      	ldr	r1, [pc, #16]	@ (80130ac <_Z41__static_initialization_and_destruction_0v+0x40>)
 801309a:	4807      	ldr	r0, [pc, #28]	@ (80130b8 <_Z41__static_initialization_and_destruction_0v+0x4c>)
 801309c:	f7ff ff64 	bl	8012f68 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 80130a0:	bf00      	nop
 80130a2:	46bd      	mov	sp, r7
 80130a4:	bd80      	pop	{r7, pc}
 80130a6:	bf00      	nop
 80130a8:	2005aadc 	.word	0x2005aadc
 80130ac:	2005aae0 	.word	0x2005aae0
 80130b0:	2005b880 	.word	0x2005b880
 80130b4:	2005b90c 	.word	0x2005b90c
 80130b8:	2005b92c 	.word	0x2005b92c

080130bc <_ZN8touchgfx22VectorFontRendererImplD1Ev>:
namespace touchgfx
{
/**
 * Implementation of the VectorFontRenderer interface
 */
class VectorFontRendererImpl : public VectorFontRenderer
 80130bc:	b580      	push	{r7, lr}
 80130be:	b082      	sub	sp, #8
 80130c0:	af00      	add	r7, sp, #0
 80130c2:	6078      	str	r0, [r7, #4]
 80130c4:	4a05      	ldr	r2, [pc, #20]	@ (80130dc <_ZN8touchgfx22VectorFontRendererImplD1Ev+0x20>)
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	601a      	str	r2, [r3, #0]
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	4618      	mov	r0, r3
 80130ce:	f7ff fc2b 	bl	8012928 <_ZN8touchgfx18VectorFontRendererD1Ev>
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	4618      	mov	r0, r3
 80130d6:	3708      	adds	r7, #8
 80130d8:	46bd      	mov	sp, r7
 80130da:	bd80      	pop	{r7, pc}
 80130dc:	0802fb38 	.word	0x0802fb38

080130e0 <_ZN8touchgfx22VectorFontRendererImplD0Ev>:
 80130e0:	b580      	push	{r7, lr}
 80130e2:	b082      	sub	sp, #8
 80130e4:	af00      	add	r7, sp, #0
 80130e6:	6078      	str	r0, [r7, #4]
 80130e8:	6878      	ldr	r0, [r7, #4]
 80130ea:	f7ff ffe7 	bl	80130bc <_ZN8touchgfx22VectorFontRendererImplD1Ev>
 80130ee:	211c      	movs	r1, #28
 80130f0:	6878      	ldr	r0, [r7, #4]
 80130f2:	f018 fdca 	bl	802bc8a <_ZdlPvj>
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	4618      	mov	r0, r3
 80130fa:	3708      	adds	r7, #8
 80130fc:	46bd      	mov	sp, r7
 80130fe:	bd80      	pop	{r7, pc}

08013100 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 8013100:	b580      	push	{r7, lr}
 8013102:	b082      	sub	sp, #8
 8013104:	af00      	add	r7, sp, #0
 8013106:	6078      	str	r0, [r7, #4]
 8013108:	4a05      	ldr	r2, [pc, #20]	@ (8013120 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	601a      	str	r2, [r3, #0]
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	4618      	mov	r0, r3
 8013112:	f7ff fc29 	bl	8012968 <_ZN8touchgfx3LCDD1Ev>
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	4618      	mov	r0, r3
 801311a:	3708      	adds	r7, #8
 801311c:	46bd      	mov	sp, r7
 801311e:	bd80      	pop	{r7, pc}
 8013120:	0802fec0 	.word	0x0802fec0

08013124 <_ZN8touchgfx8LCD16bppD0Ev>:
 8013124:	b580      	push	{r7, lr}
 8013126:	b082      	sub	sp, #8
 8013128:	af00      	add	r7, sp, #0
 801312a:	6078      	str	r0, [r7, #4]
 801312c:	6878      	ldr	r0, [r7, #4]
 801312e:	f7ff ffe7 	bl	8013100 <_ZN8touchgfx8LCD16bppD1Ev>
 8013132:	218c      	movs	r1, #140	@ 0x8c
 8013134:	6878      	ldr	r0, [r7, #4]
 8013136:	f018 fda8 	bl	802bc8a <_ZdlPvj>
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	4618      	mov	r0, r3
 801313e:	3708      	adds	r7, #8
 8013140:	46bd      	mov	sp, r7
 8013142:	bd80      	pop	{r7, pc}

08013144 <_Z41__static_initialization_and_destruction_1v>:
 8013144:	b580      	push	{r7, lr}
 8013146:	af00      	add	r7, sp, #0
static TouchGFXHAL hal(dma, display, tc, 240, 296);
 8013148:	4809      	ldr	r0, [pc, #36]	@ (8013170 <_Z41__static_initialization_and_destruction_1v+0x2c>)
 801314a:	f7fe fdbb 	bl	8011cc4 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 801314e:	4809      	ldr	r0, [pc, #36]	@ (8013174 <_Z41__static_initialization_and_destruction_1v+0x30>)
 8013150:	f7fc f8e2 	bl	800f318 <_ZN23ApplicationFontProviderD1Ev>
static VectorFontRendererImpl vectorFontRenderer;
 8013154:	4808      	ldr	r0, [pc, #32]	@ (8013178 <_Z41__static_initialization_and_destruction_1v+0x34>)
 8013156:	f7ff ffb1 	bl	80130bc <_ZN8touchgfx22VectorFontRendererImplD1Ev>
static LCD16bpp display;
 801315a:	4808      	ldr	r0, [pc, #32]	@ (801317c <_Z41__static_initialization_and_destruction_1v+0x38>)
 801315c:	f7ff ffd0 	bl	8013100 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 8013160:	4807      	ldr	r0, [pc, #28]	@ (8013180 <_Z41__static_initialization_and_destruction_1v+0x3c>)
 8013162:	f7fe ffbd 	bl	80120e0 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 8013166:	4807      	ldr	r0, [pc, #28]	@ (8013184 <_Z41__static_initialization_and_destruction_1v+0x40>)
 8013168:	f7fe fa48 	bl	80115fc <_ZN20STM32TouchControllerD1Ev>
}
 801316c:	bf00      	nop
 801316e:	bd80      	pop	{r7, pc}
 8013170:	2005b92c 	.word	0x2005b92c
 8013174:	20000018 	.word	0x20000018
 8013178:	2005b90c 	.word	0x2005b90c
 801317c:	2005b880 	.word	0x2005b880
 8013180:	2005aae0 	.word	0x2005aae0
 8013184:	2005aadc 	.word	0x2005aadc

08013188 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8013188:	b480      	push	{r7}
 801318a:	b083      	sub	sp, #12
 801318c:	af00      	add	r7, sp, #0
 801318e:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8013190:	2301      	movs	r3, #1
    }
 8013192:	4618      	mov	r0, r3
 8013194:	370c      	adds	r7, #12
 8013196:	46bd      	mov	sp, r7
 8013198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801319c:	4770      	bx	lr

0801319e <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 801319e:	b480      	push	{r7}
 80131a0:	b083      	sub	sp, #12
 80131a2:	af00      	add	r7, sp, #0
 80131a4:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 80131a6:	230c      	movs	r3, #12
    }
 80131a8:	4618      	mov	r0, r3
 80131aa:	370c      	adds	r7, #12
 80131ac:	46bd      	mov	sp, r7
 80131ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131b2:	4770      	bx	lr

080131b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 80131b4:	b480      	push	{r7}
 80131b6:	b083      	sub	sp, #12
 80131b8:	af00      	add	r7, sp, #0
 80131ba:	6078      	str	r0, [r7, #4]
 80131bc:	460b      	mov	r3, r1
 80131be:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80131c0:	887a      	ldrh	r2, [r7, #2]
 80131c2:	4613      	mov	r3, r2
 80131c4:	005b      	lsls	r3, r3, #1
 80131c6:	4413      	add	r3, r2
 80131c8:	009b      	lsls	r3, r3, #2
 80131ca:	3308      	adds	r3, #8
 80131cc:	687a      	ldr	r2, [r7, #4]
 80131ce:	4413      	add	r3, r2
    }
 80131d0:	4618      	mov	r0, r3
 80131d2:	370c      	adds	r7, #12
 80131d4:	46bd      	mov	sp, r7
 80131d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131da:	4770      	bx	lr

080131dc <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 80131dc:	b480      	push	{r7}
 80131de:	b083      	sub	sp, #12
 80131e0:	af00      	add	r7, sp, #0
 80131e2:	6078      	str	r0, [r7, #4]
 80131e4:	460b      	mov	r3, r1
 80131e6:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80131e8:	887a      	ldrh	r2, [r7, #2]
 80131ea:	4613      	mov	r3, r2
 80131ec:	005b      	lsls	r3, r3, #1
 80131ee:	4413      	add	r3, r2
 80131f0:	009b      	lsls	r3, r3, #2
 80131f2:	3308      	adds	r3, #8
 80131f4:	687a      	ldr	r2, [r7, #4]
 80131f6:	4413      	add	r3, r2
    }
 80131f8:	4618      	mov	r0, r3
 80131fa:	370c      	adds	r7, #12
 80131fc:	46bd      	mov	sp, r7
 80131fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013202:	4770      	bx	lr

08013204 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8013204:	b480      	push	{r7}
 8013206:	b083      	sub	sp, #12
 8013208:	af00      	add	r7, sp, #0
 801320a:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 801320c:	2301      	movs	r3, #1
    }
 801320e:	4618      	mov	r0, r3
 8013210:	370c      	adds	r7, #12
 8013212:	46bd      	mov	sp, r7
 8013214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013218:	4770      	bx	lr

0801321a <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 801321a:	b480      	push	{r7}
 801321c:	b083      	sub	sp, #12
 801321e:	af00      	add	r7, sp, #0
 8013220:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8013222:	f44f 7305 	mov.w	r3, #532	@ 0x214
    }
 8013226:	4618      	mov	r0, r3
 8013228:	370c      	adds	r7, #12
 801322a:	46bd      	mov	sp, r7
 801322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013230:	4770      	bx	lr

08013232 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8013232:	b480      	push	{r7}
 8013234:	b083      	sub	sp, #12
 8013236:	af00      	add	r7, sp, #0
 8013238:	6078      	str	r0, [r7, #4]
 801323a:	460b      	mov	r3, r1
 801323c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801323e:	887b      	ldrh	r3, [r7, #2]
 8013240:	f44f 7205 	mov.w	r2, #532	@ 0x214
 8013244:	fb02 f303 	mul.w	r3, r2, r3
 8013248:	3308      	adds	r3, #8
 801324a:	687a      	ldr	r2, [r7, #4]
 801324c:	4413      	add	r3, r2
    }
 801324e:	4618      	mov	r0, r3
 8013250:	370c      	adds	r7, #12
 8013252:	46bd      	mov	sp, r7
 8013254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013258:	4770      	bx	lr

0801325a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 801325a:	b480      	push	{r7}
 801325c:	b083      	sub	sp, #12
 801325e:	af00      	add	r7, sp, #0
 8013260:	6078      	str	r0, [r7, #4]
 8013262:	460b      	mov	r3, r1
 8013264:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8013266:	887b      	ldrh	r3, [r7, #2]
 8013268:	f44f 7205 	mov.w	r2, #532	@ 0x214
 801326c:	fb02 f303 	mul.w	r3, r2, r3
 8013270:	3308      	adds	r3, #8
 8013272:	687a      	ldr	r2, [r7, #4]
 8013274:	4413      	add	r3, r2
    }
 8013276:	4618      	mov	r0, r3
 8013278:	370c      	adds	r7, #12
 801327a:	46bd      	mov	sp, r7
 801327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013280:	4770      	bx	lr

08013282 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8013282:	b480      	push	{r7}
 8013284:	b083      	sub	sp, #12
 8013286:	af00      	add	r7, sp, #0
 8013288:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 801328a:	2301      	movs	r3, #1
    }
 801328c:	4618      	mov	r0, r3
 801328e:	370c      	adds	r7, #12
 8013290:	46bd      	mov	sp, r7
 8013292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013296:	4770      	bx	lr

08013298 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8013298:	b480      	push	{r7}
 801329a:	b083      	sub	sp, #12
 801329c:	af00      	add	r7, sp, #0
 801329e:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80132a0:	2310      	movs	r3, #16
    }
 80132a2:	4618      	mov	r0, r3
 80132a4:	370c      	adds	r7, #12
 80132a6:	46bd      	mov	sp, r7
 80132a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ac:	4770      	bx	lr

080132ae <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80132ae:	b480      	push	{r7}
 80132b0:	b083      	sub	sp, #12
 80132b2:	af00      	add	r7, sp, #0
 80132b4:	6078      	str	r0, [r7, #4]
 80132b6:	460b      	mov	r3, r1
 80132b8:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80132ba:	887b      	ldrh	r3, [r7, #2]
 80132bc:	011b      	lsls	r3, r3, #4
 80132be:	3308      	adds	r3, #8
 80132c0:	687a      	ldr	r2, [r7, #4]
 80132c2:	4413      	add	r3, r2
    }
 80132c4:	4618      	mov	r0, r3
 80132c6:	370c      	adds	r7, #12
 80132c8:	46bd      	mov	sp, r7
 80132ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ce:	4770      	bx	lr

080132d0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80132d0:	b480      	push	{r7}
 80132d2:	b083      	sub	sp, #12
 80132d4:	af00      	add	r7, sp, #0
 80132d6:	6078      	str	r0, [r7, #4]
 80132d8:	460b      	mov	r3, r1
 80132da:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80132dc:	887b      	ldrh	r3, [r7, #2]
 80132de:	011b      	lsls	r3, r3, #4
 80132e0:	3308      	adds	r3, #8
 80132e2:	687a      	ldr	r2, [r7, #4]
 80132e4:	4413      	add	r3, r2
    }
 80132e6:	4618      	mov	r0, r3
 80132e8:	370c      	adds	r7, #12
 80132ea:	46bd      	mov	sp, r7
 80132ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132f0:	4770      	bx	lr

080132f2 <_GLOBAL__sub_I_touchgfx_init>:
 80132f2:	b580      	push	{r7, lr}
 80132f4:	af00      	add	r7, sp, #0
 80132f6:	f7ff feb9 	bl	801306c <_Z41__static_initialization_and_destruction_0v>
 80132fa:	bd80      	pop	{r7, pc}

080132fc <_GLOBAL__sub_D_touchgfx_init>:
 80132fc:	b580      	push	{r7, lr}
 80132fe:	af00      	add	r7, sp, #0
 8013300:	f7ff ff20 	bl	8013144 <_Z41__static_initialization_and_destruction_1v>
 8013304:	bd80      	pop	{r7, pc}

08013306 <_ZN8touchgfx4RectC1Essss>:
     * @param  rectX      The x coordinate.
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
 8013306:	b480      	push	{r7}
 8013308:	b085      	sub	sp, #20
 801330a:	af00      	add	r7, sp, #0
 801330c:	60f8      	str	r0, [r7, #12]
 801330e:	4608      	mov	r0, r1
 8013310:	4611      	mov	r1, r2
 8013312:	461a      	mov	r2, r3
 8013314:	4603      	mov	r3, r0
 8013316:	817b      	strh	r3, [r7, #10]
 8013318:	460b      	mov	r3, r1
 801331a:	813b      	strh	r3, [r7, #8]
 801331c:	4613      	mov	r3, r2
 801331e:	80fb      	strh	r3, [r7, #6]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	897a      	ldrh	r2, [r7, #10]
 8013324:	801a      	strh	r2, [r3, #0]
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	893a      	ldrh	r2, [r7, #8]
 801332a:	805a      	strh	r2, [r3, #2]
 801332c:	68fb      	ldr	r3, [r7, #12]
 801332e:	88fa      	ldrh	r2, [r7, #6]
 8013330:	809a      	strh	r2, [r3, #4]
 8013332:	68fb      	ldr	r3, [r7, #12]
 8013334:	8b3a      	ldrh	r2, [r7, #24]
 8013336:	80da      	strh	r2, [r3, #6]
    {
    }
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	4618      	mov	r0, r3
 801333c:	3714      	adds	r7, #20
 801333e:	46bd      	mov	sp, r7
 8013340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013344:	4770      	bx	lr

08013346 <_ZNK8touchgfx8Drawable8getWidthEv>:
    int16_t getWidth() const
 8013346:	b480      	push	{r7}
 8013348:	b083      	sub	sp, #12
 801334a:	af00      	add	r7, sp, #0
 801334c:	6078      	str	r0, [r7, #4]
        return rect.width;
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 8013354:	4618      	mov	r0, r3
 8013356:	370c      	adds	r7, #12
 8013358:	46bd      	mov	sp, r7
 801335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801335e:	4770      	bx	lr

08013360 <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 8013360:	b480      	push	{r7}
 8013362:	b083      	sub	sp, #12
 8013364:	af00      	add	r7, sp, #0
 8013366:	6078      	str	r0, [r7, #4]
        return rect.height;
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 801336e:	4618      	mov	r0, r3
 8013370:	370c      	adds	r7, #12
 8013372:	46bd      	mov	sp, r7
 8013374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013378:	4770      	bx	lr
	...

0801337c <_ZN8touchgfx14VectorRendererD1Ev>:
 */
class VectorRenderer
{
public:
    /** Virtual destructor. */
    virtual ~VectorRenderer()
 801337c:	b480      	push	{r7}
 801337e:	b083      	sub	sp, #12
 8013380:	af00      	add	r7, sp, #0
 8013382:	6078      	str	r0, [r7, #4]
    {
 8013384:	4a04      	ldr	r2, [pc, #16]	@ (8013398 <_ZN8touchgfx14VectorRendererD1Ev+0x1c>)
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	601a      	str	r2, [r3, #0]
    }
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	4618      	mov	r0, r3
 801338e:	370c      	adds	r7, #12
 8013390:	46bd      	mov	sp, r7
 8013392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013396:	4770      	bx	lr
 8013398:	0802f330 	.word	0x0802f330

0801339c <_ZN8touchgfx14VectorRendererD0Ev>:
    virtual ~VectorRenderer()
 801339c:	b580      	push	{r7, lr}
 801339e:	b082      	sub	sp, #8
 80133a0:	af00      	add	r7, sp, #0
 80133a2:	6078      	str	r0, [r7, #4]
    }
 80133a4:	6878      	ldr	r0, [r7, #4]
 80133a6:	f7ff ffe9 	bl	801337c <_ZN8touchgfx14VectorRendererD1Ev>
 80133aa:	2104      	movs	r1, #4
 80133ac:	6878      	ldr	r0, [r7, #4]
 80133ae:	f018 fc6c 	bl	802bc8a <_ZdlPvj>
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	4618      	mov	r0, r3
 80133b6:	3708      	adds	r7, #8
 80133b8:	46bd      	mov	sp, r7
 80133ba:	bd80      	pop	{r7, pc}

080133bc <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>:
    LCD* getAuxiliaryLCD()
 80133bc:	b480      	push	{r7}
 80133be:	b083      	sub	sp, #12
 80133c0:	af00      	add	r7, sp, #0
 80133c2:	6078      	str	r0, [r7, #4]
        return auxiliaryLCD;
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    }
 80133c8:	4618      	mov	r0, r3
 80133ca:	370c      	adds	r7, #12
 80133cc:	46bd      	mov	sp, r7
 80133ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133d2:	4770      	bx	lr

080133d4 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE>:
    /**
     * Constructor.
     *
     * @param  color (Optional) The color to use in the painter.
     */
    AbstractPainterColor(colortype color = 0)
 80133d4:	b580      	push	{r7, lr}
 80133d6:	b082      	sub	sp, #8
 80133d8:	af00      	add	r7, sp, #0
 80133da:	6078      	str	r0, [r7, #4]
 80133dc:	6039      	str	r1, [r7, #0]
    {
 80133de:	4a08      	ldr	r2, [pc, #32]	@ (8013400 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE+0x2c>)
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	601a      	str	r2, [r3, #0]
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	3304      	adds	r3, #4
 80133e8:	4618      	mov	r0, r3
 80133ea:	f7fe fd5d 	bl	8011ea8 <_ZN8touchgfx9colortypeC1Ev>
        setColor(color);
 80133ee:	6839      	ldr	r1, [r7, #0]
 80133f0:	6878      	ldr	r0, [r7, #4]
 80133f2:	f000 f827 	bl	8013444 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>
    }
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	4618      	mov	r0, r3
 80133fa:	3708      	adds	r7, #8
 80133fc:	46bd      	mov	sp, r7
 80133fe:	bd80      	pop	{r7, pc}
 8013400:	0802f230 	.word	0x0802f230

08013404 <_ZN8touchgfx20AbstractPainterColorD1Ev>:

    /** Destructor */
    virtual ~AbstractPainterColor()
 8013404:	b480      	push	{r7}
 8013406:	b083      	sub	sp, #12
 8013408:	af00      	add	r7, sp, #0
 801340a:	6078      	str	r0, [r7, #4]
    {
 801340c:	4a04      	ldr	r2, [pc, #16]	@ (8013420 <_ZN8touchgfx20AbstractPainterColorD1Ev+0x1c>)
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	601a      	str	r2, [r3, #0]
    }
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	4618      	mov	r0, r3
 8013416:	370c      	adds	r7, #12
 8013418:	46bd      	mov	sp, r7
 801341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801341e:	4770      	bx	lr
 8013420:	0802f230 	.word	0x0802f230

08013424 <_ZN8touchgfx20AbstractPainterColorD0Ev>:
    virtual ~AbstractPainterColor()
 8013424:	b580      	push	{r7, lr}
 8013426:	b082      	sub	sp, #8
 8013428:	af00      	add	r7, sp, #0
 801342a:	6078      	str	r0, [r7, #4]
    }
 801342c:	6878      	ldr	r0, [r7, #4]
 801342e:	f7ff ffe9 	bl	8013404 <_ZN8touchgfx20AbstractPainterColorD1Ev>
 8013432:	2108      	movs	r1, #8
 8013434:	6878      	ldr	r0, [r7, #4]
 8013436:	f018 fc28 	bl	802bc8a <_ZdlPvj>
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	4618      	mov	r0, r3
 801343e:	3708      	adds	r7, #8
 8013440:	46bd      	mov	sp, r7
 8013442:	bd80      	pop	{r7, pc}

08013444 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>:
    /**
     * Sets color to use when drawing the CanvasWidget.
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
 8013444:	b480      	push	{r7}
 8013446:	b083      	sub	sp, #12
 8013448:	af00      	add	r7, sp, #0
 801344a:	6078      	str	r0, [r7, #4]
 801344c:	6039      	str	r1, [r7, #0]
    {
        painterColor = color;
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	683a      	ldr	r2, [r7, #0]
 8013452:	605a      	str	r2, [r3, #4]
    }
 8013454:	bf00      	nop
 8013456:	370c      	adds	r7, #12
 8013458:	46bd      	mov	sp, r7
 801345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801345e:	4770      	bx	lr

08013460 <_ZN8touchgfx15AbstractPainterC1Ev>:
 */
class AbstractPainter
{
public:
    /** Initializes a new instance of the AbstractPainter class. */
    AbstractPainter()
 8013460:	b480      	push	{r7}
 8013462:	b083      	sub	sp, #12
 8013464:	af00      	add	r7, sp, #0
 8013466:	6078      	str	r0, [r7, #4]
        : widgetWidth(0)
 8013468:	4a06      	ldr	r2, [pc, #24]	@ (8013484 <_ZN8touchgfx15AbstractPainterC1Ev+0x24>)
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	601a      	str	r2, [r3, #0]
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	2200      	movs	r2, #0
 8013472:	809a      	strh	r2, [r3, #4]
    {
    }
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	4618      	mov	r0, r3
 8013478:	370c      	adds	r7, #12
 801347a:	46bd      	mov	sp, r7
 801347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013480:	4770      	bx	lr
 8013482:	bf00      	nop
 8013484:	0802f210 	.word	0x0802f210

08013488 <_ZN8touchgfx15AbstractPainterD1Ev>:

    /** Finalizes an instance of the AbstractPainter class. */
    virtual ~AbstractPainter()
 8013488:	b480      	push	{r7}
 801348a:	b083      	sub	sp, #12
 801348c:	af00      	add	r7, sp, #0
 801348e:	6078      	str	r0, [r7, #4]
    {
 8013490:	4a04      	ldr	r2, [pc, #16]	@ (80134a4 <_ZN8touchgfx15AbstractPainterD1Ev+0x1c>)
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	601a      	str	r2, [r3, #0]
    }
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	4618      	mov	r0, r3
 801349a:	370c      	adds	r7, #12
 801349c:	46bd      	mov	sp, r7
 801349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134a2:	4770      	bx	lr
 80134a4:	0802f210 	.word	0x0802f210

080134a8 <_ZN8touchgfx15AbstractPainterD0Ev>:
    virtual ~AbstractPainter()
 80134a8:	b580      	push	{r7, lr}
 80134aa:	b082      	sub	sp, #8
 80134ac:	af00      	add	r7, sp, #0
 80134ae:	6078      	str	r0, [r7, #4]
    }
 80134b0:	6878      	ldr	r0, [r7, #4]
 80134b2:	f7ff ffe9 	bl	8013488 <_ZN8touchgfx15AbstractPainterD1Ev>
 80134b6:	2108      	movs	r1, #8
 80134b8:	6878      	ldr	r0, [r7, #4]
 80134ba:	f018 fbe6 	bl	802bc8a <_ZdlPvj>
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	4618      	mov	r0, r3
 80134c2:	3708      	adds	r7, #8
 80134c4:	46bd      	mov	sp, r7
 80134c6:	bd80      	pop	{r7, pc}

080134c8 <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * HARDWARE if the painter uses hardware based drawing,
     * SOFTWARE otherwise. Relevant on platforms using DCACHE.
     *
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
 80134c8:	b480      	push	{r7}
 80134ca:	b083      	sub	sp, #12
 80134cc:	af00      	add	r7, sp, #0
 80134ce:	6078      	str	r0, [r7, #4]
    {
        return HAL::SOFTWARE;
 80134d0:	2300      	movs	r3, #0
    }
 80134d2:	4618      	mov	r0, r3
 80134d4:	370c      	adds	r7, #12
 80134d6:	46bd      	mov	sp, r7
 80134d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134dc:	4770      	bx	lr

080134de <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @return True if the painter is ready to paint, false otherwise.
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
 80134de:	b480      	push	{r7}
 80134e0:	b083      	sub	sp, #12
 80134e2:	af00      	add	r7, sp, #0
 80134e4:	6078      	str	r0, [r7, #4]
 80134e6:	6039      	str	r1, [r7, #0]
    {
        widgetWidth = widgetRect.width;
 80134e8:	683b      	ldr	r3, [r7, #0]
 80134ea:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	809a      	strh	r2, [r3, #4]
        return true;
 80134f2:	2301      	movs	r3, #1
    }
 80134f4:	4618      	mov	r0, r3
 80134f6:	370c      	adds	r7, #12
 80134f8:	46bd      	mov	sp, r7
 80134fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134fe:	4770      	bx	lr

08013500 <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * This function is called after all paint operation have finished. This allows the painter to
     * close down dma queues etc. This happens after the last scan line segment has been drawn.
     *
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
 8013500:	b480      	push	{r7}
 8013502:	b083      	sub	sp, #12
 8013504:	af00      	add	r7, sp, #0
 8013506:	6078      	str	r0, [r7, #4]
    {
        return;
 8013508:	bf00      	nop
    }
 801350a:	370c      	adds	r7, #12
 801350c:	46bd      	mov	sp, r7
 801350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013512:	4770      	bx	lr

08013514 <_ZN8touchgfx29AbstractPainterLinearGradientC1Ev>:
 */
class AbstractPainterLinearGradient : public AbstractPainter
{
public:
    /** Constructor. */
    AbstractPainterLinearGradient()
 8013514:	b580      	push	{r7, lr}
 8013516:	b082      	sub	sp, #8
 8013518:	af00      	add	r7, sp, #0
 801351a:	6078      	str	r0, [r7, #4]
        : AbstractPainter(),
          coord0(0), coord1(100), texture(0), isSolid(false), isVertical(false), isHorizontal(false), clSlope(0.0f), clOffset(0.0f), horizontalDistance(0.0f), deltaColor(0.0f)
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	4618      	mov	r0, r3
 8013520:	f7ff ff9e 	bl	8013460 <_ZN8touchgfx15AbstractPainterC1Ev>
 8013524:	4a14      	ldr	r2, [pc, #80]	@ (8013578 <_ZN8touchgfx29AbstractPainterLinearGradientC1Ev+0x64>)
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	601a      	str	r2, [r3, #0]
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	2200      	movs	r2, #0
 801352e:	811a      	strh	r2, [r3, #8]
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	2264      	movs	r2, #100	@ 0x64
 8013534:	815a      	strh	r2, [r3, #10]
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	2200      	movs	r2, #0
 801353a:	60da      	str	r2, [r3, #12]
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	2200      	movs	r2, #0
 8013540:	741a      	strb	r2, [r3, #16]
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	2200      	movs	r2, #0
 8013546:	745a      	strb	r2, [r3, #17]
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	2200      	movs	r2, #0
 801354c:	749a      	strb	r2, [r3, #18]
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	f04f 0200 	mov.w	r2, #0
 8013554:	615a      	str	r2, [r3, #20]
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	f04f 0200 	mov.w	r2, #0
 801355c:	619a      	str	r2, [r3, #24]
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	f04f 0200 	mov.w	r2, #0
 8013564:	61da      	str	r2, [r3, #28]
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	f04f 0200 	mov.w	r2, #0
 801356c:	621a      	str	r2, [r3, #32]
    {
    }
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	4618      	mov	r0, r3
 8013572:	3708      	adds	r7, #8
 8013574:	46bd      	mov	sp, r7
 8013576:	bd80      	pop	{r7, pc}
 8013578:	0802f1f0 	.word	0x0802f1f0

0801357c <_ZN8touchgfx29AbstractPainterLinearGradientD1Ev>:

    /** Destructor */
    virtual ~AbstractPainterLinearGradient()
 801357c:	b580      	push	{r7, lr}
 801357e:	b082      	sub	sp, #8
 8013580:	af00      	add	r7, sp, #0
 8013582:	6078      	str	r0, [r7, #4]
    {
 8013584:	4a05      	ldr	r2, [pc, #20]	@ (801359c <_ZN8touchgfx29AbstractPainterLinearGradientD1Ev+0x20>)
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	601a      	str	r2, [r3, #0]
    }
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	4618      	mov	r0, r3
 801358e:	f7ff ff7b 	bl	8013488 <_ZN8touchgfx15AbstractPainterD1Ev>
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	4618      	mov	r0, r3
 8013596:	3708      	adds	r7, #8
 8013598:	46bd      	mov	sp, r7
 801359a:	bd80      	pop	{r7, pc}
 801359c:	0802f1f0 	.word	0x0802f1f0

080135a0 <_ZN8touchgfx29AbstractPainterLinearGradientD0Ev>:
    virtual ~AbstractPainterLinearGradient()
 80135a0:	b580      	push	{r7, lr}
 80135a2:	b082      	sub	sp, #8
 80135a4:	af00      	add	r7, sp, #0
 80135a6:	6078      	str	r0, [r7, #4]
    }
 80135a8:	6878      	ldr	r0, [r7, #4]
 80135aa:	f7ff ffe7 	bl	801357c <_ZN8touchgfx29AbstractPainterLinearGradientD1Ev>
 80135ae:	2124      	movs	r1, #36	@ 0x24
 80135b0:	6878      	ldr	r0, [r7, #4]
 80135b2:	f018 fb6a 	bl	802bc8a <_ZdlPvj>
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	4618      	mov	r0, r3
 80135ba:	3708      	adds	r7, #8
 80135bc:	46bd      	mov	sp, r7
 80135be:	bd80      	pop	{r7, pc}

080135c0 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    {
        return canvasPainter;
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
 80135c0:	b480      	push	{r7}
 80135c2:	b083      	sub	sp, #12
 80135c4:	af00      	add	r7, sp, #0
 80135c6:	6078      	str	r0, [r7, #4]
 80135c8:	460b      	mov	r3, r1
 80135ca:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	78fa      	ldrb	r2, [r7, #3]
 80135d0:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    }
 80135d4:	bf00      	nop
 80135d6:	370c      	adds	r7, #12
 80135d8:	46bd      	mov	sp, r7
 80135da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135de:	4770      	bx	lr

080135e0 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
 80135e0:	b480      	push	{r7}
 80135e2:	b083      	sub	sp, #12
 80135e4:	af00      	add	r7, sp, #0
 80135e6:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
    }
 80135ee:	4618      	mov	r0, r3
 80135f0:	370c      	adds	r7, #12
 80135f2:	46bd      	mov	sp, r7
 80135f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135f8:	4770      	bx	lr

080135fa <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 80135fa:	b590      	push	{r4, r7, lr}
 80135fc:	b085      	sub	sp, #20
 80135fe:	af02      	add	r7, sp, #8
 8013600:	6078      	str	r0, [r7, #4]
 8013602:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, getWidth(), getHeight());
 8013604:	683b      	ldr	r3, [r7, #0]
 8013606:	4618      	mov	r0, r3
 8013608:	f7ff fe9d 	bl	8013346 <_ZNK8touchgfx8Drawable8getWidthEv>
 801360c:	4603      	mov	r3, r0
 801360e:	461c      	mov	r4, r3
 8013610:	683b      	ldr	r3, [r7, #0]
 8013612:	4618      	mov	r0, r3
 8013614:	f7ff fea4 	bl	8013360 <_ZNK8touchgfx8Drawable9getHeightEv>
 8013618:	4603      	mov	r3, r0
 801361a:	9300      	str	r3, [sp, #0]
 801361c:	4623      	mov	r3, r4
 801361e:	2200      	movs	r2, #0
 8013620:	2100      	movs	r1, #0
 8013622:	6878      	ldr	r0, [r7, #4]
 8013624:	f7ff fe6f 	bl	8013306 <_ZN8touchgfx4RectC1Essss>
    }
 8013628:	6878      	ldr	r0, [r7, #4]
 801362a:	370c      	adds	r7, #12
 801362c:	46bd      	mov	sp, r7
 801362e:	bd90      	pop	{r4, r7, pc}

08013630 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
     * @see draw
     *
     * @note Function draw() might fail for some horizontal lines due to memory constraints. These
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
 8013630:	b580      	push	{r7, lr}
 8013632:	b082      	sub	sp, #8
 8013634:	af00      	add	r7, sp, #0
 8013636:	6078      	str	r0, [r7, #4]
 8013638:	6039      	str	r1, [r7, #0]
    {
        return Rect();
 801363a:	6878      	ldr	r0, [r7, #4]
 801363c:	f7fc fec5 	bl	80103ca <_ZN8touchgfx4RectC1Ev>
    }
 8013640:	6878      	ldr	r0, [r7, #4]
 8013642:	3708      	adds	r7, #8
 8013644:	46bd      	mov	sp, r7
 8013646:	bd80      	pop	{r7, pc}

08013648 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>:
public:
    static const uint16_t RMASK = 0xF800; ///< Mask for red   (1111100000000000)
    static const uint16_t GMASK = 0x07E0; ///< Mask for green (0000011111100000)
    static const uint16_t BMASK = 0x001F; ///< Mask for blue  (0000000000011111)

    AbstractPainterRGB565()
 8013648:	b580      	push	{r7, lr}
 801364a:	b084      	sub	sp, #16
 801364c:	af00      	add	r7, sp, #0
 801364e:	6078      	str	r0, [r7, #4]
        : AbstractPainter()
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	4618      	mov	r0, r3
 8013654:	f7ff ff04 	bl	8013460 <_ZN8touchgfx15AbstractPainterC1Ev>
 8013658:	4a26      	ldr	r2, [pc, #152]	@ (80136f4 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xac>)
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	601a      	str	r2, [r3, #0]
 801365e:	2300      	movs	r3, #0
 8013660:	73fb      	strb	r3, [r7, #15]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8013662:	f7fc fa21 	bl	800faa8 <_ZN8touchgfx3HAL3lcdEv>
 8013666:	4603      	mov	r3, r0
 8013668:	681a      	ldr	r2, [r3, #0]
 801366a:	322c      	adds	r2, #44	@ 0x2c
 801366c:	6812      	ldr	r2, [r2, #0]
 801366e:	4618      	mov	r0, r3
 8013670:	4790      	blx	r2
 8013672:	4603      	mov	r3, r0
 8013674:	461a      	mov	r2, r3
 8013676:	7bfb      	ldrb	r3, [r7, #15]
 8013678:	4293      	cmp	r3, r2
 801367a:	bf0c      	ite	eq
 801367c:	2301      	moveq	r3, #1
 801367e:	2300      	movne	r3, #0
 8013680:	73bb      	strb	r3, [r7, #14]
        if (HAL::getInstance()->getAuxiliaryLCD())
 8013682:	f7fb ff57 	bl	800f534 <_ZN8touchgfx3HAL11getInstanceEv>
 8013686:	4603      	mov	r3, r0
 8013688:	4618      	mov	r0, r3
 801368a:	f7ff fe97 	bl	80133bc <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 801368e:	4603      	mov	r3, r0
 8013690:	2b00      	cmp	r3, #0
 8013692:	bf14      	ite	ne
 8013694:	2301      	movne	r3, #1
 8013696:	2300      	moveq	r3, #0
 8013698:	b2db      	uxtb	r3, r3
 801369a:	2b00      	cmp	r3, #0
 801369c:	d01b      	beq.n	80136d6 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x8e>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 801369e:	f7fb ff49 	bl	800f534 <_ZN8touchgfx3HAL11getInstanceEv>
 80136a2:	4603      	mov	r3, r0
 80136a4:	4618      	mov	r0, r3
 80136a6:	f7ff fe89 	bl	80133bc <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 80136aa:	4603      	mov	r3, r0
 80136ac:	681a      	ldr	r2, [r3, #0]
 80136ae:	322c      	adds	r2, #44	@ 0x2c
 80136b0:	6812      	ldr	r2, [r2, #0]
 80136b2:	4618      	mov	r0, r3
 80136b4:	4790      	blx	r2
 80136b6:	4603      	mov	r3, r0
 80136b8:	461a      	mov	r2, r3
 80136ba:	7bfb      	ldrb	r3, [r7, #15]
 80136bc:	4293      	cmp	r3, r2
 80136be:	bf0c      	ite	eq
 80136c0:	2301      	moveq	r3, #1
 80136c2:	2300      	movne	r3, #0
 80136c4:	b2da      	uxtb	r2, r3
 80136c6:	7bbb      	ldrb	r3, [r7, #14]
 80136c8:	4313      	orrs	r3, r2
 80136ca:	b2db      	uxtb	r3, r3
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	bf14      	ite	ne
 80136d0:	2301      	movne	r3, #1
 80136d2:	2300      	moveq	r3, #0
 80136d4:	73bb      	strb	r3, [r7, #14]
        }
        return compat;
 80136d6:	7bbb      	ldrb	r3, [r7, #14]
    {
        assert(compatibleFramebuffer(Bitmap::RGB565) && "The chosen painter only works with RGB565 displays");
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d105      	bne.n	80136e8 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xa0>
 80136dc:	4b06      	ldr	r3, [pc, #24]	@ (80136f8 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xb0>)
 80136de:	4a07      	ldr	r2, [pc, #28]	@ (80136fc <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xb4>)
 80136e0:	212c      	movs	r1, #44	@ 0x2c
 80136e2:	4807      	ldr	r0, [pc, #28]	@ (8013700 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xb8>)
 80136e4:	f019 f9c6 	bl	802ca74 <__assert_func>
    }
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	4618      	mov	r0, r3
 80136ec:	3710      	adds	r7, #16
 80136ee:	46bd      	mov	sp, r7
 80136f0:	bd80      	pop	{r7, pc}
 80136f2:	bf00      	nop
 80136f4:	0802f1d0 	.word	0x0802f1d0
 80136f8:	0802e7f8 	.word	0x0802e7f8
 80136fc:	0802e858 	.word	0x0802e858
 8013700:	0802e894 	.word	0x0802e894

08013704 <_ZN8touchgfx21AbstractPainterRGB565D1Ev>:
class AbstractPainterRGB565 : public AbstractPainter
 8013704:	b580      	push	{r7, lr}
 8013706:	b082      	sub	sp, #8
 8013708:	af00      	add	r7, sp, #0
 801370a:	6078      	str	r0, [r7, #4]
 801370c:	4a05      	ldr	r2, [pc, #20]	@ (8013724 <_ZN8touchgfx21AbstractPainterRGB565D1Ev+0x20>)
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	601a      	str	r2, [r3, #0]
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	4618      	mov	r0, r3
 8013716:	f7ff feb7 	bl	8013488 <_ZN8touchgfx15AbstractPainterD1Ev>
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	4618      	mov	r0, r3
 801371e:	3708      	adds	r7, #8
 8013720:	46bd      	mov	sp, r7
 8013722:	bd80      	pop	{r7, pc}
 8013724:	0802f1d0 	.word	0x0802f1d0

08013728 <_ZN8touchgfx21AbstractPainterRGB565D0Ev>:
 8013728:	b580      	push	{r7, lr}
 801372a:	b082      	sub	sp, #8
 801372c:	af00      	add	r7, sp, #0
 801372e:	6078      	str	r0, [r7, #4]
 8013730:	6878      	ldr	r0, [r7, #4]
 8013732:	f7ff ffe7 	bl	8013704 <_ZN8touchgfx21AbstractPainterRGB565D1Ev>
 8013736:	2108      	movs	r1, #8
 8013738:	6878      	ldr	r0, [r7, #4]
 801373a:	f018 faa6 	bl	802bc8a <_ZdlPvj>
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	4618      	mov	r0, r3
 8013742:	3708      	adds	r7, #8
 8013744:	46bd      	mov	sp, r7
 8013746:	bd80      	pop	{r7, pc}

08013748 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>:
    /**
     * Initializes a new instance of the PainterRGB565 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB565(colortype color = 0)
 8013748:	b580      	push	{r7, lr}
 801374a:	b082      	sub	sp, #8
 801374c:	af00      	add	r7, sp, #0
 801374e:	6078      	str	r0, [r7, #4]
 8013750:	6039      	str	r1, [r7, #0]
        : AbstractPainterRGB565(), AbstractPainterColor(color)
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	4618      	mov	r0, r3
 8013756:	f7ff ff77 	bl	8013648 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	3308      	adds	r3, #8
 801375e:	6839      	ldr	r1, [r7, #0]
 8013760:	4618      	mov	r0, r3
 8013762:	f7ff fe37 	bl	80133d4 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE>
 8013766:	4a05      	ldr	r2, [pc, #20]	@ (801377c <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE+0x34>)
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	601a      	str	r2, [r3, #0]
 801376c:	4a04      	ldr	r2, [pc, #16]	@ (8013780 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE+0x38>)
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	609a      	str	r2, [r3, #8]
    {
    }
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	4618      	mov	r0, r3
 8013776:	3708      	adds	r7, #8
 8013778:	46bd      	mov	sp, r7
 801377a:	bd80      	pop	{r7, pc}
 801377c:	0802f7ac 	.word	0x0802f7ac
 8013780:	0802f7d0 	.word	0x0802f7d0

08013784 <_ZN8touchgfx17CWRVectorRenderer7setModeENS_14VectorRenderer8DrawModeE>:
     *
     * The default mode is non-zero filling.
     *
     * @param mode The filling mode.
     */
    virtual void setMode(DrawMode mode)
 8013784:	b480      	push	{r7}
 8013786:	b083      	sub	sp, #12
 8013788:	af00      	add	r7, sp, #0
 801378a:	6078      	str	r0, [r7, #4]
 801378c:	460b      	mov	r3, r1
 801378e:	70fb      	strb	r3, [r7, #3]
    {
        drawMode = mode;
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	78fa      	ldrb	r2, [r7, #3]
 8013794:	771a      	strb	r2, [r3, #28]
    }
 8013796:	bf00      	nop
 8013798:	370c      	adds	r7, #12
 801379a:	46bd      	mov	sp, r7
 801379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137a0:	4770      	bx	lr

080137a2 <_ZN8touchgfx17CWRVectorRenderer19setStrokeMiterLimitEf>:

    virtual void setStrokeMiterLimit(float miterLimit)
 80137a2:	b480      	push	{r7}
 80137a4:	b083      	sub	sp, #12
 80137a6:	af00      	add	r7, sp, #0
 80137a8:	6078      	str	r0, [r7, #4]
 80137aa:	ed87 0a00 	vstr	s0, [r7]
    {
        strokeMiterLimit = miterLimit;
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	683a      	ldr	r2, [r7, #0]
 80137b2:	621a      	str	r2, [r3, #32]
    }
 80137b4:	bf00      	nop
 80137b6:	370c      	adds	r7, #12
 80137b8:	46bd      	mov	sp, r7
 80137ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137be:	4770      	bx	lr

080137c0 <_ZN8touchgfx17CWRVectorRenderer17setStrokeLineJoinENS_16VGStrokeLineJoinE>:

    virtual void setStrokeLineJoin(VGStrokeLineJoin lineJoin)
 80137c0:	b480      	push	{r7}
 80137c2:	b083      	sub	sp, #12
 80137c4:	af00      	add	r7, sp, #0
 80137c6:	6078      	str	r0, [r7, #4]
 80137c8:	460b      	mov	r3, r1
 80137ca:	70fb      	strb	r3, [r7, #3]
    {
        strokeLineJoin = lineJoin;
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	78fa      	ldrb	r2, [r7, #3]
 80137d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    }
 80137d4:	bf00      	nop
 80137d6:	370c      	adds	r7, #12
 80137d8:	46bd      	mov	sp, r7
 80137da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137de:	4770      	bx	lr

080137e0 <_ZN8touchgfx17CWRVectorRenderer16setStrokeLineCapENS_15VGStrokeLineCapE>:

    virtual void setStrokeLineCap(VGStrokeLineCap lineCap)
 80137e0:	b480      	push	{r7}
 80137e2:	b083      	sub	sp, #12
 80137e4:	af00      	add	r7, sp, #0
 80137e6:	6078      	str	r0, [r7, #4]
 80137e8:	460b      	mov	r3, r1
 80137ea:	70fb      	strb	r3, [r7, #3]
    {
        strokeLineCap = lineCap;
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	78fa      	ldrb	r2, [r7, #3]
 80137f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
 80137f4:	bf00      	nop
 80137f6:	370c      	adds	r7, #12
 80137f8:	46bd      	mov	sp, r7
 80137fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137fe:	4770      	bx	lr

08013800 <_ZNK8touchgfx17CWRVectorRenderer17CanvasWidgetProxy16drawCanvasWidgetERKNS_4RectE>:
    void drawStrokeBackwards(uint32_t cmdInxPathStart, uint32_t cmdInx, uint32_t pointInx, const uint8_t* cmds, const float* points, bool drawLineCaps, StrokeCanvas& canvas) const;
    void getPreviousDestination(float& positionX, float& positionY, uint32_t cmdInx, uint32_t pointInx, const uint8_t* cmds, const float* points) const;

    class CanvasWidgetProxy : public CanvasWidget
    {
        virtual bool drawCanvasWidget(const Rect& invalidatedArea) const
 8013800:	b480      	push	{r7}
 8013802:	b083      	sub	sp, #12
 8013804:	af00      	add	r7, sp, #0
 8013806:	6078      	str	r0, [r7, #4]
 8013808:	6039      	str	r1, [r7, #0]
        {
            return true;
 801380a:	2301      	movs	r3, #1
        }
 801380c:	4618      	mov	r0, r3
 801380e:	370c      	adds	r7, #12
 8013810:	46bd      	mov	sp, r7
 8013812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013816:	4770      	bx	lr

08013818 <_ZN8touchgfx23CWRVectorRendererRGB56516getLinearPainterEv>:
 * Implementation of the CWRVectorRendererInterface
 * for the RGB565 framebuffer format.
 */
class CWRVectorRendererRGB565 : public CWRVectorRenderer
{
    virtual AbstractPainterLinearGradient& getLinearPainter()
 8013818:	b480      	push	{r7}
 801381a:	b083      	sub	sp, #12
 801381c:	af00      	add	r7, sp, #0
 801381e:	6078      	str	r0, [r7, #4]
    {
        return linearPainter;
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	3398      	adds	r3, #152	@ 0x98
    }
 8013824:	4618      	mov	r0, r3
 8013826:	370c      	adds	r7, #12
 8013828:	46bd      	mov	sp, r7
 801382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801382e:	4770      	bx	lr

08013830 <_ZN8touchgfx23CWRVectorRendererRGB56520getColorPainterColorEv>:

    virtual AbstractPainterColor& getColorPainterColor()
 8013830:	b480      	push	{r7}
 8013832:	b083      	sub	sp, #12
 8013834:	af00      	add	r7, sp, #0
 8013836:	6078      	str	r0, [r7, #4]
    {
        return colorPainter;
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	338c      	adds	r3, #140	@ 0x8c
    }
 801383c:	4618      	mov	r0, r3
 801383e:	370c      	adds	r7, #12
 8013840:	46bd      	mov	sp, r7
 8013842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013846:	4770      	bx	lr

08013848 <_ZN8touchgfx23CWRVectorRendererRGB56515getColorPainterEv>:

    virtual AbstractPainter& getColorPainter()
 8013848:	b480      	push	{r7}
 801384a:	b083      	sub	sp, #12
 801384c:	af00      	add	r7, sp, #0
 801384e:	6078      	str	r0, [r7, #4]
    {
        return colorPainter;
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	3384      	adds	r3, #132	@ 0x84
    }
 8013854:	4618      	mov	r0, r3
 8013856:	370c      	adds	r7, #12
 8013858:	46bd      	mov	sp, r7
 801385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801385e:	4770      	bx	lr

08013860 <_ZN8touchgfx14VectorRendererC1Ev>:
class VectorRenderer
 8013860:	b480      	push	{r7}
 8013862:	b083      	sub	sp, #12
 8013864:	af00      	add	r7, sp, #0
 8013866:	6078      	str	r0, [r7, #4]
 8013868:	4a04      	ldr	r2, [pc, #16]	@ (801387c <_ZN8touchgfx14VectorRendererC1Ev+0x1c>)
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	601a      	str	r2, [r3, #0]
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	4618      	mov	r0, r3
 8013872:	370c      	adds	r7, #12
 8013874:	46bd      	mov	sp, r7
 8013876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801387a:	4770      	bx	lr
 801387c:	0802f330 	.word	0x0802f330

08013880 <_ZN8touchgfx12CanvasWidgetD1Ev>:
class CanvasWidget : public Widget
 8013880:	b580      	push	{r7, lr}
 8013882:	b082      	sub	sp, #8
 8013884:	af00      	add	r7, sp, #0
 8013886:	6078      	str	r0, [r7, #4]
 8013888:	4a05      	ldr	r2, [pc, #20]	@ (80138a0 <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	601a      	str	r2, [r3, #0]
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	4618      	mov	r0, r3
 8013892:	f7fd f829 	bl	80108e8 <_ZN8touchgfx6WidgetD1Ev>
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	4618      	mov	r0, r3
 801389a:	3708      	adds	r7, #8
 801389c:	46bd      	mov	sp, r7
 801389e:	bd80      	pop	{r7, pc}
 80138a0:	0802f844 	.word	0x0802f844

080138a4 <_ZN8touchgfx12CanvasWidgetD0Ev>:
 80138a4:	b580      	push	{r7, lr}
 80138a6:	b082      	sub	sp, #8
 80138a8:	af00      	add	r7, sp, #0
 80138aa:	6078      	str	r0, [r7, #4]
 80138ac:	6878      	ldr	r0, [r7, #4]
 80138ae:	f7ff ffe7 	bl	8013880 <_ZN8touchgfx12CanvasWidgetD1Ev>
 80138b2:	212c      	movs	r1, #44	@ 0x2c
 80138b4:	6878      	ldr	r0, [r7, #4]
 80138b6:	f018 f9e8 	bl	802bc8a <_ZdlPvj>
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	4618      	mov	r0, r3
 80138be:	3708      	adds	r7, #8
 80138c0:	46bd      	mov	sp, r7
 80138c2:	bd80      	pop	{r7, pc}

080138c4 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyC1Ev>:
    class CanvasWidgetProxy : public CanvasWidget
 80138c4:	b580      	push	{r7, lr}
 80138c6:	b082      	sub	sp, #8
 80138c8:	af00      	add	r7, sp, #0
 80138ca:	6078      	str	r0, [r7, #4]
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	4618      	mov	r0, r3
 80138d0:	f003 fdec 	bl	80174ac <_ZN8touchgfx12CanvasWidgetC1Ev>
 80138d4:	4a03      	ldr	r2, [pc, #12]	@ (80138e4 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyC1Ev+0x20>)
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	601a      	str	r2, [r3, #0]
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	4618      	mov	r0, r3
 80138de:	3708      	adds	r7, #8
 80138e0:	46bd      	mov	sp, r7
 80138e2:	bd80      	pop	{r7, pc}
 80138e4:	0802f158 	.word	0x0802f158

080138e8 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>:
 80138e8:	b580      	push	{r7, lr}
 80138ea:	b082      	sub	sp, #8
 80138ec:	af00      	add	r7, sp, #0
 80138ee:	6078      	str	r0, [r7, #4]
 80138f0:	4a05      	ldr	r2, [pc, #20]	@ (8013908 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev+0x20>)
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	601a      	str	r2, [r3, #0]
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	4618      	mov	r0, r3
 80138fa:	f7ff ffc1 	bl	8013880 <_ZN8touchgfx12CanvasWidgetD1Ev>
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	4618      	mov	r0, r3
 8013902:	3708      	adds	r7, #8
 8013904:	46bd      	mov	sp, r7
 8013906:	bd80      	pop	{r7, pc}
 8013908:	0802f158 	.word	0x0802f158

0801390c <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD0Ev>:
 801390c:	b580      	push	{r7, lr}
 801390e:	b082      	sub	sp, #8
 8013910:	af00      	add	r7, sp, #0
 8013912:	6078      	str	r0, [r7, #4]
 8013914:	6878      	ldr	r0, [r7, #4]
 8013916:	f7ff ffe7 	bl	80138e8 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>
 801391a:	212c      	movs	r1, #44	@ 0x2c
 801391c:	6878      	ldr	r0, [r7, #4]
 801391e:	f018 f9b4 	bl	802bc8a <_ZdlPvj>
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	4618      	mov	r0, r3
 8013926:	3708      	adds	r7, #8
 8013928:	46bd      	mov	sp, r7
 801392a:	bd80      	pop	{r7, pc}

0801392c <_ZN8touchgfx17CWRVectorRendererC1Ev>:
class CWRVectorRenderer : public VectorRenderer
 801392c:	b580      	push	{r7, lr}
 801392e:	b082      	sub	sp, #8
 8013930:	af00      	add	r7, sp, #0
 8013932:	6078      	str	r0, [r7, #4]
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	4618      	mov	r0, r3
 8013938:	f7ff ff92 	bl	8013860 <_ZN8touchgfx14VectorRendererC1Ev>
 801393c:	4a10      	ldr	r2, [pc, #64]	@ (8013980 <_ZN8touchgfx17CWRVectorRendererC1Ev+0x54>)
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	601a      	str	r2, [r3, #0]
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	3304      	adds	r3, #4
 8013946:	4618      	mov	r0, r3
 8013948:	f7fc fd3f 	bl	80103ca <_ZN8touchgfx4RectC1Ev>
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	330c      	adds	r3, #12
 8013950:	4618      	mov	r0, r3
 8013952:	f7fc fd3a 	bl	80103ca <_ZN8touchgfx4RectC1Ev>
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	3326      	adds	r3, #38	@ 0x26
 801395a:	4618      	mov	r0, r3
 801395c:	f7fc fd35 	bl	80103ca <_ZN8touchgfx4RectC1Ev>
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	3334      	adds	r3, #52	@ 0x34
 8013964:	4618      	mov	r0, r3
 8013966:	f007 fc96 	bl	801b296 <_ZN8touchgfx9Matrix3x3C1Ev>
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	3358      	adds	r3, #88	@ 0x58
 801396e:	4618      	mov	r0, r3
 8013970:	f7ff ffa8 	bl	80138c4 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyC1Ev>
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	4618      	mov	r0, r3
 8013978:	3708      	adds	r7, #8
 801397a:	46bd      	mov	sp, r7
 801397c:	bd80      	pop	{r7, pc}
 801397e:	bf00      	nop
 8013980:	0802f7f8 	.word	0x0802f7f8

08013984 <_ZN8touchgfx17CWRVectorRendererD1Ev>:
 8013984:	b580      	push	{r7, lr}
 8013986:	b082      	sub	sp, #8
 8013988:	af00      	add	r7, sp, #0
 801398a:	6078      	str	r0, [r7, #4]
 801398c:	4a08      	ldr	r2, [pc, #32]	@ (80139b0 <_ZN8touchgfx17CWRVectorRendererD1Ev+0x2c>)
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	601a      	str	r2, [r3, #0]
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	3358      	adds	r3, #88	@ 0x58
 8013996:	4618      	mov	r0, r3
 8013998:	f7ff ffa6 	bl	80138e8 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	4618      	mov	r0, r3
 80139a0:	f7ff fcec 	bl	801337c <_ZN8touchgfx14VectorRendererD1Ev>
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	4618      	mov	r0, r3
 80139a8:	3708      	adds	r7, #8
 80139aa:	46bd      	mov	sp, r7
 80139ac:	bd80      	pop	{r7, pc}
 80139ae:	bf00      	nop
 80139b0:	0802f7f8 	.word	0x0802f7f8

080139b4 <_ZN8touchgfx17CWRVectorRendererD0Ev>:
 80139b4:	b580      	push	{r7, lr}
 80139b6:	b082      	sub	sp, #8
 80139b8:	af00      	add	r7, sp, #0
 80139ba:	6078      	str	r0, [r7, #4]
 80139bc:	6878      	ldr	r0, [r7, #4]
 80139be:	f7ff ffe1 	bl	8013984 <_ZN8touchgfx17CWRVectorRendererD1Ev>
 80139c2:	2184      	movs	r1, #132	@ 0x84
 80139c4:	6878      	ldr	r0, [r7, #4]
 80139c6:	f018 f960 	bl	802bc8a <_ZdlPvj>
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	4618      	mov	r0, r3
 80139ce:	3708      	adds	r7, #8
 80139d0:	46bd      	mov	sp, r7
 80139d2:	bd80      	pop	{r7, pc}

080139d4 <_ZN8touchgfx13PainterRGB565D1Ev>:
class PainterRGB565 : public AbstractPainterRGB565, public AbstractPainterColor
 80139d4:	b580      	push	{r7, lr}
 80139d6:	b082      	sub	sp, #8
 80139d8:	af00      	add	r7, sp, #0
 80139da:	6078      	str	r0, [r7, #4]
 80139dc:	4a09      	ldr	r2, [pc, #36]	@ (8013a04 <_ZN8touchgfx13PainterRGB565D1Ev+0x30>)
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	601a      	str	r2, [r3, #0]
 80139e2:	4a09      	ldr	r2, [pc, #36]	@ (8013a08 <_ZN8touchgfx13PainterRGB565D1Ev+0x34>)
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	609a      	str	r2, [r3, #8]
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	3308      	adds	r3, #8
 80139ec:	4618      	mov	r0, r3
 80139ee:	f7ff fd09 	bl	8013404 <_ZN8touchgfx20AbstractPainterColorD1Ev>
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	4618      	mov	r0, r3
 80139f6:	f7ff fe85 	bl	8013704 <_ZN8touchgfx21AbstractPainterRGB565D1Ev>
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	4618      	mov	r0, r3
 80139fe:	3708      	adds	r7, #8
 8013a00:	46bd      	mov	sp, r7
 8013a02:	bd80      	pop	{r7, pc}
 8013a04:	0802f7ac 	.word	0x0802f7ac
 8013a08:	0802f7d0 	.word	0x0802f7d0

08013a0c <_ZThn8_N8touchgfx13PainterRGB565D1Ev>:
 8013a0c:	f1a0 0008 	sub.w	r0, r0, #8
 8013a10:	e7e0      	b.n	80139d4 <_ZN8touchgfx13PainterRGB565D1Ev>
 8013a12:	bf00      	nop

08013a14 <_ZN8touchgfx13PainterRGB565D0Ev>:
 8013a14:	b580      	push	{r7, lr}
 8013a16:	b082      	sub	sp, #8
 8013a18:	af00      	add	r7, sp, #0
 8013a1a:	6078      	str	r0, [r7, #4]
 8013a1c:	6878      	ldr	r0, [r7, #4]
 8013a1e:	f7ff ffd9 	bl	80139d4 <_ZN8touchgfx13PainterRGB565D1Ev>
 8013a22:	2114      	movs	r1, #20
 8013a24:	6878      	ldr	r0, [r7, #4]
 8013a26:	f018 f930 	bl	802bc8a <_ZdlPvj>
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	4618      	mov	r0, r3
 8013a2e:	3708      	adds	r7, #8
 8013a30:	46bd      	mov	sp, r7
 8013a32:	bd80      	pop	{r7, pc}

08013a34 <_ZThn8_N8touchgfx13PainterRGB565D0Ev>:
 8013a34:	f1a0 0008 	sub.w	r0, r0, #8
 8013a38:	e7ec      	b.n	8013a14 <_ZN8touchgfx13PainterRGB565D0Ev>
	...

08013a3c <_ZN8touchgfx27PainterRGB565LinearGradientC1Ev>:
 * An abstract class for creating painter classes for drawing canvas widgets. All canvas widgets
 * need a painter to fill the shape drawn with a CanvasWidgetRenderer. The painter must provide
 * the color of a pixel on a given coordinate, which will the be blended into the framebuffer
 * depending on the position of the canvas widget and the transparency of the given pixel.
 */
class PainterRGB565LinearGradient : public AbstractPainterLinearGradient
 8013a3c:	b580      	push	{r7, lr}
 8013a3e:	b082      	sub	sp, #8
 8013a40:	af00      	add	r7, sp, #0
 8013a42:	6078      	str	r0, [r7, #4]
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	4618      	mov	r0, r3
 8013a48:	f7ff fd64 	bl	8013514 <_ZN8touchgfx29AbstractPainterLinearGradientC1Ev>
 8013a4c:	4a03      	ldr	r2, [pc, #12]	@ (8013a5c <_ZN8touchgfx27PainterRGB565LinearGradientC1Ev+0x20>)
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	601a      	str	r2, [r3, #0]
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	4618      	mov	r0, r3
 8013a56:	3708      	adds	r7, #8
 8013a58:	46bd      	mov	sp, r7
 8013a5a:	bd80      	pop	{r7, pc}
 8013a5c:	0802f78c 	.word	0x0802f78c

08013a60 <_ZN8touchgfx27PainterRGB565LinearGradientD1Ev>:
 8013a60:	b580      	push	{r7, lr}
 8013a62:	b082      	sub	sp, #8
 8013a64:	af00      	add	r7, sp, #0
 8013a66:	6078      	str	r0, [r7, #4]
 8013a68:	4a05      	ldr	r2, [pc, #20]	@ (8013a80 <_ZN8touchgfx27PainterRGB565LinearGradientD1Ev+0x20>)
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	601a      	str	r2, [r3, #0]
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	4618      	mov	r0, r3
 8013a72:	f7ff fd83 	bl	801357c <_ZN8touchgfx29AbstractPainterLinearGradientD1Ev>
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	4618      	mov	r0, r3
 8013a7a:	3708      	adds	r7, #8
 8013a7c:	46bd      	mov	sp, r7
 8013a7e:	bd80      	pop	{r7, pc}
 8013a80:	0802f78c 	.word	0x0802f78c

08013a84 <_ZN8touchgfx27PainterRGB565LinearGradientD0Ev>:
 8013a84:	b580      	push	{r7, lr}
 8013a86:	b082      	sub	sp, #8
 8013a88:	af00      	add	r7, sp, #0
 8013a8a:	6078      	str	r0, [r7, #4]
 8013a8c:	6878      	ldr	r0, [r7, #4]
 8013a8e:	f7ff ffe7 	bl	8013a60 <_ZN8touchgfx27PainterRGB565LinearGradientD1Ev>
 8013a92:	2124      	movs	r1, #36	@ 0x24
 8013a94:	6878      	ldr	r0, [r7, #4]
 8013a96:	f018 f8f8 	bl	802bc8a <_ZdlPvj>
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	4618      	mov	r0, r3
 8013a9e:	3708      	adds	r7, #8
 8013aa0:	46bd      	mov	sp, r7
 8013aa2:	bd80      	pop	{r7, pc}

08013aa4 <_ZN8touchgfx23CWRVectorRendererRGB565C1Ev>:
class CWRVectorRendererRGB565 : public CWRVectorRenderer
 8013aa4:	b590      	push	{r4, r7, lr}
 8013aa6:	b085      	sub	sp, #20
 8013aa8:	af00      	add	r7, sp, #0
 8013aaa:	6078      	str	r0, [r7, #4]
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	4618      	mov	r0, r3
 8013ab0:	f7ff ff3c 	bl	801392c <_ZN8touchgfx17CWRVectorRendererC1Ev>
 8013ab4:	4a0c      	ldr	r2, [pc, #48]	@ (8013ae8 <_ZN8touchgfx23CWRVectorRendererRGB565C1Ev+0x44>)
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	601a      	str	r2, [r3, #0]
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	f103 0484 	add.w	r4, r3, #132	@ 0x84
 8013ac0:	f107 030c 	add.w	r3, r7, #12
 8013ac4:	2100      	movs	r1, #0
 8013ac6:	4618      	mov	r0, r3
 8013ac8:	f7fc fc70 	bl	80103ac <_ZN8touchgfx9colortypeC1Em>
 8013acc:	68f9      	ldr	r1, [r7, #12]
 8013ace:	4620      	mov	r0, r4
 8013ad0:	f7ff fe3a 	bl	8013748 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	3398      	adds	r3, #152	@ 0x98
 8013ad8:	4618      	mov	r0, r3
 8013ada:	f7ff ffaf 	bl	8013a3c <_ZN8touchgfx27PainterRGB565LinearGradientC1Ev>
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	4618      	mov	r0, r3
 8013ae2:	3714      	adds	r7, #20
 8013ae4:	46bd      	mov	sp, r7
 8013ae6:	bd90      	pop	{r4, r7, pc}
 8013ae8:	0802f10c 	.word	0x0802f10c

08013aec <_ZN8touchgfx23CWRVectorRendererRGB565D1Ev>:
 8013aec:	b580      	push	{r7, lr}
 8013aee:	b082      	sub	sp, #8
 8013af0:	af00      	add	r7, sp, #0
 8013af2:	6078      	str	r0, [r7, #4]
 8013af4:	4a0a      	ldr	r2, [pc, #40]	@ (8013b20 <_ZN8touchgfx23CWRVectorRendererRGB565D1Ev+0x34>)
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	601a      	str	r2, [r3, #0]
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	3398      	adds	r3, #152	@ 0x98
 8013afe:	4618      	mov	r0, r3
 8013b00:	f7ff ffae 	bl	8013a60 <_ZN8touchgfx27PainterRGB565LinearGradientD1Ev>
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	3384      	adds	r3, #132	@ 0x84
 8013b08:	4618      	mov	r0, r3
 8013b0a:	f7ff ff63 	bl	80139d4 <_ZN8touchgfx13PainterRGB565D1Ev>
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	4618      	mov	r0, r3
 8013b12:	f7ff ff37 	bl	8013984 <_ZN8touchgfx17CWRVectorRendererD1Ev>
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	4618      	mov	r0, r3
 8013b1a:	3708      	adds	r7, #8
 8013b1c:	46bd      	mov	sp, r7
 8013b1e:	bd80      	pop	{r7, pc}
 8013b20:	0802f10c 	.word	0x0802f10c

08013b24 <_ZN8touchgfx23CWRVectorRendererRGB565D0Ev>:
 8013b24:	b580      	push	{r7, lr}
 8013b26:	b082      	sub	sp, #8
 8013b28:	af00      	add	r7, sp, #0
 8013b2a:	6078      	str	r0, [r7, #4]
 8013b2c:	6878      	ldr	r0, [r7, #4]
 8013b2e:	f7ff ffdd 	bl	8013aec <_ZN8touchgfx23CWRVectorRendererRGB565D1Ev>
 8013b32:	21bc      	movs	r1, #188	@ 0xbc
 8013b34:	6878      	ldr	r0, [r7, #4]
 8013b36:	f018 f8a8 	bl	802bc8a <_ZdlPvj>
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	4618      	mov	r0, r3
 8013b3e:	3708      	adds	r7, #8
 8013b40:	46bd      	mov	sp, r7
 8013b42:	bd80      	pop	{r7, pc}

08013b44 <__tcf_1>:

namespace touchgfx
{
VectorRenderer* VectorRenderer::getInstance()
{
    static CWRVectorRendererRGB565 renderer;
 8013b44:	b580      	push	{r7, lr}
 8013b46:	af00      	add	r7, sp, #0
 8013b48:	4801      	ldr	r0, [pc, #4]	@ (8013b50 <__tcf_1+0xc>)
 8013b4a:	f7ff ffcf 	bl	8013aec <_ZN8touchgfx23CWRVectorRendererRGB565D1Ev>
 8013b4e:	bd80      	pop	{r7, pc}
 8013b50:	2005b9b0 	.word	0x2005b9b0

08013b54 <_ZN8touchgfx14VectorRenderer11getInstanceEv>:
{
 8013b54:	b580      	push	{r7, lr}
 8013b56:	af00      	add	r7, sp, #0
    static CWRVectorRendererRGB565 renderer;
 8013b58:	4b11      	ldr	r3, [pc, #68]	@ (8013ba0 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x4c>)
 8013b5a:	e8d3 3faf 	lda	r3, [r3]
 8013b5e:	f003 0301 	and.w	r3, r3, #1
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	bf0c      	ite	eq
 8013b66:	2301      	moveq	r3, #1
 8013b68:	2300      	movne	r3, #0
 8013b6a:	b2db      	uxtb	r3, r3
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d013      	beq.n	8013b98 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x44>
 8013b70:	480b      	ldr	r0, [pc, #44]	@ (8013ba0 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x4c>)
 8013b72:	f018 f88c 	bl	802bc8e <__cxa_guard_acquire>
 8013b76:	4603      	mov	r3, r0
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	bf14      	ite	ne
 8013b7c:	2301      	movne	r3, #1
 8013b7e:	2300      	moveq	r3, #0
 8013b80:	b2db      	uxtb	r3, r3
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d008      	beq.n	8013b98 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x44>
 8013b86:	4807      	ldr	r0, [pc, #28]	@ (8013ba4 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x50>)
 8013b88:	f7ff ff8c 	bl	8013aa4 <_ZN8touchgfx23CWRVectorRendererRGB565C1Ev>
 8013b8c:	4806      	ldr	r0, [pc, #24]	@ (8013ba8 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x54>)
 8013b8e:	f018 ff8f 	bl	802cab0 <atexit>
 8013b92:	4803      	ldr	r0, [pc, #12]	@ (8013ba0 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x4c>)
 8013b94:	f018 f887 	bl	802bca6 <__cxa_guard_release>

    return &renderer;
 8013b98:	4b02      	ldr	r3, [pc, #8]	@ (8013ba4 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x50>)
}
 8013b9a:	4618      	mov	r0, r3
 8013b9c:	bd80      	pop	{r7, pc}
 8013b9e:	bf00      	nop
 8013ba0:	2005ba6c 	.word	0x2005ba6c
 8013ba4:	2005b9b0 	.word	0x2005b9b0
 8013ba8:	08013b45 	.word	0x08013b45

08013bac <__NVIC_EnableIRQ>:
{
 8013bac:	b480      	push	{r7}
 8013bae:	b083      	sub	sp, #12
 8013bb0:	af00      	add	r7, sp, #0
 8013bb2:	4603      	mov	r3, r0
 8013bb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	db0b      	blt.n	8013bd6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013bbe:	79fb      	ldrb	r3, [r7, #7]
 8013bc0:	f003 021f 	and.w	r2, r3, #31
 8013bc4:	4907      	ldr	r1, [pc, #28]	@ (8013be4 <__NVIC_EnableIRQ+0x38>)
 8013bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013bca:	095b      	lsrs	r3, r3, #5
 8013bcc:	2001      	movs	r0, #1
 8013bce:	fa00 f202 	lsl.w	r2, r0, r2
 8013bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8013bd6:	bf00      	nop
 8013bd8:	370c      	adds	r7, #12
 8013bda:	46bd      	mov	sp, r7
 8013bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013be0:	4770      	bx	lr
 8013be2:	bf00      	nop
 8013be4:	e000e100 	.word	0xe000e100

08013be8 <__NVIC_DisableIRQ>:
{
 8013be8:	b480      	push	{r7}
 8013bea:	b083      	sub	sp, #12
 8013bec:	af00      	add	r7, sp, #0
 8013bee:	4603      	mov	r3, r0
 8013bf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	db12      	blt.n	8013c20 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013bfa:	79fb      	ldrb	r3, [r7, #7]
 8013bfc:	f003 021f 	and.w	r2, r3, #31
 8013c00:	490a      	ldr	r1, [pc, #40]	@ (8013c2c <__NVIC_DisableIRQ+0x44>)
 8013c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013c06:	095b      	lsrs	r3, r3, #5
 8013c08:	2001      	movs	r0, #1
 8013c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8013c0e:	3320      	adds	r3, #32
 8013c10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8013c14:	f3bf 8f4f 	dsb	sy
}
 8013c18:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8013c1a:	f3bf 8f6f 	isb	sy
}
 8013c1e:	bf00      	nop
}
 8013c20:	bf00      	nop
 8013c22:	370c      	adds	r7, #12
 8013c24:	46bd      	mov	sp, r7
 8013c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c2a:	4770      	bx	lr
 8013c2c:	e000e100 	.word	0xe000e100

08013c30 <__NVIC_SetPriority>:
{
 8013c30:	b480      	push	{r7}
 8013c32:	b083      	sub	sp, #12
 8013c34:	af00      	add	r7, sp, #0
 8013c36:	4603      	mov	r3, r0
 8013c38:	6039      	str	r1, [r7, #0]
 8013c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	db0a      	blt.n	8013c5a <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013c44:	683b      	ldr	r3, [r7, #0]
 8013c46:	b2da      	uxtb	r2, r3
 8013c48:	490c      	ldr	r1, [pc, #48]	@ (8013c7c <__NVIC_SetPriority+0x4c>)
 8013c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013c4e:	0112      	lsls	r2, r2, #4
 8013c50:	b2d2      	uxtb	r2, r2
 8013c52:	440b      	add	r3, r1
 8013c54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8013c58:	e00a      	b.n	8013c70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013c5a:	683b      	ldr	r3, [r7, #0]
 8013c5c:	b2da      	uxtb	r2, r3
 8013c5e:	4908      	ldr	r1, [pc, #32]	@ (8013c80 <__NVIC_SetPriority+0x50>)
 8013c60:	79fb      	ldrb	r3, [r7, #7]
 8013c62:	f003 030f 	and.w	r3, r3, #15
 8013c66:	3b04      	subs	r3, #4
 8013c68:	0112      	lsls	r2, r2, #4
 8013c6a:	b2d2      	uxtb	r2, r2
 8013c6c:	440b      	add	r3, r1
 8013c6e:	761a      	strb	r2, [r3, #24]
}
 8013c70:	bf00      	nop
 8013c72:	370c      	adds	r7, #12
 8013c74:	46bd      	mov	sp, r7
 8013c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c7a:	4770      	bx	lr
 8013c7c:	e000e100 	.word	0xe000e100
 8013c80:	e000ed00 	.word	0xe000ed00

08013c84 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
LOCATION_PRAGMA_NOLOAD("TouchGFX_Framebuffer")
uint32_t frameBuf[(240 * 296 * 2 + 3) / 4 * 2] LOCATION_ATTRIBUTE_NOLOAD("TouchGFX_Framebuffer");
}

void TouchGFXGeneratedHAL::initialize()
{
 8013c84:	b5b0      	push	{r4, r5, r7, lr}
 8013c86:	b082      	sub	sp, #8
 8013c88:	af00      	add	r7, sp, #0
 8013c8a:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	4618      	mov	r0, r3
 8013c90:	f001 f89f 	bl	8014dd2 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8013c94:	687d      	ldr	r5, [r7, #4]
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	681b      	ldr	r3, [r3, #0]
 8013c9a:	3368      	adds	r3, #104	@ 0x68
 8013c9c:	681c      	ldr	r4, [r3, #0]
 8013c9e:	f005 fd6b 	bl	8019778 <_ZN8touchgfx11Application11getInstanceEv>
 8013ca2:	4603      	mov	r3, r0
 8013ca4:	4619      	mov	r1, r3
 8013ca6:	4628      	mov	r0, r5
 8013ca8:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 8013caa:	6878      	ldr	r0, [r7, #4]
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	681b      	ldr	r3, [r3, #0]
 8013cb0:	338c      	adds	r3, #140	@ 0x8c
 8013cb2:	681c      	ldr	r4, [r3, #0]
 8013cb4:	4a03      	ldr	r2, [pc, #12]	@ (8013cc4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 8013cb6:	2300      	movs	r3, #0
 8013cb8:	4903      	ldr	r1, [pc, #12]	@ (8013cc8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8013cba:	47a0      	blx	r4
}
 8013cbc:	bf00      	nop
 8013cbe:	3708      	adds	r7, #8
 8013cc0:	46bd      	mov	sp, r7
 8013cc2:	bdb0      	pop	{r4, r5, r7, pc}
 8013cc4:	20022bfc 	.word	0x20022bfc
 8013cc8:	200000fc 	.word	0x200000fc

08013ccc <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8013ccc:	b580      	push	{r7, lr}
 8013cce:	b082      	sub	sp, #8
 8013cd0:	af00      	add	r7, sp, #0
 8013cd2:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8013cd4:	2109      	movs	r1, #9
 8013cd6:	2076      	movs	r0, #118	@ 0x76
 8013cd8:	f7ff ffaa 	bl	8013c30 <__NVIC_SetPriority>
}
 8013cdc:	bf00      	nop
 8013cde:	3708      	adds	r7, #8
 8013ce0:	46bd      	mov	sp, r7
 8013ce2:	bd80      	pop	{r7, pc}

08013ce4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8013ce4:	b580      	push	{r7, lr}
 8013ce6:	b082      	sub	sp, #8
 8013ce8:	af00      	add	r7, sp, #0
 8013cea:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8013cec:	2076      	movs	r0, #118	@ 0x76
 8013cee:	f7ff ff5d 	bl	8013bac <__NVIC_EnableIRQ>
}
 8013cf2:	bf00      	nop
 8013cf4:	3708      	adds	r7, #8
 8013cf6:	46bd      	mov	sp, r7
 8013cf8:	bd80      	pop	{r7, pc}

08013cfa <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8013cfa:	b580      	push	{r7, lr}
 8013cfc:	b082      	sub	sp, #8
 8013cfe:	af00      	add	r7, sp, #0
 8013d00:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8013d02:	2076      	movs	r0, #118	@ 0x76
 8013d04:	f7ff ff70 	bl	8013be8 <__NVIC_DisableIRQ>
}
 8013d08:	bf00      	nop
 8013d0a:	3708      	adds	r7, #8
 8013d0c:	46bd      	mov	sp, r7
 8013d0e:	bd80      	pop	{r7, pc}

08013d10 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8013d10:	b480      	push	{r7}
 8013d12:	b083      	sub	sp, #12
 8013d14:	af00      	add	r7, sp, #0
 8013d16:	6078      	str	r0, [r7, #4]
}
 8013d18:	bf00      	nop
 8013d1a:	370c      	adds	r7, #12
 8013d1c:	46bd      	mov	sp, r7
 8013d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d22:	4770      	bx	lr

08013d24 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8013d24:	b580      	push	{r7, lr}
 8013d26:	b082      	sub	sp, #8
 8013d28:	af00      	add	r7, sp, #0
 8013d2a:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	4618      	mov	r0, r3
 8013d30:	f001 f836 	bl	8014da0 <_ZN8touchgfx3HAL10beginFrameEv>
 8013d34:	4603      	mov	r3, r0
}
 8013d36:	4618      	mov	r0, r3
 8013d38:	3708      	adds	r7, #8
 8013d3a:	46bd      	mov	sp, r7
 8013d3c:	bd80      	pop	{r7, pc}

08013d3e <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8013d3e:	b580      	push	{r7, lr}
 8013d40:	b082      	sub	sp, #8
 8013d42:	af00      	add	r7, sp, #0
 8013d44:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	4618      	mov	r0, r3
 8013d4a:	f001 f835 	bl	8014db8 <_ZN8touchgfx3HAL8endFrameEv>
}
 8013d4e:	bf00      	nop
 8013d50:	3708      	adds	r7, #8
 8013d52:	46bd      	mov	sp, r7
 8013d54:	bd80      	pop	{r7, pc}
	...

08013d58 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    fbPtr += rect.y * lcd().framebufferStride() + rect.x * 2;
    return fbPtr;
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8013d58:	b480      	push	{r7}
 8013d5a:	b083      	sub	sp, #12
 8013d5c:	af00      	add	r7, sp, #0
 8013d5e:	6078      	str	r0, [r7, #4]
    return (uint16_t*)frameBuf;
 8013d60:	4b03      	ldr	r3, [pc, #12]	@ (8013d70 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
}
 8013d62:	4618      	mov	r0, r3
 8013d64:	370c      	adds	r7, #12
 8013d66:	46bd      	mov	sp, r7
 8013d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d6c:	4770      	bx	lr
 8013d6e:	bf00      	nop
 8013d70:	200000fc 	.word	0x200000fc

08013d74 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8013d74:	b480      	push	{r7}
 8013d76:	b083      	sub	sp, #12
 8013d78:	af00      	add	r7, sp, #0
 8013d7a:	6078      	str	r0, [r7, #4]
 8013d7c:	6039      	str	r1, [r7, #0]
    //setTFTFrameBuffer() not used for selected display interface
}
 8013d7e:	bf00      	nop
 8013d80:	370c      	adds	r7, #12
 8013d82:	46bd      	mov	sp, r7
 8013d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d88:	4770      	bx	lr

08013d8a <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8013d8a:	b580      	push	{r7, lr}
 8013d8c:	b082      	sub	sp, #8
 8013d8e:	af00      	add	r7, sp, #0
 8013d90:	6078      	str	r0, [r7, #4]
 8013d92:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	6839      	ldr	r1, [r7, #0]
 8013d98:	4618      	mov	r0, r3
 8013d9a:	f000 ffca 	bl	8014d32 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8013d9e:	bf00      	nop
 8013da0:	3708      	adds	r7, #8
 8013da2:	46bd      	mov	sp, r7
 8013da4:	bd80      	pop	{r7, pc}

08013da6 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8013da6:	b580      	push	{r7, lr}
 8013da8:	b084      	sub	sp, #16
 8013daa:	af00      	add	r7, sp, #0
 8013dac:	60f8      	str	r0, [r7, #12]
 8013dae:	60b9      	str	r1, [r7, #8]
 8013db0:	607a      	str	r2, [r7, #4]
 8013db2:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8013db4:	68f8      	ldr	r0, [r7, #12]
 8013db6:	683b      	ldr	r3, [r7, #0]
 8013db8:	687a      	ldr	r2, [r7, #4]
 8013dba:	68b9      	ldr	r1, [r7, #8]
 8013dbc:	f001 f93d 	bl	801503a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8013dc0:	4603      	mov	r3, r0
}
 8013dc2:	4618      	mov	r0, r3
 8013dc4:	3710      	adds	r7, #16
 8013dc6:	46bd      	mov	sp, r7
 8013dc8:	bd80      	pop	{r7, pc}

08013dca <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8013dca:	8880      	ldrh	r0, [r0, #4]
 8013dcc:	4770      	bx	lr

08013dce <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8013dce:	b570      	push	{r4, r5, r6, lr}
 8013dd0:	6803      	ldr	r3, [r0, #0]
 8013dd2:	4605      	mov	r5, r0
 8013dd4:	460c      	mov	r4, r1
 8013dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013dd8:	2100      	movs	r1, #0
 8013dda:	4798      	blx	r3
 8013ddc:	682b      	ldr	r3, [r5, #0]
 8013dde:	4606      	mov	r6, r0
 8013de0:	6a1b      	ldr	r3, [r3, #32]
 8013de2:	4628      	mov	r0, r5
 8013de4:	4798      	blx	r3
 8013de6:	1ba4      	subs	r4, r4, r6
 8013de8:	b2a4      	uxth	r4, r4
 8013dea:	fbb4 f0f0 	udiv	r0, r4, r0
 8013dee:	bd70      	pop	{r4, r5, r6, pc}

08013df0 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8013df0:	2300      	movs	r3, #0
 8013df2:	8083      	strh	r3, [r0, #4]
 8013df4:	4770      	bx	lr

08013df6 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8013df6:	b510      	push	{r4, lr}
 8013df8:	4604      	mov	r4, r0
 8013dfa:	6803      	ldr	r3, [r0, #0]
 8013dfc:	8881      	ldrh	r1, [r0, #4]
 8013dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e00:	4798      	blx	r3
 8013e02:	88a3      	ldrh	r3, [r4, #4]
 8013e04:	3301      	adds	r3, #1
 8013e06:	80a3      	strh	r3, [r4, #4]
 8013e08:	bd10      	pop	{r4, pc}

08013e0a <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8013e0a:	6803      	ldr	r3, [r0, #0]
 8013e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e0e:	4718      	bx	r3

08013e10 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8013e10:	4770      	bx	lr
	...

08013e14 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8013e14:	4a02      	ldr	r2, [pc, #8]	@ (8013e20 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8013e16:	6002      	str	r2, [r0, #0]
 8013e18:	2200      	movs	r2, #0
 8013e1a:	8082      	strh	r2, [r0, #4]
 8013e1c:	4770      	bx	lr
 8013e1e:	bf00      	nop
 8013e20:	0802f370 	.word	0x0802f370

08013e24 <_ZN8touchgfx9Container13getFirstChildEv>:
 8013e24:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8013e26:	4770      	bx	lr

08013e28 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8013e28:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8013e2a:	2000      	movs	r0, #0
 8013e2c:	b12b      	cbz	r3, 8013e3a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8013e2e:	b920      	cbnz	r0, 8013e3a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8013e30:	1a5a      	subs	r2, r3, r1
 8013e32:	4250      	negs	r0, r2
 8013e34:	4150      	adcs	r0, r2
 8013e36:	699b      	ldr	r3, [r3, #24]
 8013e38:	e7f8      	b.n	8013e2c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8013e3a:	4770      	bx	lr

08013e3c <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8013e3c:	2300      	movs	r3, #0
 8013e3e:	6148      	str	r0, [r1, #20]
 8013e40:	618b      	str	r3, [r1, #24]
 8013e42:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8013e44:	b913      	cbnz	r3, 8013e4c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8013e46:	6281      	str	r1, [r0, #40]	@ 0x28
 8013e48:	4770      	bx	lr
 8013e4a:	4613      	mov	r3, r2
 8013e4c:	699a      	ldr	r2, [r3, #24]
 8013e4e:	2a00      	cmp	r2, #0
 8013e50:	d1fb      	bne.n	8013e4a <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8013e52:	6199      	str	r1, [r3, #24]
 8013e54:	4770      	bx	lr

08013e56 <_ZN8touchgfx9Container9removeAllEv>:
 8013e56:	2200      	movs	r2, #0
 8013e58:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8013e5a:	b123      	cbz	r3, 8013e66 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8013e5c:	6999      	ldr	r1, [r3, #24]
 8013e5e:	6281      	str	r1, [r0, #40]	@ 0x28
 8013e60:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8013e64:	e7f8      	b.n	8013e58 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8013e66:	4770      	bx	lr

08013e68 <_ZN8touchgfx9Container6unlinkEv>:
 8013e68:	2300      	movs	r3, #0
 8013e6a:	6283      	str	r3, [r0, #40]	@ 0x28
 8013e6c:	4770      	bx	lr

08013e6e <_ZNK8touchgfx9Container12getSolidRectEv>:
 8013e6e:	2200      	movs	r2, #0
 8013e70:	8002      	strh	r2, [r0, #0]
 8013e72:	8042      	strh	r2, [r0, #2]
 8013e74:	8082      	strh	r2, [r0, #4]
 8013e76:	80c2      	strh	r2, [r0, #6]
 8013e78:	4770      	bx	lr

08013e7a <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8013e7a:	b570      	push	{r4, r5, r6, lr}
 8013e7c:	460d      	mov	r5, r1
 8013e7e:	4616      	mov	r6, r2
 8013e80:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8013e82:	b13c      	cbz	r4, 8013e94 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8013e84:	6823      	ldr	r3, [r4, #0]
 8013e86:	4620      	mov	r0, r4
 8013e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013e8a:	4632      	mov	r2, r6
 8013e8c:	4629      	mov	r1, r5
 8013e8e:	4798      	blx	r3
 8013e90:	69a4      	ldr	r4, [r4, #24]
 8013e92:	e7f6      	b.n	8013e82 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8013e94:	bd70      	pop	{r4, r5, r6, pc}

08013e96 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8013e96:	b538      	push	{r3, r4, r5, lr}
 8013e98:	460d      	mov	r5, r1
 8013e9a:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8013e9c:	b134      	cbz	r4, 8013eac <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8013e9e:	682b      	ldr	r3, [r5, #0]
 8013ea0:	4621      	mov	r1, r4
 8013ea2:	689b      	ldr	r3, [r3, #8]
 8013ea4:	4628      	mov	r0, r5
 8013ea6:	4798      	blx	r3
 8013ea8:	69a4      	ldr	r4, [r4, #24]
 8013eaa:	e7f7      	b.n	8013e9c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8013eac:	bd38      	pop	{r3, r4, r5, pc}

08013eae <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8013eae:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8013eb0:	b19b      	cbz	r3, 8013eda <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8013eb2:	428b      	cmp	r3, r1
 8013eb4:	d109      	bne.n	8013eca <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8013eb6:	2100      	movs	r1, #0
 8013eb8:	699a      	ldr	r2, [r3, #24]
 8013eba:	6159      	str	r1, [r3, #20]
 8013ebc:	6282      	str	r2, [r0, #40]	@ 0x28
 8013ebe:	b902      	cbnz	r2, 8013ec2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8013ec0:	4770      	bx	lr
 8013ec2:	6199      	str	r1, [r3, #24]
 8013ec4:	4770      	bx	lr
 8013ec6:	4613      	mov	r3, r2
 8013ec8:	b13a      	cbz	r2, 8013eda <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8013eca:	699a      	ldr	r2, [r3, #24]
 8013ecc:	428a      	cmp	r2, r1
 8013ece:	d1fa      	bne.n	8013ec6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8013ed0:	698a      	ldr	r2, [r1, #24]
 8013ed2:	619a      	str	r2, [r3, #24]
 8013ed4:	2300      	movs	r3, #0
 8013ed6:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8013eda:	4770      	bx	lr

08013edc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8013edc:	b410      	push	{r4}
 8013ede:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8013ee0:	4604      	mov	r4, r0
 8013ee2:	b92b      	cbnz	r3, 8013ef0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8013ee4:	6803      	ldr	r3, [r0, #0]
 8013ee6:	4611      	mov	r1, r2
 8013ee8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013eea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013eee:	4718      	bx	r3
 8013ef0:	b941      	cbnz	r1, 8013f04 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8013ef2:	6193      	str	r3, [r2, #24]
 8013ef4:	6282      	str	r2, [r0, #40]	@ 0x28
 8013ef6:	6154      	str	r4, [r2, #20]
 8013ef8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013efc:	4770      	bx	lr
 8013efe:	4603      	mov	r3, r0
 8013f00:	2800      	cmp	r0, #0
 8013f02:	d0f9      	beq.n	8013ef8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8013f04:	4299      	cmp	r1, r3
 8013f06:	6998      	ldr	r0, [r3, #24]
 8013f08:	d1f9      	bne.n	8013efe <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8013f0a:	6190      	str	r0, [r2, #24]
 8013f0c:	618a      	str	r2, [r1, #24]
 8013f0e:	e7f2      	b.n	8013ef6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08013f10 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8013f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f14:	461f      	mov	r7, r3
 8013f16:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8013f1a:	460d      	mov	r5, r1
 8013f1c:	4616      	mov	r6, r2
 8013f1e:	b103      	cbz	r3, 8013f22 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8013f20:	6038      	str	r0, [r7, #0]
 8013f22:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8013f24:	b314      	cbz	r4, 8013f6c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8013f26:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8013f2a:	b1eb      	cbz	r3, 8013f68 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013f2c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8013f30:	428d      	cmp	r5, r1
 8013f32:	db19      	blt.n	8013f68 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013f34:	8923      	ldrh	r3, [r4, #8]
 8013f36:	b289      	uxth	r1, r1
 8013f38:	440b      	add	r3, r1
 8013f3a:	b21b      	sxth	r3, r3
 8013f3c:	429d      	cmp	r5, r3
 8013f3e:	da13      	bge.n	8013f68 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013f40:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8013f44:	4296      	cmp	r6, r2
 8013f46:	db0f      	blt.n	8013f68 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013f48:	8963      	ldrh	r3, [r4, #10]
 8013f4a:	b292      	uxth	r2, r2
 8013f4c:	4413      	add	r3, r2
 8013f4e:	b21b      	sxth	r3, r3
 8013f50:	429e      	cmp	r6, r3
 8013f52:	da09      	bge.n	8013f68 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013f54:	6823      	ldr	r3, [r4, #0]
 8013f56:	1ab2      	subs	r2, r6, r2
 8013f58:	1a69      	subs	r1, r5, r1
 8013f5a:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 8013f5e:	b212      	sxth	r2, r2
 8013f60:	463b      	mov	r3, r7
 8013f62:	b209      	sxth	r1, r1
 8013f64:	4620      	mov	r0, r4
 8013f66:	47c0      	blx	r8
 8013f68:	69a4      	ldr	r4, [r4, #24]
 8013f6a:	e7db      	b.n	8013f24 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8013f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013f70 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8013f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f74:	4c6c      	ldr	r4, [pc, #432]	@ (8014128 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>)
 8013f76:	b0a1      	sub	sp, #132	@ 0x84
 8013f78:	6824      	ldr	r4, [r4, #0]
 8013f7a:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8013f7c:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 8013f80:	2400      	movs	r4, #0
 8013f82:	802c      	strh	r4, [r5, #0]
 8013f84:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 8013f86:	4606      	mov	r6, r0
 8013f88:	802c      	strh	r4, [r5, #0]
 8013f8a:	601c      	str	r4, [r3, #0]
 8013f8c:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8013f90:	9303      	str	r3, [sp, #12]
 8013f92:	f7ff ffbd 	bl	8013f10 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8013f96:	f1b9 0f03 	cmp.w	r9, #3
 8013f9a:	f340 80bf 	ble.w	801411c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1ac>
 8013f9e:	4631      	mov	r1, r6
 8013fa0:	a80c      	add	r0, sp, #48	@ 0x30
 8013fa2:	f006 fe81 	bl	801aca8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013fa6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8013faa:	9306      	str	r3, [sp, #24]
 8013fac:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8013fb0:	9307      	str	r3, [sp, #28]
 8013fb2:	9b03      	ldr	r3, [sp, #12]
 8013fb4:	f8d3 a000 	ldr.w	sl, [r3]
 8013fb8:	f1ba 0f00 	cmp.w	sl, #0
 8013fbc:	f000 80b1 	beq.w	8014122 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 8013fc0:	4651      	mov	r1, sl
 8013fc2:	a810      	add	r0, sp, #64	@ 0x40
 8013fc4:	f006 fe70 	bl	801aca8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013fc8:	2002      	movs	r0, #2
 8013fca:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 8013fce:	9b01      	ldr	r3, [sp, #4]
 8013fd0:	fb91 f1f0 	sdiv	r1, r1, r0
 8013fd4:	9a06      	ldr	r2, [sp, #24]
 8013fd6:	189d      	adds	r5, r3, r2
 8013fd8:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 8013fdc:	9a07      	ldr	r2, [sp, #28]
 8013fde:	4419      	add	r1, r3
 8013fe0:	9b02      	ldr	r3, [sp, #8]
 8013fe2:	1a6d      	subs	r5, r5, r1
 8013fe4:	4413      	add	r3, r2
 8013fe6:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 8013fea:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 8013fee:	fb92 f2f0 	sdiv	r2, r2, r0
 8013ff2:	440a      	add	r2, r1
 8013ff4:	1a9b      	subs	r3, r3, r2
 8013ff6:	435b      	muls	r3, r3
 8013ff8:	fb05 3505 	mla	r5, r5, r5, r3
 8013ffc:	4f4b      	ldr	r7, [pc, #300]	@ (801412c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8013ffe:	ac10      	add	r4, sp, #64	@ 0x40
 8014000:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014002:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014004:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014006:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014008:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801400a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801400c:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8014010:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8014014:	2303      	movs	r3, #3
 8014016:	f1b9 0f0c 	cmp.w	r9, #12
 801401a:	bfda      	itte	le
 801401c:	f109 32ff 	addle.w	r2, r9, #4294967295
 8014020:	fb92 f8f3 	sdivle	r8, r2, r3
 8014024:	4698      	movgt	r8, r3
 8014026:	2400      	movs	r4, #0
 8014028:	f8cd 9000 	str.w	r9, [sp]
 801402c:	1c63      	adds	r3, r4, #1
 801402e:	9308      	str	r3, [sp, #32]
 8014030:	9b00      	ldr	r3, [sp, #0]
 8014032:	f04f 0b00 	mov.w	fp, #0
 8014036:	fb93 f3f8 	sdiv	r3, r3, r8
 801403a:	f004 0401 	and.w	r4, r4, #1
 801403e:	aa10      	add	r2, sp, #64	@ 0x40
 8014040:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8014044:	b29b      	uxth	r3, r3
 8014046:	3404      	adds	r4, #4
 8014048:	9304      	str	r3, [sp, #16]
 801404a:	9a04      	ldr	r2, [sp, #16]
 801404c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8014050:	fb13 f302 	smulbb	r3, r3, r2
 8014054:	9a01      	ldr	r2, [sp, #4]
 8014056:	b29b      	uxth	r3, r3
 8014058:	1899      	adds	r1, r3, r2
 801405a:	9305      	str	r3, [sp, #20]
 801405c:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8014060:	b209      	sxth	r1, r1
 8014062:	4299      	cmp	r1, r3
 8014064:	db4d      	blt.n	8014102 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8014066:	8932      	ldrh	r2, [r6, #8]
 8014068:	4413      	add	r3, r2
 801406a:	b21b      	sxth	r3, r3
 801406c:	4299      	cmp	r1, r3
 801406e:	da48      	bge.n	8014102 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8014070:	9b04      	ldr	r3, [sp, #16]
 8014072:	6827      	ldr	r7, [r4, #0]
 8014074:	fb17 f703 	smulbb	r7, r7, r3
 8014078:	9b02      	ldr	r3, [sp, #8]
 801407a:	b2bf      	uxth	r7, r7
 801407c:	18fa      	adds	r2, r7, r3
 801407e:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8014082:	b212      	sxth	r2, r2
 8014084:	429a      	cmp	r2, r3
 8014086:	db3c      	blt.n	8014102 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8014088:	8970      	ldrh	r0, [r6, #10]
 801408a:	4403      	add	r3, r0
 801408c:	b21b      	sxth	r3, r3
 801408e:	429a      	cmp	r2, r3
 8014090:	da37      	bge.n	8014102 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8014092:	2300      	movs	r3, #0
 8014094:	4630      	mov	r0, r6
 8014096:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014098:	ab0b      	add	r3, sp, #44	@ 0x2c
 801409a:	f7ff ff39 	bl	8013f10 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801409e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80140a0:	b37a      	cbz	r2, 8014102 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 80140a2:	4552      	cmp	r2, sl
 80140a4:	d02d      	beq.n	8014102 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 80140a6:	4611      	mov	r1, r2
 80140a8:	a80e      	add	r0, sp, #56	@ 0x38
 80140aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80140ac:	f006 fdfc 	bl	801aca8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80140b0:	f04f 0e02 	mov.w	lr, #2
 80140b4:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 80140b8:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 80140bc:	fb91 f1fe 	sdiv	r1, r1, lr
 80140c0:	fb9c fcfe 	sdiv	ip, ip, lr
 80140c4:	9a06      	ldr	r2, [sp, #24]
 80140c6:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 80140ca:	9b01      	ldr	r3, [sp, #4]
 80140cc:	4401      	add	r1, r0
 80140ce:	4413      	add	r3, r2
 80140d0:	1a58      	subs	r0, r3, r1
 80140d2:	9a07      	ldr	r2, [sp, #28]
 80140d4:	9b02      	ldr	r3, [sp, #8]
 80140d6:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 80140da:	4413      	add	r3, r2
 80140dc:	448c      	add	ip, r1
 80140de:	eba3 030c 	sub.w	r3, r3, ip
 80140e2:	435b      	muls	r3, r3
 80140e4:	fb00 3300 	mla	r3, r0, r0, r3
 80140e8:	42ab      	cmp	r3, r5
 80140ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80140ec:	d208      	bcs.n	8014100 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x190>
 80140ee:	461d      	mov	r5, r3
 80140f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80140f2:	9803      	ldr	r0, [sp, #12]
 80140f4:	6001      	str	r1, [r0, #0]
 80140f6:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 80140f8:	9805      	ldr	r0, [sp, #20]
 80140fa:	8008      	strh	r0, [r1, #0]
 80140fc:	992b      	ldr	r1, [sp, #172]	@ 0xac
 80140fe:	800f      	strh	r7, [r1, #0]
 8014100:	4692      	mov	sl, r2
 8014102:	f10b 0b01 	add.w	fp, fp, #1
 8014106:	f1bb 0f04 	cmp.w	fp, #4
 801410a:	f104 0408 	add.w	r4, r4, #8
 801410e:	d19c      	bne.n	801404a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xda>
 8014110:	9b00      	ldr	r3, [sp, #0]
 8014112:	9c08      	ldr	r4, [sp, #32]
 8014114:	444b      	add	r3, r9
 8014116:	4544      	cmp	r4, r8
 8014118:	9300      	str	r3, [sp, #0]
 801411a:	d187      	bne.n	801402c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xbc>
 801411c:	b021      	add	sp, #132	@ 0x84
 801411e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014122:	f04f 35ff 	mov.w	r5, #4294967295
 8014126:	e769      	b.n	8013ffc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8014128:	2005ba7c 	.word	0x2005ba7c
 801412c:	0802e8f4 	.word	0x0802e8f4

08014130 <_ZN8touchgfx4RectaNERKS0_>:
 8014130:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014134:	f9b1 7000 	ldrsh.w	r7, [r1]
 8014138:	888c      	ldrh	r4, [r1, #4]
 801413a:	f9b0 9000 	ldrsh.w	r9, [r0]
 801413e:	443c      	add	r4, r7
 8014140:	b2a4      	uxth	r4, r4
 8014142:	fa0f f884 	sxth.w	r8, r4
 8014146:	45c1      	cmp	r9, r8
 8014148:	da2f      	bge.n	80141aa <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801414a:	8882      	ldrh	r2, [r0, #4]
 801414c:	444a      	add	r2, r9
 801414e:	b292      	uxth	r2, r2
 8014150:	fa0f fe82 	sxth.w	lr, r2
 8014154:	4577      	cmp	r7, lr
 8014156:	da28      	bge.n	80141aa <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8014158:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801415c:	88cb      	ldrh	r3, [r1, #6]
 801415e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8014162:	442b      	add	r3, r5
 8014164:	b21b      	sxth	r3, r3
 8014166:	429e      	cmp	r6, r3
 8014168:	da1f      	bge.n	80141aa <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801416a:	88c3      	ldrh	r3, [r0, #6]
 801416c:	4433      	add	r3, r6
 801416e:	b29b      	uxth	r3, r3
 8014170:	fa0f fc83 	sxth.w	ip, r3
 8014174:	4565      	cmp	r5, ip
 8014176:	da18      	bge.n	80141aa <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8014178:	454f      	cmp	r7, r9
 801417a:	bfb8      	it	lt
 801417c:	464f      	movlt	r7, r9
 801417e:	42b5      	cmp	r5, r6
 8014180:	bfb8      	it	lt
 8014182:	4635      	movlt	r5, r6
 8014184:	45f0      	cmp	r8, lr
 8014186:	bfd8      	it	le
 8014188:	4622      	movle	r2, r4
 801418a:	1bd2      	subs	r2, r2, r7
 801418c:	8082      	strh	r2, [r0, #4]
 801418e:	884a      	ldrh	r2, [r1, #2]
 8014190:	88c9      	ldrh	r1, [r1, #6]
 8014192:	8007      	strh	r7, [r0, #0]
 8014194:	440a      	add	r2, r1
 8014196:	b292      	uxth	r2, r2
 8014198:	b211      	sxth	r1, r2
 801419a:	458c      	cmp	ip, r1
 801419c:	bfa8      	it	ge
 801419e:	4613      	movge	r3, r2
 80141a0:	1b5b      	subs	r3, r3, r5
 80141a2:	80c3      	strh	r3, [r0, #6]
 80141a4:	8045      	strh	r5, [r0, #2]
 80141a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80141aa:	2300      	movs	r3, #0
 80141ac:	8003      	strh	r3, [r0, #0]
 80141ae:	8043      	strh	r3, [r0, #2]
 80141b0:	8083      	strh	r3, [r0, #4]
 80141b2:	80c3      	strh	r3, [r0, #6]
 80141b4:	e7f7      	b.n	80141a6 <_ZN8touchgfx4RectaNERKS0_+0x76>

080141b6 <_ZNK8touchgfx4Rect7isEmptyEv>:
 80141b6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	dd06      	ble.n	80141cc <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 80141be:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80141c2:	2800      	cmp	r0, #0
 80141c4:	bfcc      	ite	gt
 80141c6:	2000      	movgt	r0, #0
 80141c8:	2001      	movle	r0, #1
 80141ca:	4770      	bx	lr
 80141cc:	2001      	movs	r0, #1
 80141ce:	4770      	bx	lr

080141d0 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 80141d0:	2300      	movs	r3, #0
 80141d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141d6:	4604      	mov	r4, r0
 80141d8:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 80141da:	8003      	strh	r3, [r0, #0]
 80141dc:	8043      	strh	r3, [r0, #2]
 80141de:	8083      	strh	r3, [r0, #4]
 80141e0:	80c3      	strh	r3, [r0, #6]
 80141e2:	2d00      	cmp	r5, #0
 80141e4:	d040      	beq.n	8014268 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 80141e6:	1d28      	adds	r0, r5, #4
 80141e8:	f7ff ffe5 	bl	80141b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80141ec:	b988      	cbnz	r0, 8014212 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80141ee:	4620      	mov	r0, r4
 80141f0:	f7ff ffe1 	bl	80141b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80141f4:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80141f8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80141fc:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8014200:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8014204:	b138      	cbz	r0, 8014216 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8014206:	8022      	strh	r2, [r4, #0]
 8014208:	8063      	strh	r3, [r4, #2]
 801420a:	f8a4 e004 	strh.w	lr, [r4, #4]
 801420e:	f8a4 c006 	strh.w	ip, [r4, #6]
 8014212:	69ad      	ldr	r5, [r5, #24]
 8014214:	e7e5      	b.n	80141e2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8014216:	f9b4 0000 	ldrsh.w	r0, [r4]
 801421a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801421e:	4290      	cmp	r0, r2
 8014220:	4607      	mov	r7, r0
 8014222:	bfa8      	it	ge
 8014224:	4617      	movge	r7, r2
 8014226:	4299      	cmp	r1, r3
 8014228:	460e      	mov	r6, r1
 801422a:	bfa8      	it	ge
 801422c:	461e      	movge	r6, r3
 801422e:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8014232:	4472      	add	r2, lr
 8014234:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8014238:	4440      	add	r0, r8
 801423a:	4471      	add	r1, lr
 801423c:	4463      	add	r3, ip
 801423e:	b200      	sxth	r0, r0
 8014240:	b212      	sxth	r2, r2
 8014242:	b209      	sxth	r1, r1
 8014244:	b21b      	sxth	r3, r3
 8014246:	4290      	cmp	r0, r2
 8014248:	bfac      	ite	ge
 801424a:	ebc7 0200 	rsbge	r2, r7, r0
 801424e:	ebc7 0202 	rsblt	r2, r7, r2
 8014252:	4299      	cmp	r1, r3
 8014254:	bfac      	ite	ge
 8014256:	ebc6 0301 	rsbge	r3, r6, r1
 801425a:	ebc6 0303 	rsblt	r3, r6, r3
 801425e:	8027      	strh	r7, [r4, #0]
 8014260:	8066      	strh	r6, [r4, #2]
 8014262:	80a2      	strh	r2, [r4, #4]
 8014264:	80e3      	strh	r3, [r4, #6]
 8014266:	e7d4      	b.n	8014212 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8014268:	4620      	mov	r0, r4
 801426a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801426e <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 801426e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014272:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8014276:	b383      	cbz	r3, 80142da <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8014278:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 801427a:	b374      	cbz	r4, 80142da <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801427c:	f9b1 5000 	ldrsh.w	r5, [r1]
 8014280:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8014284:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8014288:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 801428c:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8014290:	b303      	cbz	r3, 80142d4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8014292:	4668      	mov	r0, sp
 8014294:	1d21      	adds	r1, r4, #4
 8014296:	f8ad 5000 	strh.w	r5, [sp]
 801429a:	f8ad 6002 	strh.w	r6, [sp, #2]
 801429e:	f8ad 7004 	strh.w	r7, [sp, #4]
 80142a2:	f8ad 8006 	strh.w	r8, [sp, #6]
 80142a6:	f7ff ff43 	bl	8014130 <_ZN8touchgfx4RectaNERKS0_>
 80142aa:	4668      	mov	r0, sp
 80142ac:	f7ff ff83 	bl	80141b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80142b0:	b980      	cbnz	r0, 80142d4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80142b2:	f8bd 3000 	ldrh.w	r3, [sp]
 80142b6:	88a2      	ldrh	r2, [r4, #4]
 80142b8:	4669      	mov	r1, sp
 80142ba:	1a9b      	subs	r3, r3, r2
 80142bc:	f8ad 3000 	strh.w	r3, [sp]
 80142c0:	88e2      	ldrh	r2, [r4, #6]
 80142c2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80142c6:	4620      	mov	r0, r4
 80142c8:	1a9b      	subs	r3, r3, r2
 80142ca:	f8ad 3002 	strh.w	r3, [sp, #2]
 80142ce:	6823      	ldr	r3, [r4, #0]
 80142d0:	689b      	ldr	r3, [r3, #8]
 80142d2:	4798      	blx	r3
 80142d4:	69a4      	ldr	r4, [r4, #24]
 80142d6:	2c00      	cmp	r4, #0
 80142d8:	d1d8      	bne.n	801428c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 80142da:	b002      	add	sp, #8
 80142dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080142e0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80142e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80142e2:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 80142e6:	460d      	mov	r5, r1
 80142e8:	4616      	mov	r6, r2
 80142ea:	b323      	cbz	r3, 8014336 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80142ec:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80142ee:	b314      	cbz	r4, 8014336 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80142f0:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 80142f4:	b1eb      	cbz	r3, 8014332 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80142f6:	466b      	mov	r3, sp
 80142f8:	6828      	ldr	r0, [r5, #0]
 80142fa:	6869      	ldr	r1, [r5, #4]
 80142fc:	c303      	stmia	r3!, {r0, r1}
 80142fe:	4668      	mov	r0, sp
 8014300:	1d21      	adds	r1, r4, #4
 8014302:	f7ff ff15 	bl	8014130 <_ZN8touchgfx4RectaNERKS0_>
 8014306:	4668      	mov	r0, sp
 8014308:	f7ff ff55 	bl	80141b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801430c:	b988      	cbnz	r0, 8014332 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801430e:	f8bd 3000 	ldrh.w	r3, [sp]
 8014312:	88a2      	ldrh	r2, [r4, #4]
 8014314:	4669      	mov	r1, sp
 8014316:	1a9b      	subs	r3, r3, r2
 8014318:	f8ad 3000 	strh.w	r3, [sp]
 801431c:	88e2      	ldrh	r2, [r4, #6]
 801431e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014322:	4620      	mov	r0, r4
 8014324:	1a9b      	subs	r3, r3, r2
 8014326:	f8ad 3002 	strh.w	r3, [sp, #2]
 801432a:	6823      	ldr	r3, [r4, #0]
 801432c:	4632      	mov	r2, r6
 801432e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014330:	4798      	blx	r3
 8014332:	69a4      	ldr	r4, [r4, #24]
 8014334:	e7db      	b.n	80142ee <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8014336:	b002      	add	sp, #8
 8014338:	bd70      	pop	{r4, r5, r6, pc}

0801433a <_ZN8touchgfx14SwipeContainer14setSwipeCutoffEt>:
 801433a:	85c1      	strh	r1, [r0, #46]	@ 0x2e
 801433c:	4770      	bx	lr

0801433e <_ZN8touchgfx14SwipeContainer13PageIndicatorD1Ev>:
 801433e:	4770      	bx	lr

08014340 <_ZN8touchgfx14SwipeContainer13PageIndicatorD0Ev>:
 8014340:	b510      	push	{r4, lr}
 8014342:	4604      	mov	r4, r0
 8014344:	218c      	movs	r1, #140	@ 0x8c
 8014346:	f017 fca0 	bl	802bc8a <_ZdlPvj>
 801434a:	4620      	mov	r0, r4
 801434c:	bd10      	pop	{r4, pc}
	...

08014350 <_ZN8touchgfx14SwipeContainerD1Ev>:
 8014350:	4b05      	ldr	r3, [pc, #20]	@ (8014368 <_ZN8touchgfx14SwipeContainerD1Ev+0x18>)
 8014352:	b510      	push	{r4, lr}
 8014354:	6003      	str	r3, [r0, #0]
 8014356:	4604      	mov	r4, r0
 8014358:	f005 fa0e 	bl	8019778 <_ZN8touchgfx11Application11getInstanceEv>
 801435c:	4621      	mov	r1, r4
 801435e:	3004      	adds	r0, #4
 8014360:	f005 fa2f 	bl	80197c2 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 8014364:	4620      	mov	r0, r4
 8014366:	bd10      	pop	{r4, pc}
 8014368:	0802f4c4 	.word	0x0802f4c4

0801436c <_ZN8touchgfx14SwipeContainerD0Ev>:
 801436c:	b510      	push	{r4, lr}
 801436e:	4604      	mov	r4, r0
 8014370:	f7ff ffee 	bl	8014350 <_ZN8touchgfx14SwipeContainerD1Ev>
 8014374:	4620      	mov	r0, r4
 8014376:	21f8      	movs	r1, #248	@ 0xf8
 8014378:	f017 fc87 	bl	802bc8a <_ZdlPvj>
 801437c:	4620      	mov	r0, r4
 801437e:	bd10      	pop	{r4, pc}

08014380 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE>:
 8014380:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8014384:	2b07      	cmp	r3, #7
 8014386:	d118      	bne.n	80143ba <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x3a>
 8014388:	790b      	ldrb	r3, [r1, #4]
 801438a:	2b01      	cmp	r3, #1
 801438c:	d115      	bne.n	80143ba <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x3a>
 801438e:	f9b0 3030 	ldrsh.w	r3, [r0, #48]	@ 0x30
 8014392:	f8b0 2040 	ldrh.w	r2, [r0, #64]	@ 0x40
 8014396:	2b00      	cmp	r3, #0
 8014398:	8643      	strh	r3, [r0, #50]	@ 0x32
 801439a:	8682      	strh	r2, [r0, #52]	@ 0x34
 801439c:	f890 10f5 	ldrb.w	r1, [r0, #245]	@ 0xf5
 80143a0:	da0e      	bge.n	80143c0 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x40>
 80143a2:	f890 20f4 	ldrb.w	r2, [r0, #244]	@ 0xf4
 80143a6:	3a01      	subs	r2, #1
 80143a8:	4291      	cmp	r1, r2
 80143aa:	d007      	beq.n	80143bc <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x3c>
 80143ac:	8dc2      	ldrh	r2, [r0, #46]	@ 0x2e
 80143ae:	4252      	negs	r2, r2
 80143b0:	4293      	cmp	r3, r2
 80143b2:	dc03      	bgt.n	80143bc <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x3c>
 80143b4:	2302      	movs	r3, #2
 80143b6:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 80143ba:	4770      	bx	lr
 80143bc:	2300      	movs	r3, #0
 80143be:	e7fa      	b.n	80143b6 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x36>
 80143c0:	d0fb      	beq.n	80143ba <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x3a>
 80143c2:	b111      	cbz	r1, 80143ca <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x4a>
 80143c4:	8dc2      	ldrh	r2, [r0, #46]	@ 0x2e
 80143c6:	4293      	cmp	r3, r2
 80143c8:	da01      	bge.n	80143ce <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x4e>
 80143ca:	2301      	movs	r3, #1
 80143cc:	e7f3      	b.n	80143b6 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x36>
 80143ce:	2303      	movs	r3, #3
 80143d0:	e7f1      	b.n	80143b6 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x36>

080143d2 <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE>:
 80143d2:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80143d6:	2b07      	cmp	r3, #7
 80143d8:	d114      	bne.n	8014404 <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x32>
 80143da:	790b      	ldrb	r3, [r1, #4]
 80143dc:	b993      	cbnz	r3, 8014404 <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x32>
 80143de:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 80143e0:	f890 20f5 	ldrb.w	r2, [r0, #245]	@ 0xf5
 80143e4:	8643      	strh	r3, [r0, #50]	@ 0x32
 80143e6:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 80143ea:	8683      	strh	r3, [r0, #52]	@ 0x34
 80143ec:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	da08      	bge.n	8014406 <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x34>
 80143f4:	f890 30f4 	ldrb.w	r3, [r0, #244]	@ 0xf4
 80143f8:	3b01      	subs	r3, #1
 80143fa:	429a      	cmp	r2, r3
 80143fc:	da02      	bge.n	8014404 <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x32>
 80143fe:	2302      	movs	r3, #2
 8014400:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 8014404:	4770      	bx	lr
 8014406:	d0fd      	beq.n	8014404 <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x32>
 8014408:	2a00      	cmp	r2, #0
 801440a:	d0fb      	beq.n	8014404 <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x32>
 801440c:	2303      	movs	r3, #3
 801440e:	e7f7      	b.n	8014400 <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x2e>

08014410 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
 8014410:	b538      	push	{r3, r4, r5, lr}
 8014412:	4604      	mov	r4, r0
 8014414:	460d      	mov	r5, r1
 8014416:	2226      	movs	r2, #38	@ 0x26
 8014418:	2100      	movs	r1, #0
 801441a:	f018 fe37 	bl	802d08c <memset>
 801441e:	4620      	mov	r0, r4
 8014420:	f7fb ffea 	bl	80103f8 <_ZN8touchgfx8DrawableC1Ev>
 8014424:	4b06      	ldr	r3, [pc, #24]	@ (8014440 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x30>)
 8014426:	4620      	mov	r0, r4
 8014428:	6023      	str	r3, [r4, #0]
 801442a:	882b      	ldrh	r3, [r5, #0]
 801442c:	4629      	mov	r1, r5
 801442e:	84e3      	strh	r3, [r4, #38]	@ 0x26
 8014430:	23ff      	movs	r3, #255	@ 0xff
 8014432:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 8014436:	f003 fa64 	bl	8017902 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801443a:	4620      	mov	r0, r4
 801443c:	bd38      	pop	{r3, r4, r5, pc}
 801443e:	bf00      	nop
 8014440:	0802f9a8 	.word	0x0802f9a8

08014444 <_ZN8touchgfx14SwipeContainer23setEndSwipeElasticWidthEt>:
 8014444:	86c1      	strh	r1, [r0, #54]	@ 0x36
 8014446:	4770      	bx	lr

08014448 <_ZN8touchgfx14SwipeContainer11adjustPagesEv>:
 8014448:	b508      	push	{r3, lr}
 801444a:	8e02      	ldrh	r2, [r0, #48]	@ 0x30
 801444c:	f890 10f5 	ldrb.w	r1, [r0, #245]	@ 0xf5
 8014450:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8014454:	303c      	adds	r0, #60	@ 0x3c
 8014456:	fb03 2111 	mls	r1, r3, r1, r2
 801445a:	2200      	movs	r2, #0
 801445c:	b209      	sxth	r1, r1
 801445e:	f7fc f921 	bl	80106a4 <_ZN8touchgfx8Drawable6moveToEss>
 8014462:	bd08      	pop	{r3, pc}

08014464 <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE>:
 8014464:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8014468:	2b07      	cmp	r3, #7
 801446a:	d119      	bne.n	80144a0 <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x3c>
 801446c:	88ca      	ldrh	r2, [r1, #6]
 801446e:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8014470:	1a9b      	subs	r3, r3, r2
 8014472:	894a      	ldrh	r2, [r1, #10]
 8014474:	f890 10f5 	ldrb.w	r1, [r0, #245]	@ 0xf5
 8014478:	4413      	add	r3, r2
 801447a:	b21b      	sxth	r3, r3
 801447c:	8603      	strh	r3, [r0, #48]	@ 0x30
 801447e:	b921      	cbnz	r1, 801448a <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x26>
 8014480:	8ec2      	ldrh	r2, [r0, #54]	@ 0x36
 8014482:	4293      	cmp	r3, r2
 8014484:	dd01      	ble.n	801448a <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x26>
 8014486:	8602      	strh	r2, [r0, #48]	@ 0x30
 8014488:	e008      	b.n	801449c <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x38>
 801448a:	f890 20f4 	ldrb.w	r2, [r0, #244]	@ 0xf4
 801448e:	3a01      	subs	r2, #1
 8014490:	4291      	cmp	r1, r2
 8014492:	d103      	bne.n	801449c <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x38>
 8014494:	8ec2      	ldrh	r2, [r0, #54]	@ 0x36
 8014496:	4252      	negs	r2, r2
 8014498:	4293      	cmp	r3, r2
 801449a:	dbf4      	blt.n	8014486 <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x22>
 801449c:	f7ff bfd4 	b.w	8014448 <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 80144a0:	4770      	bx	lr

080144a2 <_ZN8touchgfx14SwipeContainer25animateSwipeCancelledLeftEv>:
 80144a2:	b538      	push	{r3, r4, r5, lr}
 80144a4:	f890 502d 	ldrb.w	r5, [r0, #45]	@ 0x2d
 80144a8:	4604      	mov	r4, r0
 80144aa:	2d0e      	cmp	r5, #14
 80144ac:	d813      	bhi.n	80144d6 <_ZN8touchgfx14SwipeContainer25animateSwipeCancelledLeftEv+0x34>
 80144ae:	8e42      	ldrh	r2, [r0, #50]	@ 0x32
 80144b0:	230e      	movs	r3, #14
 80144b2:	4252      	negs	r2, r2
 80144b4:	b212      	sxth	r2, r2
 80144b6:	2100      	movs	r1, #0
 80144b8:	4628      	mov	r0, r5
 80144ba:	f007 fb4d 	bl	801bb58 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst>
 80144be:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80144c0:	4418      	add	r0, r3
 80144c2:	8620      	strh	r0, [r4, #48]	@ 0x30
 80144c4:	4620      	mov	r0, r4
 80144c6:	f7ff ffbf 	bl	8014448 <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 80144ca:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80144ce:	3301      	adds	r3, #1
 80144d0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80144d4:	bd38      	pop	{r3, r4, r5, pc}
 80144d6:	2307      	movs	r3, #7
 80144d8:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 80144dc:	2300      	movs	r3, #0
 80144de:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
 80144e2:	8603      	strh	r3, [r0, #48]	@ 0x30
 80144e4:	e7ef      	b.n	80144c6 <_ZN8touchgfx14SwipeContainer25animateSwipeCancelledLeftEv+0x24>

080144e6 <_ZN8touchgfx14SwipeContainer26animateSwipeCancelledRightEv>:
 80144e6:	b538      	push	{r3, r4, r5, lr}
 80144e8:	f890 502d 	ldrb.w	r5, [r0, #45]	@ 0x2d
 80144ec:	4604      	mov	r4, r0
 80144ee:	2d0e      	cmp	r5, #14
 80144f0:	d812      	bhi.n	8014518 <_ZN8touchgfx14SwipeContainer26animateSwipeCancelledRightEv+0x32>
 80144f2:	230e      	movs	r3, #14
 80144f4:	f9b0 2032 	ldrsh.w	r2, [r0, #50]	@ 0x32
 80144f8:	2100      	movs	r1, #0
 80144fa:	4628      	mov	r0, r5
 80144fc:	f007 fb2c 	bl	801bb58 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst>
 8014500:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8014502:	1a18      	subs	r0, r3, r0
 8014504:	8620      	strh	r0, [r4, #48]	@ 0x30
 8014506:	4620      	mov	r0, r4
 8014508:	f7ff ff9e 	bl	8014448 <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 801450c:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8014510:	3301      	adds	r3, #1
 8014512:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014516:	bd38      	pop	{r3, r4, r5, pc}
 8014518:	2307      	movs	r3, #7
 801451a:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 801451e:	2300      	movs	r3, #0
 8014520:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
 8014524:	8603      	strh	r3, [r0, #48]	@ 0x30
 8014526:	e7ef      	b.n	8014508 <_ZN8touchgfx14SwipeContainer26animateSwipeCancelledRightEv+0x22>

08014528 <_ZN8touchgfx14SwipeContainer13PageIndicatorC1Ev>:
 8014528:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801452c:	4604      	mov	r4, r0
 801452e:	2500      	movs	r5, #0
 8014530:	4626      	mov	r6, r4
 8014532:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 8014536:	f7fb ff5f 	bl	80103f8 <_ZN8touchgfx8DrawableC1Ev>
 801453a:	4b18      	ldr	r3, [pc, #96]	@ (801459c <_ZN8touchgfx14SwipeContainer13PageIndicatorC1Ev+0x74>)
 801453c:	af02      	add	r7, sp, #8
 801453e:	f827 9d04 	strh.w	r9, [r7, #-4]!
 8014542:	62a5      	str	r5, [r4, #40]	@ 0x28
 8014544:	f846 3b2c 	str.w	r3, [r6], #44
 8014548:	4639      	mov	r1, r7
 801454a:	4630      	mov	r0, r6
 801454c:	f7ff ff60 	bl	8014410 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8014550:	4b13      	ldr	r3, [pc, #76]	@ (80145a0 <_ZN8touchgfx14SwipeContainer13PageIndicatorC1Ev+0x78>)
 8014552:	f104 085c 	add.w	r8, r4, #92	@ 0x5c
 8014556:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014558:	4639      	mov	r1, r7
 801455a:	f8a4 5056 	strh.w	r5, [r4, #86]	@ 0x56
 801455e:	f8a4 5058 	strh.w	r5, [r4, #88]	@ 0x58
 8014562:	4640      	mov	r0, r8
 8014564:	f8ad 9004 	strh.w	r9, [sp, #4]
 8014568:	f7ff ff52 	bl	8014410 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 801456c:	462a      	mov	r2, r5
 801456e:	4629      	mov	r1, r5
 8014570:	4630      	mov	r0, r6
 8014572:	f8a4 5088 	strh.w	r5, [r4, #136]	@ 0x88
 8014576:	f7fb ffec 	bl	8010552 <_ZN8touchgfx8Drawable5setXYEss>
 801457a:	462a      	mov	r2, r5
 801457c:	4629      	mov	r1, r5
 801457e:	4640      	mov	r0, r8
 8014580:	f7fb ffe7 	bl	8010552 <_ZN8touchgfx8Drawable5setXYEss>
 8014584:	4631      	mov	r1, r6
 8014586:	4620      	mov	r0, r4
 8014588:	f7ff fc58 	bl	8013e3c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801458c:	4620      	mov	r0, r4
 801458e:	4641      	mov	r1, r8
 8014590:	f7ff fc54 	bl	8013e3c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014594:	4620      	mov	r0, r4
 8014596:	b003      	add	sp, #12
 8014598:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801459c:	0802f434 	.word	0x0802f434
 80145a0:	0802f924 	.word	0x0802f924

080145a4 <_ZN8touchgfx14SwipeContainerC1Ev>:
 80145a4:	b570      	push	{r4, r5, r6, lr}
 80145a6:	4604      	mov	r4, r0
 80145a8:	f7fb ff26 	bl	80103f8 <_ZN8touchgfx8DrawableC1Ev>
 80145ac:	4b1c      	ldr	r3, [pc, #112]	@ (8014620 <_ZN8touchgfx14SwipeContainerC1Ev+0x7c>)
 80145ae:	2500      	movs	r5, #0
 80145b0:	6023      	str	r3, [r4, #0]
 80145b2:	2307      	movs	r3, #7
 80145b4:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 80145b8:	2350      	movs	r3, #80	@ 0x50
 80145ba:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 80145bc:	231e      	movs	r3, #30
 80145be:	86e3      	strh	r3, [r4, #54]	@ 0x36
 80145c0:	2314      	movs	r3, #20
 80145c2:	f104 063c 	add.w	r6, r4, #60	@ 0x3c
 80145c6:	62a5      	str	r5, [r4, #40]	@ 0x28
 80145c8:	f884 502d 	strb.w	r5, [r4, #45]	@ 0x2d
 80145cc:	8625      	strh	r5, [r4, #48]	@ 0x30
 80145ce:	8665      	strh	r5, [r4, #50]	@ 0x32
 80145d0:	86a5      	strh	r5, [r4, #52]	@ 0x34
 80145d2:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
 80145d6:	f884 5039 	strb.w	r5, [r4, #57]	@ 0x39
 80145da:	4630      	mov	r0, r6
 80145dc:	f7fb ff0c 	bl	80103f8 <_ZN8touchgfx8DrawableC1Ev>
 80145e0:	4b10      	ldr	r3, [pc, #64]	@ (8014624 <_ZN8touchgfx14SwipeContainerC1Ev+0x80>)
 80145e2:	6665      	str	r5, [r4, #100]	@ 0x64
 80145e4:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80145e6:	2302      	movs	r3, #2
 80145e8:	f8a4 506a 	strh.w	r5, [r4, #106]	@ 0x6a
 80145ec:	f104 056c 	add.w	r5, r4, #108	@ 0x6c
 80145f0:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
 80145f4:	4628      	mov	r0, r5
 80145f6:	f7ff ff97 	bl	8014528 <_ZN8touchgfx14SwipeContainer13PageIndicatorC1Ev>
 80145fa:	f005 f8bd 	bl	8019778 <_ZN8touchgfx11Application11getInstanceEv>
 80145fe:	4621      	mov	r1, r4
 8014600:	3004      	adds	r0, #4
 8014602:	f005 f987 	bl	8019914 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
 8014606:	2301      	movs	r3, #1
 8014608:	4631      	mov	r1, r6
 801460a:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 801460e:	4620      	mov	r0, r4
 8014610:	f7ff fc14 	bl	8013e3c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014614:	4620      	mov	r0, r4
 8014616:	4629      	mov	r1, r5
 8014618:	f7ff fc10 	bl	8013e3c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801461c:	4620      	mov	r0, r4
 801461e:	bd70      	pop	{r4, r5, r6, pc}
 8014620:	0802f4c4 	.word	0x0802f4c4
 8014624:	0802f588 	.word	0x0802f588

08014628 <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh>:
 8014628:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801462a:	f890 3088 	ldrb.w	r3, [r0, #136]	@ 0x88
 801462e:	4604      	mov	r4, r0
 8014630:	428b      	cmp	r3, r1
 8014632:	460d      	mov	r5, r1
 8014634:	d915      	bls.n	8014662 <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh+0x3a>
 8014636:	f890 3089 	ldrb.w	r3, [r0, #137]	@ 0x89
 801463a:	428b      	cmp	r3, r1
 801463c:	d011      	beq.n	8014662 <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh+0x3a>
 801463e:	f884 1089 	strb.w	r1, [r4, #137]	@ 0x89
 8014642:	f8b0 3052 	ldrh.w	r3, [r0, #82]	@ 0x52
 8014646:	a802      	add	r0, sp, #8
 8014648:	f820 3d04 	strh.w	r3, [r0, #-4]!
 801464c:	f008 facc 	bl	801cbe8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014650:	fb15 f100 	smulbb	r1, r5, r0
 8014654:	f9b4 2062 	ldrsh.w	r2, [r4, #98]	@ 0x62
 8014658:	b209      	sxth	r1, r1
 801465a:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 801465e:	f7fc f821 	bl	80106a4 <_ZN8touchgfx8Drawable6moveToEss>
 8014662:	b003      	add	sp, #12
 8014664:	bd30      	pop	{r4, r5, pc}

08014666 <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh>:
 8014666:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014668:	4604      	mov	r4, r0
 801466a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801466e:	f884 1088 	strb.w	r1, [r4, #136]	@ 0x88
 8014672:	f8b0 3052 	ldrh.w	r3, [r0, #82]	@ 0x52
 8014676:	460d      	mov	r5, r1
 8014678:	4293      	cmp	r3, r2
 801467a:	d01e      	beq.n	80146ba <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh+0x54>
 801467c:	a802      	add	r0, sp, #8
 801467e:	f820 3d04 	strh.w	r3, [r0, #-4]!
 8014682:	f008 fab1 	bl	801cbe8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014686:	fb15 f000 	smulbb	r0, r5, r0
 801468a:	6823      	ldr	r3, [r4, #0]
 801468c:	86a0      	strh	r0, [r4, #52]	@ 0x34
 801468e:	695b      	ldr	r3, [r3, #20]
 8014690:	4620      	mov	r0, r4
 8014692:	4798      	blx	r3
 8014694:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	@ 0x36
 8014698:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	@ 0x34
 801469c:	4620      	mov	r0, r4
 801469e:	f7fb ffb4 	bl	801060a <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80146a2:	f894 1089 	ldrb.w	r1, [r4, #137]	@ 0x89
 80146a6:	4620      	mov	r0, r4
 80146a8:	42a9      	cmp	r1, r5
 80146aa:	bf28      	it	cs
 80146ac:	4629      	movcs	r1, r5
 80146ae:	f7ff ffbb 	bl	8014628 <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh>
 80146b2:	6823      	ldr	r3, [r4, #0]
 80146b4:	4620      	mov	r0, r4
 80146b6:	695b      	ldr	r3, [r3, #20]
 80146b8:	4798      	blx	r3
 80146ba:	b003      	add	sp, #12
 80146bc:	bd30      	pop	{r4, r5, pc}

080146be <_ZN8touchgfx14SwipeContainer13PageIndicator7goRightEv>:
 80146be:	f890 1089 	ldrb.w	r1, [r0, #137]	@ 0x89
 80146c2:	f890 2088 	ldrb.w	r2, [r0, #136]	@ 0x88
 80146c6:	3101      	adds	r1, #1
 80146c8:	fb91 f3f2 	sdiv	r3, r1, r2
 80146cc:	fb02 1113 	mls	r1, r2, r3, r1
 80146d0:	b2c9      	uxtb	r1, r1
 80146d2:	f7ff bfa9 	b.w	8014628 <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh>

080146d6 <_ZN8touchgfx14SwipeContainer11animateLeftEv>:
 80146d6:	b510      	push	{r4, lr}
 80146d8:	4604      	mov	r4, r0
 80146da:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 80146de:	280a      	cmp	r0, #10
 80146e0:	d813      	bhi.n	801470a <_ZN8touchgfx14SwipeContainer11animateLeftEv+0x34>
 80146e2:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80146e4:	8922      	ldrh	r2, [r4, #8]
 80146e6:	2100      	movs	r1, #0
 80146e8:	441a      	add	r2, r3
 80146ea:	b212      	sxth	r2, r2
 80146ec:	230a      	movs	r3, #10
 80146ee:	f007 fa71 	bl	801bbd4 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 80146f2:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80146f4:	1a18      	subs	r0, r3, r0
 80146f6:	8620      	strh	r0, [r4, #48]	@ 0x30
 80146f8:	4620      	mov	r0, r4
 80146fa:	f7ff fea5 	bl	8014448 <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 80146fe:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8014702:	3301      	adds	r3, #1
 8014704:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014708:	bd10      	pop	{r4, pc}
 801470a:	2307      	movs	r3, #7
 801470c:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8014710:	2300      	movs	r3, #0
 8014712:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 8014716:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801471a:	8623      	strh	r3, [r4, #48]	@ 0x30
 801471c:	f7ff ffcf 	bl	80146be <_ZN8touchgfx14SwipeContainer13PageIndicator7goRightEv>
 8014720:	e7ea      	b.n	80146f8 <_ZN8touchgfx14SwipeContainer11animateLeftEv+0x22>

08014722 <_ZN8touchgfx14SwipeContainer13PageIndicator6goLeftEv>:
 8014722:	f890 2088 	ldrb.w	r2, [r0, #136]	@ 0x88
 8014726:	f890 1089 	ldrb.w	r1, [r0, #137]	@ 0x89
 801472a:	4411      	add	r1, r2
 801472c:	3901      	subs	r1, #1
 801472e:	fb91 f3f2 	sdiv	r3, r1, r2
 8014732:	fb02 1113 	mls	r1, r2, r3, r1
 8014736:	b2c9      	uxtb	r1, r1
 8014738:	f7ff bf76 	b.w	8014628 <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh>

0801473c <_ZN8touchgfx14SwipeContainer12animateRightEv>:
 801473c:	b510      	push	{r4, lr}
 801473e:	4604      	mov	r4, r0
 8014740:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 8014744:	280a      	cmp	r0, #10
 8014746:	d813      	bhi.n	8014770 <_ZN8touchgfx14SwipeContainer12animateRightEv+0x34>
 8014748:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801474a:	8922      	ldrh	r2, [r4, #8]
 801474c:	2100      	movs	r1, #0
 801474e:	1ad2      	subs	r2, r2, r3
 8014750:	b212      	sxth	r2, r2
 8014752:	230a      	movs	r3, #10
 8014754:	f007 fa3e 	bl	801bbd4 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8014758:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801475a:	4418      	add	r0, r3
 801475c:	8620      	strh	r0, [r4, #48]	@ 0x30
 801475e:	4620      	mov	r0, r4
 8014760:	f7ff fe72 	bl	8014448 <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 8014764:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8014768:	3301      	adds	r3, #1
 801476a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801476e:	bd10      	pop	{r4, pc}
 8014770:	2307      	movs	r3, #7
 8014772:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8014776:	2300      	movs	r3, #0
 8014778:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 801477c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014780:	8623      	strh	r3, [r4, #48]	@ 0x30
 8014782:	f7ff ffce 	bl	8014722 <_ZN8touchgfx14SwipeContainer13PageIndicator6goLeftEv>
 8014786:	e7ea      	b.n	801475e <_ZN8touchgfx14SwipeContainer12animateRightEv+0x22>

08014788 <_ZN8touchgfx14SwipeContainer15setSelectedPageEh>:
 8014788:	b510      	push	{r4, lr}
 801478a:	f890 30f4 	ldrb.w	r3, [r0, #244]	@ 0xf4
 801478e:	4604      	mov	r4, r0
 8014790:	428b      	cmp	r3, r1
 8014792:	d907      	bls.n	80147a4 <_ZN8touchgfx14SwipeContainer15setSelectedPageEh+0x1c>
 8014794:	306c      	adds	r0, #108	@ 0x6c
 8014796:	f7ff ff47 	bl	8014628 <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh>
 801479a:	4620      	mov	r0, r4
 801479c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80147a0:	f7ff be52 	b.w	8014448 <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 80147a4:	bd10      	pop	{r4, pc}

080147a6 <_ZN8touchgfx14SwipeContainer3addERNS_8DrawableE>:
 80147a6:	b538      	push	{r3, r4, r5, lr}
 80147a8:	4604      	mov	r4, r0
 80147aa:	460d      	mov	r5, r1
 80147ac:	303c      	adds	r0, #60	@ 0x3c
 80147ae:	f000 f9fd 	bl	8014bac <_ZN8touchgfx10ListLayout3addERNS_8DrawableE>
 80147b2:	f894 10f4 	ldrb.w	r1, [r4, #244]	@ 0xf4
 80147b6:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 80147ba:	3101      	adds	r1, #1
 80147bc:	b2c9      	uxtb	r1, r1
 80147be:	f7ff ff52 	bl	8014666 <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh>
 80147c2:	f894 10f5 	ldrb.w	r1, [r4, #245]	@ 0xf5
 80147c6:	4620      	mov	r0, r4
 80147c8:	f7ff ffde 	bl	8014788 <_ZN8touchgfx14SwipeContainer15setSelectedPageEh>
 80147cc:	f9b5 200a 	ldrsh.w	r2, [r5, #10]
 80147d0:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80147d4:	4620      	mov	r0, r4
 80147d6:	f7fb ff18 	bl	801060a <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80147da:	bd38      	pop	{r3, r4, r5, pc}

080147dc <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE>:
 80147dc:	b538      	push	{r3, r4, r5, lr}
 80147de:	f890 30f4 	ldrb.w	r3, [r0, #244]	@ 0xf4
 80147e2:	4604      	mov	r4, r0
 80147e4:	b1e3      	cbz	r3, 8014820 <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE+0x44>
 80147e6:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 80147e8:	b1d3      	cbz	r3, 8014820 <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE+0x44>
 80147ea:	428b      	cmp	r3, r1
 80147ec:	d125      	bne.n	801483a <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE+0x5e>
 80147ee:	4619      	mov	r1, r3
 80147f0:	f104 003c 	add.w	r0, r4, #60	@ 0x3c
 80147f4:	f000 fa5a 	bl	8014cac <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE>
 80147f8:	f894 10f4 	ldrb.w	r1, [r4, #244]	@ 0xf4
 80147fc:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 8014800:	3901      	subs	r1, #1
 8014802:	b2c9      	uxtb	r1, r1
 8014804:	f7ff ff2f 	bl	8014666 <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh>
 8014808:	f894 50f4 	ldrb.w	r5, [r4, #244]	@ 0xf4
 801480c:	b94d      	cbnz	r5, 8014822 <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE+0x46>
 801480e:	6823      	ldr	r3, [r4, #0]
 8014810:	4620      	mov	r0, r4
 8014812:	695b      	ldr	r3, [r3, #20]
 8014814:	4798      	blx	r3
 8014816:	462a      	mov	r2, r5
 8014818:	4629      	mov	r1, r5
 801481a:	4620      	mov	r0, r4
 801481c:	f7fb fef5 	bl	801060a <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8014820:	bd38      	pop	{r3, r4, r5, pc}
 8014822:	f894 10f5 	ldrb.w	r1, [r4, #245]	@ 0xf5
 8014826:	3d01      	subs	r5, #1
 8014828:	42a9      	cmp	r1, r5
 801482a:	bfa8      	it	ge
 801482c:	4629      	movge	r1, r5
 801482e:	4620      	mov	r0, r4
 8014830:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014834:	b2c9      	uxtb	r1, r1
 8014836:	f7ff bfa7 	b.w	8014788 <_ZN8touchgfx14SwipeContainer15setSelectedPageEh>
 801483a:	699b      	ldr	r3, [r3, #24]
 801483c:	e7d4      	b.n	80147e8 <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE+0xc>

0801483e <_ZN8touchgfx14SwipeContainer21animateLeftWithButtonEv>:
 801483e:	b510      	push	{r4, lr}
 8014840:	4604      	mov	r4, r0
 8014842:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 8014846:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801484a:	4298      	cmp	r0, r3
 801484c:	d812      	bhi.n	8014874 <_ZN8touchgfx14SwipeContainer21animateLeftWithButtonEv+0x36>
 801484e:	8e61      	ldrh	r1, [r4, #50]	@ 0x32
 8014850:	8922      	ldrh	r2, [r4, #8]
 8014852:	440a      	add	r2, r1
 8014854:	b212      	sxth	r2, r2
 8014856:	2100      	movs	r1, #0
 8014858:	f007 f9bc 	bl	801bbd4 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 801485c:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801485e:	1a18      	subs	r0, r3, r0
 8014860:	8620      	strh	r0, [r4, #48]	@ 0x30
 8014862:	4620      	mov	r0, r4
 8014864:	f7ff fdf0 	bl	8014448 <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 8014868:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801486c:	3301      	adds	r3, #1
 801486e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014872:	bd10      	pop	{r4, pc}
 8014874:	2307      	movs	r3, #7
 8014876:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 801487a:	2300      	movs	r3, #0
 801487c:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 8014880:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014884:	8623      	strh	r3, [r4, #48]	@ 0x30
 8014886:	f7ff ff1a 	bl	80146be <_ZN8touchgfx14SwipeContainer13PageIndicator7goRightEv>
 801488a:	e7ea      	b.n	8014862 <_ZN8touchgfx14SwipeContainer21animateLeftWithButtonEv+0x24>

0801488c <_ZN8touchgfx14SwipeContainer22animateRightWithButtonEv>:
 801488c:	b510      	push	{r4, lr}
 801488e:	4604      	mov	r4, r0
 8014890:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 8014894:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8014898:	4298      	cmp	r0, r3
 801489a:	d812      	bhi.n	80148c2 <_ZN8touchgfx14SwipeContainer22animateRightWithButtonEv+0x36>
 801489c:	8e61      	ldrh	r1, [r4, #50]	@ 0x32
 801489e:	8922      	ldrh	r2, [r4, #8]
 80148a0:	1a52      	subs	r2, r2, r1
 80148a2:	b212      	sxth	r2, r2
 80148a4:	2100      	movs	r1, #0
 80148a6:	f007 f995 	bl	801bbd4 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 80148aa:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80148ac:	4418      	add	r0, r3
 80148ae:	8620      	strh	r0, [r4, #48]	@ 0x30
 80148b0:	4620      	mov	r0, r4
 80148b2:	f7ff fdc9 	bl	8014448 <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 80148b6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80148ba:	3301      	adds	r3, #1
 80148bc:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80148c0:	bd10      	pop	{r4, pc}
 80148c2:	2307      	movs	r3, #7
 80148c4:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 80148c8:	2300      	movs	r3, #0
 80148ca:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 80148ce:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80148d2:	8623      	strh	r3, [r4, #48]	@ 0x30
 80148d4:	f7ff ff25 	bl	8014722 <_ZN8touchgfx14SwipeContainer13PageIndicator6goLeftEv>
 80148d8:	e7ea      	b.n	80148b0 <_ZN8touchgfx14SwipeContainer22animateRightWithButtonEv+0x24>

080148da <_ZN8touchgfx14SwipeContainer13animateToPageEv>:
 80148da:	b538      	push	{r3, r4, r5, lr}
 80148dc:	4604      	mov	r4, r0
 80148de:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 80148e2:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80148e6:	f994 1039 	ldrsb.w	r1, [r4, #57]	@ 0x39
 80148ea:	4298      	cmp	r0, r3
 80148ec:	d814      	bhi.n	8014918 <_ZN8touchgfx14SwipeContainer13animateToPageEv+0x3e>
 80148ee:	f9b4 5008 	ldrsh.w	r5, [r4, #8]
 80148f2:	8e62      	ldrh	r2, [r4, #50]	@ 0x32
 80148f4:	fb05 2201 	mla	r2, r5, r1, r2
 80148f8:	2100      	movs	r1, #0
 80148fa:	b212      	sxth	r2, r2
 80148fc:	f007 f96a 	bl	801bbd4 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8014900:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8014902:	1a18      	subs	r0, r3, r0
 8014904:	8620      	strh	r0, [r4, #48]	@ 0x30
 8014906:	4620      	mov	r0, r4
 8014908:	f7ff fd9e 	bl	8014448 <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 801490c:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8014910:	3301      	adds	r3, #1
 8014912:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014916:	bd38      	pop	{r3, r4, r5, pc}
 8014918:	2307      	movs	r3, #7
 801491a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 801491e:	2300      	movs	r3, #0
 8014920:	f894 20f5 	ldrb.w	r2, [r4, #245]	@ 0xf5
 8014924:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014928:	4411      	add	r1, r2
 801492a:	8623      	strh	r3, [r4, #48]	@ 0x30
 801492c:	b2c9      	uxtb	r1, r1
 801492e:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 8014932:	f7ff fe79 	bl	8014628 <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh>
 8014936:	e7e6      	b.n	8014906 <_ZN8touchgfx14SwipeContainer13animateToPageEv+0x2c>

08014938 <_ZN8touchgfx14SwipeContainer15handleTickEventEv>:
 8014938:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 801493c:	b90b      	cbnz	r3, 8014942 <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0xa>
 801493e:	f7ff bdb0 	b.w	80144a2 <_ZN8touchgfx14SwipeContainer25animateSwipeCancelledLeftEv>
 8014942:	2b01      	cmp	r3, #1
 8014944:	d101      	bne.n	801494a <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0x12>
 8014946:	f7ff bdce 	b.w	80144e6 <_ZN8touchgfx14SwipeContainer26animateSwipeCancelledRightEv>
 801494a:	2b02      	cmp	r3, #2
 801494c:	d101      	bne.n	8014952 <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0x1a>
 801494e:	f7ff bec2 	b.w	80146d6 <_ZN8touchgfx14SwipeContainer11animateLeftEv>
 8014952:	2b03      	cmp	r3, #3
 8014954:	d101      	bne.n	801495a <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0x22>
 8014956:	f7ff bef1 	b.w	801473c <_ZN8touchgfx14SwipeContainer12animateRightEv>
 801495a:	2b04      	cmp	r3, #4
 801495c:	d101      	bne.n	8014962 <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0x2a>
 801495e:	f7ff bf6e 	b.w	801483e <_ZN8touchgfx14SwipeContainer21animateLeftWithButtonEv>
 8014962:	2b05      	cmp	r3, #5
 8014964:	d101      	bne.n	801496a <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0x32>
 8014966:	f7ff bf91 	b.w	801488c <_ZN8touchgfx14SwipeContainer22animateRightWithButtonEv>
 801496a:	2b06      	cmp	r3, #6
 801496c:	d101      	bne.n	8014972 <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0x3a>
 801496e:	f7ff bfb4 	b.w	80148da <_ZN8touchgfx14SwipeContainer13animateToPageEv>
 8014972:	4770      	bx	lr

08014974 <_ZNK8touchgfx10ListLayout12getDirectionEv>:
 8014974:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 8014978:	4770      	bx	lr

0801497a <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE>:
 801497a:	b538      	push	{r3, r4, r5, lr}
 801497c:	7882      	ldrb	r2, [r0, #2]
 801497e:	4604      	mov	r4, r0
 8014980:	460d      	mov	r5, r1
 8014982:	6843      	ldr	r3, [r0, #4]
 8014984:	b98a      	cbnz	r2, 80149aa <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x30>
 8014986:	4299      	cmp	r1, r3
 8014988:	d101      	bne.n	801498e <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x14>
 801498a:	2301      	movs	r3, #1
 801498c:	7083      	strb	r3, [r0, #2]
 801498e:	6863      	ldr	r3, [r4, #4]
 8014990:	42ab      	cmp	r3, r5
 8014992:	d009      	beq.n	80149a8 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x2e>
 8014994:	7a23      	ldrb	r3, [r4, #8]
 8014996:	2b01      	cmp	r3, #1
 8014998:	d11b      	bne.n	80149d2 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x58>
 801499a:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 801499e:	f9b4 2000 	ldrsh.w	r2, [r4]
 80149a2:	429a      	cmp	r2, r3
 80149a4:	bfb8      	it	lt
 80149a6:	8023      	strhlt	r3, [r4, #0]
 80149a8:	bd38      	pop	{r3, r4, r5, pc}
 80149aa:	7a02      	ldrb	r2, [r0, #8]
 80149ac:	2a01      	cmp	r2, #1
 80149ae:	d108      	bne.n	80149c2 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x48>
 80149b0:	895b      	ldrh	r3, [r3, #10]
 80149b2:	88c9      	ldrh	r1, [r1, #6]
 80149b4:	1ac9      	subs	r1, r1, r3
 80149b6:	682b      	ldr	r3, [r5, #0]
 80149b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80149ba:	b209      	sxth	r1, r1
 80149bc:	4628      	mov	r0, r5
 80149be:	4798      	blx	r3
 80149c0:	e7e5      	b.n	801498e <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x14>
 80149c2:	2a02      	cmp	r2, #2
 80149c4:	d1e3      	bne.n	801498e <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x14>
 80149c6:	891b      	ldrh	r3, [r3, #8]
 80149c8:	8889      	ldrh	r1, [r1, #4]
 80149ca:	1ac9      	subs	r1, r1, r3
 80149cc:	682b      	ldr	r3, [r5, #0]
 80149ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80149d0:	e7f3      	b.n	80149ba <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x40>
 80149d2:	2b02      	cmp	r3, #2
 80149d4:	d1e8      	bne.n	80149a8 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x2e>
 80149d6:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 80149da:	e7e0      	b.n	801499e <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x24>

080149dc <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvED1Ev>:
 80149dc:	4770      	bx	lr

080149de <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvED1Ev>:
 80149de:	4770      	bx	lr

080149e0 <_ZN8touchgfx10ListLayoutD1Ev>:
 80149e0:	4770      	bx	lr

080149e2 <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7executeES3_>:
 80149e2:	4603      	mov	r3, r0
 80149e4:	b430      	push	{r4, r5}
 80149e6:	68c5      	ldr	r5, [r0, #12]
 80149e8:	6844      	ldr	r4, [r0, #4]
 80149ea:	106a      	asrs	r2, r5, #1
 80149ec:	07ed      	lsls	r5, r5, #31
 80149ee:	eb04 0002 	add.w	r0, r4, r2
 80149f2:	689b      	ldr	r3, [r3, #8]
 80149f4:	bf48      	it	mi
 80149f6:	58a2      	ldrmi	r2, [r4, r2]
 80149f8:	bc30      	pop	{r4, r5}
 80149fa:	bf48      	it	mi
 80149fc:	58d3      	ldrmi	r3, [r2, r3]
 80149fe:	4718      	bx	r3

08014a00 <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv>:
 8014a00:	6843      	ldr	r3, [r0, #4]
 8014a02:	b12b      	cbz	r3, 8014a10 <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv+0x10>
 8014a04:	6883      	ldr	r3, [r0, #8]
 8014a06:	b92b      	cbnz	r3, 8014a14 <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv+0x14>
 8014a08:	68c0      	ldr	r0, [r0, #12]
 8014a0a:	f000 0001 	and.w	r0, r0, #1
 8014a0e:	4770      	bx	lr
 8014a10:	4618      	mov	r0, r3
 8014a12:	4770      	bx	lr
 8014a14:	2001      	movs	r0, #1
 8014a16:	4770      	bx	lr

08014a18 <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7executeES3_>:
 8014a18:	4603      	mov	r3, r0
 8014a1a:	b430      	push	{r4, r5}
 8014a1c:	68c5      	ldr	r5, [r0, #12]
 8014a1e:	6844      	ldr	r4, [r0, #4]
 8014a20:	106a      	asrs	r2, r5, #1
 8014a22:	07ed      	lsls	r5, r5, #31
 8014a24:	eb04 0002 	add.w	r0, r4, r2
 8014a28:	689b      	ldr	r3, [r3, #8]
 8014a2a:	bf48      	it	mi
 8014a2c:	58a2      	ldrmi	r2, [r4, r2]
 8014a2e:	bc30      	pop	{r4, r5}
 8014a30:	bf48      	it	mi
 8014a32:	58d3      	ldrmi	r3, [r2, r3]
 8014a34:	4718      	bx	r3

08014a36 <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv>:
 8014a36:	6843      	ldr	r3, [r0, #4]
 8014a38:	b12b      	cbz	r3, 8014a46 <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv+0x10>
 8014a3a:	6883      	ldr	r3, [r0, #8]
 8014a3c:	b92b      	cbnz	r3, 8014a4a <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv+0x14>
 8014a3e:	68c0      	ldr	r0, [r0, #12]
 8014a40:	f000 0001 	and.w	r0, r0, #1
 8014a44:	4770      	bx	lr
 8014a46:	4618      	mov	r0, r3
 8014a48:	4770      	bx	lr
 8014a4a:	2001      	movs	r0, #1
 8014a4c:	4770      	bx	lr

08014a4e <_ZN8touchgfx10ListLayoutD0Ev>:
 8014a4e:	b510      	push	{r4, lr}
 8014a50:	4604      	mov	r4, r0
 8014a52:	2130      	movs	r1, #48	@ 0x30
 8014a54:	f017 f919 	bl	802bc8a <_ZdlPvj>
 8014a58:	4620      	mov	r0, r4
 8014a5a:	bd10      	pop	{r4, pc}

08014a5c <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvED0Ev>:
 8014a5c:	b510      	push	{r4, lr}
 8014a5e:	4604      	mov	r4, r0
 8014a60:	2110      	movs	r1, #16
 8014a62:	f017 f912 	bl	802bc8a <_ZdlPvj>
 8014a66:	4620      	mov	r0, r4
 8014a68:	bd10      	pop	{r4, pc}

08014a6a <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvED0Ev>:
 8014a6a:	b510      	push	{r4, lr}
 8014a6c:	4604      	mov	r4, r0
 8014a6e:	2110      	movs	r1, #16
 8014a70:	f017 f90b 	bl	802bc8a <_ZdlPvj>
 8014a74:	4620      	mov	r0, r4
 8014a76:	bd10      	pop	{r4, pc}

08014a78 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE>:
 8014a78:	4603      	mov	r3, r0
 8014a7a:	789a      	ldrb	r2, [r3, #2]
 8014a7c:	4608      	mov	r0, r1
 8014a7e:	b992      	cbnz	r2, 8014aa6 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x2e>
 8014a80:	685a      	ldr	r2, [r3, #4]
 8014a82:	428a      	cmp	r2, r1
 8014a84:	d102      	bne.n	8014a8c <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x14>
 8014a86:	2201      	movs	r2, #1
 8014a88:	709a      	strb	r2, [r3, #2]
 8014a8a:	4770      	bx	lr
 8014a8c:	7a1a      	ldrb	r2, [r3, #8]
 8014a8e:	2a01      	cmp	r2, #1
 8014a90:	d104      	bne.n	8014a9c <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x24>
 8014a92:	88ca      	ldrh	r2, [r1, #6]
 8014a94:	8949      	ldrh	r1, [r1, #10]
 8014a96:	440a      	add	r2, r1
 8014a98:	801a      	strh	r2, [r3, #0]
 8014a9a:	4770      	bx	lr
 8014a9c:	2a02      	cmp	r2, #2
 8014a9e:	d116      	bne.n	8014ace <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x56>
 8014aa0:	888a      	ldrh	r2, [r1, #4]
 8014aa2:	8909      	ldrh	r1, [r1, #8]
 8014aa4:	e7f7      	b.n	8014a96 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x1e>
 8014aa6:	7a1a      	ldrb	r2, [r3, #8]
 8014aa8:	2a01      	cmp	r2, #1
 8014aaa:	d107      	bne.n	8014abc <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x44>
 8014aac:	685b      	ldr	r3, [r3, #4]
 8014aae:	8959      	ldrh	r1, [r3, #10]
 8014ab0:	88c3      	ldrh	r3, [r0, #6]
 8014ab2:	4419      	add	r1, r3
 8014ab4:	6803      	ldr	r3, [r0, #0]
 8014ab6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014ab8:	b209      	sxth	r1, r1
 8014aba:	4718      	bx	r3
 8014abc:	2a02      	cmp	r2, #2
 8014abe:	d106      	bne.n	8014ace <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x56>
 8014ac0:	685b      	ldr	r3, [r3, #4]
 8014ac2:	8919      	ldrh	r1, [r3, #8]
 8014ac4:	8883      	ldrh	r3, [r0, #4]
 8014ac6:	4419      	add	r1, r3
 8014ac8:	6803      	ldr	r3, [r0, #0]
 8014aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014acc:	e7f4      	b.n	8014ab8 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x40>
 8014ace:	4770      	bx	lr

08014ad0 <_ZN8touchgfx10ListLayout9removeAllEv>:
 8014ad0:	2200      	movs	r2, #0
 8014ad2:	b510      	push	{r4, lr}
 8014ad4:	4604      	mov	r4, r0
 8014ad6:	85c2      	strh	r2, [r0, #46]	@ 0x2e
 8014ad8:	4611      	mov	r1, r2
 8014ada:	f7fb fd96 	bl	801060a <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8014ade:	4620      	mov	r0, r4
 8014ae0:	f7ff f9b9 	bl	8013e56 <_ZN8touchgfx9Container9removeAllEv>
 8014ae4:	6960      	ldr	r0, [r4, #20]
 8014ae6:	b120      	cbz	r0, 8014af2 <_ZN8touchgfx10ListLayout9removeAllEv+0x22>
 8014ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014aec:	6803      	ldr	r3, [r0, #0]
 8014aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014af0:	4718      	bx	r3
 8014af2:	bd10      	pop	{r4, pc}

08014af4 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE>:
 8014af4:	b530      	push	{r4, r5, lr}
 8014af6:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8014afa:	b085      	sub	sp, #20
 8014afc:	428b      	cmp	r3, r1
 8014afe:	4604      	mov	r4, r0
 8014b00:	d017      	beq.n	8014b32 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x3e>
 8014b02:	2500      	movs	r5, #0
 8014b04:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c
 8014b08:	85c5      	strh	r5, [r0, #46]	@ 0x2e
 8014b0a:	462a      	mov	r2, r5
 8014b0c:	4629      	mov	r1, r5
 8014b0e:	f7fb fd7c 	bl	801060a <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8014b12:	4b09      	ldr	r3, [pc, #36]	@ (8014b38 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x44>)
 8014b14:	4620      	mov	r0, r4
 8014b16:	e9cd 3400 	strd	r3, r4, [sp]
 8014b1a:	4b08      	ldr	r3, [pc, #32]	@ (8014b3c <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x48>)
 8014b1c:	4669      	mov	r1, sp
 8014b1e:	e9cd 3502 	strd	r3, r5, [sp, #8]
 8014b22:	6823      	ldr	r3, [r4, #0]
 8014b24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014b26:	4798      	blx	r3
 8014b28:	6960      	ldr	r0, [r4, #20]
 8014b2a:	b110      	cbz	r0, 8014b32 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x3e>
 8014b2c:	6803      	ldr	r3, [r0, #0]
 8014b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014b30:	4798      	blx	r3
 8014b32:	b005      	add	sp, #20
 8014b34:	bd30      	pop	{r4, r5, pc}
 8014b36:	bf00      	nop
 8014b38:	0802f558 	.word	0x0802f558
 8014b3c:	08014ba5 	.word	0x08014ba5

08014b40 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs>:
 8014b40:	b538      	push	{r3, r4, r5, lr}
 8014b42:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8014b46:	460d      	mov	r5, r1
 8014b48:	2b01      	cmp	r3, #1
 8014b4a:	4604      	mov	r4, r0
 8014b4c:	4611      	mov	r1, r2
 8014b4e:	d002      	beq.n	8014b56 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x16>
 8014b50:	2b02      	cmp	r3, #2
 8014b52:	d015      	beq.n	8014b80 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x40>
 8014b54:	bd38      	pop	{r3, r4, r5, pc}
 8014b56:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 8014b5a:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8014b5e:	429a      	cmp	r2, r3
 8014b60:	bfb8      	it	lt
 8014b62:	8103      	strhlt	r3, [r0, #8]
 8014b64:	896a      	ldrh	r2, [r5, #10]
 8014b66:	8943      	ldrh	r3, [r0, #10]
 8014b68:	4413      	add	r3, r2
 8014b6a:	8143      	strh	r3, [r0, #10]
 8014b6c:	460a      	mov	r2, r1
 8014b6e:	4628      	mov	r0, r5
 8014b70:	2100      	movs	r1, #0
 8014b72:	f7fb fcee 	bl	8010552 <_ZN8touchgfx8Drawable5setXYEss>
 8014b76:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8014b78:	896a      	ldrh	r2, [r5, #10]
 8014b7a:	4413      	add	r3, r2
 8014b7c:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 8014b7e:	e7e9      	b.n	8014b54 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x14>
 8014b80:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 8014b84:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8014b88:	429a      	cmp	r2, r3
 8014b8a:	bfb8      	it	lt
 8014b8c:	8143      	strhlt	r3, [r0, #10]
 8014b8e:	892a      	ldrh	r2, [r5, #8]
 8014b90:	8903      	ldrh	r3, [r0, #8]
 8014b92:	4413      	add	r3, r2
 8014b94:	8103      	strh	r3, [r0, #8]
 8014b96:	2200      	movs	r2, #0
 8014b98:	4628      	mov	r0, r5
 8014b9a:	f7fb fcda 	bl	8010552 <_ZN8touchgfx8Drawable5setXYEss>
 8014b9e:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8014ba0:	892a      	ldrh	r2, [r5, #8]
 8014ba2:	e7ea      	b.n	8014b7a <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x3a>

08014ba4 <_ZN8touchgfx10ListLayout18internalAddElementERNS_8DrawableE>:
 8014ba4:	f9b0 202e 	ldrsh.w	r2, [r0, #46]	@ 0x2e
 8014ba8:	f7ff bfca 	b.w	8014b40 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs>

08014bac <_ZN8touchgfx10ListLayout3addERNS_8DrawableE>:
 8014bac:	b570      	push	{r4, r5, r6, lr}
 8014bae:	4604      	mov	r4, r0
 8014bb0:	460d      	mov	r5, r1
 8014bb2:	f7ff fff7 	bl	8014ba4 <_ZN8touchgfx10ListLayout18internalAddElementERNS_8DrawableE>
 8014bb6:	4620      	mov	r0, r4
 8014bb8:	4629      	mov	r1, r5
 8014bba:	f7ff f93f 	bl	8013e3c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014bbe:	6960      	ldr	r0, [r4, #20]
 8014bc0:	b120      	cbz	r0, 8014bcc <_ZN8touchgfx10ListLayout3addERNS_8DrawableE+0x20>
 8014bc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014bc6:	6803      	ldr	r3, [r0, #0]
 8014bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014bca:	4718      	bx	r3
 8014bcc:	bd70      	pop	{r4, r5, r6, pc}
	...

08014bd0 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_>:
 8014bd0:	b530      	push	{r4, r5, lr}
 8014bd2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8014bd4:	b089      	sub	sp, #36	@ 0x24
 8014bd6:	4604      	mov	r4, r0
 8014bd8:	4615      	mov	r5, r2
 8014bda:	b92b      	cbnz	r3, 8014be8 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x18>
 8014bdc:	6803      	ldr	r3, [r0, #0]
 8014bde:	4611      	mov	r1, r2
 8014be0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8014be2:	4798      	blx	r3
 8014be4:	b009      	add	sp, #36	@ 0x24
 8014be6:	bd30      	pop	{r4, r5, pc}
 8014be8:	f7ff f978 	bl	8013edc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>
 8014bec:	2300      	movs	r3, #0
 8014bee:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8014bf2:	f8ad 3004 	strh.w	r3, [sp, #4]
 8014bf6:	f88d 200c 	strb.w	r2, [sp, #12]
 8014bfa:	4a0e      	ldr	r2, [pc, #56]	@ (8014c34 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x64>)
 8014bfc:	f88d 3006 	strb.w	r3, [sp, #6]
 8014c00:	9204      	str	r2, [sp, #16]
 8014c02:	aa01      	add	r2, sp, #4
 8014c04:	9205      	str	r2, [sp, #20]
 8014c06:	4a0c      	ldr	r2, [pc, #48]	@ (8014c38 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x68>)
 8014c08:	a904      	add	r1, sp, #16
 8014c0a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014c0e:	6823      	ldr	r3, [r4, #0]
 8014c10:	4620      	mov	r0, r4
 8014c12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014c14:	9502      	str	r5, [sp, #8]
 8014c16:	4798      	blx	r3
 8014c18:	4620      	mov	r0, r4
 8014c1a:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8014c1e:	4629      	mov	r1, r5
 8014c20:	f7ff ff8e 	bl	8014b40 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs>
 8014c24:	6960      	ldr	r0, [r4, #20]
 8014c26:	2800      	cmp	r0, #0
 8014c28:	d0dc      	beq.n	8014be4 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x14>
 8014c2a:	6803      	ldr	r3, [r0, #0]
 8014c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014c2e:	4798      	blx	r3
 8014c30:	e7d8      	b.n	8014be4 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x14>
 8014c32:	bf00      	nop
 8014c34:	0802f570 	.word	0x0802f570
 8014c38:	08014a79 	.word	0x08014a79

08014c3c <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs>:
 8014c3c:	b538      	push	{r3, r4, r5, lr}
 8014c3e:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8014c42:	4604      	mov	r4, r0
 8014c44:	2b01      	cmp	r3, #1
 8014c46:	460d      	mov	r5, r1
 8014c48:	d002      	beq.n	8014c50 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x14>
 8014c4a:	2b02      	cmp	r3, #2
 8014c4c:	d018      	beq.n	8014c80 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x44>
 8014c4e:	bd38      	pop	{r3, r4, r5, pc}
 8014c50:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8014c54:	4293      	cmp	r3, r2
 8014c56:	bfc8      	it	gt
 8014c58:	8102      	strhgt	r2, [r0, #8]
 8014c5a:	894a      	ldrh	r2, [r1, #10]
 8014c5c:	8943      	ldrh	r3, [r0, #10]
 8014c5e:	1a9b      	subs	r3, r3, r2
 8014c60:	8143      	strh	r3, [r0, #10]
 8014c62:	680b      	ldr	r3, [r1, #0]
 8014c64:	4628      	mov	r0, r5
 8014c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014c68:	2100      	movs	r1, #0
 8014c6a:	4798      	blx	r3
 8014c6c:	682b      	ldr	r3, [r5, #0]
 8014c6e:	2100      	movs	r1, #0
 8014c70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014c72:	4628      	mov	r0, r5
 8014c74:	4798      	blx	r3
 8014c76:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8014c78:	896a      	ldrh	r2, [r5, #10]
 8014c7a:	1a9b      	subs	r3, r3, r2
 8014c7c:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 8014c7e:	e7e6      	b.n	8014c4e <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x12>
 8014c80:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8014c84:	4293      	cmp	r3, r2
 8014c86:	bfc8      	it	gt
 8014c88:	8142      	strhgt	r2, [r0, #10]
 8014c8a:	890a      	ldrh	r2, [r1, #8]
 8014c8c:	8903      	ldrh	r3, [r0, #8]
 8014c8e:	1a9b      	subs	r3, r3, r2
 8014c90:	8103      	strh	r3, [r0, #8]
 8014c92:	680b      	ldr	r3, [r1, #0]
 8014c94:	4628      	mov	r0, r5
 8014c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014c98:	2100      	movs	r1, #0
 8014c9a:	4798      	blx	r3
 8014c9c:	682b      	ldr	r3, [r5, #0]
 8014c9e:	2100      	movs	r1, #0
 8014ca0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014ca2:	4628      	mov	r0, r5
 8014ca4:	4798      	blx	r3
 8014ca6:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8014ca8:	892a      	ldrh	r2, [r5, #8]
 8014caa:	e7e6      	b.n	8014c7a <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x3e>

08014cac <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE>:
 8014cac:	2300      	movs	r3, #0
 8014cae:	b530      	push	{r4, r5, lr}
 8014cb0:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
 8014cb4:	b089      	sub	sp, #36	@ 0x24
 8014cb6:	f88d 200c 	strb.w	r2, [sp, #12]
 8014cba:	4a13      	ldr	r2, [pc, #76]	@ (8014d08 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x5c>)
 8014cbc:	f8ad 3004 	strh.w	r3, [sp, #4]
 8014cc0:	9204      	str	r2, [sp, #16]
 8014cc2:	aa01      	add	r2, sp, #4
 8014cc4:	9205      	str	r2, [sp, #20]
 8014cc6:	4a11      	ldr	r2, [pc, #68]	@ (8014d0c <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x60>)
 8014cc8:	f88d 3006 	strb.w	r3, [sp, #6]
 8014ccc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014cd0:	6803      	ldr	r3, [r0, #0]
 8014cd2:	9102      	str	r1, [sp, #8]
 8014cd4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014cd6:	460d      	mov	r5, r1
 8014cd8:	a904      	add	r1, sp, #16
 8014cda:	4604      	mov	r4, r0
 8014cdc:	4798      	blx	r3
 8014cde:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014ce2:	b14b      	cbz	r3, 8014cf8 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x4c>
 8014ce4:	4629      	mov	r1, r5
 8014ce6:	4620      	mov	r0, r4
 8014ce8:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8014cec:	f7ff ffa6 	bl	8014c3c <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs>
 8014cf0:	4629      	mov	r1, r5
 8014cf2:	4620      	mov	r0, r4
 8014cf4:	f7ff f8db 	bl	8013eae <_ZN8touchgfx9Container6removeERNS_8DrawableE>
 8014cf8:	6960      	ldr	r0, [r4, #20]
 8014cfa:	b110      	cbz	r0, 8014d02 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x56>
 8014cfc:	6803      	ldr	r3, [r0, #0]
 8014cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014d00:	4798      	blx	r3
 8014d02:	b009      	add	sp, #36	@ 0x24
 8014d04:	bd30      	pop	{r4, r5, pc}
 8014d06:	bf00      	nop
 8014d08:	0802f570 	.word	0x0802f570
 8014d0c:	0801497b 	.word	0x0801497b

08014d10 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8014d10:	b513      	push	{r0, r1, r4, lr}
 8014d12:	6803      	ldr	r3, [r0, #0]
 8014d14:	f8d3 40b4 	ldr.w	r4, [r3, #180]	@ 0xb4
 8014d18:	2300      	movs	r3, #0
 8014d1a:	e9cd 3300 	strd	r3, r3, [sp]
 8014d1e:	466b      	mov	r3, sp
 8014d20:	47a0      	blx	r4
 8014d22:	b002      	add	sp, #8
 8014d24:	bd10      	pop	{r4, pc}

08014d26 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8014d26:	2301      	movs	r3, #1
 8014d28:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8014d2c:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8014d30:	4770      	bx	lr

08014d32 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8014d32:	2301      	movs	r3, #1
 8014d34:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8014d38:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8014d3c:	4770      	bx	lr

08014d3e <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8014d3e:	2201      	movs	r2, #1
 8014d40:	6843      	ldr	r3, [r0, #4]
 8014d42:	725a      	strb	r2, [r3, #9]
 8014d44:	6840      	ldr	r0, [r0, #4]
 8014d46:	6803      	ldr	r3, [r0, #0]
 8014d48:	691b      	ldr	r3, [r3, #16]
 8014d4a:	4718      	bx	r3

08014d4c <_ZN8touchgfx3HAL8flushDMAEv>:
 8014d4c:	6840      	ldr	r0, [r0, #4]
 8014d4e:	6803      	ldr	r3, [r0, #0]
 8014d50:	689b      	ldr	r3, [r3, #8]
 8014d52:	4718      	bx	r3

08014d54 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8014d54:	b530      	push	{r4, r5, lr}
 8014d56:	b08b      	sub	sp, #44	@ 0x2c
 8014d58:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8014d5c:	6804      	ldr	r4, [r0, #0]
 8014d5e:	9509      	str	r5, [sp, #36]	@ 0x24
 8014d60:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 8014d64:	9508      	str	r5, [sp, #32]
 8014d66:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8014d6a:	9507      	str	r5, [sp, #28]
 8014d6c:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 8014d70:	9506      	str	r5, [sp, #24]
 8014d72:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8014d76:	9505      	str	r5, [sp, #20]
 8014d78:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8014d7c:	9504      	str	r5, [sp, #16]
 8014d7e:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 8014d82:	9503      	str	r5, [sp, #12]
 8014d84:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 8014d88:	9502      	str	r5, [sp, #8]
 8014d8a:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8014d8e:	e9cd 3500 	strd	r3, r5, [sp]
 8014d92:	4613      	mov	r3, r2
 8014d94:	6c24      	ldr	r4, [r4, #64]	@ 0x40
 8014d96:	2200      	movs	r2, #0
 8014d98:	47a0      	blx	r4
 8014d9a:	b00b      	add	sp, #44	@ 0x2c
 8014d9c:	bd30      	pop	{r4, r5, pc}
	...

08014da0 <_ZN8touchgfx3HAL10beginFrameEv>:
 8014da0:	4b04      	ldr	r3, [pc, #16]	@ (8014db4 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8014da2:	781b      	ldrb	r3, [r3, #0]
 8014da4:	b123      	cbz	r3, 8014db0 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8014da6:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 8014daa:	f080 0001 	eor.w	r0, r0, #1
 8014dae:	4770      	bx	lr
 8014db0:	2001      	movs	r0, #1
 8014db2:	4770      	bx	lr
 8014db4:	2005ba7a 	.word	0x2005ba7a

08014db8 <_ZN8touchgfx3HAL8endFrameEv>:
 8014db8:	b510      	push	{r4, lr}
 8014dba:	4604      	mov	r4, r0
 8014dbc:	6840      	ldr	r0, [r0, #4]
 8014dbe:	6803      	ldr	r3, [r0, #0]
 8014dc0:	689b      	ldr	r3, [r3, #8]
 8014dc2:	4798      	blx	r3
 8014dc4:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 8014dc8:	b113      	cbz	r3, 8014dd0 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8014dca:	2301      	movs	r3, #1
 8014dcc:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8014dd0:	bd10      	pop	{r4, pc}

08014dd2 <_ZN8touchgfx3HAL10initializeEv>:
 8014dd2:	b510      	push	{r4, lr}
 8014dd4:	4604      	mov	r4, r0
 8014dd6:	f7fc ff97 	bl	8011d08 <_ZN8touchgfx10OSWrappers10initializeEv>
 8014dda:	f7fc fc31 	bl	8011640 <_ZN8touchgfx4GPIO4initEv>
 8014dde:	6860      	ldr	r0, [r4, #4]
 8014de0:	6803      	ldr	r3, [r0, #0]
 8014de2:	68db      	ldr	r3, [r3, #12]
 8014de4:	4798      	blx	r3
 8014de6:	68e0      	ldr	r0, [r4, #12]
 8014de8:	6803      	ldr	r3, [r0, #0]
 8014dea:	689b      	ldr	r3, [r3, #8]
 8014dec:	4798      	blx	r3
 8014dee:	6823      	ldr	r3, [r4, #0]
 8014df0:	4620      	mov	r0, r4
 8014df2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014df6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014df8:	4718      	bx	r3

08014dfa <_ZN8touchgfx3HAL9taskEntryEv>:
 8014dfa:	4604      	mov	r4, r0
 8014dfc:	b508      	push	{r3, lr}
 8014dfe:	6803      	ldr	r3, [r0, #0]
 8014e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014e04:	4798      	blx	r3
 8014e06:	6823      	ldr	r3, [r4, #0]
 8014e08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014e0a:	4620      	mov	r0, r4
 8014e0c:	4798      	blx	r3
 8014e0e:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8014e12:	2b02      	cmp	r3, #2
 8014e14:	d001      	beq.n	8014e1a <_ZN8touchgfx3HAL9taskEntryEv+0x20>
 8014e16:	f7fc ffed 	bl	8011df4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8014e1a:	6823      	ldr	r3, [r4, #0]
 8014e1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014e1e:	e7f4      	b.n	8014e0a <_ZN8touchgfx3HAL9taskEntryEv+0x10>

08014e20 <_ZN8touchgfx3HAL4tickEv>:
 8014e20:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8014e22:	6803      	ldr	r3, [r0, #0]
 8014e24:	4604      	mov	r4, r0
 8014e26:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8014e2a:	4798      	blx	r3
 8014e2c:	4d60      	ldr	r5, [pc, #384]	@ (8014fb0 <_ZN8touchgfx3HAL4tickEv+0x190>)
 8014e2e:	2800      	cmp	r0, #0
 8014e30:	f000 809e 	beq.w	8014f70 <_ZN8touchgfx3HAL4tickEv+0x150>
 8014e34:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8014e38:	2b02      	cmp	r3, #2
 8014e3a:	d002      	beq.n	8014e42 <_ZN8touchgfx3HAL4tickEv+0x22>
 8014e3c:	2001      	movs	r0, #1
 8014e3e:	f7fc fc07 	bl	8011650 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8014e42:	2600      	movs	r6, #0
 8014e44:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 8014e48:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 8014e4c:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8014e50:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 8014e54:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 8014e58:	b133      	cbz	r3, 8014e68 <_ZN8touchgfx3HAL4tickEv+0x48>
 8014e5a:	6823      	ldr	r3, [r4, #0]
 8014e5c:	4620      	mov	r0, r4
 8014e5e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8014e62:	4798      	blx	r3
 8014e64:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8014e68:	2601      	movs	r6, #1
 8014e6a:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8014e6e:	6862      	ldr	r2, [r4, #4]
 8014e70:	f083 0301 	eor.w	r3, r3, #1
 8014e74:	7253      	strb	r3, [r2, #9]
 8014e76:	702e      	strb	r6, [r5, #0]
 8014e78:	f004 fc7e 	bl	8019778 <_ZN8touchgfx11Application11getInstanceEv>
 8014e7c:	6803      	ldr	r3, [r0, #0]
 8014e7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014e80:	4798      	blx	r3
 8014e82:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8014e86:	b90b      	cbnz	r3, 8014e8c <_ZN8touchgfx3HAL4tickEv+0x6c>
 8014e88:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 8014e8c:	f004 fc74 	bl	8019778 <_ZN8touchgfx11Application11getInstanceEv>
 8014e90:	6803      	ldr	r3, [r0, #0]
 8014e92:	695b      	ldr	r3, [r3, #20]
 8014e94:	4798      	blx	r3
 8014e96:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8014e98:	6803      	ldr	r3, [r0, #0]
 8014e9a:	691b      	ldr	r3, [r3, #16]
 8014e9c:	4798      	blx	r3
 8014e9e:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8014ea2:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 8014ea6:	3b01      	subs	r3, #1
 8014ea8:	b2db      	uxtb	r3, r3
 8014eaa:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8014eae:	b10a      	cbz	r2, 8014eb4 <_ZN8touchgfx3HAL4tickEv+0x94>
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d1eb      	bne.n	8014e8c <_ZN8touchgfx3HAL4tickEv+0x6c>
 8014eb4:	4a3f      	ldr	r2, [pc, #252]	@ (8014fb4 <_ZN8touchgfx3HAL4tickEv+0x194>)
 8014eb6:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 8014eba:	7813      	ldrb	r3, [r2, #0]
 8014ebc:	3301      	adds	r3, #1
 8014ebe:	b25b      	sxtb	r3, r3
 8014ec0:	4299      	cmp	r1, r3
 8014ec2:	7013      	strb	r3, [r2, #0]
 8014ec4:	dc10      	bgt.n	8014ee8 <_ZN8touchgfx3HAL4tickEv+0xc8>
 8014ec6:	2300      	movs	r3, #0
 8014ec8:	68e0      	ldr	r0, [r4, #12]
 8014eca:	7013      	strb	r3, [r2, #0]
 8014ecc:	6803      	ldr	r3, [r0, #0]
 8014ece:	aa03      	add	r2, sp, #12
 8014ed0:	68db      	ldr	r3, [r3, #12]
 8014ed2:	a902      	add	r1, sp, #8
 8014ed4:	4798      	blx	r3
 8014ed6:	6823      	ldr	r3, [r4, #0]
 8014ed8:	2800      	cmp	r0, #0
 8014eda:	d059      	beq.n	8014f90 <_ZN8touchgfx3HAL4tickEv+0x170>
 8014edc:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8014ee0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8014ee4:	4620      	mov	r0, r4
 8014ee6:	4798      	blx	r3
 8014ee8:	2300      	movs	r3, #0
 8014eea:	6960      	ldr	r0, [r4, #20]
 8014eec:	f88d 3007 	strb.w	r3, [sp, #7]
 8014ef0:	b158      	cbz	r0, 8014f0a <_ZN8touchgfx3HAL4tickEv+0xea>
 8014ef2:	6803      	ldr	r3, [r0, #0]
 8014ef4:	f10d 0107 	add.w	r1, sp, #7
 8014ef8:	68db      	ldr	r3, [r3, #12]
 8014efa:	4798      	blx	r3
 8014efc:	b128      	cbz	r0, 8014f0a <_ZN8touchgfx3HAL4tickEv+0xea>
 8014efe:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8014f00:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8014f04:	6803      	ldr	r3, [r0, #0]
 8014f06:	68db      	ldr	r3, [r3, #12]
 8014f08:	4798      	blx	r3
 8014f0a:	f104 001c 	add.w	r0, r4, #28
 8014f0e:	f016 f8bf 	bl	802b090 <_ZN8touchgfx8Gestures4tickEv>
 8014f12:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8014f16:	b30b      	cbz	r3, 8014f5c <_ZN8touchgfx3HAL4tickEv+0x13c>
 8014f18:	6920      	ldr	r0, [r4, #16]
 8014f1a:	6803      	ldr	r3, [r0, #0]
 8014f1c:	691b      	ldr	r3, [r3, #16]
 8014f1e:	4798      	blx	r3
 8014f20:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8014f22:	4606      	mov	r6, r0
 8014f24:	b903      	cbnz	r3, 8014f28 <_ZN8touchgfx3HAL4tickEv+0x108>
 8014f26:	6760      	str	r0, [r4, #116]	@ 0x74
 8014f28:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8014f2a:	4a23      	ldr	r2, [pc, #140]	@ (8014fb8 <_ZN8touchgfx3HAL4tickEv+0x198>)
 8014f2c:	1af3      	subs	r3, r6, r3
 8014f2e:	4293      	cmp	r3, r2
 8014f30:	d914      	bls.n	8014f5c <_ZN8touchgfx3HAL4tickEv+0x13c>
 8014f32:	6920      	ldr	r0, [r4, #16]
 8014f34:	6803      	ldr	r3, [r0, #0]
 8014f36:	699b      	ldr	r3, [r3, #24]
 8014f38:	4798      	blx	r3
 8014f3a:	2264      	movs	r2, #100	@ 0x64
 8014f3c:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8014f3e:	1af3      	subs	r3, r6, r3
 8014f40:	fbb3 f3f2 	udiv	r3, r3, r2
 8014f44:	fbb0 f0f3 	udiv	r0, r0, r3
 8014f48:	2800      	cmp	r0, #0
 8014f4a:	dc26      	bgt.n	8014f9a <_ZN8touchgfx3HAL4tickEv+0x17a>
 8014f4c:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 8014f50:	6920      	ldr	r0, [r4, #16]
 8014f52:	2100      	movs	r1, #0
 8014f54:	6803      	ldr	r3, [r0, #0]
 8014f56:	69db      	ldr	r3, [r3, #28]
 8014f58:	4798      	blx	r3
 8014f5a:	6766      	str	r6, [r4, #116]	@ 0x74
 8014f5c:	6823      	ldr	r3, [r4, #0]
 8014f5e:	4620      	mov	r0, r4
 8014f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8014f64:	4798      	blx	r3
 8014f66:	f004 fc07 	bl	8019778 <_ZN8touchgfx11Application11getInstanceEv>
 8014f6a:	6803      	ldr	r3, [r0, #0]
 8014f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014f6e:	4798      	blx	r3
 8014f70:	6823      	ldr	r3, [r4, #0]
 8014f72:	4620      	mov	r0, r4
 8014f74:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8014f78:	4798      	blx	r3
 8014f7a:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8014f7e:	2b02      	cmp	r3, #2
 8014f80:	d002      	beq.n	8014f88 <_ZN8touchgfx3HAL4tickEv+0x168>
 8014f82:	2001      	movs	r0, #1
 8014f84:	f7fc fb80 	bl	8011688 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8014f88:	2300      	movs	r3, #0
 8014f8a:	702b      	strb	r3, [r5, #0]
 8014f8c:	b004      	add	sp, #16
 8014f8e:	bd70      	pop	{r4, r5, r6, pc}
 8014f90:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8014f94:	4620      	mov	r0, r4
 8014f96:	4798      	blx	r3
 8014f98:	e7a6      	b.n	8014ee8 <_ZN8touchgfx3HAL4tickEv+0xc8>
 8014f9a:	2863      	cmp	r0, #99	@ 0x63
 8014f9c:	bfcb      	itete	gt
 8014f9e:	2300      	movgt	r3, #0
 8014fa0:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 8014fa4:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 8014fa8:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 8014fac:	e7d0      	b.n	8014f50 <_ZN8touchgfx3HAL4tickEv+0x130>
 8014fae:	bf00      	nop
 8014fb0:	2005ba80 	.word	0x2005ba80
 8014fb4:	2005ba81 	.word	0x2005ba81
 8014fb8:	05f5e100 	.word	0x05f5e100

08014fbc <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8014fbc:	b510      	push	{r4, lr}
 8014fbe:	4604      	mov	r4, r0
 8014fc0:	f7fc fee4 	bl	8011d8c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 8014fc4:	2200      	movs	r2, #0
 8014fc6:	6863      	ldr	r3, [r4, #4]
 8014fc8:	729a      	strb	r2, [r3, #10]
 8014fca:	bd10      	pop	{r4, pc}

08014fcc <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8014fcc:	65c1      	str	r1, [r0, #92]	@ 0x5c
 8014fce:	301c      	adds	r0, #28
 8014fd0:	f016 b85c 	b.w	802b08c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08014fd4 <_ZN8touchgfx3HAL5touchEll>:
 8014fd4:	b530      	push	{r4, r5, lr}
 8014fd6:	4604      	mov	r4, r0
 8014fd8:	b087      	sub	sp, #28
 8014fda:	a804      	add	r0, sp, #16
 8014fdc:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8014fe0:	f004 f9bc 	bl	801935c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8014fe4:	9b04      	ldr	r3, [sp, #16]
 8014fe6:	a906      	add	r1, sp, #24
 8014fe8:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014fec:	9b05      	ldr	r3, [sp, #20]
 8014fee:	a803      	add	r0, sp, #12
 8014ff0:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8014ff4:	f004 fa04 	bl	8019400 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8014ff8:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 8014ffc:	f104 001c 	add.w	r0, r4, #28
 8015000:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8015004:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8015008:	b189      	cbz	r1, 801502e <_ZN8touchgfx3HAL5touchEll+0x5a>
 801500a:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 801500e:	9300      	str	r3, [sp, #0]
 8015010:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 8015014:	4613      	mov	r3, r2
 8015016:	462a      	mov	r2, r5
 8015018:	f016 f848 	bl	802b0ac <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 801501c:	b128      	cbz	r0, 801502a <_ZN8touchgfx3HAL5touchEll+0x56>
 801501e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8015022:	6623      	str	r3, [r4, #96]	@ 0x60
 8015024:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8015028:	6663      	str	r3, [r4, #100]	@ 0x64
 801502a:	b007      	add	sp, #28
 801502c:	bd30      	pop	{r4, r5, pc}
 801502e:	f016 f87d 	bl	802b12c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8015032:	2301      	movs	r3, #1
 8015034:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8015038:	e7f1      	b.n	801501e <_ZN8touchgfx3HAL5touchEll+0x4a>

0801503a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 801503a:	b510      	push	{r4, lr}
 801503c:	2b00      	cmp	r3, #0
 801503e:	d046      	beq.n	80150ce <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8015040:	ea81 0002 	eor.w	r0, r1, r2
 8015044:	07c4      	lsls	r4, r0, #31
 8015046:	d508      	bpl.n	801505a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8015048:	440b      	add	r3, r1
 801504a:	3a01      	subs	r2, #1
 801504c:	428b      	cmp	r3, r1
 801504e:	d93e      	bls.n	80150ce <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8015050:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8015054:	f801 0b01 	strb.w	r0, [r1], #1
 8015058:	e7f8      	b.n	801504c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 801505a:	07d0      	lsls	r0, r2, #31
 801505c:	bf42      	ittt	mi
 801505e:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8015062:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8015066:	f801 0b01 	strbmi.w	r0, [r1], #1
 801506a:	2b01      	cmp	r3, #1
 801506c:	d911      	bls.n	8015092 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801506e:	ea81 0402 	eor.w	r4, r1, r2
 8015072:	07a4      	lsls	r4, r4, #30
 8015074:	4610      	mov	r0, r2
 8015076:	d022      	beq.n	80150be <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8015078:	f023 0401 	bic.w	r4, r3, #1
 801507c:	440c      	add	r4, r1
 801507e:	428c      	cmp	r4, r1
 8015080:	4602      	mov	r2, r0
 8015082:	d904      	bls.n	801508e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8015084:	8812      	ldrh	r2, [r2, #0]
 8015086:	3002      	adds	r0, #2
 8015088:	f821 2b02 	strh.w	r2, [r1], #2
 801508c:	e7f7      	b.n	801507e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 801508e:	f003 0301 	and.w	r3, r3, #1
 8015092:	f023 0003 	bic.w	r0, r3, #3
 8015096:	4408      	add	r0, r1
 8015098:	4288      	cmp	r0, r1
 801509a:	4614      	mov	r4, r2
 801509c:	d904      	bls.n	80150a8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 801509e:	6824      	ldr	r4, [r4, #0]
 80150a0:	3204      	adds	r2, #4
 80150a2:	f841 4b04 	str.w	r4, [r1], #4
 80150a6:	e7f7      	b.n	8015098 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 80150a8:	f003 0303 	and.w	r3, r3, #3
 80150ac:	440b      	add	r3, r1
 80150ae:	3a01      	subs	r2, #1
 80150b0:	428b      	cmp	r3, r1
 80150b2:	d90c      	bls.n	80150ce <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80150b4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80150b8:	f801 0b01 	strb.w	r0, [r1], #1
 80150bc:	e7f8      	b.n	80150b0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 80150be:	0790      	lsls	r0, r2, #30
 80150c0:	d0e7      	beq.n	8015092 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80150c2:	f832 0b02 	ldrh.w	r0, [r2], #2
 80150c6:	3b02      	subs	r3, #2
 80150c8:	f821 0b02 	strh.w	r0, [r1], #2
 80150cc:	e7e1      	b.n	8015092 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80150ce:	2001      	movs	r0, #1
 80150d0:	bd10      	pop	{r4, pc}

080150d2 <_ZN8touchgfx3HAL7noTouchEv>:
 80150d2:	b510      	push	{r4, lr}
 80150d4:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 80150d8:	4604      	mov	r4, r0
 80150da:	b153      	cbz	r3, 80150f2 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80150dc:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 80150e0:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 80150e4:	2101      	movs	r1, #1
 80150e6:	301c      	adds	r0, #28
 80150e8:	f016 f820 	bl	802b12c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80150ec:	2300      	movs	r3, #0
 80150ee:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 80150f2:	bd10      	pop	{r4, pc}

080150f4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80150f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80150f8:	4604      	mov	r4, r0
 80150fa:	2000      	movs	r0, #0
 80150fc:	b085      	sub	sp, #20
 80150fe:	ad04      	add	r5, sp, #16
 8015100:	f845 0d04 	str.w	r0, [r5, #-4]!
 8015104:	69a0      	ldr	r0, [r4, #24]
 8015106:	4699      	mov	r9, r3
 8015108:	6806      	ldr	r6, [r0, #0]
 801510a:	9501      	str	r5, [sp, #4]
 801510c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 8015110:	460f      	mov	r7, r1
 8015112:	9500      	str	r5, [sp, #0]
 8015114:	6835      	ldr	r5, [r6, #0]
 8015116:	4690      	mov	r8, r2
 8015118:	47a8      	blx	r5
 801511a:	4d10      	ldr	r5, [pc, #64]	@ (801515c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 801511c:	4606      	mov	r6, r0
 801511e:	f8a5 9000 	strh.w	r9, [r5]
 8015122:	f7fa fcc1 	bl	800faa8 <_ZN8touchgfx3HAL3lcdEv>
 8015126:	6803      	ldr	r3, [r0, #0]
 8015128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801512a:	4798      	blx	r3
 801512c:	b128      	cbz	r0, 801513a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 801512e:	2801      	cmp	r0, #1
 8015130:	d00b      	beq.n	801514a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8015132:	4630      	mov	r0, r6
 8015134:	b005      	add	sp, #20
 8015136:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801513a:	882b      	ldrh	r3, [r5, #0]
 801513c:	fb08 7203 	mla	r2, r8, r3, r7
 8015140:	9b03      	ldr	r3, [sp, #12]
 8015142:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8015146:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8015148:	e7f3      	b.n	8015132 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 801514a:	882a      	ldrh	r2, [r5, #0]
 801514c:	9b03      	ldr	r3, [sp, #12]
 801514e:	fb08 7202 	mla	r2, r8, r2, r7
 8015152:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015156:	1a9a      	subs	r2, r3, r2
 8015158:	63e2      	str	r2, [r4, #60]	@ 0x3c
 801515a:	e7ea      	b.n	8015132 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 801515c:	2005ba76 	.word	0x2005ba76

08015160 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs>:
 8015160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015162:	4b15      	ldr	r3, [pc, #84]	@ (80151b8 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x58>)
 8015164:	f890 407d 	ldrb.w	r4, [r0, #125]	@ 0x7d
 8015168:	881b      	ldrh	r3, [r3, #0]
 801516a:	460f      	mov	r7, r1
 801516c:	fb93 f4f4 	sdiv	r4, r3, r4
 8015170:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 8015172:	4606      	mov	r6, r0
 8015174:	f7fa fc98 	bl	800faa8 <_ZN8touchgfx3HAL3lcdEv>
 8015178:	6803      	ldr	r3, [r0, #0]
 801517a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801517c:	4798      	blx	r3
 801517e:	2801      	cmp	r0, #1
 8015180:	d00b      	beq.n	801519a <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x3a>
 8015182:	d303      	bcc.n	801518c <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x2c>
 8015184:	2802      	cmp	r0, #2
 8015186:	d010      	beq.n	80151aa <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x4a>
 8015188:	63f5      	str	r5, [r6, #60]	@ 0x3c
 801518a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801518c:	437c      	muls	r4, r7
 801518e:	4b0b      	ldr	r3, [pc, #44]	@ (80151bc <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 8015190:	8819      	ldrh	r1, [r3, #0]
 8015192:	434c      	muls	r4, r1
 8015194:	eba5 0544 	sub.w	r5, r5, r4, lsl #1
 8015198:	e7f6      	b.n	8015188 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 801519a:	437c      	muls	r4, r7
 801519c:	4b07      	ldr	r3, [pc, #28]	@ (80151bc <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 801519e:	8819      	ldrh	r1, [r3, #0]
 80151a0:	434c      	muls	r4, r1
 80151a2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80151a6:	1b2d      	subs	r5, r5, r4
 80151a8:	e7ee      	b.n	8015188 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 80151aa:	437c      	muls	r4, r7
 80151ac:	4b03      	ldr	r3, [pc, #12]	@ (80151bc <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 80151ae:	8819      	ldrh	r1, [r3, #0]
 80151b0:	434c      	muls	r4, r1
 80151b2:	eba5 0584 	sub.w	r5, r5, r4, lsl #2
 80151b6:	e7e7      	b.n	8015188 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 80151b8:	2005ba78 	.word	0x2005ba78
 80151bc:	2005ba76 	.word	0x2005ba76

080151c0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 80151c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80151c2:	b08b      	sub	sp, #44	@ 0x2c
 80151c4:	4617      	mov	r7, r2
 80151c6:	4604      	mov	r4, r0
 80151c8:	460e      	mov	r6, r1
 80151ca:	461d      	mov	r5, r3
 80151cc:	f7fa fc6c 	bl	800faa8 <_ZN8touchgfx3HAL3lcdEv>
 80151d0:	6803      	ldr	r3, [r0, #0]
 80151d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80151d4:	4798      	blx	r3
 80151d6:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 80151da:	9007      	str	r0, [sp, #28]
 80151dc:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80151e0:	4b0d      	ldr	r3, [pc, #52]	@ (8015218 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 80151e2:	6822      	ldr	r2, [r4, #0]
 80151e4:	881b      	ldrh	r3, [r3, #0]
 80151e6:	4631      	mov	r1, r6
 80151e8:	9306      	str	r3, [sp, #24]
 80151ea:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 80151ee:	4620      	mov	r0, r4
 80151f0:	9305      	str	r3, [sp, #20]
 80151f2:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 80151f6:	9304      	str	r3, [sp, #16]
 80151f8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80151fc:	9303      	str	r3, [sp, #12]
 80151fe:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8015202:	9302      	str	r3, [sp, #8]
 8015204:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8015208:	e9cd 5300 	strd	r5, r3, [sp]
 801520c:	463b      	mov	r3, r7
 801520e:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8015210:	2200      	movs	r2, #0
 8015212:	47a8      	blx	r5
 8015214:	b00b      	add	sp, #44	@ 0x2c
 8015216:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015218:	2005ba76 	.word	0x2005ba76

0801521c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 801521c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015220:	4698      	mov	r8, r3
 8015222:	6803      	ldr	r3, [r0, #0]
 8015224:	b08b      	sub	sp, #44	@ 0x2c
 8015226:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 8015228:	4b14      	ldr	r3, [pc, #80]	@ (801527c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 801522a:	4617      	mov	r7, r2
 801522c:	f8b3 9000 	ldrh.w	r9, [r3]
 8015230:	460e      	mov	r6, r1
 8015232:	4604      	mov	r4, r0
 8015234:	f7fa fc38 	bl	800faa8 <_ZN8touchgfx3HAL3lcdEv>
 8015238:	6803      	ldr	r3, [r0, #0]
 801523a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801523c:	4798      	blx	r3
 801523e:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8015242:	2200      	movs	r2, #0
 8015244:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8015248:	2302      	movs	r3, #2
 801524a:	e9cd 9306 	strd	r9, r3, [sp, #24]
 801524e:	2301      	movs	r3, #1
 8015250:	9305      	str	r3, [sp, #20]
 8015252:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8015256:	4631      	mov	r1, r6
 8015258:	9304      	str	r3, [sp, #16]
 801525a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 801525e:	4620      	mov	r0, r4
 8015260:	9303      	str	r3, [sp, #12]
 8015262:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8015266:	9302      	str	r3, [sp, #8]
 8015268:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 801526c:	e9cd 8300 	strd	r8, r3, [sp]
 8015270:	463b      	mov	r3, r7
 8015272:	47a8      	blx	r5
 8015274:	b00b      	add	sp, #44	@ 0x2c
 8015276:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801527a:	bf00      	nop
 801527c:	2005ba76 	.word	0x2005ba76

08015280 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8015280:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015284:	4698      	mov	r8, r3
 8015286:	6803      	ldr	r3, [r0, #0]
 8015288:	b087      	sub	sp, #28
 801528a:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
 801528c:	4b10      	ldr	r3, [pc, #64]	@ (80152d0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 801528e:	460e      	mov	r6, r1
 8015290:	f8b3 9000 	ldrh.w	r9, [r3]
 8015294:	4617      	mov	r7, r2
 8015296:	4604      	mov	r4, r0
 8015298:	f7fa fc06 	bl	800faa8 <_ZN8touchgfx3HAL3lcdEv>
 801529c:	6803      	ldr	r3, [r0, #0]
 801529e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80152a0:	4798      	blx	r3
 80152a2:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 80152a6:	f8cd 900c 	str.w	r9, [sp, #12]
 80152aa:	e9cd 0304 	strd	r0, r3, [sp, #16]
 80152ae:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 80152b2:	463a      	mov	r2, r7
 80152b4:	9302      	str	r3, [sp, #8]
 80152b6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 80152ba:	4631      	mov	r1, r6
 80152bc:	9301      	str	r3, [sp, #4]
 80152be:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 80152c2:	4620      	mov	r0, r4
 80152c4:	9300      	str	r3, [sp, #0]
 80152c6:	4643      	mov	r3, r8
 80152c8:	47a8      	blx	r5
 80152ca:	b007      	add	sp, #28
 80152cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80152d0:	2005ba76 	.word	0x2005ba76

080152d4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 80152d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152d8:	4604      	mov	r4, r0
 80152da:	b08f      	sub	sp, #60	@ 0x3c
 80152dc:	4610      	mov	r0, r2
 80152de:	460d      	mov	r5, r1
 80152e0:	4691      	mov	r9, r2
 80152e2:	461e      	mov	r6, r3
 80152e4:	f007 fbec 	bl	801cac0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80152e8:	2800      	cmp	r0, #0
 80152ea:	f000 809d 	beq.w	8015428 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 80152ee:	6823      	ldr	r3, [r4, #0]
 80152f0:	4620      	mov	r0, r4
 80152f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80152f4:	4798      	blx	r3
 80152f6:	6823      	ldr	r3, [r4, #0]
 80152f8:	f8df b190 	ldr.w	fp, [pc, #400]	@ 801548c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 80152fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80152fe:	4620      	mov	r0, r4
 8015300:	4798      	blx	r3
 8015302:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 8015490 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8015306:	f8bb 3000 	ldrh.w	r3, [fp]
 801530a:	4f5d      	ldr	r7, [pc, #372]	@ (8015480 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801530c:	9301      	str	r3, [sp, #4]
 801530e:	f8ba 3000 	ldrh.w	r3, [sl]
 8015312:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 8015316:	9302      	str	r3, [sp, #8]
 8015318:	883b      	ldrh	r3, [r7, #0]
 801531a:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 801531e:	9303      	str	r3, [sp, #12]
 8015320:	4b58      	ldr	r3, [pc, #352]	@ (8015484 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8015322:	4640      	mov	r0, r8
 8015324:	881a      	ldrh	r2, [r3, #0]
 8015326:	9305      	str	r3, [sp, #20]
 8015328:	9204      	str	r2, [sp, #16]
 801532a:	f007 fc5d 	bl	801cbe8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801532e:	8038      	strh	r0, [r7, #0]
 8015330:	4640      	mov	r0, r8
 8015332:	f007 fc8d 	bl	801cc50 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015336:	9b05      	ldr	r3, [sp, #20]
 8015338:	b280      	uxth	r0, r0
 801533a:	8018      	strh	r0, [r3, #0]
 801533c:	4b52      	ldr	r3, [pc, #328]	@ (8015488 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 801533e:	781b      	ldrb	r3, [r3, #0]
 8015340:	2b00      	cmp	r3, #0
 8015342:	d174      	bne.n	801542e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8015344:	883b      	ldrh	r3, [r7, #0]
 8015346:	f8aa 0000 	strh.w	r0, [sl]
 801534a:	f8ab 3000 	strh.w	r3, [fp]
 801534e:	4648      	mov	r0, r9
 8015350:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 8015354:	f007 fbb4 	bl	801cac0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8015358:	2200      	movs	r2, #0
 801535a:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 801535e:	4611      	mov	r1, r2
 8015360:	4628      	mov	r0, r5
 8015362:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8015366:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 801536a:	f7fb f8f2 	bl	8010552 <_ZN8touchgfx8Drawable5setXYEss>
 801536e:	2301      	movs	r3, #1
 8015370:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 8015374:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8015378:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 801537c:	2b00      	cmp	r3, #0
 801537e:	dd5c      	ble.n	801543a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8015380:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8015384:	2b00      	cmp	r3, #0
 8015386:	dd58      	ble.n	801543a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8015388:	462a      	mov	r2, r5
 801538a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801538e:	ab0a      	add	r3, sp, #40	@ 0x28
 8015390:	6851      	ldr	r1, [r2, #4]
 8015392:	c303      	stmia	r3!, {r0, r1}
 8015394:	4631      	mov	r1, r6
 8015396:	a80a      	add	r0, sp, #40	@ 0x28
 8015398:	f7fe feca 	bl	8014130 <_ZN8touchgfx4RectaNERKS0_>
 801539c:	2100      	movs	r1, #0
 801539e:	4b38      	ldr	r3, [pc, #224]	@ (8015480 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80153a0:	910c      	str	r1, [sp, #48]	@ 0x30
 80153a2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80153a6:	4b37      	ldr	r3, [pc, #220]	@ (8015484 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80153a8:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 80153ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80153b0:	aa0a      	add	r2, sp, #40	@ 0x28
 80153b2:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 80153b6:	ab08      	add	r3, sp, #32
 80153b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80153bc:	e883 0003 	stmia.w	r3, {r0, r1}
 80153c0:	4618      	mov	r0, r3
 80153c2:	a90c      	add	r1, sp, #48	@ 0x30
 80153c4:	f7fe feb4 	bl	8014130 <_ZN8touchgfx4RectaNERKS0_>
 80153c8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d13c      	bne.n	8015448 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 80153ce:	2000      	movs	r0, #0
 80153d0:	2600      	movs	r6, #0
 80153d2:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 80153d6:	696b      	ldr	r3, [r5, #20]
 80153d8:	682a      	ldr	r2, [r5, #0]
 80153da:	616e      	str	r6, [r5, #20]
 80153dc:	9305      	str	r3, [sp, #20]
 80153de:	6892      	ldr	r2, [r2, #8]
 80153e0:	a908      	add	r1, sp, #32
 80153e2:	4628      	mov	r0, r5
 80153e4:	4790      	blx	r2
 80153e6:	9b05      	ldr	r3, [sp, #20]
 80153e8:	4652      	mov	r2, sl
 80153ea:	616b      	str	r3, [r5, #20]
 80153ec:	4649      	mov	r1, r9
 80153ee:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 80153f2:	4628      	mov	r0, r5
 80153f4:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 80153f8:	f7fb f8ab 	bl	8010552 <_ZN8touchgfx8Drawable5setXYEss>
 80153fc:	9a01      	ldr	r2, [sp, #4]
 80153fe:	4b23      	ldr	r3, [pc, #140]	@ (801548c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8015400:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 8015404:	801a      	strh	r2, [r3, #0]
 8015406:	9a02      	ldr	r2, [sp, #8]
 8015408:	4b21      	ldr	r3, [pc, #132]	@ (8015490 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 801540a:	4620      	mov	r0, r4
 801540c:	801a      	strh	r2, [r3, #0]
 801540e:	9a03      	ldr	r2, [sp, #12]
 8015410:	4b1b      	ldr	r3, [pc, #108]	@ (8015480 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8015412:	801a      	strh	r2, [r3, #0]
 8015414:	4b1b      	ldr	r3, [pc, #108]	@ (8015484 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8015416:	9a04      	ldr	r2, [sp, #16]
 8015418:	801a      	strh	r2, [r3, #0]
 801541a:	6823      	ldr	r3, [r4, #0]
 801541c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801541e:	4798      	blx	r3
 8015420:	6823      	ldr	r3, [r4, #0]
 8015422:	4620      	mov	r0, r4
 8015424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015426:	4798      	blx	r3
 8015428:	b00f      	add	sp, #60	@ 0x3c
 801542a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801542e:	883b      	ldrh	r3, [r7, #0]
 8015430:	f8ab 0000 	strh.w	r0, [fp]
 8015434:	f8aa 3000 	strh.w	r3, [sl]
 8015438:	e789      	b.n	801534e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 801543a:	462a      	mov	r2, r5
 801543c:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8015440:	ab0a      	add	r3, sp, #40	@ 0x28
 8015442:	6851      	ldr	r1, [r2, #4]
 8015444:	c303      	stmia	r3!, {r0, r1}
 8015446:	e7a9      	b.n	801539c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8015448:	a807      	add	r0, sp, #28
 801544a:	f007 fd43 	bl	801ced4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801544e:	4606      	mov	r6, r0
 8015450:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8015452:	6803      	ldr	r3, [r0, #0]
 8015454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015456:	4798      	blx	r3
 8015458:	4286      	cmp	r6, r0
 801545a:	d1b8      	bne.n	80153ce <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 801545c:	f7fa fb24 	bl	800faa8 <_ZN8touchgfx3HAL3lcdEv>
 8015460:	6803      	ldr	r3, [r0, #0]
 8015462:	4606      	mov	r6, r0
 8015464:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015466:	a807      	add	r0, sp, #28
 8015468:	9305      	str	r3, [sp, #20]
 801546a:	f007 fd33 	bl	801ced4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801546e:	9b05      	ldr	r3, [sp, #20]
 8015470:	4601      	mov	r1, r0
 8015472:	4630      	mov	r0, r6
 8015474:	4798      	blx	r3
 8015476:	f080 0001 	eor.w	r0, r0, #1
 801547a:	b2c0      	uxtb	r0, r0
 801547c:	e7a8      	b.n	80153d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 801547e:	bf00      	nop
 8015480:	2005ba70 	.word	0x2005ba70
 8015484:	2005ba72 	.word	0x2005ba72
 8015488:	2005ba74 	.word	0x2005ba74
 801548c:	2005ba76 	.word	0x2005ba76
 8015490:	2005ba78 	.word	0x2005ba78

08015494 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8015494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015498:	461d      	mov	r5, r3
 801549a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801549e:	2400      	movs	r4, #0
 80154a0:	b08a      	sub	sp, #40	@ 0x28
 80154a2:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80154a6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 80154aa:	4690      	mov	r8, r2
 80154ac:	f8ad 3018 	strh.w	r3, [sp, #24]
 80154b0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 80154b4:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 80154b8:	f8ad 301a 	strh.w	r3, [sp, #26]
 80154bc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80154c0:	4607      	mov	r7, r0
 80154c2:	f8ad 301c 	strh.w	r3, [sp, #28]
 80154c6:	9404      	str	r4, [sp, #16]
 80154c8:	f88d 4020 	strb.w	r4, [sp, #32]
 80154cc:	f7fc fa54 	bl	8011978 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80154d0:	fb06 8505 	mla	r5, r6, r5, r8
 80154d4:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80154d8:	6878      	ldr	r0, [r7, #4]
 80154da:	9505      	str	r5, [sp, #20]
 80154dc:	f8ad 601e 	strh.w	r6, [sp, #30]
 80154e0:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 80154e4:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 80154e8:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 80154ec:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 80154f0:	6803      	ldr	r3, [r0, #0]
 80154f2:	a901      	add	r1, sp, #4
 80154f4:	685b      	ldr	r3, [r3, #4]
 80154f6:	4798      	blx	r3
 80154f8:	b00a      	add	sp, #40	@ 0x28
 80154fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080154fe <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 80154fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015502:	2400      	movs	r4, #0
 8015504:	461d      	mov	r5, r3
 8015506:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801550a:	4691      	mov	r9, r2
 801550c:	b08b      	sub	sp, #44	@ 0x2c
 801550e:	4688      	mov	r8, r1
 8015510:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 8015514:	4607      	mov	r7, r0
 8015516:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801551a:	9404      	str	r4, [sp, #16]
 801551c:	f7fc fa2c 	bl	8011978 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015520:	fb06 9505 	mla	r5, r6, r5, r9
 8015524:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8015528:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801552c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015530:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8015534:	6878      	ldr	r0, [r7, #4]
 8015536:	9505      	str	r5, [sp, #20]
 8015538:	f8ad 301a 	strh.w	r3, [sp, #26]
 801553c:	f8ad 401c 	strh.w	r4, [sp, #28]
 8015540:	f8ad 601e 	strh.w	r6, [sp, #30]
 8015544:	f8cd 8010 	str.w	r8, [sp, #16]
 8015548:	f8ad 4020 	strh.w	r4, [sp, #32]
 801554c:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8015550:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8015554:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8015558:	6803      	ldr	r3, [r0, #0]
 801555a:	a901      	add	r1, sp, #4
 801555c:	685b      	ldr	r3, [r3, #4]
 801555e:	4798      	blx	r3
 8015560:	b00b      	add	sp, #44	@ 0x2c
 8015562:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08015568 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8015568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801556c:	4698      	mov	r8, r3
 801556e:	2300      	movs	r3, #0
 8015570:	b08a      	sub	sp, #40	@ 0x28
 8015572:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 8015576:	4606      	mov	r6, r0
 8015578:	2d0b      	cmp	r5, #11
 801557a:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 801557e:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 8015582:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 8015586:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 801558a:	9304      	str	r3, [sp, #16]
 801558c:	d137      	bne.n	80155fe <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 801558e:	2380      	movs	r3, #128	@ 0x80
 8015590:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8015594:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8015598:	f88d 0020 	strb.w	r0, [sp, #32]
 801559c:	f8ad 3018 	strh.w	r3, [sp, #24]
 80155a0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80155a4:	4630      	mov	r0, r6
 80155a6:	f8ad 301a 	strh.w	r3, [sp, #26]
 80155aa:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 80155ae:	9203      	str	r2, [sp, #12]
 80155b0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80155b4:	f7fc f9e0 	bl	8011978 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80155b8:	2c0b      	cmp	r4, #11
 80155ba:	bf8c      	ite	hi
 80155bc:	2100      	movhi	r1, #0
 80155be:	4b1b      	ldrls	r3, [pc, #108]	@ (801562c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 80155c0:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 80155c4:	bf98      	it	ls
 80155c6:	5d19      	ldrbls	r1, [r3, r4]
 80155c8:	fb02 8307 	mla	r3, r2, r7, r8
 80155cc:	10c9      	asrs	r1, r1, #3
 80155ce:	fb01 0003 	mla	r0, r1, r3, r0
 80155d2:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 80155d6:	9005      	str	r0, [sp, #20]
 80155d8:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 80155dc:	2300      	movs	r3, #0
 80155de:	6870      	ldr	r0, [r6, #4]
 80155e0:	f8ad 701e 	strh.w	r7, [sp, #30]
 80155e4:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 80155e8:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 80155ec:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 80155f0:	6803      	ldr	r3, [r0, #0]
 80155f2:	a901      	add	r1, sp, #4
 80155f4:	685b      	ldr	r3, [r3, #4]
 80155f6:	4798      	blx	r3
 80155f8:	b00a      	add	sp, #40	@ 0x28
 80155fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80155fe:	2d02      	cmp	r5, #2
 8015600:	d109      	bne.n	8015616 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8015602:	28ff      	cmp	r0, #255	@ 0xff
 8015604:	d105      	bne.n	8015612 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8015606:	f1bc 0f00 	cmp.w	ip, #0
 801560a:	bf14      	ite	ne
 801560c:	2340      	movne	r3, #64	@ 0x40
 801560e:	2320      	moveq	r3, #32
 8015610:	e7be      	b.n	8015590 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8015612:	2340      	movs	r3, #64	@ 0x40
 8015614:	e7bc      	b.n	8015590 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8015616:	28ff      	cmp	r0, #255	@ 0xff
 8015618:	d105      	bne.n	8015626 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 801561a:	f1bc 0f00 	cmp.w	ip, #0
 801561e:	bf14      	ite	ne
 8015620:	2304      	movne	r3, #4
 8015622:	2301      	moveq	r3, #1
 8015624:	e7b4      	b.n	8015590 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8015626:	2304      	movs	r3, #4
 8015628:	e7b2      	b.n	8015590 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801562a:	bf00      	nop
 801562c:	0802f618 	.word	0x0802f618

08015630 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8015630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015634:	b08b      	sub	sp, #44	@ 0x2c
 8015636:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 801563a:	461d      	mov	r5, r3
 801563c:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8015640:	bf14      	ite	ne
 8015642:	2308      	movne	r3, #8
 8015644:	2302      	moveq	r3, #2
 8015646:	2400      	movs	r4, #0
 8015648:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 801564c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015650:	4688      	mov	r8, r1
 8015652:	4693      	mov	fp, r2
 8015654:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 8015658:	9404      	str	r4, [sp, #16]
 801565a:	4607      	mov	r7, r0
 801565c:	f7fc f98c 	bl	8011978 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015660:	2e0b      	cmp	r6, #11
 8015662:	bf98      	it	ls
 8015664:	4b15      	ldrls	r3, [pc, #84]	@ (80156bc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8015666:	fb05 b50a 	mla	r5, r5, sl, fp
 801566a:	bf98      	it	ls
 801566c:	5d9c      	ldrbls	r4, [r3, r6]
 801566e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8015672:	10e4      	asrs	r4, r4, #3
 8015674:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015678:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 801567c:	fb04 0405 	mla	r4, r4, r5, r0
 8015680:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015684:	2300      	movs	r3, #0
 8015686:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801568a:	6878      	ldr	r0, [r7, #4]
 801568c:	9405      	str	r4, [sp, #20]
 801568e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015692:	f8ad a01e 	strh.w	sl, [sp, #30]
 8015696:	f8cd 8010 	str.w	r8, [sp, #16]
 801569a:	f88d 9020 	strb.w	r9, [sp, #32]
 801569e:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 80156a2:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 80156a6:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 80156aa:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 80156ae:	6803      	ldr	r3, [r0, #0]
 80156b0:	a901      	add	r1, sp, #4
 80156b2:	685b      	ldr	r3, [r3, #4]
 80156b4:	4798      	blx	r3
 80156b6:	b00b      	add	sp, #44	@ 0x2c
 80156b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156bc:	0802f618 	.word	0x0802f618

080156c0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 80156c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156c4:	461e      	mov	r6, r3
 80156c6:	4b0a      	ldr	r3, [pc, #40]	@ (80156f0 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 80156c8:	460f      	mov	r7, r1
 80156ca:	881d      	ldrh	r5, [r3, #0]
 80156cc:	4690      	mov	r8, r2
 80156ce:	f7fa f9eb 	bl	800faa8 <_ZN8touchgfx3HAL3lcdEv>
 80156d2:	6803      	ldr	r3, [r0, #0]
 80156d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80156d6:	4798      	blx	r3
 80156d8:	280b      	cmp	r0, #11
 80156da:	bf8e      	itee	hi
 80156dc:	2400      	movhi	r4, #0
 80156de:	4b05      	ldrls	r3, [pc, #20]	@ (80156f4 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 80156e0:	5c1c      	ldrbls	r4, [r3, r0]
 80156e2:	fb08 7005 	mla	r0, r8, r5, r7
 80156e6:	10e4      	asrs	r4, r4, #3
 80156e8:	fb04 6000 	mla	r0, r4, r0, r6
 80156ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156f0:	2005ba76 	.word	0x2005ba76
 80156f4:	0802f618 	.word	0x0802f618

080156f8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 80156f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80156fa:	2500      	movs	r5, #0
 80156fc:	b08b      	sub	sp, #44	@ 0x2c
 80156fe:	461f      	mov	r7, r3
 8015700:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8015704:	4604      	mov	r4, r0
 8015706:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801570a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 801570e:	4616      	mov	r6, r2
 8015710:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015714:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8015718:	9504      	str	r5, [sp, #16]
 801571a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801571e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8015722:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015726:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 801572a:	f88d 3020 	strb.w	r3, [sp, #32]
 801572e:	f7fc f923 	bl	8011978 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015732:	463a      	mov	r2, r7
 8015734:	4631      	mov	r1, r6
 8015736:	4603      	mov	r3, r0
 8015738:	4620      	mov	r0, r4
 801573a:	f7ff ffc1 	bl	80156c0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801573e:	4b0e      	ldr	r3, [pc, #56]	@ (8015778 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8015740:	9005      	str	r0, [sp, #20]
 8015742:	881b      	ldrh	r3, [r3, #0]
 8015744:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015748:	f7fa f9ae 	bl	800faa8 <_ZN8touchgfx3HAL3lcdEv>
 801574c:	6803      	ldr	r3, [r0, #0]
 801574e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015750:	4798      	blx	r3
 8015752:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8015754:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 8015758:	9304      	str	r3, [sp, #16]
 801575a:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 801575e:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8015762:	6860      	ldr	r0, [r4, #4]
 8015764:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8015768:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 801576c:	6803      	ldr	r3, [r0, #0]
 801576e:	a901      	add	r1, sp, #4
 8015770:	685b      	ldr	r3, [r3, #4]
 8015772:	4798      	blx	r3
 8015774:	b00b      	add	sp, #44	@ 0x2c
 8015776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015778:	2005ba76 	.word	0x2005ba76

0801577c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 801577c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801577e:	b08d      	sub	sp, #52	@ 0x34
 8015780:	466b      	mov	r3, sp
 8015782:	e883 0006 	stmia.w	r3, {r1, r2}
 8015786:	2300      	movs	r3, #0
 8015788:	2501      	movs	r5, #1
 801578a:	9306      	str	r3, [sp, #24]
 801578c:	6803      	ldr	r3, [r0, #0]
 801578e:	9503      	str	r5, [sp, #12]
 8015790:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015792:	4604      	mov	r4, r0
 8015794:	f8bd 6000 	ldrh.w	r6, [sp]
 8015798:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 801579c:	4798      	blx	r3
 801579e:	463a      	mov	r2, r7
 80157a0:	4631      	mov	r1, r6
 80157a2:	4603      	mov	r3, r0
 80157a4:	4620      	mov	r0, r4
 80157a6:	f7ff ff8b 	bl	80156c0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80157aa:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80157ac:	9004      	str	r0, [sp, #16]
 80157ae:	9307      	str	r3, [sp, #28]
 80157b0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80157b4:	f8ad 3020 	strh.w	r3, [sp, #32]
 80157b8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80157bc:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 80157c0:	4b0e      	ldr	r3, [pc, #56]	@ (80157fc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 80157c2:	881b      	ldrh	r3, [r3, #0]
 80157c4:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 80157c8:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 80157cc:	f7fa f96c 	bl	800faa8 <_ZN8touchgfx3HAL3lcdEv>
 80157d0:	6803      	ldr	r3, [r0, #0]
 80157d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80157d4:	4798      	blx	r3
 80157d6:	23ff      	movs	r3, #255	@ 0xff
 80157d8:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 80157dc:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 80157e0:	6860      	ldr	r0, [r4, #4]
 80157e2:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 80157e6:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 80157ea:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 80157ee:	6803      	ldr	r3, [r0, #0]
 80157f0:	a903      	add	r1, sp, #12
 80157f2:	685b      	ldr	r3, [r3, #4]
 80157f4:	4798      	blx	r3
 80157f6:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80157f8:	b00d      	add	sp, #52	@ 0x34
 80157fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80157fc:	2005ba76 	.word	0x2005ba76

08015800 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8015800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015804:	b08c      	sub	sp, #48	@ 0x30
 8015806:	466d      	mov	r5, sp
 8015808:	461e      	mov	r6, r3
 801580a:	2300      	movs	r3, #0
 801580c:	e885 0006 	stmia.w	r5, {r1, r2}
 8015810:	2501      	movs	r5, #1
 8015812:	9306      	str	r3, [sp, #24]
 8015814:	6803      	ldr	r3, [r0, #0]
 8015816:	9503      	str	r5, [sp, #12]
 8015818:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801581a:	4604      	mov	r4, r0
 801581c:	f8bd 7000 	ldrh.w	r7, [sp]
 8015820:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8015824:	4798      	blx	r3
 8015826:	4642      	mov	r2, r8
 8015828:	4639      	mov	r1, r7
 801582a:	4603      	mov	r3, r0
 801582c:	4620      	mov	r0, r4
 801582e:	f7ff ff47 	bl	80156c0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015832:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8015836:	9004      	str	r0, [sp, #16]
 8015838:	f8ad 3020 	strh.w	r3, [sp, #32]
 801583c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8015840:	9607      	str	r6, [sp, #28]
 8015842:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8015846:	4b10      	ldr	r3, [pc, #64]	@ (8015888 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8015848:	881b      	ldrh	r3, [r3, #0]
 801584a:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 801584e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8015850:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8015854:	f7fa f928 	bl	800faa8 <_ZN8touchgfx3HAL3lcdEv>
 8015858:	6803      	ldr	r3, [r0, #0]
 801585a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801585c:	4798      	blx	r3
 801585e:	23ff      	movs	r3, #255	@ 0xff
 8015860:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8015864:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8015868:	6860      	ldr	r0, [r4, #4]
 801586a:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 801586e:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8015872:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8015876:	6803      	ldr	r3, [r0, #0]
 8015878:	a903      	add	r1, sp, #12
 801587a:	685b      	ldr	r3, [r3, #4]
 801587c:	4798      	blx	r3
 801587e:	4630      	mov	r0, r6
 8015880:	b00c      	add	sp, #48	@ 0x30
 8015882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015886:	bf00      	nop
 8015888:	2005ba76 	.word	0x2005ba76

0801588c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 801588c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801588e:	b085      	sub	sp, #20
 8015890:	ac02      	add	r4, sp, #8
 8015892:	e884 0006 	stmia.w	r4, {r1, r2}
 8015896:	4605      	mov	r5, r0
 8015898:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 801589c:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 80158a0:	f7fc f86a 	bl	8011978 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80158a4:	463a      	mov	r2, r7
 80158a6:	4603      	mov	r3, r0
 80158a8:	4631      	mov	r1, r6
 80158aa:	4628      	mov	r0, r5
 80158ac:	f7ff ff08 	bl	80156c0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80158b0:	4a05      	ldr	r2, [pc, #20]	@ (80158c8 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 80158b2:	682b      	ldr	r3, [r5, #0]
 80158b4:	8812      	ldrh	r2, [r2, #0]
 80158b6:	9200      	str	r2, [sp, #0]
 80158b8:	6f1e      	ldr	r6, [r3, #112]	@ 0x70
 80158ba:	e894 0006 	ldmia.w	r4, {r1, r2}
 80158be:	4603      	mov	r3, r0
 80158c0:	4628      	mov	r0, r5
 80158c2:	47b0      	blx	r6
 80158c4:	b005      	add	sp, #20
 80158c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80158c8:	2005ba76 	.word	0x2005ba76

080158cc <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 80158cc:	b570      	push	{r4, r5, r6, lr}
 80158ce:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 80158d2:	4604      	mov	r4, r0
 80158d4:	b19b      	cbz	r3, 80158fe <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 80158d6:	2002      	movs	r0, #2
 80158d8:	f7fb fef2 	bl	80116c0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 80158dc:	2300      	movs	r3, #0
 80158de:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 80158e2:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 80158e6:	6823      	ldr	r3, [r4, #0]
 80158e8:	4620      	mov	r0, r4
 80158ea:	f8d3 50c8 	ldr.w	r5, [r3, #200]	@ 0xc8
 80158ee:	f7fc f843 	bl	8011978 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80158f2:	462b      	mov	r3, r5
 80158f4:	4601      	mov	r1, r0
 80158f6:	4620      	mov	r0, r4
 80158f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80158fc:	4718      	bx	r3
 80158fe:	bd70      	pop	{r4, r5, r6, pc}

08015900 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8015900:	b538      	push	{r3, r4, r5, lr}
 8015902:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 8015906:	4604      	mov	r4, r0
 8015908:	428b      	cmp	r3, r1
 801590a:	460d      	mov	r5, r1
 801590c:	d006      	beq.n	801591c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 801590e:	6803      	ldr	r3, [r0, #0]
 8015910:	b929      	cbnz	r1, 801591e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8015912:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8015916:	4798      	blx	r3
 8015918:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 801591c:	bd38      	pop	{r3, r4, r5, pc}
 801591e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8015922:	e7f8      	b.n	8015916 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08015924 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8015924:	b510      	push	{r4, lr}
 8015926:	4b0c      	ldr	r3, [pc, #48]	@ (8015958 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x34>)
 8015928:	4604      	mov	r4, r0
 801592a:	781b      	ldrb	r3, [r3, #0]
 801592c:	b953      	cbnz	r3, 8015944 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 801592e:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 8015932:	b93b      	cbnz	r3, 8015944 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 8015934:	6840      	ldr	r0, [r0, #4]
 8015936:	f000 f927 	bl	8015b88 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801593a:	b118      	cbz	r0, 8015944 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 801593c:	6862      	ldr	r2, [r4, #4]
 801593e:	7a53      	ldrb	r3, [r2, #9]
 8015940:	2b00      	cmp	r3, #0
 8015942:	d0fc      	beq.n	801593e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1a>
 8015944:	f7fc fa14 	bl	8011d70 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8015948:	4620      	mov	r0, r4
 801594a:	2100      	movs	r1, #0
 801594c:	f7ff ffd8 	bl	8015900 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8015950:	4620      	mov	r0, r4
 8015952:	f7fc f811 	bl	8011978 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015956:	bd10      	pop	{r4, pc}
 8015958:	2005ba7a 	.word	0x2005ba7a

0801595c <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 801595c:	b570      	push	{r4, r5, r6, lr}
 801595e:	4604      	mov	r4, r0
 8015960:	6803      	ldr	r3, [r0, #0]
 8015962:	b919      	cbnz	r1, 801596c <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 8015964:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801596a:	4718      	bx	r3
 801596c:	2200      	movs	r2, #0
 801596e:	f890 607b 	ldrb.w	r6, [r0, #123]	@ 0x7b
 8015972:	f880 207b 	strb.w	r2, [r0, #123]	@ 0x7b
 8015976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015978:	4798      	blx	r3
 801597a:	2101      	movs	r1, #1
 801597c:	4605      	mov	r5, r0
 801597e:	6863      	ldr	r3, [r4, #4]
 8015980:	4620      	mov	r0, r4
 8015982:	7299      	strb	r1, [r3, #10]
 8015984:	f884 607b 	strb.w	r6, [r4, #123]	@ 0x7b
 8015988:	f7ff ffba 	bl	8015900 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801598c:	4628      	mov	r0, r5
 801598e:	bd70      	pop	{r4, r5, r6, pc}

08015990 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8015990:	4770      	bx	lr

08015992 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8015992:	2000      	movs	r0, #0
 8015994:	4770      	bx	lr

08015996 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8015996:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 801599a:	1a13      	subs	r3, r2, r0
 801599c:	4258      	negs	r0, r3
 801599e:	4158      	adcs	r0, r3
 80159a0:	4770      	bx	lr

080159a2 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 80159a2:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80159a6:	1a9b      	subs	r3, r3, r2
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	bfdc      	itt	le
 80159ac:	6882      	ldrle	r2, [r0, #8]
 80159ae:	189b      	addle	r3, r3, r2
 80159b0:	2b01      	cmp	r3, #1
 80159b2:	bfcc      	ite	gt
 80159b4:	2000      	movgt	r0, #0
 80159b6:	2001      	movle	r0, #1
 80159b8:	4770      	bx	lr

080159ba <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 80159ba:	6902      	ldr	r2, [r0, #16]
 80159bc:	6843      	ldr	r3, [r0, #4]
 80159be:	2024      	movs	r0, #36	@ 0x24
 80159c0:	fb00 3002 	mla	r0, r0, r2, r3
 80159c4:	4770      	bx	lr

080159c6 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80159c6:	6803      	ldr	r3, [r0, #0]
 80159c8:	691b      	ldr	r3, [r3, #16]
 80159ca:	4718      	bx	r3

080159cc <_ZN8touchgfx13DMA_Interface7executeEv>:
 80159cc:	2301      	movs	r3, #1
 80159ce:	b570      	push	{r4, r5, r6, lr}
 80159d0:	7203      	strb	r3, [r0, #8]
 80159d2:	4604      	mov	r4, r0
 80159d4:	6840      	ldr	r0, [r0, #4]
 80159d6:	6803      	ldr	r3, [r0, #0]
 80159d8:	699b      	ldr	r3, [r3, #24]
 80159da:	4798      	blx	r3
 80159dc:	6803      	ldr	r3, [r0, #0]
 80159de:	4605      	mov	r5, r0
 80159e0:	2b40      	cmp	r3, #64	@ 0x40
 80159e2:	d00c      	beq.n	80159fe <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80159e4:	d810      	bhi.n	8015a08 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 80159e6:	2b04      	cmp	r3, #4
 80159e8:	d01d      	beq.n	8015a26 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 80159ea:	d804      	bhi.n	80159f6 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 80159ec:	2b01      	cmp	r3, #1
 80159ee:	d006      	beq.n	80159fe <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80159f0:	2b02      	cmp	r3, #2
 80159f2:	d02c      	beq.n	8015a4e <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 80159f4:	bd70      	pop	{r4, r5, r6, pc}
 80159f6:	2b08      	cmp	r3, #8
 80159f8:	d01d      	beq.n	8015a36 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 80159fa:	2b20      	cmp	r3, #32
 80159fc:	d1fa      	bne.n	80159f4 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 80159fe:	6823      	ldr	r3, [r4, #0]
 8015a00:	4620      	mov	r0, r4
 8015a02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015a04:	4798      	blx	r3
 8015a06:	e013      	b.n	8015a30 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8015a08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015a0c:	d0f7      	beq.n	80159fe <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8015a0e:	d804      	bhi.n	8015a1a <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8015a10:	2b80      	cmp	r3, #128	@ 0x80
 8015a12:	d0f4      	beq.n	80159fe <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8015a14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015a18:	e7f0      	b.n	80159fc <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8015a1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8015a1e:	d0ee      	beq.n	80159fe <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8015a20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8015a24:	e7e5      	b.n	80159f2 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8015a26:	6823      	ldr	r3, [r4, #0]
 8015a28:	7f01      	ldrb	r1, [r0, #28]
 8015a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015a2c:	4620      	mov	r0, r4
 8015a2e:	4798      	blx	r3
 8015a30:	6823      	ldr	r3, [r4, #0]
 8015a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015a34:	e006      	b.n	8015a44 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8015a36:	6823      	ldr	r3, [r4, #0]
 8015a38:	7f01      	ldrb	r1, [r0, #28]
 8015a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015a3c:	4620      	mov	r0, r4
 8015a3e:	4798      	blx	r3
 8015a40:	6823      	ldr	r3, [r4, #0]
 8015a42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015a44:	4629      	mov	r1, r5
 8015a46:	4620      	mov	r0, r4
 8015a48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015a4c:	4718      	bx	r3
 8015a4e:	6823      	ldr	r3, [r4, #0]
 8015a50:	4620      	mov	r0, r4
 8015a52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015a54:	4798      	blx	r3
 8015a56:	e7f3      	b.n	8015a40 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08015a58 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8015a58:	4770      	bx	lr

08015a5a <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8015a5a:	4770      	bx	lr

08015a5c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8015a5c:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8015a60:	1ad2      	subs	r2, r2, r3
 8015a62:	2a00      	cmp	r2, #0
 8015a64:	b510      	push	{r4, lr}
 8015a66:	bfdc      	itt	le
 8015a68:	6884      	ldrle	r4, [r0, #8]
 8015a6a:	1912      	addle	r2, r2, r4
 8015a6c:	2a01      	cmp	r2, #1
 8015a6e:	dd16      	ble.n	8015a9e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8015a70:	2424      	movs	r4, #36	@ 0x24
 8015a72:	6842      	ldr	r2, [r0, #4]
 8015a74:	fb04 2303 	mla	r3, r4, r3, r2
 8015a78:	f101 0220 	add.w	r2, r1, #32
 8015a7c:	f851 4b04 	ldr.w	r4, [r1], #4
 8015a80:	4291      	cmp	r1, r2
 8015a82:	f843 4b04 	str.w	r4, [r3], #4
 8015a86:	d1f9      	bne.n	8015a7c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8015a88:	780a      	ldrb	r2, [r1, #0]
 8015a8a:	701a      	strb	r2, [r3, #0]
 8015a8c:	68c3      	ldr	r3, [r0, #12]
 8015a8e:	6882      	ldr	r2, [r0, #8]
 8015a90:	3301      	adds	r3, #1
 8015a92:	429a      	cmp	r2, r3
 8015a94:	bfd8      	it	le
 8015a96:	1a9b      	suble	r3, r3, r2
 8015a98:	f3bf 8f5b 	dmb	ish
 8015a9c:	60c3      	str	r3, [r0, #12]
 8015a9e:	bd10      	pop	{r4, pc}

08015aa0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8015aa0:	6903      	ldr	r3, [r0, #16]
 8015aa2:	6882      	ldr	r2, [r0, #8]
 8015aa4:	3301      	adds	r3, #1
 8015aa6:	429a      	cmp	r2, r3
 8015aa8:	bfd8      	it	le
 8015aaa:	1a9b      	suble	r3, r3, r2
 8015aac:	f3bf 8f5b 	dmb	ish
 8015ab0:	6103      	str	r3, [r0, #16]
 8015ab2:	4770      	bx	lr

08015ab4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8015ab4:	b570      	push	{r4, r5, r6, lr}
 8015ab6:	4604      	mov	r4, r0
 8015ab8:	460e      	mov	r6, r1
 8015aba:	6860      	ldr	r0, [r4, #4]
 8015abc:	6803      	ldr	r3, [r0, #0]
 8015abe:	685b      	ldr	r3, [r3, #4]
 8015ac0:	4798      	blx	r3
 8015ac2:	2800      	cmp	r0, #0
 8015ac4:	d1f9      	bne.n	8015aba <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8015ac6:	4d0d      	ldr	r5, [pc, #52]	@ (8015afc <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8015ac8:	6828      	ldr	r0, [r5, #0]
 8015aca:	6803      	ldr	r3, [r0, #0]
 8015acc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015ad0:	4798      	blx	r3
 8015ad2:	f7fc f967 	bl	8011da4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8015ad6:	6828      	ldr	r0, [r5, #0]
 8015ad8:	2101      	movs	r1, #1
 8015ada:	f7ff ff11 	bl	8015900 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8015ade:	6860      	ldr	r0, [r4, #4]
 8015ae0:	4631      	mov	r1, r6
 8015ae2:	6803      	ldr	r3, [r0, #0]
 8015ae4:	689b      	ldr	r3, [r3, #8]
 8015ae6:	4798      	blx	r3
 8015ae8:	6823      	ldr	r3, [r4, #0]
 8015aea:	4620      	mov	r0, r4
 8015aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015aee:	4798      	blx	r3
 8015af0:	6828      	ldr	r0, [r5, #0]
 8015af2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015af6:	6803      	ldr	r3, [r0, #0]
 8015af8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015afa:	4718      	bx	r3
 8015afc:	2005ba7c 	.word	0x2005ba7c

08015b00 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8015b00:	b508      	push	{r3, lr}
 8015b02:	f7fc f935 	bl	8011d70 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8015b06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015b0a:	f7fc b93f 	b.w	8011d8c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08015b0e <_ZN8touchgfx13DMA_Interface5startEv>:
 8015b0e:	b510      	push	{r4, lr}
 8015b10:	4604      	mov	r4, r0
 8015b12:	6840      	ldr	r0, [r0, #4]
 8015b14:	6803      	ldr	r3, [r0, #0]
 8015b16:	681b      	ldr	r3, [r3, #0]
 8015b18:	4798      	blx	r3
 8015b1a:	b948      	cbnz	r0, 8015b30 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8015b1c:	7a63      	ldrb	r3, [r4, #9]
 8015b1e:	b13b      	cbz	r3, 8015b30 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8015b20:	7a23      	ldrb	r3, [r4, #8]
 8015b22:	b92b      	cbnz	r3, 8015b30 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8015b24:	6823      	ldr	r3, [r4, #0]
 8015b26:	4620      	mov	r0, r4
 8015b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015b2e:	4718      	bx	r3
 8015b30:	bd10      	pop	{r4, pc}

08015b32 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8015b32:	b570      	push	{r4, r5, r6, lr}
 8015b34:	4604      	mov	r4, r0
 8015b36:	6840      	ldr	r0, [r0, #4]
 8015b38:	6803      	ldr	r3, [r0, #0]
 8015b3a:	681b      	ldr	r3, [r3, #0]
 8015b3c:	4798      	blx	r3
 8015b3e:	4605      	mov	r5, r0
 8015b40:	b930      	cbnz	r0, 8015b50 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8015b42:	7a23      	ldrb	r3, [r4, #8]
 8015b44:	b123      	cbz	r3, 8015b50 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8015b46:	6860      	ldr	r0, [r4, #4]
 8015b48:	6803      	ldr	r3, [r0, #0]
 8015b4a:	695b      	ldr	r3, [r3, #20]
 8015b4c:	4798      	blx	r3
 8015b4e:	7225      	strb	r5, [r4, #8]
 8015b50:	6860      	ldr	r0, [r4, #4]
 8015b52:	6803      	ldr	r3, [r0, #0]
 8015b54:	681b      	ldr	r3, [r3, #0]
 8015b56:	4798      	blx	r3
 8015b58:	b928      	cbnz	r0, 8015b66 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8015b5a:	6823      	ldr	r3, [r4, #0]
 8015b5c:	4620      	mov	r0, r4
 8015b5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015b64:	4718      	bx	r3
 8015b66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015b6a:	f7fc b927 	b.w	8011dbc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

08015b70 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8015b70:	6082      	str	r2, [r0, #8]
 8015b72:	2200      	movs	r2, #0
 8015b74:	b510      	push	{r4, lr}
 8015b76:	4c03      	ldr	r4, [pc, #12]	@ (8015b84 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8015b78:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8015b7c:	e9c0 4100 	strd	r4, r1, [r0]
 8015b80:	bd10      	pop	{r4, pc}
 8015b82:	bf00      	nop
 8015b84:	0802f768 	.word	0x0802f768

08015b88 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8015b88:	6840      	ldr	r0, [r0, #4]
 8015b8a:	6803      	ldr	r3, [r0, #0]
 8015b8c:	681b      	ldr	r3, [r3, #0]
 8015b8e:	4718      	bx	r3

08015b90 <_ZN8touchgfxL10applyNoiseEiihhh>:
 8015b90:	fb80 0101 	smull	r0, r1, r0, r1
 8015b94:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8015b98:	4f1f      	ldr	r7, [pc, #124]	@ (8015c18 <_ZN8touchgfxL10applyNoiseEiihhh+0x88>)
 8015b9a:	461c      	mov	r4, r3
 8015b9c:	fba0 bc07 	umull	fp, ip, r0, r7
 8015ba0:	fb07 cc01 	mla	ip, r7, r1, ip
 8015ba4:	fbab 010b 	umull	r0, r1, fp, fp
 8015ba8:	fb0b f70c 	mul.w	r7, fp, ip
 8015bac:	fb00 f30c 	mul.w	r3, r0, ip
 8015bb0:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 8015bb4:	fb0b 3301 	mla	r3, fp, r1, r3
 8015bb8:	fba0 010b 	umull	r0, r1, r0, fp
 8015bbc:	4616      	mov	r6, r2
 8015bbe:	4419      	add	r1, r3
 8015bc0:	a313      	add	r3, pc, #76	@ (adr r3, 8015c10 <_ZN8touchgfxL10applyNoiseEiihhh+0x80>)
 8015bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bc6:	f7ea fb5b 	bl	8000280 <__aeabi_ldivmod>
 8015bca:	2ef7      	cmp	r6, #247	@ 0xf7
 8015bcc:	b290      	uxth	r0, r2
 8015bce:	bf9e      	ittt	ls
 8015bd0:	f002 0207 	andls.w	r2, r2, #7
 8015bd4:	18b6      	addls	r6, r6, r2
 8015bd6:	b2f6      	uxtbls	r6, r6
 8015bd8:	2cfb      	cmp	r4, #251	@ 0xfb
 8015bda:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8015bde:	bf9e      	ittt	ls
 8015be0:	f3c0 03c1 	ubfxls	r3, r0, #3, #2
 8015be4:	18e4      	addls	r4, r4, r3
 8015be6:	b2e4      	uxtbls	r4, r4
 8015be8:	2df7      	cmp	r5, #247	@ 0xf7
 8015bea:	bf9c      	itt	ls
 8015bec:	f3c0 1042 	ubfxls	r0, r0, #5, #3
 8015bf0:	182d      	addls	r5, r5, r0
 8015bf2:	480a      	ldr	r0, [pc, #40]	@ (8015c1c <_ZN8touchgfxL10applyNoiseEiihhh+0x8c>)
 8015bf4:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8015bf8:	ea00 2006 	and.w	r0, r0, r6, lsl #8
 8015bfc:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8015c00:	bf98      	it	ls
 8015c02:	b2ed      	uxtbls	r5, r5
 8015c04:	4304      	orrs	r4, r0
 8015c06:	ea44 00d5 	orr.w	r0, r4, r5, lsr #3
 8015c0a:	b280      	uxth	r0, r0
 8015c0c:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8015c10:	797a8d77 	.word	0x797a8d77
 8015c14:	00000000 	.word	0x00000000
 8015c18:	00ec4ba7 	.word	0x00ec4ba7
 8015c1c:	fffff800 	.word	0xfffff800

08015c20 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh>:
 8015c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c24:	ed2d 8b02 	vpush	{d8}
 8015c28:	eb01 0442 	add.w	r4, r1, r2, lsl #1
 8015c2c:	7c41      	ldrb	r1, [r0, #17]
 8015c2e:	b087      	sub	sp, #28
 8015c30:	4605      	mov	r5, r0
 8015c32:	f9bd 9048 	ldrsh.w	r9, [sp, #72]	@ 0x48
 8015c36:	f9bd 604c 	ldrsh.w	r6, [sp, #76]	@ 0x4c
 8015c3a:	f89d a050 	ldrb.w	sl, [sp, #80]	@ 0x50
 8015c3e:	2900      	cmp	r1, #0
 8015c40:	f000 809a 	beq.w	8015d78 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x158>
 8015c44:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8015c48:	ed90 7a08 	vldr	s14, [r0, #32]
 8015c4c:	454a      	cmp	r2, r9
 8015c4e:	68c0      	ldr	r0, [r0, #12]
 8015c50:	db25      	blt.n	8015c9e <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x7e>
 8015c52:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8015c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c5a:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8015c5e:	bfc8      	it	gt
 8015c60:	2200      	movgt	r2, #0
 8015c62:	2100      	movs	r1, #0
 8015c64:	5882      	ldr	r2, [r0, r2]
 8015c66:	7c2d      	ldrb	r5, [r5, #16]
 8015c68:	ea4f 2812 	mov.w	r8, r2, lsr #8
 8015c6c:	0950      	lsrs	r0, r2, #5
 8015c6e:	f408 4e78 	and.w	lr, r8, #63488	@ 0xf800
 8015c72:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8015c76:	f3c2 0cc4 	ubfx	ip, r2, #3, #5
 8015c7a:	eb04 0746 	add.w	r7, r4, r6, lsl #1
 8015c7e:	2d00      	cmp	r5, #0
 8015c80:	d044      	beq.n	8015d0c <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0xec>
 8015c82:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8015c86:	d141      	bne.n	8015d0c <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0xec>
 8015c88:	bb61      	cbnz	r1, 8015ce4 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0xc4>
 8015c8a:	ea4e 0000 	orr.w	r0, lr, r0
 8015c8e:	ea4c 0500 	orr.w	r5, ip, r0
 8015c92:	42bc      	cmp	r4, r7
 8015c94:	f080 8216 	bcs.w	80160c4 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a4>
 8015c98:	f824 5b02 	strh.w	r5, [r4], #2
 8015c9c:	e7f9      	b.n	8015c92 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x72>
 8015c9e:	f9b5 700a 	ldrsh.w	r7, [r5, #10]
 8015ca2:	454f      	cmp	r7, r9
 8015ca4:	dc08      	bgt.n	8015cb8 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x98>
 8015ca6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8015caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cae:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8015cb2:	bfd8      	it	le
 8015cb4:	2200      	movle	r2, #0
 8015cb6:	e7d4      	b.n	8015c62 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x42>
 8015cb8:	eba9 0202 	sub.w	r2, r9, r2
 8015cbc:	ee07 2a90 	vmov	s15, r2
 8015cc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015cc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015cc8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8015ccc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cd4:	ee17 2a90 	vmov	r2, s15
 8015cd8:	bfd8      	it	le
 8015cda:	f202 32ff 	addwle	r2, r2, #1023	@ 0x3ff
 8015cde:	0092      	lsls	r2, r2, #2
 8015ce0:	5882      	ldr	r2, [r0, r2]
 8015ce2:	e7c0      	b.n	8015c66 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x46>
 8015ce4:	461e      	mov	r6, r3
 8015ce6:	b2d5      	uxtb	r5, r2
 8015ce8:	fa5f f888 	uxtb.w	r8, r8
 8015cec:	f3c2 4a07 	ubfx	sl, r2, #16, #8
 8015cf0:	42bc      	cmp	r4, r7
 8015cf2:	f080 81e7 	bcs.w	80160c4 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a4>
 8015cf6:	4630      	mov	r0, r6
 8015cf8:	9500      	str	r5, [sp, #0]
 8015cfa:	4643      	mov	r3, r8
 8015cfc:	4652      	mov	r2, sl
 8015cfe:	4649      	mov	r1, r9
 8015d00:	f7ff ff46 	bl	8015b90 <_ZN8touchgfxL10applyNoiseEiihhh>
 8015d04:	3601      	adds	r6, #1
 8015d06:	f824 0b02 	strh.w	r0, [r4], #2
 8015d0a:	e7f1      	b.n	8015cf0 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0xd0>
 8015d0c:	0e12      	lsrs	r2, r2, #24
 8015d0e:	fb02 f20a 	mul.w	r2, r2, sl
 8015d12:	1c53      	adds	r3, r2, #1
 8015d14:	eb03 2222 	add.w	r2, r3, r2, asr #8
 8015d18:	1212      	asrs	r2, r2, #8
 8015d1a:	fb02 f50c 	mul.w	r5, r2, ip
 8015d1e:	fb02 f10e 	mul.w	r1, r2, lr
 8015d22:	4350      	muls	r0, r2
 8015d24:	43d2      	mvns	r2, r2
 8015d26:	26ff      	movs	r6, #255	@ 0xff
 8015d28:	f8df c3ac 	ldr.w	ip, [pc, #940]	@ 80160d8 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4b8>
 8015d2c:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 8015d30:	42bc      	cmp	r4, r7
 8015d32:	f080 81c7 	bcs.w	80160c4 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a4>
 8015d36:	f8b4 e000 	ldrh.w	lr, [r4]
 8015d3a:	ea0e 030c 	and.w	r3, lr, ip
 8015d3e:	f40e 68fc 	and.w	r8, lr, #2016	@ 0x7e0
 8015d42:	fb02 1303 	mla	r3, r2, r3, r1
 8015d46:	fb02 0808 	mla	r8, r2, r8, r0
 8015d4a:	f00e 0e1f 	and.w	lr, lr, #31
 8015d4e:	fb02 5e0e 	mla	lr, r2, lr, r5
 8015d52:	fb93 f3f6 	sdiv	r3, r3, r6
 8015d56:	fb98 f8f6 	sdiv	r8, r8, r6
 8015d5a:	fb9e fef6 	sdiv	lr, lr, r6
 8015d5e:	ea03 030c 	and.w	r3, r3, ip
 8015d62:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 8015d66:	ea43 0308 	orr.w	r3, r3, r8
 8015d6a:	f00e 0e1f 	and.w	lr, lr, #31
 8015d6e:	ea43 030e 	orr.w	r3, r3, lr
 8015d72:	f824 3b02 	strh.w	r3, [r4], #2
 8015d76:	e7db      	b.n	8015d30 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x110>
 8015d78:	7c82      	ldrb	r2, [r0, #18]
 8015d7a:	2a00      	cmp	r2, #0
 8015d7c:	d050      	beq.n	8015e20 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x200>
 8015d7e:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8015d82:	ee07 2a90 	vmov	s15, r2
 8015d86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015d8a:	ee07 3a10 	vmov	s14, r3
 8015d8e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8015d92:	eef4 6ae7 	vcmpe.f32	s13, s15
 8015d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d9a:	461f      	mov	r7, r3
 8015d9c:	f200 8096 	bhi.w	8015ecc <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x2ac>
 8015da0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8015da4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8015da8:	ee37 7a66 	vsub.f32	s14, s14, s13
 8015dac:	ee06 6a90 	vmov	s13, r6
 8015db0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015db4:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8015db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015dbc:	bf44      	itt	mi
 8015dbe:	eebd 7ac7 	vcvtmi.s32.f32	s14, s14
 8015dc2:	ed8d 7a02 	vstrmi	s14, [sp, #8]
 8015dc6:	ed95 7a08 	vldr	s14, [r5, #32]
 8015dca:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8015dce:	bf58      	it	pl
 8015dd0:	9602      	strpl	r6, [sp, #8]
 8015dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015dd6:	f640 71fc 	movw	r1, #4092	@ 0xffc
 8015dda:	bfc8      	it	gt
 8015ddc:	2100      	movgt	r1, #0
 8015dde:	68ea      	ldr	r2, [r5, #12]
 8015de0:	f895 c010 	ldrb.w	ip, [r5, #16]
 8015de4:	5852      	ldr	r2, [r2, r1]
 8015de6:	9902      	ldr	r1, [sp, #8]
 8015de8:	ea4f 2b12 	mov.w	fp, r2, lsr #8
 8015dec:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8015df0:	0950      	lsrs	r0, r2, #5
 8015df2:	9103      	str	r1, [sp, #12]
 8015df4:	f40b 4b78 	and.w	fp, fp, #63488	@ 0xf800
 8015df8:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8015dfc:	f3c2 01c4 	ubfx	r1, r2, #3, #5
 8015e00:	f1bc 0f00 	cmp.w	ip, #0
 8015e04:	d024      	beq.n	8015e50 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x230>
 8015e06:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8015e0a:	d121      	bne.n	8015e50 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x230>
 8015e0c:	ea4b 0b00 	orr.w	fp, fp, r0
 8015e10:	ea41 010b 	orr.w	r1, r1, fp
 8015e14:	9a03      	ldr	r2, [sp, #12]
 8015e16:	4294      	cmp	r4, r2
 8015e18:	d255      	bcs.n	8015ec6 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x2a6>
 8015e1a:	f824 1b02 	strh.w	r1, [r4], #2
 8015e1e:	e7f9      	b.n	8015e14 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x1f4>
 8015e20:	ee07 9a10 	vmov	s14, r9
 8015e24:	edd0 7a06 	vldr	s15, [r0, #24]
 8015e28:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015e2c:	edd0 6a05 	vldr	s13, [r0, #20]
 8015e30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015e34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8015e38:	ed90 7a08 	vldr	s14, [r0, #32]
 8015e3c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8015e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e44:	bf44      	itt	mi
 8015e46:	ed90 7a07 	vldrmi	s14, [r0, #28]
 8015e4a:	ee77 7ac7 	vsubmi.f32	s15, s15, s14
 8015e4e:	e79c      	b.n	8015d8a <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x16a>
 8015e50:	0e12      	lsrs	r2, r2, #24
 8015e52:	fb02 f20a 	mul.w	r2, r2, sl
 8015e56:	f102 0c01 	add.w	ip, r2, #1
 8015e5a:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 8015e5e:	1212      	asrs	r2, r2, #8
 8015e60:	4350      	muls	r0, r2
 8015e62:	4351      	muls	r1, r2
 8015e64:	fb02 fb0b 	mul.w	fp, r2, fp
 8015e68:	43d2      	mvns	r2, r2
 8015e6a:	f04f 0eff 	mov.w	lr, #255	@ 0xff
 8015e6e:	f8df 8268 	ldr.w	r8, [pc, #616]	@ 80160d8 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4b8>
 8015e72:	9004      	str	r0, [sp, #16]
 8015e74:	9105      	str	r1, [sp, #20]
 8015e76:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 8015e7a:	9903      	ldr	r1, [sp, #12]
 8015e7c:	428c      	cmp	r4, r1
 8015e7e:	d222      	bcs.n	8015ec6 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x2a6>
 8015e80:	8820      	ldrh	r0, [r4, #0]
 8015e82:	f400 61fc 	and.w	r1, r0, #2016	@ 0x7e0
 8015e86:	460f      	mov	r7, r1
 8015e88:	9904      	ldr	r1, [sp, #16]
 8015e8a:	ea00 0c08 	and.w	ip, r0, r8
 8015e8e:	fb02 bc0c 	mla	ip, r2, ip, fp
 8015e92:	fb02 1107 	mla	r1, r2, r7, r1
 8015e96:	fb9c fcfe 	sdiv	ip, ip, lr
 8015e9a:	fb91 f1fe 	sdiv	r1, r1, lr
 8015e9e:	ea0c 0c08 	and.w	ip, ip, r8
 8015ea2:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8015ea6:	ea4c 0101 	orr.w	r1, ip, r1
 8015eaa:	f000 0c1f 	and.w	ip, r0, #31
 8015eae:	9805      	ldr	r0, [sp, #20]
 8015eb0:	fb02 0c0c 	mla	ip, r2, ip, r0
 8015eb4:	fb9c fcfe 	sdiv	ip, ip, lr
 8015eb8:	f00c 0c1f 	and.w	ip, ip, #31
 8015ebc:	ea41 010c 	orr.w	r1, r1, ip
 8015ec0:	f824 1b02 	strh.w	r1, [r4], #2
 8015ec4:	e7d9      	b.n	8015e7a <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x25a>
 8015ec6:	9a02      	ldr	r2, [sp, #8]
 8015ec8:	441a      	add	r2, r3
 8015eca:	4617      	mov	r7, r2
 8015ecc:	441e      	add	r6, r3
 8015ece:	b236      	sxth	r6, r6
 8015ed0:	42be      	cmp	r6, r7
 8015ed2:	f340 80f7 	ble.w	80160c4 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a4>
 8015ed6:	ed95 7a07 	vldr	s14, [r5, #28]
 8015eda:	ee06 7a90 	vmov	s13, r7
 8015ede:	ee37 7a87 	vadd.f32	s14, s15, s14
 8015ee2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015ee6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8015eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015eee:	f340 80b3 	ble.w	8016058 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x438>
 8015ef2:	ee06 6a10 	vmov	s12, r6
 8015ef6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8015efa:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8015efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f02:	bfdc      	itt	le
 8015f04:	eebd 7ac7 	vcvtle.s32.f32	s14, s14
 8015f08:	ee17 8a10 	vmovle	r8, s14
 8015f0c:	ed95 7a08 	vldr	s14, [r5, #32]
 8015f10:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8015f14:	bfc8      	it	gt
 8015f16:	46b0      	movgt	r8, r6
 8015f18:	ed9f 8a6d 	vldr	s16, [pc, #436]	@ 80160d0 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4b0>
 8015f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f20:	ed9f 6a6c 	vldr	s12, [pc, #432]	@ 80160d4 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4b4>
 8015f24:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8015f28:	7c2b      	ldrb	r3, [r5, #16]
 8015f2a:	eba8 0707 	sub.w	r7, r8, r7
 8015f2e:	fe38 8a06 	vselgt.f32	s16, s16, s12
 8015f32:	eb04 0747 	add.w	r7, r4, r7, lsl #1
 8015f36:	eea7 8a27 	vfma.f32	s16, s14, s15
 8015f3a:	b1db      	cbz	r3, 8015f74 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x354>
 8015f3c:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8015f40:	d118      	bne.n	8015f74 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x354>
 8015f42:	42bc      	cmp	r4, r7
 8015f44:	d262      	bcs.n	801600c <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x3ec>
 8015f46:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8015f4a:	ee17 0a90 	vmov	r0, s15
 8015f4e:	68eb      	ldr	r3, [r5, #12]
 8015f50:	4649      	mov	r1, r9
 8015f52:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8015f56:	b2d3      	uxtb	r3, r2
 8015f58:	9300      	str	r3, [sp, #0]
 8015f5a:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8015f5e:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8015f62:	f7ff fe15 	bl	8015b90 <_ZN8touchgfxL10applyNoiseEiihhh>
 8015f66:	f824 0b02 	strh.w	r0, [r4], #2
 8015f6a:	edd5 7a08 	vldr	s15, [r5, #32]
 8015f6e:	ee38 8a27 	vadd.f32	s16, s16, s15
 8015f72:	e7e6      	b.n	8015f42 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x322>
 8015f74:	f04f 09ff 	mov.w	r9, #255	@ 0xff
 8015f78:	f8df b15c 	ldr.w	fp, [pc, #348]	@ 80160d8 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4b8>
 8015f7c:	42bc      	cmp	r4, r7
 8015f7e:	d245      	bcs.n	801600c <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x3ec>
 8015f80:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8015f84:	ee17 2a90 	vmov	r2, s15
 8015f88:	68eb      	ldr	r3, [r5, #12]
 8015f8a:	f8b4 e000 	ldrh.w	lr, [r4]
 8015f8e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015f92:	0e13      	lsrs	r3, r2, #24
 8015f94:	fb03 f30a 	mul.w	r3, r3, sl
 8015f98:	1c58      	adds	r0, r3, #1
 8015f9a:	eb00 2023 	add.w	r0, r0, r3, asr #8
 8015f9e:	1200      	asrs	r0, r0, #8
 8015fa0:	ea6f 0c00 	mvn.w	ip, r0
 8015fa4:	ea0e 030b 	and.w	r3, lr, fp
 8015fa8:	fa5f fc8c 	uxtb.w	ip, ip
 8015fac:	fb0c f303 	mul.w	r3, ip, r3
 8015fb0:	ea0b 2112 	and.w	r1, fp, r2, lsr #8
 8015fb4:	b289      	uxth	r1, r1
 8015fb6:	fb00 3101 	mla	r1, r0, r1, r3
 8015fba:	fb91 f1f9 	sdiv	r1, r1, r9
 8015fbe:	ea01 030b 	and.w	r3, r1, fp
 8015fc2:	9302      	str	r3, [sp, #8]
 8015fc4:	0953      	lsrs	r3, r2, #5
 8015fc6:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8015fca:	4619      	mov	r1, r3
 8015fcc:	f40e 63fc 	and.w	r3, lr, #2016	@ 0x7e0
 8015fd0:	fb0c f303 	mul.w	r3, ip, r3
 8015fd4:	f00e 0e1f 	and.w	lr, lr, #31
 8015fd8:	fb0c fc0e 	mul.w	ip, ip, lr
 8015fdc:	fb00 3301 	mla	r3, r0, r1, r3
 8015fe0:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8015fe4:	fb00 c002 	mla	r0, r0, r2, ip
 8015fe8:	fb93 f3f9 	sdiv	r3, r3, r9
 8015fec:	fb90 f0f9 	sdiv	r0, r0, r9
 8015ff0:	9902      	ldr	r1, [sp, #8]
 8015ff2:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8015ff6:	4319      	orrs	r1, r3
 8015ff8:	f000 001f 	and.w	r0, r0, #31
 8015ffc:	4301      	orrs	r1, r0
 8015ffe:	f824 1b02 	strh.w	r1, [r4], #2
 8016002:	edd5 7a08 	vldr	s15, [r5, #32]
 8016006:	ee38 8a27 	vadd.f32	s16, s16, s15
 801600a:	e7b7      	b.n	8015f7c <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x35c>
 801600c:	4546      	cmp	r6, r8
 801600e:	dd59      	ble.n	80160c4 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a4>
 8016010:	edd5 7a08 	vldr	s15, [r5, #32]
 8016014:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801601c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8016020:	bfd8      	it	le
 8016022:	2300      	movle	r3, #0
 8016024:	68ea      	ldr	r2, [r5, #12]
 8016026:	7c29      	ldrb	r1, [r5, #16]
 8016028:	58d2      	ldr	r2, [r2, r3]
 801602a:	eba6 0608 	sub.w	r6, r6, r8
 801602e:	0a10      	lsrs	r0, r2, #8
 8016030:	0953      	lsrs	r3, r2, #5
 8016032:	eb04 0646 	add.w	r6, r4, r6, lsl #1
 8016036:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 801603a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801603e:	f3c2 07c4 	ubfx	r7, r2, #3, #5
 8016042:	b159      	cbz	r1, 801605c <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x43c>
 8016044:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8016048:	d108      	bne.n	801605c <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x43c>
 801604a:	4318      	orrs	r0, r3
 801604c:	4338      	orrs	r0, r7
 801604e:	42b4      	cmp	r4, r6
 8016050:	d238      	bcs.n	80160c4 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a4>
 8016052:	f824 0b02 	strh.w	r0, [r4], #2
 8016056:	e7fa      	b.n	801604e <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x42e>
 8016058:	46b8      	mov	r8, r7
 801605a:	e7d9      	b.n	8016010 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x3f0>
 801605c:	0e12      	lsrs	r2, r2, #24
 801605e:	fb02 f10a 	mul.w	r1, r2, sl
 8016062:	1c4a      	adds	r2, r1, #1
 8016064:	eb02 2221 	add.w	r2, r2, r1, asr #8
 8016068:	1212      	asrs	r2, r2, #8
 801606a:	fb02 f507 	mul.w	r5, r2, r7
 801606e:	4350      	muls	r0, r2
 8016070:	4353      	muls	r3, r2
 8016072:	43d2      	mvns	r2, r2
 8016074:	27ff      	movs	r7, #255	@ 0xff
 8016076:	f8df c060 	ldr.w	ip, [pc, #96]	@ 80160d8 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4b8>
 801607a:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801607e:	42b4      	cmp	r4, r6
 8016080:	d220      	bcs.n	80160c4 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a4>
 8016082:	f8b4 e000 	ldrh.w	lr, [r4]
 8016086:	ea0e 010c 	and.w	r1, lr, ip
 801608a:	f40e 68fc 	and.w	r8, lr, #2016	@ 0x7e0
 801608e:	fb02 0101 	mla	r1, r2, r1, r0
 8016092:	fb02 3808 	mla	r8, r2, r8, r3
 8016096:	f00e 0e1f 	and.w	lr, lr, #31
 801609a:	fb02 5e0e 	mla	lr, r2, lr, r5
 801609e:	fb91 f1f7 	sdiv	r1, r1, r7
 80160a2:	fb98 f8f7 	sdiv	r8, r8, r7
 80160a6:	fb9e fef7 	sdiv	lr, lr, r7
 80160aa:	ea01 010c 	and.w	r1, r1, ip
 80160ae:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 80160b2:	ea41 0108 	orr.w	r1, r1, r8
 80160b6:	f00e 0e1f 	and.w	lr, lr, #31
 80160ba:	ea41 010e 	orr.w	r1, r1, lr
 80160be:	f824 1b02 	strh.w	r1, [r4], #2
 80160c2:	e7dc      	b.n	801607e <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x45e>
 80160c4:	b007      	add	sp, #28
 80160c6:	ecbd 8b02 	vpop	{d8}
 80160ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160ce:	bf00      	nop
 80160d0:	00000000 	.word	0x00000000
 80160d4:	447ffffe 	.word	0x447ffffe
 80160d8:	fffff800 	.word	0xfffff800

080160dc <_ZNK8touchgfx27PainterRGB565LinearGradient8tearDownEv>:
 80160dc:	4770      	bx	lr
	...

080160e0 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>:
 80160e0:	4b06      	ldr	r3, [pc, #24]	@ (80160fc <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE+0x1c>)
 80160e2:	094a      	lsrs	r2, r1, #5
 80160e4:	ea03 2311 	and.w	r3, r3, r1, lsr #8
 80160e8:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80160ec:	60c1      	str	r1, [r0, #12]
 80160ee:	4313      	orrs	r3, r2
 80160f0:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 80160f4:	4319      	orrs	r1, r3
 80160f6:	8201      	strh	r1, [r0, #16]
 80160f8:	4770      	bx	lr
 80160fa:	bf00      	nop
 80160fc:	fffff800 	.word	0xfffff800

08016100 <_ZThn8_N8touchgfx13PainterRGB5658setColorENS_9colortypeE>:
 8016100:	f1a0 0008 	sub.w	r0, r0, #8
 8016104:	e7ec      	b.n	80160e0 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
 8016106:	bf00      	nop

08016108 <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv>:
 8016108:	b508      	push	{r3, lr}
 801610a:	4b05      	ldr	r3, [pc, #20]	@ (8016120 <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv+0x18>)
 801610c:	6818      	ldr	r0, [r3, #0]
 801610e:	6803      	ldr	r3, [r0, #0]
 8016110:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8016114:	4798      	blx	r3
 8016116:	1e43      	subs	r3, r0, #1
 8016118:	4258      	negs	r0, r3
 801611a:	4158      	adcs	r0, r3
 801611c:	bd08      	pop	{r3, pc}
 801611e:	bf00      	nop
 8016120:	2005ba7c 	.word	0x2005ba7c

08016124 <_ZNK8touchgfx13PainterRGB5655paintEPhssssh>:
 8016124:	b430      	push	{r4, r5}
 8016126:	eb01 0442 	add.w	r4, r1, r2, lsl #1
 801612a:	8a02      	ldrh	r2, [r0, #16]
 801612c:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 8016130:	9202      	str	r2, [sp, #8]
 8016132:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8016136:	68c2      	ldr	r2, [r0, #12]
 8016138:	4629      	mov	r1, r5
 801613a:	4620      	mov	r0, r4
 801613c:	bc30      	pop	{r4, r5}
 801613e:	f7fc bac7 	b.w	80126d0 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>

08016142 <_ZNK8touchgfx13PainterRGB5658tearDownEv>:
 8016142:	f7fc baa1 	b.w	8012688 <_ZN8touchgfx5paint8tearDownEv>

08016146 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv>:
 8016146:	2300      	movs	r3, #0
 8016148:	84c3      	strh	r3, [r0, #38]	@ 0x26
 801614a:	8503      	strh	r3, [r0, #40]	@ 0x28
 801614c:	8543      	strh	r3, [r0, #42]	@ 0x2a
 801614e:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8016150:	6980      	ldr	r0, [r0, #24]
 8016152:	b110      	cbz	r0, 801615a <_ZN8touchgfx17CWRVectorRenderer8tearDownEv+0x14>
 8016154:	6803      	ldr	r3, [r0, #0]
 8016156:	691b      	ldr	r3, [r3, #16]
 8016158:	4718      	bx	r3
 801615a:	4770      	bx	lr

0801615c <_ZN8touchgfx17CWRVectorRenderer14setStrokeWidthEf>:
 801615c:	ed80 0a0c 	vstr	s0, [r0, #48]	@ 0x30
 8016160:	4770      	bx	lr

08016162 <_ZN8touchgfx17CWRVectorRenderer8setColorENS_9colortypeE>:
 8016162:	b538      	push	{r3, r4, r5, lr}
 8016164:	0e0b      	lsrs	r3, r1, #24
 8016166:	7783      	strb	r3, [r0, #30]
 8016168:	6803      	ldr	r3, [r0, #0]
 801616a:	4604      	mov	r4, r0
 801616c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801616e:	460d      	mov	r5, r1
 8016170:	4798      	blx	r3
 8016172:	6803      	ldr	r3, [r0, #0]
 8016174:	4629      	mov	r1, r5
 8016176:	689b      	ldr	r3, [r3, #8]
 8016178:	4798      	blx	r3
 801617a:	6823      	ldr	r3, [r4, #0]
 801617c:	4620      	mov	r0, r4
 801617e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016180:	4798      	blx	r3
 8016182:	61a0      	str	r0, [r4, #24]
 8016184:	bd38      	pop	{r3, r4, r5, pc}

08016186 <_ZN8touchgfx17CWRVectorRenderer8setAlphaEh>:
 8016186:	7741      	strb	r1, [r0, #29]
 8016188:	4770      	bx	lr

0801618a <_ZN8touchgfx17CWRVectorRenderer23setTransformationMatrixERKNS_9Matrix3x3E>:
 801618a:	b530      	push	{r4, r5, lr}
 801618c:	460d      	mov	r5, r1
 801618e:	f100 0434 	add.w	r4, r0, #52	@ 0x34
 8016192:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016194:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016196:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016198:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801619a:	682b      	ldr	r3, [r5, #0]
 801619c:	6023      	str	r3, [r4, #0]
 801619e:	bd30      	pop	{r4, r5, pc}

080161a0 <_ZN8touchgfx17CWRVectorRenderer5setupERKNS_4RectES3_>:
 80161a0:	b538      	push	{r3, r4, r5, lr}
 80161a2:	4604      	mov	r4, r0
 80161a4:	2500      	movs	r5, #0
 80161a6:	1d03      	adds	r3, r0, #4
 80161a8:	6808      	ldr	r0, [r1, #0]
 80161aa:	6849      	ldr	r1, [r1, #4]
 80161ac:	c303      	stmia	r3!, {r0, r1}
 80161ae:	6813      	ldr	r3, [r2, #0]
 80161b0:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 80161b4:	f8c4 3026 	str.w	r3, [r4, #38]	@ 0x26
 80161b8:	6853      	ldr	r3, [r2, #4]
 80161ba:	61a5      	str	r5, [r4, #24]
 80161bc:	f8c4 302a 	str.w	r3, [r4, #42]	@ 0x2a
 80161c0:	f005 f85c 	bl	801b27c <_ZN8touchgfx9Matrix3x35resetEv>
 80161c4:	23ff      	movs	r3, #255	@ 0xff
 80161c6:	7763      	strb	r3, [r4, #29]
 80161c8:	77a3      	strb	r3, [r4, #30]
 80161ca:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80161ce:	6323      	str	r3, [r4, #48]	@ 0x30
 80161d0:	2301      	movs	r3, #1
 80161d2:	f884 5025 	strb.w	r5, [r4, #37]	@ 0x25
 80161d6:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 80161da:	bd38      	pop	{r3, r4, r5, pc}

080161dc <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_>:
 80161dc:	ee70 7a41 	vsub.f32	s15, s0, s2
 80161e0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80161e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80161e8:	ed2d 8b0a 	vpush	{d8-d12}
 80161ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161f0:	b087      	sub	sp, #28
 80161f2:	4605      	mov	r5, r0
 80161f4:	eef0 9a40 	vmov.f32	s19, s0
 80161f8:	eeb0 aa60 	vmov.f32	s20, s1
 80161fc:	eeb0 9a41 	vmov.f32	s18, s2
 8016200:	eef0 8a61 	vmov.f32	s17, s3
 8016204:	eeb0 ca42 	vmov.f32	s24, s4
 8016208:	eef0 ca62 	vmov.f32	s25, s5
 801620c:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 8016210:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 8016212:	6802      	ldr	r2, [r0, #0]
 8016214:	d112      	bne.n	801623c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 8016216:	ee70 7ae1 	vsub.f32	s15, s1, s3
 801621a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801621e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016222:	d10b      	bne.n	801623c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 8016224:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8016228:	3901      	subs	r1, #1
 801622a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 801622c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8016230:	b007      	add	sp, #28
 8016232:	ecbd 8b0a 	vpop	{d8-d12}
 8016236:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801623a:	4710      	bx	r2
 801623c:	23ff      	movs	r3, #255	@ 0xff
 801623e:	77ab      	strb	r3, [r5, #30]
 8016240:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8016242:	4628      	mov	r0, r5
 8016244:	4798      	blx	r3
 8016246:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 801624a:	f105 0834 	add.w	r8, r5, #52	@ 0x34
 801624e:	80c3      	strh	r3, [r0, #6]
 8016250:	eef0 0a4a 	vmov.f32	s1, s20
 8016254:	eeb0 0a69 	vmov.f32	s0, s19
 8016258:	4604      	mov	r4, r0
 801625a:	4640      	mov	r0, r8
 801625c:	f005 f8bd 	bl	801b3da <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8016260:	4640      	mov	r0, r8
 8016262:	eeb0 ba40 	vmov.f32	s22, s0
 8016266:	eef0 ba60 	vmov.f32	s23, s1
 801626a:	ed8d 0a00 	vstr	s0, [sp]
 801626e:	edcd 0a01 	vstr	s1, [sp, #4]
 8016272:	eeb0 0a49 	vmov.f32	s0, s18
 8016276:	eef0 0a68 	vmov.f32	s1, s17
 801627a:	f005 f8ae 	bl	801b3da <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801627e:	eeb4 ba40 	vcmp.f32	s22, s0
 8016282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016286:	eef4 ba60 	vcmp.f32	s23, s1
 801628a:	bf0c      	ite	eq
 801628c:	2301      	moveq	r3, #1
 801628e:	2300      	movne	r3, #0
 8016290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016294:	eeb4 ba40 	vcmp.f32	s22, s0
 8016298:	7463      	strb	r3, [r4, #17]
 801629a:	bf0c      	ite	eq
 801629c:	2301      	moveq	r3, #1
 801629e:	2300      	movne	r3, #0
 80162a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162a4:	eeb0 8a40 	vmov.f32	s16, s0
 80162a8:	eef0 aa60 	vmov.f32	s21, s1
 80162ac:	ed8d 0a02 	vstr	s0, [sp, #8]
 80162b0:	edcd 0a03 	vstr	s1, [sp, #12]
 80162b4:	74a3      	strb	r3, [r4, #18]
 80162b6:	f8df 9250 	ldr.w	r9, [pc, #592]	@ 8016508 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x32c>
 80162ba:	d030      	beq.n	801631e <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x142>
 80162bc:	eef4 ba60 	vcmp.f32	s23, s1
 80162c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162c4:	d02b      	beq.n	801631e <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x142>
 80162c6:	ee39 9a69 	vsub.f32	s18, s18, s19
 80162ca:	ee78 8aca 	vsub.f32	s17, s17, s20
 80162ce:	ee89 7a0c 	vdiv.f32	s14, s18, s24
 80162d2:	eec8 7aac 	vdiv.f32	s15, s17, s25
 80162d6:	eef0 0a4a 	vmov.f32	s1, s20
 80162da:	eeb0 0a69 	vmov.f32	s0, s19
 80162de:	eeec 0a87 	vfma.f32	s1, s25, s14
 80162e2:	eea7 0acc 	vfms.f32	s0, s15, s24
 80162e6:	4640      	mov	r0, r8
 80162e8:	f005 f877 	bl	801b3da <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80162ec:	edcd 0a05 	vstr	s1, [sp, #20]
 80162f0:	ee70 0aeb 	vsub.f32	s1, s1, s23
 80162f4:	f899 3000 	ldrb.w	r3, [r9]
 80162f8:	ed8d 0a04 	vstr	s0, [sp, #16]
 80162fc:	2b01      	cmp	r3, #1
 80162fe:	ee30 0a4b 	vsub.f32	s0, s0, s22
 8016302:	bf02      	ittt	eq
 8016304:	eef1 7a60 	vnegeq.f32	s15, s1
 8016308:	eef0 0a40 	vmoveq.f32	s1, s0
 801630c:	eeb0 0a67 	vmoveq.f32	s0, s15
 8016310:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8016314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016318:	d134      	bne.n	8016384 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1a8>
 801631a:	2301      	movs	r3, #1
 801631c:	74a3      	strb	r3, [r4, #18]
 801631e:	f899 2000 	ldrb.w	r2, [r9]
 8016322:	7c63      	ldrb	r3, [r4, #17]
 8016324:	2a01      	cmp	r2, #1
 8016326:	f040 80a4 	bne.w	8016472 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x296>
 801632a:	2b00      	cmp	r3, #0
 801632c:	d072      	beq.n	8016414 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x238>
 801632e:	ee3a 7aeb 	vsub.f32	s14, s21, s23
 8016332:	eddf 6a73 	vldr	s13, [pc, #460]	@ 8016500 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x324>
 8016336:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801633a:	edc4 7a08 	vstr	s15, [r4, #32]
 801633e:	eefd 7aea 	vcvt.s32.f32	s15, s21
 8016342:	ee17 3a90 	vmov	r3, s15
 8016346:	eefd 7aeb 	vcvt.s32.f32	s15, s23
 801634a:	eef4 baea 	vcmpe.f32	s23, s21
 801634e:	b21a      	sxth	r2, r3
 8016350:	ee17 3a90 	vmov	r3, s15
 8016354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016358:	b21b      	sxth	r3, r3
 801635a:	bf47      	ittee	mi
 801635c:	8123      	strhmi	r3, [r4, #8]
 801635e:	8162      	strhmi	r2, [r4, #10]
 8016360:	8122      	strhpl	r2, [r4, #8]
 8016362:	8163      	strhpl	r3, [r4, #10]
 8016364:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8016368:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 801636c:	1a9b      	subs	r3, r3, r2
 801636e:	ee07 3a90 	vmov	s15, r3
 8016372:	2300      	movs	r3, #0
 8016374:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016378:	7463      	strb	r3, [r4, #17]
 801637a:	edc4 7a07 	vstr	s15, [r4, #28]
 801637e:	2301      	movs	r3, #1
 8016380:	74a3      	strb	r3, [r4, #18]
 8016382:	e03f      	b.n	8016404 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x228>
 8016384:	ee80 7a80 	vdiv.f32	s14, s1, s0
 8016388:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801638c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016390:	ed84 7a05 	vstr	s14, [r4, #20]
 8016394:	d102      	bne.n	801639c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1c0>
 8016396:	2301      	movs	r3, #1
 8016398:	7463      	strb	r3, [r4, #17]
 801639a:	e7c0      	b.n	801631e <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x142>
 801639c:	2b01      	cmp	r3, #1
 801639e:	bf09      	itett	eq
 80163a0:	f9b4 2006 	ldrsheq.w	r2, [r4, #6]
 80163a4:	eef0 7a6b 	vmovne.f32	s15, s23
 80163a8:	ee07 2a90 	vmoveq	s15, r2
 80163ac:	eef8 7ae7 	vcvteq.f32.s32	s15, s15
 80163b0:	bf0a      	itet	eq
 80163b2:	ee77 7acb 	vsubeq.f32	s15, s15, s22
 80163b6:	eeeb 7a47 	vfmsne.f32	s15, s22, s14
 80163ba:	eeeb 7ac7 	vfmseq.f32	s15, s23, s14
 80163be:	ee38 8a4b 	vsub.f32	s16, s16, s22
 80163c2:	2b01      	cmp	r3, #1
 80163c4:	ee7a aaeb 	vsub.f32	s21, s21, s23
 80163c8:	edc4 7a06 	vstr	s15, [r4, #24]
 80163cc:	bf02      	ittt	eq
 80163ce:	eef1 7a48 	vnegeq.f32	s15, s16
 80163d2:	eeb0 8a6a 	vmoveq.f32	s16, s21
 80163d6:	eef0 aa67 	vmoveq.f32	s21, s15
 80163da:	eeca 7a87 	vdiv.f32	s15, s21, s14
 80163de:	ee38 8a67 	vsub.f32	s16, s16, s15
 80163e2:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8016504 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x328>
 80163e6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80163ea:	eec7 7a08 	vdiv.f32	s15, s14, s16
 80163ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163f2:	ed84 8a07 	vstr	s16, [r4, #28]
 80163f6:	edc4 7a08 	vstr	s15, [r4, #32]
 80163fa:	d503      	bpl.n	8016404 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x228>
 80163fc:	eeb1 8a48 	vneg.f32	s16, s16
 8016400:	ed84 8a07 	vstr	s16, [r4, #28]
 8016404:	60e7      	str	r7, [r4, #12]
 8016406:	7426      	strb	r6, [r4, #16]
 8016408:	61ac      	str	r4, [r5, #24]
 801640a:	b007      	add	sp, #28
 801640c:	ecbd 8b0a 	vpop	{d8-d12}
 8016410:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016414:	7ca3      	ldrb	r3, [r4, #18]
 8016416:	2b00      	cmp	r3, #0
 8016418:	d0f4      	beq.n	8016404 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x228>
 801641a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801641e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8016500 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x324>
 8016422:	ee00 3a10 	vmov	s0, r3
 8016426:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801642a:	ee30 8a48 	vsub.f32	s16, s0, s16
 801642e:	ee30 0a4b 	vsub.f32	s0, s0, s22
 8016432:	ee38 7a40 	vsub.f32	s14, s16, s0
 8016436:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801643a:	edc4 7a08 	vstr	s15, [r4, #32]
 801643e:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8016442:	ee17 3a90 	vmov	r3, s15
 8016446:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801644a:	eeb4 8ac0 	vcmpe.f32	s16, s0
 801644e:	b21a      	sxth	r2, r3
 8016450:	ee17 3a90 	vmov	r3, s15
 8016454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016458:	b21b      	sxth	r3, r3
 801645a:	bfcc      	ite	gt
 801645c:	8123      	strhgt	r3, [r4, #8]
 801645e:	8163      	strhle	r3, [r4, #10]
 8016460:	f04f 0301 	mov.w	r3, #1
 8016464:	bfc8      	it	gt
 8016466:	8162      	strhgt	r2, [r4, #10]
 8016468:	7463      	strb	r3, [r4, #17]
 801646a:	bfd8      	it	le
 801646c:	8122      	strhle	r2, [r4, #8]
 801646e:	2300      	movs	r3, #0
 8016470:	e786      	b.n	8016380 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1a4>
 8016472:	b1db      	cbz	r3, 80164ac <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x2d0>
 8016474:	ee3a 7aeb 	vsub.f32	s14, s21, s23
 8016478:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8016500 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x324>
 801647c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016480:	edc4 7a08 	vstr	s15, [r4, #32]
 8016484:	eefd 7aea 	vcvt.s32.f32	s15, s21
 8016488:	ee17 3a90 	vmov	r3, s15
 801648c:	eefd 7aeb 	vcvt.s32.f32	s15, s23
 8016490:	eef4 baea 	vcmpe.f32	s23, s21
 8016494:	b21a      	sxth	r2, r3
 8016496:	ee17 3a90 	vmov	r3, s15
 801649a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801649e:	b21b      	sxth	r3, r3
 80164a0:	bf47      	ittee	mi
 80164a2:	8123      	strhmi	r3, [r4, #8]
 80164a4:	8162      	strhmi	r2, [r4, #10]
 80164a6:	8122      	strhpl	r2, [r4, #8]
 80164a8:	8163      	strhpl	r3, [r4, #10]
 80164aa:	e7ab      	b.n	8016404 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x228>
 80164ac:	7ca3      	ldrb	r3, [r4, #18]
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	d0a8      	beq.n	8016404 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x228>
 80164b2:	ee38 7a4b 	vsub.f32	s14, s16, s22
 80164b6:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8016500 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x324>
 80164ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80164be:	edc4 7a08 	vstr	s15, [r4, #32]
 80164c2:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80164c6:	ee17 3a90 	vmov	r3, s15
 80164ca:	eefd 7acb 	vcvt.s32.f32	s15, s22
 80164ce:	eeb4 bac8 	vcmpe.f32	s22, s16
 80164d2:	b21a      	sxth	r2, r3
 80164d4:	ee17 3a90 	vmov	r3, s15
 80164d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164dc:	b21b      	sxth	r3, r3
 80164de:	bf47      	ittee	mi
 80164e0:	8123      	strhmi	r3, [r4, #8]
 80164e2:	8162      	strhmi	r2, [r4, #10]
 80164e4:	8122      	strhpl	r2, [r4, #8]
 80164e6:	8163      	strhpl	r3, [r4, #10]
 80164e8:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80164ec:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80164f0:	1a9b      	subs	r3, r3, r2
 80164f2:	ee07 3a90 	vmov	s15, r3
 80164f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80164fa:	edc4 7a07 	vstr	s15, [r4, #28]
 80164fe:	e781      	b.n	8016404 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x228>
 8016500:	447ffffe 	.word	0x447ffffe
 8016504:	44800000 	.word	0x44800000
 8016508:	2005ba74 	.word	0x2005ba74

0801650c <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>:
 801650c:	b510      	push	{r4, lr}
 801650e:	ed2d 8b02 	vpush	{d8}
 8016512:	eef0 8a62 	vmov.f32	s17, s5
 8016516:	2100      	movs	r1, #0
 8016518:	4604      	mov	r4, r0
 801651a:	eeb0 8a42 	vmov.f32	s16, s4
 801651e:	f015 f945 	bl	802b7ac <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 8016522:	eef0 7a68 	vmov.f32	s15, s17
 8016526:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 801652a:	ee17 2a90 	vmov	r2, s15
 801652e:	eef0 7a48 	vmov.f32	s15, s16
 8016532:	ecbd 8b02 	vpop	{d8}
 8016536:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 801653a:	6823      	ldr	r3, [r4, #0]
 801653c:	4620      	mov	r0, r4
 801653e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016542:	689b      	ldr	r3, [r3, #8]
 8016544:	ee17 1a90 	vmov	r1, s15
 8016548:	4718      	bx	r3

0801654a <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>:
 801654a:	b510      	push	{r4, lr}
 801654c:	ed2d 8b02 	vpush	{d8}
 8016550:	eef0 8a63 	vmov.f32	s17, s7
 8016554:	2100      	movs	r1, #0
 8016556:	4604      	mov	r4, r0
 8016558:	eeb0 8a43 	vmov.f32	s16, s6
 801655c:	f015 f9e8 	bl	802b930 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 8016560:	eef0 7a68 	vmov.f32	s15, s17
 8016564:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8016568:	ee17 2a90 	vmov	r2, s15
 801656c:	eef0 7a48 	vmov.f32	s15, s16
 8016570:	ecbd 8b02 	vpop	{d8}
 8016574:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8016578:	6823      	ldr	r3, [r4, #0]
 801657a:	4620      	mov	r0, r4
 801657c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016580:	689b      	ldr	r3, [r3, #8]
 8016582:	ee17 1a90 	vmov	r1, s15
 8016586:	4718      	bx	r3

08016588 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>:
 8016588:	b513      	push	{r0, r1, r4, lr}
 801658a:	4604      	mov	r4, r0
 801658c:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 801658e:	f004 ff24 	bl	801b3da <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8016592:	eef0 7a60 	vmov.f32	s15, s1
 8016596:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 801659a:	ee17 2a90 	vmov	r2, s15
 801659e:	eef0 7a40 	vmov.f32	s15, s0
 80165a2:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80165a6:	4620      	mov	r0, r4
 80165a8:	ee17 1a90 	vmov	r1, s15
 80165ac:	b002      	add	sp, #8
 80165ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80165b2:	f015 b855 	b.w	802b660 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>

080165b6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>:
 80165b6:	b513      	push	{r0, r1, r4, lr}
 80165b8:	4604      	mov	r4, r0
 80165ba:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 80165bc:	f004 ff0d 	bl	801b3da <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80165c0:	eef0 7a60 	vmov.f32	s15, s1
 80165c4:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80165c8:	ee17 2a90 	vmov	r2, s15
 80165cc:	eef0 7a40 	vmov.f32	s15, s0
 80165d0:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80165d4:	4620      	mov	r0, r4
 80165d6:	ee17 1a90 	vmov	r1, s15
 80165da:	b002      	add	sp, #8
 80165dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80165e0:	f015 b88b 	b.w	802b6fa <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>

080165e4 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>:
 80165e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80165e6:	2400      	movs	r4, #0
 80165e8:	e9dd 0c05 	ldrd	r0, ip, [sp, #20]
 80165ec:	4626      	mov	r6, r4
 80165ee:	f04f 0e01 	mov.w	lr, #1
 80165f2:	9f07      	ldr	r7, [sp, #28]
 80165f4:	4463      	add	r3, ip
 80165f6:	4563      	cmp	r3, ip
 80165f8:	d02d      	beq.n	8016656 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x72>
 80165fa:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
 80165fe:	2d06      	cmp	r5, #6
 8016600:	d8f9      	bhi.n	80165f6 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8016602:	fa0e f505 	lsl.w	r5, lr, r5
 8016606:	f015 0f66 	tst.w	r5, #102	@ 0x66
 801660a:	d10d      	bne.n	8016628 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x44>
 801660c:	f015 0f10 	tst.w	r5, #16
 8016610:	d117      	bne.n	8016642 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5e>
 8016612:	072d      	lsls	r5, r5, #28
 8016614:	d5ef      	bpl.n	80165f6 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8016616:	3801      	subs	r0, #1
 8016618:	b91e      	cbnz	r6, 8016622 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x3e>
 801661a:	eb07 0580 	add.w	r5, r7, r0, lsl #2
 801661e:	682d      	ldr	r5, [r5, #0]
 8016620:	600d      	str	r5, [r1, #0]
 8016622:	b96c      	cbnz	r4, 8016640 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8016624:	2601      	movs	r6, #1
 8016626:	e7e6      	b.n	80165f6 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8016628:	b926      	cbnz	r6, 8016634 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x50>
 801662a:	eb07 0380 	add.w	r3, r7, r0, lsl #2
 801662e:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8016632:	600b      	str	r3, [r1, #0]
 8016634:	b924      	cbnz	r4, 8016640 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8016636:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 801663a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801663e:	6013      	str	r3, [r2, #0]
 8016640:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016642:	3801      	subs	r0, #1
 8016644:	b91c      	cbnz	r4, 801664e <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x6a>
 8016646:	eb07 0480 	add.w	r4, r7, r0, lsl #2
 801664a:	6824      	ldr	r4, [r4, #0]
 801664c:	6014      	str	r4, [r2, #0]
 801664e:	2e00      	cmp	r6, #0
 8016650:	d1f6      	bne.n	8016640 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8016652:	2401      	movs	r4, #1
 8016654:	e7cf      	b.n	80165f6 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8016656:	b90e      	cbnz	r6, 801665c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x78>
 8016658:	2300      	movs	r3, #0
 801665a:	600b      	str	r3, [r1, #0]
 801665c:	2c00      	cmp	r4, #0
 801665e:	d1ef      	bne.n	8016640 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8016660:	2300      	movs	r3, #0
 8016662:	e7ec      	b.n	801663e <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5a>

08016664 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>:
 8016664:	b538      	push	{r3, r4, r5, lr}
 8016666:	4604      	mov	r4, r0
 8016668:	ed2d 8b0a 	vpush	{d8-d12}
 801666c:	460d      	mov	r5, r1
 801666e:	eef0 ba40 	vmov.f32	s23, s0
 8016672:	eeb0 ca60 	vmov.f32	s24, s1
 8016676:	eef0 aa41 	vmov.f32	s21, s2
 801667a:	eeb0 ba61 	vmov.f32	s22, s3
 801667e:	eeb0 9a42 	vmov.f32	s18, s4
 8016682:	eef0 9a62 	vmov.f32	s19, s5
 8016686:	eeb6 aa00 	vmov.f32	s20, #96	@ 0x3f000000  0.5
 801668a:	ee7b 8a29 	vadd.f32	s17, s22, s19
 801668e:	ee3a 8a89 	vadd.f32	s16, s21, s18
 8016692:	ee68 8a8a 	vmul.f32	s17, s17, s20
 8016696:	ee28 8a0a 	vmul.f32	s16, s16, s20
 801669a:	ee3c 0a68 	vsub.f32	s0, s24, s17
 801669e:	ee7b 7ac8 	vsub.f32	s15, s23, s16
 80166a2:	ee20 0a00 	vmul.f32	s0, s0, s0
 80166a6:	eea7 0aa7 	vfma.f32	s0, s15, s15
 80166aa:	f015 fb17 	bl	802bcdc <sqrtf>
 80166ae:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80166b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166b6:	d12e      	bne.n	8016716 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xb2>
 80166b8:	ee79 7a6a 	vsub.f32	s15, s18, s21
 80166bc:	ee39 7acb 	vsub.f32	s14, s19, s22
 80166c0:	eeb0 8a6a 	vmov.f32	s16, s21
 80166c4:	eef0 8a4b 	vmov.f32	s17, s22
 80166c8:	eea7 8a8a 	vfma.f32	s16, s15, s20
 80166cc:	eee7 8a0a 	vfma.f32	s17, s14, s20
 80166d0:	eea7 8a0a 	vfma.f32	s16, s14, s20
 80166d4:	eee7 8aca 	vfms.f32	s17, s15, s20
 80166d8:	2d02      	cmp	r5, #2
 80166da:	dc2f      	bgt.n	801673c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xd8>
 80166dc:	3501      	adds	r5, #1
 80166de:	eef0 1a4b 	vmov.f32	s3, s22
 80166e2:	eeb0 1a6a 	vmov.f32	s2, s21
 80166e6:	4629      	mov	r1, r5
 80166e8:	eef0 2a68 	vmov.f32	s5, s17
 80166ec:	eeb0 2a48 	vmov.f32	s4, s16
 80166f0:	eef0 0a4c 	vmov.f32	s1, s24
 80166f4:	eeb0 0a6b 	vmov.f32	s0, s23
 80166f8:	4620      	mov	r0, r4
 80166fa:	f7ff ffb3 	bl	8016664 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 80166fe:	eef0 0a68 	vmov.f32	s1, s17
 8016702:	eeb0 0a48 	vmov.f32	s0, s16
 8016706:	4620      	mov	r0, r4
 8016708:	f7ff ff55 	bl	80165b6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801670c:	eeb0 ba68 	vmov.f32	s22, s17
 8016710:	eef0 aa48 	vmov.f32	s21, s16
 8016714:	e7b9      	b.n	801668a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x26>
 8016716:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 801671a:	ee38 8a6b 	vsub.f32	s16, s16, s23
 801671e:	ee78 8acc 	vsub.f32	s17, s17, s24
 8016722:	ee28 7a27 	vmul.f32	s14, s16, s15
 8016726:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801672a:	ee87 8a00 	vdiv.f32	s16, s14, s0
 801672e:	eec7 8a80 	vdiv.f32	s17, s15, s0
 8016732:	ee3b 8a88 	vadd.f32	s16, s23, s16
 8016736:	ee7c 8a28 	vadd.f32	s17, s24, s17
 801673a:	e7cd      	b.n	80166d8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x74>
 801673c:	eef0 0a68 	vmov.f32	s1, s17
 8016740:	eeb0 0a48 	vmov.f32	s0, s16
 8016744:	4620      	mov	r0, r4
 8016746:	f7ff ff36 	bl	80165b6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801674a:	ecbd 8b0a 	vpop	{d8-d12}
 801674e:	bd38      	pop	{r3, r4, r5, pc}

08016750 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>:
 8016750:	b510      	push	{r4, lr}
 8016752:	ed2d 8b0a 	vpush	{d8-d12}
 8016756:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 801675a:	4604      	mov	r4, r0
 801675c:	2b02      	cmp	r3, #2
 801675e:	eeb0 ca40 	vmov.f32	s24, s0
 8016762:	eeb0 9a60 	vmov.f32	s18, s1
 8016766:	eef0 9a41 	vmov.f32	s19, s2
 801676a:	eef0 8a61 	vmov.f32	s17, s3
 801676e:	eeb0 ba42 	vmov.f32	s22, s4
 8016772:	eef0 ba62 	vmov.f32	s23, s5
 8016776:	eeb0 aa43 	vmov.f32	s20, s6
 801677a:	eef0 aa63 	vmov.f32	s21, s7
 801677e:	eeb0 8a44 	vmov.f32	s16, s8
 8016782:	eef0 ca64 	vmov.f32	s25, s9
 8016786:	d12c      	bne.n	80167e2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x92>
 8016788:	eef0 0a62 	vmov.f32	s1, s5
 801678c:	eeb0 0a42 	vmov.f32	s0, s4
 8016790:	f7ff ff11 	bl	80165b6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8016794:	ee79 9acb 	vsub.f32	s19, s19, s22
 8016798:	ee7a caec 	vsub.f32	s25, s21, s25
 801679c:	ee78 8aeb 	vsub.f32	s17, s17, s23
 80167a0:	ee3a 8a48 	vsub.f32	s16, s20, s16
 80167a4:	ee69 9aac 	vmul.f32	s19, s19, s25
 80167a8:	ee28 8a88 	vmul.f32	s16, s17, s16
 80167ac:	eef4 9ac8 	vcmpe.f32	s19, s16
 80167b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167b4:	db0f      	blt.n	80167d6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>
 80167b6:	2101      	movs	r1, #1
 80167b8:	eef0 2a6a 	vmov.f32	s5, s21
 80167bc:	eeb0 2a4a 	vmov.f32	s4, s20
 80167c0:	eef0 1a6b 	vmov.f32	s3, s23
 80167c4:	eeb0 1a4b 	vmov.f32	s2, s22
 80167c8:	eef0 0a49 	vmov.f32	s1, s18
 80167cc:	eeb0 0a4c 	vmov.f32	s0, s24
 80167d0:	4620      	mov	r0, r4
 80167d2:	f7ff ff47 	bl	8016664 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 80167d6:	eef0 0a6a 	vmov.f32	s1, s21
 80167da:	eeb0 0a4a 	vmov.f32	s0, s20
 80167de:	4620      	mov	r0, r4
 80167e0:	e035      	b.n	801684e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0xfe>
 80167e2:	2b01      	cmp	r3, #1
 80167e4:	d138      	bne.n	8016858 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 80167e6:	ee31 4ae2 	vsub.f32	s8, s3, s5
 80167ea:	ee33 6a48 	vsub.f32	s12, s6, s16
 80167ee:	ee71 7a42 	vsub.f32	s15, s2, s4
 80167f2:	ee73 6ae4 	vsub.f32	s13, s7, s9
 80167f6:	ee26 7a44 	vnmul.f32	s14, s12, s8
 80167fa:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80167fe:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8016802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016806:	d027      	beq.n	8016858 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8016808:	ee28 8a63 	vnmul.f32	s16, s16, s7
 801680c:	ee61 8ac2 	vnmul.f32	s17, s3, s4
 8016810:	eea4 8a83 	vfma.f32	s16, s9, s6
 8016814:	eee1 8a22 	vfma.f32	s17, s2, s5
 8016818:	ee68 7a67 	vnmul.f32	s15, s16, s15
 801681c:	ee28 8a44 	vnmul.f32	s16, s16, s8
 8016820:	eea6 8aa8 	vfma.f32	s16, s13, s17
 8016824:	eee6 7a28 	vfma.f32	s15, s12, s17
 8016828:	eec8 0a07 	vdiv.f32	s1, s16, s14
 801682c:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8016830:	ee39 9a60 	vsub.f32	s18, s18, s1
 8016834:	ee3c ca40 	vsub.f32	s24, s24, s0
 8016838:	ee29 9a09 	vmul.f32	s18, s18, s18
 801683c:	edd0 7a20 	vldr	s15, [r0, #128]	@ 0x80
 8016840:	eeac 9a0c 	vfma.f32	s18, s24, s24
 8016844:	eef4 7ac9 	vcmpe.f32	s15, s18
 8016848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801684c:	db04      	blt.n	8016858 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 801684e:	f7ff feb2 	bl	80165b6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8016852:	ecbd 8b0a 	vpop	{d8-d12}
 8016856:	bd10      	pop	{r4, pc}
 8016858:	eef0 0a6b 	vmov.f32	s1, s23
 801685c:	eeb0 0a4b 	vmov.f32	s0, s22
 8016860:	4620      	mov	r0, r4
 8016862:	f7ff fea8 	bl	80165b6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8016866:	e7b6      	b.n	80167d6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>

08016868 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>:
 8016868:	b510      	push	{r4, lr}
 801686a:	ed2d 8b0c 	vpush	{d8-d13}
 801686e:	f890 3085 	ldrb.w	r3, [r0, #133]	@ 0x85
 8016872:	4604      	mov	r4, r0
 8016874:	eeb0 9a40 	vmov.f32	s18, s0
 8016878:	eef0 9a60 	vmov.f32	s19, s1
 801687c:	eef0 aa41 	vmov.f32	s21, s2
 8016880:	eeb0 ba61 	vmov.f32	s22, s3
 8016884:	b933      	cbnz	r3, 8016894 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x2c>
 8016886:	f7ff fe96 	bl	80165b6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801688a:	eef0 0a4b 	vmov.f32	s1, s22
 801688e:	eeb0 0a6a 	vmov.f32	s0, s21
 8016892:	e015      	b.n	80168c0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x58>
 8016894:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8016898:	ee71 8a40 	vsub.f32	s17, s2, s0
 801689c:	ee31 8ae0 	vsub.f32	s16, s3, s1
 80168a0:	2b02      	cmp	r3, #2
 80168a2:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80168a6:	ee28 8a27 	vmul.f32	s16, s16, s15
 80168aa:	d10f      	bne.n	80168cc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x64>
 80168ac:	ee70 0ae8 	vsub.f32	s1, s1, s17
 80168b0:	ee30 0a08 	vadd.f32	s0, s0, s16
 80168b4:	f7ff fe7f 	bl	80165b6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80168b8:	ee7b 0a68 	vsub.f32	s1, s22, s17
 80168bc:	ee3a 0a88 	vadd.f32	s0, s21, s16
 80168c0:	4620      	mov	r0, r4
 80168c2:	f7ff fe78 	bl	80165b6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80168c6:	ecbd 8b0c 	vpop	{d8-d13}
 80168ca:	bd10      	pop	{r4, pc}
 80168cc:	f7ff fe73 	bl	80165b6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80168d0:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8016a08 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a0>
 80168d4:	eef0 0a69 	vmov.f32	s1, s19
 80168d8:	eeb0 0a49 	vmov.f32	s0, s18
 80168dc:	eeb1 aa68 	vneg.f32	s20, s17
 80168e0:	eddf ba4a 	vldr	s23, [pc, #296]	@ 8016a0c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a4>
 80168e4:	eee8 0a27 	vfma.f32	s1, s16, s15
 80168e8:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80168ec:	eeea 0a2b 	vfma.f32	s1, s20, s23
 80168f0:	eea8 0a2b 	vfma.f32	s0, s16, s23
 80168f4:	4620      	mov	r0, r4
 80168f6:	f7ff fe5e 	bl	80165b6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80168fa:	eddf 7a45 	vldr	s15, [pc, #276]	@ 8016a10 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a8>
 80168fe:	eef0 0a69 	vmov.f32	s1, s19
 8016902:	eeb0 0a49 	vmov.f32	s0, s18
 8016906:	ed9f ca43 	vldr	s24, [pc, #268]	@ 8016a14 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1ac>
 801690a:	eee8 0a27 	vfma.f32	s1, s16, s15
 801690e:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8016912:	eeea 0a0c 	vfma.f32	s1, s20, s24
 8016916:	eea8 0a0c 	vfma.f32	s0, s16, s24
 801691a:	4620      	mov	r0, r4
 801691c:	f7ff fe4b 	bl	80165b6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8016920:	eddf 7a3d 	vldr	s15, [pc, #244]	@ 8016a18 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b0>
 8016924:	eef0 0a69 	vmov.f32	s1, s19
 8016928:	eeb0 0a49 	vmov.f32	s0, s18
 801692c:	eddf ca3b 	vldr	s25, [pc, #236]	@ 8016a1c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b4>
 8016930:	eee8 0a27 	vfma.f32	s1, s16, s15
 8016934:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8016938:	eeea 0a2c 	vfma.f32	s1, s20, s25
 801693c:	eea8 0a2c 	vfma.f32	s0, s16, s25
 8016940:	4620      	mov	r0, r4
 8016942:	f7ff fe38 	bl	80165b6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8016946:	eddf 7a36 	vldr	s15, [pc, #216]	@ 8016a20 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b8>
 801694a:	eef0 0a69 	vmov.f32	s1, s19
 801694e:	eeb0 0a49 	vmov.f32	s0, s18
 8016952:	eee8 0a27 	vfma.f32	s1, s16, s15
 8016956:	ed9f da33 	vldr	s26, [pc, #204]	@ 8016a24 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1bc>
 801695a:	eea8 0aa7 	vfma.f32	s0, s17, s15
 801695e:	eeea 0a0d 	vfma.f32	s1, s20, s26
 8016962:	eea8 0a0d 	vfma.f32	s0, s16, s26
 8016966:	4620      	mov	r0, r4
 8016968:	f7ff fe25 	bl	80165b6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801696c:	ee79 0a88 	vadd.f32	s1, s19, s16
 8016970:	ee39 0a28 	vadd.f32	s0, s18, s17
 8016974:	ee70 0ae8 	vsub.f32	s1, s1, s17
 8016978:	ee30 0a08 	vadd.f32	s0, s0, s16
 801697c:	4620      	mov	r0, r4
 801697e:	f7ff fe1a 	bl	80165b6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8016982:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8016a28 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c0>
 8016986:	eef0 0a69 	vmov.f32	s1, s19
 801698a:	eeb0 0a49 	vmov.f32	s0, s18
 801698e:	eee8 0a27 	vfma.f32	s1, s16, s15
 8016992:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8016996:	eeea 0a0d 	vfma.f32	s1, s20, s26
 801699a:	eea8 0a0d 	vfma.f32	s0, s16, s26
 801699e:	4620      	mov	r0, r4
 80169a0:	f7ff fe09 	bl	80165b6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80169a4:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8016a2c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c4>
 80169a8:	eef0 0a69 	vmov.f32	s1, s19
 80169ac:	eeb0 0a49 	vmov.f32	s0, s18
 80169b0:	eee8 0a27 	vfma.f32	s1, s16, s15
 80169b4:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80169b8:	eeea 0a2c 	vfma.f32	s1, s20, s25
 80169bc:	eea8 0a2c 	vfma.f32	s0, s16, s25
 80169c0:	4620      	mov	r0, r4
 80169c2:	f7ff fdf8 	bl	80165b6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80169c6:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8016a30 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c8>
 80169ca:	eef0 0a69 	vmov.f32	s1, s19
 80169ce:	eeb0 0a49 	vmov.f32	s0, s18
 80169d2:	eee8 0a27 	vfma.f32	s1, s16, s15
 80169d6:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80169da:	eeea 0a0c 	vfma.f32	s1, s20, s24
 80169de:	eea8 0a0c 	vfma.f32	s0, s16, s24
 80169e2:	4620      	mov	r0, r4
 80169e4:	f7ff fde7 	bl	80165b6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80169e8:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8016a34 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1cc>
 80169ec:	eef0 0a69 	vmov.f32	s1, s19
 80169f0:	eeb0 0a49 	vmov.f32	s0, s18
 80169f4:	eee8 0a27 	vfma.f32	s1, s16, s15
 80169f8:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80169fc:	eeea 0a2b 	vfma.f32	s1, s20, s23
 8016a00:	eea8 0a2b 	vfma.f32	s0, s16, s23
 8016a04:	4620      	mov	r0, r4
 8016a06:	e73e      	b.n	8016886 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1e>
 8016a08:	3d23d70a 	.word	0x3d23d70a
 8016a0c:	3e8f5c29 	.word	0x3e8f5c29
 8016a10:	3e4ccccd 	.word	0x3e4ccccd
 8016a14:	3f19999a 	.word	0x3f19999a
 8016a18:	3ecccccd 	.word	0x3ecccccd
 8016a1c:	3f4ccccd 	.word	0x3f4ccccd
 8016a20:	3f3851ec 	.word	0x3f3851ec
 8016a24:	3f75c28f 	.word	0x3f75c28f
 8016a28:	3fa3d70a 	.word	0x3fa3d70a
 8016a2c:	3fcccccd 	.word	0x3fcccccd
 8016a30:	3fe66666 	.word	0x3fe66666
 8016a34:	3ffae148 	.word	0x3ffae148

08016a38 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>:
 8016a38:	b570      	push	{r4, r5, r6, lr}
 8016a3a:	ed2d 8b06 	vpush	{d8-d10}
 8016a3e:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 8016a42:	ed90 9a22 	vldr	s18, [r0, #136]	@ 0x88
 8016a46:	ee30 8ac8 	vsub.f32	s16, s1, s16
 8016a4a:	ee30 9a49 	vsub.f32	s18, s0, s18
 8016a4e:	eef0 aa40 	vmov.f32	s21, s0
 8016a52:	ee28 0a08 	vmul.f32	s0, s16, s16
 8016a56:	eea9 0a09 	vfma.f32	s0, s18, s18
 8016a5a:	4604      	mov	r4, r0
 8016a5c:	eeb0 aa60 	vmov.f32	s20, s1
 8016a60:	f015 f93c 	bl	802bcdc <sqrtf>
 8016a64:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8016a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a6c:	dd36      	ble.n	8016adc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xa4>
 8016a6e:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 8016a72:	eec0 6a27 	vdiv.f32	s13, s0, s15
 8016a76:	2600      	movs	r6, #0
 8016a78:	eec8 8a26 	vdiv.f32	s17, s16, s13
 8016a7c:	ed94 0a22 	vldr	s0, [r4, #136]	@ 0x88
 8016a80:	ee89 8a26 	vdiv.f32	s16, s18, s13
 8016a84:	edd4 0a23 	vldr	s1, [r4, #140]	@ 0x8c
 8016a88:	f894 5078 	ldrb.w	r5, [r4, #120]	@ 0x78
 8016a8c:	ee70 9a28 	vadd.f32	s19, s0, s17
 8016a90:	ee30 9ac8 	vsub.f32	s18, s1, s16
 8016a94:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8016a98:	ee78 8aaa 	vadd.f32	s17, s17, s21
 8016a9c:	ee3a 8a48 	vsub.f32	s16, s20, s16
 8016aa0:	b1fd      	cbz	r5, 8016ae2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xaa>
 8016aa2:	edc4 9a24 	vstr	s19, [r4, #144]	@ 0x90
 8016aa6:	ed84 9a25 	vstr	s18, [r4, #148]	@ 0x94
 8016aaa:	edc4 8a26 	vstr	s17, [r4, #152]	@ 0x98
 8016aae:	ed84 8a27 	vstr	s16, [r4, #156]	@ 0x9c
 8016ab2:	eef0 0a49 	vmov.f32	s1, s18
 8016ab6:	eeb0 0a69 	vmov.f32	s0, s19
 8016aba:	4620      	mov	r0, r4
 8016abc:	f7ff fd64 	bl	8016588 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 8016ac0:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
 8016ac4:	edc4 9a28 	vstr	s19, [r4, #160]	@ 0xa0
 8016ac8:	ed84 9a29 	vstr	s18, [r4, #164]	@ 0xa4
 8016acc:	edc4 8a2a 	vstr	s17, [r4, #168]	@ 0xa8
 8016ad0:	ed84 8a2b 	vstr	s16, [r4, #172]	@ 0xac
 8016ad4:	edc4 aa22 	vstr	s21, [r4, #136]	@ 0x88
 8016ad8:	ed84 aa23 	vstr	s20, [r4, #140]	@ 0x8c
 8016adc:	ecbd 8b06 	vpop	{d8-d10}
 8016ae0:	bd70      	pop	{r4, r5, r6, pc}
 8016ae2:	f894 307a 	ldrb.w	r3, [r4, #122]	@ 0x7a
 8016ae6:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 8016aea:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 8016aee:	b16b      	cbz	r3, 8016b0c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xd4>
 8016af0:	eef0 1a49 	vmov.f32	s3, s18
 8016af4:	eeb0 1a69 	vmov.f32	s2, s19
 8016af8:	eef0 0a62 	vmov.f32	s1, s5
 8016afc:	eeb0 0a42 	vmov.f32	s0, s4
 8016b00:	4620      	mov	r0, r4
 8016b02:	f7ff feb1 	bl	8016868 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 8016b06:	f884 507a 	strb.w	r5, [r4, #122]	@ 0x7a
 8016b0a:	e7db      	b.n	8016ac4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>
 8016b0c:	eef0 4a48 	vmov.f32	s9, s16
 8016b10:	eeb0 4a68 	vmov.f32	s8, s17
 8016b14:	eef0 3a49 	vmov.f32	s7, s18
 8016b18:	eeb0 3a69 	vmov.f32	s6, s19
 8016b1c:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 8016b20:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 8016b24:	4620      	mov	r0, r4
 8016b26:	f7ff fe13 	bl	8016750 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 8016b2a:	e7cb      	b.n	8016ac4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>

08016b2c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_>:
 8016b2c:	ee07 2a90 	vmov	s15, r2
 8016b30:	ee07 1a10 	vmov	s14, r1
 8016b34:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8016b38:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 8016b3c:	eddf 7a03 	vldr	s15, [pc, #12]	@ 8016b4c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_+0x20>
 8016b40:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8016b44:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016b48:	f7ff bf76 	b.w	8016a38 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8016b4c:	3d000000 	.word	0x3d000000

08016b50 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>:
 8016b50:	b538      	push	{r3, r4, r5, lr}
 8016b52:	ed2d 8b02 	vpush	{d8}
 8016b56:	f890 5079 	ldrb.w	r5, [r0, #121]	@ 0x79
 8016b5a:	4604      	mov	r4, r0
 8016b5c:	b31d      	cbz	r5, 8016ba6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv+0x56>
 8016b5e:	edd0 7a1f 	vldr	s15, [r0, #124]	@ 0x7c
 8016b62:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 8016b66:	ee78 8a67 	vsub.f32	s17, s16, s15
 8016b6a:	ed90 0a22 	vldr	s0, [r0, #136]	@ 0x88
 8016b6e:	eef0 0a68 	vmov.f32	s1, s17
 8016b72:	ee38 8a27 	vadd.f32	s16, s16, s15
 8016b76:	f7ff fd07 	bl	8016588 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 8016b7a:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 8016b7e:	eef0 1a48 	vmov.f32	s3, s16
 8016b82:	eeb0 0a41 	vmov.f32	s0, s2
 8016b86:	eef0 0a68 	vmov.f32	s1, s17
 8016b8a:	4620      	mov	r0, r4
 8016b8c:	f7ff fe6c 	bl	8016868 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 8016b90:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 8016b94:	eef0 1a68 	vmov.f32	s3, s17
 8016b98:	eef0 0a48 	vmov.f32	s1, s16
 8016b9c:	eeb0 0a41 	vmov.f32	s0, s2
 8016ba0:	4620      	mov	r0, r4
 8016ba2:	f7ff fe61 	bl	8016868 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 8016ba6:	ecbd 8b02 	vpop	{d8}
 8016baa:	4628      	mov	r0, r5
 8016bac:	bd38      	pop	{r3, r4, r5, pc}

08016bae <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>:
 8016bae:	b510      	push	{r4, lr}
 8016bb0:	ed2d 8b02 	vpush	{d8}
 8016bb4:	4604      	mov	r4, r0
 8016bb6:	eeb0 8a40 	vmov.f32	s16, s0
 8016bba:	eef0 8a60 	vmov.f32	s17, s1
 8016bbe:	f7ff ffc7 	bl	8016b50 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8016bc2:	b9d0      	cbnz	r0, 8016bfa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x4c>
 8016bc4:	4620      	mov	r0, r4
 8016bc6:	edd4 4a27 	vldr	s9, [r4, #156]	@ 0x9c
 8016bca:	ed94 4a26 	vldr	s8, [r4, #152]	@ 0x98
 8016bce:	edd4 3a25 	vldr	s7, [r4, #148]	@ 0x94
 8016bd2:	ed94 3a24 	vldr	s6, [r4, #144]	@ 0x90
 8016bd6:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 8016bda:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 8016bde:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 8016be2:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 8016be6:	eef0 0a68 	vmov.f32	s1, s17
 8016bea:	eeb0 0a48 	vmov.f32	s0, s16
 8016bee:	f7ff fdaf 	bl	8016750 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 8016bf2:	2001      	movs	r0, #1
 8016bf4:	ecbd 8b02 	vpop	{d8}
 8016bf8:	bd10      	pop	{r4, pc}
 8016bfa:	2000      	movs	r0, #0
 8016bfc:	e7fa      	b.n	8016bf4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x46>

08016bfe <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>:
 8016bfe:	edd0 1a25 	vldr	s3, [r0, #148]	@ 0x94
 8016c02:	ed90 1a24 	vldr	s2, [r0, #144]	@ 0x90
 8016c06:	edd0 0a2b 	vldr	s1, [r0, #172]	@ 0xac
 8016c0a:	ed90 0a2a 	vldr	s0, [r0, #168]	@ 0xa8
 8016c0e:	f7ff be2b 	b.w	8016868 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
	...

08016c14 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>:
 8016c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c18:	b089      	sub	sp, #36	@ 0x24
 8016c1a:	461c      	mov	r4, r3
 8016c1c:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	@ 0x48
 8016c20:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8016c24:	4682      	mov	sl, r0
 8016c26:	9304      	str	r3, [sp, #16]
 8016c28:	2300      	movs	r3, #0
 8016c2a:	4615      	mov	r5, r2
 8016c2c:	f10d 0820 	add.w	r8, sp, #32
 8016c30:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8016c32:	9306      	str	r3, [sp, #24]
 8016c34:	f848 3d04 	str.w	r3, [r8, #-4]!
 8016c38:	9b04      	ldr	r3, [sp, #16]
 8016c3a:	9105      	str	r1, [sp, #20]
 8016c3c:	f886 307a 	strb.w	r3, [r6, #122]	@ 0x7a
 8016c40:	9b05      	ldr	r3, [sp, #20]
 8016c42:	429d      	cmp	r5, r3
 8016c44:	d96d      	bls.n	8016d22 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x10e>
 8016c46:	3d01      	subs	r5, #1
 8016c48:	f819 3005 	ldrb.w	r3, [r9, r5]
 8016c4c:	2b06      	cmp	r3, #6
 8016c4e:	d8f7      	bhi.n	8016c40 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8016c50:	a201      	add	r2, pc, #4	@ (adr r2, 8016c58 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x44>)
 8016c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c56:	bf00      	nop
 8016c58:	08016c77 	.word	0x08016c77
 8016c5c:	08016c41 	.word	0x08016c41
 8016c60:	08016c75 	.word	0x08016c75
 8016c64:	08016c99 	.word	0x08016c99
 8016c68:	08016c99 	.word	0x08016c99
 8016c6c:	08016c9d 	.word	0x08016c9d
 8016c70:	08016cdd 	.word	0x08016cdd
 8016c74:	3c02      	subs	r4, #2
 8016c76:	4650      	mov	r0, sl
 8016c78:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8016c7c:	9400      	str	r4, [sp, #0]
 8016c7e:	462b      	mov	r3, r5
 8016c80:	4642      	mov	r2, r8
 8016c82:	a906      	add	r1, sp, #24
 8016c84:	f7ff fcae 	bl	80165e4 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 8016c88:	eddd 0a07 	vldr	s1, [sp, #28]
 8016c8c:	ed9d 0a06 	vldr	s0, [sp, #24]
 8016c90:	4630      	mov	r0, r6
 8016c92:	f7ff fed1 	bl	8016a38 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8016c96:	e7d3      	b.n	8016c40 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8016c98:	3c01      	subs	r4, #1
 8016c9a:	e7ec      	b.n	8016c76 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x62>
 8016c9c:	f1a4 0b04 	sub.w	fp, r4, #4
 8016ca0:	3c02      	subs	r4, #2
 8016ca2:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8016ca6:	4650      	mov	r0, sl
 8016ca8:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8016cac:	f8cd b000 	str.w	fp, [sp]
 8016cb0:	462b      	mov	r3, r5
 8016cb2:	4642      	mov	r2, r8
 8016cb4:	a906      	add	r1, sp, #24
 8016cb6:	f7ff fc95 	bl	80165e4 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 8016cba:	eddd 2a07 	vldr	s5, [sp, #28]
 8016cbe:	ed9d 2a06 	vldr	s4, [sp, #24]
 8016cc2:	ed54 1a01 	vldr	s3, [r4, #-4]
 8016cc6:	ed14 1a02 	vldr	s2, [r4, #-8]
 8016cca:	edd4 0a01 	vldr	s1, [r4, #4]
 8016cce:	ed94 0a00 	vldr	s0, [r4]
 8016cd2:	4630      	mov	r0, r6
 8016cd4:	f7ff fc1a 	bl	801650c <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8016cd8:	465c      	mov	r4, fp
 8016cda:	e7b1      	b.n	8016c40 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8016cdc:	f1a4 0b06 	sub.w	fp, r4, #6
 8016ce0:	3c02      	subs	r4, #2
 8016ce2:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8016ce6:	4650      	mov	r0, sl
 8016ce8:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8016cec:	f8cd b000 	str.w	fp, [sp]
 8016cf0:	462b      	mov	r3, r5
 8016cf2:	4642      	mov	r2, r8
 8016cf4:	a906      	add	r1, sp, #24
 8016cf6:	f7ff fc75 	bl	80165e4 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 8016cfa:	eddd 3a07 	vldr	s7, [sp, #28]
 8016cfe:	ed9d 3a06 	vldr	s6, [sp, #24]
 8016d02:	ed54 2a03 	vldr	s5, [r4, #-12]
 8016d06:	ed14 2a04 	vldr	s4, [r4, #-16]
 8016d0a:	ed54 1a01 	vldr	s3, [r4, #-4]
 8016d0e:	ed14 1a02 	vldr	s2, [r4, #-8]
 8016d12:	edd4 0a01 	vldr	s1, [r4, #4]
 8016d16:	ed94 0a00 	vldr	s0, [r4]
 8016d1a:	4630      	mov	r0, r6
 8016d1c:	f7ff fc15 	bl	801654a <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8016d20:	e7da      	b.n	8016cd8 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0xc4>
 8016d22:	9b04      	ldr	r3, [sp, #16]
 8016d24:	b113      	cbz	r3, 8016d2c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x118>
 8016d26:	4630      	mov	r0, r6
 8016d28:	f7ff ff69 	bl	8016bfe <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>
 8016d2c:	b009      	add	sp, #36	@ 0x24
 8016d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d32:	bf00      	nop

08016d34 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>:
 8016d34:	eef0 7a60 	vmov.f32	s15, s1
 8016d38:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8016d3c:	ee17 2a90 	vmov	r2, s15
 8016d40:	eef0 7a40 	vmov.f32	s15, s0
 8016d44:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8016d48:	6803      	ldr	r3, [r0, #0]
 8016d4a:	ee17 1a90 	vmov	r1, s15
 8016d4e:	689b      	ldr	r3, [r3, #8]
 8016d50:	4718      	bx	r3
	...

08016d54 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>:
 8016d54:	b510      	push	{r4, lr}
 8016d56:	4604      	mov	r4, r0
 8016d58:	4b03      	ldr	r3, [pc, #12]	@ (8016d68 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev+0x14>)
 8016d5a:	f840 3b14 	str.w	r3, [r0], #20
 8016d5e:	f000 fe43 	bl	80179e8 <_ZN8touchgfx7OutlineD1Ev>
 8016d62:	4620      	mov	r0, r4
 8016d64:	bd10      	pop	{r4, pc}
 8016d66:	bf00      	nop
 8016d68:	0802ff18 	.word	0x0802ff18

08016d6c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>:
 8016d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d70:	ed2d 8b04 	vpush	{d8-d9}
 8016d74:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
 8016d78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d80:	b0b5      	sub	sp, #212	@ 0xd4
 8016d82:	4605      	mov	r5, r0
 8016d84:	468b      	mov	fp, r1
 8016d86:	9206      	str	r2, [sp, #24]
 8016d88:	461e      	mov	r6, r3
 8016d8a:	f04f 0400 	mov.w	r4, #0
 8016d8e:	f240 814e 	bls.w	801702e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c2>
 8016d92:	23ff      	movs	r3, #255	@ 0xff
 8016d94:	9300      	str	r3, [sp, #0]
 8016d96:	1d02      	adds	r2, r0, #4
 8016d98:	6981      	ldr	r1, [r0, #24]
 8016d9a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8016d9c:	a808      	add	r0, sp, #32
 8016d9e:	f014 fb13 	bl	802b3c8 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 8016da2:	edd5 7a0c 	vldr	s15, [r5, #48]	@ 0x30
 8016da6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016dae:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8016db2:	bf48      	it	mi
 8016db4:	eef1 7a67 	vnegmi.f32	s15, s15
 8016db8:	edd5 6a08 	vldr	s13, [r5, #32]
 8016dbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016dc0:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8016dc4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8016dc8:	ed9f 9a9a 	vldr	s18, [pc, #616]	@ 8017034 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c8>
 8016dcc:	f04f 0800 	mov.w	r8, #0
 8016dd0:	edcd 7a27 	vstr	s15, [sp, #156]	@ 0x9c
 8016dd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016dd8:	4b97      	ldr	r3, [pc, #604]	@ (8017038 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2cc>)
 8016dda:	2201      	movs	r2, #1
 8016ddc:	9308      	str	r3, [sp, #32]
 8016dde:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 8016de2:	9325      	str	r3, [sp, #148]	@ 0x94
 8016de4:	2300      	movs	r3, #0
 8016de6:	942a      	str	r4, [sp, #168]	@ 0xa8
 8016de8:	942b      	str	r4, [sp, #172]	@ 0xac
 8016dea:	942c      	str	r4, [sp, #176]	@ 0xb0
 8016dec:	942d      	str	r4, [sp, #180]	@ 0xb4
 8016dee:	942e      	str	r4, [sp, #184]	@ 0xb8
 8016df0:	942f      	str	r4, [sp, #188]	@ 0xbc
 8016df2:	9430      	str	r4, [sp, #192]	@ 0xc0
 8016df4:	9431      	str	r4, [sp, #196]	@ 0xc4
 8016df6:	9432      	str	r4, [sp, #200]	@ 0xc8
 8016df8:	9433      	str	r4, [sp, #204]	@ 0xcc
 8016dfa:	edcd 7a28 	vstr	s15, [sp, #160]	@ 0xa0
 8016dfe:	eef0 9a49 	vmov.f32	s19, s18
 8016e02:	eeb0 8a49 	vmov.f32	s16, s18
 8016e06:	eef0 8a49 	vmov.f32	s17, s18
 8016e0a:	4644      	mov	r4, r8
 8016e0c:	46c1      	mov	r9, r8
 8016e0e:	f04f 0a01 	mov.w	sl, #1
 8016e12:	f88d 3098 	strb.w	r3, [sp, #152]	@ 0x98
 8016e16:	f88d 2099 	strb.w	r2, [sp, #153]	@ 0x99
 8016e1a:	f88d 309a 	strb.w	r3, [sp, #154]	@ 0x9a
 8016e1e:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8016e22:	7f6a      	ldrb	r2, [r5, #29]
 8016e24:	7fab      	ldrb	r3, [r5, #30]
 8016e26:	f895 0024 	ldrb.w	r0, [r5, #36]	@ 0x24
 8016e2a:	435a      	muls	r2, r3
 8016e2c:	1c53      	adds	r3, r2, #1
 8016e2e:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 8016e32:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8016e36:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8016e3a:	f88d 00a4 	strb.w	r0, [sp, #164]	@ 0xa4
 8016e3e:	f88d 10a5 	strb.w	r1, [sp, #165]	@ 0xa5
 8016e42:	f88d 30a6 	strb.w	r3, [sp, #166]	@ 0xa6
 8016e46:	af08      	add	r7, sp, #32
 8016e48:	9b06      	ldr	r3, [sp, #24]
 8016e4a:	454b      	cmp	r3, r9
 8016e4c:	f000 80cc 	beq.w	8016fe8 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x27c>
 8016e50:	f109 0301 	add.w	r3, r9, #1
 8016e54:	9305      	str	r3, [sp, #20]
 8016e56:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8016e5a:	2b06      	cmp	r3, #6
 8016e5c:	d839      	bhi.n	8016ed2 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8016e5e:	e8df f003 	tbb	[pc, r3]
 8016e62:	3b04      	.short	0x3b04
 8016e64:	817c6f60 	.word	0x817c6f60
 8016e68:	a0          	.byte	0xa0
 8016e69:	00          	.byte	0x00
 8016e6a:	45c1      	cmp	r9, r8
 8016e6c:	d92b      	bls.n	8016ec6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 8016e6e:	eef0 0a49 	vmov.f32	s1, s18
 8016e72:	eeb0 0a69 	vmov.f32	s0, s19
 8016e76:	4638      	mov	r0, r7
 8016e78:	f7ff fdde 	bl	8016a38 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8016e7c:	4638      	mov	r0, r7
 8016e7e:	f7ff fe67 	bl	8016b50 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8016e82:	4681      	mov	r9, r0
 8016e84:	b9f8      	cbnz	r0, 8016ec6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 8016e86:	eef0 0a49 	vmov.f32	s1, s18
 8016e8a:	eeb0 0a69 	vmov.f32	s0, s19
 8016e8e:	4638      	mov	r0, r7
 8016e90:	f7ff fe8d 	bl	8016bae <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 8016e94:	4628      	mov	r0, r5
 8016e96:	e9cd 9702 	strd	r9, r7, [sp, #8]
 8016e9a:	e9cd b600 	strd	fp, r6, [sp]
 8016e9e:	4623      	mov	r3, r4
 8016ea0:	9a05      	ldr	r2, [sp, #20]
 8016ea2:	4641      	mov	r1, r8
 8016ea4:	edcd 9a2a 	vstr	s19, [sp, #168]	@ 0xa8
 8016ea8:	ed8d 9a2b 	vstr	s18, [sp, #172]	@ 0xac
 8016eac:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 8016eb0:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 8016eb4:	f7ff feae 	bl	8016c14 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8016eb8:	eef0 0a49 	vmov.f32	s1, s18
 8016ebc:	eeb0 0a69 	vmov.f32	s0, s19
 8016ec0:	4638      	mov	r0, r7
 8016ec2:	f7ff fe74 	bl	8016bae <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 8016ec6:	eeb0 8a49 	vmov.f32	s16, s18
 8016eca:	eef0 8a69 	vmov.f32	s17, s19
 8016ece:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8016ed2:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8016ed6:	e7b7      	b.n	8016e48 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0xdc>
 8016ed8:	45c1      	cmp	r9, r8
 8016eda:	d90d      	bls.n	8016ef8 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 8016edc:	4638      	mov	r0, r7
 8016ede:	f7ff fe37 	bl	8016b50 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8016ee2:	b948      	cbnz	r0, 8016ef8 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 8016ee4:	e9cd a702 	strd	sl, r7, [sp, #8]
 8016ee8:	e9cd b600 	strd	fp, r6, [sp]
 8016eec:	4623      	mov	r3, r4
 8016eee:	464a      	mov	r2, r9
 8016ef0:	4641      	mov	r1, r8
 8016ef2:	4628      	mov	r0, r5
 8016ef4:	f7ff fe8e 	bl	8016c14 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8016ef8:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8016efc:	edd3 8a00 	vldr	s17, [r3]
 8016f00:	ed93 8a01 	vldr	s16, [r3, #4]
 8016f04:	edcd 8a2a 	vstr	s17, [sp, #168]	@ 0xa8
 8016f08:	ed8d 8a2b 	vstr	s16, [sp, #172]	@ 0xac
 8016f0c:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 8016f10:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 8016f14:	3402      	adds	r4, #2
 8016f16:	46c8      	mov	r8, r9
 8016f18:	eeb0 9a48 	vmov.f32	s18, s16
 8016f1c:	eef0 9a68 	vmov.f32	s19, s17
 8016f20:	e7d7      	b.n	8016ed2 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8016f22:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8016f26:	edd3 8a00 	vldr	s17, [r3]
 8016f2a:	ed93 8a01 	vldr	s16, [r3, #4]
 8016f2e:	eeb0 0a68 	vmov.f32	s0, s17
 8016f32:	eef0 0a48 	vmov.f32	s1, s16
 8016f36:	4638      	mov	r0, r7
 8016f38:	f7ff fd7e 	bl	8016a38 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8016f3c:	3402      	adds	r4, #2
 8016f3e:	e7c8      	b.n	8016ed2 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8016f40:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8016f44:	edd3 8a00 	vldr	s17, [r3]
 8016f48:	eef0 0a48 	vmov.f32	s1, s16
 8016f4c:	eeb0 0a68 	vmov.f32	s0, s17
 8016f50:	4638      	mov	r0, r7
 8016f52:	f7ff fd71 	bl	8016a38 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8016f56:	3401      	adds	r4, #1
 8016f58:	e7bb      	b.n	8016ed2 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8016f5a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8016f5e:	ed93 8a00 	vldr	s16, [r3]
 8016f62:	e7f1      	b.n	8016f48 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x1dc>
 8016f64:	00a3      	lsls	r3, r4, #2
 8016f66:	f103 0208 	add.w	r2, r3, #8
 8016f6a:	f103 090c 	add.w	r9, r3, #12
 8016f6e:	4432      	add	r2, r6
 8016f70:	4433      	add	r3, r6
 8016f72:	44b1      	add	r9, r6
 8016f74:	ed92 2a00 	vldr	s4, [r2]
 8016f78:	eef0 0a48 	vmov.f32	s1, s16
 8016f7c:	eeb0 0a68 	vmov.f32	s0, s17
 8016f80:	edd9 2a00 	vldr	s5, [r9]
 8016f84:	edd3 1a01 	vldr	s3, [r3, #4]
 8016f88:	ed93 1a00 	vldr	s2, [r3]
 8016f8c:	4638      	mov	r0, r7
 8016f8e:	9207      	str	r2, [sp, #28]
 8016f90:	f7ff fabc 	bl	801650c <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8016f94:	9a07      	ldr	r2, [sp, #28]
 8016f96:	ed99 8a00 	vldr	s16, [r9]
 8016f9a:	edd2 8a00 	vldr	s17, [r2]
 8016f9e:	3404      	adds	r4, #4
 8016fa0:	e797      	b.n	8016ed2 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8016fa2:	00a3      	lsls	r3, r4, #2
 8016fa4:	f103 0210 	add.w	r2, r3, #16
 8016fa8:	f103 0914 	add.w	r9, r3, #20
 8016fac:	4432      	add	r2, r6
 8016fae:	4433      	add	r3, r6
 8016fb0:	44b1      	add	r9, r6
 8016fb2:	ed92 3a00 	vldr	s6, [r2]
 8016fb6:	eef0 0a48 	vmov.f32	s1, s16
 8016fba:	eeb0 0a68 	vmov.f32	s0, s17
 8016fbe:	edd9 3a00 	vldr	s7, [r9]
 8016fc2:	edd3 2a03 	vldr	s5, [r3, #12]
 8016fc6:	ed93 2a02 	vldr	s4, [r3, #8]
 8016fca:	edd3 1a01 	vldr	s3, [r3, #4]
 8016fce:	ed93 1a00 	vldr	s2, [r3]
 8016fd2:	4638      	mov	r0, r7
 8016fd4:	9207      	str	r2, [sp, #28]
 8016fd6:	f7ff fab8 	bl	801654a <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8016fda:	9a07      	ldr	r2, [sp, #28]
 8016fdc:	ed99 8a00 	vldr	s16, [r9]
 8016fe0:	edd2 8a00 	vldr	s17, [r2]
 8016fe4:	3406      	adds	r4, #6
 8016fe6:	e774      	b.n	8016ed2 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8016fe8:	9b06      	ldr	r3, [sp, #24]
 8016fea:	af08      	add	r7, sp, #32
 8016fec:	4543      	cmp	r3, r8
 8016fee:	d90f      	bls.n	8017010 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 8016ff0:	4638      	mov	r0, r7
 8016ff2:	f7ff fdad 	bl	8016b50 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8016ff6:	b958      	cbnz	r0, 8017010 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 8016ff8:	2301      	movs	r3, #1
 8016ffa:	9703      	str	r7, [sp, #12]
 8016ffc:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8017000:	f8cd b000 	str.w	fp, [sp]
 8017004:	4623      	mov	r3, r4
 8017006:	9a06      	ldr	r2, [sp, #24]
 8017008:	4641      	mov	r1, r8
 801700a:	4628      	mov	r0, r5
 801700c:	f7ff fe02 	bl	8016c14 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8017010:	f89d 10a6 	ldrb.w	r1, [sp, #166]	@ 0xa6
 8017014:	4638      	mov	r0, r7
 8017016:	f014 fa6b 	bl	802b4f0 <_ZN8touchgfx6Canvas6renderEh>
 801701a:	4604      	mov	r4, r0
 801701c:	4638      	mov	r0, r7
 801701e:	f7ff fe99 	bl	8016d54 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 8017022:	4620      	mov	r0, r4
 8017024:	b035      	add	sp, #212	@ 0xd4
 8017026:	ecbd 8b04 	vpop	{d8-d9}
 801702a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801702e:	2401      	movs	r4, #1
 8017030:	e7f7      	b.n	8017022 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2b6>
 8017032:	bf00      	nop
 8017034:	00000000 	.word	0x00000000
 8017038:	0802f7e4 	.word	0x0802f7e4

0801703c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD0Ev>:
 801703c:	b510      	push	{r4, lr}
 801703e:	4604      	mov	r4, r0
 8017040:	f7ff fe88 	bl	8016d54 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 8017044:	4620      	mov	r0, r4
 8017046:	21b0      	movs	r1, #176	@ 0xb0
 8017048:	f014 fe1f 	bl	802bc8a <_ZdlPvj>
 801704c:	4620      	mov	r0, r4
 801704e:	bd10      	pop	{r4, pc}

08017050 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>:
 8017050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017054:	ed2d 8b06 	vpush	{d8-d10}
 8017058:	4698      	mov	r8, r3
 801705a:	23ff      	movs	r3, #255	@ 0xff
 801705c:	4607      	mov	r7, r0
 801705e:	b0aa      	sub	sp, #168	@ 0xa8
 8017060:	9300      	str	r3, [sp, #0]
 8017062:	4689      	mov	r9, r1
 8017064:	4692      	mov	sl, r2
 8017066:	6981      	ldr	r1, [r0, #24]
 8017068:	1d02      	adds	r2, r0, #4
 801706a:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 801706c:	a80d      	add	r0, sp, #52	@ 0x34
 801706e:	f014 f9ab 	bl	802b3c8 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 8017072:	eddf 0a80 	vldr	s1, [pc, #512]	@ 8017274 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 8017076:	7f3b      	ldrb	r3, [r7, #28]
 8017078:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 801707c:	1e5a      	subs	r2, r3, #1
 801707e:	4253      	negs	r3, r2
 8017080:	4153      	adcs	r3, r2
 8017082:	eeb0 0a60 	vmov.f32	s0, s1
 8017086:	4628      	mov	r0, r5
 8017088:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
 801708c:	ed9f 8a79 	vldr	s16, [pc, #484]	@ 8017274 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 8017090:	f004 f9a3 	bl	801b3da <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8017094:	eef0 8a48 	vmov.f32	s17, s16
 8017098:	eeb0 9a40 	vmov.f32	s18, s0
 801709c:	eef0 9a60 	vmov.f32	s19, s1
 80170a0:	2400      	movs	r4, #0
 80170a2:	44ca      	add	sl, r9
 80170a4:	45ca      	cmp	sl, r9
 80170a6:	f000 80cd 	beq.w	8017244 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x1f4>
 80170aa:	f819 3b01 	ldrb.w	r3, [r9], #1
 80170ae:	2b06      	cmp	r3, #6
 80170b0:	d8f8      	bhi.n	80170a4 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 80170b2:	e8df f003 	tbb	[pc, r3]
 80170b6:	0804      	.short	0x0804
 80170b8:	58533f2a 	.word	0x58533f2a
 80170bc:	8a          	.byte	0x8a
 80170bd:	00          	.byte	0x00
 80170be:	a80d      	add	r0, sp, #52	@ 0x34
 80170c0:	f014 f9f4 	bl	802b4ac <_ZN8touchgfx6Canvas5closeEv>
 80170c4:	e7ee      	b.n	80170a4 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 80170c6:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 80170ca:	edd3 8a00 	vldr	s17, [r3]
 80170ce:	ed93 8a01 	vldr	s16, [r3, #4]
 80170d2:	eeb0 0a68 	vmov.f32	s0, s17
 80170d6:	eef0 0a48 	vmov.f32	s1, s16
 80170da:	4628      	mov	r0, r5
 80170dc:	f004 f97d 	bl	801b3da <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80170e0:	eef0 7a60 	vmov.f32	s15, s1
 80170e4:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80170e8:	ee17 2a90 	vmov	r2, s15
 80170ec:	eef0 7a40 	vmov.f32	s15, s0
 80170f0:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80170f4:	a80d      	add	r0, sp, #52	@ 0x34
 80170f6:	ee17 1a90 	vmov	r1, s15
 80170fa:	eeb0 9a40 	vmov.f32	s18, s0
 80170fe:	eef0 9a60 	vmov.f32	s19, s1
 8017102:	f014 faad 	bl	802b660 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8017106:	3402      	adds	r4, #2
 8017108:	e7cc      	b.n	80170a4 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 801710a:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 801710e:	edd3 8a00 	vldr	s17, [r3]
 8017112:	ed93 8a01 	vldr	s16, [r3, #4]
 8017116:	eeb0 0a68 	vmov.f32	s0, s17
 801711a:	eef0 0a48 	vmov.f32	s1, s16
 801711e:	4628      	mov	r0, r5
 8017120:	f004 f95b 	bl	801b3da <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8017124:	a80d      	add	r0, sp, #52	@ 0x34
 8017126:	eeb0 9a40 	vmov.f32	s18, s0
 801712a:	eef0 9a60 	vmov.f32	s19, s1
 801712e:	f7ff fe01 	bl	8016d34 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8017132:	e7e8      	b.n	8017106 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xb6>
 8017134:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8017138:	edd3 8a00 	vldr	s17, [r3]
 801713c:	eef0 0a48 	vmov.f32	s1, s16
 8017140:	eeb0 0a68 	vmov.f32	s0, s17
 8017144:	4628      	mov	r0, r5
 8017146:	f004 f948 	bl	801b3da <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801714a:	a80d      	add	r0, sp, #52	@ 0x34
 801714c:	eeb0 9a40 	vmov.f32	s18, s0
 8017150:	eef0 9a60 	vmov.f32	s19, s1
 8017154:	3401      	adds	r4, #1
 8017156:	f7ff fded 	bl	8016d34 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 801715a:	e7a3      	b.n	80170a4 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 801715c:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8017160:	ed93 8a00 	vldr	s16, [r3]
 8017164:	e7ea      	b.n	801713c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xec>
 8017166:	1ca3      	adds	r3, r4, #2
 8017168:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 801716c:	ed53 0a01 	vldr	s1, [r3, #-4]
 8017170:	ed13 0a02 	vldr	s0, [r3, #-8]
 8017174:	4628      	mov	r0, r5
 8017176:	edd3 8a00 	vldr	s17, [r3]
 801717a:	ed93 8a01 	vldr	s16, [r3, #4]
 801717e:	f004 f92c 	bl	801b3da <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8017182:	4628      	mov	r0, r5
 8017184:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 8017188:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 801718c:	eeb0 0a68 	vmov.f32	s0, s17
 8017190:	eef0 0a48 	vmov.f32	s1, s16
 8017194:	f004 f921 	bl	801b3da <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8017198:	eddd 1a0a 	vldr	s3, [sp, #40]	@ 0x28
 801719c:	eef0 2a60 	vmov.f32	s5, s1
 80171a0:	eeb0 2a40 	vmov.f32	s4, s0
 80171a4:	eeb0 aa40 	vmov.f32	s20, s0
 80171a8:	eef0 aa60 	vmov.f32	s21, s1
 80171ac:	ed9d 1a09 	vldr	s2, [sp, #36]	@ 0x24
 80171b0:	eef0 0a69 	vmov.f32	s1, s19
 80171b4:	eeb0 0a49 	vmov.f32	s0, s18
 80171b8:	a80d      	add	r0, sp, #52	@ 0x34
 80171ba:	f7ff f9a7 	bl	801650c <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 80171be:	3404      	adds	r4, #4
 80171c0:	eef0 9a6a 	vmov.f32	s19, s21
 80171c4:	eeb0 9a4a 	vmov.f32	s18, s20
 80171c8:	e76c      	b.n	80170a4 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 80171ca:	1d26      	adds	r6, r4, #4
 80171cc:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80171d0:	ed56 0a03 	vldr	s1, [r6, #-12]
 80171d4:	ed16 0a04 	vldr	s0, [r6, #-16]
 80171d8:	4628      	mov	r0, r5
 80171da:	edd6 8a00 	vldr	s17, [r6]
 80171de:	ed96 8a01 	vldr	s16, [r6, #4]
 80171e2:	f004 f8fa 	bl	801b3da <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80171e6:	4628      	mov	r0, r5
 80171e8:	ed8d 0a07 	vstr	s0, [sp, #28]
 80171ec:	edcd 0a08 	vstr	s1, [sp, #32]
 80171f0:	ed16 0a02 	vldr	s0, [r6, #-8]
 80171f4:	ed56 0a01 	vldr	s1, [r6, #-4]
 80171f8:	f004 f8ef 	bl	801b3da <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80171fc:	4628      	mov	r0, r5
 80171fe:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 8017202:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 8017206:	eeb0 0a68 	vmov.f32	s0, s17
 801720a:	eef0 0a48 	vmov.f32	s1, s16
 801720e:	f004 f8e4 	bl	801b3da <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8017212:	eddd 2a0a 	vldr	s5, [sp, #40]	@ 0x28
 8017216:	eef0 3a60 	vmov.f32	s7, s1
 801721a:	eeb0 3a40 	vmov.f32	s6, s0
 801721e:	eeb0 aa40 	vmov.f32	s20, s0
 8017222:	eef0 aa60 	vmov.f32	s21, s1
 8017226:	ed9d 2a09 	vldr	s4, [sp, #36]	@ 0x24
 801722a:	eddd 1a08 	vldr	s3, [sp, #32]
 801722e:	ed9d 1a07 	vldr	s2, [sp, #28]
 8017232:	eef0 0a69 	vmov.f32	s1, s19
 8017236:	eeb0 0a49 	vmov.f32	s0, s18
 801723a:	a80d      	add	r0, sp, #52	@ 0x34
 801723c:	f7ff f985 	bl	801654a <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8017240:	3406      	adds	r4, #6
 8017242:	e7bd      	b.n	80171c0 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x170>
 8017244:	7f7b      	ldrb	r3, [r7, #29]
 8017246:	7fb9      	ldrb	r1, [r7, #30]
 8017248:	a80d      	add	r0, sp, #52	@ 0x34
 801724a:	4359      	muls	r1, r3
 801724c:	1c4b      	adds	r3, r1, #1
 801724e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8017252:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8017256:	f014 f94b 	bl	802b4f0 <_ZN8touchgfx6Canvas6renderEh>
 801725a:	4604      	mov	r4, r0
 801725c:	4b06      	ldr	r3, [pc, #24]	@ (8017278 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x228>)
 801725e:	a812      	add	r0, sp, #72	@ 0x48
 8017260:	930d      	str	r3, [sp, #52]	@ 0x34
 8017262:	f000 fbc1 	bl	80179e8 <_ZN8touchgfx7OutlineD1Ev>
 8017266:	4620      	mov	r0, r4
 8017268:	b02a      	add	sp, #168	@ 0xa8
 801726a:	ecbd 8b06 	vpop	{d8-d10}
 801726e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017272:	bf00      	nop
 8017274:	00000000 	.word	0x00000000
 8017278:	0802ff18 	.word	0x0802ff18

0801727c <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>:
 801727c:	b410      	push	{r4}
 801727e:	7f04      	ldrb	r4, [r0, #28]
 8017280:	b11c      	cbz	r4, 801728a <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE+0xe>
 8017282:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017286:	f7ff bee3 	b.w	8017050 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>
 801728a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801728e:	f7ff bd6d 	b.w	8016d6c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>
	...

08017294 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_>:
 8017294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017298:	4691      	mov	r9, r2
 801729a:	4602      	mov	r2, r0
 801729c:	4605      	mov	r5, r0
 801729e:	f852 0f26 	ldr.w	r0, [r2, #38]!
 80172a2:	b085      	sub	sp, #20
 80172a4:	4688      	mov	r8, r1
 80172a6:	6851      	ldr	r1, [r2, #4]
 80172a8:	469a      	mov	sl, r3
 80172aa:	ab02      	add	r3, sp, #8
 80172ac:	c303      	stmia	r3!, {r0, r1}
 80172ae:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80172b2:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 80172b6:	2b00      	cmp	r3, #0
 80172b8:	af02      	add	r7, sp, #8
 80172ba:	dd08      	ble.n	80172ce <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3a>
 80172bc:	f9bd 400e 	ldrsh.w	r4, [sp, #14]
 80172c0:	2c00      	cmp	r4, #0
 80172c2:	dd04      	ble.n	80172ce <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3a>
 80172c4:	4a2e      	ldr	r2, [pc, #184]	@ (8017380 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xec>)
 80172c6:	7812      	ldrb	r2, [r2, #0]
 80172c8:	b122      	cbz	r2, 80172d4 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x40>
 80172ca:	2a01      	cmp	r2, #1
 80172cc:	d02d      	beq.n	801732a <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x96>
 80172ce:	b005      	add	sp, #20
 80172d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172d4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80172d8:	441c      	add	r4, r3
 80172da:	b2a4      	uxth	r4, r4
 80172dc:	b226      	sxth	r6, r4
 80172de:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80172e2:	42b3      	cmp	r3, r6
 80172e4:	daf3      	bge.n	80172ce <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3a>
 80172e6:	e9cd b700 	strd	fp, r7, [sp]
 80172ea:	4653      	mov	r3, sl
 80172ec:	464a      	mov	r2, r9
 80172ee:	4641      	mov	r1, r8
 80172f0:	4628      	mov	r0, r5
 80172f2:	f7ff ffc3 	bl	801727c <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>
 80172f6:	b940      	cbnz	r0, 801730a <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x76>
 80172f8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80172fc:	2b01      	cmp	r3, #1
 80172fe:	d004      	beq.n	801730a <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x76>
 8017300:	3301      	adds	r3, #1
 8017302:	105b      	asrs	r3, r3, #1
 8017304:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017308:	e7ed      	b.n	80172e6 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x52>
 801730a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801730e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8017312:	4413      	add	r3, r2
 8017314:	b29b      	uxth	r3, r3
 8017316:	441a      	add	r2, r3
 8017318:	b212      	sxth	r2, r2
 801731a:	4296      	cmp	r6, r2
 801731c:	f8ad 300a 	strh.w	r3, [sp, #10]
 8017320:	dadd      	bge.n	80172de <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x4a>
 8017322:	1ae3      	subs	r3, r4, r3
 8017324:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017328:	e7d9      	b.n	80172de <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x4a>
 801732a:	f8bd 4008 	ldrh.w	r4, [sp, #8]
 801732e:	441c      	add	r4, r3
 8017330:	b2a4      	uxth	r4, r4
 8017332:	b226      	sxth	r6, r4
 8017334:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8017338:	42b3      	cmp	r3, r6
 801733a:	dac8      	bge.n	80172ce <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3a>
 801733c:	e9cd b700 	strd	fp, r7, [sp]
 8017340:	4653      	mov	r3, sl
 8017342:	464a      	mov	r2, r9
 8017344:	4641      	mov	r1, r8
 8017346:	4628      	mov	r0, r5
 8017348:	f7ff ff98 	bl	801727c <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>
 801734c:	b940      	cbnz	r0, 8017360 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xcc>
 801734e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8017352:	2b01      	cmp	r3, #1
 8017354:	d004      	beq.n	8017360 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xcc>
 8017356:	3301      	adds	r3, #1
 8017358:	105b      	asrs	r3, r3, #1
 801735a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801735e:	e7ed      	b.n	801733c <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xa8>
 8017360:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8017364:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8017368:	4413      	add	r3, r2
 801736a:	b29b      	uxth	r3, r3
 801736c:	441a      	add	r2, r3
 801736e:	b212      	sxth	r2, r2
 8017370:	4296      	cmp	r6, r2
 8017372:	f8ad 3008 	strh.w	r3, [sp, #8]
 8017376:	dadd      	bge.n	8017334 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xa0>
 8017378:	1ae3      	subs	r3, r4, r3
 801737a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801737e:	e7d9      	b.n	8017334 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xa0>
 8017380:	2005ba74 	.word	0x2005ba74

08017384 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8017384:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8017386:	6803      	ldr	r3, [r0, #0]
 8017388:	460d      	mov	r5, r1
 801738a:	4604      	mov	r4, r0
 801738c:	4601      	mov	r1, r0
 801738e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017390:	a802      	add	r0, sp, #8
 8017392:	4798      	blx	r3
 8017394:	466b      	mov	r3, sp
 8017396:	6828      	ldr	r0, [r5, #0]
 8017398:	6869      	ldr	r1, [r5, #4]
 801739a:	c303      	stmia	r3!, {r0, r1}
 801739c:	4668      	mov	r0, sp
 801739e:	4619      	mov	r1, r3
 80173a0:	f7fc fec6 	bl	8014130 <_ZN8touchgfx4RectaNERKS0_>
 80173a4:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80173a6:	b188      	cbz	r0, 80173cc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80173a8:	6803      	ldr	r3, [r0, #0]
 80173aa:	1d21      	adds	r1, r4, #4
 80173ac:	68db      	ldr	r3, [r3, #12]
 80173ae:	4798      	blx	r3
 80173b0:	b160      	cbz	r0, 80173cc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80173b2:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	dd08      	ble.n	80173cc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80173ba:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 80173be:	2d00      	cmp	r5, #0
 80173c0:	dd04      	ble.n	80173cc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80173c2:	4a2b      	ldr	r2, [pc, #172]	@ (8017470 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>)
 80173c4:	7812      	ldrb	r2, [r2, #0]
 80173c6:	b11a      	cbz	r2, 80173d0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x4c>
 80173c8:	2a01      	cmp	r2, #1
 80173ca:	d029      	beq.n	8017420 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x9c>
 80173cc:	b004      	add	sp, #16
 80173ce:	bd70      	pop	{r4, r5, r6, pc}
 80173d0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80173d4:	441d      	add	r5, r3
 80173d6:	b2ad      	uxth	r5, r5
 80173d8:	b22e      	sxth	r6, r5
 80173da:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80173de:	42b3      	cmp	r3, r6
 80173e0:	daf4      	bge.n	80173cc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80173e2:	6823      	ldr	r3, [r4, #0]
 80173e4:	4669      	mov	r1, sp
 80173e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80173e8:	4620      	mov	r0, r4
 80173ea:	4798      	blx	r3
 80173ec:	b940      	cbnz	r0, 8017400 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 80173ee:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80173f2:	2b01      	cmp	r3, #1
 80173f4:	d004      	beq.n	8017400 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 80173f6:	3301      	adds	r3, #1
 80173f8:	105b      	asrs	r3, r3, #1
 80173fa:	f8ad 3006 	strh.w	r3, [sp, #6]
 80173fe:	e7f0      	b.n	80173e2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8017400:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8017404:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017408:	4413      	add	r3, r2
 801740a:	b29b      	uxth	r3, r3
 801740c:	441a      	add	r2, r3
 801740e:	b212      	sxth	r2, r2
 8017410:	4296      	cmp	r6, r2
 8017412:	f8ad 3002 	strh.w	r3, [sp, #2]
 8017416:	dae0      	bge.n	80173da <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 8017418:	1aeb      	subs	r3, r5, r3
 801741a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801741e:	e7dc      	b.n	80173da <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 8017420:	f8bd 5000 	ldrh.w	r5, [sp]
 8017424:	441d      	add	r5, r3
 8017426:	b2ad      	uxth	r5, r5
 8017428:	b22e      	sxth	r6, r5
 801742a:	f9bd 3000 	ldrsh.w	r3, [sp]
 801742e:	42b3      	cmp	r3, r6
 8017430:	dacc      	bge.n	80173cc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8017432:	6823      	ldr	r3, [r4, #0]
 8017434:	4669      	mov	r1, sp
 8017436:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017438:	4620      	mov	r0, r4
 801743a:	4798      	blx	r3
 801743c:	b940      	cbnz	r0, 8017450 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 801743e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8017442:	2b01      	cmp	r3, #1
 8017444:	d004      	beq.n	8017450 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 8017446:	3301      	adds	r3, #1
 8017448:	105b      	asrs	r3, r3, #1
 801744a:	f8ad 3004 	strh.w	r3, [sp, #4]
 801744e:	e7f0      	b.n	8017432 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 8017450:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8017454:	f8bd 3000 	ldrh.w	r3, [sp]
 8017458:	4413      	add	r3, r2
 801745a:	b29b      	uxth	r3, r3
 801745c:	441a      	add	r2, r3
 801745e:	b212      	sxth	r2, r2
 8017460:	4296      	cmp	r6, r2
 8017462:	f8ad 3000 	strh.w	r3, [sp]
 8017466:	dae0      	bge.n	801742a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8017468:	1aeb      	subs	r3, r5, r3
 801746a:	f8ad 3004 	strh.w	r3, [sp, #4]
 801746e:	e7dc      	b.n	801742a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8017470:	2005ba74 	.word	0x2005ba74

08017474 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8017474:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017476:	6803      	ldr	r3, [r0, #0]
 8017478:	4604      	mov	r4, r0
 801747a:	4601      	mov	r1, r0
 801747c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801747e:	4668      	mov	r0, sp
 8017480:	4798      	blx	r3
 8017482:	2100      	movs	r1, #0
 8017484:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8017488:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801748c:	9102      	str	r1, [sp, #8]
 801748e:	4668      	mov	r0, sp
 8017490:	a902      	add	r1, sp, #8
 8017492:	f8ad 200c 	strh.w	r2, [sp, #12]
 8017496:	f8ad 300e 	strh.w	r3, [sp, #14]
 801749a:	f7fc fe49 	bl	8014130 <_ZN8touchgfx4RectaNERKS0_>
 801749e:	6823      	ldr	r3, [r4, #0]
 80174a0:	4669      	mov	r1, sp
 80174a2:	691b      	ldr	r3, [r3, #16]
 80174a4:	4620      	mov	r0, r4
 80174a6:	4798      	blx	r3
 80174a8:	b004      	add	sp, #16
 80174aa:	bd10      	pop	{r4, pc}

080174ac <_ZN8touchgfx12CanvasWidgetC1Ev>:
 80174ac:	2101      	movs	r1, #1
 80174ae:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 80174b2:	490b      	ldr	r1, [pc, #44]	@ (80174e0 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 80174b4:	2200      	movs	r2, #0
 80174b6:	6001      	str	r1, [r0, #0]
 80174b8:	21ff      	movs	r1, #255	@ 0xff
 80174ba:	8082      	strh	r2, [r0, #4]
 80174bc:	80c2      	strh	r2, [r0, #6]
 80174be:	8102      	strh	r2, [r0, #8]
 80174c0:	8142      	strh	r2, [r0, #10]
 80174c2:	8182      	strh	r2, [r0, #12]
 80174c4:	81c2      	strh	r2, [r0, #14]
 80174c6:	8202      	strh	r2, [r0, #16]
 80174c8:	8242      	strh	r2, [r0, #18]
 80174ca:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80174ce:	61c2      	str	r2, [r0, #28]
 80174d0:	8402      	strh	r2, [r0, #32]
 80174d2:	8442      	strh	r2, [r0, #34]	@ 0x22
 80174d4:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 80174d8:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
 80174dc:	6282      	str	r2, [r0, #40]	@ 0x28
 80174de:	4770      	bx	lr
 80174e0:	0802f844 	.word	0x0802f844

080174e4 <_ZNK8touchgfx3Box12getSolidRectEv>:
 80174e4:	2300      	movs	r3, #0
 80174e6:	8083      	strh	r3, [r0, #4]
 80174e8:	80c3      	strh	r3, [r0, #6]
 80174ea:	8003      	strh	r3, [r0, #0]
 80174ec:	8043      	strh	r3, [r0, #2]
 80174ee:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 80174f2:	2bff      	cmp	r3, #255	@ 0xff
 80174f4:	bf01      	itttt	eq
 80174f6:	890b      	ldrheq	r3, [r1, #8]
 80174f8:	8083      	strheq	r3, [r0, #4]
 80174fa:	894b      	ldrheq	r3, [r1, #10]
 80174fc:	80c3      	strheq	r3, [r0, #6]
 80174fe:	4770      	bx	lr

08017500 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8017500:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017502:	4604      	mov	r4, r0
 8017504:	466b      	mov	r3, sp
 8017506:	6808      	ldr	r0, [r1, #0]
 8017508:	6849      	ldr	r1, [r1, #4]
 801750a:	c303      	stmia	r3!, {r0, r1}
 801750c:	6823      	ldr	r3, [r4, #0]
 801750e:	4669      	mov	r1, sp
 8017510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017512:	4620      	mov	r0, r4
 8017514:	4798      	blx	r3
 8017516:	4b08      	ldr	r3, [pc, #32]	@ (8017538 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8017518:	681b      	ldr	r3, [r3, #0]
 801751a:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 801751e:	b10a      	cbz	r2, 8017524 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8017520:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8017522:	b900      	cbnz	r0, 8017526 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8017524:	6898      	ldr	r0, [r3, #8]
 8017526:	6803      	ldr	r3, [r0, #0]
 8017528:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801752a:	6a1d      	ldr	r5, [r3, #32]
 801752c:	4669      	mov	r1, sp
 801752e:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8017532:	47a8      	blx	r5
 8017534:	b003      	add	sp, #12
 8017536:	bd30      	pop	{r4, r5, pc}
 8017538:	2005ba7c 	.word	0x2005ba7c

0801753c <_ZNK8touchgfx3Box17invalidateContentEv>:
 801753c:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 8017540:	b12a      	cbz	r2, 801754e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8017542:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8017546:	b112      	cbz	r2, 801754e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8017548:	6803      	ldr	r3, [r0, #0]
 801754a:	695b      	ldr	r3, [r3, #20]
 801754c:	4718      	bx	r3
 801754e:	4770      	bx	lr

08017550 <_ZN8touchgfx10TiledImage9setOffsetEss>:
 8017550:	b570      	push	{r4, r5, r6, lr}
 8017552:	4604      	mov	r4, r0
 8017554:	4615      	mov	r5, r2
 8017556:	6803      	ldr	r3, [r0, #0]
 8017558:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801755a:	4798      	blx	r3
 801755c:	6823      	ldr	r3, [r4, #0]
 801755e:	4629      	mov	r1, r5
 8017560:	4620      	mov	r0, r4
 8017562:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017566:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017568:	4718      	bx	r3

0801756a <_ZN8touchgfx10TiledImage9getOffsetERsS1_>:
 801756a:	b570      	push	{r4, r5, r6, lr}
 801756c:	6803      	ldr	r3, [r0, #0]
 801756e:	4604      	mov	r4, r0
 8017570:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017572:	460e      	mov	r6, r1
 8017574:	4615      	mov	r5, r2
 8017576:	4798      	blx	r3
 8017578:	8030      	strh	r0, [r6, #0]
 801757a:	6823      	ldr	r3, [r4, #0]
 801757c:	4620      	mov	r0, r4
 801757e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8017580:	4798      	blx	r3
 8017582:	8028      	strh	r0, [r5, #0]
 8017584:	bd70      	pop	{r4, r5, r6, pc}

08017586 <_ZN8touchgfx10TiledImage10getXOffsetEv>:
 8017586:	f9b0 002a 	ldrsh.w	r0, [r0, #42]	@ 0x2a
 801758a:	4770      	bx	lr

0801758c <_ZN8touchgfx10TiledImage10getYOffsetEv>:
 801758c:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	@ 0x2c
 8017590:	4770      	bx	lr

08017592 <_ZN8touchgfx10TiledImageD1Ev>:
 8017592:	4770      	bx	lr

08017594 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>:
 8017594:	b510      	push	{r4, lr}
 8017596:	4604      	mov	r4, r0
 8017598:	f000 f9b3 	bl	8017902 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801759c:	6823      	ldr	r3, [r4, #0]
 801759e:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	@ 0x2c
 80175a2:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	@ 0x2a
 80175a6:	4620      	mov	r0, r4
 80175a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80175ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80175ae:	4718      	bx	r3

080175b0 <_ZN8touchgfx10TiledImage10setXOffsetEs>:
 80175b0:	b538      	push	{r3, r4, r5, lr}
 80175b2:	f100 0526 	add.w	r5, r0, #38	@ 0x26
 80175b6:	4604      	mov	r4, r0
 80175b8:	8541      	strh	r1, [r0, #42]	@ 0x2a
 80175ba:	4628      	mov	r0, r5
 80175bc:	f005 fb14 	bl	801cbe8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80175c0:	b188      	cbz	r0, 80175e6 <_ZN8touchgfx10TiledImage10setXOffsetEs+0x36>
 80175c2:	4628      	mov	r0, r5
 80175c4:	f005 fb10 	bl	801cbe8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80175c8:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	@ 0x2a
 80175cc:	fb92 f3f0 	sdiv	r3, r2, r0
 80175d0:	fb03 2010 	mls	r0, r3, r0, r2
 80175d4:	2800      	cmp	r0, #0
 80175d6:	8560      	strh	r0, [r4, #42]	@ 0x2a
 80175d8:	da05      	bge.n	80175e6 <_ZN8touchgfx10TiledImage10setXOffsetEs+0x36>
 80175da:	4628      	mov	r0, r5
 80175dc:	f005 fb04 	bl	801cbe8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80175e0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80175e2:	4418      	add	r0, r3
 80175e4:	8560      	strh	r0, [r4, #42]	@ 0x2a
 80175e6:	bd38      	pop	{r3, r4, r5, pc}

080175e8 <_ZN8touchgfx10TiledImage10setYOffsetEs>:
 80175e8:	b538      	push	{r3, r4, r5, lr}
 80175ea:	f100 0526 	add.w	r5, r0, #38	@ 0x26
 80175ee:	4604      	mov	r4, r0
 80175f0:	8581      	strh	r1, [r0, #44]	@ 0x2c
 80175f2:	4628      	mov	r0, r5
 80175f4:	f005 fb2c 	bl	801cc50 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80175f8:	b188      	cbz	r0, 801761e <_ZN8touchgfx10TiledImage10setYOffsetEs+0x36>
 80175fa:	4628      	mov	r0, r5
 80175fc:	f005 fb28 	bl	801cc50 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017600:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	@ 0x2c
 8017604:	fb92 f3f0 	sdiv	r3, r2, r0
 8017608:	fb03 2010 	mls	r0, r3, r0, r2
 801760c:	2800      	cmp	r0, #0
 801760e:	85a0      	strh	r0, [r4, #44]	@ 0x2c
 8017610:	da05      	bge.n	801761e <_ZN8touchgfx10TiledImage10setYOffsetEs+0x36>
 8017612:	4628      	mov	r0, r5
 8017614:	f005 fb1c 	bl	801cc50 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017618:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 801761a:	4418      	add	r0, r3
 801761c:	85a0      	strh	r0, [r4, #44]	@ 0x2c
 801761e:	bd38      	pop	{r3, r4, r5, pc}

08017620 <_ZN8touchgfx10TiledImageD0Ev>:
 8017620:	b510      	push	{r4, lr}
 8017622:	4604      	mov	r4, r0
 8017624:	2130      	movs	r1, #48	@ 0x30
 8017626:	f014 fb30 	bl	802bc8a <_ZdlPvj>
 801762a:	4620      	mov	r0, r4
 801762c:	bd10      	pop	{r4, pc}
	...

08017630 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE>:
 8017630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017634:	f100 0b26 	add.w	fp, r0, #38	@ 0x26
 8017638:	b093      	sub	sp, #76	@ 0x4c
 801763a:	4607      	mov	r7, r0
 801763c:	4658      	mov	r0, fp
 801763e:	460e      	mov	r6, r1
 8017640:	f005 fad2 	bl	801cbe8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017644:	4681      	mov	r9, r0
 8017646:	4658      	mov	r0, fp
 8017648:	f005 fb02 	bl	801cc50 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801764c:	4605      	mov	r5, r0
 801764e:	f1b9 0f00 	cmp.w	r9, #0
 8017652:	f000 80c4 	beq.w	80177de <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 8017656:	2800      	cmp	r0, #0
 8017658:	f000 80c1 	beq.w	80177de <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 801765c:	2300      	movs	r3, #0
 801765e:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
 8017662:	683b      	ldr	r3, [r7, #0]
 8017664:	a90e      	add	r1, sp, #56	@ 0x38
 8017666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017668:	4638      	mov	r0, r7
 801766a:	4798      	blx	r3
 801766c:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 8017670:	f9b6 3000 	ldrsh.w	r3, [r6]
 8017674:	88b1      	ldrh	r1, [r6, #4]
 8017676:	189c      	adds	r4, r3, r2
 8017678:	440b      	add	r3, r1
 801767a:	fa02 f383 	sxtah	r3, r2, r3
 801767e:	3b01      	subs	r3, #1
 8017680:	fb93 f3f9 	sdiv	r3, r3, r9
 8017684:	fb94 f4f9 	sdiv	r4, r4, r9
 8017688:	fa1f f889 	uxth.w	r8, r9
 801768c:	fb13 f308 	smulbb	r3, r3, r8
 8017690:	fb14 f408 	smulbb	r4, r4, r8
 8017694:	b21b      	sxth	r3, r3
 8017696:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 801769a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801769c:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 80176a0:	1aa4      	subs	r4, r4, r2
 80176a2:	b2aa      	uxth	r2, r5
 80176a4:	9205      	str	r2, [sp, #20]
 80176a6:	185a      	adds	r2, r3, r1
 80176a8:	fb92 f2f5 	sdiv	r2, r2, r5
 80176ac:	9805      	ldr	r0, [sp, #20]
 80176ae:	b2a4      	uxth	r4, r4
 80176b0:	fb12 f200 	smulbb	r2, r2, r0
 80176b4:	1a52      	subs	r2, r2, r1
 80176b6:	b212      	sxth	r2, r2
 80176b8:	920c      	str	r2, [sp, #48]	@ 0x30
 80176ba:	88f2      	ldrh	r2, [r6, #6]
 80176bc:	4413      	add	r3, r2
 80176be:	fa01 f383 	sxtah	r3, r1, r3
 80176c2:	3b01      	subs	r3, #1
 80176c4:	fb93 f3f5 	sdiv	r3, r3, r5
 80176c8:	fb13 f300 	smulbb	r3, r3, r0
 80176cc:	b21b      	sxth	r3, r3
 80176ce:	930d      	str	r3, [sp, #52]	@ 0x34
 80176d0:	eb08 0504 	add.w	r5, r8, r4
 80176d4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80176d6:	b223      	sxth	r3, r4
 80176d8:	4293      	cmp	r3, r2
 80176da:	b2ad      	uxth	r5, r5
 80176dc:	9306      	str	r3, [sp, #24]
 80176de:	dc7e      	bgt.n	80177de <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 80176e0:	b22b      	sxth	r3, r5
 80176e2:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 80176e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80176e8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80176ea:	4599      	cmp	r9, r3
 80176ec:	dd03      	ble.n	80176f6 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xc6>
 80176ee:	4444      	add	r4, r8
 80176f0:	b2a4      	uxth	r4, r4
 80176f2:	4445      	add	r5, r8
 80176f4:	e7ee      	b.n	80176d4 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xa4>
 80176f6:	f9b6 c000 	ldrsh.w	ip, [r6]
 80176fa:	88b2      	ldrh	r2, [r6, #4]
 80176fc:	9806      	ldr	r0, [sp, #24]
 80176fe:	4462      	add	r2, ip
 8017700:	b292      	uxth	r2, r2
 8017702:	b213      	sxth	r3, r2
 8017704:	9905      	ldr	r1, [sp, #20]
 8017706:	9308      	str	r3, [sp, #32]
 8017708:	fa1f f389 	uxth.w	r3, r9
 801770c:	4419      	add	r1, r3
 801770e:	9307      	str	r3, [sp, #28]
 8017710:	4603      	mov	r3, r0
 8017712:	9808      	ldr	r0, [sp, #32]
 8017714:	b289      	uxth	r1, r1
 8017716:	4283      	cmp	r3, r0
 8017718:	fa0f fa81 	sxth.w	sl, r1
 801771c:	da5b      	bge.n	80177d6 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 801771e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8017720:	4584      	cmp	ip, r0
 8017722:	da58      	bge.n	80177d6 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 8017724:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 8017728:	f8b6 e006 	ldrh.w	lr, [r6, #6]
 801772c:	4486      	add	lr, r0
 801772e:	fa1f fe8e 	uxth.w	lr, lr
 8017732:	fa0f f38e 	sxth.w	r3, lr
 8017736:	4599      	cmp	r9, r3
 8017738:	9309      	str	r3, [sp, #36]	@ 0x24
 801773a:	da4c      	bge.n	80177d6 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 801773c:	4550      	cmp	r0, sl
 801773e:	da4a      	bge.n	80177d6 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 8017740:	9b06      	ldr	r3, [sp, #24]
 8017742:	459c      	cmp	ip, r3
 8017744:	bfb8      	it	lt
 8017746:	469c      	movlt	ip, r3
 8017748:	9b08      	ldr	r3, [sp, #32]
 801774a:	4548      	cmp	r0, r9
 801774c:	bfb8      	it	lt
 801774e:	4648      	movlt	r0, r9
 8017750:	4699      	mov	r9, r3
 8017752:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017754:	f8ad c040 	strh.w	ip, [sp, #64]	@ 0x40
 8017758:	4599      	cmp	r9, r3
 801775a:	bfc8      	it	gt
 801775c:	462a      	movgt	r2, r5
 801775e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017760:	eba2 020c 	sub.w	r2, r2, ip
 8017764:	4553      	cmp	r3, sl
 8017766:	bfd8      	it	le
 8017768:	4671      	movle	r1, lr
 801776a:	1a09      	subs	r1, r1, r0
 801776c:	f8ad 2044 	strh.w	r2, [sp, #68]	@ 0x44
 8017770:	f8ad 1046 	strh.w	r1, [sp, #70]	@ 0x46
 8017774:	f8ad 0042 	strh.w	r0, [sp, #66]	@ 0x42
 8017778:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 801777c:	9b07      	ldr	r3, [sp, #28]
 801777e:	1b12      	subs	r2, r2, r4
 8017780:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8017784:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8017788:	1ad2      	subs	r2, r2, r3
 801778a:	4b16      	ldr	r3, [pc, #88]	@ (80177e4 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1b4>)
 801778c:	f8ad 2042 	strh.w	r2, [sp, #66]	@ 0x42
 8017790:	681a      	ldr	r2, [r3, #0]
 8017792:	f892 1058 	ldrb.w	r1, [r2, #88]	@ 0x58
 8017796:	b109      	cbz	r1, 801779c <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16c>
 8017798:	6cd0      	ldr	r0, [r2, #76]	@ 0x4c
 801779a:	b900      	cbnz	r0, 801779e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16e>
 801779c:	6890      	ldr	r0, [r2, #8]
 801779e:	f04f 0c01 	mov.w	ip, #1
 80177a2:	6801      	ldr	r1, [r0, #0]
 80177a4:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 80177a8:	f8cd c008 	str.w	ip, [sp, #8]
 80177ac:	9b07      	ldr	r3, [sp, #28]
 80177ae:	f897 c028 	ldrb.w	ip, [r7, #40]	@ 0x28
 80177b2:	4413      	add	r3, r2
 80177b4:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 80177b8:	f8cd c004 	str.w	ip, [sp, #4]
 80177bc:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 80177c0:	f8cd c000 	str.w	ip, [sp]
 80177c4:	4422      	add	r2, r4
 80177c6:	f8d1 9008 	ldr.w	r9, [r1, #8]
 80177ca:	b21b      	sxth	r3, r3
 80177cc:	b212      	sxth	r2, r2
 80177ce:	4659      	mov	r1, fp
 80177d0:	47c8      	blx	r9
 80177d2:	46d1      	mov	r9, sl
 80177d4:	e788      	b.n	80176e8 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xb8>
 80177d6:	2300      	movs	r3, #0
 80177d8:	e9cd 3310 	strd	r3, r3, [sp, #64]	@ 0x40
 80177dc:	e7cc      	b.n	8017778 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x148>
 80177de:	b013      	add	sp, #76	@ 0x4c
 80177e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177e4:	2005ba7c 	.word	0x2005ba7c

080177e8 <_ZNK8touchgfx10TiledImage12getSolidRectEv>:
 80177e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177ec:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 80177f0:	4606      	mov	r6, r0
 80177f2:	2bff      	cmp	r3, #255	@ 0xff
 80177f4:	4689      	mov	r9, r1
 80177f6:	d008      	beq.n	801780a <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x22>
 80177f8:	2300      	movs	r3, #0
 80177fa:	8003      	strh	r3, [r0, #0]
 80177fc:	8043      	strh	r3, [r0, #2]
 80177fe:	8083      	strh	r3, [r0, #4]
 8017800:	4630      	mov	r0, r6
 8017802:	80f3      	strh	r3, [r6, #6]
 8017804:	b003      	add	sp, #12
 8017806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801780a:	f101 0b26 	add.w	fp, r1, #38	@ 0x26
 801780e:	4659      	mov	r1, fp
 8017810:	4668      	mov	r0, sp
 8017812:	f005 fa51 	bl	801ccb8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8017816:	4658      	mov	r0, fp
 8017818:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 801781c:	f9bd 7000 	ldrsh.w	r7, [sp]
 8017820:	f9bd a002 	ldrsh.w	sl, [sp, #2]
 8017824:	f9bd 8006 	ldrsh.w	r8, [sp, #6]
 8017828:	f005 f9de 	bl	801cbe8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801782c:	4284      	cmp	r4, r0
 801782e:	d10d      	bne.n	801784c <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x64>
 8017830:	f9b9 5008 	ldrsh.w	r5, [r9, #8]
 8017834:	4658      	mov	r0, fp
 8017836:	f005 fa0b 	bl	801cc50 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801783a:	4580      	cmp	r8, r0
 801783c:	d12a      	bne.n	8017894 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xac>
 801783e:	f9b9 300a 	ldrsh.w	r3, [r9, #10]
 8017842:	8037      	strh	r7, [r6, #0]
 8017844:	f8a6 a002 	strh.w	sl, [r6, #2]
 8017848:	80b5      	strh	r5, [r6, #4]
 801784a:	e7d9      	b.n	8017800 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x18>
 801784c:	4658      	mov	r0, fp
 801784e:	f8b9 502a 	ldrh.w	r5, [r9, #42]	@ 0x2a
 8017852:	f005 f9c9 	bl	801cbe8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017856:	1b7f      	subs	r7, r7, r5
 8017858:	b2bd      	uxth	r5, r7
 801785a:	b22f      	sxth	r7, r5
 801785c:	2f00      	cmp	r7, #0
 801785e:	4428      	add	r0, r5
 8017860:	bfa8      	it	ge
 8017862:	4625      	movge	r5, r4
 8017864:	b2a3      	uxth	r3, r4
 8017866:	b280      	uxth	r0, r0
 8017868:	bfb8      	it	lt
 801786a:	18ed      	addlt	r5, r5, r3
 801786c:	4403      	add	r3, r0
 801786e:	b29b      	uxth	r3, r3
 8017870:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
 8017874:	bfb8      	it	lt
 8017876:	b22d      	sxthlt	r5, r5
 8017878:	b219      	sxth	r1, r3
 801787a:	bfbc      	itt	lt
 801787c:	ea25 75e5 	biclt.w	r5, r5, r5, asr #31
 8017880:	2700      	movlt	r7, #0
 8017882:	4291      	cmp	r1, r2
 8017884:	bfc4      	itt	gt
 8017886:	1a9c      	subgt	r4, r3, r2
 8017888:	b224      	sxthgt	r4, r4
 801788a:	42ac      	cmp	r4, r5
 801788c:	bfc4      	itt	gt
 801788e:	b207      	sxthgt	r7, r0
 8017890:	4625      	movgt	r5, r4
 8017892:	e7cf      	b.n	8017834 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x4c>
 8017894:	4658      	mov	r0, fp
 8017896:	f8b9 402c 	ldrh.w	r4, [r9, #44]	@ 0x2c
 801789a:	f005 f9d9 	bl	801cc50 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801789e:	ebaa 0404 	sub.w	r4, sl, r4
 80178a2:	b2a4      	uxth	r4, r4
 80178a4:	fa0f fa84 	sxth.w	sl, r4
 80178a8:	f1ba 0f00 	cmp.w	sl, #0
 80178ac:	bfa8      	it	ge
 80178ae:	4643      	movge	r3, r8
 80178b0:	4420      	add	r0, r4
 80178b2:	fa1f f288 	uxth.w	r2, r8
 80178b6:	b280      	uxth	r0, r0
 80178b8:	bfb8      	it	lt
 80178ba:	18a3      	addlt	r3, r4, r2
 80178bc:	4402      	add	r2, r0
 80178be:	b292      	uxth	r2, r2
 80178c0:	f9b9 100a 	ldrsh.w	r1, [r9, #10]
 80178c4:	bfb8      	it	lt
 80178c6:	b21b      	sxthlt	r3, r3
 80178c8:	b214      	sxth	r4, r2
 80178ca:	bfbc      	itt	lt
 80178cc:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 80178d0:	f04f 0a00 	movlt.w	sl, #0
 80178d4:	428c      	cmp	r4, r1
 80178d6:	bfc4      	itt	gt
 80178d8:	eba2 0801 	subgt.w	r8, r2, r1
 80178dc:	fa0f f888 	sxthgt.w	r8, r8
 80178e0:	4598      	cmp	r8, r3
 80178e2:	bfc4      	itt	gt
 80178e4:	fa0f fa80 	sxthgt.w	sl, r0
 80178e8:	4643      	movgt	r3, r8
 80178ea:	e7aa      	b.n	8017842 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x5a>

080178ec <_ZNK8touchgfx5Image17invalidateContentEv>:
 80178ec:	f890 2028 	ldrb.w	r2, [r0, #40]	@ 0x28
 80178f0:	b12a      	cbz	r2, 80178fe <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 80178f2:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80178f6:	b112      	cbz	r2, 80178fe <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 80178f8:	6803      	ldr	r3, [r0, #0]
 80178fa:	695b      	ldr	r3, [r3, #20]
 80178fc:	4718      	bx	r3
 80178fe:	4770      	bx	lr

08017900 <_ZN8touchgfx5ImageD1Ev>:
 8017900:	4770      	bx	lr

08017902 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8017902:	b570      	push	{r4, r5, r6, lr}
 8017904:	880b      	ldrh	r3, [r1, #0]
 8017906:	4604      	mov	r4, r0
 8017908:	84c3      	strh	r3, [r0, #38]	@ 0x26
 801790a:	4608      	mov	r0, r1
 801790c:	460d      	mov	r5, r1
 801790e:	f005 f96b 	bl	801cbe8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017912:	4606      	mov	r6, r0
 8017914:	4628      	mov	r0, r5
 8017916:	f005 f99b 	bl	801cc50 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801791a:	4605      	mov	r5, r0
 801791c:	6823      	ldr	r3, [r4, #0]
 801791e:	4631      	mov	r1, r6
 8017920:	4620      	mov	r0, r4
 8017922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017924:	4798      	blx	r3
 8017926:	6823      	ldr	r3, [r4, #0]
 8017928:	4629      	mov	r1, r5
 801792a:	4620      	mov	r0, r4
 801792c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017930:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017932:	4718      	bx	r3

08017934 <_ZN8touchgfx5ImageD0Ev>:
 8017934:	b510      	push	{r4, lr}
 8017936:	4604      	mov	r4, r0
 8017938:	212c      	movs	r1, #44	@ 0x2c
 801793a:	f014 f9a6 	bl	802bc8a <_ZdlPvj>
 801793e:	4620      	mov	r0, r4
 8017940:	bd10      	pop	{r4, pc}

08017942 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8017942:	b510      	push	{r4, lr}
 8017944:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8017948:	4604      	mov	r4, r0
 801794a:	2bff      	cmp	r3, #255	@ 0xff
 801794c:	d006      	beq.n	801795c <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801794e:	2300      	movs	r3, #0
 8017950:	8003      	strh	r3, [r0, #0]
 8017952:	8043      	strh	r3, [r0, #2]
 8017954:	8083      	strh	r3, [r0, #4]
 8017956:	80c3      	strh	r3, [r0, #6]
 8017958:	4620      	mov	r0, r4
 801795a:	bd10      	pop	{r4, pc}
 801795c:	3126      	adds	r1, #38	@ 0x26
 801795e:	f005 f9ab 	bl	801ccb8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8017962:	e7f9      	b.n	8017958 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08017964 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8017964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017968:	4604      	mov	r4, r0
 801796a:	2500      	movs	r5, #0
 801796c:	f854 3b26 	ldr.w	r3, [r4], #38
 8017970:	b088      	sub	sp, #32
 8017972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017974:	460f      	mov	r7, r1
 8017976:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801797a:	a904      	add	r1, sp, #16
 801797c:	4606      	mov	r6, r0
 801797e:	4798      	blx	r3
 8017980:	4620      	mov	r0, r4
 8017982:	f005 f931 	bl	801cbe8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017986:	4680      	mov	r8, r0
 8017988:	4620      	mov	r0, r4
 801798a:	f005 f961 	bl	801cc50 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801798e:	9506      	str	r5, [sp, #24]
 8017990:	ad06      	add	r5, sp, #24
 8017992:	f8ad 001e 	strh.w	r0, [sp, #30]
 8017996:	4639      	mov	r1, r7
 8017998:	4628      	mov	r0, r5
 801799a:	f8ad 801c 	strh.w	r8, [sp, #28]
 801799e:	f7fc fbc7 	bl	8014130 <_ZN8touchgfx4RectaNERKS0_>
 80179a2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80179a6:	2b00      	cmp	r3, #0
 80179a8:	dd19      	ble.n	80179de <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80179aa:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80179ae:	2b00      	cmp	r3, #0
 80179b0:	dd15      	ble.n	80179de <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80179b2:	4b0c      	ldr	r3, [pc, #48]	@ (80179e4 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 80179b4:	681b      	ldr	r3, [r3, #0]
 80179b6:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80179ba:	b10a      	cbz	r2, 80179c0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 80179bc:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80179be:	b900      	cbnz	r0, 80179c2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 80179c0:	6898      	ldr	r0, [r3, #8]
 80179c2:	2701      	movs	r7, #1
 80179c4:	6801      	ldr	r1, [r0, #0]
 80179c6:	9702      	str	r7, [sp, #8]
 80179c8:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 80179cc:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80179d0:	e9cd 5600 	strd	r5, r6, [sp]
 80179d4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80179d8:	688d      	ldr	r5, [r1, #8]
 80179da:	4621      	mov	r1, r4
 80179dc:	47a8      	blx	r5
 80179de:	b008      	add	sp, #32
 80179e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179e4:	2005ba7c 	.word	0x2005ba7c

080179e8 <_ZN8touchgfx7OutlineD1Ev>:
 80179e8:	4770      	bx	lr

080179ea <_ZN8touchgfx7OutlineD0Ev>:
 80179ea:	b510      	push	{r4, lr}
 80179ec:	4604      	mov	r4, r0
 80179ee:	2130      	movs	r1, #48	@ 0x30
 80179f0:	f014 f94b 	bl	802bc8a <_ZdlPvj>
 80179f4:	4620      	mov	r0, r4
 80179f6:	bd10      	pop	{r4, pc}

080179f8 <_ZN8touchgfx7Outline5resetEv>:
 80179f8:	b510      	push	{r4, lr}
 80179fa:	4604      	mov	r4, r0
 80179fc:	f000 fe80 	bl	8018700 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8017a00:	60e0      	str	r0, [r4, #12]
 8017a02:	f000 fe83 	bl	801870c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8017a06:	2200      	movs	r2, #0
 8017a08:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8017a0c:	68e3      	ldr	r3, [r4, #12]
 8017a0e:	08c0      	lsrs	r0, r0, #3
 8017a10:	3801      	subs	r0, #1
 8017a12:	6123      	str	r3, [r4, #16]
 8017a14:	6060      	str	r0, [r4, #4]
 8017a16:	60a2      	str	r2, [r4, #8]
 8017a18:	8019      	strh	r1, [r3, #0]
 8017a1a:	8059      	strh	r1, [r3, #2]
 8017a1c:	809a      	strh	r2, [r3, #4]
 8017a1e:	80da      	strh	r2, [r3, #6]
 8017a20:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8017a22:	f023 0301 	bic.w	r3, r3, #1
 8017a26:	f043 0302 	orr.w	r3, r3, #2
 8017a2a:	6263      	str	r3, [r4, #36]	@ 0x24
 8017a2c:	bd10      	pop	{r4, pc}
	...

08017a30 <_ZN8touchgfx7OutlineC1Ev>:
 8017a30:	4b0a      	ldr	r3, [pc, #40]	@ (8017a5c <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 8017a32:	b510      	push	{r4, lr}
 8017a34:	6003      	str	r3, [r0, #0]
 8017a36:	2300      	movs	r3, #0
 8017a38:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8017a3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017a40:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8017a44:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8017a48:	6243      	str	r3, [r0, #36]	@ 0x24
 8017a4a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017a4e:	4604      	mov	r4, r0
 8017a50:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 8017a54:	f7ff ffd0 	bl	80179f8 <_ZN8touchgfx7Outline5resetEv>
 8017a58:	4620      	mov	r0, r4
 8017a5a:	bd10      	pop	{r4, pc}
 8017a5c:	0802fa14 	.word	0x0802fa14

08017a60 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8017a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a64:	b093      	sub	sp, #76	@ 0x4c
 8017a66:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8017a68:	9305      	str	r3, [sp, #20]
 8017a6a:	f004 051f 	and.w	r5, r4, #31
 8017a6e:	1153      	asrs	r3, r2, #5
 8017a70:	9504      	str	r5, [sp, #16]
 8017a72:	1156      	asrs	r6, r2, #5
 8017a74:	1165      	asrs	r5, r4, #5
 8017a76:	9303      	str	r3, [sp, #12]
 8017a78:	42ae      	cmp	r6, r5
 8017a7a:	ea4f 1364 	mov.w	r3, r4, asr #5
 8017a7e:	9306      	str	r3, [sp, #24]
 8017a80:	f002 031f 	and.w	r3, r2, #31
 8017a84:	f040 80f8 	bne.w	8017c78 <_ZN8touchgfx7Outline10renderLineEiiii+0x218>
 8017a88:	9c04      	ldr	r4, [sp, #16]
 8017a8a:	9a05      	ldr	r2, [sp, #20]
 8017a8c:	42a3      	cmp	r3, r4
 8017a8e:	ea4f 1e62 	mov.w	lr, r2, asr #5
 8017a92:	6902      	ldr	r2, [r0, #16]
 8017a94:	d125      	bne.n	8017ae2 <_ZN8touchgfx7Outline10renderLineEiiii+0x82>
 8017a96:	f9b2 3000 	ldrsh.w	r3, [r2]
 8017a9a:	459e      	cmp	lr, r3
 8017a9c:	d103      	bne.n	8017aa6 <_ZN8touchgfx7Outline10renderLineEiiii+0x46>
 8017a9e:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8017aa2:	429e      	cmp	r6, r3
 8017aa4:	d035      	beq.n	8017b12 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8017aa6:	88d1      	ldrh	r1, [r2, #6]
 8017aa8:	8893      	ldrh	r3, [r2, #4]
 8017aaa:	430b      	orrs	r3, r1
 8017aac:	d010      	beq.n	8017ad0 <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 8017aae:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8017ab2:	2b00      	cmp	r3, #0
 8017ab4:	db0c      	blt.n	8017ad0 <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 8017ab6:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8017ab8:	428b      	cmp	r3, r1
 8017aba:	da09      	bge.n	8017ad0 <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 8017abc:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8017ac0:	428b      	cmp	r3, r1
 8017ac2:	bf38      	it	cc
 8017ac4:	3208      	addcc	r2, #8
 8017ac6:	f103 0301 	add.w	r3, r3, #1
 8017aca:	bf38      	it	cc
 8017acc:	6102      	strcc	r2, [r0, #16]
 8017ace:	6083      	str	r3, [r0, #8]
 8017ad0:	6903      	ldr	r3, [r0, #16]
 8017ad2:	9a03      	ldr	r2, [sp, #12]
 8017ad4:	f8a3 e000 	strh.w	lr, [r3]
 8017ad8:	805a      	strh	r2, [r3, #2]
 8017ada:	2200      	movs	r2, #0
 8017adc:	809a      	strh	r2, [r3, #4]
 8017ade:	80da      	strh	r2, [r3, #6]
 8017ae0:	e017      	b.n	8017b12 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8017ae2:	9c05      	ldr	r4, [sp, #20]
 8017ae4:	114e      	asrs	r6, r1, #5
 8017ae6:	f004 041f 	and.w	r4, r4, #31
 8017aea:	9402      	str	r4, [sp, #8]
 8017aec:	9c04      	ldr	r4, [sp, #16]
 8017aee:	4576      	cmp	r6, lr
 8017af0:	f001 0c1f 	and.w	ip, r1, #31
 8017af4:	eba4 0403 	sub.w	r4, r4, r3
 8017af8:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8017afc:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 8017b00:	d10a      	bne.n	8017b18 <_ZN8touchgfx7Outline10renderLineEiiii+0xb8>
 8017b02:	9b02      	ldr	r3, [sp, #8]
 8017b04:	44a0      	add	r8, r4
 8017b06:	449c      	add	ip, r3
 8017b08:	fb04 a40c 	mla	r4, r4, ip, sl
 8017b0c:	f8a2 8004 	strh.w	r8, [r2, #4]
 8017b10:	80d4      	strh	r4, [r2, #6]
 8017b12:	b013      	add	sp, #76	@ 0x4c
 8017b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b18:	9d05      	ldr	r5, [sp, #20]
 8017b1a:	1a69      	subs	r1, r5, r1
 8017b1c:	bf5b      	ittet	pl
 8017b1e:	f1cc 0520 	rsbpl	r5, ip, #32
 8017b22:	436c      	mulpl	r4, r5
 8017b24:	2500      	movmi	r5, #0
 8017b26:	2520      	movpl	r5, #32
 8017b28:	bf44      	itt	mi
 8017b2a:	fb04 f40c 	mulmi.w	r4, r4, ip
 8017b2e:	4249      	negmi	r1, r1
 8017b30:	9501      	str	r5, [sp, #4]
 8017b32:	fb94 f5f1 	sdiv	r5, r4, r1
 8017b36:	bf54      	ite	pl
 8017b38:	f04f 0901 	movpl.w	r9, #1
 8017b3c:	f04f 39ff 	movmi.w	r9, #4294967295
 8017b40:	fb01 4415 	mls	r4, r1, r5, r4
 8017b44:	9f01      	ldr	r7, [sp, #4]
 8017b46:	2c00      	cmp	r4, #0
 8017b48:	bfb8      	it	lt
 8017b4a:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8017b4e:	44bc      	add	ip, r7
 8017b50:	fb05 ac0c 	mla	ip, r5, ip, sl
 8017b54:	44a8      	add	r8, r5
 8017b56:	f8a2 8004 	strh.w	r8, [r2, #4]
 8017b5a:	f8a2 c006 	strh.w	ip, [r2, #6]
 8017b5e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8017b62:	bfb8      	it	lt
 8017b64:	1864      	addlt	r4, r4, r1
 8017b66:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8017b6a:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 8017b6e:	444e      	add	r6, r9
 8017b70:	ea58 0202 	orrs.w	r2, r8, r2
 8017b74:	d011      	beq.n	8017b9a <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 8017b76:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8017b7a:	f1b8 0f00 	cmp.w	r8, #0
 8017b7e:	db0c      	blt.n	8017b9a <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 8017b80:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8017b82:	4590      	cmp	r8, r2
 8017b84:	da09      	bge.n	8017b9a <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 8017b86:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 8017b8a:	4590      	cmp	r8, r2
 8017b8c:	bf3c      	itt	cc
 8017b8e:	f10c 0208 	addcc.w	r2, ip, #8
 8017b92:	6102      	strcc	r2, [r0, #16]
 8017b94:	f108 0201 	add.w	r2, r8, #1
 8017b98:	6082      	str	r2, [r0, #8]
 8017b9a:	2700      	movs	r7, #0
 8017b9c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8017ba0:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8017ba4:	45b6      	cmp	lr, r6
 8017ba6:	f8ac 6000 	strh.w	r6, [ip]
 8017baa:	f8ac 2002 	strh.w	r2, [ip, #2]
 8017bae:	f8ac 7004 	strh.w	r7, [ip, #4]
 8017bb2:	f8ac 7006 	strh.w	r7, [ip, #6]
 8017bb6:	442b      	add	r3, r5
 8017bb8:	d04d      	beq.n	8017c56 <_ZN8touchgfx7Outline10renderLineEiiii+0x1f6>
 8017bba:	9f04      	ldr	r7, [sp, #16]
 8017bbc:	f04f 0a00 	mov.w	sl, #0
 8017bc0:	1aff      	subs	r7, r7, r3
 8017bc2:	443d      	add	r5, r7
 8017bc4:	016d      	lsls	r5, r5, #5
 8017bc6:	fb95 f8f1 	sdiv	r8, r5, r1
 8017bca:	fb01 5518 	mls	r5, r1, r8, r5
 8017bce:	2d00      	cmp	r5, #0
 8017bd0:	bfb8      	it	lt
 8017bd2:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8017bd6:	f108 0701 	add.w	r7, r8, #1
 8017bda:	bfb8      	it	lt
 8017bdc:	186d      	addlt	r5, r5, r1
 8017bde:	1a64      	subs	r4, r4, r1
 8017be0:	9703      	str	r7, [sp, #12]
 8017be2:	1964      	adds	r4, r4, r5
 8017be4:	bf48      	it	mi
 8017be6:	4647      	movmi	r7, r8
 8017be8:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8017bec:	bf58      	it	pl
 8017bee:	9f03      	ldrpl	r7, [sp, #12]
 8017bf0:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8017bf4:	443b      	add	r3, r7
 8017bf6:	44bb      	add	fp, r7
 8017bf8:	f8ac b004 	strh.w	fp, [ip, #4]
 8017bfc:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8017c00:	bf58      	it	pl
 8017c02:	1a64      	subpl	r4, r4, r1
 8017c04:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8017c08:	f8ac b006 	strh.w	fp, [ip, #6]
 8017c0c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8017c10:	444e      	add	r6, r9
 8017c12:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8017c16:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8017c1a:	ea5b 0707 	orrs.w	r7, fp, r7
 8017c1e:	d011      	beq.n	8017c44 <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 8017c20:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8017c24:	f1bb 0f00 	cmp.w	fp, #0
 8017c28:	db0c      	blt.n	8017c44 <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 8017c2a:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8017c2c:	45bb      	cmp	fp, r7
 8017c2e:	da09      	bge.n	8017c44 <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 8017c30:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8017c34:	45bb      	cmp	fp, r7
 8017c36:	bf3c      	itt	cc
 8017c38:	f10c 0708 	addcc.w	r7, ip, #8
 8017c3c:	6107      	strcc	r7, [r0, #16]
 8017c3e:	f10b 0701 	add.w	r7, fp, #1
 8017c42:	6087      	str	r7, [r0, #8]
 8017c44:	6907      	ldr	r7, [r0, #16]
 8017c46:	45b6      	cmp	lr, r6
 8017c48:	803e      	strh	r6, [r7, #0]
 8017c4a:	807a      	strh	r2, [r7, #2]
 8017c4c:	f8a7 a004 	strh.w	sl, [r7, #4]
 8017c50:	f8a7 a006 	strh.w	sl, [r7, #6]
 8017c54:	d1c5      	bne.n	8017be2 <_ZN8touchgfx7Outline10renderLineEiiii+0x182>
 8017c56:	9a04      	ldr	r2, [sp, #16]
 8017c58:	1ad3      	subs	r3, r2, r3
 8017c5a:	6902      	ldr	r2, [r0, #16]
 8017c5c:	8891      	ldrh	r1, [r2, #4]
 8017c5e:	88d6      	ldrh	r6, [r2, #6]
 8017c60:	4419      	add	r1, r3
 8017c62:	8091      	strh	r1, [r2, #4]
 8017c64:	9902      	ldr	r1, [sp, #8]
 8017c66:	f101 0c20 	add.w	ip, r1, #32
 8017c6a:	9901      	ldr	r1, [sp, #4]
 8017c6c:	ebac 0c01 	sub.w	ip, ip, r1
 8017c70:	fb03 630c 	mla	r3, r3, ip, r6
 8017c74:	80d3      	strh	r3, [r2, #6]
 8017c76:	e74c      	b.n	8017b12 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8017c78:	9d05      	ldr	r5, [sp, #20]
 8017c7a:	1aa2      	subs	r2, r4, r2
 8017c7c:	eba5 0501 	sub.w	r5, r5, r1
 8017c80:	9508      	str	r5, [sp, #32]
 8017c82:	9202      	str	r2, [sp, #8]
 8017c84:	f140 8128 	bpl.w	8017ed8 <_ZN8touchgfx7Outline10renderLineEiiii+0x478>
 8017c88:	9a03      	ldr	r2, [sp, #12]
 8017c8a:	2a00      	cmp	r2, #0
 8017c8c:	f6ff af41 	blt.w	8017b12 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8017c90:	f04f 34ff 	mov.w	r4, #4294967295
 8017c94:	9a02      	ldr	r2, [sp, #8]
 8017c96:	940b      	str	r4, [sp, #44]	@ 0x2c
 8017c98:	4252      	negs	r2, r2
 8017c9a:	9202      	str	r2, [sp, #8]
 8017c9c:	9a06      	ldr	r2, [sp, #24]
 8017c9e:	2400      	movs	r4, #0
 8017ca0:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 8017ca4:	9206      	str	r2, [sp, #24]
 8017ca6:	462a      	mov	r2, r5
 8017ca8:	435a      	muls	r2, r3
 8017caa:	9401      	str	r4, [sp, #4]
 8017cac:	9c02      	ldr	r4, [sp, #8]
 8017cae:	9d02      	ldr	r5, [sp, #8]
 8017cb0:	fb92 f4f4 	sdiv	r4, r2, r4
 8017cb4:	fb05 2214 	mls	r2, r5, r4, r2
 8017cb8:	2a00      	cmp	r2, #0
 8017cba:	9207      	str	r2, [sp, #28]
 8017cbc:	bfbc      	itt	lt
 8017cbe:	1952      	addlt	r2, r2, r5
 8017cc0:	9207      	strlt	r2, [sp, #28]
 8017cc2:	9a01      	ldr	r2, [sp, #4]
 8017cc4:	bfb8      	it	lt
 8017cc6:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8017cca:	eb04 0901 	add.w	r9, r4, r1
 8017cce:	429a      	cmp	r2, r3
 8017cd0:	ea4f 1669 	mov.w	r6, r9, asr #5
 8017cd4:	6905      	ldr	r5, [r0, #16]
 8017cd6:	f040 8112 	bne.w	8017efe <_ZN8touchgfx7Outline10renderLineEiiii+0x49e>
 8017cda:	f9b5 3000 	ldrsh.w	r3, [r5]
 8017cde:	429e      	cmp	r6, r3
 8017ce0:	d104      	bne.n	8017cec <_ZN8touchgfx7Outline10renderLineEiiii+0x28c>
 8017ce2:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8017ce6:	9a03      	ldr	r2, [sp, #12]
 8017ce8:	429a      	cmp	r2, r3
 8017cea:	d01b      	beq.n	8017d24 <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 8017cec:	88ea      	ldrh	r2, [r5, #6]
 8017cee:	88ab      	ldrh	r3, [r5, #4]
 8017cf0:	4313      	orrs	r3, r2
 8017cf2:	d010      	beq.n	8017d16 <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 8017cf4:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8017cf8:	2a00      	cmp	r2, #0
 8017cfa:	db0c      	blt.n	8017d16 <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 8017cfc:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8017cfe:	429a      	cmp	r2, r3
 8017d00:	da09      	bge.n	8017d16 <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 8017d02:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8017d06:	429a      	cmp	r2, r3
 8017d08:	bf38      	it	cc
 8017d0a:	3508      	addcc	r5, #8
 8017d0c:	f102 0201 	add.w	r2, r2, #1
 8017d10:	bf38      	it	cc
 8017d12:	6105      	strcc	r5, [r0, #16]
 8017d14:	6082      	str	r2, [r0, #8]
 8017d16:	6903      	ldr	r3, [r0, #16]
 8017d18:	9a03      	ldr	r2, [sp, #12]
 8017d1a:	801e      	strh	r6, [r3, #0]
 8017d1c:	805a      	strh	r2, [r3, #2]
 8017d1e:	2200      	movs	r2, #0
 8017d20:	809a      	strh	r2, [r3, #4]
 8017d22:	80da      	strh	r2, [r3, #6]
 8017d24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017d26:	9a03      	ldr	r2, [sp, #12]
 8017d28:	6901      	ldr	r1, [r0, #16]
 8017d2a:	441a      	add	r2, r3
 8017d2c:	f9b1 3000 	ldrsh.w	r3, [r1]
 8017d30:	42b3      	cmp	r3, r6
 8017d32:	d103      	bne.n	8017d3c <_ZN8touchgfx7Outline10renderLineEiiii+0x2dc>
 8017d34:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8017d38:	429a      	cmp	r2, r3
 8017d3a:	d01a      	beq.n	8017d72 <_ZN8touchgfx7Outline10renderLineEiiii+0x312>
 8017d3c:	88cc      	ldrh	r4, [r1, #6]
 8017d3e:	888b      	ldrh	r3, [r1, #4]
 8017d40:	4323      	orrs	r3, r4
 8017d42:	d010      	beq.n	8017d66 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8017d44:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8017d48:	2c00      	cmp	r4, #0
 8017d4a:	db0c      	blt.n	8017d66 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8017d4c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8017d4e:	429c      	cmp	r4, r3
 8017d50:	da09      	bge.n	8017d66 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8017d52:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8017d56:	429c      	cmp	r4, r3
 8017d58:	bf38      	it	cc
 8017d5a:	3108      	addcc	r1, #8
 8017d5c:	f104 0401 	add.w	r4, r4, #1
 8017d60:	bf38      	it	cc
 8017d62:	6101      	strcc	r1, [r0, #16]
 8017d64:	6084      	str	r4, [r0, #8]
 8017d66:	2100      	movs	r1, #0
 8017d68:	6903      	ldr	r3, [r0, #16]
 8017d6a:	801e      	strh	r6, [r3, #0]
 8017d6c:	805a      	strh	r2, [r3, #2]
 8017d6e:	8099      	strh	r1, [r3, #4]
 8017d70:	80d9      	strh	r1, [r3, #6]
 8017d72:	9b06      	ldr	r3, [sp, #24]
 8017d74:	4293      	cmp	r3, r2
 8017d76:	f000 8082 	beq.w	8017e7e <_ZN8touchgfx7Outline10renderLineEiiii+0x41e>
 8017d7a:	9b08      	ldr	r3, [sp, #32]
 8017d7c:	9902      	ldr	r1, [sp, #8]
 8017d7e:	015b      	lsls	r3, r3, #5
 8017d80:	fb93 f1f1 	sdiv	r1, r3, r1
 8017d84:	9c02      	ldr	r4, [sp, #8]
 8017d86:	9103      	str	r1, [sp, #12]
 8017d88:	fb04 3311 	mls	r3, r4, r1, r3
 8017d8c:	2b00      	cmp	r3, #0
 8017d8e:	9308      	str	r3, [sp, #32]
 8017d90:	da04      	bge.n	8017d9c <_ZN8touchgfx7Outline10renderLineEiiii+0x33c>
 8017d92:	1e4b      	subs	r3, r1, #1
 8017d94:	9303      	str	r3, [sp, #12]
 8017d96:	9b08      	ldr	r3, [sp, #32]
 8017d98:	4423      	add	r3, r4
 8017d9a:	9308      	str	r3, [sp, #32]
 8017d9c:	464f      	mov	r7, r9
 8017d9e:	2600      	movs	r6, #0
 8017da0:	9b07      	ldr	r3, [sp, #28]
 8017da2:	9902      	ldr	r1, [sp, #8]
 8017da4:	1a5b      	subs	r3, r3, r1
 8017da6:	9307      	str	r3, [sp, #28]
 8017da8:	9b01      	ldr	r3, [sp, #4]
 8017daa:	f1c3 0320 	rsb	r3, r3, #32
 8017dae:	930e      	str	r3, [sp, #56]	@ 0x38
 8017db0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8017db2:	9b01      	ldr	r3, [sp, #4]
 8017db4:	1a5b      	subs	r3, r3, r1
 8017db6:	930a      	str	r3, [sp, #40]	@ 0x28
 8017db8:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8017dbc:	185b      	adds	r3, r3, r1
 8017dbe:	bf58      	it	pl
 8017dc0:	9902      	ldrpl	r1, [sp, #8]
 8017dc2:	9307      	str	r3, [sp, #28]
 8017dc4:	bf5d      	ittte	pl
 8017dc6:	1a5b      	subpl	r3, r3, r1
 8017dc8:	9307      	strpl	r3, [sp, #28]
 8017dca:	9b03      	ldrpl	r3, [sp, #12]
 8017dcc:	9903      	ldrmi	r1, [sp, #12]
 8017dce:	bf58      	it	pl
 8017dd0:	1c59      	addpl	r1, r3, #1
 8017dd2:	4489      	add	r9, r1
 8017dd4:	2a00      	cmp	r2, #0
 8017dd6:	ea4f 1a69 	mov.w	sl, r9, asr #5
 8017dda:	db2e      	blt.n	8017e3a <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8017ddc:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8017dde:	4293      	cmp	r3, r2
 8017de0:	dd2b      	ble.n	8017e3a <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8017de2:	9c01      	ldr	r4, [sp, #4]
 8017de4:	6905      	ldr	r5, [r0, #16]
 8017de6:	46a0      	mov	r8, r4
 8017de8:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8017dea:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 8017dee:	45a0      	cmp	r8, r4
 8017df0:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 8017df4:	f040 8150 	bne.w	8018098 <_ZN8touchgfx7Outline10renderLineEiiii+0x638>
 8017df8:	f9b5 1000 	ldrsh.w	r1, [r5]
 8017dfc:	4551      	cmp	r1, sl
 8017dfe:	d103      	bne.n	8017e08 <_ZN8touchgfx7Outline10renderLineEiiii+0x3a8>
 8017e00:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8017e04:	4291      	cmp	r1, r2
 8017e06:	d018      	beq.n	8017e3a <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8017e08:	ea5c 010e 	orrs.w	r1, ip, lr
 8017e0c:	d00f      	beq.n	8017e2e <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 8017e0e:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8017e12:	2900      	cmp	r1, #0
 8017e14:	db0b      	blt.n	8017e2e <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 8017e16:	428b      	cmp	r3, r1
 8017e18:	dd09      	ble.n	8017e2e <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 8017e1a:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 8017e1e:	4299      	cmp	r1, r3
 8017e20:	bf38      	it	cc
 8017e22:	3508      	addcc	r5, #8
 8017e24:	f101 0101 	add.w	r1, r1, #1
 8017e28:	bf38      	it	cc
 8017e2a:	6105      	strcc	r5, [r0, #16]
 8017e2c:	6081      	str	r1, [r0, #8]
 8017e2e:	6903      	ldr	r3, [r0, #16]
 8017e30:	f8a3 a000 	strh.w	sl, [r3]
 8017e34:	805a      	strh	r2, [r3, #2]
 8017e36:	809e      	strh	r6, [r3, #4]
 8017e38:	80de      	strh	r6, [r3, #6]
 8017e3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017e3c:	6901      	ldr	r1, [r0, #16]
 8017e3e:	441a      	add	r2, r3
 8017e40:	88cc      	ldrh	r4, [r1, #6]
 8017e42:	888b      	ldrh	r3, [r1, #4]
 8017e44:	4323      	orrs	r3, r4
 8017e46:	d010      	beq.n	8017e6a <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 8017e48:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8017e4c:	2c00      	cmp	r4, #0
 8017e4e:	db0c      	blt.n	8017e6a <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 8017e50:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8017e52:	429c      	cmp	r4, r3
 8017e54:	da09      	bge.n	8017e6a <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 8017e56:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8017e5a:	429c      	cmp	r4, r3
 8017e5c:	bf38      	it	cc
 8017e5e:	3108      	addcc	r1, #8
 8017e60:	f104 0401 	add.w	r4, r4, #1
 8017e64:	bf38      	it	cc
 8017e66:	6101      	strcc	r1, [r0, #16]
 8017e68:	6084      	str	r4, [r0, #8]
 8017e6a:	6903      	ldr	r3, [r0, #16]
 8017e6c:	464f      	mov	r7, r9
 8017e6e:	f8a3 a000 	strh.w	sl, [r3]
 8017e72:	805a      	strh	r2, [r3, #2]
 8017e74:	809e      	strh	r6, [r3, #4]
 8017e76:	80de      	strh	r6, [r3, #6]
 8017e78:	9b06      	ldr	r3, [sp, #24]
 8017e7a:	4293      	cmp	r3, r2
 8017e7c:	d19c      	bne.n	8017db8 <_ZN8touchgfx7Outline10renderLineEiiii+0x358>
 8017e7e:	9b01      	ldr	r3, [sp, #4]
 8017e80:	6907      	ldr	r7, [r0, #16]
 8017e82:	f1c3 0620 	rsb	r6, r3, #32
 8017e86:	9b05      	ldr	r3, [sp, #20]
 8017e88:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8017e8c:	9b04      	ldr	r3, [sp, #16]
 8017e8e:	429e      	cmp	r6, r3
 8017e90:	f040 81cc 	bne.w	801822c <_ZN8touchgfx7Outline10renderLineEiiii+0x7cc>
 8017e94:	f9b7 3000 	ldrsh.w	r3, [r7]
 8017e98:	459e      	cmp	lr, r3
 8017e9a:	d104      	bne.n	8017ea6 <_ZN8touchgfx7Outline10renderLineEiiii+0x446>
 8017e9c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8017ea0:	429a      	cmp	r2, r3
 8017ea2:	f43f ae36 	beq.w	8017b12 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8017ea6:	88f9      	ldrh	r1, [r7, #6]
 8017ea8:	88bb      	ldrh	r3, [r7, #4]
 8017eaa:	430b      	orrs	r3, r1
 8017eac:	d010      	beq.n	8017ed0 <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 8017eae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8017eb2:	2b00      	cmp	r3, #0
 8017eb4:	db0c      	blt.n	8017ed0 <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 8017eb6:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8017eb8:	428b      	cmp	r3, r1
 8017eba:	da09      	bge.n	8017ed0 <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 8017ebc:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8017ec0:	428b      	cmp	r3, r1
 8017ec2:	bf38      	it	cc
 8017ec4:	3708      	addcc	r7, #8
 8017ec6:	f103 0301 	add.w	r3, r3, #1
 8017eca:	bf38      	it	cc
 8017ecc:	6107      	strcc	r7, [r0, #16]
 8017ece:	6083      	str	r3, [r0, #8]
 8017ed0:	6903      	ldr	r3, [r0, #16]
 8017ed2:	f8a3 e000 	strh.w	lr, [r3]
 8017ed6:	e5ff      	b.n	8017ad8 <_ZN8touchgfx7Outline10renderLineEiiii+0x78>
 8017ed8:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8017eda:	9c03      	ldr	r4, [sp, #12]
 8017edc:	42a2      	cmp	r2, r4
 8017ede:	f6ff ae18 	blt.w	8017b12 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8017ee2:	9c06      	ldr	r4, [sp, #24]
 8017ee4:	42a2      	cmp	r2, r4
 8017ee6:	bfb8      	it	lt
 8017ee8:	3201      	addlt	r2, #1
 8017eea:	9c08      	ldr	r4, [sp, #32]
 8017eec:	bfb8      	it	lt
 8017eee:	9206      	strlt	r2, [sp, #24]
 8017ef0:	f1c3 0220 	rsb	r2, r3, #32
 8017ef4:	4362      	muls	r2, r4
 8017ef6:	2401      	movs	r4, #1
 8017ef8:	940b      	str	r4, [sp, #44]	@ 0x2c
 8017efa:	2420      	movs	r4, #32
 8017efc:	e6d5      	b.n	8017caa <_ZN8touchgfx7Outline10renderLineEiiii+0x24a>
 8017efe:	f009 021f 	and.w	r2, r9, #31
 8017f02:	ea4f 1861 	mov.w	r8, r1, asr #5
 8017f06:	920c      	str	r2, [sp, #48]	@ 0x30
 8017f08:	9a01      	ldr	r2, [sp, #4]
 8017f0a:	45b0      	cmp	r8, r6
 8017f0c:	f001 011f 	and.w	r1, r1, #31
 8017f10:	eba2 0203 	sub.w	r2, r2, r3
 8017f14:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8017f18:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 8017f1c:	d108      	bne.n	8017f30 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d0>
 8017f1e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017f20:	4496      	add	lr, r2
 8017f22:	4419      	add	r1, r3
 8017f24:	fb02 a101 	mla	r1, r2, r1, sl
 8017f28:	f8a5 e004 	strh.w	lr, [r5, #4]
 8017f2c:	80e9      	strh	r1, [r5, #6]
 8017f2e:	e6f9      	b.n	8017d24 <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 8017f30:	2c00      	cmp	r4, #0
 8017f32:	f2c0 80aa 	blt.w	801808a <_ZN8touchgfx7Outline10renderLineEiiii+0x62a>
 8017f36:	2701      	movs	r7, #1
 8017f38:	970a      	str	r7, [sp, #40]	@ 0x28
 8017f3a:	2720      	movs	r7, #32
 8017f3c:	f1c1 0c20 	rsb	ip, r1, #32
 8017f40:	fb02 f20c 	mul.w	r2, r2, ip
 8017f44:	fb92 fcf4 	sdiv	ip, r2, r4
 8017f48:	fb04 221c 	mls	r2, r4, ip, r2
 8017f4c:	9709      	str	r7, [sp, #36]	@ 0x24
 8017f4e:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8017f50:	2a00      	cmp	r2, #0
 8017f52:	bfb8      	it	lt
 8017f54:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8017f58:	4439      	add	r1, r7
 8017f5a:	fb0c a101 	mla	r1, ip, r1, sl
 8017f5e:	44e6      	add	lr, ip
 8017f60:	80e9      	strh	r1, [r5, #6]
 8017f62:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017f64:	f8a5 e004 	strh.w	lr, [r5, #4]
 8017f68:	eb08 0501 	add.w	r5, r8, r1
 8017f6c:	6901      	ldr	r1, [r0, #16]
 8017f6e:	bfb8      	it	lt
 8017f70:	1912      	addlt	r2, r2, r4
 8017f72:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 8017f76:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 8017f7a:	ea58 070e 	orrs.w	r7, r8, lr
 8017f7e:	d010      	beq.n	8017fa2 <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8017f80:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 8017f84:	f1be 0f00 	cmp.w	lr, #0
 8017f88:	db0b      	blt.n	8017fa2 <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8017f8a:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8017f8c:	45be      	cmp	lr, r7
 8017f8e:	da08      	bge.n	8017fa2 <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8017f90:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8017f94:	45be      	cmp	lr, r7
 8017f96:	bf3c      	itt	cc
 8017f98:	3108      	addcc	r1, #8
 8017f9a:	6101      	strcc	r1, [r0, #16]
 8017f9c:	f10e 0101 	add.w	r1, lr, #1
 8017fa0:	6081      	str	r1, [r0, #8]
 8017fa2:	f04f 0e00 	mov.w	lr, #0
 8017fa6:	6901      	ldr	r1, [r0, #16]
 8017fa8:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8017fac:	42ae      	cmp	r6, r5
 8017fae:	800d      	strh	r5, [r1, #0]
 8017fb0:	f8a1 8002 	strh.w	r8, [r1, #2]
 8017fb4:	f8a1 e004 	strh.w	lr, [r1, #4]
 8017fb8:	f8a1 e006 	strh.w	lr, [r1, #6]
 8017fbc:	4463      	add	r3, ip
 8017fbe:	d055      	beq.n	801806c <_ZN8touchgfx7Outline10renderLineEiiii+0x60c>
 8017fc0:	9901      	ldr	r1, [sp, #4]
 8017fc2:	1b12      	subs	r2, r2, r4
 8017fc4:	1ac9      	subs	r1, r1, r3
 8017fc6:	4461      	add	r1, ip
 8017fc8:	0149      	lsls	r1, r1, #5
 8017fca:	fb91 fef4 	sdiv	lr, r1, r4
 8017fce:	fb04 111e 	mls	r1, r4, lr, r1
 8017fd2:	2900      	cmp	r1, #0
 8017fd4:	bfb8      	it	lt
 8017fd6:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8017fda:	f10e 0701 	add.w	r7, lr, #1
 8017fde:	bfb8      	it	lt
 8017fe0:	1909      	addlt	r1, r1, r4
 8017fe2:	970d      	str	r7, [sp, #52]	@ 0x34
 8017fe4:	1852      	adds	r2, r2, r1
 8017fe6:	bf48      	it	mi
 8017fe8:	46f4      	movmi	ip, lr
 8017fea:	f8d0 a010 	ldr.w	sl, [r0, #16]
 8017fee:	bf58      	it	pl
 8017ff0:	f8dd c034 	ldrpl.w	ip, [sp, #52]	@ 0x34
 8017ff4:	f8ba b004 	ldrh.w	fp, [sl, #4]
 8017ff8:	4463      	add	r3, ip
 8017ffa:	44e3      	add	fp, ip
 8017ffc:	f8aa b004 	strh.w	fp, [sl, #4]
 8018000:	f8ba b006 	ldrh.w	fp, [sl, #6]
 8018004:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8018006:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 801800a:	f8aa b006 	strh.w	fp, [sl, #6]
 801800e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018012:	bf58      	it	pl
 8018014:	1b12      	subpl	r2, r2, r4
 8018016:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801801a:	f8bc a004 	ldrh.w	sl, [ip, #4]
 801801e:	443d      	add	r5, r7
 8018020:	ea5b 070a 	orrs.w	r7, fp, sl
 8018024:	d014      	beq.n	8018050 <_ZN8touchgfx7Outline10renderLineEiiii+0x5f0>
 8018026:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 801802a:	f1ba 0f00 	cmp.w	sl, #0
 801802e:	db0f      	blt.n	8018050 <_ZN8touchgfx7Outline10renderLineEiiii+0x5f0>
 8018030:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8018032:	45ba      	cmp	sl, r7
 8018034:	da0c      	bge.n	8018050 <_ZN8touchgfx7Outline10renderLineEiiii+0x5f0>
 8018036:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 801803a:	45ba      	cmp	sl, r7
 801803c:	bf38      	it	cc
 801803e:	f10c 0c08 	addcc.w	ip, ip, #8
 8018042:	f10a 0a01 	add.w	sl, sl, #1
 8018046:	bf38      	it	cc
 8018048:	f8c0 c010 	strcc.w	ip, [r0, #16]
 801804c:	f8c0 a008 	str.w	sl, [r0, #8]
 8018050:	f04f 0700 	mov.w	r7, #0
 8018054:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018058:	42ae      	cmp	r6, r5
 801805a:	f8ac 5000 	strh.w	r5, [ip]
 801805e:	f8ac 8002 	strh.w	r8, [ip, #2]
 8018062:	f8ac 7004 	strh.w	r7, [ip, #4]
 8018066:	f8ac 7006 	strh.w	r7, [ip, #6]
 801806a:	d1bb      	bne.n	8017fe4 <_ZN8touchgfx7Outline10renderLineEiiii+0x584>
 801806c:	6904      	ldr	r4, [r0, #16]
 801806e:	9a01      	ldr	r2, [sp, #4]
 8018070:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8018072:	1ad3      	subs	r3, r2, r3
 8018074:	88a2      	ldrh	r2, [r4, #4]
 8018076:	3120      	adds	r1, #32
 8018078:	441a      	add	r2, r3
 801807a:	80a2      	strh	r2, [r4, #4]
 801807c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801807e:	1a89      	subs	r1, r1, r2
 8018080:	88e2      	ldrh	r2, [r4, #6]
 8018082:	fb03 2301 	mla	r3, r3, r1, r2
 8018086:	80e3      	strh	r3, [r4, #6]
 8018088:	e64c      	b.n	8017d24 <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 801808a:	f04f 37ff 	mov.w	r7, #4294967295
 801808e:	434a      	muls	r2, r1
 8018090:	970a      	str	r7, [sp, #40]	@ 0x28
 8018092:	4264      	negs	r4, r4
 8018094:	2700      	movs	r7, #0
 8018096:	e755      	b.n	8017f44 <_ZN8touchgfx7Outline10renderLineEiiii+0x4e4>
 8018098:	ea4f 1867 	mov.w	r8, r7, asr #5
 801809c:	f009 031f 	and.w	r3, r9, #31
 80180a0:	45d0      	cmp	r8, sl
 80180a2:	f007 071f 	and.w	r7, r7, #31
 80180a6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80180a8:	fa1f fc8c 	uxth.w	ip, ip
 80180ac:	fa1f fe8e 	uxth.w	lr, lr
 80180b0:	d10a      	bne.n	80180c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x668>
 80180b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80180b4:	449c      	add	ip, r3
 80180b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80180b8:	f8a5 c004 	strh.w	ip, [r5, #4]
 80180bc:	441f      	add	r7, r3
 80180be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80180c0:	fb03 e707 	mla	r7, r3, r7, lr
 80180c4:	80ef      	strh	r7, [r5, #6]
 80180c6:	e6b8      	b.n	8017e3a <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 80180c8:	2900      	cmp	r1, #0
 80180ca:	f2c0 80a7 	blt.w	801821c <_ZN8touchgfx7Outline10renderLineEiiii+0x7bc>
 80180ce:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80180d0:	f1c7 0320 	rsb	r3, r7, #32
 80180d4:	4363      	muls	r3, r4
 80180d6:	2401      	movs	r4, #1
 80180d8:	940d      	str	r4, [sp, #52]	@ 0x34
 80180da:	2420      	movs	r4, #32
 80180dc:	940c      	str	r4, [sp, #48]	@ 0x30
 80180de:	fb93 f4f1 	sdiv	r4, r3, r1
 80180e2:	fb01 3b14 	mls	fp, r1, r4, r3
 80180e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80180e8:	f1bb 0f00 	cmp.w	fp, #0
 80180ec:	bfb8      	it	lt
 80180ee:	f104 34ff 	addlt.w	r4, r4, #4294967295
 80180f2:	441f      	add	r7, r3
 80180f4:	fb04 e707 	mla	r7, r4, r7, lr
 80180f8:	44a4      	add	ip, r4
 80180fa:	f8a5 c004 	strh.w	ip, [r5, #4]
 80180fe:	80ef      	strh	r7, [r5, #6]
 8018100:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018104:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018106:	f8bc e006 	ldrh.w	lr, [ip, #6]
 801810a:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801810e:	bfb8      	it	lt
 8018110:	448b      	addlt	fp, r1
 8018112:	eb08 0503 	add.w	r5, r8, r3
 8018116:	ea5e 0307 	orrs.w	r3, lr, r7
 801811a:	d011      	beq.n	8018140 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 801811c:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 8018120:	f1be 0f00 	cmp.w	lr, #0
 8018124:	db0c      	blt.n	8018140 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8018126:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8018128:	45be      	cmp	lr, r7
 801812a:	da09      	bge.n	8018140 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 801812c:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8018130:	45be      	cmp	lr, r7
 8018132:	bf3c      	itt	cc
 8018134:	f10c 0708 	addcc.w	r7, ip, #8
 8018138:	6107      	strcc	r7, [r0, #16]
 801813a:	f10e 0701 	add.w	r7, lr, #1
 801813e:	6087      	str	r7, [r0, #8]
 8018140:	6907      	ldr	r7, [r0, #16]
 8018142:	b213      	sxth	r3, r2
 8018144:	9310      	str	r3, [sp, #64]	@ 0x40
 8018146:	807b      	strh	r3, [r7, #2]
 8018148:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801814a:	4555      	cmp	r5, sl
 801814c:	803d      	strh	r5, [r7, #0]
 801814e:	80be      	strh	r6, [r7, #4]
 8018150:	80fe      	strh	r6, [r7, #6]
 8018152:	eb04 0c03 	add.w	ip, r4, r3
 8018156:	d050      	beq.n	80181fa <_ZN8touchgfx7Outline10renderLineEiiii+0x79a>
 8018158:	9b01      	ldr	r3, [sp, #4]
 801815a:	eba3 070c 	sub.w	r7, r3, ip
 801815e:	443c      	add	r4, r7
 8018160:	0164      	lsls	r4, r4, #5
 8018162:	fb94 f8f1 	sdiv	r8, r4, r1
 8018166:	fb01 4418 	mls	r4, r1, r8, r4
 801816a:	2c00      	cmp	r4, #0
 801816c:	bfb8      	it	lt
 801816e:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8018172:	ebab 0301 	sub.w	r3, fp, r1
 8018176:	f108 0701 	add.w	r7, r8, #1
 801817a:	bfb8      	it	lt
 801817c:	1864      	addlt	r4, r4, r1
 801817e:	9309      	str	r3, [sp, #36]	@ 0x24
 8018180:	9711      	str	r7, [sp, #68]	@ 0x44
 8018182:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018184:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8018188:	191b      	adds	r3, r3, r4
 801818a:	bf4c      	ite	mi
 801818c:	4647      	movmi	r7, r8
 801818e:	9f11      	ldrpl	r7, [sp, #68]	@ 0x44
 8018190:	f8be b004 	ldrh.w	fp, [lr, #4]
 8018194:	44bc      	add	ip, r7
 8018196:	44bb      	add	fp, r7
 8018198:	f8ae b004 	strh.w	fp, [lr, #4]
 801819c:	f8be b006 	ldrh.w	fp, [lr, #6]
 80181a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80181a2:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 80181a6:	f8ae b006 	strh.w	fp, [lr, #6]
 80181aa:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 80181ac:	f8d0 e010 	ldr.w	lr, [r0, #16]
 80181b0:	443d      	add	r5, r7
 80181b2:	f8be b006 	ldrh.w	fp, [lr, #6]
 80181b6:	f8be 7004 	ldrh.w	r7, [lr, #4]
 80181ba:	bf5c      	itt	pl
 80181bc:	1a5b      	subpl	r3, r3, r1
 80181be:	9309      	strpl	r3, [sp, #36]	@ 0x24
 80181c0:	ea5b 0307 	orrs.w	r3, fp, r7
 80181c4:	d011      	beq.n	80181ea <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 80181c6:	f9be b002 	ldrsh.w	fp, [lr, #2]
 80181ca:	f1bb 0f00 	cmp.w	fp, #0
 80181ce:	db0c      	blt.n	80181ea <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 80181d0:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80181d2:	45bb      	cmp	fp, r7
 80181d4:	da09      	bge.n	80181ea <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 80181d6:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 80181da:	45bb      	cmp	fp, r7
 80181dc:	bf3c      	itt	cc
 80181de:	f10e 0708 	addcc.w	r7, lr, #8
 80181e2:	6107      	strcc	r7, [r0, #16]
 80181e4:	f10b 0701 	add.w	r7, fp, #1
 80181e8:	6087      	str	r7, [r0, #8]
 80181ea:	6907      	ldr	r7, [r0, #16]
 80181ec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80181ee:	4555      	cmp	r5, sl
 80181f0:	803d      	strh	r5, [r7, #0]
 80181f2:	807b      	strh	r3, [r7, #2]
 80181f4:	80be      	strh	r6, [r7, #4]
 80181f6:	80fe      	strh	r6, [r7, #6]
 80181f8:	d1c3      	bne.n	8018182 <_ZN8touchgfx7Outline10renderLineEiiii+0x722>
 80181fa:	9b01      	ldr	r3, [sp, #4]
 80181fc:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 80181fe:	eba3 0c0c 	sub.w	ip, r3, ip
 8018202:	6903      	ldr	r3, [r0, #16]
 8018204:	3720      	adds	r7, #32
 8018206:	8899      	ldrh	r1, [r3, #4]
 8018208:	4461      	add	r1, ip
 801820a:	8099      	strh	r1, [r3, #4]
 801820c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801820e:	1a7f      	subs	r7, r7, r1
 8018210:	88d9      	ldrh	r1, [r3, #6]
 8018212:	fb0c 1c07 	mla	ip, ip, r7, r1
 8018216:	f8a3 c006 	strh.w	ip, [r3, #6]
 801821a:	e60e      	b.n	8017e3a <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 801821c:	f04f 34ff 	mov.w	r4, #4294967295
 8018220:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018222:	940d      	str	r4, [sp, #52]	@ 0x34
 8018224:	437b      	muls	r3, r7
 8018226:	4249      	negs	r1, r1
 8018228:	2400      	movs	r4, #0
 801822a:	e757      	b.n	80180dc <_ZN8touchgfx7Outline10renderLineEiiii+0x67c>
 801822c:	9905      	ldr	r1, [sp, #20]
 801822e:	ea4f 1b69 	mov.w	fp, r9, asr #5
 8018232:	f001 011f 	and.w	r1, r1, #31
 8018236:	9102      	str	r1, [sp, #8]
 8018238:	9904      	ldr	r1, [sp, #16]
 801823a:	45f3      	cmp	fp, lr
 801823c:	f009 0c1f 	and.w	ip, r9, #31
 8018240:	eba1 0406 	sub.w	r4, r1, r6
 8018244:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 8018248:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 801824c:	d108      	bne.n	8018260 <_ZN8touchgfx7Outline10renderLineEiiii+0x800>
 801824e:	9b02      	ldr	r3, [sp, #8]
 8018250:	44a0      	add	r8, r4
 8018252:	449c      	add	ip, r3
 8018254:	fb04 a40c 	mla	r4, r4, ip, sl
 8018258:	f8a7 8004 	strh.w	r8, [r7, #4]
 801825c:	80fc      	strh	r4, [r7, #6]
 801825e:	e458      	b.n	8017b12 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8018260:	9905      	ldr	r1, [sp, #20]
 8018262:	ebb1 0109 	subs.w	r1, r1, r9
 8018266:	bf5b      	ittet	pl
 8018268:	f1cc 0520 	rsbpl	r5, ip, #32
 801826c:	436c      	mulpl	r4, r5
 801826e:	2500      	movmi	r5, #0
 8018270:	2520      	movpl	r5, #32
 8018272:	bf44      	itt	mi
 8018274:	fb04 f40c 	mulmi.w	r4, r4, ip
 8018278:	4249      	negmi	r1, r1
 801827a:	9501      	str	r5, [sp, #4]
 801827c:	fb94 f5f1 	sdiv	r5, r4, r1
 8018280:	bf54      	ite	pl
 8018282:	f04f 0901 	movpl.w	r9, #1
 8018286:	f04f 39ff 	movmi.w	r9, #4294967295
 801828a:	fb01 4415 	mls	r4, r1, r5, r4
 801828e:	9b01      	ldr	r3, [sp, #4]
 8018290:	2c00      	cmp	r4, #0
 8018292:	bfb8      	it	lt
 8018294:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8018298:	449c      	add	ip, r3
 801829a:	fb05 ac0c 	mla	ip, r5, ip, sl
 801829e:	44a8      	add	r8, r5
 80182a0:	f8a7 8004 	strh.w	r8, [r7, #4]
 80182a4:	f8a7 c006 	strh.w	ip, [r7, #6]
 80182a8:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80182ac:	bfb8      	it	lt
 80182ae:	1864      	addlt	r4, r4, r1
 80182b0:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 80182b4:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80182b8:	eb0b 0309 	add.w	r3, fp, r9
 80182bc:	ea58 0707 	orrs.w	r7, r8, r7
 80182c0:	d011      	beq.n	80182e6 <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 80182c2:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 80182c6:	f1b8 0f00 	cmp.w	r8, #0
 80182ca:	db0c      	blt.n	80182e6 <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 80182cc:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80182ce:	45b8      	cmp	r8, r7
 80182d0:	da09      	bge.n	80182e6 <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 80182d2:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 80182d6:	45b8      	cmp	r8, r7
 80182d8:	bf3c      	itt	cc
 80182da:	f10c 0708 	addcc.w	r7, ip, #8
 80182de:	6107      	strcc	r7, [r0, #16]
 80182e0:	f108 0701 	add.w	r7, r8, #1
 80182e4:	6087      	str	r7, [r0, #8]
 80182e6:	f04f 0c00 	mov.w	ip, #0
 80182ea:	6907      	ldr	r7, [r0, #16]
 80182ec:	b212      	sxth	r2, r2
 80182ee:	459e      	cmp	lr, r3
 80182f0:	803b      	strh	r3, [r7, #0]
 80182f2:	807a      	strh	r2, [r7, #2]
 80182f4:	f8a7 c004 	strh.w	ip, [r7, #4]
 80182f8:	f8a7 c006 	strh.w	ip, [r7, #6]
 80182fc:	442e      	add	r6, r5
 80182fe:	d04d      	beq.n	801839c <_ZN8touchgfx7Outline10renderLineEiiii+0x93c>
 8018300:	9f04      	ldr	r7, [sp, #16]
 8018302:	f04f 0a00 	mov.w	sl, #0
 8018306:	1bbf      	subs	r7, r7, r6
 8018308:	443d      	add	r5, r7
 801830a:	016d      	lsls	r5, r5, #5
 801830c:	fb95 f8f1 	sdiv	r8, r5, r1
 8018310:	fb01 5518 	mls	r5, r1, r8, r5
 8018314:	4565      	cmp	r5, ip
 8018316:	bfb8      	it	lt
 8018318:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801831c:	f108 0701 	add.w	r7, r8, #1
 8018320:	bfb8      	it	lt
 8018322:	186d      	addlt	r5, r5, r1
 8018324:	1a64      	subs	r4, r4, r1
 8018326:	9703      	str	r7, [sp, #12]
 8018328:	1964      	adds	r4, r4, r5
 801832a:	bf48      	it	mi
 801832c:	4647      	movmi	r7, r8
 801832e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018332:	bf58      	it	pl
 8018334:	9f03      	ldrpl	r7, [sp, #12]
 8018336:	f8bc b004 	ldrh.w	fp, [ip, #4]
 801833a:	443e      	add	r6, r7
 801833c:	44bb      	add	fp, r7
 801833e:	f8ac b004 	strh.w	fp, [ip, #4]
 8018342:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8018346:	bf58      	it	pl
 8018348:	1a64      	subpl	r4, r4, r1
 801834a:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 801834e:	f8ac b006 	strh.w	fp, [ip, #6]
 8018352:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018356:	444b      	add	r3, r9
 8018358:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801835c:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8018360:	ea5b 0707 	orrs.w	r7, fp, r7
 8018364:	d011      	beq.n	801838a <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 8018366:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 801836a:	f1bb 0f00 	cmp.w	fp, #0
 801836e:	db0c      	blt.n	801838a <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 8018370:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8018372:	45bb      	cmp	fp, r7
 8018374:	da09      	bge.n	801838a <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 8018376:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801837a:	45bb      	cmp	fp, r7
 801837c:	bf3c      	itt	cc
 801837e:	f10c 0708 	addcc.w	r7, ip, #8
 8018382:	6107      	strcc	r7, [r0, #16]
 8018384:	f10b 0701 	add.w	r7, fp, #1
 8018388:	6087      	str	r7, [r0, #8]
 801838a:	6907      	ldr	r7, [r0, #16]
 801838c:	459e      	cmp	lr, r3
 801838e:	803b      	strh	r3, [r7, #0]
 8018390:	807a      	strh	r2, [r7, #2]
 8018392:	f8a7 a004 	strh.w	sl, [r7, #4]
 8018396:	f8a7 a006 	strh.w	sl, [r7, #6]
 801839a:	d1c5      	bne.n	8018328 <_ZN8touchgfx7Outline10renderLineEiiii+0x8c8>
 801839c:	9b04      	ldr	r3, [sp, #16]
 801839e:	1b9e      	subs	r6, r3, r6
 80183a0:	6903      	ldr	r3, [r0, #16]
 80183a2:	889a      	ldrh	r2, [r3, #4]
 80183a4:	4432      	add	r2, r6
 80183a6:	809a      	strh	r2, [r3, #4]
 80183a8:	9a02      	ldr	r2, [sp, #8]
 80183aa:	f102 0c20 	add.w	ip, r2, #32
 80183ae:	9a01      	ldr	r2, [sp, #4]
 80183b0:	ebac 0c02 	sub.w	ip, ip, r2
 80183b4:	88da      	ldrh	r2, [r3, #6]
 80183b6:	fb06 260c 	mla	r6, r6, ip, r2
 80183ba:	80de      	strh	r6, [r3, #6]
 80183bc:	f7ff bba9 	b.w	8017b12 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>

080183c0 <_ZN8touchgfx7Outline6lineToEii>:
 80183c0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80183c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80183c4:	079b      	lsls	r3, r3, #30
 80183c6:	460e      	mov	r6, r1
 80183c8:	4615      	mov	r5, r2
 80183ca:	d511      	bpl.n	80183f0 <_ZN8touchgfx7Outline6lineToEii+0x30>
 80183cc:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 80183d0:	ea86 0701 	eor.w	r7, r6, r1
 80183d4:	ea85 0302 	eor.w	r3, r5, r2
 80183d8:	433b      	orrs	r3, r7
 80183da:	d009      	beq.n	80183f0 <_ZN8touchgfx7Outline6lineToEii+0x30>
 80183dc:	4633      	mov	r3, r6
 80183de:	9500      	str	r5, [sp, #0]
 80183e0:	f7ff fb3e 	bl	8017a60 <_ZN8touchgfx7Outline10renderLineEiiii>
 80183e4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80183e6:	e9c0 6505 	strd	r6, r5, [r0, #20]
 80183ea:	f043 0301 	orr.w	r3, r3, #1
 80183ee:	6243      	str	r3, [r0, #36]	@ 0x24
 80183f0:	b003      	add	sp, #12
 80183f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080183f4 <_ZN8touchgfx7Outline6moveToEii>:
 80183f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80183f6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80183f8:	4615      	mov	r5, r2
 80183fa:	079a      	lsls	r2, r3, #30
 80183fc:	4604      	mov	r4, r0
 80183fe:	460e      	mov	r6, r1
 8018400:	d401      	bmi.n	8018406 <_ZN8touchgfx7Outline6moveToEii+0x12>
 8018402:	f7ff faf9 	bl	80179f8 <_ZN8touchgfx7Outline5resetEv>
 8018406:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8018408:	07db      	lsls	r3, r3, #31
 801840a:	d504      	bpl.n	8018416 <_ZN8touchgfx7Outline6moveToEii+0x22>
 801840c:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 8018410:	4620      	mov	r0, r4
 8018412:	f7ff ffd5 	bl	80183c0 <_ZN8touchgfx7Outline6lineToEii>
 8018416:	6923      	ldr	r3, [r4, #16]
 8018418:	1170      	asrs	r0, r6, #5
 801841a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801841e:	1169      	asrs	r1, r5, #5
 8018420:	4290      	cmp	r0, r2
 8018422:	d103      	bne.n	801842c <_ZN8touchgfx7Outline6moveToEii+0x38>
 8018424:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8018428:	4291      	cmp	r1, r2
 801842a:	d01a      	beq.n	8018462 <_ZN8touchgfx7Outline6moveToEii+0x6e>
 801842c:	88df      	ldrh	r7, [r3, #6]
 801842e:	889a      	ldrh	r2, [r3, #4]
 8018430:	433a      	orrs	r2, r7
 8018432:	d010      	beq.n	8018456 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8018434:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8018438:	2a00      	cmp	r2, #0
 801843a:	db0c      	blt.n	8018456 <_ZN8touchgfx7Outline6moveToEii+0x62>
 801843c:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 801843e:	42ba      	cmp	r2, r7
 8018440:	da09      	bge.n	8018456 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8018442:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 8018446:	42ba      	cmp	r2, r7
 8018448:	bf38      	it	cc
 801844a:	3308      	addcc	r3, #8
 801844c:	f102 0201 	add.w	r2, r2, #1
 8018450:	bf38      	it	cc
 8018452:	6123      	strcc	r3, [r4, #16]
 8018454:	60a2      	str	r2, [r4, #8]
 8018456:	2200      	movs	r2, #0
 8018458:	6923      	ldr	r3, [r4, #16]
 801845a:	8018      	strh	r0, [r3, #0]
 801845c:	8059      	strh	r1, [r3, #2]
 801845e:	809a      	strh	r2, [r3, #4]
 8018460:	80da      	strh	r2, [r3, #6]
 8018462:	6166      	str	r6, [r4, #20]
 8018464:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8018468:	6225      	str	r5, [r4, #32]
 801846a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801846c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 801846c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018470:	b0d0      	sub	sp, #320	@ 0x140
 8018472:	466c      	mov	r4, sp
 8018474:	4627      	mov	r7, r4
 8018476:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801847a:	1a0d      	subs	r5, r1, r0
 801847c:	2d48      	cmp	r5, #72	@ 0x48
 801847e:	f100 0308 	add.w	r3, r0, #8
 8018482:	f340 80d5 	ble.w	8018630 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8018486:	112d      	asrs	r5, r5, #4
 8018488:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 801848c:	6816      	ldr	r6, [r2, #0]
 801848e:	f9b0 9000 	ldrsh.w	r9, [r0]
 8018492:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 8018496:	6006      	str	r6, [r0, #0]
 8018498:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 801849c:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80184a0:	6856      	ldr	r6, [r2, #4]
 80184a2:	6046      	str	r6, [r0, #4]
 80184a4:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 80184a8:	f8a2 8002 	strh.w	r8, [r2, #2]
 80184ac:	f8a2 e004 	strh.w	lr, [r2, #4]
 80184b0:	f8a2 c006 	strh.w	ip, [r2, #6]
 80184b4:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 80184b8:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 80184bc:	f1a1 0208 	sub.w	r2, r1, #8
 80184c0:	4565      	cmp	r5, ip
 80184c2:	db06      	blt.n	80184d2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 80184c4:	d119      	bne.n	80184fa <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 80184c6:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 80184ca:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 80184ce:	42ae      	cmp	r6, r5
 80184d0:	dd13      	ble.n	80184fa <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 80184d2:	460e      	mov	r6, r1
 80184d4:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 80184d8:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 80184dc:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 80184e0:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 80184e4:	601d      	str	r5, [r3, #0]
 80184e6:	6875      	ldr	r5, [r6, #4]
 80184e8:	605d      	str	r5, [r3, #4]
 80184ea:	f821 9c08 	strh.w	r9, [r1, #-8]
 80184ee:	f821 cc06 	strh.w	ip, [r1, #-6]
 80184f2:	f821 8c04 	strh.w	r8, [r1, #-4]
 80184f6:	f821 ec02 	strh.w	lr, [r1, #-2]
 80184fa:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80184fe:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 8018502:	42ae      	cmp	r6, r5
 8018504:	db06      	blt.n	8018514 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 8018506:	d116      	bne.n	8018536 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8018508:	f9b0 c000 	ldrsh.w	ip, [r0]
 801850c:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8018510:	45ac      	cmp	ip, r5
 8018512:	da10      	bge.n	8018536 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8018514:	681d      	ldr	r5, [r3, #0]
 8018516:	f9b0 8000 	ldrsh.w	r8, [r0]
 801851a:	6005      	str	r5, [r0, #0]
 801851c:	685d      	ldr	r5, [r3, #4]
 801851e:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8018522:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8018526:	f8a0 8008 	strh.w	r8, [r0, #8]
 801852a:	6045      	str	r5, [r0, #4]
 801852c:	8146      	strh	r6, [r0, #10]
 801852e:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8018532:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8018536:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 801853a:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 801853e:	4565      	cmp	r5, ip
 8018540:	db06      	blt.n	8018550 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 8018542:	d119      	bne.n	8018578 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8018544:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 8018548:	f9b0 5000 	ldrsh.w	r5, [r0]
 801854c:	42ae      	cmp	r6, r5
 801854e:	da13      	bge.n	8018578 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8018550:	460e      	mov	r6, r1
 8018552:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8018556:	f9b0 9000 	ldrsh.w	r9, [r0]
 801855a:	6005      	str	r5, [r0, #0]
 801855c:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8018560:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 8018564:	6875      	ldr	r5, [r6, #4]
 8018566:	6045      	str	r5, [r0, #4]
 8018568:	f821 9c08 	strh.w	r9, [r1, #-8]
 801856c:	f821 cc06 	strh.w	ip, [r1, #-6]
 8018570:	f821 8c04 	strh.w	r8, [r1, #-4]
 8018574:	f821 ec02 	strh.w	lr, [r1, #-2]
 8018578:	3308      	adds	r3, #8
 801857a:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 801857e:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8018582:	45e6      	cmp	lr, ip
 8018584:	dbf8      	blt.n	8018578 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8018586:	d105      	bne.n	8018594 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8018588:	f9b3 6000 	ldrsh.w	r6, [r3]
 801858c:	f9b0 5000 	ldrsh.w	r5, [r0]
 8018590:	42ae      	cmp	r6, r5
 8018592:	dbf1      	blt.n	8018578 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8018594:	4615      	mov	r5, r2
 8018596:	3a08      	subs	r2, #8
 8018598:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 801859c:	45b4      	cmp	ip, r6
 801859e:	dbf9      	blt.n	8018594 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 80185a0:	d105      	bne.n	80185ae <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 80185a2:	f9b0 8000 	ldrsh.w	r8, [r0]
 80185a6:	f9b2 6000 	ldrsh.w	r6, [r2]
 80185aa:	45b0      	cmp	r8, r6
 80185ac:	dbf2      	blt.n	8018594 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 80185ae:	4293      	cmp	r3, r2
 80185b0:	f1a5 0608 	sub.w	r6, r5, #8
 80185b4:	d816      	bhi.n	80185e4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 80185b6:	f8d6 c000 	ldr.w	ip, [r6]
 80185ba:	f9b3 a000 	ldrsh.w	sl, [r3]
 80185be:	f8c3 c000 	str.w	ip, [r3]
 80185c2:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 80185c6:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 80185ca:	f8d6 c004 	ldr.w	ip, [r6, #4]
 80185ce:	f8c3 c004 	str.w	ip, [r3, #4]
 80185d2:	f825 ac08 	strh.w	sl, [r5, #-8]
 80185d6:	f825 ec06 	strh.w	lr, [r5, #-6]
 80185da:	f825 9c04 	strh.w	r9, [r5, #-4]
 80185de:	f825 8c02 	strh.w	r8, [r5, #-2]
 80185e2:	e7c9      	b.n	8018578 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80185e4:	f8d6 e000 	ldr.w	lr, [r6]
 80185e8:	f9b0 a000 	ldrsh.w	sl, [r0]
 80185ec:	f8c0 e000 	str.w	lr, [r0]
 80185f0:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 80185f4:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 80185f8:	f8d6 e004 	ldr.w	lr, [r6, #4]
 80185fc:	1a16      	subs	r6, r2, r0
 80185fe:	f8c0 e004 	str.w	lr, [r0, #4]
 8018602:	f825 ac08 	strh.w	sl, [r5, #-8]
 8018606:	f825 cc06 	strh.w	ip, [r5, #-6]
 801860a:	f825 9c04 	strh.w	r9, [r5, #-4]
 801860e:	f825 8c02 	strh.w	r8, [r5, #-2]
 8018612:	1acd      	subs	r5, r1, r3
 8018614:	10ed      	asrs	r5, r5, #3
 8018616:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 801861a:	bfb5      	itete	lt
 801861c:	e9c4 0200 	strdlt	r0, r2, [r4]
 8018620:	e9c4 3100 	strdge	r3, r1, [r4]
 8018624:	460a      	movlt	r2, r1
 8018626:	4603      	movge	r3, r0
 8018628:	3408      	adds	r4, #8
 801862a:	4618      	mov	r0, r3
 801862c:	4611      	mov	r1, r2
 801862e:	e724      	b.n	801847a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8018630:	4299      	cmp	r1, r3
 8018632:	d928      	bls.n	8018686 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x21a>
 8018634:	f1a3 0210 	sub.w	r2, r3, #16
 8018638:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 801863c:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 8018640:	45ac      	cmp	ip, r5
 8018642:	db06      	blt.n	8018652 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 8018644:	d11d      	bne.n	8018682 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x216>
 8018646:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 801864a:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 801864e:	42ae      	cmp	r6, r5
 8018650:	da17      	bge.n	8018682 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x216>
 8018652:	4615      	mov	r5, r2
 8018654:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8018658:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 801865c:	6116      	str	r6, [r2, #16]
 801865e:	686e      	ldr	r6, [r5, #4]
 8018660:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 8018664:	f9b2 e016 	ldrsh.w	lr, [r2, #22]
 8018668:	42a8      	cmp	r0, r5
 801866a:	6156      	str	r6, [r2, #20]
 801866c:	f8a2 9008 	strh.w	r9, [r2, #8]
 8018670:	f8a2 c00a 	strh.w	ip, [r2, #10]
 8018674:	f8a2 800c 	strh.w	r8, [r2, #12]
 8018678:	f8a2 e00e 	strh.w	lr, [r2, #14]
 801867c:	f1a2 0208 	sub.w	r2, r2, #8
 8018680:	d1da      	bne.n	8018638 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 8018682:	3308      	adds	r3, #8
 8018684:	e7d4      	b.n	8018630 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8018686:	42bc      	cmp	r4, r7
 8018688:	d903      	bls.n	8018692 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x226>
 801868a:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 801868e:	3c08      	subs	r4, #8
 8018690:	e6f3      	b.n	801847a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8018692:	b050      	add	sp, #320	@ 0x140
 8018694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08018698 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 8018698:	b510      	push	{r4, lr}
 801869a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801869c:	4604      	mov	r4, r0
 801869e:	07da      	lsls	r2, r3, #31
 80186a0:	d507      	bpl.n	80186b2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 80186a2:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 80186a6:	f7ff fe8b 	bl	80183c0 <_ZN8touchgfx7Outline6lineToEii>
 80186aa:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80186ac:	f023 0301 	bic.w	r3, r3, #1
 80186b0:	6243      	str	r3, [r0, #36]	@ 0x24
 80186b2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80186b4:	079b      	lsls	r3, r3, #30
 80186b6:	d521      	bpl.n	80186fc <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 80186b8:	6923      	ldr	r3, [r4, #16]
 80186ba:	88d9      	ldrh	r1, [r3, #6]
 80186bc:	889a      	ldrh	r2, [r3, #4]
 80186be:	430a      	orrs	r2, r1
 80186c0:	d010      	beq.n	80186e4 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80186c2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80186c6:	2a00      	cmp	r2, #0
 80186c8:	db0c      	blt.n	80186e4 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80186ca:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80186cc:	428a      	cmp	r2, r1
 80186ce:	da09      	bge.n	80186e4 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80186d0:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 80186d4:	4291      	cmp	r1, r2
 80186d6:	bf88      	it	hi
 80186d8:	3308      	addhi	r3, #8
 80186da:	f102 0201 	add.w	r2, r2, #1
 80186de:	bf88      	it	hi
 80186e0:	6123      	strhi	r3, [r4, #16]
 80186e2:	60a2      	str	r2, [r4, #8]
 80186e4:	68a1      	ldr	r1, [r4, #8]
 80186e6:	b129      	cbz	r1, 80186f4 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 80186e8:	6863      	ldr	r3, [r4, #4]
 80186ea:	4299      	cmp	r1, r3
 80186ec:	d802      	bhi.n	80186f4 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 80186ee:	68e0      	ldr	r0, [r4, #12]
 80186f0:	f7ff febc 	bl	801846c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 80186f4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80186f6:	f023 0302 	bic.w	r3, r3, #2
 80186fa:	6263      	str	r3, [r4, #36]	@ 0x24
 80186fc:	68e0      	ldr	r0, [r4, #12]
 80186fe:	bd10      	pop	{r4, pc}

08018700 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8018700:	4b01      	ldr	r3, [pc, #4]	@ (8018708 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8018702:	6818      	ldr	r0, [r3, #0]
 8018704:	4770      	bx	lr
 8018706:	bf00      	nop
 8018708:	2005ba84 	.word	0x2005ba84

0801870c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 801870c:	4b01      	ldr	r3, [pc, #4]	@ (8018714 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 801870e:	6818      	ldr	r0, [r3, #0]
 8018710:	4770      	bx	lr
 8018712:	bf00      	nop
 8018714:	2005ba88 	.word	0x2005ba88

08018718 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8018718:	b510      	push	{r4, lr}
 801871a:	6803      	ldr	r3, [r0, #0]
 801871c:	460c      	mov	r4, r1
 801871e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018720:	4798      	blx	r3
 8018722:	1b03      	subs	r3, r0, r4
 8018724:	4258      	negs	r0, r3
 8018726:	4158      	adcs	r0, r3
 8018728:	bd10      	pop	{r4, pc}
	...

0801872c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 801872c:	4b01      	ldr	r3, [pc, #4]	@ (8018734 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801872e:	6019      	str	r1, [r3, #0]
 8018730:	4770      	bx	lr
 8018732:	bf00      	nop
 8018734:	2005ba8c 	.word	0x2005ba8c

08018738 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8018738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801873c:	4696      	mov	lr, r2
 801873e:	4614      	mov	r4, r2
 8018740:	4605      	mov	r5, r0
 8018742:	460e      	mov	r6, r1
 8018744:	461f      	mov	r7, r3
 8018746:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801874a:	b097      	sub	sp, #92	@ 0x5c
 801874c:	f10d 0c1c 	add.w	ip, sp, #28
 8018750:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018754:	f8de 3000 	ldr.w	r3, [lr]
 8018758:	f104 0e14 	add.w	lr, r4, #20
 801875c:	f8cc 3000 	str.w	r3, [ip]
 8018760:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8018764:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018768:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801876c:	f8de 3000 	ldr.w	r3, [lr]
 8018770:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8018774:	f8cc 3000 	str.w	r3, [ip]
 8018778:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 801877c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018780:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018784:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 8018788:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 801878c:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 8018790:	f8de 3000 	ldr.w	r3, [lr]
 8018794:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8018796:	f8cc 3000 	str.w	r3, [ip]
 801879a:	9201      	str	r2, [sp, #4]
 801879c:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80187a0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80187a2:	682b      	ldr	r3, [r5, #0]
 80187a4:	9200      	str	r2, [sp, #0]
 80187a6:	f8cd 8008 	str.w	r8, [sp, #8]
 80187aa:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 80187ae:	aa07      	add	r2, sp, #28
 80187b0:	463b      	mov	r3, r7
 80187b2:	4631      	mov	r1, r6
 80187b4:	4628      	mov	r0, r5
 80187b6:	47d8      	blx	fp
 80187b8:	46a6      	mov	lr, r4
 80187ba:	f10d 0c1c 	add.w	ip, sp, #28
 80187be:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80187c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80187c6:	f8de 3000 	ldr.w	r3, [lr]
 80187ca:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 80187ce:	f8cc 3000 	str.w	r3, [ip]
 80187d2:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80187d6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80187da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80187de:	f8de 3000 	ldr.w	r3, [lr]
 80187e2:	343c      	adds	r4, #60	@ 0x3c
 80187e4:	f8cc 3000 	str.w	r3, [ip]
 80187e8:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 80187ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80187ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80187f2:	6823      	ldr	r3, [r4, #0]
 80187f4:	4631      	mov	r1, r6
 80187f6:	f8cc 3000 	str.w	r3, [ip]
 80187fa:	682b      	ldr	r3, [r5, #0]
 80187fc:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8018800:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8018802:	f8cd 8008 	str.w	r8, [sp, #8]
 8018806:	9201      	str	r2, [sp, #4]
 8018808:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801880a:	4628      	mov	r0, r5
 801880c:	9200      	str	r2, [sp, #0]
 801880e:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8018810:	aa07      	add	r2, sp, #28
 8018812:	463b      	mov	r3, r7
 8018814:	47a0      	blx	r4
 8018816:	b017      	add	sp, #92	@ 0x5c
 8018818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801881c <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801881c:	2000      	movs	r0, #0
 801881e:	4770      	bx	lr

08018820 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8018820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018824:	b08d      	sub	sp, #52	@ 0x34
 8018826:	4688      	mov	r8, r1
 8018828:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801882a:	f8d3 c000 	ldr.w	ip, [r3]
 801882e:	680f      	ldr	r7, [r1, #0]
 8018830:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 8018834:	eba7 070c 	sub.w	r7, r7, ip
 8018838:	42bc      	cmp	r4, r7
 801883a:	bfa8      	it	ge
 801883c:	463c      	movge	r4, r7
 801883e:	ee07 4a90 	vmov	s15, r4
 8018842:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 8018846:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801884a:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 801884e:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 8018852:	edd3 6a07 	vldr	s13, [r3, #28]
 8018856:	ee25 4a04 	vmul.f32	s8, s10, s8
 801885a:	ee65 4a24 	vmul.f32	s9, s10, s9
 801885e:	ee25 5a27 	vmul.f32	s10, s10, s15
 8018862:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8018866:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 801886a:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 801886e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8018872:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018874:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 8018878:	f9b1 9000 	ldrsh.w	r9, [r1]
 801887c:	f9ba 1000 	ldrsh.w	r1, [sl]
 8018880:	eb09 0e0c 	add.w	lr, r9, ip
 8018884:	4571      	cmp	r1, lr
 8018886:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801888a:	ee32 1a05 	vadd.f32	s2, s4, s10
 801888e:	ee36 0a84 	vadd.f32	s0, s13, s8
 8018892:	ee61 1a87 	vmul.f32	s3, s3, s14
 8018896:	ee22 2a07 	vmul.f32	s4, s4, s14
 801889a:	f340 808c 	ble.w	80189b6 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801889e:	eba1 060e 	sub.w	r6, r1, lr
 80188a2:	fb96 f5f4 	sdiv	r5, r6, r4
 80188a6:	ee07 5a10 	vmov	s14, r5
 80188aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80188ae:	2d00      	cmp	r5, #0
 80188b0:	fb04 6615 	mls	r6, r4, r5, r6
 80188b4:	eea7 0a04 	vfma.f32	s0, s14, s8
 80188b8:	eee7 0a24 	vfma.f32	s1, s14, s9
 80188bc:	eea7 1a05 	vfma.f32	s2, s14, s10
 80188c0:	dd12      	ble.n	80188e8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 80188c2:	ee70 6a44 	vsub.f32	s13, s0, s8
 80188c6:	eef5 6a40 	vcmp.f32	s13, #0.0
 80188ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188ce:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80188d2:	bf14      	ite	ne
 80188d4:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 80188d8:	eeb0 7a67 	vmoveq.f32	s14, s15
 80188dc:	ee31 2a45 	vsub.f32	s4, s2, s10
 80188e0:	ee61 1a87 	vmul.f32	s3, s3, s14
 80188e4:	ee22 2a07 	vmul.f32	s4, s4, s14
 80188e8:	fb05 f204 	mul.w	r2, r5, r4
 80188ec:	1abf      	subs	r7, r7, r2
 80188ee:	4494      	add	ip, r2
 80188f0:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80188f4:	4411      	add	r1, r2
 80188f6:	eb09 020c 	add.w	r2, r9, ip
 80188fa:	443a      	add	r2, r7
 80188fc:	b209      	sxth	r1, r1
 80188fe:	428a      	cmp	r2, r1
 8018900:	bfc4      	itt	gt
 8018902:	eba1 0209 	subgt.w	r2, r1, r9
 8018906:	eba2 070c 	subgt.w	r7, r2, ip
 801890a:	2f00      	cmp	r7, #0
 801890c:	dd50      	ble.n	80189b0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 801890e:	fb97 f1f4 	sdiv	r1, r7, r4
 8018912:	fb04 7211 	mls	r2, r4, r1, r7
 8018916:	b90a      	cbnz	r2, 801891c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8018918:	4622      	mov	r2, r4
 801891a:	3901      	subs	r1, #1
 801891c:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8018920:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8018924:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8018928:	ee21 3a23 	vmul.f32	s6, s2, s7
 801892c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8018930:	ee17 7a90 	vmov	r7, s15
 8018934:	ee73 7a42 	vsub.f32	s15, s6, s4
 8018938:	eef0 6a42 	vmov.f32	s13, s4
 801893c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8018940:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018944:	ee17 ca90 	vmov	ip, s15
 8018948:	eeb0 7a61 	vmov.f32	s14, s3
 801894c:	6840      	ldr	r0, [r0, #4]
 801894e:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 8018952:	f8d0 a000 	ldr.w	sl, [r0]
 8018956:	900b      	str	r0, [sp, #44]	@ 0x2c
 8018958:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801895a:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 801895e:	9008      	str	r0, [sp, #32]
 8018960:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8018962:	695b      	ldr	r3, [r3, #20]
 8018964:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8018968:	fb9c fcf4 	sdiv	ip, ip, r4
 801896c:	445b      	add	r3, fp
 801896e:	9307      	str	r3, [sp, #28]
 8018970:	ee16 3a90 	vmov	r3, s13
 8018974:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8018978:	fb0c 3306 	mla	r3, ip, r6, r3
 801897c:	fb97 f7f4 	sdiv	r7, r7, r4
 8018980:	9302      	str	r3, [sp, #8]
 8018982:	ee17 3a10 	vmov	r3, s14
 8018986:	2900      	cmp	r1, #0
 8018988:	bfcc      	ite	gt
 801898a:	46a1      	movgt	r9, r4
 801898c:	4691      	movle	r9, r2
 801898e:	44b6      	add	lr, r6
 8018990:	fb04 e505 	mla	r5, r4, r5, lr
 8018994:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8018998:	fb07 3706 	mla	r7, r7, r6, r3
 801899c:	e9cd 8505 	strd	r8, r5, [sp, #20]
 80189a0:	e9cd 4700 	strd	r4, r7, [sp]
 80189a4:	eba9 0306 	sub.w	r3, r9, r6
 80189a8:	f8da 4008 	ldr.w	r4, [sl, #8]
 80189ac:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80189ae:	47a0      	blx	r4
 80189b0:	b00d      	add	sp, #52	@ 0x34
 80189b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189b6:	2500      	movs	r5, #0
 80189b8:	462e      	mov	r6, r5
 80189ba:	e799      	b.n	80188f0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

080189bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80189bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189c0:	461d      	mov	r5, r3
 80189c2:	b0db      	sub	sp, #364	@ 0x16c
 80189c4:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 80189c8:	910f      	str	r1, [sp, #60]	@ 0x3c
 80189ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80189cc:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 80189d0:	9009      	str	r0, [sp, #36]	@ 0x24
 80189d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80189d4:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 80189d8:	4614      	mov	r4, r2
 80189da:	9310      	str	r3, [sp, #64]	@ 0x40
 80189dc:	6803      	ldr	r3, [r0, #0]
 80189de:	4629      	mov	r1, r5
 80189e0:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 80189e2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80189e6:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 80189ea:	47b8      	blx	r7
 80189ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80189ee:	6058      	str	r0, [r3, #4]
 80189f0:	2800      	cmp	r0, #0
 80189f2:	f000 83a1 	beq.w	8019138 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80189f6:	ed94 7a02 	vldr	s14, [r4, #8]
 80189fa:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 80189fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018a02:	682b      	ldr	r3, [r5, #0]
 8018a04:	9314      	str	r3, [sp, #80]	@ 0x50
 8018a06:	686b      	ldr	r3, [r5, #4]
 8018a08:	9315      	str	r3, [sp, #84]	@ 0x54
 8018a0a:	4bc1      	ldr	r3, [pc, #772]	@ (8018d10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8018a0c:	7819      	ldrb	r1, [r3, #0]
 8018a0e:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8018a12:	2900      	cmp	r1, #0
 8018a14:	bf16      	itet	ne
 8018a16:	4619      	movne	r1, r3
 8018a18:	4611      	moveq	r1, r2
 8018a1a:	4613      	movne	r3, r2
 8018a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a20:	9116      	str	r1, [sp, #88]	@ 0x58
 8018a22:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 8018a26:	f240 8387 	bls.w	8019138 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018a2a:	ed94 7a07 	vldr	s14, [r4, #28]
 8018a2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a36:	f240 837f 	bls.w	8019138 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018a3a:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 8018a3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a46:	f240 8377 	bls.w	8019138 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018a4a:	6822      	ldr	r2, [r4, #0]
 8018a4c:	4bb1      	ldr	r3, [pc, #708]	@ (8018d14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8018a4e:	429a      	cmp	r2, r3
 8018a50:	f2c0 8372 	blt.w	8019138 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018a54:	49b0      	ldr	r1, [pc, #704]	@ (8018d18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8018a56:	6963      	ldr	r3, [r4, #20]
 8018a58:	428a      	cmp	r2, r1
 8018a5a:	f300 836d 	bgt.w	8019138 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018a5e:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8018a62:	48ae      	ldr	r0, [pc, #696]	@ (8018d1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8018a64:	33ff      	adds	r3, #255	@ 0xff
 8018a66:	4283      	cmp	r3, r0
 8018a68:	f200 8366 	bhi.w	8019138 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018a6c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8018a6e:	4dac      	ldr	r5, [pc, #688]	@ (8018d20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8018a70:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8018a74:	33ff      	adds	r3, #255	@ 0xff
 8018a76:	42ab      	cmp	r3, r5
 8018a78:	f200 835e 	bhi.w	8019138 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018a7c:	6862      	ldr	r2, [r4, #4]
 8018a7e:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 8018a82:	33ff      	adds	r3, #255	@ 0xff
 8018a84:	4283      	cmp	r3, r0
 8018a86:	f200 8357 	bhi.w	8019138 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018a8a:	69a1      	ldr	r1, [r4, #24]
 8018a8c:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 8018a90:	33ff      	adds	r3, #255	@ 0xff
 8018a92:	4283      	cmp	r3, r0
 8018a94:	f200 8350 	bhi.w	8019138 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018a98:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8018a9a:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 8018a9e:	30ff      	adds	r0, #255	@ 0xff
 8018aa0:	42a8      	cmp	r0, r5
 8018aa2:	f200 8349 	bhi.w	8019138 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018aa6:	428a      	cmp	r2, r1
 8018aa8:	f280 8110 	bge.w	8018ccc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8018aac:	429a      	cmp	r2, r3
 8018aae:	f300 8119 	bgt.w	8018ce4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8018ab2:	4299      	cmp	r1, r3
 8018ab4:	f280 811d 	bge.w	8018cf2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8018ab8:	2502      	movs	r5, #2
 8018aba:	2701      	movs	r7, #1
 8018abc:	46a9      	mov	r9, r5
 8018abe:	46b8      	mov	r8, r7
 8018ac0:	f04f 0a00 	mov.w	sl, #0
 8018ac4:	4621      	mov	r1, r4
 8018ac6:	a849      	add	r0, sp, #292	@ 0x124
 8018ac8:	f003 fdc4 	bl	801c654 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8018acc:	4622      	mov	r2, r4
 8018ace:	4653      	mov	r3, sl
 8018ad0:	a949      	add	r1, sp, #292	@ 0x124
 8018ad2:	f8cd 9000 	str.w	r9, [sp]
 8018ad6:	a819      	add	r0, sp, #100	@ 0x64
 8018ad8:	f003 feee 	bl	801c8b8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8018adc:	4622      	mov	r2, r4
 8018ade:	4653      	mov	r3, sl
 8018ae0:	a949      	add	r1, sp, #292	@ 0x124
 8018ae2:	f8cd 8000 	str.w	r8, [sp]
 8018ae6:	a829      	add	r0, sp, #164	@ 0xa4
 8018ae8:	f003 fee6 	bl	801c8b8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8018aec:	4643      	mov	r3, r8
 8018aee:	4622      	mov	r2, r4
 8018af0:	a949      	add	r1, sp, #292	@ 0x124
 8018af2:	f8cd 9000 	str.w	r9, [sp]
 8018af6:	a839      	add	r0, sp, #228	@ 0xe4
 8018af8:	f003 fede 	bl	801c8b8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8018afc:	42af      	cmp	r7, r5
 8018afe:	bfb5      	itete	lt
 8018b00:	2300      	movlt	r3, #0
 8018b02:	2301      	movge	r3, #1
 8018b04:	930e      	strlt	r3, [sp, #56]	@ 0x38
 8018b06:	930e      	strge	r3, [sp, #56]	@ 0x38
 8018b08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018b0a:	af12      	add	r7, sp, #72	@ 0x48
 8018b0c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018b10:	bfb9      	ittee	lt
 8018b12:	ad29      	addlt	r5, sp, #164	@ 0xa4
 8018b14:	ac19      	addlt	r4, sp, #100	@ 0x64
 8018b16:	ad19      	addge	r5, sp, #100	@ 0x64
 8018b18:	ac29      	addge	r4, sp, #164	@ 0xa4
 8018b1a:	e887 0003 	stmia.w	r7, {r0, r1}
 8018b1e:	b928      	cbnz	r0, 8018b2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8018b20:	4b80      	ldr	r3, [pc, #512]	@ (8018d24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8018b22:	6818      	ldr	r0, [r3, #0]
 8018b24:	6803      	ldr	r3, [r0, #0]
 8018b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018b28:	4798      	blx	r3
 8018b2a:	6038      	str	r0, [r7, #0]
 8018b2c:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8018b2e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8018b32:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018b36:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 8018b38:	930c      	str	r3, [sp, #48]	@ 0x30
 8018b3a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8018b3c:	6963      	ldr	r3, [r4, #20]
 8018b3e:	440b      	add	r3, r1
 8018b40:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8018b44:	4408      	add	r0, r1
 8018b46:	b200      	sxth	r0, r0
 8018b48:	4283      	cmp	r3, r0
 8018b4a:	900d      	str	r0, [sp, #52]	@ 0x34
 8018b4c:	f280 80dd 	bge.w	8018d0a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8018b50:	428b      	cmp	r3, r1
 8018b52:	da08      	bge.n	8018b66 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8018b54:	2a00      	cmp	r2, #0
 8018b56:	dd06      	ble.n	8018b66 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8018b58:	1acb      	subs	r3, r1, r3
 8018b5a:	429a      	cmp	r2, r3
 8018b5c:	f2c0 80e4 	blt.w	8018d28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8018b60:	2b00      	cmp	r3, #0
 8018b62:	f300 80e2 	bgt.w	8018d2a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8018b66:	6967      	ldr	r7, [r4, #20]
 8018b68:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018b6a:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8018b6e:	443b      	add	r3, r7
 8018b70:	461f      	mov	r7, r3
 8018b72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018b74:	1bdf      	subs	r7, r3, r7
 8018b76:	4297      	cmp	r7, r2
 8018b78:	bfa8      	it	ge
 8018b7a:	4617      	movge	r7, r2
 8018b7c:	2f00      	cmp	r7, #0
 8018b7e:	f340 8166 	ble.w	8018e4e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8018b82:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8018b84:	6829      	ldr	r1, [r5, #0]
 8018b86:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018b8a:	f9bb 3000 	ldrsh.w	r3, [fp]
 8018b8e:	4411      	add	r1, r2
 8018b90:	4299      	cmp	r1, r3
 8018b92:	6820      	ldr	r0, [r4, #0]
 8018b94:	dd1a      	ble.n	8018bcc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8018b96:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8018b9a:	4402      	add	r2, r0
 8018b9c:	440b      	add	r3, r1
 8018b9e:	b21b      	sxth	r3, r3
 8018ba0:	429a      	cmp	r2, r3
 8018ba2:	dc13      	bgt.n	8018bcc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8018ba4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8018ba6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018ba8:	a912      	add	r1, sp, #72	@ 0x48
 8018baa:	681b      	ldr	r3, [r3, #0]
 8018bac:	9206      	str	r2, [sp, #24]
 8018bae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8018bb0:	9500      	str	r5, [sp, #0]
 8018bb2:	9205      	str	r2, [sp, #20]
 8018bb4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018bb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018bb8:	e9cd b203 	strd	fp, r2, [sp, #12]
 8018bbc:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8018bbe:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8018bc2:	aa49      	add	r2, sp, #292	@ 0x124
 8018bc4:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8018bc8:	4623      	mov	r3, r4
 8018bca:	47c8      	blx	r9
 8018bcc:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018bd0:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8018bd4:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8018bd8:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8018bdc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018be0:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8018be4:	ed94 6a08 	vldr	s12, [r4, #32]
 8018be8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018bec:	edd4 6a07 	vldr	s13, [r4, #28]
 8018bf0:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018bf4:	441a      	add	r2, r3
 8018bf6:	6963      	ldr	r3, [r4, #20]
 8018bf8:	68a1      	ldr	r1, [r4, #8]
 8018bfa:	3301      	adds	r3, #1
 8018bfc:	6163      	str	r3, [r4, #20]
 8018bfe:	69a3      	ldr	r3, [r4, #24]
 8018c00:	6022      	str	r2, [r4, #0]
 8018c02:	3b01      	subs	r3, #1
 8018c04:	61a3      	str	r3, [r4, #24]
 8018c06:	6923      	ldr	r3, [r4, #16]
 8018c08:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8018c0c:	440b      	add	r3, r1
 8018c0e:	68e1      	ldr	r1, [r4, #12]
 8018c10:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8018c14:	428b      	cmp	r3, r1
 8018c16:	edc4 6a07 	vstr	s13, [r4, #28]
 8018c1a:	6123      	str	r3, [r4, #16]
 8018c1c:	db15      	blt.n	8018c4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8018c1e:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8018c22:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018c26:	edc4 6a07 	vstr	s13, [r4, #28]
 8018c2a:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8018c2e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018c32:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8018c36:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8018c3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018c3e:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8018c42:	3201      	adds	r2, #1
 8018c44:	1a5b      	subs	r3, r3, r1
 8018c46:	6022      	str	r2, [r4, #0]
 8018c48:	6123      	str	r3, [r4, #16]
 8018c4a:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8018c4e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018c52:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8018c56:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8018c5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018c5e:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8018c62:	ed95 6a08 	vldr	s12, [r5, #32]
 8018c66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018c6a:	edd5 6a07 	vldr	s13, [r5, #28]
 8018c6e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018c72:	441a      	add	r2, r3
 8018c74:	696b      	ldr	r3, [r5, #20]
 8018c76:	68a9      	ldr	r1, [r5, #8]
 8018c78:	3301      	adds	r3, #1
 8018c7a:	616b      	str	r3, [r5, #20]
 8018c7c:	69ab      	ldr	r3, [r5, #24]
 8018c7e:	602a      	str	r2, [r5, #0]
 8018c80:	3b01      	subs	r3, #1
 8018c82:	61ab      	str	r3, [r5, #24]
 8018c84:	692b      	ldr	r3, [r5, #16]
 8018c86:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8018c8a:	440b      	add	r3, r1
 8018c8c:	68e9      	ldr	r1, [r5, #12]
 8018c8e:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8018c92:	428b      	cmp	r3, r1
 8018c94:	edc5 6a07 	vstr	s13, [r5, #28]
 8018c98:	612b      	str	r3, [r5, #16]
 8018c9a:	db15      	blt.n	8018cc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8018c9c:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8018ca0:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018ca4:	edc5 6a07 	vstr	s13, [r5, #28]
 8018ca8:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8018cac:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018cb0:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8018cb4:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8018cb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018cbc:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8018cc0:	3201      	adds	r2, #1
 8018cc2:	1a5b      	subs	r3, r3, r1
 8018cc4:	602a      	str	r2, [r5, #0]
 8018cc6:	612b      	str	r3, [r5, #16]
 8018cc8:	3f01      	subs	r7, #1
 8018cca:	e757      	b.n	8018b7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8018ccc:	4299      	cmp	r1, r3
 8018cce:	dc13      	bgt.n	8018cf8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8018cd0:	429a      	cmp	r2, r3
 8018cd2:	da14      	bge.n	8018cfe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8018cd4:	2502      	movs	r5, #2
 8018cd6:	2703      	movs	r7, #3
 8018cd8:	46a9      	mov	r9, r5
 8018cda:	f04f 0800 	mov.w	r8, #0
 8018cde:	f04f 0a01 	mov.w	sl, #1
 8018ce2:	e6ef      	b.n	8018ac4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8018ce4:	2501      	movs	r5, #1
 8018ce6:	2700      	movs	r7, #0
 8018ce8:	46a9      	mov	r9, r5
 8018cea:	46b8      	mov	r8, r7
 8018cec:	f04f 0a02 	mov.w	sl, #2
 8018cf0:	e6e8      	b.n	8018ac4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8018cf2:	2501      	movs	r5, #1
 8018cf4:	2702      	movs	r7, #2
 8018cf6:	e6e1      	b.n	8018abc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8018cf8:	2500      	movs	r5, #0
 8018cfa:	2701      	movs	r7, #1
 8018cfc:	e7f4      	b.n	8018ce8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8018cfe:	2702      	movs	r7, #2
 8018d00:	2503      	movs	r5, #3
 8018d02:	f04f 0900 	mov.w	r9, #0
 8018d06:	46b8      	mov	r8, r7
 8018d08:	e7e9      	b.n	8018cde <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8018d0a:	4613      	mov	r3, r2
 8018d0c:	e728      	b.n	8018b60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8018d0e:	bf00      	nop
 8018d10:	2005ba74 	.word	0x2005ba74
 8018d14:	fffd8f01 	.word	0xfffd8f01
 8018d18:	00027100 	.word	0x00027100
 8018d1c:	0004e1ff 	.word	0x0004e1ff
 8018d20:	0004e1fe 	.word	0x0004e1fe
 8018d24:	2005ba7c 	.word	0x2005ba7c
 8018d28:	4613      	mov	r3, r2
 8018d2a:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 8018d2e:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 8018d32:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 8018d36:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 8018d3a:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 8018d3e:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 8018d42:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8018d46:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 8018d4a:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 8018d4e:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 8018d52:	469e      	mov	lr, r3
 8018d54:	469c      	mov	ip, r3
 8018d56:	f04f 0900 	mov.w	r9, #0
 8018d5a:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8018d5c:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 8018d5e:	9111      	str	r1, [sp, #68]	@ 0x44
 8018d60:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 8018d64:	f1bc 0f00 	cmp.w	ip, #0
 8018d68:	d147      	bne.n	8018dfa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8018d6a:	eb03 0c07 	add.w	ip, r3, r7
 8018d6e:	1ad7      	subs	r7, r2, r3
 8018d70:	f1b9 0f00 	cmp.w	r9, #0
 8018d74:	d009      	beq.n	8018d8a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8018d76:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 8018d7a:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 8018d7e:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 8018d82:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 8018d86:	9029      	str	r0, [sp, #164]	@ 0xa4
 8018d88:	912d      	str	r1, [sp, #180]	@ 0xb4
 8018d8a:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8018d8e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8018d92:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8018d96:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8018d9a:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8018d9e:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8018da2:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8018da6:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8018daa:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8018dae:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8018db2:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8018db6:	f04f 0800 	mov.w	r8, #0
 8018dba:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8018dbc:	9111      	str	r1, [sp, #68]	@ 0x44
 8018dbe:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8018dc2:	f1be 0f00 	cmp.w	lr, #0
 8018dc6:	d031      	beq.n	8018e2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8018dc8:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8018dca:	4450      	add	r0, sl
 8018dcc:	4431      	add	r1, r6
 8018dce:	4549      	cmp	r1, r9
 8018dd0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8018dd4:	ee37 7a04 	vadd.f32	s14, s14, s8
 8018dd8:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8018ddc:	db08      	blt.n	8018df0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8018dde:	ee77 7a85 	vadd.f32	s15, s15, s10
 8018de2:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8018de6:	ee37 7a06 	vadd.f32	s14, s14, s12
 8018dea:	3001      	adds	r0, #1
 8018dec:	eba1 0109 	sub.w	r1, r1, r9
 8018df0:	f10e 3eff 	add.w	lr, lr, #4294967295
 8018df4:	f04f 0801 	mov.w	r8, #1
 8018df8:	e7e3      	b.n	8018dc2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8018dfa:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8018dfc:	4450      	add	r0, sl
 8018dfe:	4431      	add	r1, r6
 8018e00:	4541      	cmp	r1, r8
 8018e02:	ee37 7a24 	vadd.f32	s14, s14, s9
 8018e06:	ee77 7a84 	vadd.f32	s15, s15, s8
 8018e0a:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8018e0e:	db08      	blt.n	8018e22 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8018e10:	ee76 6a85 	vadd.f32	s13, s13, s10
 8018e14:	ee37 7a25 	vadd.f32	s14, s14, s11
 8018e18:	ee77 7a86 	vadd.f32	s15, s15, s12
 8018e1c:	3001      	adds	r0, #1
 8018e1e:	eba1 0108 	sub.w	r1, r1, r8
 8018e22:	f10c 3cff 	add.w	ip, ip, #4294967295
 8018e26:	f04f 0901 	mov.w	r9, #1
 8018e2a:	e79b      	b.n	8018d64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8018e2c:	449c      	add	ip, r3
 8018e2e:	1aff      	subs	r7, r7, r3
 8018e30:	f1b8 0f00 	cmp.w	r8, #0
 8018e34:	d009      	beq.n	8018e4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8018e36:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8018e3a:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8018e3e:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8018e42:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8018e46:	9019      	str	r0, [sp, #100]	@ 0x64
 8018e48:	911d      	str	r1, [sp, #116]	@ 0x74
 8018e4a:	1ad2      	subs	r2, r2, r3
 8018e4c:	e68b      	b.n	8018b66 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8018e4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018e50:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8018e52:	2b00      	cmp	r3, #0
 8018e54:	f000 80d1 	beq.w	8018ffa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8018e58:	ad19      	add	r5, sp, #100	@ 0x64
 8018e5a:	ac39      	add	r4, sp, #228	@ 0xe4
 8018e5c:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8018e5e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8018e62:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018e66:	930c      	str	r3, [sp, #48]	@ 0x30
 8018e68:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8018e6a:	6963      	ldr	r3, [r4, #20]
 8018e6c:	440b      	add	r3, r1
 8018e6e:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8018e72:	4408      	add	r0, r1
 8018e74:	b200      	sxth	r0, r0
 8018e76:	4283      	cmp	r3, r0
 8018e78:	900d      	str	r0, [sp, #52]	@ 0x34
 8018e7a:	f280 80c1 	bge.w	8019000 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8018e7e:	428b      	cmp	r3, r1
 8018e80:	da08      	bge.n	8018e94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8018e82:	2a00      	cmp	r2, #0
 8018e84:	dd06      	ble.n	8018e94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8018e86:	1acb      	subs	r3, r1, r3
 8018e88:	429a      	cmp	r2, r3
 8018e8a:	f2c0 80bb 	blt.w	8019004 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8018e8e:	2b00      	cmp	r3, #0
 8018e90:	f300 80b9 	bgt.w	8019006 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8018e94:	6967      	ldr	r7, [r4, #20]
 8018e96:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018e98:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8018e9c:	443b      	add	r3, r7
 8018e9e:	461f      	mov	r7, r3
 8018ea0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018ea2:	1bdf      	subs	r7, r3, r7
 8018ea4:	4297      	cmp	r7, r2
 8018ea6:	bfa8      	it	ge
 8018ea8:	4617      	movge	r7, r2
 8018eaa:	2f00      	cmp	r7, #0
 8018eac:	f340 813c 	ble.w	8019128 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8018eb0:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8018eb2:	6829      	ldr	r1, [r5, #0]
 8018eb4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018eb8:	f9bb 3000 	ldrsh.w	r3, [fp]
 8018ebc:	4411      	add	r1, r2
 8018ebe:	4299      	cmp	r1, r3
 8018ec0:	6820      	ldr	r0, [r4, #0]
 8018ec2:	dd1a      	ble.n	8018efa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8018ec4:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8018ec8:	4402      	add	r2, r0
 8018eca:	440b      	add	r3, r1
 8018ecc:	b21b      	sxth	r3, r3
 8018ece:	429a      	cmp	r2, r3
 8018ed0:	dc13      	bgt.n	8018efa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8018ed2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8018ed4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018ed6:	a912      	add	r1, sp, #72	@ 0x48
 8018ed8:	681b      	ldr	r3, [r3, #0]
 8018eda:	9206      	str	r2, [sp, #24]
 8018edc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8018ede:	9500      	str	r5, [sp, #0]
 8018ee0:	9205      	str	r2, [sp, #20]
 8018ee2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018ee4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018ee6:	e9cd b203 	strd	fp, r2, [sp, #12]
 8018eea:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8018eec:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8018ef0:	aa49      	add	r2, sp, #292	@ 0x124
 8018ef2:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8018ef6:	4623      	mov	r3, r4
 8018ef8:	47c8      	blx	r9
 8018efa:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018efe:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8018f02:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8018f06:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8018f0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018f0e:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8018f12:	ed94 6a08 	vldr	s12, [r4, #32]
 8018f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018f1a:	edd4 6a07 	vldr	s13, [r4, #28]
 8018f1e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018f22:	441a      	add	r2, r3
 8018f24:	6963      	ldr	r3, [r4, #20]
 8018f26:	68a1      	ldr	r1, [r4, #8]
 8018f28:	3301      	adds	r3, #1
 8018f2a:	6163      	str	r3, [r4, #20]
 8018f2c:	69a3      	ldr	r3, [r4, #24]
 8018f2e:	6022      	str	r2, [r4, #0]
 8018f30:	3b01      	subs	r3, #1
 8018f32:	61a3      	str	r3, [r4, #24]
 8018f34:	6923      	ldr	r3, [r4, #16]
 8018f36:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8018f3a:	440b      	add	r3, r1
 8018f3c:	68e1      	ldr	r1, [r4, #12]
 8018f3e:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8018f42:	428b      	cmp	r3, r1
 8018f44:	edc4 6a07 	vstr	s13, [r4, #28]
 8018f48:	6123      	str	r3, [r4, #16]
 8018f4a:	db15      	blt.n	8018f78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8018f4c:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8018f50:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018f54:	edc4 6a07 	vstr	s13, [r4, #28]
 8018f58:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8018f5c:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018f60:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8018f64:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8018f68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018f6c:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8018f70:	3201      	adds	r2, #1
 8018f72:	1a5b      	subs	r3, r3, r1
 8018f74:	6022      	str	r2, [r4, #0]
 8018f76:	6123      	str	r3, [r4, #16]
 8018f78:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8018f7c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018f80:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8018f84:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8018f88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018f8c:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8018f90:	ed95 6a08 	vldr	s12, [r5, #32]
 8018f94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018f98:	edd5 6a07 	vldr	s13, [r5, #28]
 8018f9c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018fa0:	441a      	add	r2, r3
 8018fa2:	696b      	ldr	r3, [r5, #20]
 8018fa4:	68a9      	ldr	r1, [r5, #8]
 8018fa6:	3301      	adds	r3, #1
 8018fa8:	616b      	str	r3, [r5, #20]
 8018faa:	69ab      	ldr	r3, [r5, #24]
 8018fac:	602a      	str	r2, [r5, #0]
 8018fae:	3b01      	subs	r3, #1
 8018fb0:	61ab      	str	r3, [r5, #24]
 8018fb2:	692b      	ldr	r3, [r5, #16]
 8018fb4:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8018fb8:	440b      	add	r3, r1
 8018fba:	68e9      	ldr	r1, [r5, #12]
 8018fbc:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8018fc0:	428b      	cmp	r3, r1
 8018fc2:	edc5 6a07 	vstr	s13, [r5, #28]
 8018fc6:	612b      	str	r3, [r5, #16]
 8018fc8:	db15      	blt.n	8018ff6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8018fca:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8018fce:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018fd2:	edc5 6a07 	vstr	s13, [r5, #28]
 8018fd6:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8018fda:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018fde:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8018fe2:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8018fe6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018fea:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8018fee:	3201      	adds	r2, #1
 8018ff0:	1a5b      	subs	r3, r3, r1
 8018ff2:	602a      	str	r2, [r5, #0]
 8018ff4:	612b      	str	r3, [r5, #16]
 8018ff6:	3f01      	subs	r7, #1
 8018ff8:	e757      	b.n	8018eaa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8018ffa:	ad39      	add	r5, sp, #228	@ 0xe4
 8018ffc:	ac19      	add	r4, sp, #100	@ 0x64
 8018ffe:	e72d      	b.n	8018e5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8019000:	4613      	mov	r3, r2
 8019002:	e744      	b.n	8018e8e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8019004:	4613      	mov	r3, r2
 8019006:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 801900a:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 801900e:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 8019012:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 8019016:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 801901a:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 801901e:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 8019022:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 8019026:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 801902a:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 801902e:	469e      	mov	lr, r3
 8019030:	461f      	mov	r7, r3
 8019032:	f04f 0900 	mov.w	r9, #0
 8019036:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 8019038:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 801903c:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 801903e:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 8019042:	960e      	str	r6, [sp, #56]	@ 0x38
 8019044:	2f00      	cmp	r7, #0
 8019046:	d146      	bne.n	80190d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8019048:	449c      	add	ip, r3
 801904a:	1ad7      	subs	r7, r2, r3
 801904c:	f1b9 0f00 	cmp.w	r9, #0
 8019050:	d009      	beq.n	8019066 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8019052:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 8019056:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 801905a:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 801905e:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 8019062:	9039      	str	r0, [sp, #228]	@ 0xe4
 8019064:	913d      	str	r1, [sp, #244]	@ 0xf4
 8019066:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 801906a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 801906e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8019072:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8019076:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 801907a:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 801907e:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8019082:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8019086:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 801908a:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 801908e:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8019092:	f04f 0800 	mov.w	r8, #0
 8019096:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8019098:	910e      	str	r1, [sp, #56]	@ 0x38
 801909a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 801909e:	f1be 0f00 	cmp.w	lr, #0
 80190a2:	d030      	beq.n	8019106 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 80190a4:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80190a6:	4450      	add	r0, sl
 80190a8:	4431      	add	r1, r6
 80190aa:	4549      	cmp	r1, r9
 80190ac:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80190b0:	ee37 7a04 	vadd.f32	s14, s14, s8
 80190b4:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80190b8:	db08      	blt.n	80190cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 80190ba:	ee77 7a85 	vadd.f32	s15, s15, s10
 80190be:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80190c2:	ee37 7a06 	vadd.f32	s14, s14, s12
 80190c6:	3001      	adds	r0, #1
 80190c8:	eba1 0109 	sub.w	r1, r1, r9
 80190cc:	f10e 3eff 	add.w	lr, lr, #4294967295
 80190d0:	f04f 0801 	mov.w	r8, #1
 80190d4:	e7e3      	b.n	801909e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 80190d6:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80190d8:	4450      	add	r0, sl
 80190da:	4431      	add	r1, r6
 80190dc:	4541      	cmp	r1, r8
 80190de:	ee37 7a24 	vadd.f32	s14, s14, s9
 80190e2:	ee77 7a84 	vadd.f32	s15, s15, s8
 80190e6:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80190ea:	db08      	blt.n	80190fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 80190ec:	ee76 6a85 	vadd.f32	s13, s13, s10
 80190f0:	ee37 7a25 	vadd.f32	s14, s14, s11
 80190f4:	ee77 7a86 	vadd.f32	s15, s15, s12
 80190f8:	3001      	adds	r0, #1
 80190fa:	eba1 0108 	sub.w	r1, r1, r8
 80190fe:	3f01      	subs	r7, #1
 8019100:	f04f 0901 	mov.w	r9, #1
 8019104:	e79e      	b.n	8019044 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8019106:	449c      	add	ip, r3
 8019108:	1aff      	subs	r7, r7, r3
 801910a:	f1b8 0f00 	cmp.w	r8, #0
 801910e:	d009      	beq.n	8019124 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8019110:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8019114:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8019118:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 801911c:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8019120:	9019      	str	r0, [sp, #100]	@ 0x64
 8019122:	911d      	str	r1, [sp, #116]	@ 0x74
 8019124:	1ad2      	subs	r2, r2, r3
 8019126:	e6b5      	b.n	8018e94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8019128:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801912a:	681b      	ldr	r3, [r3, #0]
 801912c:	b923      	cbnz	r3, 8019138 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801912e:	4b04      	ldr	r3, [pc, #16]	@ (8019140 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8019130:	6818      	ldr	r0, [r3, #0]
 8019132:	6803      	ldr	r3, [r0, #0]
 8019134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019136:	4798      	blx	r3
 8019138:	b05b      	add	sp, #364	@ 0x16c
 801913a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801913e:	bf00      	nop
 8019140:	2005ba7c 	.word	0x2005ba7c

08019144 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8019144:	2b03      	cmp	r3, #3
 8019146:	d818      	bhi.n	801917a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8019148:	e8df f003 	tbb	[pc, r3]
 801914c:	130d0602 	.word	0x130d0602
 8019150:	f9b0 2000 	ldrsh.w	r2, [r0]
 8019154:	1850      	adds	r0, r2, r1
 8019156:	4770      	bx	lr
 8019158:	8803      	ldrh	r3, [r0, #0]
 801915a:	8880      	ldrh	r0, [r0, #4]
 801915c:	4418      	add	r0, r3
 801915e:	b200      	sxth	r0, r0
 8019160:	1a80      	subs	r0, r0, r2
 8019162:	3801      	subs	r0, #1
 8019164:	4770      	bx	lr
 8019166:	8803      	ldrh	r3, [r0, #0]
 8019168:	8880      	ldrh	r0, [r0, #4]
 801916a:	4418      	add	r0, r3
 801916c:	b200      	sxth	r0, r0
 801916e:	1a40      	subs	r0, r0, r1
 8019170:	e7f7      	b.n	8019162 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8019172:	f9b0 0000 	ldrsh.w	r0, [r0]
 8019176:	4410      	add	r0, r2
 8019178:	4770      	bx	lr
 801917a:	2000      	movs	r0, #0
 801917c:	4770      	bx	lr

0801917e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801917e:	2b03      	cmp	r3, #3
 8019180:	d817      	bhi.n	80191b2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8019182:	e8df f003 	tbb	[pc, r3]
 8019186:	0602      	.short	0x0602
 8019188:	1009      	.short	0x1009
 801918a:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801918e:	1850      	adds	r0, r2, r1
 8019190:	4770      	bx	lr
 8019192:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8019196:	e7fa      	b.n	801918e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8019198:	8843      	ldrh	r3, [r0, #2]
 801919a:	88c0      	ldrh	r0, [r0, #6]
 801919c:	4418      	add	r0, r3
 801919e:	b200      	sxth	r0, r0
 80191a0:	1a80      	subs	r0, r0, r2
 80191a2:	3801      	subs	r0, #1
 80191a4:	4770      	bx	lr
 80191a6:	8843      	ldrh	r3, [r0, #2]
 80191a8:	88c0      	ldrh	r0, [r0, #6]
 80191aa:	4418      	add	r0, r3
 80191ac:	b200      	sxth	r0, r0
 80191ae:	1a40      	subs	r0, r0, r1
 80191b0:	e7f7      	b.n	80191a2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 80191b2:	2000      	movs	r0, #0
 80191b4:	4770      	bx	lr
	...

080191b8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 80191b8:	2200      	movs	r2, #0
 80191ba:	4b01      	ldr	r3, [pc, #4]	@ (80191c0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 80191bc:	601a      	str	r2, [r3, #0]
 80191be:	4770      	bx	lr
 80191c0:	2005ba8c 	.word	0x2005ba8c

080191c4 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 80191c4:	4603      	mov	r3, r0
 80191c6:	b1c8      	cbz	r0, 80191fc <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 80191c8:	0c02      	lsrs	r2, r0, #16
 80191ca:	0412      	lsls	r2, r2, #16
 80191cc:	b9a2      	cbnz	r2, 80191f8 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 80191ce:	0403      	lsls	r3, r0, #16
 80191d0:	2010      	movs	r0, #16
 80191d2:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 80191d6:	bf04      	itt	eq
 80191d8:	021b      	lsleq	r3, r3, #8
 80191da:	3008      	addeq	r0, #8
 80191dc:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 80191e0:	bf04      	itt	eq
 80191e2:	011b      	lsleq	r3, r3, #4
 80191e4:	3004      	addeq	r0, #4
 80191e6:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 80191ea:	bf04      	itt	eq
 80191ec:	009b      	lsleq	r3, r3, #2
 80191ee:	3002      	addeq	r0, #2
 80191f0:	2b00      	cmp	r3, #0
 80191f2:	db04      	blt.n	80191fe <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 80191f4:	3001      	adds	r0, #1
 80191f6:	4770      	bx	lr
 80191f8:	2000      	movs	r0, #0
 80191fa:	e7ea      	b.n	80191d2 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 80191fc:	2020      	movs	r0, #32
 80191fe:	4770      	bx	lr

08019200 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8019200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019204:	b087      	sub	sp, #28
 8019206:	460d      	mov	r5, r1
 8019208:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 801920c:	4616      	mov	r6, r2
 801920e:	4698      	mov	r8, r3
 8019210:	4601      	mov	r1, r0
 8019212:	b120      	cbz	r0, 801921e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8019214:	b11a      	cbz	r2, 801921e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8019216:	2d1f      	cmp	r5, #31
 8019218:	d801      	bhi.n	801921e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801921a:	2b1f      	cmp	r3, #31
 801921c:	d904      	bls.n	8019228 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 801921e:	2000      	movs	r0, #0
 8019220:	6038      	str	r0, [r7, #0]
 8019222:	b007      	add	sp, #28
 8019224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019228:	b97d      	cbnz	r5, 801924a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 801922a:	b143      	cbz	r3, 801923e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 801922c:	4602      	mov	r2, r0
 801922e:	e9cd 4700 	strd	r4, r7, [sp]
 8019232:	462b      	mov	r3, r5
 8019234:	4641      	mov	r1, r8
 8019236:	4630      	mov	r0, r6
 8019238:	f7ff ffe2 	bl	8019200 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801923c:	e7f1      	b.n	8019222 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801923e:	f04f 33ff 	mov.w	r3, #4294967295
 8019242:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8019246:	603b      	str	r3, [r7, #0]
 8019248:	e7eb      	b.n	8019222 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801924a:	fa32 fa05 	lsrs.w	sl, r2, r5
 801924e:	d106      	bne.n	801925e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 8019250:	4346      	muls	r6, r0
 8019252:	fbb6 f0f4 	udiv	r0, r6, r4
 8019256:	fb04 6610 	mls	r6, r4, r0, r6
 801925a:	603e      	str	r6, [r7, #0]
 801925c:	e7e1      	b.n	8019222 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801925e:	fa00 fb05 	lsl.w	fp, r0, r5
 8019262:	fbbb f9f4 	udiv	r9, fp, r4
 8019266:	2201      	movs	r2, #1
 8019268:	fb0a f309 	mul.w	r3, sl, r9
 801926c:	40aa      	lsls	r2, r5
 801926e:	3a01      	subs	r2, #1
 8019270:	4016      	ands	r6, r2
 8019272:	4630      	mov	r0, r6
 8019274:	9303      	str	r3, [sp, #12]
 8019276:	f7ff ffa5 	bl	80191c4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801927a:	462b      	mov	r3, r5
 801927c:	460a      	mov	r2, r1
 801927e:	e9cd 4700 	strd	r4, r7, [sp]
 8019282:	4601      	mov	r1, r0
 8019284:	4630      	mov	r0, r6
 8019286:	f7ff ffbb 	bl	8019200 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801928a:	fb04 b919 	mls	r9, r4, r9, fp
 801928e:	4606      	mov	r6, r0
 8019290:	4648      	mov	r0, r9
 8019292:	eb05 0108 	add.w	r1, r5, r8
 8019296:	f7ff ff95 	bl	80191c4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801929a:	ab05      	add	r3, sp, #20
 801929c:	e9cd 4300 	strd	r4, r3, [sp]
 80192a0:	464a      	mov	r2, r9
 80192a2:	4603      	mov	r3, r0
 80192a4:	4650      	mov	r0, sl
 80192a6:	f7ff ffab 	bl	8019200 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80192aa:	6839      	ldr	r1, [r7, #0]
 80192ac:	9a05      	ldr	r2, [sp, #20]
 80192ae:	9b03      	ldr	r3, [sp, #12]
 80192b0:	4411      	add	r1, r2
 80192b2:	fbb1 f2f4 	udiv	r2, r1, r4
 80192b6:	fb04 1412 	mls	r4, r4, r2, r1
 80192ba:	18d3      	adds	r3, r2, r3
 80192bc:	441e      	add	r6, r3
 80192be:	4430      	add	r0, r6
 80192c0:	603c      	str	r4, [r7, #0]
 80192c2:	e7ae      	b.n	8019222 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

080192c4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 80192c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80192c8:	b085      	sub	sp, #20
 80192ca:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80192cc:	f1b0 0900 	subs.w	r9, r0, #0
 80192d0:	461d      	mov	r5, r3
 80192d2:	bfbf      	itttt	lt
 80192d4:	6823      	ldrlt	r3, [r4, #0]
 80192d6:	f1c9 0900 	rsblt	r9, r9, #0
 80192da:	425b      	neglt	r3, r3
 80192dc:	6023      	strlt	r3, [r4, #0]
 80192de:	bfb4      	ite	lt
 80192e0:	f04f 36ff 	movlt.w	r6, #4294967295
 80192e4:	2601      	movge	r6, #1
 80192e6:	2a00      	cmp	r2, #0
 80192e8:	4617      	mov	r7, r2
 80192ea:	da04      	bge.n	80192f6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 80192ec:	6823      	ldr	r3, [r4, #0]
 80192ee:	4257      	negs	r7, r2
 80192f0:	425b      	negs	r3, r3
 80192f2:	4276      	negs	r6, r6
 80192f4:	6023      	str	r3, [r4, #0]
 80192f6:	2d00      	cmp	r5, #0
 80192f8:	4638      	mov	r0, r7
 80192fa:	bfba      	itte	lt
 80192fc:	426d      	neglt	r5, r5
 80192fe:	f04f 38ff 	movlt.w	r8, #4294967295
 8019302:	f04f 0801 	movge.w	r8, #1
 8019306:	f7ff ff5d 	bl	80191c4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801930a:	ab03      	add	r3, sp, #12
 801930c:	e9cd 5300 	strd	r5, r3, [sp]
 8019310:	463a      	mov	r2, r7
 8019312:	4603      	mov	r3, r0
 8019314:	4648      	mov	r0, r9
 8019316:	f7ff ff73 	bl	8019200 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801931a:	6823      	ldr	r3, [r4, #0]
 801931c:	9a03      	ldr	r2, [sp, #12]
 801931e:	4546      	cmp	r6, r8
 8019320:	441a      	add	r2, r3
 8019322:	fb92 f3f5 	sdiv	r3, r2, r5
 8019326:	4418      	add	r0, r3
 8019328:	fb05 2313 	mls	r3, r5, r3, r2
 801932c:	bf18      	it	ne
 801932e:	4240      	negne	r0, r0
 8019330:	1c72      	adds	r2, r6, #1
 8019332:	6023      	str	r3, [r4, #0]
 8019334:	d105      	bne.n	8019342 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8019336:	2b00      	cmp	r3, #0
 8019338:	f1c3 0200 	rsb	r2, r3, #0
 801933c:	db0b      	blt.n	8019356 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801933e:	6022      	str	r2, [r4, #0]
 8019340:	e006      	b.n	8019350 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8019342:	2e01      	cmp	r6, #1
 8019344:	d104      	bne.n	8019350 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8019346:	2b00      	cmp	r3, #0
 8019348:	da02      	bge.n	8019350 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801934a:	442b      	add	r3, r5
 801934c:	3801      	subs	r0, #1
 801934e:	6023      	str	r3, [r4, #0]
 8019350:	b005      	add	sp, #20
 8019352:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019356:	3801      	subs	r0, #1
 8019358:	1b52      	subs	r2, r2, r5
 801935a:	e7f0      	b.n	801933e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

0801935c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801935c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8019360:	4c1c      	ldr	r4, [pc, #112]	@ (80193d4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8019362:	4605      	mov	r5, r0
 8019364:	69a3      	ldr	r3, [r4, #24]
 8019366:	6807      	ldr	r7, [r0, #0]
 8019368:	b92b      	cbnz	r3, 8019376 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801936a:	6840      	ldr	r0, [r0, #4]
 801936c:	e9c5 7000 	strd	r7, r0, [r5]
 8019370:	b004      	add	sp, #16
 8019372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019376:	f04f 0802 	mov.w	r8, #2
 801937a:	fb93 f1f8 	sdiv	r1, r3, r8
 801937e:	68a2      	ldr	r2, [r4, #8]
 8019380:	ae04      	add	r6, sp, #16
 8019382:	440a      	add	r2, r1
 8019384:	f846 2d04 	str.w	r2, [r6, #-4]!
 8019388:	69e1      	ldr	r1, [r4, #28]
 801938a:	463a      	mov	r2, r7
 801938c:	9600      	str	r6, [sp, #0]
 801938e:	6820      	ldr	r0, [r4, #0]
 8019390:	f7ff ff98 	bl	80192c4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8019394:	69a3      	ldr	r3, [r4, #24]
 8019396:	4607      	mov	r7, r0
 8019398:	686a      	ldr	r2, [r5, #4]
 801939a:	6a21      	ldr	r1, [r4, #32]
 801939c:	9600      	str	r6, [sp, #0]
 801939e:	6860      	ldr	r0, [r4, #4]
 80193a0:	f7ff ff90 	bl	80192c4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80193a4:	69a3      	ldr	r3, [r4, #24]
 80193a6:	6962      	ldr	r2, [r4, #20]
 80193a8:	fb93 f8f8 	sdiv	r8, r3, r8
 80193ac:	4442      	add	r2, r8
 80193ae:	9203      	str	r2, [sp, #12]
 80193b0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80193b2:	682a      	ldr	r2, [r5, #0]
 80193b4:	4407      	add	r7, r0
 80193b6:	9600      	str	r6, [sp, #0]
 80193b8:	68e0      	ldr	r0, [r4, #12]
 80193ba:	f7ff ff83 	bl	80192c4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80193be:	9600      	str	r6, [sp, #0]
 80193c0:	4680      	mov	r8, r0
 80193c2:	69a3      	ldr	r3, [r4, #24]
 80193c4:	686a      	ldr	r2, [r5, #4]
 80193c6:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80193c8:	6920      	ldr	r0, [r4, #16]
 80193ca:	f7ff ff7b 	bl	80192c4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80193ce:	4440      	add	r0, r8
 80193d0:	e7cc      	b.n	801936c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 80193d2:	bf00      	nop
 80193d4:	2005ba90 	.word	0x2005ba90

080193d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 80193d8:	4b07      	ldr	r3, [pc, #28]	@ (80193f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 80193da:	781b      	ldrb	r3, [r3, #0]
 80193dc:	2b01      	cmp	r3, #1
 80193de:	d109      	bne.n	80193f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 80193e0:	f9b1 3000 	ldrsh.w	r3, [r1]
 80193e4:	f9b0 2000 	ldrsh.w	r2, [r0]
 80193e8:	8003      	strh	r3, [r0, #0]
 80193ea:	4b04      	ldr	r3, [pc, #16]	@ (80193fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 80193ec:	881b      	ldrh	r3, [r3, #0]
 80193ee:	3b01      	subs	r3, #1
 80193f0:	1a9b      	subs	r3, r3, r2
 80193f2:	800b      	strh	r3, [r1, #0]
 80193f4:	4770      	bx	lr
 80193f6:	bf00      	nop
 80193f8:	2005ba74 	.word	0x2005ba74
 80193fc:	2005ba70 	.word	0x2005ba70

08019400 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8019400:	b510      	push	{r4, lr}
 8019402:	4b07      	ldr	r3, [pc, #28]	@ (8019420 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8019404:	781b      	ldrb	r3, [r3, #0]
 8019406:	2b01      	cmp	r3, #1
 8019408:	d108      	bne.n	801941c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801940a:	4b06      	ldr	r3, [pc, #24]	@ (8019424 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801940c:	880c      	ldrh	r4, [r1, #0]
 801940e:	881b      	ldrh	r3, [r3, #0]
 8019410:	f9b0 2000 	ldrsh.w	r2, [r0]
 8019414:	3b01      	subs	r3, #1
 8019416:	1b1b      	subs	r3, r3, r4
 8019418:	8003      	strh	r3, [r0, #0]
 801941a:	800a      	strh	r2, [r1, #0]
 801941c:	bd10      	pop	{r4, pc}
 801941e:	bf00      	nop
 8019420:	2005ba74 	.word	0x2005ba74
 8019424:	2005ba70 	.word	0x2005ba70

08019428 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8019428:	b510      	push	{r4, lr}
 801942a:	4b0a      	ldr	r3, [pc, #40]	@ (8019454 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801942c:	781b      	ldrb	r3, [r3, #0]
 801942e:	2b01      	cmp	r3, #1
 8019430:	d10e      	bne.n	8019450 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8019432:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8019436:	8843      	ldrh	r3, [r0, #2]
 8019438:	f9b0 4000 	ldrsh.w	r4, [r0]
 801943c:	18ca      	adds	r2, r1, r3
 801943e:	4b06      	ldr	r3, [pc, #24]	@ (8019458 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8019440:	8044      	strh	r4, [r0, #2]
 8019442:	881b      	ldrh	r3, [r3, #0]
 8019444:	1a9b      	subs	r3, r3, r2
 8019446:	8003      	strh	r3, [r0, #0]
 8019448:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801944c:	8081      	strh	r1, [r0, #4]
 801944e:	80c3      	strh	r3, [r0, #6]
 8019450:	bd10      	pop	{r4, pc}
 8019452:	bf00      	nop
 8019454:	2005ba74 	.word	0x2005ba74
 8019458:	2005ba70 	.word	0x2005ba70

0801945c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801945c:	4b08      	ldr	r3, [pc, #32]	@ (8019480 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801945e:	781b      	ldrb	r3, [r3, #0]
 8019460:	2b01      	cmp	r3, #1
 8019462:	d10c      	bne.n	801947e <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8019464:	8803      	ldrh	r3, [r0, #0]
 8019466:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801946a:	8842      	ldrh	r2, [r0, #2]
 801946c:	8002      	strh	r2, [r0, #0]
 801946e:	185a      	adds	r2, r3, r1
 8019470:	4b04      	ldr	r3, [pc, #16]	@ (8019484 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8019472:	881b      	ldrh	r3, [r3, #0]
 8019474:	1a9b      	subs	r3, r3, r2
 8019476:	8043      	strh	r3, [r0, #2]
 8019478:	88c3      	ldrh	r3, [r0, #6]
 801947a:	80c1      	strh	r1, [r0, #6]
 801947c:	8083      	strh	r3, [r0, #4]
 801947e:	4770      	bx	lr
 8019480:	2005ba74 	.word	0x2005ba74
 8019484:	2005ba70 	.word	0x2005ba70

08019488 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8019488:	b510      	push	{r4, lr}
 801948a:	4b07      	ldr	r3, [pc, #28]	@ (80194a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801948c:	781b      	ldrb	r3, [r3, #0]
 801948e:	2b01      	cmp	r3, #1
 8019490:	d108      	bne.n	80194a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8019492:	f9b1 3000 	ldrsh.w	r3, [r1]
 8019496:	f9b0 4000 	ldrsh.w	r4, [r0]
 801949a:	8003      	strh	r3, [r0, #0]
 801949c:	8893      	ldrh	r3, [r2, #4]
 801949e:	3b01      	subs	r3, #1
 80194a0:	1b1b      	subs	r3, r3, r4
 80194a2:	800b      	strh	r3, [r1, #0]
 80194a4:	bd10      	pop	{r4, pc}
 80194a6:	bf00      	nop
 80194a8:	2005ba74 	.word	0x2005ba74

080194ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 80194ac:	b510      	push	{r4, lr}
 80194ae:	4b0a      	ldr	r3, [pc, #40]	@ (80194d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 80194b0:	460a      	mov	r2, r1
 80194b2:	781b      	ldrb	r3, [r3, #0]
 80194b4:	2b01      	cmp	r3, #1
 80194b6:	d10d      	bne.n	80194d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 80194b8:	8881      	ldrh	r1, [r0, #4]
 80194ba:	8803      	ldrh	r3, [r0, #0]
 80194bc:	440b      	add	r3, r1
 80194be:	4601      	mov	r1, r0
 80194c0:	3b01      	subs	r3, #1
 80194c2:	f821 3b02 	strh.w	r3, [r1], #2
 80194c6:	f7ff ffdf 	bl	8019488 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 80194ca:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80194ce:	88c2      	ldrh	r2, [r0, #6]
 80194d0:	80c3      	strh	r3, [r0, #6]
 80194d2:	8082      	strh	r2, [r0, #4]
 80194d4:	bd10      	pop	{r4, pc}
 80194d6:	bf00      	nop
 80194d8:	2005ba74 	.word	0x2005ba74

080194dc <_ZN8touchgfx11Application13requestRedrawEv>:
 80194dc:	2100      	movs	r1, #0
 80194de:	4b06      	ldr	r3, [pc, #24]	@ (80194f8 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 80194e0:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 80194e4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80194e8:	4b04      	ldr	r3, [pc, #16]	@ (80194fc <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 80194ea:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 80194ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80194f2:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 80194f6:	4770      	bx	lr
 80194f8:	2005ba70 	.word	0x2005ba70
 80194fc:	2005ba72 	.word	0x2005ba72

08019500 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8019500:	4b03      	ldr	r3, [pc, #12]	@ (8019510 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8019502:	6818      	ldr	r0, [r3, #0]
 8019504:	b110      	cbz	r0, 801950c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8019506:	6803      	ldr	r3, [r0, #0]
 8019508:	699b      	ldr	r3, [r3, #24]
 801950a:	4718      	bx	r3
 801950c:	4770      	bx	lr
 801950e:	bf00      	nop
 8019510:	2005bac0 	.word	0x2005bac0

08019514 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8019514:	4770      	bx	lr
	...

08019518 <_ZN8touchgfx11Application4drawEv>:
 8019518:	b507      	push	{r0, r1, r2, lr}
 801951a:	2100      	movs	r1, #0
 801951c:	4b08      	ldr	r3, [pc, #32]	@ (8019540 <_ZN8touchgfx11Application4drawEv+0x28>)
 801951e:	9100      	str	r1, [sp, #0]
 8019520:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019524:	4b07      	ldr	r3, [pc, #28]	@ (8019544 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8019526:	f8ad 2004 	strh.w	r2, [sp, #4]
 801952a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801952e:	4669      	mov	r1, sp
 8019530:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019534:	6803      	ldr	r3, [r0, #0]
 8019536:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019538:	4798      	blx	r3
 801953a:	b003      	add	sp, #12
 801953c:	f85d fb04 	ldr.w	pc, [sp], #4
 8019540:	2005ba70 	.word	0x2005ba70
 8019544:	2005ba72 	.word	0x2005ba72

08019548 <_ZN8touchgfx11Application10invalidateEv>:
 8019548:	2100      	movs	r1, #0
 801954a:	4b09      	ldr	r3, [pc, #36]	@ (8019570 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801954c:	b082      	sub	sp, #8
 801954e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019552:	4b08      	ldr	r3, [pc, #32]	@ (8019574 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8019554:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019558:	f9b3 3000 	ldrsh.w	r3, [r3]
 801955c:	9100      	str	r1, [sp, #0]
 801955e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019562:	6803      	ldr	r3, [r0, #0]
 8019564:	aa02      	add	r2, sp, #8
 8019566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019568:	e912 0006 	ldmdb	r2, {r1, r2}
 801956c:	b002      	add	sp, #8
 801956e:	4718      	bx	r3
 8019570:	2005ba70 	.word	0x2005ba70
 8019574:	2005ba72 	.word	0x2005ba72

08019578 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8019578:	4b03      	ldr	r3, [pc, #12]	@ (8019588 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801957a:	6818      	ldr	r0, [r3, #0]
 801957c:	b110      	cbz	r0, 8019584 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801957e:	6803      	ldr	r3, [r0, #0]
 8019580:	69db      	ldr	r3, [r3, #28]
 8019582:	4718      	bx	r3
 8019584:	4770      	bx	lr
 8019586:	bf00      	nop
 8019588:	2005bac0 	.word	0x2005bac0

0801958c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801958c:	4b03      	ldr	r3, [pc, #12]	@ (801959c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801958e:	6818      	ldr	r0, [r3, #0]
 8019590:	b110      	cbz	r0, 8019598 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8019592:	6803      	ldr	r3, [r0, #0]
 8019594:	6a1b      	ldr	r3, [r3, #32]
 8019596:	4718      	bx	r3
 8019598:	4770      	bx	lr
 801959a:	bf00      	nop
 801959c:	2005bac0 	.word	0x2005bac0

080195a0 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 80195a0:	2300      	movs	r3, #0
 80195a2:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 80195a6:	4770      	bx	lr

080195a8 <_ZN8touchgfx11Application14handleKeyEventEh>:
 80195a8:	4b03      	ldr	r3, [pc, #12]	@ (80195b8 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 80195aa:	6818      	ldr	r0, [r3, #0]
 80195ac:	b110      	cbz	r0, 80195b4 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 80195ae:	6803      	ldr	r3, [r0, #0]
 80195b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80195b2:	4718      	bx	r3
 80195b4:	4770      	bx	lr
 80195b6:	bf00      	nop
 80195b8:	2005bac0 	.word	0x2005bac0

080195bc <_ZNK8touchgfx4Rect9intersectERKS0_>:
 80195bc:	b510      	push	{r4, lr}
 80195be:	f9b1 4000 	ldrsh.w	r4, [r1]
 80195c2:	888a      	ldrh	r2, [r1, #4]
 80195c4:	f9b0 3000 	ldrsh.w	r3, [r0]
 80195c8:	4422      	add	r2, r4
 80195ca:	b212      	sxth	r2, r2
 80195cc:	4293      	cmp	r3, r2
 80195ce:	da15      	bge.n	80195fc <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80195d0:	8882      	ldrh	r2, [r0, #4]
 80195d2:	4413      	add	r3, r2
 80195d4:	b21b      	sxth	r3, r3
 80195d6:	429c      	cmp	r4, r3
 80195d8:	da10      	bge.n	80195fc <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80195da:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80195de:	88c9      	ldrh	r1, [r1, #6]
 80195e0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80195e4:	4419      	add	r1, r3
 80195e6:	b209      	sxth	r1, r1
 80195e8:	428a      	cmp	r2, r1
 80195ea:	da07      	bge.n	80195fc <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80195ec:	88c0      	ldrh	r0, [r0, #6]
 80195ee:	4410      	add	r0, r2
 80195f0:	b200      	sxth	r0, r0
 80195f2:	4283      	cmp	r3, r0
 80195f4:	bfac      	ite	ge
 80195f6:	2000      	movge	r0, #0
 80195f8:	2001      	movlt	r0, #1
 80195fa:	bd10      	pop	{r4, pc}
 80195fc:	2000      	movs	r0, #0
 80195fe:	e7fc      	b.n	80195fa <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08019600 <_ZN8touchgfx4Rect10restrictToEss>:
 8019600:	f9b0 3000 	ldrsh.w	r3, [r0]
 8019604:	b510      	push	{r4, lr}
 8019606:	2b00      	cmp	r3, #0
 8019608:	da04      	bge.n	8019614 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 801960a:	8884      	ldrh	r4, [r0, #4]
 801960c:	4423      	add	r3, r4
 801960e:	8083      	strh	r3, [r0, #4]
 8019610:	2300      	movs	r3, #0
 8019612:	8003      	strh	r3, [r0, #0]
 8019614:	f9b0 4000 	ldrsh.w	r4, [r0]
 8019618:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801961c:	1b09      	subs	r1, r1, r4
 801961e:	428b      	cmp	r3, r1
 8019620:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8019624:	bfc8      	it	gt
 8019626:	8081      	strhgt	r1, [r0, #4]
 8019628:	2b00      	cmp	r3, #0
 801962a:	da04      	bge.n	8019636 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 801962c:	88c1      	ldrh	r1, [r0, #6]
 801962e:	440b      	add	r3, r1
 8019630:	80c3      	strh	r3, [r0, #6]
 8019632:	2300      	movs	r3, #0
 8019634:	8043      	strh	r3, [r0, #2]
 8019636:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801963a:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801963e:	1a52      	subs	r2, r2, r1
 8019640:	4293      	cmp	r3, r2
 8019642:	bfc8      	it	gt
 8019644:	80c2      	strhgt	r2, [r0, #6]
 8019646:	bd10      	pop	{r4, pc}

08019648 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8019648:	b510      	push	{r4, lr}
 801964a:	460c      	mov	r4, r1
 801964c:	4b0f      	ldr	r3, [pc, #60]	@ (801968c <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801964e:	4620      	mov	r0, r4
 8019650:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019654:	4b0e      	ldr	r3, [pc, #56]	@ (8019690 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8019656:	f9b3 1000 	ldrsh.w	r1, [r3]
 801965a:	f7ff ffd1 	bl	8019600 <_ZN8touchgfx4Rect10restrictToEss>
 801965e:	4b0d      	ldr	r3, [pc, #52]	@ (8019694 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8019660:	6818      	ldr	r0, [r3, #0]
 8019662:	b190      	cbz	r0, 801968a <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8019664:	6803      	ldr	r3, [r0, #0]
 8019666:	4621      	mov	r1, r4
 8019668:	689b      	ldr	r3, [r3, #8]
 801966a:	4798      	blx	r3
 801966c:	4b0a      	ldr	r3, [pc, #40]	@ (8019698 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801966e:	6818      	ldr	r0, [r3, #0]
 8019670:	b118      	cbz	r0, 801967a <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8019672:	6803      	ldr	r3, [r0, #0]
 8019674:	4621      	mov	r1, r4
 8019676:	689b      	ldr	r3, [r3, #8]
 8019678:	4798      	blx	r3
 801967a:	4b08      	ldr	r3, [pc, #32]	@ (801969c <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 801967c:	4621      	mov	r1, r4
 801967e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019682:	6818      	ldr	r0, [r3, #0]
 8019684:	6803      	ldr	r3, [r0, #0]
 8019686:	69db      	ldr	r3, [r3, #28]
 8019688:	4718      	bx	r3
 801968a:	bd10      	pop	{r4, pc}
 801968c:	2005ba72 	.word	0x2005ba72
 8019690:	2005ba70 	.word	0x2005ba70
 8019694:	2005bac0 	.word	0x2005bac0
 8019698:	2005babc 	.word	0x2005babc
 801969c:	2005ba7c 	.word	0x2005ba7c

080196a0 <_ZNK8touchgfx4Rect8includesERKS0_>:
 80196a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80196a2:	4606      	mov	r6, r0
 80196a4:	4608      	mov	r0, r1
 80196a6:	460f      	mov	r7, r1
 80196a8:	f7fa fd85 	bl	80141b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80196ac:	b9e8      	cbnz	r0, 80196ea <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80196ae:	f9b7 5000 	ldrsh.w	r5, [r7]
 80196b2:	f9b6 4000 	ldrsh.w	r4, [r6]
 80196b6:	42a5      	cmp	r5, r4
 80196b8:	db17      	blt.n	80196ea <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80196ba:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80196be:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 80196c2:	429a      	cmp	r2, r3
 80196c4:	db11      	blt.n	80196ea <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80196c6:	88b9      	ldrh	r1, [r7, #4]
 80196c8:	440d      	add	r5, r1
 80196ca:	88b1      	ldrh	r1, [r6, #4]
 80196cc:	b22d      	sxth	r5, r5
 80196ce:	440c      	add	r4, r1
 80196d0:	b224      	sxth	r4, r4
 80196d2:	42a5      	cmp	r5, r4
 80196d4:	dc09      	bgt.n	80196ea <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80196d6:	88f8      	ldrh	r0, [r7, #6]
 80196d8:	4410      	add	r0, r2
 80196da:	88f2      	ldrh	r2, [r6, #6]
 80196dc:	b200      	sxth	r0, r0
 80196de:	4413      	add	r3, r2
 80196e0:	b21b      	sxth	r3, r3
 80196e2:	4298      	cmp	r0, r3
 80196e4:	bfcc      	ite	gt
 80196e6:	2000      	movgt	r0, #0
 80196e8:	2001      	movle	r0, #1
 80196ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080196ec <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 80196ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80196ee:	4604      	mov	r4, r0
 80196f0:	4608      	mov	r0, r1
 80196f2:	460d      	mov	r5, r1
 80196f4:	f7fa fd5f 	bl	80141b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80196f8:	b978      	cbnz	r0, 801971a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 80196fa:	4620      	mov	r0, r4
 80196fc:	f7fa fd5b 	bl	80141b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019700:	f9b5 6000 	ldrsh.w	r6, [r5]
 8019704:	b150      	cbz	r0, 801971c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8019706:	8026      	strh	r6, [r4, #0]
 8019708:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801970c:	8063      	strh	r3, [r4, #2]
 801970e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8019712:	80a3      	strh	r3, [r4, #4]
 8019714:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8019718:	80e3      	strh	r3, [r4, #6]
 801971a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801971c:	f9b4 1000 	ldrsh.w	r1, [r4]
 8019720:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8019724:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8019728:	42b1      	cmp	r1, r6
 801972a:	460f      	mov	r7, r1
 801972c:	bfa8      	it	ge
 801972e:	4637      	movge	r7, r6
 8019730:	4293      	cmp	r3, r2
 8019732:	4618      	mov	r0, r3
 8019734:	bfa8      	it	ge
 8019736:	4610      	movge	r0, r2
 8019738:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801973c:	88ed      	ldrh	r5, [r5, #6]
 801973e:	4466      	add	r6, ip
 8019740:	442a      	add	r2, r5
 8019742:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8019746:	88e5      	ldrh	r5, [r4, #6]
 8019748:	4461      	add	r1, ip
 801974a:	442b      	add	r3, r5
 801974c:	b236      	sxth	r6, r6
 801974e:	b209      	sxth	r1, r1
 8019750:	b212      	sxth	r2, r2
 8019752:	b21b      	sxth	r3, r3
 8019754:	428e      	cmp	r6, r1
 8019756:	bfac      	ite	ge
 8019758:	ebc7 0106 	rsbge	r1, r7, r6
 801975c:	ebc7 0101 	rsblt	r1, r7, r1
 8019760:	429a      	cmp	r2, r3
 8019762:	bfac      	ite	ge
 8019764:	ebc0 0202 	rsbge	r2, r0, r2
 8019768:	ebc0 0203 	rsblt	r2, r0, r3
 801976c:	8027      	strh	r7, [r4, #0]
 801976e:	8060      	strh	r0, [r4, #2]
 8019770:	80a1      	strh	r1, [r4, #4]
 8019772:	80e2      	strh	r2, [r4, #6]
 8019774:	e7d1      	b.n	801971a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08019778 <_ZN8touchgfx11Application11getInstanceEv>:
 8019778:	4b01      	ldr	r3, [pc, #4]	@ (8019780 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801977a:	6818      	ldr	r0, [r3, #0]
 801977c:	4770      	bx	lr
 801977e:	bf00      	nop
 8019780:	2005bad0 	.word	0x2005bad0

08019784 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8019784:	2300      	movs	r3, #0
 8019786:	b510      	push	{r4, lr}
 8019788:	4604      	mov	r4, r0
 801978a:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 801978e:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8019792:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 8019796:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 801979a:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 801979e:	429a      	cmp	r2, r3
 80197a0:	d90e      	bls.n	80197c0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 80197a2:	18e2      	adds	r2, r4, r3
 80197a4:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 80197a8:	b122      	cbz	r2, 80197b4 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 80197aa:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80197ae:	6803      	ldr	r3, [r0, #0]
 80197b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80197b2:	4798      	blx	r3
 80197b4:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 80197b8:	3301      	adds	r3, #1
 80197ba:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 80197be:	e7ea      	b.n	8019796 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 80197c0:	bd10      	pop	{r4, pc}

080197c2 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>:
 80197c2:	2200      	movs	r2, #0
 80197c4:	b530      	push	{r4, r5, lr}
 80197c6:	f8b0 5080 	ldrh.w	r5, [r0, #128]	@ 0x80
 80197ca:	b293      	uxth	r3, r2
 80197cc:	429d      	cmp	r5, r3
 80197ce:	d90e      	bls.n	80197ee <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 80197d0:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 80197d4:	428b      	cmp	r3, r1
 80197d6:	d10b      	bne.n	80197f0 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 80197d8:	1884      	adds	r4, r0, r2
 80197da:	f894 3084 	ldrb.w	r3, [r4, #132]	@ 0x84
 80197de:	b13b      	cbz	r3, 80197f0 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 80197e0:	3b01      	subs	r3, #1
 80197e2:	b2db      	uxtb	r3, r3
 80197e4:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
 80197e8:	b90b      	cbnz	r3, 80197ee <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 80197ea:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80197ee:	bd30      	pop	{r4, r5, pc}
 80197f0:	3201      	adds	r2, #1
 80197f2:	e7ea      	b.n	80197ca <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x8>

080197f4 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 80197f4:	2300      	movs	r3, #0
 80197f6:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 80197fa:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 80197fe:	30a4      	adds	r0, #164	@ 0xa4
 8019800:	f802 3b01 	strb.w	r3, [r2], #1
 8019804:	4282      	cmp	r2, r0
 8019806:	d1fb      	bne.n	8019800 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 8019808:	4770      	bx	lr
	...

0801980c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801980c:	b570      	push	{r4, r5, r6, lr}
 801980e:	4c0b      	ldr	r4, [pc, #44]	@ (801983c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8019810:	4605      	mov	r5, r0
 8019812:	6820      	ldr	r0, [r4, #0]
 8019814:	460e      	mov	r6, r1
 8019816:	b110      	cbz	r0, 801981e <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 8019818:	6803      	ldr	r3, [r0, #0]
 801981a:	695b      	ldr	r3, [r3, #20]
 801981c:	4798      	blx	r3
 801981e:	1d28      	adds	r0, r5, #4
 8019820:	f7ff ffe8 	bl	80197f4 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8019824:	6026      	str	r6, [r4, #0]
 8019826:	6833      	ldr	r3, [r6, #0]
 8019828:	4630      	mov	r0, r6
 801982a:	68db      	ldr	r3, [r3, #12]
 801982c:	4798      	blx	r3
 801982e:	682b      	ldr	r3, [r5, #0]
 8019830:	4628      	mov	r0, r5
 8019832:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019836:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019838:	4718      	bx	r3
 801983a:	bf00      	nop
 801983c:	2005bac0 	.word	0x2005bac0

08019840 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8019840:	2300      	movs	r3, #0
 8019842:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019844:	461a      	mov	r2, r3
 8019846:	461c      	mov	r4, r3
 8019848:	461d      	mov	r5, r3
 801984a:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 801984e:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 8019852:	459c      	cmp	ip, r3
 8019854:	dd1a      	ble.n	801988c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 8019856:	18c6      	adds	r6, r0, r3
 8019858:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 801985c:	b16e      	cbz	r6, 801987a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 801985e:	429a      	cmp	r2, r3
 8019860:	d008      	beq.n	8019874 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 8019862:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 8019866:	fa1f fe82 	uxth.w	lr, r2
 801986a:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 801986e:	1887      	adds	r7, r0, r2
 8019870:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 8019874:	3201      	adds	r2, #1
 8019876:	3301      	adds	r3, #1
 8019878:	e7eb      	b.n	8019852 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 801987a:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 801987e:	4299      	cmp	r1, r3
 8019880:	bfa8      	it	ge
 8019882:	3501      	addge	r5, #1
 8019884:	429e      	cmp	r6, r3
 8019886:	bfc8      	it	gt
 8019888:	3401      	addgt	r4, #1
 801988a:	e7f4      	b.n	8019876 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 801988c:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 8019890:	1b49      	subs	r1, r1, r5
 8019892:	1b1b      	subs	r3, r3, r4
 8019894:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 8019898:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 801989c:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 80198a0:	4293      	cmp	r3, r2
 80198a2:	dd03      	ble.n	80198ac <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 80198a4:	3b01      	subs	r3, #1
 80198a6:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 80198aa:	e7f7      	b.n	801989c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 80198ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080198b0 <_ZN8touchgfx11Application15handleTickEventEv>:
 80198b0:	b570      	push	{r4, r5, r6, lr}
 80198b2:	4d16      	ldr	r5, [pc, #88]	@ (801990c <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 80198b4:	4604      	mov	r4, r0
 80198b6:	6828      	ldr	r0, [r5, #0]
 80198b8:	b140      	cbz	r0, 80198cc <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80198ba:	7a03      	ldrb	r3, [r0, #8]
 80198bc:	b933      	cbnz	r3, 80198cc <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80198be:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 80198c2:	6803      	ldr	r3, [r0, #0]
 80198c4:	689b      	ldr	r3, [r3, #8]
 80198c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80198ca:	4718      	bx	r3
 80198cc:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 80198d0:	4e0f      	ldr	r6, [pc, #60]	@ (8019910 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 80198d2:	b973      	cbnz	r3, 80198f2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80198d4:	b168      	cbz	r0, 80198f2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80198d6:	7a03      	ldrb	r3, [r0, #8]
 80198d8:	b15b      	cbz	r3, 80198f2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80198da:	6830      	ldr	r0, [r6, #0]
 80198dc:	b110      	cbz	r0, 80198e4 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 80198de:	6803      	ldr	r3, [r0, #0]
 80198e0:	691b      	ldr	r3, [r3, #16]
 80198e2:	4798      	blx	r3
 80198e4:	6828      	ldr	r0, [r5, #0]
 80198e6:	6803      	ldr	r3, [r0, #0]
 80198e8:	68db      	ldr	r3, [r3, #12]
 80198ea:	4798      	blx	r3
 80198ec:	2301      	movs	r3, #1
 80198ee:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 80198f2:	3404      	adds	r4, #4
 80198f4:	4620      	mov	r0, r4
 80198f6:	f7ff ff45 	bl	8019784 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 80198fa:	4620      	mov	r0, r4
 80198fc:	f7ff ffa0 	bl	8019840 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8019900:	6830      	ldr	r0, [r6, #0]
 8019902:	b110      	cbz	r0, 801990a <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 8019904:	6803      	ldr	r3, [r0, #0]
 8019906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019908:	e7dd      	b.n	80198c6 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801990a:	bd70      	pop	{r4, r5, r6, pc}
 801990c:	2005bac4 	.word	0x2005bac4
 8019910:	2005bac0 	.word	0x2005bac0

08019914 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>:
 8019914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019916:	2300      	movs	r3, #0
 8019918:	4604      	mov	r4, r0
 801991a:	460d      	mov	r5, r1
 801991c:	f8b0 1080 	ldrh.w	r1, [r0, #128]	@ 0x80
 8019920:	4618      	mov	r0, r3
 8019922:	b29a      	uxth	r2, r3
 8019924:	4291      	cmp	r1, r2
 8019926:	d911      	bls.n	801994c <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x38>
 8019928:	f854 7023 	ldr.w	r7, [r4, r3, lsl #2]
 801992c:	18e6      	adds	r6, r4, r3
 801992e:	42af      	cmp	r7, r5
 8019930:	f896 2084 	ldrb.w	r2, [r6, #132]	@ 0x84
 8019934:	d105      	bne.n	8019942 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2e>
 8019936:	2aff      	cmp	r2, #255	@ 0xff
 8019938:	d002      	beq.n	8019940 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 801993a:	3201      	adds	r2, #1
 801993c:	f886 2084 	strb.w	r2, [r6, #132]	@ 0x84
 8019940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019942:	2a00      	cmp	r2, #0
 8019944:	bf08      	it	eq
 8019946:	2001      	moveq	r0, #1
 8019948:	3301      	adds	r3, #1
 801994a:	e7ea      	b.n	8019922 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0xe>
 801994c:	b120      	cbz	r0, 8019958 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x44>
 801994e:	2920      	cmp	r1, #32
 8019950:	d102      	bne.n	8019958 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x44>
 8019952:	4620      	mov	r0, r4
 8019954:	f7ff ff74 	bl	8019840 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8019958:	f8b4 3080 	ldrh.w	r3, [r4, #128]	@ 0x80
 801995c:	2b1f      	cmp	r3, #31
 801995e:	d8ef      	bhi.n	8019940 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 8019960:	2101      	movs	r1, #1
 8019962:	18e2      	adds	r2, r4, r3
 8019964:	f882 1084 	strb.w	r1, [r2, #132]	@ 0x84
 8019968:	185a      	adds	r2, r3, r1
 801996a:	f8a4 2080 	strh.w	r2, [r4, #128]	@ 0x80
 801996e:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8019972:	e7e5      	b.n	8019940 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>

08019974 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8019974:	4603      	mov	r3, r0
 8019976:	2200      	movs	r2, #0
 8019978:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 801997c:	801a      	strh	r2, [r3, #0]
 801997e:	805a      	strh	r2, [r3, #2]
 8019980:	809a      	strh	r2, [r3, #4]
 8019982:	80da      	strh	r2, [r3, #6]
 8019984:	3308      	adds	r3, #8
 8019986:	428b      	cmp	r3, r1
 8019988:	d1f8      	bne.n	801997c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801998a:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 801998e:	4770      	bx	lr

08019990 <_ZN8touchgfx11ApplicationC1Ev>:
 8019990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019992:	4606      	mov	r6, r0
 8019994:	4604      	mov	r4, r0
 8019996:	2500      	movs	r5, #0
 8019998:	4b1b      	ldr	r3, [pc, #108]	@ (8019a08 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801999a:	22a8      	movs	r2, #168	@ 0xa8
 801999c:	f846 3b04 	str.w	r3, [r6], #4
 80199a0:	2100      	movs	r1, #0
 80199a2:	4630      	mov	r0, r6
 80199a4:	f013 fb72 	bl	802d08c <memset>
 80199a8:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 80199ac:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 80199b0:	f7ff ffe0 	bl	8019974 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80199b4:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 80199b8:	f7ff ffdc 	bl	8019974 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80199bc:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 80199c0:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 80199c4:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 80199c8:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 80199cc:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 80199d0:	490e      	ldr	r1, [pc, #56]	@ (8019a0c <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 80199d2:	480f      	ldr	r0, [pc, #60]	@ (8019a10 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 80199d4:	f011 fae8 	bl	802afa8 <CRC_Lock>
 80199d8:	4f0e      	ldr	r7, [pc, #56]	@ (8019a14 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 80199da:	4b0f      	ldr	r3, [pc, #60]	@ (8019a18 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 80199dc:	b158      	cbz	r0, 80199f6 <_ZN8touchgfx11ApplicationC1Ev+0x66>
 80199de:	801d      	strh	r5, [r3, #0]
 80199e0:	2300      	movs	r3, #0
 80199e2:	4a0e      	ldr	r2, [pc, #56]	@ (8019a1c <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 80199e4:	4630      	mov	r0, r6
 80199e6:	6013      	str	r3, [r2, #0]
 80199e8:	4a0d      	ldr	r2, [pc, #52]	@ (8019a20 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 80199ea:	603b      	str	r3, [r7, #0]
 80199ec:	6013      	str	r3, [r2, #0]
 80199ee:	f7ff ff01 	bl	80197f4 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80199f2:	4620      	mov	r0, r4
 80199f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80199f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80199fa:	2002      	movs	r0, #2
 80199fc:	801a      	strh	r2, [r3, #0]
 80199fe:	6038      	str	r0, [r7, #0]
 8019a00:	f001 ff30 	bl	801b864 <_ZN8touchgfx6Screen4drawEv>
 8019a04:	e7ec      	b.n	80199e0 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 8019a06:	bf00      	nop
 8019a08:	0802fa7c 	.word	0x0802fa7c
 8019a0c:	b5e8b5cd 	.word	0xb5e8b5cd
 8019a10:	f407a5c2 	.word	0xf407a5c2
 8019a14:	2005bac0 	.word	0x2005bac0
 8019a18:	2000001c 	.word	0x2000001c
 8019a1c:	2005bad0 	.word	0x2005bad0
 8019a20:	2005bac4 	.word	0x2005bac4

08019a24 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8019a24:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 8019a28:	b510      	push	{r4, lr}
 8019a2a:	3b01      	subs	r3, #1
 8019a2c:	b29b      	uxth	r3, r3
 8019a2e:	428b      	cmp	r3, r1
 8019a30:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 8019a34:	d908      	bls.n	8019a48 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8019a36:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8019a3a:	681a      	ldr	r2, [r3, #0]
 8019a3c:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8019a40:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8019a44:	685a      	ldr	r2, [r3, #4]
 8019a46:	6062      	str	r2, [r4, #4]
 8019a48:	bd10      	pop	{r4, pc}
	...

08019a4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8019a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a50:	4b92      	ldr	r3, [pc, #584]	@ (8019c9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x250>)
 8019a52:	b08f      	sub	sp, #60	@ 0x3c
 8019a54:	ac0a      	add	r4, sp, #40	@ 0x28
 8019a56:	e884 0006 	stmia.w	r4, {r1, r2}
 8019a5a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019a5e:	4b90      	ldr	r3, [pc, #576]	@ (8019ca0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x254>)
 8019a60:	4683      	mov	fp, r0
 8019a62:	f9b3 1000 	ldrsh.w	r1, [r3]
 8019a66:	4620      	mov	r0, r4
 8019a68:	f7ff fdca 	bl	8019600 <_ZN8touchgfx4Rect10restrictToEss>
 8019a6c:	4620      	mov	r0, r4
 8019a6e:	f7fa fba2 	bl	80141b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019a72:	2800      	cmp	r0, #0
 8019a74:	d170      	bne.n	8019b58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 8019a76:	4b8b      	ldr	r3, [pc, #556]	@ (8019ca4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 8019a78:	681b      	ldr	r3, [r3, #0]
 8019a7a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8019a7e:	2b02      	cmp	r3, #2
 8019a80:	d06a      	beq.n	8019b58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 8019a82:	9403      	str	r4, [sp, #12]
 8019a84:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8019a88:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8019a8c:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8019a90:	35a4      	adds	r5, #164	@ 0xa4
 8019a92:	9301      	str	r3, [sp, #4]
 8019a94:	b15c      	cbz	r4, 8019aae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 8019a96:	4629      	mov	r1, r5
 8019a98:	9803      	ldr	r0, [sp, #12]
 8019a9a:	f7ff fe01 	bl	80196a0 <_ZNK8touchgfx4Rect8includesERKS0_>
 8019a9e:	3c01      	subs	r4, #1
 8019aa0:	b118      	cbz	r0, 8019aaa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 8019aa2:	b2a1      	uxth	r1, r4
 8019aa4:	9801      	ldr	r0, [sp, #4]
 8019aa6:	f7ff ffbd 	bl	8019a24 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019aaa:	3d08      	subs	r5, #8
 8019aac:	e7f2      	b.n	8019a94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 8019aae:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 8019ab2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8019ab6:	9302      	str	r3, [sp, #8]
 8019ab8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8019abc:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 8019ac0:	f8cd a010 	str.w	sl, [sp, #16]
 8019ac4:	9306      	str	r3, [sp, #24]
 8019ac6:	445c      	add	r4, fp
 8019ac8:	2500      	movs	r5, #0
 8019aca:	4626      	mov	r6, r4
 8019acc:	462f      	mov	r7, r5
 8019ace:	f8cd a014 	str.w	sl, [sp, #20]
 8019ad2:	9b05      	ldr	r3, [sp, #20]
 8019ad4:	2b00      	cmp	r3, #0
 8019ad6:	d073      	beq.n	8019bc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x174>
 8019ad8:	9903      	ldr	r1, [sp, #12]
 8019ada:	4630      	mov	r0, r6
 8019adc:	f7ff fd6e 	bl	80195bc <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019ae0:	b350      	cbz	r0, 8019b38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xec>
 8019ae2:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 8019ae6:	f9b6 c000 	ldrsh.w	ip, [r6]
 8019aea:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 8019aee:	45e6      	cmp	lr, ip
 8019af0:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8019af4:	db33      	blt.n	8019b5e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x112>
 8019af6:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8019afa:	88b3      	ldrh	r3, [r6, #4]
 8019afc:	4472      	add	r2, lr
 8019afe:	4463      	add	r3, ip
 8019b00:	b212      	sxth	r2, r2
 8019b02:	b21b      	sxth	r3, r3
 8019b04:	429a      	cmp	r2, r3
 8019b06:	dc2a      	bgt.n	8019b5e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x112>
 8019b08:	88f3      	ldrh	r3, [r6, #6]
 8019b0a:	fa1f f289 	uxth.w	r2, r9
 8019b0e:	4413      	add	r3, r2
 8019b10:	b29b      	uxth	r3, r3
 8019b12:	45c8      	cmp	r8, r9
 8019b14:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8019b18:	fa1f fc88 	uxth.w	ip, r8
 8019b1c:	fa0f fe83 	sxth.w	lr, r3
 8019b20:	db0f      	blt.n	8019b42 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf6>
 8019b22:	eba3 030c 	sub.w	r3, r3, ip
 8019b26:	1ac9      	subs	r1, r1, r3
 8019b28:	b209      	sxth	r1, r1
 8019b2a:	2900      	cmp	r1, #0
 8019b2c:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8019b30:	dd12      	ble.n	8019b58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 8019b32:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 8019b36:	4605      	mov	r5, r0
 8019b38:	9b05      	ldr	r3, [sp, #20]
 8019b3a:	3e08      	subs	r6, #8
 8019b3c:	3b01      	subs	r3, #1
 8019b3e:	9305      	str	r3, [sp, #20]
 8019b40:	e7c7      	b.n	8019ad2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x86>
 8019b42:	4461      	add	r1, ip
 8019b44:	b209      	sxth	r1, r1
 8019b46:	4571      	cmp	r1, lr
 8019b48:	dc38      	bgt.n	8019bbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 8019b4a:	eba2 020c 	sub.w	r2, r2, ip
 8019b4e:	b212      	sxth	r2, r2
 8019b50:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 8019b54:	2a00      	cmp	r2, #0
 8019b56:	dcee      	bgt.n	8019b36 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8019b58:	b00f      	add	sp, #60	@ 0x3c
 8019b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b5e:	45c8      	cmp	r8, r9
 8019b60:	db2c      	blt.n	8019bbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 8019b62:	88f3      	ldrh	r3, [r6, #6]
 8019b64:	4499      	add	r9, r3
 8019b66:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 8019b6a:	fa0f f989 	sxth.w	r9, r9
 8019b6e:	4498      	add	r8, r3
 8019b70:	fa0f f888 	sxth.w	r8, r8
 8019b74:	45c1      	cmp	r9, r8
 8019b76:	db21      	blt.n	8019bbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 8019b78:	88b3      	ldrh	r3, [r6, #4]
 8019b7a:	fa1f f28c 	uxth.w	r2, ip
 8019b7e:	4413      	add	r3, r2
 8019b80:	b29b      	uxth	r3, r3
 8019b82:	45e6      	cmp	lr, ip
 8019b84:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8019b88:	fa1f f88e 	uxth.w	r8, lr
 8019b8c:	fa0f f983 	sxth.w	r9, r3
 8019b90:	db0a      	blt.n	8019ba8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15c>
 8019b92:	eba3 0308 	sub.w	r3, r3, r8
 8019b96:	1ac9      	subs	r1, r1, r3
 8019b98:	b209      	sxth	r1, r1
 8019b9a:	2900      	cmp	r1, #0
 8019b9c:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 8019ba0:	ddda      	ble.n	8019b58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 8019ba2:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8019ba6:	e7c6      	b.n	8019b36 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8019ba8:	4441      	add	r1, r8
 8019baa:	b209      	sxth	r1, r1
 8019bac:	4549      	cmp	r1, r9
 8019bae:	dc05      	bgt.n	8019bbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 8019bb0:	eba2 0208 	sub.w	r2, r2, r8
 8019bb4:	b212      	sxth	r2, r2
 8019bb6:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 8019bba:	e7cb      	b.n	8019b54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x108>
 8019bbc:	4607      	mov	r7, r0
 8019bbe:	e7bb      	b.n	8019b38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xec>
 8019bc0:	2d00      	cmp	r5, #0
 8019bc2:	d181      	bne.n	8019ac8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7c>
 8019bc4:	2f00      	cmp	r7, #0
 8019bc6:	f000 81e0 	beq.w	8019f8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53e>
 8019bca:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 8019bce:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 8019bd2:	b2b3      	uxth	r3, r6
 8019bd4:	9305      	str	r3, [sp, #20]
 8019bd6:	9a05      	ldr	r2, [sp, #20]
 8019bd8:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8019bdc:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 8019be0:	4413      	add	r3, r2
 8019be2:	b2ba      	uxth	r2, r7
 8019be4:	4492      	add	sl, r2
 8019be6:	b29b      	uxth	r3, r3
 8019be8:	fa1f fa8a 	uxth.w	sl, sl
 8019bec:	fa0f f883 	sxth.w	r8, r3
 8019bf0:	fa0f f98a 	sxth.w	r9, sl
 8019bf4:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8019bf8:	9b04      	ldr	r3, [sp, #16]
 8019bfa:	2b00      	cmp	r3, #0
 8019bfc:	d054      	beq.n	8019ca8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>
 8019bfe:	9903      	ldr	r1, [sp, #12]
 8019c00:	4620      	mov	r0, r4
 8019c02:	f7ff fcdb 	bl	80195bc <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019c06:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8019c0a:	b1c0      	cbz	r0, 8019c3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8019c0c:	f9b4 e000 	ldrsh.w	lr, [r4]
 8019c10:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8019c14:	4576      	cmp	r6, lr
 8019c16:	dc22      	bgt.n	8019c5e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x212>
 8019c18:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8019c1c:	44f4      	add	ip, lr
 8019c1e:	fa0f fc8c 	sxth.w	ip, ip
 8019c22:	45e0      	cmp	r8, ip
 8019c24:	db1b      	blt.n	8019c5e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x212>
 8019c26:	428f      	cmp	r7, r1
 8019c28:	fa1f fc81 	uxth.w	ip, r1
 8019c2c:	88e1      	ldrh	r1, [r4, #6]
 8019c2e:	dc0d      	bgt.n	8019c4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x200>
 8019c30:	ebaa 0c0c 	sub.w	ip, sl, ip
 8019c34:	eba1 010c 	sub.w	r1, r1, ip
 8019c38:	f8a4 9002 	strh.w	r9, [r4, #2]
 8019c3c:	80e1      	strh	r1, [r4, #6]
 8019c3e:	4628      	mov	r0, r5
 8019c40:	9904      	ldr	r1, [sp, #16]
 8019c42:	3c08      	subs	r4, #8
 8019c44:	3901      	subs	r1, #1
 8019c46:	9104      	str	r1, [sp, #16]
 8019c48:	4605      	mov	r5, r0
 8019c4a:	e7d3      	b.n	8019bf4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a8>
 8019c4c:	4461      	add	r1, ip
 8019c4e:	b209      	sxth	r1, r1
 8019c50:	4549      	cmp	r1, r9
 8019c52:	dcf5      	bgt.n	8019c40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8019c54:	eba2 0c0c 	sub.w	ip, r2, ip
 8019c58:	f8a4 c006 	strh.w	ip, [r4, #6]
 8019c5c:	e7ef      	b.n	8019c3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8019c5e:	428f      	cmp	r7, r1
 8019c60:	dcee      	bgt.n	8019c40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8019c62:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8019c66:	4461      	add	r1, ip
 8019c68:	b209      	sxth	r1, r1
 8019c6a:	4589      	cmp	r9, r1
 8019c6c:	dbe8      	blt.n	8019c40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8019c6e:	4576      	cmp	r6, lr
 8019c70:	fa1f fc8e 	uxth.w	ip, lr
 8019c74:	88a1      	ldrh	r1, [r4, #4]
 8019c76:	dc07      	bgt.n	8019c88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x23c>
 8019c78:	eba3 0c0c 	sub.w	ip, r3, ip
 8019c7c:	eba1 010c 	sub.w	r1, r1, ip
 8019c80:	f8a4 8000 	strh.w	r8, [r4]
 8019c84:	80a1      	strh	r1, [r4, #4]
 8019c86:	e7da      	b.n	8019c3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8019c88:	4461      	add	r1, ip
 8019c8a:	b209      	sxth	r1, r1
 8019c8c:	4588      	cmp	r8, r1
 8019c8e:	dbd7      	blt.n	8019c40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8019c90:	9905      	ldr	r1, [sp, #20]
 8019c92:	eba1 0c0c 	sub.w	ip, r1, ip
 8019c96:	f8a4 c004 	strh.w	ip, [r4, #4]
 8019c9a:	e7d0      	b.n	8019c3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8019c9c:	2005ba72 	.word	0x2005ba72
 8019ca0:	2005ba70 	.word	0x2005ba70
 8019ca4:	2005ba7c 	.word	0x2005ba7c
 8019ca8:	2d00      	cmp	r5, #0
 8019caa:	f000 816e 	beq.w	8019f8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53e>
 8019cae:	9b06      	ldr	r3, [sp, #24]
 8019cb0:	445b      	add	r3, fp
 8019cb2:	461c      	mov	r4, r3
 8019cb4:	9b02      	ldr	r3, [sp, #8]
 8019cb6:	3301      	adds	r3, #1
 8019cb8:	f000 8167 	beq.w	8019f8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53e>
 8019cbc:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 8019cc0:	4629      	mov	r1, r5
 8019cc2:	9803      	ldr	r0, [sp, #12]
 8019cc4:	f7ff fcec 	bl	80196a0 <_ZNK8touchgfx4Rect8includesERKS0_>
 8019cc8:	b120      	cbz	r0, 8019cd4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x288>
 8019cca:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8019cce:	9801      	ldr	r0, [sp, #4]
 8019cd0:	f7ff fea8 	bl	8019a24 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019cd4:	9903      	ldr	r1, [sp, #12]
 8019cd6:	4628      	mov	r0, r5
 8019cd8:	f7ff fc70 	bl	80195bc <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019cdc:	2800      	cmp	r0, #0
 8019cde:	f000 809c 	beq.w	8019e1a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ce>
 8019ce2:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 8019ce6:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8019cea:	fa1f f189 	uxth.w	r1, r9
 8019cee:	eb01 0c03 	add.w	ip, r1, r3
 8019cf2:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8019cf6:	fa1f fa8c 	uxth.w	sl, ip
 8019cfa:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 8019cfe:	9309      	str	r3, [sp, #36]	@ 0x24
 8019d00:	b283      	uxth	r3, r0
 8019d02:	eb03 050c 	add.w	r5, r3, ip
 8019d06:	b2ad      	uxth	r5, r5
 8019d08:	9505      	str	r5, [sp, #20]
 8019d0a:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8019d0e:	4548      	cmp	r0, r9
 8019d10:	9504      	str	r5, [sp, #16]
 8019d12:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 8019d16:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 8019d1a:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 8019d1e:	f340 8099 	ble.w	8019e54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x408>
 8019d22:	1a5b      	subs	r3, r3, r1
 8019d24:	b29b      	uxth	r3, r3
 8019d26:	4596      	cmp	lr, r2
 8019d28:	fa0f f08a 	sxth.w	r0, sl
 8019d2c:	b21e      	sxth	r6, r3
 8019d2e:	dd2e      	ble.n	8019d8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x342>
 8019d30:	9f02      	ldr	r7, [sp, #8]
 8019d32:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 8019d36:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8019d3a:	9f04      	ldr	r7, [sp, #16]
 8019d3c:	fa1f fe8e 	uxth.w	lr, lr
 8019d40:	1a3f      	subs	r7, r7, r0
 8019d42:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 8019d46:	b292      	uxth	r2, r2
 8019d48:	ebae 0102 	sub.w	r1, lr, r2
 8019d4c:	44a6      	add	lr, r4
 8019d4e:	4402      	add	r2, r0
 8019d50:	b289      	uxth	r1, r1
 8019d52:	fa0f fe8e 	sxth.w	lr, lr
 8019d56:	b212      	sxth	r2, r2
 8019d58:	b20d      	sxth	r5, r1
 8019d5a:	ebae 0202 	sub.w	r2, lr, r2
 8019d5e:	436f      	muls	r7, r5
 8019d60:	4372      	muls	r2, r6
 8019d62:	4297      	cmp	r7, r2
 8019d64:	db09      	blt.n	8019d7a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32e>
 8019d66:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 8019d6a:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 8019d6e:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8019d72:	449c      	add	ip, r3
 8019d74:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8019d78:	e684      	b.n	8019a84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8019d7a:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 8019d7e:	4421      	add	r1, r4
 8019d80:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 8019d84:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8019d88:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8019d8c:	e67a      	b.n	8019a84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8019d8e:	9f04      	ldr	r7, [sp, #16]
 8019d90:	42b8      	cmp	r0, r7
 8019d92:	da27      	bge.n	8019de4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x398>
 8019d94:	9902      	ldr	r1, [sp, #8]
 8019d96:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 8019d9a:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8019d9e:	eb05 010e 	add.w	r1, r5, lr
 8019da2:	fa1f f881 	uxth.w	r8, r1
 8019da6:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 8019daa:	fa0f f988 	sxth.w	r9, r8
 8019dae:	4411      	add	r1, r2
 8019db0:	eba1 0108 	sub.w	r1, r1, r8
 8019db4:	b289      	uxth	r1, r1
 8019db6:	fa0f f881 	sxth.w	r8, r1
 8019dba:	eba2 020e 	sub.w	r2, r2, lr
 8019dbe:	1a3f      	subs	r7, r7, r0
 8019dc0:	4372      	muls	r2, r6
 8019dc2:	fb08 f707 	mul.w	r7, r8, r7
 8019dc6:	42ba      	cmp	r2, r7
 8019dc8:	dc06      	bgt.n	8019dd8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38c>
 8019dca:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 8019dce:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 8019dd2:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 8019dd6:	e7ca      	b.n	8019d6e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 8019dd8:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 8019ddc:	4429      	add	r1, r5
 8019dde:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8019de2:	e64f      	b.n	8019a84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8019de4:	9805      	ldr	r0, [sp, #20]
 8019de6:	2d06      	cmp	r5, #6
 8019de8:	ebaa 0000 	sub.w	r0, sl, r0
 8019dec:	b280      	uxth	r0, r0
 8019dee:	fa0f fe80 	sxth.w	lr, r0
 8019df2:	d817      	bhi.n	8019e24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d8>
 8019df4:	9b04      	ldr	r3, [sp, #16]
 8019df6:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 8019dfa:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8019dfe:	1c6b      	adds	r3, r5, #1
 8019e00:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 8019e04:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8019e08:	9b01      	ldr	r3, [sp, #4]
 8019e0a:	9801      	ldr	r0, [sp, #4]
 8019e0c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8019e10:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8019e14:	805a      	strh	r2, [r3, #2]
 8019e16:	809e      	strh	r6, [r3, #4]
 8019e18:	80d9      	strh	r1, [r3, #6]
 8019e1a:	9b02      	ldr	r3, [sp, #8]
 8019e1c:	3c08      	subs	r4, #8
 8019e1e:	3b01      	subs	r3, #1
 8019e20:	9302      	str	r3, [sp, #8]
 8019e22:	e747      	b.n	8019cb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x268>
 8019e24:	9a02      	ldr	r2, [sp, #8]
 8019e26:	45b6      	cmp	lr, r6
 8019e28:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8019e2c:	db0d      	blt.n	8019e4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fe>
 8019e2e:	449c      	add	ip, r3
 8019e30:	fa1f fc8c 	uxth.w	ip, ip
 8019e34:	445a      	add	r2, fp
 8019e36:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8019e3a:	448c      	add	ip, r1
 8019e3c:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8019e40:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 8019e44:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 8019e48:	e61c      	b.n	8019a84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8019e4a:	445a      	add	r2, fp
 8019e4c:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 8019e50:	4484      	add	ip, r0
 8019e52:	e78f      	b.n	8019d74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 8019e54:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 8019e58:	fa1f f18e 	uxth.w	r1, lr
 8019e5c:	eb01 0806 	add.w	r8, r1, r6
 8019e60:	b293      	uxth	r3, r2
 8019e62:	fa1f f888 	uxth.w	r8, r8
 8019e66:	9306      	str	r3, [sp, #24]
 8019e68:	fa0f f388 	sxth.w	r3, r8
 8019e6c:	9307      	str	r3, [sp, #28]
 8019e6e:	9f06      	ldr	r7, [sp, #24]
 8019e70:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 8019e74:	4596      	cmp	lr, r2
 8019e76:	443b      	add	r3, r7
 8019e78:	b29b      	uxth	r3, r3
 8019e7a:	9308      	str	r3, [sp, #32]
 8019e7c:	da24      	bge.n	8019ec8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 8019e7e:	9905      	ldr	r1, [sp, #20]
 8019e80:	eba3 0308 	sub.w	r3, r3, r8
 8019e84:	ebaa 0401 	sub.w	r4, sl, r1
 8019e88:	b2a4      	uxth	r4, r4
 8019e8a:	b29b      	uxth	r3, r3
 8019e8c:	b225      	sxth	r5, r4
 8019e8e:	b219      	sxth	r1, r3
 8019e90:	eba2 020e 	sub.w	r2, r2, lr
 8019e94:	eba9 0000 	sub.w	r0, r9, r0
 8019e98:	436a      	muls	r2, r5
 8019e9a:	4348      	muls	r0, r1
 8019e9c:	4282      	cmp	r2, r0
 8019e9e:	9a02      	ldr	r2, [sp, #8]
 8019ea0:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8019ea4:	445a      	add	r2, fp
 8019ea6:	dc06      	bgt.n	8019eb6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 8019ea8:	9b07      	ldr	r3, [sp, #28]
 8019eaa:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 8019eae:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 8019eb2:	44a4      	add	ip, r4
 8019eb4:	e75e      	b.n	8019d74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 8019eb6:	9904      	ldr	r1, [sp, #16]
 8019eb8:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 8019ebc:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 8019ec0:	4433      	add	r3, r6
 8019ec2:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8019ec6:	e5dd      	b.n	8019a84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8019ec8:	9f06      	ldr	r7, [sp, #24]
 8019eca:	9b04      	ldr	r3, [sp, #16]
 8019ecc:	1bc9      	subs	r1, r1, r7
 8019ece:	fa0f f78a 	sxth.w	r7, sl
 8019ed2:	b289      	uxth	r1, r1
 8019ed4:	429f      	cmp	r7, r3
 8019ed6:	fa0f fe81 	sxth.w	lr, r1
 8019eda:	dd24      	ble.n	8019f26 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4da>
 8019edc:	9a05      	ldr	r2, [sp, #20]
 8019ede:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8019ee2:	ebaa 0202 	sub.w	r2, sl, r2
 8019ee6:	9d07      	ldr	r5, [sp, #28]
 8019ee8:	b292      	uxth	r2, r2
 8019eea:	eba5 0a03 	sub.w	sl, r5, r3
 8019eee:	b214      	sxth	r4, r2
 8019ef0:	eba9 0000 	sub.w	r0, r9, r0
 8019ef4:	fb0e f000 	mul.w	r0, lr, r0
 8019ef8:	fb04 fa0a 	mul.w	sl, r4, sl
 8019efc:	9b02      	ldr	r3, [sp, #8]
 8019efe:	4550      	cmp	r0, sl
 8019f00:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8019f04:	445b      	add	r3, fp
 8019f06:	db03      	blt.n	8019f10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c4>
 8019f08:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 8019f0c:	4494      	add	ip, r2
 8019f0e:	e731      	b.n	8019d74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 8019f10:	9a04      	ldr	r2, [sp, #16]
 8019f12:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 8019f16:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8019f1a:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 8019f1e:	4431      	add	r1, r6
 8019f20:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8019f24:	e75b      	b.n	8019dde <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x392>
 8019f26:	9b08      	ldr	r3, [sp, #32]
 8019f28:	2d06      	cmp	r5, #6
 8019f2a:	eba3 0308 	sub.w	r3, r3, r8
 8019f2e:	b29b      	uxth	r3, r3
 8019f30:	b218      	sxth	r0, r3
 8019f32:	d813      	bhi.n	8019f5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x510>
 8019f34:	9b07      	ldr	r3, [sp, #28]
 8019f36:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 8019f3a:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 8019f3e:	1c6b      	adds	r3, r5, #1
 8019f40:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8019f44:	9b01      	ldr	r3, [sp, #4]
 8019f46:	9901      	ldr	r1, [sp, #4]
 8019f48:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8019f4c:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 8019f50:	805a      	strh	r2, [r3, #2]
 8019f52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019f54:	f8a3 e006 	strh.w	lr, [r3, #6]
 8019f58:	809a      	strh	r2, [r3, #4]
 8019f5a:	e75e      	b.n	8019e1a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ce>
 8019f5c:	9c02      	ldr	r4, [sp, #8]
 8019f5e:	4570      	cmp	r0, lr
 8019f60:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8019f64:	db0d      	blt.n	8019f82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x536>
 8019f66:	4431      	add	r1, r6
 8019f68:	9b06      	ldr	r3, [sp, #24]
 8019f6a:	b289      	uxth	r1, r1
 8019f6c:	445c      	add	r4, fp
 8019f6e:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8019f72:	4419      	add	r1, r3
 8019f74:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8019f78:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 8019f7c:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 8019f80:	e580      	b.n	8019a84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8019f82:	445c      	add	r4, fp
 8019f84:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 8019f88:	e79a      	b.n	8019ec0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 8019f8a:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8019f8e:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8019f92:	1e65      	subs	r5, r4, #1
 8019f94:	b2ad      	uxth	r5, r5
 8019f96:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8019f9a:	42b5      	cmp	r5, r6
 8019f9c:	d044      	beq.n	801a028 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5dc>
 8019f9e:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8019fa2:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 8019fa6:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 8019faa:	4282      	cmp	r2, r0
 8019fac:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 8019fb0:	d11f      	bne.n	8019ff2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a6>
 8019fb2:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 8019fb6:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8019fba:	459c      	cmp	ip, r3
 8019fbc:	d119      	bne.n	8019ff2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a6>
 8019fbe:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 8019fc2:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8019fc6:	19d8      	adds	r0, r3, r7
 8019fc8:	b200      	sxth	r0, r0
 8019fca:	4288      	cmp	r0, r1
 8019fcc:	d109      	bne.n	8019fe2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x596>
 8019fce:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 8019fd2:	4413      	add	r3, r2
 8019fd4:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 8019fd8:	4629      	mov	r1, r5
 8019fda:	9801      	ldr	r0, [sp, #4]
 8019fdc:	f7ff fd22 	bl	8019a24 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019fe0:	e003      	b.n	8019fea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59e>
 8019fe2:	4411      	add	r1, r2
 8019fe4:	b209      	sxth	r1, r1
 8019fe6:	42b9      	cmp	r1, r7
 8019fe8:	d0f3      	beq.n	8019fd2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x586>
 8019fea:	3d01      	subs	r5, #1
 8019fec:	b2ad      	uxth	r5, r5
 8019fee:	3c08      	subs	r4, #8
 8019ff0:	e7d3      	b.n	8019f9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54e>
 8019ff2:	42b9      	cmp	r1, r7
 8019ff4:	d1f9      	bne.n	8019fea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59e>
 8019ff6:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 8019ffa:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8019ffe:	4299      	cmp	r1, r3
 801a000:	d1f3      	bne.n	8019fea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59e>
 801a002:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 801a006:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 801a00a:	181f      	adds	r7, r3, r0
 801a00c:	b23f      	sxth	r7, r7
 801a00e:	42ba      	cmp	r2, r7
 801a010:	d105      	bne.n	801a01e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5d2>
 801a012:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 801a016:	440b      	add	r3, r1
 801a018:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801a01c:	e7dc      	b.n	8019fd8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801a01e:	440a      	add	r2, r1
 801a020:	b212      	sxth	r2, r2
 801a022:	4290      	cmp	r0, r2
 801a024:	d1e1      	bne.n	8019fea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59e>
 801a026:	e7f6      	b.n	801a016 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 801a028:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 801a02c:	2e07      	cmp	r6, #7
 801a02e:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 801a032:	d812      	bhi.n	801a05a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x60e>
 801a034:	1c75      	adds	r5, r6, #1
 801a036:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 801a03a:	9d01      	ldr	r5, [sp, #4]
 801a03c:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 801a040:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 801a044:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801a048:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 801a04c:	442c      	add	r4, r5
 801a04e:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 801a052:	8061      	strh	r1, [r4, #2]
 801a054:	80a2      	strh	r2, [r4, #4]
 801a056:	80e3      	strh	r3, [r4, #6]
 801a058:	e57e      	b.n	8019b58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 801a05a:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 801a05e:	f04f 37ff 	mov.w	r7, #4294967295
 801a062:	2500      	movs	r5, #0
 801a064:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 801a068:	3e01      	subs	r6, #1
 801a06a:	445c      	add	r4, fp
 801a06c:	9305      	str	r3, [sp, #20]
 801a06e:	1e72      	subs	r2, r6, #1
 801a070:	4691      	mov	r9, r2
 801a072:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801a076:	9302      	str	r3, [sp, #8]
 801a078:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 801a07c:	9304      	str	r3, [sp, #16]
 801a07e:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 801a082:	f1b9 3fff 	cmp.w	r9, #4294967295
 801a086:	bf16      	itet	ne
 801a088:	9905      	ldrne	r1, [sp, #20]
 801a08a:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801a08e:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 801a092:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801a096:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801a09a:	6818      	ldr	r0, [r3, #0]
 801a09c:	fb18 f801 	smulbb	r8, r8, r1
 801a0a0:	6859      	ldr	r1, [r3, #4]
 801a0a2:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801a0a6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801a0aa:	4671      	mov	r1, lr
 801a0ac:	a80c      	add	r0, sp, #48	@ 0x30
 801a0ae:	9207      	str	r2, [sp, #28]
 801a0b0:	9306      	str	r3, [sp, #24]
 801a0b2:	f7ff fb1b 	bl	80196ec <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a0b6:	f04f 0c08 	mov.w	ip, #8
 801a0ba:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 801a0be:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 801a0c2:	9b04      	ldr	r3, [sp, #16]
 801a0c4:	9a02      	ldr	r2, [sp, #8]
 801a0c6:	fb10 f001 	smulbb	r0, r0, r1
 801a0ca:	fb02 8803 	mla	r8, r2, r3, r8
 801a0ce:	eba0 0108 	sub.w	r1, r0, r8
 801a0d2:	fb90 f0fc 	sdiv	r0, r0, ip
 801a0d6:	4288      	cmp	r0, r1
 801a0d8:	dc20      	bgt.n	801a11c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6d0>
 801a0da:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801a0de:	4551      	cmp	r1, sl
 801a0e0:	da03      	bge.n	801a0ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x69e>
 801a0e2:	b1d9      	cbz	r1, 801a11c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6d0>
 801a0e4:	468a      	mov	sl, r1
 801a0e6:	464f      	mov	r7, r9
 801a0e8:	4635      	mov	r5, r6
 801a0ea:	f109 39ff 	add.w	r9, r9, #4294967295
 801a0ee:	f119 0f02 	cmn.w	r9, #2
 801a0f2:	d1c6      	bne.n	801a082 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x636>
 801a0f4:	4616      	mov	r6, r2
 801a0f6:	3201      	adds	r2, #1
 801a0f8:	f1a4 0408 	sub.w	r4, r4, #8
 801a0fc:	d1b7      	bne.n	801a06e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x622>
 801a0fe:	9b01      	ldr	r3, [sp, #4]
 801a100:	b2ac      	uxth	r4, r5
 801a102:	00ed      	lsls	r5, r5, #3
 801a104:	1958      	adds	r0, r3, r5
 801a106:	1c7b      	adds	r3, r7, #1
 801a108:	d10b      	bne.n	801a122 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6d6>
 801a10a:	4601      	mov	r1, r0
 801a10c:	9803      	ldr	r0, [sp, #12]
 801a10e:	f7ff faed 	bl	80196ec <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a112:	4621      	mov	r1, r4
 801a114:	9801      	ldr	r0, [sp, #4]
 801a116:	f7ff fc85 	bl	8019a24 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a11a:	e4b3      	b.n	8019a84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 801a11c:	464f      	mov	r7, r9
 801a11e:	4635      	mov	r5, r6
 801a120:	e7ed      	b.n	801a0fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b2>
 801a122:	9b01      	ldr	r3, [sp, #4]
 801a124:	00ff      	lsls	r7, r7, #3
 801a126:	19d9      	adds	r1, r3, r7
 801a128:	f7ff fae0 	bl	80196ec <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a12c:	9b03      	ldr	r3, [sp, #12]
 801a12e:	445f      	add	r7, fp
 801a130:	cb03      	ldmia	r3!, {r0, r1}
 801a132:	445d      	add	r5, fp
 801a134:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 801a138:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 801a13c:	f855 0fac 	ldr.w	r0, [r5, #172]!
 801a140:	9b03      	ldr	r3, [sp, #12]
 801a142:	6869      	ldr	r1, [r5, #4]
 801a144:	c303      	stmia	r3!, {r0, r1}
 801a146:	e7e4      	b.n	801a112 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c6>

0801a148 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801a148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a14c:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 801a150:	b0a1      	sub	sp, #132	@ 0x84
 801a152:	4604      	mov	r4, r0
 801a154:	4630      	mov	r0, r6
 801a156:	f7fa f82e 	bl	80141b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a15a:	4605      	mov	r5, r0
 801a15c:	b948      	cbnz	r0, 801a172 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 801a15e:	e896 0006 	ldmia.w	r6, {r1, r2}
 801a162:	6823      	ldr	r3, [r4, #0]
 801a164:	4620      	mov	r0, r4
 801a166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a168:	4798      	blx	r3
 801a16a:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 801a16e:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 801a172:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801a176:	2b00      	cmp	r3, #0
 801a178:	d149      	bne.n	801a20e <_ZN8touchgfx11Application15drawCachedAreasEv+0xc6>
 801a17a:	4bb2      	ldr	r3, [pc, #712]	@ (801a444 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2fc>)
 801a17c:	681b      	ldr	r3, [r3, #0]
 801a17e:	f893 7048 	ldrb.w	r7, [r3, #72]	@ 0x48
 801a182:	1ebb      	subs	r3, r7, #2
 801a184:	425f      	negs	r7, r3
 801a186:	415f      	adcs	r7, r3
 801a188:	4baf      	ldr	r3, [pc, #700]	@ (801a448 <_ZN8touchgfx11Application15drawCachedAreasEv+0x300>)
 801a18a:	681b      	ldr	r3, [r3, #0]
 801a18c:	2b00      	cmp	r3, #0
 801a18e:	d040      	beq.n	801a212 <_ZN8touchgfx11Application15drawCachedAreasEv+0xca>
 801a190:	4dae      	ldr	r5, [pc, #696]	@ (801a44c <_ZN8touchgfx11Application15drawCachedAreasEv+0x304>)
 801a192:	4628      	mov	r0, r5
 801a194:	f7fa f80f 	bl	80141b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a198:	4606      	mov	r6, r0
 801a19a:	2800      	cmp	r0, #0
 801a19c:	d139      	bne.n	801a212 <_ZN8touchgfx11Application15drawCachedAreasEv+0xca>
 801a19e:	4628      	mov	r0, r5
 801a1a0:	f7ff f942 	bl	8019428 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801a1a4:	6823      	ldr	r3, [r4, #0]
 801a1a6:	6829      	ldr	r1, [r5, #0]
 801a1a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a1aa:	686a      	ldr	r2, [r5, #4]
 801a1ac:	4620      	mov	r0, r4
 801a1ae:	4798      	blx	r3
 801a1b0:	802e      	strh	r6, [r5, #0]
 801a1b2:	806e      	strh	r6, [r5, #2]
 801a1b4:	80ae      	strh	r6, [r5, #4]
 801a1b6:	80ee      	strh	r6, [r5, #6]
 801a1b8:	af0f      	add	r7, sp, #60	@ 0x3c
 801a1ba:	4ea5      	ldr	r6, [pc, #660]	@ (801a450 <_ZN8touchgfx11Application15drawCachedAreasEv+0x308>)
 801a1bc:	4638      	mov	r0, r7
 801a1be:	f7ff fbd9 	bl	8019974 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801a1c2:	8835      	ldrh	r5, [r6, #0]
 801a1c4:	f8b4 c0ec 	ldrh.w	ip, [r4, #236]	@ 0xec
 801a1c8:	462b      	mov	r3, r5
 801a1ca:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 801a1ce:	4563      	cmp	r3, ip
 801a1d0:	d224      	bcs.n	801a21c <_ZN8touchgfx11Application15drawCachedAreasEv+0xd4>
 801a1d2:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 801a1d6:	2907      	cmp	r1, #7
 801a1d8:	d816      	bhi.n	801a208 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801a1da:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801a1de:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 801a1e2:	f9b2 8004 	ldrsh.w	r8, [r2, #4]
 801a1e6:	f9b2 e006 	ldrsh.w	lr, [r2, #6]
 801a1ea:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 801a1ee:	1c4a      	adds	r2, r1, #1
 801a1f0:	f8ad 207c 	strh.w	r2, [sp, #124]	@ 0x7c
 801a1f4:	eb07 02c1 	add.w	r2, r7, r1, lsl #3
 801a1f8:	f827 9031 	strh.w	r9, [r7, r1, lsl #3]
 801a1fc:	f8a2 a002 	strh.w	sl, [r2, #2]
 801a200:	f8a2 8004 	strh.w	r8, [r2, #4]
 801a204:	f8a2 e006 	strh.w	lr, [r2, #6]
 801a208:	3301      	adds	r3, #1
 801a20a:	b29b      	uxth	r3, r3
 801a20c:	e7df      	b.n	801a1ce <_ZN8touchgfx11Application15drawCachedAreasEv+0x86>
 801a20e:	2701      	movs	r7, #1
 801a210:	e7ba      	b.n	801a188 <_ZN8touchgfx11Application15drawCachedAreasEv+0x40>
 801a212:	2f00      	cmp	r7, #0
 801a214:	d1d0      	bne.n	801a1b8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x70>
 801a216:	b021      	add	sp, #132	@ 0x84
 801a218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a21c:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 801a220:	42ab      	cmp	r3, r5
 801a222:	d90c      	bls.n	801a23e <_ZN8touchgfx11Application15drawCachedAreasEv+0xf6>
 801a224:	6822      	ldr	r2, [r4, #0]
 801a226:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801a22a:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 801a22c:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 801a230:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 801a234:	4620      	mov	r0, r4
 801a236:	3501      	adds	r5, #1
 801a238:	47b8      	blx	r7
 801a23a:	b2ad      	uxth	r5, r5
 801a23c:	e7ee      	b.n	801a21c <_ZN8touchgfx11Application15drawCachedAreasEv+0xd4>
 801a23e:	4d81      	ldr	r5, [pc, #516]	@ (801a444 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2fc>)
 801a240:	6828      	ldr	r0, [r5, #0]
 801a242:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 801a246:	2b01      	cmp	r3, #1
 801a248:	f040 813d 	bne.w	801a4c6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x37e>
 801a24c:	4a81      	ldr	r2, [pc, #516]	@ (801a454 <_ZN8touchgfx11Application15drawCachedAreasEv+0x30c>)
 801a24e:	8833      	ldrh	r3, [r6, #0]
 801a250:	7812      	ldrb	r2, [r2, #0]
 801a252:	f8b4 00ec 	ldrh.w	r0, [r4, #236]	@ 0xec
 801a256:	2a01      	cmp	r2, #1
 801a258:	d014      	beq.n	801a284 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 801a25a:	f04f 0900 	mov.w	r9, #0
 801a25e:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 801a262:	32ae      	adds	r2, #174	@ 0xae
 801a264:	4283      	cmp	r3, r0
 801a266:	f102 0208 	add.w	r2, r2, #8
 801a26a:	f280 8083 	bge.w	801a374 <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 801a26e:	f832 1c04 	ldrh.w	r1, [r2, #-4]
 801a272:	f832 7c08 	ldrh.w	r7, [r2, #-8]
 801a276:	3301      	adds	r3, #1
 801a278:	4439      	add	r1, r7
 801a27a:	b209      	sxth	r1, r1
 801a27c:	4589      	cmp	r9, r1
 801a27e:	bfb8      	it	lt
 801a280:	4689      	movlt	r9, r1
 801a282:	e7ef      	b.n	801a264 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11c>
 801a284:	4f74      	ldr	r7, [pc, #464]	@ (801a458 <_ZN8touchgfx11Application15drawCachedAreasEv+0x310>)
 801a286:	883a      	ldrh	r2, [r7, #0]
 801a288:	4693      	mov	fp, r2
 801a28a:	4283      	cmp	r3, r0
 801a28c:	da08      	bge.n	801a2a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x158>
 801a28e:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
 801a292:	f9b1 10ac 	ldrsh.w	r1, [r1, #172]	@ 0xac
 801a296:	3301      	adds	r3, #1
 801a298:	458b      	cmp	fp, r1
 801a29a:	bfa8      	it	ge
 801a29c:	468b      	movge	fp, r1
 801a29e:	e7f4      	b.n	801a28a <_ZN8touchgfx11Application15drawCachedAreasEv+0x142>
 801a2a0:	2300      	movs	r3, #0
 801a2a2:	2a0f      	cmp	r2, #15
 801a2a4:	bf98      	it	ls
 801a2a6:	f04f 0801 	movls.w	r8, #1
 801a2aa:	f8df 91b0 	ldr.w	r9, [pc, #432]	@ 801a45c <_ZN8touchgfx11Application15drawCachedAreasEv+0x314>
 801a2ae:	bf88      	it	hi
 801a2b0:	ea4f 08d2 	movhi.w	r8, r2, lsr #3
 801a2b4:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 801a2b8:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801a2bc:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 801a2c0:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801a2c4:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801a2c8:	6828      	ldr	r0, [r5, #0]
 801a2ca:	455b      	cmp	r3, fp
 801a2cc:	f340 80c8 	ble.w	801a460 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 801a2d0:	6803      	ldr	r3, [r0, #0]
 801a2d2:	f8b7 a000 	ldrh.w	sl, [r7]
 801a2d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801a2da:	4798      	blx	r3
 801a2dc:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 801a2e0:	ebaa 0000 	sub.w	r0, sl, r0
 801a2e4:	682b      	ldr	r3, [r5, #0]
 801a2e6:	b280      	uxth	r0, r0
 801a2e8:	ebac 0e08 	sub.w	lr, ip, r8
 801a2ec:	4570      	cmp	r0, lr
 801a2ee:	f893 107c 	ldrb.w	r1, [r3, #124]	@ 0x7c
 801a2f2:	f893 206a 	ldrb.w	r2, [r3, #106]	@ 0x6a
 801a2f6:	dd05      	ble.n	801a304 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1bc>
 801a2f8:	4558      	cmp	r0, fp
 801a2fa:	dd03      	ble.n	801a304 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1bc>
 801a2fc:	b901      	cbnz	r1, 801a300 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b8>
 801a2fe:	b392      	cbz	r2, 801a366 <_ZN8touchgfx11Application15drawCachedAreasEv+0x21e>
 801a300:	4658      	mov	r0, fp
 801a302:	e006      	b.n	801a312 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1ca>
 801a304:	2900      	cmp	r1, #0
 801a306:	d1fb      	bne.n	801a300 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b8>
 801a308:	2a00      	cmp	r2, #0
 801a30a:	d1f9      	bne.n	801a300 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b8>
 801a30c:	4558      	cmp	r0, fp
 801a30e:	bfb8      	it	lt
 801a310:	4658      	movlt	r0, fp
 801a312:	2200      	movs	r2, #0
 801a314:	f9b9 3000 	ldrsh.w	r3, [r9]
 801a318:	f8ad 002c 	strh.w	r0, [sp, #44]	@ 0x2c
 801a31c:	f8b6 a000 	ldrh.w	sl, [r6]
 801a320:	ebac 0000 	sub.w	r0, ip, r0
 801a324:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 801a328:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801a32c:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801a330:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801a334:	4553      	cmp	r3, sl
 801a336:	ddc5      	ble.n	801a2c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x17c>
 801a338:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801a33c:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801a340:	ab0d      	add	r3, sp, #52	@ 0x34
 801a342:	6851      	ldr	r1, [r2, #4]
 801a344:	c303      	stmia	r3!, {r0, r1}
 801a346:	a80d      	add	r0, sp, #52	@ 0x34
 801a348:	a90b      	add	r1, sp, #44	@ 0x2c
 801a34a:	f7f9 fef1 	bl	8014130 <_ZN8touchgfx4RectaNERKS0_>
 801a34e:	a80d      	add	r0, sp, #52	@ 0x34
 801a350:	f7f9 ff31 	bl	80141b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a354:	b920      	cbnz	r0, 801a360 <_ZN8touchgfx11Application15drawCachedAreasEv+0x218>
 801a356:	6823      	ldr	r3, [r4, #0]
 801a358:	a90d      	add	r1, sp, #52	@ 0x34
 801a35a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a35c:	4620      	mov	r0, r4
 801a35e:	4798      	blx	r3
 801a360:	f10a 0a01 	add.w	sl, sl, #1
 801a364:	e7e4      	b.n	801a330 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1e8>
 801a366:	681a      	ldr	r2, [r3, #0]
 801a368:	2101      	movs	r1, #1
 801a36a:	f8d2 20a4 	ldr.w	r2, [r2, #164]	@ 0xa4
 801a36e:	4618      	mov	r0, r3
 801a370:	4790      	blx	r2
 801a372:	e7a7      	b.n	801a2c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x17c>
 801a374:	4b39      	ldr	r3, [pc, #228]	@ (801a45c <_ZN8touchgfx11Application15drawCachedAreasEv+0x314>)
 801a376:	f8df 80e0 	ldr.w	r8, [pc, #224]	@ 801a458 <_ZN8touchgfx11Application15drawCachedAreasEv+0x310>
 801a37a:	881f      	ldrh	r7, [r3, #0]
 801a37c:	2300      	movs	r3, #0
 801a37e:	2f0f      	cmp	r7, #15
 801a380:	bf98      	it	ls
 801a382:	2701      	movls	r7, #1
 801a384:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
 801a388:	bf88      	it	hi
 801a38a:	08ff      	lsrhi	r7, r7, #3
 801a38c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801a390:	f8bd 202e 	ldrh.w	r2, [sp, #46]	@ 0x2e
 801a394:	6828      	ldr	r0, [r5, #0]
 801a396:	4413      	add	r3, r2
 801a398:	b21b      	sxth	r3, r3
 801a39a:	454b      	cmp	r3, r9
 801a39c:	da60      	bge.n	801a460 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 801a39e:	6803      	ldr	r3, [r0, #0]
 801a3a0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801a3a4:	4798      	blx	r3
 801a3a6:	f8bd e02e 	ldrh.w	lr, [sp, #46]	@ 0x2e
 801a3aa:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801a3ae:	682a      	ldr	r2, [r5, #0]
 801a3b0:	4473      	add	r3, lr
 801a3b2:	b21b      	sxth	r3, r3
 801a3b4:	eb03 0e07 	add.w	lr, r3, r7
 801a3b8:	4570      	cmp	r0, lr
 801a3ba:	f892 c07c 	ldrb.w	ip, [r2, #124]	@ 0x7c
 801a3be:	f892 106a 	ldrb.w	r1, [r2, #106]	@ 0x6a
 801a3c2:	da0d      	bge.n	801a3e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x298>
 801a3c4:	4548      	cmp	r0, r9
 801a3c6:	da0b      	bge.n	801a3e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x298>
 801a3c8:	f1bc 0f00 	cmp.w	ip, #0
 801a3cc:	d138      	bne.n	801a440 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f8>
 801a3ce:	2900      	cmp	r1, #0
 801a3d0:	d136      	bne.n	801a440 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f8>
 801a3d2:	6813      	ldr	r3, [r2, #0]
 801a3d4:	2101      	movs	r1, #1
 801a3d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801a3da:	4610      	mov	r0, r2
 801a3dc:	4798      	blx	r3
 801a3de:	e7d5      	b.n	801a38c <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 801a3e0:	f1bc 0f00 	cmp.w	ip, #0
 801a3e4:	d12c      	bne.n	801a440 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f8>
 801a3e6:	bb59      	cbnz	r1, 801a440 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f8>
 801a3e8:	4548      	cmp	r0, r9
 801a3ea:	bfa8      	it	ge
 801a3ec:	4648      	movge	r0, r9
 801a3ee:	2100      	movs	r1, #0
 801a3f0:	f9b8 2000 	ldrsh.w	r2, [r8]
 801a3f4:	1ac0      	subs	r0, r0, r3
 801a3f6:	f8b6 a000 	ldrh.w	sl, [r6]
 801a3fa:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 801a3fe:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801a402:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801a406:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 801a40a:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801a40e:	4553      	cmp	r3, sl
 801a410:	ddbc      	ble.n	801a38c <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 801a412:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801a416:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801a41a:	ab0d      	add	r3, sp, #52	@ 0x34
 801a41c:	6851      	ldr	r1, [r2, #4]
 801a41e:	c303      	stmia	r3!, {r0, r1}
 801a420:	a80d      	add	r0, sp, #52	@ 0x34
 801a422:	a90b      	add	r1, sp, #44	@ 0x2c
 801a424:	f7f9 fe84 	bl	8014130 <_ZN8touchgfx4RectaNERKS0_>
 801a428:	a80d      	add	r0, sp, #52	@ 0x34
 801a42a:	f7f9 fec4 	bl	80141b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a42e:	b920      	cbnz	r0, 801a43a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 801a430:	6823      	ldr	r3, [r4, #0]
 801a432:	a90d      	add	r1, sp, #52	@ 0x34
 801a434:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a436:	4620      	mov	r0, r4
 801a438:	4798      	blx	r3
 801a43a:	f10a 0a01 	add.w	sl, sl, #1
 801a43e:	e7e4      	b.n	801a40a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c2>
 801a440:	4648      	mov	r0, r9
 801a442:	e7d4      	b.n	801a3ee <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a6>
 801a444:	2005ba7c 	.word	0x2005ba7c
 801a448:	2005babc 	.word	0x2005babc
 801a44c:	2005bac8 	.word	0x2005bac8
 801a450:	2000001c 	.word	0x2000001c
 801a454:	2005ba74 	.word	0x2005ba74
 801a458:	2005ba70 	.word	0x2005ba70
 801a45c:	2005ba72 	.word	0x2005ba72
 801a460:	6828      	ldr	r0, [r5, #0]
 801a462:	6803      	ldr	r3, [r0, #0]
 801a464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a466:	4798      	blx	r3
 801a468:	4ba4      	ldr	r3, [pc, #656]	@ (801a6fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x5b4>)
 801a46a:	781b      	ldrb	r3, [r3, #0]
 801a46c:	2b00      	cmp	r3, #0
 801a46e:	f43f aed2 	beq.w	801a216 <_ZN8touchgfx11Application15drawCachedAreasEv+0xce>
 801a472:	2300      	movs	r3, #0
 801a474:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 801a478:	4ba1      	ldr	r3, [pc, #644]	@ (801a700 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5b8>)
 801a47a:	f8bd 607c 	ldrh.w	r6, [sp, #124]	@ 0x7c
 801a47e:	881b      	ldrh	r3, [r3, #0]
 801a480:	a80f      	add	r0, sp, #60	@ 0x3c
 801a482:	f104 05ee 	add.w	r5, r4, #238	@ 0xee
 801a486:	42b3      	cmp	r3, r6
 801a488:	f4bf aec5 	bcs.w	801a216 <_ZN8touchgfx11Application15drawCachedAreasEv+0xce>
 801a48c:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 801a490:	2907      	cmp	r1, #7
 801a492:	d815      	bhi.n	801a4c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x378>
 801a494:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801a498:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 801a49c:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 801a4a0:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 801a4a4:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 801a4a8:	1c4a      	adds	r2, r1, #1
 801a4aa:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 801a4ae:	eb05 02c1 	add.w	r2, r5, r1, lsl #3
 801a4b2:	f825 8031 	strh.w	r8, [r5, r1, lsl #3]
 801a4b6:	f8a2 e002 	strh.w	lr, [r2, #2]
 801a4ba:	f8a2 c004 	strh.w	ip, [r2, #4]
 801a4be:	80d7      	strh	r7, [r2, #6]
 801a4c0:	3301      	adds	r3, #1
 801a4c2:	b29b      	uxth	r3, r3
 801a4c4:	e7df      	b.n	801a486 <_ZN8touchgfx11Application15drawCachedAreasEv+0x33e>
 801a4c6:	2b02      	cmp	r3, #2
 801a4c8:	f040 80cf 	bne.w	801a66a <_ZN8touchgfx11Application15drawCachedAreasEv+0x522>
 801a4cc:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 801a4d0:	f890 b07d 	ldrb.w	fp, [r0, #125]	@ 0x7d
 801a4d4:	9308      	str	r3, [sp, #32]
 801a4d6:	f8b0 307e 	ldrh.w	r3, [r0, #126]	@ 0x7e
 801a4da:	f10b 37ff 	add.w	r7, fp, #4294967295
 801a4de:	9307      	str	r3, [sp, #28]
 801a4e0:	6803      	ldr	r3, [r0, #0]
 801a4e2:	b2bf      	uxth	r7, r7
 801a4e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801a4e8:	4798      	blx	r3
 801a4ea:	4b86      	ldr	r3, [pc, #536]	@ (801a704 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5bc>)
 801a4ec:	4682      	mov	sl, r0
 801a4ee:	881b      	ldrh	r3, [r3, #0]
 801a4f0:	2000      	movs	r0, #0
 801a4f2:	9302      	str	r3, [sp, #8]
 801a4f4:	4b84      	ldr	r3, [pc, #528]	@ (801a708 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c0>)
 801a4f6:	fa0f f887 	sxth.w	r8, r7
 801a4fa:	881e      	ldrh	r6, [r3, #0]
 801a4fc:	4b83      	ldr	r3, [pc, #524]	@ (801a70c <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c4>)
 801a4fe:	781b      	ldrb	r3, [r3, #0]
 801a500:	2b01      	cmp	r3, #1
 801a502:	bf1e      	ittt	ne
 801a504:	9b02      	ldrne	r3, [sp, #8]
 801a506:	9602      	strne	r6, [sp, #8]
 801a508:	461e      	movne	r6, r3
 801a50a:	f7f7 f8a1 	bl	8011650 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801a50e:	fb96 fbfb 	sdiv	fp, r6, fp
 801a512:	fb0b f808 	mul.w	r8, fp, r8
 801a516:	45c2      	cmp	sl, r8
 801a518:	da0c      	bge.n	801a534 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3ec>
 801a51a:	6828      	ldr	r0, [r5, #0]
 801a51c:	210a      	movs	r1, #10
 801a51e:	6803      	ldr	r3, [r0, #0]
 801a520:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801a524:	4798      	blx	r3
 801a526:	6828      	ldr	r0, [r5, #0]
 801a528:	6803      	ldr	r3, [r0, #0]
 801a52a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801a52e:	4798      	blx	r3
 801a530:	4682      	mov	sl, r0
 801a532:	e7f0      	b.n	801a516 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3ce>
 801a534:	f04f 0800 	mov.w	r8, #0
 801a538:	4645      	mov	r5, r8
 801a53a:	2000      	movs	r0, #0
 801a53c:	f7f7 f8a4 	bl	8011688 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801a540:	fa1f f38b 	uxth.w	r3, fp
 801a544:	fb17 f703 	smulbb	r7, r7, r3
 801a548:	9304      	str	r3, [sp, #16]
 801a54a:	b2bb      	uxth	r3, r7
 801a54c:	9305      	str	r3, [sp, #20]
 801a54e:	4f70      	ldr	r7, [pc, #448]	@ (801a710 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c8>)
 801a550:	0973      	lsrs	r3, r6, #5
 801a552:	9306      	str	r3, [sp, #24]
 801a554:	42b5      	cmp	r5, r6
 801a556:	d087      	beq.n	801a468 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 801a558:	6838      	ldr	r0, [r7, #0]
 801a55a:	6803      	ldr	r3, [r0, #0]
 801a55c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801a560:	4798      	blx	r3
 801a562:	4582      	cmp	sl, r0
 801a564:	4681      	mov	r9, r0
 801a566:	d907      	bls.n	801a578 <_ZN8touchgfx11Application15drawCachedAreasEv+0x430>
 801a568:	f1b8 0f00 	cmp.w	r8, #0
 801a56c:	d007      	beq.n	801a57e <_ZN8touchgfx11Application15drawCachedAreasEv+0x436>
 801a56e:	6838      	ldr	r0, [r7, #0]
 801a570:	6803      	ldr	r3, [r0, #0]
 801a572:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801a576:	e776      	b.n	801a466 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 801a578:	f1b8 0f00 	cmp.w	r8, #0
 801a57c:	d003      	beq.n	801a586 <_ZN8touchgfx11Application15drawCachedAreasEv+0x43e>
 801a57e:	454d      	cmp	r5, r9
 801a580:	d3f5      	bcc.n	801a56e <_ZN8touchgfx11Application15drawCachedAreasEv+0x426>
 801a582:	f04f 0801 	mov.w	r8, #1
 801a586:	fb95 f3fb 	sdiv	r3, r5, fp
 801a58a:	9a04      	ldr	r2, [sp, #16]
 801a58c:	9303      	str	r3, [sp, #12]
 801a58e:	3301      	adds	r3, #1
 801a590:	fb13 f302 	smulbb	r3, r3, r2
 801a594:	b299      	uxth	r1, r3
 801a596:	f1b8 0f00 	cmp.w	r8, #0
 801a59a:	d04e      	beq.n	801a63a <_ZN8touchgfx11Application15drawCachedAreasEv+0x4f2>
 801a59c:	eb09 030b 	add.w	r3, r9, fp
 801a5a0:	42b3      	cmp	r3, r6
 801a5a2:	bfa8      	it	ge
 801a5a4:	4633      	movge	r3, r6
 801a5a6:	b29b      	uxth	r3, r3
 801a5a8:	428b      	cmp	r3, r1
 801a5aa:	bf94      	ite	ls
 801a5ac:	ebc5 0203 	rsbls	r2, r5, r3
 801a5b0:	ebc5 0201 	rsbhi	r2, r5, r1
 801a5b4:	9807      	ldr	r0, [sp, #28]
 801a5b6:	4282      	cmp	r2, r0
 801a5b8:	bfa8      	it	ge
 801a5ba:	4602      	movge	r2, r0
 801a5bc:	9808      	ldr	r0, [sp, #32]
 801a5be:	fa1f fa82 	uxth.w	sl, r2
 801a5c2:	4582      	cmp	sl, r0
 801a5c4:	d205      	bcs.n	801a5d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x48a>
 801a5c6:	fa15 f082 	uxtah	r0, r5, r2
 801a5ca:	4286      	cmp	r6, r0
 801a5cc:	d001      	beq.n	801a5d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x48a>
 801a5ce:	4299      	cmp	r1, r3
 801a5d0:	d240      	bcs.n	801a654 <_ZN8touchgfx11Application15drawCachedAreasEv+0x50c>
 801a5d2:	2001      	movs	r0, #1
 801a5d4:	9209      	str	r2, [sp, #36]	@ 0x24
 801a5d6:	f7f7 f83b 	bl	8011650 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801a5da:	6838      	ldr	r0, [r7, #0]
 801a5dc:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 801a5e0:	6803      	ldr	r3, [r0, #0]
 801a5e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801a5e6:	4798      	blx	r3
 801a5e8:	4b48      	ldr	r3, [pc, #288]	@ (801a70c <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c4>)
 801a5ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a5ec:	781b      	ldrb	r3, [r3, #0]
 801a5ee:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801a5f2:	2b01      	cmp	r3, #1
 801a5f4:	b212      	sxth	r2, r2
 801a5f6:	f04f 0000 	mov.w	r0, #0
 801a5fa:	d122      	bne.n	801a642 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4fa>
 801a5fc:	1b73      	subs	r3, r6, r5
 801a5fe:	eba3 030a 	sub.w	r3, r3, sl
 801a602:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 801a606:	f8ad 0036 	strh.w	r0, [sp, #54]	@ 0x36
 801a60a:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801a60e:	f8ad 103a 	strh.w	r1, [sp, #58]	@ 0x3a
 801a612:	6823      	ldr	r3, [r4, #0]
 801a614:	a90d      	add	r1, sp, #52	@ 0x34
 801a616:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a618:	4620      	mov	r0, r4
 801a61a:	4798      	blx	r3
 801a61c:	6838      	ldr	r0, [r7, #0]
 801a61e:	9b03      	ldr	r3, [sp, #12]
 801a620:	4455      	add	r5, sl
 801a622:	4259      	negs	r1, r3
 801a624:	6803      	ldr	r3, [r0, #0]
 801a626:	b209      	sxth	r1, r1
 801a628:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801a62c:	4798      	blx	r3
 801a62e:	2001      	movs	r0, #1
 801a630:	b2ad      	uxth	r5, r5
 801a632:	f7f7 f829 	bl	8011688 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801a636:	46ca      	mov	sl, r9
 801a638:	e78c      	b.n	801a554 <_ZN8touchgfx11Application15drawCachedAreasEv+0x40c>
 801a63a:	9b05      	ldr	r3, [sp, #20]
 801a63c:	eba9 0303 	sub.w	r3, r9, r3
 801a640:	e7b1      	b.n	801a5a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x45e>
 801a642:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 801a646:	f8ad 5036 	strh.w	r5, [sp, #54]	@ 0x36
 801a64a:	f8ad 1038 	strh.w	r1, [sp, #56]	@ 0x38
 801a64e:	f8ad 203a 	strh.w	r2, [sp, #58]	@ 0x3a
 801a652:	e7de      	b.n	801a612 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4ca>
 801a654:	6838      	ldr	r0, [r7, #0]
 801a656:	6803      	ldr	r3, [r0, #0]
 801a658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a65a:	4798      	blx	r3
 801a65c:	6838      	ldr	r0, [r7, #0]
 801a65e:	9906      	ldr	r1, [sp, #24]
 801a660:	6803      	ldr	r3, [r0, #0]
 801a662:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801a666:	4798      	blx	r3
 801a668:	e7e5      	b.n	801a636 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4ee>
 801a66a:	2b03      	cmp	r3, #3
 801a66c:	f040 8130 	bne.w	801a8d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x788>
 801a670:	4b26      	ldr	r3, [pc, #152]	@ (801a70c <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c4>)
 801a672:	f9b0 9082 	ldrsh.w	r9, [r0, #130]	@ 0x82
 801a676:	781b      	ldrb	r3, [r3, #0]
 801a678:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 801a67c:	2b01      	cmp	r3, #1
 801a67e:	f000 8093 	beq.w	801a7a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x660>
 801a682:	8832      	ldrh	r2, [r6, #0]
 801a684:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 801a688:	3201      	adds	r2, #1
 801a68a:	b292      	uxth	r2, r2
 801a68c:	2900      	cmp	r1, #0
 801a68e:	f43f aeeb 	beq.w	801a468 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 801a692:	4694      	mov	ip, r2
 801a694:	f04f 0800 	mov.w	r8, #0
 801a698:	f8b4 50b2 	ldrh.w	r5, [r4, #178]	@ 0xb2
 801a69c:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	@ 0xae
 801a6a0:	441d      	add	r5, r3
 801a6a2:	b22d      	sxth	r5, r5
 801a6a4:	fa1f f38c 	uxth.w	r3, ip
 801a6a8:	4299      	cmp	r1, r3
 801a6aa:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 801a6ae:	f240 80ba 	bls.w	801a826 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6de>
 801a6b2:	4427      	add	r7, r4
 801a6b4:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 801a6b8:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 801a6bc:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 801a6c0:	4283      	cmp	r3, r0
 801a6c2:	f340 809c 	ble.w	801a7fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x6b6>
 801a6c6:	f8be 50b2 	ldrh.w	r5, [lr, #178]	@ 0xb2
 801a6ca:	46e0      	mov	r8, ip
 801a6cc:	4405      	add	r5, r0
 801a6ce:	b22d      	sxth	r5, r5
 801a6d0:	429d      	cmp	r5, r3
 801a6d2:	bfa8      	it	ge
 801a6d4:	461d      	movge	r5, r3
 801a6d6:	f10c 0c01 	add.w	ip, ip, #1
 801a6da:	e7e3      	b.n	801a6a4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x55c>
 801a6dc:	d10a      	bne.n	801a6f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5ac>
 801a6de:	f9b7 00b2 	ldrsh.w	r0, [r7, #178]	@ 0xb2
 801a6e2:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 801a6e6:	4562      	cmp	r2, ip
 801a6e8:	bfb8      	it	lt
 801a6ea:	4662      	movlt	r2, ip
 801a6ec:	4288      	cmp	r0, r1
 801a6ee:	bfb8      	it	lt
 801a6f0:	4698      	movlt	r8, r3
 801a6f2:	e082      	b.n	801a7fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x6b2>
 801a6f4:	428a      	cmp	r2, r1
 801a6f6:	bfb8      	it	lt
 801a6f8:	460a      	movlt	r2, r1
 801a6fa:	e07e      	b.n	801a7fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x6b2>
 801a6fc:	2005ba7a 	.word	0x2005ba7a
 801a700:	2000001c 	.word	0x2000001c
 801a704:	2005ba72 	.word	0x2005ba72
 801a708:	2005ba70 	.word	0x2005ba70
 801a70c:	2005ba74 	.word	0x2005ba74
 801a710:	2005ba7c 	.word	0x2005ba7c
 801a714:	19e1      	adds	r1, r4, r7
 801a716:	f851 0fac 	ldr.w	r0, [r1, #172]!
 801a71a:	ab0d      	add	r3, sp, #52	@ 0x34
 801a71c:	6849      	ldr	r1, [r1, #4]
 801a71e:	c303      	stmia	r3!, {r0, r1}
 801a720:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	@ 0x38
 801a724:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801a728:	454b      	cmp	r3, r9
 801a72a:	bfb8      	it	lt
 801a72c:	f9bd 2034 	ldrshlt.w	r2, [sp, #52]	@ 0x34
 801a730:	440b      	add	r3, r1
 801a732:	1a9b      	subs	r3, r3, r2
 801a734:	a80d      	add	r0, sp, #52	@ 0x34
 801a736:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 801a73a:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 801a73e:	f7fe fe8d 	bl	801945c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a742:	a80d      	add	r0, sp, #52	@ 0x34
 801a744:	f7f9 fd37 	bl	80141b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a748:	bb70      	cbnz	r0, 801a7a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x660>
 801a74a:	f9bd c03a 	ldrsh.w	ip, [sp, #58]	@ 0x3a
 801a74e:	6828      	ldr	r0, [r5, #0]
 801a750:	45cc      	cmp	ip, r9
 801a752:	f8d0 e000 	ldr.w	lr, [r0]
 801a756:	bfd4      	ite	le
 801a758:	fa1f fc8c 	uxthle.w	ip, ip
 801a75c:	fa1f fc89 	uxthgt.w	ip, r9
 801a760:	f8cd c000 	str.w	ip, [sp]
 801a764:	f8de b094 	ldr.w	fp, [lr, #148]	@ 0x94
 801a768:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801a76c:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 801a770:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801a774:	47d8      	blx	fp
 801a776:	4683      	mov	fp, r0
 801a778:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 801a77c:	a80d      	add	r0, sp, #52	@ 0x34
 801a77e:	f7fe fe53 	bl	8019428 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801a782:	6823      	ldr	r3, [r4, #0]
 801a784:	4620      	mov	r0, r4
 801a786:	4427      	add	r7, r4
 801a788:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a78a:	a90d      	add	r1, sp, #52	@ 0x34
 801a78c:	4798      	blx	r3
 801a78e:	f8b7 00b0 	ldrh.w	r0, [r7, #176]	@ 0xb0
 801a792:	eba0 000b 	sub.w	r0, r0, fp
 801a796:	b200      	sxth	r0, r0
 801a798:	f8a7 00b0 	strh.w	r0, [r7, #176]	@ 0xb0
 801a79c:	b920      	cbnz	r0, 801a7a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x660>
 801a79e:	fa1f f188 	uxth.w	r1, r8
 801a7a2:	4650      	mov	r0, sl
 801a7a4:	f7ff f93e 	bl	8019a24 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a7a8:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 801a7ac:	f1bb 0f00 	cmp.w	fp, #0
 801a7b0:	f43f ae5a 	beq.w	801a468 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 801a7b4:	f04f 0800 	mov.w	r8, #0
 801a7b8:	8833      	ldrh	r3, [r6, #0]
 801a7ba:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 801a7be:	3301      	adds	r3, #1
 801a7c0:	b29b      	uxth	r3, r3
 801a7c2:	b299      	uxth	r1, r3
 801a7c4:	458b      	cmp	fp, r1
 801a7c6:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 801a7ca:	d9a3      	bls.n	801a714 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5cc>
 801a7cc:	4427      	add	r7, r4
 801a7ce:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	@ 0xb0
 801a7d2:	f8b7 00ac 	ldrh.w	r0, [r7, #172]	@ 0xac
 801a7d6:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 801a7da:	4408      	add	r0, r1
 801a7dc:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 801a7e0:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 801a7e4:	b200      	sxth	r0, r0
 801a7e6:	4461      	add	r1, ip
 801a7e8:	b209      	sxth	r1, r1
 801a7ea:	4288      	cmp	r0, r1
 801a7ec:	f6bf af76 	bge.w	801a6dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x594>
 801a7f0:	4584      	cmp	ip, r0
 801a7f2:	4662      	mov	r2, ip
 801a7f4:	4698      	mov	r8, r3
 801a7f6:	bfb8      	it	lt
 801a7f8:	4602      	movlt	r2, r0
 801a7fa:	3301      	adds	r3, #1
 801a7fc:	e7e1      	b.n	801a7c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x67a>
 801a7fe:	d10e      	bne.n	801a81e <_ZN8touchgfx11Application15drawCachedAreasEv+0x6d6>
 801a800:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 801a804:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 801a808:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 801a80c:	4473      	add	r3, lr
 801a80e:	b21b      	sxth	r3, r3
 801a810:	429d      	cmp	r5, r3
 801a812:	bfa8      	it	ge
 801a814:	461d      	movge	r5, r3
 801a816:	4287      	cmp	r7, r0
 801a818:	bfb8      	it	lt
 801a81a:	46e0      	movlt	r8, ip
 801a81c:	e75b      	b.n	801a6d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x58e>
 801a81e:	4285      	cmp	r5, r0
 801a820:	bfa8      	it	ge
 801a822:	4605      	movge	r5, r0
 801a824:	e757      	b.n	801a6d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x58e>
 801a826:	eb0a 0007 	add.w	r0, sl, r7
 801a82a:	4427      	add	r7, r4
 801a82c:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 801a830:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801a834:	45cb      	cmp	fp, r9
 801a836:	bfbe      	ittt	lt
 801a838:	f8b7 50ae 	ldrhlt.w	r5, [r7, #174]	@ 0xae
 801a83c:	445d      	addlt	r5, fp
 801a83e:	b22d      	sxthlt	r5, r5
 801a840:	f7f9 fcb9 	bl	80141b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a844:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801a848:	2800      	cmp	r0, #0
 801a84a:	f47f af1f 	bne.w	801a68c <_ZN8touchgfx11Application15drawCachedAreasEv+0x544>
 801a84e:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 801a852:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 801a856:	1aad      	subs	r5, r5, r2
 801a858:	454d      	cmp	r5, r9
 801a85a:	bfa8      	it	ge
 801a85c:	464d      	movge	r5, r9
 801a85e:	4829      	ldr	r0, [pc, #164]	@ (801a904 <_ZN8touchgfx11Application15drawCachedAreasEv+0x7bc>)
 801a860:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 801a864:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 801a868:	6800      	ldr	r0, [r0, #0]
 801a86a:	f8ad 1034 	strh.w	r1, [sp, #52]	@ 0x34
 801a86e:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 801a872:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 801a876:	f8d0 c000 	ldr.w	ip, [r0]
 801a87a:	b2ad      	uxth	r5, r5
 801a87c:	fa1f fb8b 	uxth.w	fp, fp
 801a880:	455d      	cmp	r5, fp
 801a882:	bf94      	ite	ls
 801a884:	9500      	strls	r5, [sp, #0]
 801a886:	f8cd b000 	strhi.w	fp, [sp]
 801a88a:	b292      	uxth	r2, r2
 801a88c:	f8dc 5094 	ldr.w	r5, [ip, #148]	@ 0x94
 801a890:	b29b      	uxth	r3, r3
 801a892:	b289      	uxth	r1, r1
 801a894:	47a8      	blx	r5
 801a896:	6823      	ldr	r3, [r4, #0]
 801a898:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 801a89c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a89e:	a90d      	add	r1, sp, #52	@ 0x34
 801a8a0:	4620      	mov	r0, r4
 801a8a2:	4798      	blx	r3
 801a8a4:	f8bd 103a 	ldrh.w	r1, [sp, #58]	@ 0x3a
 801a8a8:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801a8ac:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 801a8b0:	1a5b      	subs	r3, r3, r1
 801a8b2:	440a      	add	r2, r1
 801a8b4:	b21b      	sxth	r3, r3
 801a8b6:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 801a8ba:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 801a8be:	2b00      	cmp	r3, #0
 801a8c0:	f47f aedf 	bne.w	801a682 <_ZN8touchgfx11Application15drawCachedAreasEv+0x53a>
 801a8c4:	fa1f f188 	uxth.w	r1, r8
 801a8c8:	4650      	mov	r0, sl
 801a8ca:	f7ff f8ab 	bl	8019a24 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a8ce:	e6d8      	b.n	801a682 <_ZN8touchgfx11Application15drawCachedAreasEv+0x53a>
 801a8d0:	8835      	ldrh	r5, [r6, #0]
 801a8d2:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801a8d6:	42ab      	cmp	r3, r5
 801a8d8:	f67f adc6 	bls.w	801a468 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 801a8dc:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801a8e0:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801a8e4:	ab0d      	add	r3, sp, #52	@ 0x34
 801a8e6:	6851      	ldr	r1, [r2, #4]
 801a8e8:	c303      	stmia	r3!, {r0, r1}
 801a8ea:	a80d      	add	r0, sp, #52	@ 0x34
 801a8ec:	f7f9 fc63 	bl	80141b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a8f0:	b920      	cbnz	r0, 801a8fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x7b4>
 801a8f2:	6823      	ldr	r3, [r4, #0]
 801a8f4:	a90d      	add	r1, sp, #52	@ 0x34
 801a8f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a8f8:	4620      	mov	r0, r4
 801a8fa:	4798      	blx	r3
 801a8fc:	3501      	adds	r5, #1
 801a8fe:	b2ad      	uxth	r5, r5
 801a900:	e7e7      	b.n	801a8d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x78a>
 801a902:	bf00      	nop
 801a904:	2005ba7c 	.word	0x2005ba7c

0801a908 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801a908:	2200      	movs	r2, #0
 801a90a:	4b03      	ldr	r3, [pc, #12]	@ (801a918 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801a90c:	801a      	strh	r2, [r3, #0]
 801a90e:	805a      	strh	r2, [r3, #2]
 801a910:	809a      	strh	r2, [r3, #4]
 801a912:	80da      	strh	r2, [r3, #6]
 801a914:	4770      	bx	lr
 801a916:	bf00      	nop
 801a918:	2005bac8 	.word	0x2005bac8

0801a91c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801a91c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a920:	4606      	mov	r6, r0
 801a922:	b09d      	sub	sp, #116	@ 0x74
 801a924:	a803      	add	r0, sp, #12
 801a926:	4614      	mov	r4, r2
 801a928:	468a      	mov	sl, r1
 801a92a:	461d      	mov	r5, r3
 801a92c:	f001 f985 	bl	801bc3a <_ZN8touchgfx12TextProviderC1Ev>
 801a930:	6833      	ldr	r3, [r6, #0]
 801a932:	4630      	mov	r0, r6
 801a934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a936:	4798      	blx	r3
 801a938:	6833      	ldr	r3, [r6, #0]
 801a93a:	4607      	mov	r7, r0
 801a93c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a93e:	4630      	mov	r0, r6
 801a940:	4798      	blx	r3
 801a942:	462a      	mov	r2, r5
 801a944:	2500      	movs	r5, #0
 801a946:	9000      	str	r0, [sp, #0]
 801a948:	4621      	mov	r1, r4
 801a94a:	463b      	mov	r3, r7
 801a94c:	a803      	add	r0, sp, #12
 801a94e:	f001 f9c7 	bl	801bce0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a952:	462c      	mov	r4, r5
 801a954:	46a9      	mov	r9, r5
 801a956:	46a8      	mov	r8, r5
 801a958:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 801a95c:	2300      	movs	r3, #0
 801a95e:	9302      	str	r3, [sp, #8]
 801a960:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801a964:	429c      	cmp	r4, r3
 801a966:	d002      	beq.n	801a96e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801a968:	455c      	cmp	r4, fp
 801a96a:	bf18      	it	ne
 801a96c:	4625      	movne	r5, r4
 801a96e:	ab02      	add	r3, sp, #8
 801a970:	4632      	mov	r2, r6
 801a972:	4651      	mov	r1, sl
 801a974:	a803      	add	r0, sp, #12
 801a976:	f001 fccf 	bl	801c318 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a97a:	4604      	mov	r4, r0
 801a97c:	b108      	cbz	r0, 801a982 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801a97e:	280a      	cmp	r0, #10
 801a980:	d10a      	bne.n	801a998 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801a982:	45c1      	cmp	r9, r8
 801a984:	bf38      	it	cc
 801a986:	46c1      	movcc	r9, r8
 801a988:	f04f 0800 	mov.w	r8, #0
 801a98c:	2c00      	cmp	r4, #0
 801a98e:	d1e5      	bne.n	801a95c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801a990:	4648      	mov	r0, r9
 801a992:	b01d      	add	sp, #116	@ 0x74
 801a994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a998:	9a02      	ldr	r2, [sp, #8]
 801a99a:	2a00      	cmp	r2, #0
 801a99c:	d0de      	beq.n	801a95c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801a99e:	7b57      	ldrb	r7, [r2, #13]
 801a9a0:	6833      	ldr	r3, [r6, #0]
 801a9a2:	007f      	lsls	r7, r7, #1
 801a9a4:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 801a9a8:	7a97      	ldrb	r7, [r2, #10]
 801a9aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a9ac:	4307      	orrs	r7, r0
 801a9ae:	4629      	mov	r1, r5
 801a9b0:	4630      	mov	r0, r6
 801a9b2:	8894      	ldrh	r4, [r2, #4]
 801a9b4:	4798      	blx	r3
 801a9b6:	4438      	add	r0, r7
 801a9b8:	4480      	add	r8, r0
 801a9ba:	fa1f f888 	uxth.w	r8, r8
 801a9be:	e7e5      	b.n	801a98c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801a9c0 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801a9c0:	b508      	push	{r3, lr}
 801a9c2:	6803      	ldr	r3, [r0, #0]
 801a9c4:	68db      	ldr	r3, [r3, #12]
 801a9c6:	4798      	blx	r3
 801a9c8:	b128      	cbz	r0, 801a9d6 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801a9ca:	7b43      	ldrb	r3, [r0, #13]
 801a9cc:	7a80      	ldrb	r0, [r0, #10]
 801a9ce:	005b      	lsls	r3, r3, #1
 801a9d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a9d4:	4318      	orrs	r0, r3
 801a9d6:	bd08      	pop	{r3, pc}

0801a9d8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801a9d8:	b40e      	push	{r1, r2, r3}
 801a9da:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a9dc:	4605      	mov	r5, r0
 801a9de:	b09e      	sub	sp, #120	@ 0x78
 801a9e0:	ab23      	add	r3, sp, #140	@ 0x8c
 801a9e2:	f853 4b04 	ldr.w	r4, [r3], #4
 801a9e6:	a805      	add	r0, sp, #20
 801a9e8:	9303      	str	r3, [sp, #12]
 801a9ea:	f001 f926 	bl	801bc3a <_ZN8touchgfx12TextProviderC1Ev>
 801a9ee:	682b      	ldr	r3, [r5, #0]
 801a9f0:	4628      	mov	r0, r5
 801a9f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a9f4:	4798      	blx	r3
 801a9f6:	682b      	ldr	r3, [r5, #0]
 801a9f8:	4606      	mov	r6, r0
 801a9fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a9fc:	4628      	mov	r0, r5
 801a9fe:	4798      	blx	r3
 801aa00:	4621      	mov	r1, r4
 801aa02:	2400      	movs	r4, #0
 801aa04:	4633      	mov	r3, r6
 801aa06:	9000      	str	r0, [sp, #0]
 801aa08:	9a03      	ldr	r2, [sp, #12]
 801aa0a:	ae1e      	add	r6, sp, #120	@ 0x78
 801aa0c:	a805      	add	r0, sp, #20
 801aa0e:	f001 f967 	bl	801bce0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801aa12:	f846 4d68 	str.w	r4, [r6, #-104]!
 801aa16:	4633      	mov	r3, r6
 801aa18:	462a      	mov	r2, r5
 801aa1a:	4621      	mov	r1, r4
 801aa1c:	a805      	add	r0, sp, #20
 801aa1e:	f001 fc7b 	bl	801c318 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801aa22:	b1f0      	cbz	r0, 801aa62 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 801aa24:	280a      	cmp	r0, #10
 801aa26:	d018      	beq.n	801aa5a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 801aa28:	9f04      	ldr	r7, [sp, #16]
 801aa2a:	b1b7      	cbz	r7, 801aa5a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 801aa2c:	7b78      	ldrb	r0, [r7, #13]
 801aa2e:	7a3b      	ldrb	r3, [r7, #8]
 801aa30:	00c1      	lsls	r1, r0, #3
 801aa32:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801aa36:	4319      	orrs	r1, r3
 801aa38:	0643      	lsls	r3, r0, #25
 801aa3a:	bf44      	itt	mi
 801aa3c:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 801aa40:	b219      	sxthmi	r1, r3
 801aa42:	0100      	lsls	r0, r0, #4
 801aa44:	79fb      	ldrb	r3, [r7, #7]
 801aa46:	88ea      	ldrh	r2, [r5, #6]
 801aa48:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801aa4c:	4303      	orrs	r3, r0
 801aa4e:	4413      	add	r3, r2
 801aa50:	1a5b      	subs	r3, r3, r1
 801aa52:	b21b      	sxth	r3, r3
 801aa54:	429c      	cmp	r4, r3
 801aa56:	bfb8      	it	lt
 801aa58:	461c      	movlt	r4, r3
 801aa5a:	4633      	mov	r3, r6
 801aa5c:	462a      	mov	r2, r5
 801aa5e:	2100      	movs	r1, #0
 801aa60:	e7dc      	b.n	801aa1c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801aa62:	b2a0      	uxth	r0, r4
 801aa64:	b01e      	add	sp, #120	@ 0x78
 801aa66:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801aa6a:	b003      	add	sp, #12
 801aa6c:	4770      	bx	lr

0801aa6e <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801aa6e:	7a43      	ldrb	r3, [r0, #9]
 801aa70:	8880      	ldrh	r0, [r0, #4]
 801aa72:	4418      	add	r0, r3
 801aa74:	b280      	uxth	r0, r0
 801aa76:	4770      	bx	lr

0801aa78 <_ZNK8touchgfx4Font13getFontHeightEv>:
 801aa78:	6803      	ldr	r3, [r0, #0]
 801aa7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801aa7c:	4718      	bx	r3

0801aa7e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801aa7e:	b40e      	push	{r1, r2, r3}
 801aa80:	b570      	push	{r4, r5, r6, lr}
 801aa82:	4604      	mov	r4, r0
 801aa84:	b09d      	sub	sp, #116	@ 0x74
 801aa86:	ab21      	add	r3, sp, #132	@ 0x84
 801aa88:	f853 5b04 	ldr.w	r5, [r3], #4
 801aa8c:	a803      	add	r0, sp, #12
 801aa8e:	9302      	str	r3, [sp, #8]
 801aa90:	f001 f8d3 	bl	801bc3a <_ZN8touchgfx12TextProviderC1Ev>
 801aa94:	6823      	ldr	r3, [r4, #0]
 801aa96:	4620      	mov	r0, r4
 801aa98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801aa9a:	4798      	blx	r3
 801aa9c:	6823      	ldr	r3, [r4, #0]
 801aa9e:	4606      	mov	r6, r0
 801aaa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801aaa2:	4620      	mov	r0, r4
 801aaa4:	4798      	blx	r3
 801aaa6:	4633      	mov	r3, r6
 801aaa8:	9000      	str	r0, [sp, #0]
 801aaaa:	9a02      	ldr	r2, [sp, #8]
 801aaac:	4629      	mov	r1, r5
 801aaae:	a803      	add	r0, sp, #12
 801aab0:	f001 f916 	bl	801bce0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801aab4:	a803      	add	r0, sp, #12
 801aab6:	f001 fcb1 	bl	801c41c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801aaba:	2401      	movs	r4, #1
 801aabc:	b2a3      	uxth	r3, r4
 801aabe:	b140      	cbz	r0, 801aad2 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 801aac0:	280a      	cmp	r0, #10
 801aac2:	bf08      	it	eq
 801aac4:	3301      	addeq	r3, #1
 801aac6:	a803      	add	r0, sp, #12
 801aac8:	bf08      	it	eq
 801aaca:	b21c      	sxtheq	r4, r3
 801aacc:	f001 fca6 	bl	801c41c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801aad0:	e7f4      	b.n	801aabc <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801aad2:	4618      	mov	r0, r3
 801aad4:	b01d      	add	sp, #116	@ 0x74
 801aad6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801aada:	b003      	add	sp, #12
 801aadc:	4770      	bx	lr

0801aade <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801aade:	b40e      	push	{r1, r2, r3}
 801aae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aae2:	4604      	mov	r4, r0
 801aae4:	b09e      	sub	sp, #120	@ 0x78
 801aae6:	ab23      	add	r3, sp, #140	@ 0x8c
 801aae8:	f853 5b04 	ldr.w	r5, [r3], #4
 801aaec:	a805      	add	r0, sp, #20
 801aaee:	9303      	str	r3, [sp, #12]
 801aaf0:	f001 f8a3 	bl	801bc3a <_ZN8touchgfx12TextProviderC1Ev>
 801aaf4:	6823      	ldr	r3, [r4, #0]
 801aaf6:	4620      	mov	r0, r4
 801aaf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801aafa:	4798      	blx	r3
 801aafc:	6823      	ldr	r3, [r4, #0]
 801aafe:	4606      	mov	r6, r0
 801ab00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801ab02:	4620      	mov	r0, r4
 801ab04:	4798      	blx	r3
 801ab06:	4633      	mov	r3, r6
 801ab08:	4629      	mov	r1, r5
 801ab0a:	9000      	str	r0, [sp, #0]
 801ab0c:	9a03      	ldr	r2, [sp, #12]
 801ab0e:	a805      	add	r0, sp, #20
 801ab10:	f001 f8e6 	bl	801bce0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801ab14:	2100      	movs	r1, #0
 801ab16:	ad1e      	add	r5, sp, #120	@ 0x78
 801ab18:	f845 1d68 	str.w	r1, [r5, #-104]!
 801ab1c:	462b      	mov	r3, r5
 801ab1e:	4622      	mov	r2, r4
 801ab20:	a805      	add	r0, sp, #20
 801ab22:	f001 fbf9 	bl	801c318 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801ab26:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 801ab2a:	b1d8      	cbz	r0, 801ab64 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 801ab2c:	280a      	cmp	r0, #10
 801ab2e:	d012      	beq.n	801ab56 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801ab30:	9804      	ldr	r0, [sp, #16]
 801ab32:	b180      	cbz	r0, 801ab56 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801ab34:	7b47      	ldrb	r7, [r0, #13]
 801ab36:	88e2      	ldrh	r2, [r4, #6]
 801ab38:	00fb      	lsls	r3, r7, #3
 801ab3a:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801ab3e:	7a03      	ldrb	r3, [r0, #8]
 801ab40:	430b      	orrs	r3, r1
 801ab42:	0679      	lsls	r1, r7, #25
 801ab44:	bf44      	itt	mi
 801ab46:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801ab4a:	b21b      	sxthmi	r3, r3
 801ab4c:	1ad3      	subs	r3, r2, r3
 801ab4e:	b21b      	sxth	r3, r3
 801ab50:	429e      	cmp	r6, r3
 801ab52:	bfa8      	it	ge
 801ab54:	461e      	movge	r6, r3
 801ab56:	462b      	mov	r3, r5
 801ab58:	4622      	mov	r2, r4
 801ab5a:	2100      	movs	r1, #0
 801ab5c:	a805      	add	r0, sp, #20
 801ab5e:	f001 fbdb 	bl	801c318 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801ab62:	e7e2      	b.n	801ab2a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801ab64:	4630      	mov	r0, r6
 801ab66:	b01e      	add	sp, #120	@ 0x78
 801ab68:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801ab6c:	b003      	add	sp, #12
 801ab6e:	4770      	bx	lr

0801ab70 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801ab70:	b513      	push	{r0, r1, r4, lr}
 801ab72:	2400      	movs	r4, #0
 801ab74:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801ab78:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801ab7c:	6803      	ldr	r3, [r0, #0]
 801ab7e:	f8ad 1004 	strh.w	r1, [sp, #4]
 801ab82:	9400      	str	r4, [sp, #0]
 801ab84:	f8ad 2006 	strh.w	r2, [sp, #6]
 801ab88:	691b      	ldr	r3, [r3, #16]
 801ab8a:	4669      	mov	r1, sp
 801ab8c:	4798      	blx	r3
 801ab8e:	b002      	add	sp, #8
 801ab90:	bd10      	pop	{r4, pc}

0801ab92 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801ab92:	b538      	push	{r3, r4, r5, lr}
 801ab94:	460c      	mov	r4, r1
 801ab96:	4605      	mov	r5, r0
 801ab98:	680b      	ldr	r3, [r1, #0]
 801ab9a:	68db      	ldr	r3, [r3, #12]
 801ab9c:	4798      	blx	r3
 801ab9e:	6823      	ldr	r3, [r4, #0]
 801aba0:	4620      	mov	r0, r4
 801aba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801aba4:	4629      	mov	r1, r5
 801aba6:	4798      	blx	r3
 801aba8:	4628      	mov	r0, r5
 801abaa:	bd38      	pop	{r3, r4, r5, pc}

0801abac <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801abac:	b410      	push	{r4}
 801abae:	880a      	ldrh	r2, [r1, #0]
 801abb0:	8884      	ldrh	r4, [r0, #4]
 801abb2:	4422      	add	r2, r4
 801abb4:	800a      	strh	r2, [r1, #0]
 801abb6:	88c4      	ldrh	r4, [r0, #6]
 801abb8:	884a      	ldrh	r2, [r1, #2]
 801abba:	4422      	add	r2, r4
 801abbc:	804a      	strh	r2, [r1, #2]
 801abbe:	6940      	ldr	r0, [r0, #20]
 801abc0:	b120      	cbz	r0, 801abcc <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801abc2:	6803      	ldr	r3, [r0, #0]
 801abc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801abc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801abca:	4718      	bx	r3
 801abcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801abd0:	4770      	bx	lr

0801abd2 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801abd2:	b570      	push	{r4, r5, r6, lr}
 801abd4:	460c      	mov	r4, r1
 801abd6:	8882      	ldrh	r2, [r0, #4]
 801abd8:	880b      	ldrh	r3, [r1, #0]
 801abda:	4605      	mov	r5, r0
 801abdc:	4413      	add	r3, r2
 801abde:	800b      	strh	r3, [r1, #0]
 801abe0:	88c2      	ldrh	r2, [r0, #6]
 801abe2:	884b      	ldrh	r3, [r1, #2]
 801abe4:	4413      	add	r3, r2
 801abe6:	804b      	strh	r3, [r1, #2]
 801abe8:	1d01      	adds	r1, r0, #4
 801abea:	4620      	mov	r0, r4
 801abec:	f7f9 faa0 	bl	8014130 <_ZN8touchgfx4RectaNERKS0_>
 801abf0:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801abf4:	2b00      	cmp	r3, #0
 801abf6:	dd0b      	ble.n	801ac10 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801abf8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801abfc:	2b00      	cmp	r3, #0
 801abfe:	dd07      	ble.n	801ac10 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801ac00:	6968      	ldr	r0, [r5, #20]
 801ac02:	b128      	cbz	r0, 801ac10 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801ac04:	6803      	ldr	r3, [r0, #0]
 801ac06:	4621      	mov	r1, r4
 801ac08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ac0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ac0e:	4718      	bx	r3
 801ac10:	bd70      	pop	{r4, r5, r6, pc}
	...

0801ac14 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801ac14:	b570      	push	{r4, r5, r6, lr}
 801ac16:	460c      	mov	r4, r1
 801ac18:	8882      	ldrh	r2, [r0, #4]
 801ac1a:	880b      	ldrh	r3, [r1, #0]
 801ac1c:	4605      	mov	r5, r0
 801ac1e:	4413      	add	r3, r2
 801ac20:	800b      	strh	r3, [r1, #0]
 801ac22:	88c2      	ldrh	r2, [r0, #6]
 801ac24:	884b      	ldrh	r3, [r1, #2]
 801ac26:	4413      	add	r3, r2
 801ac28:	804b      	strh	r3, [r1, #2]
 801ac2a:	1d01      	adds	r1, r0, #4
 801ac2c:	4620      	mov	r0, r4
 801ac2e:	f7f9 fa7f 	bl	8014130 <_ZN8touchgfx4RectaNERKS0_>
 801ac32:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801ac36:	2b00      	cmp	r3, #0
 801ac38:	dd19      	ble.n	801ac6e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801ac3a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801ac3e:	2b00      	cmp	r3, #0
 801ac40:	dd15      	ble.n	801ac6e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801ac42:	6968      	ldr	r0, [r5, #20]
 801ac44:	b128      	cbz	r0, 801ac52 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801ac46:	6803      	ldr	r3, [r0, #0]
 801ac48:	4621      	mov	r1, r4
 801ac4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ac4e:	691b      	ldr	r3, [r3, #16]
 801ac50:	4718      	bx	r3
 801ac52:	4b07      	ldr	r3, [pc, #28]	@ (801ac70 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801ac54:	681b      	ldr	r3, [r3, #0]
 801ac56:	3304      	adds	r3, #4
 801ac58:	429d      	cmp	r5, r3
 801ac5a:	d108      	bne.n	801ac6e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801ac5c:	f7fe fd8c 	bl	8019778 <_ZN8touchgfx11Application11getInstanceEv>
 801ac60:	6803      	ldr	r3, [r0, #0]
 801ac62:	6821      	ldr	r1, [r4, #0]
 801ac64:	6862      	ldr	r2, [r4, #4]
 801ac66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ac68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ac6c:	4718      	bx	r3
 801ac6e:	bd70      	pop	{r4, r5, r6, pc}
 801ac70:	2005bac0 	.word	0x2005bac0

0801ac74 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801ac74:	b570      	push	{r4, r5, r6, lr}
 801ac76:	4604      	mov	r4, r0
 801ac78:	4616      	mov	r6, r2
 801ac7a:	460d      	mov	r5, r1
 801ac7c:	b901      	cbnz	r1, 801ac80 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801ac7e:	b192      	cbz	r2, 801aca6 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801ac80:	6823      	ldr	r3, [r4, #0]
 801ac82:	4620      	mov	r0, r4
 801ac84:	699b      	ldr	r3, [r3, #24]
 801ac86:	4798      	blx	r3
 801ac88:	88e2      	ldrh	r2, [r4, #6]
 801ac8a:	88a1      	ldrh	r1, [r4, #4]
 801ac8c:	4432      	add	r2, r6
 801ac8e:	4429      	add	r1, r5
 801ac90:	4620      	mov	r0, r4
 801ac92:	b212      	sxth	r2, r2
 801ac94:	b209      	sxth	r1, r1
 801ac96:	f7f5 fc5c 	bl	8010552 <_ZN8touchgfx8Drawable5setXYEss>
 801ac9a:	6823      	ldr	r3, [r4, #0]
 801ac9c:	4620      	mov	r0, r4
 801ac9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801aca2:	699b      	ldr	r3, [r3, #24]
 801aca4:	4718      	bx	r3
 801aca6:	bd70      	pop	{r4, r5, r6, pc}

0801aca8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801aca8:	b510      	push	{r4, lr}
 801acaa:	2300      	movs	r3, #0
 801acac:	4604      	mov	r4, r0
 801acae:	4608      	mov	r0, r1
 801acb0:	8023      	strh	r3, [r4, #0]
 801acb2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801acb6:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801acba:	8063      	strh	r3, [r4, #2]
 801acbc:	6803      	ldr	r3, [r0, #0]
 801acbe:	80a1      	strh	r1, [r4, #4]
 801acc0:	80e2      	strh	r2, [r4, #6]
 801acc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801acc4:	4621      	mov	r1, r4
 801acc6:	4798      	blx	r3
 801acc8:	4620      	mov	r0, r4
 801acca:	bd10      	pop	{r4, pc}

0801accc <_ZN8touchgfx22VectorFontRendererImplC1Ev>:
 801accc:	4a04      	ldr	r2, [pc, #16]	@ (801ace0 <_ZN8touchgfx22VectorFontRendererImplC1Ev+0x14>)
 801acce:	6002      	str	r2, [r0, #0]
 801acd0:	2200      	movs	r2, #0
 801acd2:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801acd6:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801acda:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801acde:	4770      	bx	lr
 801ace0:	0802fb38 	.word	0x0802fb38

0801ace4 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>:
 801ace4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ace8:	4604      	mov	r4, r0
 801acea:	b087      	sub	sp, #28
 801acec:	8b45      	ldrh	r5, [r0, #26]
 801acee:	f8b2 c000 	ldrh.w	ip, [r2]
 801acf2:	9105      	str	r1, [sp, #20]
 801acf4:	68e1      	ldr	r1, [r4, #12]
 801acf6:	1c68      	adds	r0, r5, #1
 801acf8:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 801acfc:	f01c 0501 	ands.w	r5, ip, #1
 801ad00:	9203      	str	r2, [sp, #12]
 801ad02:	b280      	uxth	r0, r0
 801ad04:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ad08:	9502      	str	r5, [sp, #8]
 801ad0a:	d07d      	beq.n	801ae08 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x124>
 801ad0c:	ee07 2a90 	vmov	s15, r2
 801ad10:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801ad14:	8360      	strh	r0, [r4, #26]
 801ad16:	edc1 6a00 	vstr	s13, [r1]
 801ad1a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801ad1e:	f04f 0e00 	mov.w	lr, #0
 801ad22:	ee07 2a10 	vmov	s14, r2
 801ad26:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ad2a:	8b61      	ldrh	r1, [r4, #26]
 801ad2c:	68e2      	ldr	r2, [r4, #12]
 801ad2e:	1c48      	adds	r0, r1, #1
 801ad30:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801ad34:	8360      	strh	r0, [r4, #26]
 801ad36:	ee06 ea10 	vmov	s12, lr
 801ad3a:	ed82 7a00 	vstr	s14, [r2]
 801ad3e:	2501      	movs	r5, #1
 801ad40:	8b21      	ldrh	r1, [r4, #24]
 801ad42:	68a2      	ldr	r2, [r4, #8]
 801ad44:	1c48      	adds	r0, r1, #1
 801ad46:	8320      	strh	r0, [r4, #24]
 801ad48:	5455      	strb	r5, [r2, r1]
 801ad4a:	2200      	movs	r2, #0
 801ad4c:	3304      	adds	r3, #4
 801ad4e:	9300      	str	r3, [sp, #0]
 801ad50:	46aa      	mov	sl, r5
 801ad52:	ee07 2a90 	vmov	s15, r2
 801ad56:	4613      	mov	r3, r2
 801ad58:	4611      	mov	r1, r2
 801ad5a:	462e      	mov	r6, r5
 801ad5c:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 801ad60:	9201      	str	r2, [sp, #4]
 801ad62:	f8b4 8018 	ldrh.w	r8, [r4, #24]
 801ad66:	9805      	ldr	r0, [sp, #20]
 801ad68:	f8d4 b008 	ldr.w	fp, [r4, #8]
 801ad6c:	f108 0701 	add.w	r7, r8, #1
 801ad70:	42a8      	cmp	r0, r5
 801ad72:	b2bf      	uxth	r7, r7
 801ad74:	eb0b 0908 	add.w	r9, fp, r8
 801ad78:	f340 80db 	ble.w	801af32 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x24e>
 801ad7c:	fa4c f906 	asr.w	r9, ip, r6
 801ad80:	f009 0901 	and.w	r9, r9, #1
 801ad84:	fa5f f389 	uxtb.w	r3, r9
 801ad88:	9304      	str	r3, [sp, #16]
 801ad8a:	9b00      	ldr	r3, [sp, #0]
 801ad8c:	f9b3 1000 	ldrsh.w	r1, [r3]
 801ad90:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801ad94:	f1b9 0f00 	cmp.w	r9, #0
 801ad98:	d07d      	beq.n	801ae96 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1b2>
 801ad9a:	ee05 1a10 	vmov	s10, r1
 801ad9e:	eef8 4ac5 	vcvt.f32.s32	s9, s10
 801ada2:	ee05 3a10 	vmov	s10, r3
 801ada6:	8327      	strh	r7, [r4, #24]
 801ada8:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801adac:	f1ba 0f00 	cmp.w	sl, #0
 801adb0:	d050      	beq.n	801ae54 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x170>
 801adb2:	f04f 0002 	mov.w	r0, #2
 801adb6:	f80b 0008 	strb.w	r0, [fp, r8]
 801adba:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801adbe:	68e7      	ldr	r7, [r4, #12]
 801adc0:	f108 0901 	add.w	r9, r8, #1
 801adc4:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801adc8:	f8a4 901a 	strh.w	r9, [r4, #26]
 801adcc:	edc7 4a00 	vstr	s9, [r7]
 801add0:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801add4:	68e7      	ldr	r7, [r4, #12]
 801add6:	f108 0901 	add.w	r9, r8, #1
 801adda:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801adde:	f8a4 901a 	strh.w	r9, [r4, #26]
 801ade2:	ed87 5a00 	vstr	s10, [r7]
 801ade6:	3601      	adds	r6, #1
 801ade8:	2e10      	cmp	r6, #16
 801adea:	d106      	bne.n	801adfa <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x116>
 801adec:	9e01      	ldr	r6, [sp, #4]
 801adee:	9803      	ldr	r0, [sp, #12]
 801adf0:	3601      	adds	r6, #1
 801adf2:	9601      	str	r6, [sp, #4]
 801adf4:	f830 c016 	ldrh.w	ip, [r0, r6, lsl #1]
 801adf8:	2600      	movs	r6, #0
 801adfa:	9800      	ldr	r0, [sp, #0]
 801adfc:	3501      	adds	r5, #1
 801adfe:	3004      	adds	r0, #4
 801ae00:	9000      	str	r0, [sp, #0]
 801ae02:	f8dd a010 	ldr.w	sl, [sp, #16]
 801ae06:	e7ac      	b.n	801ad62 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x7e>
 801ae08:	ee06 2a10 	vmov	s12, r2
 801ae0c:	ee16 5a10 	vmov	r5, s12
 801ae10:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801ae14:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 801ae18:	442a      	add	r2, r5
 801ae1a:	ee06 2a90 	vmov	s13, r2
 801ae1e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801ae22:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801ae26:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801ae2a:	4472      	add	r2, lr
 801ae2c:	ee07 2a10 	vmov	s14, r2
 801ae30:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801ae34:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ae38:	8360      	strh	r0, [r4, #26]
 801ae3a:	edc1 6a00 	vstr	s13, [r1]
 801ae3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 801ae42:	8b61      	ldrh	r1, [r4, #26]
 801ae44:	68e2      	ldr	r2, [r4, #12]
 801ae46:	1c48      	adds	r0, r1, #1
 801ae48:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801ae4c:	8360      	strh	r0, [r4, #26]
 801ae4e:	ed82 7a00 	vstr	s14, [r2]
 801ae52:	e774      	b.n	801ad3e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x5a>
 801ae54:	f04f 0005 	mov.w	r0, #5
 801ae58:	eeb8 4ae7 	vcvt.f32.s32	s8, s15
 801ae5c:	f80b 0008 	strb.w	r0, [fp, r8]
 801ae60:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801ae64:	68e7      	ldr	r7, [r4, #12]
 801ae66:	f108 0901 	add.w	r9, r8, #1
 801ae6a:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801ae6e:	f8a4 901a 	strh.w	r9, [r4, #26]
 801ae72:	ed87 4a00 	vstr	s8, [r7]
 801ae76:	ee04 2a10 	vmov	s8, r2
 801ae7a:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801ae7e:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801ae82:	68e7      	ldr	r7, [r4, #12]
 801ae84:	f108 0901 	add.w	r9, r8, #1
 801ae88:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801ae8c:	f8a4 901a 	strh.w	r9, [r4, #26]
 801ae90:	ed87 4a00 	vstr	s8, [r7]
 801ae94:	e791      	b.n	801adba <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xd6>
 801ae96:	f1ba 0f00 	cmp.w	sl, #0
 801ae9a:	d146      	bne.n	801af2a <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x246>
 801ae9c:	f04f 0005 	mov.w	r0, #5
 801aea0:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801aea4:	8327      	strh	r7, [r4, #24]
 801aea6:	f80b 0008 	strb.w	r0, [fp, r8]
 801aeaa:	ee17 0a90 	vmov	r0, s15
 801aeae:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801aeb2:	68e7      	ldr	r7, [r4, #12]
 801aeb4:	f108 0901 	add.w	r9, r8, #1
 801aeb8:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801aebc:	f8a4 901a 	strh.w	r9, [r4, #26]
 801aec0:	ed87 5a00 	vstr	s10, [r7]
 801aec4:	ee05 2a10 	vmov	s10, r2
 801aec8:	4408      	add	r0, r1
 801aeca:	ee07 0a90 	vmov	s15, r0
 801aece:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801aed2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801aed6:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801aeda:	68e7      	ldr	r7, [r4, #12]
 801aedc:	f108 0901 	add.w	r9, r8, #1
 801aee0:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801aee4:	f8a4 901a 	strh.w	r9, [r4, #26]
 801aee8:	ed87 5a00 	vstr	s10, [r7]
 801aeec:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801aef0:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801aef4:	68e7      	ldr	r7, [r4, #12]
 801aef6:	f108 0901 	add.w	r9, r8, #1
 801aefa:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801aefe:	441a      	add	r2, r3
 801af00:	f8a4 901a 	strh.w	r9, [r4, #26]
 801af04:	edc7 7a00 	vstr	s15, [r7]
 801af08:	ee07 2a90 	vmov	s15, r2
 801af0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801af10:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801af14:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801af18:	68e7      	ldr	r7, [r4, #12]
 801af1a:	f108 0901 	add.w	r9, r8, #1
 801af1e:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801af22:	f8a4 901a 	strh.w	r9, [r4, #26]
 801af26:	edc7 7a00 	vstr	s15, [r7]
 801af2a:	461a      	mov	r2, r3
 801af2c:	ee07 1a90 	vmov	s15, r1
 801af30:	e759      	b.n	801ade6 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x102>
 801af32:	f1ba 0f00 	cmp.w	sl, #0
 801af36:	d045      	beq.n	801afc4 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x2e0>
 801af38:	ee05 1a90 	vmov	s11, r1
 801af3c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801af40:	eef4 5a66 	vcmp.f32	s11, s13
 801af44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af48:	d108      	bne.n	801af5c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x278>
 801af4a:	ee05 3a90 	vmov	s11, r3
 801af4e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801af52:	eef4 5a47 	vcmp.f32	s11, s14
 801af56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af5a:	d033      	beq.n	801afc4 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x2e0>
 801af5c:	9b02      	ldr	r3, [sp, #8]
 801af5e:	8327      	strh	r7, [r4, #24]
 801af60:	b1b3      	cbz	r3, 801af90 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x2ac>
 801af62:	2302      	movs	r3, #2
 801af64:	f889 3000 	strb.w	r3, [r9]
 801af68:	8b62      	ldrh	r2, [r4, #26]
 801af6a:	68e3      	ldr	r3, [r4, #12]
 801af6c:	1c51      	adds	r1, r2, #1
 801af6e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801af72:	8361      	strh	r1, [r4, #26]
 801af74:	edc3 6a00 	vstr	s13, [r3]
 801af78:	8b62      	ldrh	r2, [r4, #26]
 801af7a:	68e3      	ldr	r3, [r4, #12]
 801af7c:	1c51      	adds	r1, r2, #1
 801af7e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801af82:	8361      	strh	r1, [r4, #26]
 801af84:	ed83 7a00 	vstr	s14, [r3]
 801af88:	9800      	ldr	r0, [sp, #0]
 801af8a:	b007      	add	sp, #28
 801af8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af90:	2305      	movs	r3, #5
 801af92:	f889 3000 	strb.w	r3, [r9]
 801af96:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801af9a:	ee07 ea90 	vmov	s15, lr
 801af9e:	8b62      	ldrh	r2, [r4, #26]
 801afa0:	68e3      	ldr	r3, [r4, #12]
 801afa2:	1c51      	adds	r1, r2, #1
 801afa4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801afa8:	8361      	strh	r1, [r4, #26]
 801afaa:	ed83 6a00 	vstr	s12, [r3]
 801afae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801afb2:	8b62      	ldrh	r2, [r4, #26]
 801afb4:	68e3      	ldr	r3, [r4, #12]
 801afb6:	1c51      	adds	r1, r2, #1
 801afb8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801afbc:	8361      	strh	r1, [r4, #26]
 801afbe:	edc3 7a00 	vstr	s15, [r3]
 801afc2:	e7d1      	b.n	801af68 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x284>
 801afc4:	ee05 2a90 	vmov	s11, r2
 801afc8:	2305      	movs	r3, #5
 801afca:	9902      	ldr	r1, [sp, #8]
 801afcc:	8327      	strh	r7, [r4, #24]
 801afce:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801afd2:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801afd6:	f889 3000 	strb.w	r3, [r9]
 801afda:	b181      	cbz	r1, 801affe <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x31a>
 801afdc:	8b62      	ldrh	r2, [r4, #26]
 801afde:	68e3      	ldr	r3, [r4, #12]
 801afe0:	1c51      	adds	r1, r2, #1
 801afe2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801afe6:	8361      	strh	r1, [r4, #26]
 801afe8:	ed83 5a00 	vstr	s10, [r3]
 801afec:	8b62      	ldrh	r2, [r4, #26]
 801afee:	68e3      	ldr	r3, [r4, #12]
 801aff0:	1c51      	adds	r1, r2, #1
 801aff2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801aff6:	8361      	strh	r1, [r4, #26]
 801aff8:	edc3 5a00 	vstr	s11, [r3]
 801affc:	e7b4      	b.n	801af68 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x284>
 801affe:	8b65      	ldrh	r5, [r4, #26]
 801b000:	68e1      	ldr	r1, [r4, #12]
 801b002:	1c6e      	adds	r6, r5, #1
 801b004:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 801b008:	8366      	strh	r6, [r4, #26]
 801b00a:	ed81 5a00 	vstr	s10, [r1]
 801b00e:	8b65      	ldrh	r5, [r4, #26]
 801b010:	68e1      	ldr	r1, [r4, #12]
 801b012:	1c6e      	adds	r6, r5, #1
 801b014:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 801b018:	8366      	strh	r6, [r4, #26]
 801b01a:	edc1 5a00 	vstr	s11, [r1]
 801b01e:	8b65      	ldrh	r5, [r4, #26]
 801b020:	68e1      	ldr	r1, [r4, #12]
 801b022:	1c6e      	adds	r6, r5, #1
 801b024:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 801b028:	ee17 0a90 	vmov	r0, s15
 801b02c:	ee16 5a10 	vmov	r5, s12
 801b030:	4428      	add	r0, r5
 801b032:	ee07 0a90 	vmov	s15, r0
 801b036:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 801b03a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b03e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801b042:	4472      	add	r2, lr
 801b044:	8366      	strh	r6, [r4, #26]
 801b046:	edc1 7a00 	vstr	s15, [r1]
 801b04a:	ee07 2a90 	vmov	s15, r2
 801b04e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b052:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801b056:	8b61      	ldrh	r1, [r4, #26]
 801b058:	68e5      	ldr	r5, [r4, #12]
 801b05a:	1c4e      	adds	r6, r1, #1
 801b05c:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 801b060:	8366      	strh	r6, [r4, #26]
 801b062:	edc1 7a00 	vstr	s15, [r1]
 801b066:	8b22      	ldrh	r2, [r4, #24]
 801b068:	68a1      	ldr	r1, [r4, #8]
 801b06a:	1c55      	adds	r5, r2, #1
 801b06c:	8325      	strh	r5, [r4, #24]
 801b06e:	548b      	strb	r3, [r1, r2]
 801b070:	e791      	b.n	801af96 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x2b2>
	...

0801b074 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii>:
 801b074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b078:	b08e      	sub	sp, #56	@ 0x38
 801b07a:	4604      	mov	r4, r0
 801b07c:	4688      	mov	r8, r1
 801b07e:	4615      	mov	r5, r2
 801b080:	4699      	mov	r9, r3
 801b082:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 801b084:	f89d a064 	ldrb.w	sl, [sp, #100]	@ 0x64
 801b088:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801b08a:	f7f8 fd63 	bl	8013b54 <_ZN8touchgfx14VectorRenderer11getInstanceEv>
 801b08e:	6060      	str	r0, [r4, #4]
 801b090:	f1b9 0f00 	cmp.w	r9, #0
 801b094:	f000 80e8 	beq.w	801b268 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 801b098:	2800      	cmp	r0, #0
 801b09a:	f000 80e5 	beq.w	801b268 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 801b09e:	a805      	add	r0, sp, #20
 801b0a0:	f000 f8f9 	bl	801b296 <_ZN8touchgfx9Matrix3x3C1Ev>
 801b0a4:	6833      	ldr	r3, [r6, #0]
 801b0a6:	4630      	mov	r0, r6
 801b0a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b0aa:	4798      	blx	r3
 801b0ac:	a805      	add	r0, sp, #20
 801b0ae:	eef0 0a40 	vmov.f32	s1, s0
 801b0b2:	f000 f8f4 	bl	801b29e <_ZN8touchgfx9Matrix3x35scaleEff>
 801b0b6:	6860      	ldr	r0, [r4, #4]
 801b0b8:	f1ba 0f03 	cmp.w	sl, #3
 801b0bc:	d83b      	bhi.n	801b136 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xc2>
 801b0be:	e8df f00a 	tbb	[pc, sl]
 801b0c2:	1002      	.short	0x1002
 801b0c4:	9f71      	.short	0x9f71
 801b0c6:	6803      	ldr	r3, [r0, #0]
 801b0c8:	462a      	mov	r2, r5
 801b0ca:	689b      	ldr	r3, [r3, #8]
 801b0cc:	4641      	mov	r1, r8
 801b0ce:	4798      	blx	r3
 801b0d0:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 801b0d4:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801b0d8:	ee07 7a90 	vmov	s15, r7
 801b0dc:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801b0e0:	e026      	b.n	801b130 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xbc>
 801b0e2:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 801b0e6:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 801b0ea:	8869      	ldrh	r1, [r5, #2]
 801b0ec:	1a9b      	subs	r3, r3, r2
 801b0ee:	1a5b      	subs	r3, r3, r1
 801b0f0:	f8ad 300c 	strh.w	r3, [sp, #12]
 801b0f4:	882b      	ldrh	r3, [r5, #0]
 801b0f6:	f8ad 2010 	strh.w	r2, [sp, #16]
 801b0fa:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b0fe:	88ab      	ldrh	r3, [r5, #4]
 801b100:	aa03      	add	r2, sp, #12
 801b102:	f8ad 3012 	strh.w	r3, [sp, #18]
 801b106:	6803      	ldr	r3, [r0, #0]
 801b108:	4641      	mov	r1, r8
 801b10a:	689b      	ldr	r3, [r3, #8]
 801b10c:	4798      	blx	r3
 801b10e:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 801b270 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1fc>
 801b112:	a805      	add	r0, sp, #20
 801b114:	f000 f8e8 	bl	801b2e8 <_ZN8touchgfx9Matrix3x36rotateEf>
 801b118:	ee07 7a90 	vmov	s15, r7
 801b11c:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 801b120:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801b122:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801b126:	1a9b      	subs	r3, r3, r2
 801b128:	ee00 3a10 	vmov	s0, r3
 801b12c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801b130:	a805      	add	r0, sp, #20
 801b132:	f000 f927 	bl	801b384 <_ZN8touchgfx9Matrix3x39translateEff>
 801b136:	2500      	movs	r5, #0
 801b138:	6860      	ldr	r0, [r4, #4]
 801b13a:	a905      	add	r1, sp, #20
 801b13c:	6803      	ldr	r3, [r0, #0]
 801b13e:	f109 0602 	add.w	r6, r9, #2
 801b142:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b144:	4798      	blx	r3
 801b146:	6860      	ldr	r0, [r4, #4]
 801b148:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801b14a:	6803      	ldr	r3, [r0, #0]
 801b14c:	f041 417f 	orr.w	r1, r1, #4278190080	@ 0xff000000
 801b150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b152:	4798      	blx	r3
 801b154:	6860      	ldr	r0, [r4, #4]
 801b156:	f89d 1060 	ldrb.w	r1, [sp, #96]	@ 0x60
 801b15a:	6803      	ldr	r3, [r0, #0]
 801b15c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b15e:	4798      	blx	r3
 801b160:	6860      	ldr	r0, [r4, #4]
 801b162:	2101      	movs	r1, #1
 801b164:	6803      	ldr	r3, [r0, #0]
 801b166:	68db      	ldr	r3, [r3, #12]
 801b168:	4798      	blx	r3
 801b16a:	f8b9 7000 	ldrh.w	r7, [r9]
 801b16e:	f104 0310 	add.w	r3, r4, #16
 801b172:	61a5      	str	r5, [r4, #24]
 801b174:	f104 0208 	add.w	r2, r4, #8
 801b178:	f104 0114 	add.w	r1, r4, #20
 801b17c:	f104 000c 	add.w	r0, r4, #12
 801b180:	f7f4 fbb6 	bl	800f8f0 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>
 801b184:	42af      	cmp	r7, r5
 801b186:	dd60      	ble.n	801b24a <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1d6>
 801b188:	8831      	ldrh	r1, [r6, #0]
 801b18a:	1cb2      	adds	r2, r6, #2
 801b18c:	f101 030f 	add.w	r3, r1, #15
 801b190:	f3c3 1307 	ubfx	r3, r3, #4, #8
 801b194:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801b198:	4620      	mov	r0, r4
 801b19a:	f7ff fda3 	bl	801ace4 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>
 801b19e:	3501      	adds	r5, #1
 801b1a0:	4606      	mov	r6, r0
 801b1a2:	e7ef      	b.n	801b184 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x110>
 801b1a4:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801b1a8:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 801b1ac:	8829      	ldrh	r1, [r5, #0]
 801b1ae:	1a9b      	subs	r3, r3, r2
 801b1b0:	1a5b      	subs	r3, r3, r1
 801b1b2:	f8ad 300c 	strh.w	r3, [sp, #12]
 801b1b6:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801b1ba:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801b1be:	886d      	ldrh	r5, [r5, #2]
 801b1c0:	1a5b      	subs	r3, r3, r1
 801b1c2:	1b5b      	subs	r3, r3, r5
 801b1c4:	f8ad 2010 	strh.w	r2, [sp, #16]
 801b1c8:	f8ad 1012 	strh.w	r1, [sp, #18]
 801b1cc:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b1d0:	6803      	ldr	r3, [r0, #0]
 801b1d2:	aa03      	add	r2, sp, #12
 801b1d4:	689b      	ldr	r3, [r3, #8]
 801b1d6:	4641      	mov	r1, r8
 801b1d8:	4798      	blx	r3
 801b1da:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 801b274 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x200>
 801b1de:	a805      	add	r0, sp, #20
 801b1e0:	f000 f882 	bl	801b2e8 <_ZN8touchgfx9Matrix3x36rotateEf>
 801b1e4:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801b1e8:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801b1ea:	1a9b      	subs	r3, r3, r2
 801b1ec:	ee00 3a90 	vmov	s1, r3
 801b1f0:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 801b1f4:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801b1f8:	1bdb      	subs	r3, r3, r7
 801b1fa:	ee00 3a10 	vmov	s0, r3
 801b1fe:	e795      	b.n	801b12c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xb8>
 801b200:	886b      	ldrh	r3, [r5, #2]
 801b202:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801b206:	f8ad 300c 	strh.w	r3, [sp, #12]
 801b20a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801b20e:	8829      	ldrh	r1, [r5, #0]
 801b210:	1a9b      	subs	r3, r3, r2
 801b212:	1a5b      	subs	r3, r3, r1
 801b214:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b218:	88eb      	ldrh	r3, [r5, #6]
 801b21a:	f8ad 2012 	strh.w	r2, [sp, #18]
 801b21e:	f8ad 3010 	strh.w	r3, [sp, #16]
 801b222:	6803      	ldr	r3, [r0, #0]
 801b224:	aa03      	add	r2, sp, #12
 801b226:	689b      	ldr	r3, [r3, #8]
 801b228:	4641      	mov	r1, r8
 801b22a:	4798      	blx	r3
 801b22c:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 801b278 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x204>
 801b230:	a805      	add	r0, sp, #20
 801b232:	f000 f859 	bl	801b2e8 <_ZN8touchgfx9Matrix3x36rotateEf>
 801b236:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801b23a:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 801b23e:	1bdb      	subs	r3, r3, r7
 801b240:	ee00 3a90 	vmov	s1, r3
 801b244:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801b248:	e748      	b.n	801b0dc <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x68>
 801b24a:	2100      	movs	r1, #0
 801b24c:	6860      	ldr	r0, [r4, #4]
 801b24e:	8b22      	ldrh	r2, [r4, #24]
 801b250:	6803      	ldr	r3, [r0, #0]
 801b252:	9101      	str	r1, [sp, #4]
 801b254:	8b61      	ldrh	r1, [r4, #26]
 801b256:	9100      	str	r1, [sp, #0]
 801b258:	6a1d      	ldr	r5, [r3, #32]
 801b25a:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 801b25e:	47a8      	blx	r5
 801b260:	6860      	ldr	r0, [r4, #4]
 801b262:	6803      	ldr	r3, [r0, #0]
 801b264:	69db      	ldr	r3, [r3, #28]
 801b266:	4798      	blx	r3
 801b268:	b00e      	add	sp, #56	@ 0x38
 801b26a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b26e:	bf00      	nop
 801b270:	42b40000 	.word	0x42b40000
 801b274:	43340000 	.word	0x43340000
 801b278:	43870000 	.word	0x43870000

0801b27c <_ZN8touchgfx9Matrix3x35resetEv>:
 801b27c:	2300      	movs	r3, #0
 801b27e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 801b282:	6043      	str	r3, [r0, #4]
 801b284:	6002      	str	r2, [r0, #0]
 801b286:	6083      	str	r3, [r0, #8]
 801b288:	60c3      	str	r3, [r0, #12]
 801b28a:	6102      	str	r2, [r0, #16]
 801b28c:	6143      	str	r3, [r0, #20]
 801b28e:	6183      	str	r3, [r0, #24]
 801b290:	61c3      	str	r3, [r0, #28]
 801b292:	6202      	str	r2, [r0, #32]
 801b294:	4770      	bx	lr

0801b296 <_ZN8touchgfx9Matrix3x3C1Ev>:
 801b296:	b508      	push	{r3, lr}
 801b298:	f7ff fff0 	bl	801b27c <_ZN8touchgfx9Matrix3x35resetEv>
 801b29c:	bd08      	pop	{r3, pc}

0801b29e <_ZN8touchgfx9Matrix3x35scaleEff>:
 801b29e:	edd0 7a00 	vldr	s15, [r0]
 801b2a2:	ee67 7a80 	vmul.f32	s15, s15, s0
 801b2a6:	edc0 7a00 	vstr	s15, [r0]
 801b2aa:	edd0 7a01 	vldr	s15, [r0, #4]
 801b2ae:	ee67 7a80 	vmul.f32	s15, s15, s0
 801b2b2:	edc0 7a01 	vstr	s15, [r0, #4]
 801b2b6:	edd0 7a02 	vldr	s15, [r0, #8]
 801b2ba:	ee27 0a80 	vmul.f32	s0, s15, s0
 801b2be:	edd0 7a03 	vldr	s15, [r0, #12]
 801b2c2:	ee67 7aa0 	vmul.f32	s15, s15, s1
 801b2c6:	edc0 7a03 	vstr	s15, [r0, #12]
 801b2ca:	edd0 7a04 	vldr	s15, [r0, #16]
 801b2ce:	ee67 7aa0 	vmul.f32	s15, s15, s1
 801b2d2:	edc0 7a04 	vstr	s15, [r0, #16]
 801b2d6:	edd0 7a05 	vldr	s15, [r0, #20]
 801b2da:	ee67 0aa0 	vmul.f32	s1, s15, s1
 801b2de:	ed80 0a02 	vstr	s0, [r0, #8]
 801b2e2:	edc0 0a05 	vstr	s1, [r0, #20]
 801b2e6:	4770      	bx	lr

0801b2e8 <_ZN8touchgfx9Matrix3x36rotateEf>:
 801b2e8:	eddf 7a24 	vldr	s15, [pc, #144]	@ 801b37c <_ZN8touchgfx9Matrix3x36rotateEf+0x94>
 801b2ec:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b2f0:	eddf 7a23 	vldr	s15, [pc, #140]	@ 801b380 <_ZN8touchgfx9Matrix3x36rotateEf+0x98>
 801b2f4:	b510      	push	{r4, lr}
 801b2f6:	ed2d 8b02 	vpush	{d8}
 801b2fa:	eec0 8a27 	vdiv.f32	s17, s0, s15
 801b2fe:	eeb0 0a68 	vmov.f32	s0, s17
 801b302:	4604      	mov	r4, r0
 801b304:	f010 fd08 	bl	802bd18 <cosf>
 801b308:	eeb0 8a40 	vmov.f32	s16, s0
 801b30c:	eeb0 0a68 	vmov.f32	s0, s17
 801b310:	f010 fd46 	bl	802bda0 <sinf>
 801b314:	edd4 6a03 	vldr	s13, [r4, #12]
 801b318:	edd4 4a00 	vldr	s9, [r4]
 801b31c:	ee60 7a66 	vnmul.f32	s15, s0, s13
 801b320:	ed94 7a04 	vldr	s14, [r4, #16]
 801b324:	eee8 7a24 	vfma.f32	s15, s16, s9
 801b328:	ed94 5a01 	vldr	s10, [r4, #4]
 801b32c:	edc4 7a00 	vstr	s15, [r4]
 801b330:	ee60 7a47 	vnmul.f32	s15, s0, s14
 801b334:	eee8 7a05 	vfma.f32	s15, s16, s10
 801b338:	edc4 7a01 	vstr	s15, [r4, #4]
 801b33c:	edd4 7a05 	vldr	s15, [r4, #20]
 801b340:	edd4 5a02 	vldr	s11, [r4, #8]
 801b344:	ee20 6a67 	vnmul.f32	s12, s0, s15
 801b348:	ee66 6a88 	vmul.f32	s13, s13, s16
 801b34c:	ee27 7a08 	vmul.f32	s14, s14, s16
 801b350:	ee67 7a88 	vmul.f32	s15, s15, s16
 801b354:	eea8 6a25 	vfma.f32	s12, s16, s11
 801b358:	ecbd 8b02 	vpop	{d8}
 801b35c:	eee0 6a24 	vfma.f32	s13, s0, s9
 801b360:	eea0 7a05 	vfma.f32	s14, s0, s10
 801b364:	eee0 7a25 	vfma.f32	s15, s0, s11
 801b368:	ed84 6a02 	vstr	s12, [r4, #8]
 801b36c:	edc4 6a03 	vstr	s13, [r4, #12]
 801b370:	ed84 7a04 	vstr	s14, [r4, #16]
 801b374:	edc4 7a05 	vstr	s15, [r4, #20]
 801b378:	bd10      	pop	{r4, pc}
 801b37a:	bf00      	nop
 801b37c:	40490fdb 	.word	0x40490fdb
 801b380:	43340000 	.word	0x43340000

0801b384 <_ZN8touchgfx9Matrix3x39translateEff>:
 801b384:	ed90 6a06 	vldr	s12, [r0, #24]
 801b388:	edd0 7a00 	vldr	s15, [r0]
 801b38c:	eee6 7a00 	vfma.f32	s15, s12, s0
 801b390:	edd0 6a07 	vldr	s13, [r0, #28]
 801b394:	edc0 7a00 	vstr	s15, [r0]
 801b398:	edd0 7a01 	vldr	s15, [r0, #4]
 801b39c:	eee6 7a80 	vfma.f32	s15, s13, s0
 801b3a0:	ed90 7a08 	vldr	s14, [r0, #32]
 801b3a4:	edc0 7a01 	vstr	s15, [r0, #4]
 801b3a8:	edd0 7a02 	vldr	s15, [r0, #8]
 801b3ac:	eee7 7a00 	vfma.f32	s15, s14, s0
 801b3b0:	edc0 7a02 	vstr	s15, [r0, #8]
 801b3b4:	edd0 7a03 	vldr	s15, [r0, #12]
 801b3b8:	eee6 7a20 	vfma.f32	s15, s12, s1
 801b3bc:	edc0 7a03 	vstr	s15, [r0, #12]
 801b3c0:	edd0 7a04 	vldr	s15, [r0, #16]
 801b3c4:	eee6 7aa0 	vfma.f32	s15, s13, s1
 801b3c8:	edc0 7a04 	vstr	s15, [r0, #16]
 801b3cc:	edd0 7a05 	vldr	s15, [r0, #20]
 801b3d0:	eee7 7a20 	vfma.f32	s15, s14, s1
 801b3d4:	edc0 7a05 	vstr	s15, [r0, #20]
 801b3d8:	4770      	bx	lr

0801b3da <_ZNK8touchgfx9Matrix3x315affineTransformEff>:
 801b3da:	edd0 6a01 	vldr	s13, [r0, #4]
 801b3de:	edd0 7a04 	vldr	s15, [r0, #16]
 801b3e2:	ed90 7a03 	vldr	s14, [r0, #12]
 801b3e6:	ee60 7aa7 	vmul.f32	s15, s1, s15
 801b3ea:	ee60 0aa6 	vmul.f32	s1, s1, s13
 801b3ee:	edd0 6a00 	vldr	s13, [r0]
 801b3f2:	eee7 7a00 	vfma.f32	s15, s14, s0
 801b3f6:	eee6 0a80 	vfma.f32	s1, s13, s0
 801b3fa:	ed90 7a05 	vldr	s14, [r0, #20]
 801b3fe:	ed90 0a02 	vldr	s0, [r0, #8]
 801b402:	ee30 0a80 	vadd.f32	s0, s1, s0
 801b406:	ee77 0a87 	vadd.f32	s1, s15, s14
 801b40a:	b084      	sub	sp, #16
 801b40c:	b004      	add	sp, #16
 801b40e:	4770      	bx	lr

0801b410 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 801b410:	b530      	push	{r4, r5, lr}
 801b412:	8083      	strh	r3, [r0, #4]
 801b414:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801b418:	f89d 5018 	ldrb.w	r5, [sp, #24]
 801b41c:	80c3      	strh	r3, [r0, #6]
 801b41e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801b422:	6141      	str	r1, [r0, #20]
 801b424:	7203      	strb	r3, [r0, #8]
 801b426:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801b42a:	8302      	strh	r2, [r0, #24]
 801b42c:	7243      	strb	r3, [r0, #9]
 801b42e:	7a83      	ldrb	r3, [r0, #10]
 801b430:	f365 0306 	bfi	r3, r5, #0, #7
 801b434:	f89d 501c 	ldrb.w	r5, [sp, #28]
 801b438:	f365 13c7 	bfi	r3, r5, #7, #1
 801b43c:	7283      	strb	r3, [r0, #10]
 801b43e:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801b442:	72c3      	strb	r3, [r0, #11]
 801b444:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801b448:	7303      	strb	r3, [r0, #12]
 801b44a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801b44e:	81c3      	strh	r3, [r0, #14]
 801b450:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801b454:	8203      	strh	r3, [r0, #16]
 801b456:	4b01      	ldr	r3, [pc, #4]	@ (801b45c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 801b458:	6003      	str	r3, [r0, #0]
 801b45a:	bd30      	pop	{r4, r5, pc}
 801b45c:	0802fb4c 	.word	0x0802fb4c

0801b460 <_ZNK8touchgfx9ConstFont4findEt>:
 801b460:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b462:	6944      	ldr	r4, [r0, #20]
 801b464:	b3bc      	cbz	r4, 801b4d6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b466:	88a3      	ldrh	r3, [r4, #4]
 801b468:	8b02      	ldrh	r2, [r0, #24]
 801b46a:	1acb      	subs	r3, r1, r3
 801b46c:	f102 32ff 	add.w	r2, r2, #4294967295
 801b470:	d431      	bmi.n	801b4d6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b472:	4293      	cmp	r3, r2
 801b474:	dd0c      	ble.n	801b490 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801b476:	230e      	movs	r3, #14
 801b478:	fb03 4302 	mla	r3, r3, r2, r4
 801b47c:	889b      	ldrh	r3, [r3, #4]
 801b47e:	1a5b      	subs	r3, r3, r1
 801b480:	1ad3      	subs	r3, r2, r3
 801b482:	429a      	cmp	r2, r3
 801b484:	db27      	blt.n	801b4d6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b486:	2b00      	cmp	r3, #0
 801b488:	bfbc      	itt	lt
 801b48a:	2302      	movlt	r3, #2
 801b48c:	fb92 f3f3 	sdivlt	r3, r2, r3
 801b490:	2500      	movs	r5, #0
 801b492:	260e      	movs	r6, #14
 801b494:	4295      	cmp	r5, r2
 801b496:	dc1e      	bgt.n	801b4d6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b498:	fb06 4003 	mla	r0, r6, r3, r4
 801b49c:	8887      	ldrh	r7, [r0, #4]
 801b49e:	42b9      	cmp	r1, r7
 801b4a0:	d01a      	beq.n	801b4d8 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801b4a2:	d20d      	bcs.n	801b4c0 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801b4a4:	1e5a      	subs	r2, r3, #1
 801b4a6:	4295      	cmp	r5, r2
 801b4a8:	dc15      	bgt.n	801b4d6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b4aa:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801b4ae:	1a5b      	subs	r3, r3, r1
 801b4b0:	1ad3      	subs	r3, r2, r3
 801b4b2:	429a      	cmp	r2, r3
 801b4b4:	db0f      	blt.n	801b4d6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b4b6:	429d      	cmp	r5, r3
 801b4b8:	ddec      	ble.n	801b494 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801b4ba:	1953      	adds	r3, r2, r5
 801b4bc:	105b      	asrs	r3, r3, #1
 801b4be:	e7e9      	b.n	801b494 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801b4c0:	1c5d      	adds	r5, r3, #1
 801b4c2:	42aa      	cmp	r2, r5
 801b4c4:	db07      	blt.n	801b4d6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b4c6:	8a43      	ldrh	r3, [r0, #18]
 801b4c8:	1acb      	subs	r3, r1, r3
 801b4ca:	442b      	add	r3, r5
 801b4cc:	429d      	cmp	r5, r3
 801b4ce:	dc02      	bgt.n	801b4d6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b4d0:	429a      	cmp	r2, r3
 801b4d2:	dadf      	bge.n	801b494 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801b4d4:	e7f1      	b.n	801b4ba <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801b4d6:	2000      	movs	r0, #0
 801b4d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b4da <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801b4da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b4dc:	4604      	mov	r4, r0
 801b4de:	4617      	mov	r7, r2
 801b4e0:	461e      	mov	r6, r3
 801b4e2:	b911      	cbnz	r1, 801b4ea <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801b4e4:	2500      	movs	r5, #0
 801b4e6:	4628      	mov	r0, r5
 801b4e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b4ea:	290a      	cmp	r1, #10
 801b4ec:	d0fa      	beq.n	801b4e4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b4ee:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 801b4f2:	4291      	cmp	r1, r2
 801b4f4:	d0f6      	beq.n	801b4e4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b4f6:	f242 020b 	movw	r2, #8203	@ 0x200b
 801b4fa:	4291      	cmp	r1, r2
 801b4fc:	d0f2      	beq.n	801b4e4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b4fe:	f7ff ffaf 	bl	801b460 <_ZNK8touchgfx9ConstFont4findEt>
 801b502:	4605      	mov	r5, r0
 801b504:	b950      	cbnz	r0, 801b51c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801b506:	6823      	ldr	r3, [r4, #0]
 801b508:	4620      	mov	r0, r4
 801b50a:	691b      	ldr	r3, [r3, #16]
 801b50c:	4798      	blx	r3
 801b50e:	4601      	mov	r1, r0
 801b510:	4620      	mov	r0, r4
 801b512:	f7ff ffa5 	bl	801b460 <_ZNK8touchgfx9ConstFont4findEt>
 801b516:	4605      	mov	r5, r0
 801b518:	2800      	cmp	r0, #0
 801b51a:	d0e3      	beq.n	801b4e4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b51c:	6823      	ldr	r3, [r4, #0]
 801b51e:	4629      	mov	r1, r5
 801b520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b522:	4620      	mov	r0, r4
 801b524:	4798      	blx	r3
 801b526:	6038      	str	r0, [r7, #0]
 801b528:	6823      	ldr	r3, [r4, #0]
 801b52a:	4620      	mov	r0, r4
 801b52c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b52e:	4798      	blx	r3
 801b530:	7030      	strb	r0, [r6, #0]
 801b532:	e7d8      	b.n	801b4e6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801b534 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801b534:	2000      	movs	r0, #0
 801b536:	4770      	bx	lr

0801b538 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801b538:	2001      	movs	r0, #1
 801b53a:	4770      	bx	lr

0801b53c <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801b53c:	2002      	movs	r0, #2
 801b53e:	4770      	bx	lr

0801b540 <_ZN8touchgfx12GestureEventD1Ev>:
 801b540:	4770      	bx	lr

0801b542 <_ZN8touchgfx9DragEventD1Ev>:
 801b542:	4770      	bx	lr

0801b544 <_ZN8touchgfx10ClickEventD1Ev>:
 801b544:	4770      	bx	lr

0801b546 <_ZN8touchgfx10ClickEventD0Ev>:
 801b546:	b510      	push	{r4, lr}
 801b548:	4604      	mov	r4, r0
 801b54a:	210c      	movs	r1, #12
 801b54c:	f010 fb9d 	bl	802bc8a <_ZdlPvj>
 801b550:	4620      	mov	r0, r4
 801b552:	bd10      	pop	{r4, pc}

0801b554 <_ZN8touchgfx9DragEventD0Ev>:
 801b554:	b510      	push	{r4, lr}
 801b556:	4604      	mov	r4, r0
 801b558:	2110      	movs	r1, #16
 801b55a:	f010 fb96 	bl	802bc8a <_ZdlPvj>
 801b55e:	4620      	mov	r0, r4
 801b560:	bd10      	pop	{r4, pc}

0801b562 <_ZN8touchgfx12GestureEventD0Ev>:
 801b562:	b510      	push	{r4, lr}
 801b564:	4604      	mov	r4, r0
 801b566:	210c      	movs	r1, #12
 801b568:	f010 fb8f 	bl	802bc8a <_ZdlPvj>
 801b56c:	4620      	mov	r0, r4
 801b56e:	bd10      	pop	{r4, pc}

0801b570 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801b570:	b530      	push	{r4, r5, lr}
 801b572:	460d      	mov	r5, r1
 801b574:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801b576:	b087      	sub	sp, #28
 801b578:	4604      	mov	r4, r0
 801b57a:	b301      	cbz	r1, 801b5be <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801b57c:	a801      	add	r0, sp, #4
 801b57e:	f7ff fb93 	bl	801aca8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b582:	892a      	ldrh	r2, [r5, #8]
 801b584:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801b588:	7928      	ldrb	r0, [r5, #4]
 801b58a:	1ad2      	subs	r2, r2, r3
 801b58c:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801b58e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801b592:	441a      	add	r2, r3
 801b594:	896b      	ldrh	r3, [r5, #10]
 801b596:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801b59a:	f88d 0010 	strb.w	r0, [sp, #16]
 801b59e:	1b5b      	subs	r3, r3, r5
 801b5a0:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 801b5a2:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801b5a4:	442b      	add	r3, r5
 801b5a6:	4d07      	ldr	r5, [pc, #28]	@ (801b5c4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801b5a8:	f8ad 1012 	strh.w	r1, [sp, #18]
 801b5ac:	9503      	str	r5, [sp, #12]
 801b5ae:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b5b2:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b5b6:	6803      	ldr	r3, [r0, #0]
 801b5b8:	a903      	add	r1, sp, #12
 801b5ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b5bc:	4798      	blx	r3
 801b5be:	b007      	add	sp, #28
 801b5c0:	bd30      	pop	{r4, r5, pc}
 801b5c2:	bf00      	nop
 801b5c4:	0802fbdc 	.word	0x0802fbdc

0801b5c8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801b5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b5cc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801b5ce:	b08a      	sub	sp, #40	@ 0x28
 801b5d0:	4604      	mov	r4, r0
 801b5d2:	460d      	mov	r5, r1
 801b5d4:	b113      	cbz	r3, 801b5dc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801b5d6:	790b      	ldrb	r3, [r1, #4]
 801b5d8:	2b00      	cmp	r3, #0
 801b5da:	d044      	beq.n	801b666 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801b5dc:	f104 0804 	add.w	r8, r4, #4
 801b5e0:	4641      	mov	r1, r8
 801b5e2:	a803      	add	r0, sp, #12
 801b5e4:	f7ff fb60 	bl	801aca8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b5e8:	792b      	ldrb	r3, [r5, #4]
 801b5ea:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801b5ee:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801b5f2:	b983      	cbnz	r3, 801b616 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801b5f4:	892a      	ldrh	r2, [r5, #8]
 801b5f6:	88e9      	ldrh	r1, [r5, #6]
 801b5f8:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 801b5fc:	1b92      	subs	r2, r2, r6
 801b5fe:	1bc9      	subs	r1, r1, r7
 801b600:	9301      	str	r3, [sp, #4]
 801b602:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 801b606:	9300      	str	r3, [sp, #0]
 801b608:	b212      	sxth	r2, r2
 801b60a:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 801b60e:	b209      	sxth	r1, r1
 801b610:	4640      	mov	r0, r8
 801b612:	f7f8 fcad 	bl	8013f70 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801b616:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801b618:	b329      	cbz	r1, 801b666 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801b61a:	a805      	add	r0, sp, #20
 801b61c:	f7ff fb44 	bl	801aca8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b620:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801b624:	792b      	ldrb	r3, [r5, #4]
 801b626:	1abf      	subs	r7, r7, r2
 801b628:	88ea      	ldrh	r2, [r5, #6]
 801b62a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801b62c:	4417      	add	r7, r2
 801b62e:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 801b630:	f88d 3020 	strb.w	r3, [sp, #32]
 801b634:	4417      	add	r7, r2
 801b636:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801b63a:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 801b63e:	1ab6      	subs	r6, r6, r2
 801b640:	892a      	ldrh	r2, [r5, #8]
 801b642:	a907      	add	r1, sp, #28
 801b644:	4416      	add	r6, r2
 801b646:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801b648:	4416      	add	r6, r2
 801b64a:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 801b64e:	2600      	movs	r6, #0
 801b650:	4a06      	ldr	r2, [pc, #24]	@ (801b66c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801b652:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 801b656:	9207      	str	r2, [sp, #28]
 801b658:	6803      	ldr	r3, [r0, #0]
 801b65a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b65c:	4798      	blx	r3
 801b65e:	792b      	ldrb	r3, [r5, #4]
 801b660:	b10b      	cbz	r3, 801b666 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801b662:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 801b666:	b00a      	add	sp, #40	@ 0x28
 801b668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b66c:	0802fbb4 	.word	0x0802fbb4

0801b670 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801b670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b674:	460c      	mov	r4, r1
 801b676:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801b678:	b088      	sub	sp, #32
 801b67a:	4605      	mov	r5, r0
 801b67c:	2900      	cmp	r1, #0
 801b67e:	d06d      	beq.n	801b75c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801b680:	4668      	mov	r0, sp
 801b682:	f7ff fb11 	bl	801aca8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b686:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 801b688:	88e3      	ldrh	r3, [r4, #6]
 801b68a:	f9bd 8000 	ldrsh.w	r8, [sp]
 801b68e:	440b      	add	r3, r1
 801b690:	b21b      	sxth	r3, r3
 801b692:	4543      	cmp	r3, r8
 801b694:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801b698:	db31      	blt.n	801b6fe <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b69a:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801b69e:	44c4      	add	ip, r8
 801b6a0:	fa0f fc8c 	sxth.w	ip, ip
 801b6a4:	4563      	cmp	r3, ip
 801b6a6:	da2a      	bge.n	801b6fe <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b6a8:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 801b6aa:	8926      	ldrh	r6, [r4, #8]
 801b6ac:	4416      	add	r6, r2
 801b6ae:	b236      	sxth	r6, r6
 801b6b0:	42be      	cmp	r6, r7
 801b6b2:	db24      	blt.n	801b6fe <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b6b4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801b6b8:	4438      	add	r0, r7
 801b6ba:	b200      	sxth	r0, r0
 801b6bc:	4286      	cmp	r6, r0
 801b6be:	da1e      	bge.n	801b6fe <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b6c0:	8963      	ldrh	r3, [r4, #10]
 801b6c2:	4419      	add	r1, r3
 801b6c4:	b209      	sxth	r1, r1
 801b6c6:	4541      	cmp	r1, r8
 801b6c8:	db08      	blt.n	801b6dc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801b6ca:	4561      	cmp	r1, ip
 801b6cc:	da06      	bge.n	801b6dc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801b6ce:	89a3      	ldrh	r3, [r4, #12]
 801b6d0:	441a      	add	r2, r3
 801b6d2:	b212      	sxth	r2, r2
 801b6d4:	42ba      	cmp	r2, r7
 801b6d6:	db01      	blt.n	801b6dc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801b6d8:	4282      	cmp	r2, r0
 801b6da:	db10      	blt.n	801b6fe <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b6dc:	4b21      	ldr	r3, [pc, #132]	@ (801b764 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801b6de:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801b6e0:	9304      	str	r3, [sp, #16]
 801b6e2:	2302      	movs	r3, #2
 801b6e4:	f88d 3014 	strb.w	r3, [sp, #20]
 801b6e8:	2300      	movs	r3, #0
 801b6ea:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b6ee:	f8ad 3018 	strh.w	r3, [sp, #24]
 801b6f2:	f8ad 301a 	strh.w	r3, [sp, #26]
 801b6f6:	6803      	ldr	r3, [r0, #0]
 801b6f8:	a904      	add	r1, sp, #16
 801b6fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b6fc:	4798      	blx	r3
 801b6fe:	1d29      	adds	r1, r5, #4
 801b700:	a802      	add	r0, sp, #8
 801b702:	f7ff fad1 	bl	801aca8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b706:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801b70a:	88e0      	ldrh	r0, [r4, #6]
 801b70c:	eba3 0808 	sub.w	r8, r3, r8
 801b710:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801b714:	7921      	ldrb	r1, [r4, #4]
 801b716:	1bdf      	subs	r7, r3, r7
 801b718:	b2bb      	uxth	r3, r7
 801b71a:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 801b71e:	fa1f f888 	uxth.w	r8, r8
 801b722:	8922      	ldrh	r2, [r4, #8]
 801b724:	8967      	ldrh	r7, [r4, #10]
 801b726:	89a4      	ldrh	r4, [r4, #12]
 801b728:	4440      	add	r0, r8
 801b72a:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 801b72c:	4460      	add	r0, ip
 801b72e:	441a      	add	r2, r3
 801b730:	44b8      	add	r8, r7
 801b732:	4423      	add	r3, r4
 801b734:	4c0c      	ldr	r4, [pc, #48]	@ (801b768 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801b736:	f8ad 0016 	strh.w	r0, [sp, #22]
 801b73a:	4433      	add	r3, r6
 801b73c:	4432      	add	r2, r6
 801b73e:	44e0      	add	r8, ip
 801b740:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801b742:	f88d 1014 	strb.w	r1, [sp, #20]
 801b746:	9404      	str	r4, [sp, #16]
 801b748:	f8ad 2018 	strh.w	r2, [sp, #24]
 801b74c:	f8ad 801a 	strh.w	r8, [sp, #26]
 801b750:	f8ad 301c 	strh.w	r3, [sp, #28]
 801b754:	6803      	ldr	r3, [r0, #0]
 801b756:	a904      	add	r1, sp, #16
 801b758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b75a:	4798      	blx	r3
 801b75c:	b008      	add	sp, #32
 801b75e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b762:	bf00      	nop
 801b764:	0802fbb4 	.word	0x0802fbb4
 801b768:	0802fbc8 	.word	0x0802fbc8

0801b76c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801b76c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b76e:	4604      	mov	r4, r0
 801b770:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801b774:	3201      	adds	r2, #1
 801b776:	d112      	bne.n	801b79e <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801b778:	2500      	movs	r5, #0
 801b77a:	9500      	str	r5, [sp, #0]
 801b77c:	466d      	mov	r5, sp
 801b77e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801b782:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801b786:	6803      	ldr	r3, [r0, #0]
 801b788:	f8ad 1004 	strh.w	r1, [sp, #4]
 801b78c:	f8ad 2006 	strh.w	r2, [sp, #6]
 801b790:	4629      	mov	r1, r5
 801b792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b794:	4798      	blx	r3
 801b796:	e895 0003 	ldmia.w	r5, {r0, r1}
 801b79a:	e884 0003 	stmia.w	r4, {r0, r1}
 801b79e:	4620      	mov	r0, r4
 801b7a0:	b003      	add	sp, #12
 801b7a2:	bd30      	pop	{r4, r5, pc}

0801b7a4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801b7a4:	b513      	push	{r0, r1, r4, lr}
 801b7a6:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801b7aa:	4604      	mov	r4, r0
 801b7ac:	3301      	adds	r3, #1
 801b7ae:	d109      	bne.n	801b7c4 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801b7b0:	4601      	mov	r1, r0
 801b7b2:	4668      	mov	r0, sp
 801b7b4:	f7ff fa78 	bl	801aca8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b7b8:	f8bd 3000 	ldrh.w	r3, [sp]
 801b7bc:	8423      	strh	r3, [r4, #32]
 801b7be:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b7c2:	8463      	strh	r3, [r4, #34]	@ 0x22
 801b7c4:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801b7c8:	b002      	add	sp, #8
 801b7ca:	bd10      	pop	{r4, pc}

0801b7cc <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801b7cc:	b513      	push	{r0, r1, r4, lr}
 801b7ce:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 801b7d2:	4604      	mov	r4, r0
 801b7d4:	3301      	adds	r3, #1
 801b7d6:	d109      	bne.n	801b7ec <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801b7d8:	4601      	mov	r1, r0
 801b7da:	4668      	mov	r0, sp
 801b7dc:	f7ff fa64 	bl	801aca8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b7e0:	f8bd 3000 	ldrh.w	r3, [sp]
 801b7e4:	8423      	strh	r3, [r4, #32]
 801b7e6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b7ea:	8463      	strh	r3, [r4, #34]	@ 0x22
 801b7ec:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 801b7f0:	b002      	add	sp, #8
 801b7f2:	bd10      	pop	{r4, pc}

0801b7f4 <_ZN8touchgfx6ScreenC1Ev>:
 801b7f4:	b570      	push	{r4, r5, r6, lr}
 801b7f6:	4605      	mov	r5, r0
 801b7f8:	4b16      	ldr	r3, [pc, #88]	@ (801b854 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801b7fa:	2101      	movs	r1, #1
 801b7fc:	f845 3b04 	str.w	r3, [r5], #4
 801b800:	2300      	movs	r3, #0
 801b802:	4604      	mov	r4, r0
 801b804:	8103      	strh	r3, [r0, #8]
 801b806:	8143      	strh	r3, [r0, #10]
 801b808:	8183      	strh	r3, [r0, #12]
 801b80a:	81c3      	strh	r3, [r0, #14]
 801b80c:	8203      	strh	r3, [r0, #16]
 801b80e:	8243      	strh	r3, [r0, #18]
 801b810:	8283      	strh	r3, [r0, #20]
 801b812:	82c3      	strh	r3, [r0, #22]
 801b814:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801b818:	6203      	str	r3, [r0, #32]
 801b81a:	8483      	strh	r3, [r0, #36]	@ 0x24
 801b81c:	84c3      	strh	r3, [r0, #38]	@ 0x26
 801b81e:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 801b822:	4a0d      	ldr	r2, [pc, #52]	@ (801b858 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801b824:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 801b828:	6343      	str	r3, [r0, #52]	@ 0x34
 801b82a:	4b0c      	ldr	r3, [pc, #48]	@ (801b85c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801b82c:	6042      	str	r2, [r0, #4]
 801b82e:	f9b3 6000 	ldrsh.w	r6, [r3]
 801b832:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 801b834:	4a0a      	ldr	r2, [pc, #40]	@ (801b860 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801b836:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 801b83a:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801b83e:	f9b2 1000 	ldrsh.w	r1, [r2]
 801b842:	4628      	mov	r0, r5
 801b844:	4798      	blx	r3
 801b846:	6863      	ldr	r3, [r4, #4]
 801b848:	4628      	mov	r0, r5
 801b84a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b84c:	4631      	mov	r1, r6
 801b84e:	4798      	blx	r3
 801b850:	4620      	mov	r0, r4
 801b852:	bd70      	pop	{r4, r5, r6, pc}
 801b854:	0802fbf0 	.word	0x0802fbf0
 801b858:	0802f3a4 	.word	0x0802f3a4
 801b85c:	2005ba72 	.word	0x2005ba72
 801b860:	2005ba70 	.word	0x2005ba70

0801b864 <_ZN8touchgfx6Screen4drawEv>:
 801b864:	b507      	push	{r0, r1, r2, lr}
 801b866:	2100      	movs	r1, #0
 801b868:	4b08      	ldr	r3, [pc, #32]	@ (801b88c <_ZN8touchgfx6Screen4drawEv+0x28>)
 801b86a:	9100      	str	r1, [sp, #0]
 801b86c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b870:	4b07      	ldr	r3, [pc, #28]	@ (801b890 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801b872:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b876:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b87a:	4669      	mov	r1, sp
 801b87c:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b880:	6803      	ldr	r3, [r0, #0]
 801b882:	689b      	ldr	r3, [r3, #8]
 801b884:	4798      	blx	r3
 801b886:	b003      	add	sp, #12
 801b888:	f85d fb04 	ldr.w	pc, [sp], #4
 801b88c:	2005ba70 	.word	0x2005ba70
 801b890:	2005ba72 	.word	0x2005ba72

0801b894 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801b894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b898:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801b89c:	b089      	sub	sp, #36	@ 0x24
 801b89e:	2b00      	cmp	r3, #0
 801b8a0:	4680      	mov	r8, r0
 801b8a2:	460c      	mov	r4, r1
 801b8a4:	4615      	mov	r5, r2
 801b8a6:	dd0e      	ble.n	801b8c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801b8a8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801b8ac:	2b00      	cmp	r3, #0
 801b8ae:	dd0a      	ble.n	801b8c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801b8b0:	4628      	mov	r0, r5
 801b8b2:	f7ff ff5b 	bl	801b76c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801b8b6:	4621      	mov	r1, r4
 801b8b8:	f7fd fe80 	bl	80195bc <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b8bc:	69eb      	ldr	r3, [r5, #28]
 801b8be:	b928      	cbnz	r0, 801b8cc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801b8c0:	461d      	mov	r5, r3
 801b8c2:	2b00      	cmp	r3, #0
 801b8c4:	d1f4      	bne.n	801b8b0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801b8c6:	b009      	add	sp, #36	@ 0x24
 801b8c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b8cc:	ae04      	add	r6, sp, #16
 801b8ce:	2b00      	cmp	r3, #0
 801b8d0:	f000 80b5 	beq.w	801ba3e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801b8d4:	682b      	ldr	r3, [r5, #0]
 801b8d6:	4629      	mov	r1, r5
 801b8d8:	68db      	ldr	r3, [r3, #12]
 801b8da:	a802      	add	r0, sp, #8
 801b8dc:	4798      	blx	r3
 801b8de:	4628      	mov	r0, r5
 801b8e0:	f7ff ff60 	bl	801b7a4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801b8e4:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801b8e8:	4407      	add	r7, r0
 801b8ea:	4628      	mov	r0, r5
 801b8ec:	f7ff ff6e 	bl	801b7cc <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801b8f0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801b8f4:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801b8f8:	4418      	add	r0, r3
 801b8fa:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801b8fe:	4621      	mov	r1, r4
 801b900:	f8ad 0012 	strh.w	r0, [sp, #18]
 801b904:	b23f      	sxth	r7, r7
 801b906:	4630      	mov	r0, r6
 801b908:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b90c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b910:	f8ad 7010 	strh.w	r7, [sp, #16]
 801b914:	f7f8 fc0c 	bl	8014130 <_ZN8touchgfx4RectaNERKS0_>
 801b918:	4628      	mov	r0, r5
 801b91a:	f7ff ff27 	bl	801b76c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801b91e:	4602      	mov	r2, r0
 801b920:	e896 0003 	ldmia.w	r6, {r0, r1}
 801b924:	ab06      	add	r3, sp, #24
 801b926:	e883 0003 	stmia.w	r3, {r0, r1}
 801b92a:	4611      	mov	r1, r2
 801b92c:	4618      	mov	r0, r3
 801b92e:	f7f8 fbff 	bl	8014130 <_ZN8touchgfx4RectaNERKS0_>
 801b932:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801b936:	f9b4 1000 	ldrsh.w	r1, [r4]
 801b93a:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801b93e:	4299      	cmp	r1, r3
 801b940:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801b944:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801b948:	d10b      	bne.n	801b962 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801b94a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801b94e:	4552      	cmp	r2, sl
 801b950:	d107      	bne.n	801b962 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801b952:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801b956:	455a      	cmp	r2, fp
 801b958:	d103      	bne.n	801b962 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801b95a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801b95e:	454a      	cmp	r2, r9
 801b960:	d06d      	beq.n	801ba3e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801b962:	f1bb 0f00 	cmp.w	fp, #0
 801b966:	dd65      	ble.n	801ba34 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801b968:	f1b9 0f00 	cmp.w	r9, #0
 801b96c:	dd62      	ble.n	801ba34 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801b96e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801b972:	fa1f f08a 	uxth.w	r0, sl
 801b976:	4552      	cmp	r2, sl
 801b978:	9000      	str	r0, [sp, #0]
 801b97a:	da12      	bge.n	801b9a2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801b97c:	9301      	str	r3, [sp, #4]
 801b97e:	9b00      	ldr	r3, [sp, #0]
 801b980:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801b984:	f8ad 2012 	strh.w	r2, [sp, #18]
 801b988:	1a9a      	subs	r2, r3, r2
 801b98a:	f8ad 1010 	strh.w	r1, [sp, #16]
 801b98e:	f8ad 0014 	strh.w	r0, [sp, #20]
 801b992:	f8ad 2016 	strh.w	r2, [sp, #22]
 801b996:	69ea      	ldr	r2, [r5, #28]
 801b998:	4631      	mov	r1, r6
 801b99a:	4640      	mov	r0, r8
 801b99c:	f7ff ff7a 	bl	801b894 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b9a0:	9b01      	ldr	r3, [sp, #4]
 801b9a2:	f9b4 2000 	ldrsh.w	r2, [r4]
 801b9a6:	b29f      	uxth	r7, r3
 801b9a8:	429a      	cmp	r2, r3
 801b9aa:	da0d      	bge.n	801b9c8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801b9ac:	f8ad 2010 	strh.w	r2, [sp, #16]
 801b9b0:	1aba      	subs	r2, r7, r2
 801b9b2:	f8ad a012 	strh.w	sl, [sp, #18]
 801b9b6:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b9ba:	f8ad 9016 	strh.w	r9, [sp, #22]
 801b9be:	69ea      	ldr	r2, [r5, #28]
 801b9c0:	4631      	mov	r1, r6
 801b9c2:	4640      	mov	r0, r8
 801b9c4:	f7ff ff66 	bl	801b894 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b9c8:	8822      	ldrh	r2, [r4, #0]
 801b9ca:	88a3      	ldrh	r3, [r4, #4]
 801b9cc:	445f      	add	r7, fp
 801b9ce:	4413      	add	r3, r2
 801b9d0:	b29b      	uxth	r3, r3
 801b9d2:	b2bf      	uxth	r7, r7
 801b9d4:	b23a      	sxth	r2, r7
 801b9d6:	b219      	sxth	r1, r3
 801b9d8:	4291      	cmp	r1, r2
 801b9da:	dd0d      	ble.n	801b9f8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801b9dc:	1bdb      	subs	r3, r3, r7
 801b9de:	f8ad 2010 	strh.w	r2, [sp, #16]
 801b9e2:	f8ad a012 	strh.w	sl, [sp, #18]
 801b9e6:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b9ea:	f8ad 9016 	strh.w	r9, [sp, #22]
 801b9ee:	69ea      	ldr	r2, [r5, #28]
 801b9f0:	4631      	mov	r1, r6
 801b9f2:	4640      	mov	r0, r8
 801b9f4:	f7ff ff4e 	bl	801b894 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b9f8:	88e2      	ldrh	r2, [r4, #6]
 801b9fa:	8863      	ldrh	r3, [r4, #2]
 801b9fc:	4413      	add	r3, r2
 801b9fe:	9a00      	ldr	r2, [sp, #0]
 801ba00:	b29b      	uxth	r3, r3
 801ba02:	444a      	add	r2, r9
 801ba04:	fa1f f982 	uxth.w	r9, r2
 801ba08:	fa0f f289 	sxth.w	r2, r9
 801ba0c:	b219      	sxth	r1, r3
 801ba0e:	428a      	cmp	r2, r1
 801ba10:	da15      	bge.n	801ba3e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801ba12:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801ba16:	f9b4 0000 	ldrsh.w	r0, [r4]
 801ba1a:	eba3 0309 	sub.w	r3, r3, r9
 801ba1e:	f8ad 1014 	strh.w	r1, [sp, #20]
 801ba22:	f8ad 0010 	strh.w	r0, [sp, #16]
 801ba26:	f8ad 2012 	strh.w	r2, [sp, #18]
 801ba2a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ba2e:	69ea      	ldr	r2, [r5, #28]
 801ba30:	4631      	mov	r1, r6
 801ba32:	e001      	b.n	801ba38 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801ba34:	4621      	mov	r1, r4
 801ba36:	69ea      	ldr	r2, [r5, #28]
 801ba38:	4640      	mov	r0, r8
 801ba3a:	f7ff ff2b 	bl	801b894 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801ba3e:	4628      	mov	r0, r5
 801ba40:	f7ff fe94 	bl	801b76c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801ba44:	4633      	mov	r3, r6
 801ba46:	4602      	mov	r2, r0
 801ba48:	6861      	ldr	r1, [r4, #4]
 801ba4a:	6820      	ldr	r0, [r4, #0]
 801ba4c:	c303      	stmia	r3!, {r0, r1}
 801ba4e:	4611      	mov	r1, r2
 801ba50:	4630      	mov	r0, r6
 801ba52:	f7f8 fb6d 	bl	8014130 <_ZN8touchgfx4RectaNERKS0_>
 801ba56:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801ba5a:	2b00      	cmp	r3, #0
 801ba5c:	f77f af33 	ble.w	801b8c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801ba60:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801ba64:	2b00      	cmp	r3, #0
 801ba66:	f77f af2e 	ble.w	801b8c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801ba6a:	4628      	mov	r0, r5
 801ba6c:	f7ff fe9a 	bl	801b7a4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801ba70:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801ba74:	1a18      	subs	r0, r3, r0
 801ba76:	f8ad 0010 	strh.w	r0, [sp, #16]
 801ba7a:	4628      	mov	r0, r5
 801ba7c:	f7ff fea6 	bl	801b7cc <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801ba80:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801ba84:	4631      	mov	r1, r6
 801ba86:	1a18      	subs	r0, r3, r0
 801ba88:	f8ad 0012 	strh.w	r0, [sp, #18]
 801ba8c:	682b      	ldr	r3, [r5, #0]
 801ba8e:	4628      	mov	r0, r5
 801ba90:	689b      	ldr	r3, [r3, #8]
 801ba92:	4798      	blx	r3
 801ba94:	e717      	b.n	801b8c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801ba96 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801ba96:	b570      	push	{r4, r5, r6, lr}
 801ba98:	2300      	movs	r3, #0
 801ba9a:	460c      	mov	r4, r1
 801ba9c:	b086      	sub	sp, #24
 801ba9e:	1d06      	adds	r6, r0, #4
 801baa0:	4631      	mov	r1, r6
 801baa2:	4605      	mov	r5, r0
 801baa4:	a802      	add	r0, sp, #8
 801baa6:	9301      	str	r3, [sp, #4]
 801baa8:	f7ff f8fe 	bl	801aca8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801baac:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801bab0:	8822      	ldrh	r2, [r4, #0]
 801bab2:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801bab6:	1ad2      	subs	r2, r2, r3
 801bab8:	8863      	ldrh	r3, [r4, #2]
 801baba:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801babe:	1a5b      	subs	r3, r3, r1
 801bac0:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801bac4:	f8ad 2010 	strh.w	r2, [sp, #16]
 801bac8:	f8ad 0014 	strh.w	r0, [sp, #20]
 801bacc:	f8ad 1016 	strh.w	r1, [sp, #22]
 801bad0:	aa01      	add	r2, sp, #4
 801bad2:	a904      	add	r1, sp, #16
 801bad4:	4630      	mov	r0, r6
 801bad6:	f8ad 3012 	strh.w	r3, [sp, #18]
 801bada:	f7f8 fc01 	bl	80142e0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801bade:	9a01      	ldr	r2, [sp, #4]
 801bae0:	b11a      	cbz	r2, 801baea <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801bae2:	4621      	mov	r1, r4
 801bae4:	4628      	mov	r0, r5
 801bae6:	f7ff fed5 	bl	801b894 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801baea:	b006      	add	sp, #24
 801baec:	bd70      	pop	{r4, r5, r6, pc}

0801baee <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801baee:	b530      	push	{r4, r5, lr}
 801baf0:	4602      	mov	r2, r0
 801baf2:	b085      	sub	sp, #20
 801baf4:	460d      	mov	r5, r1
 801baf6:	466b      	mov	r3, sp
 801baf8:	4604      	mov	r4, r0
 801bafa:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801bafe:	6851      	ldr	r1, [r2, #4]
 801bb00:	c303      	stmia	r3!, {r0, r1}
 801bb02:	4629      	mov	r1, r5
 801bb04:	4668      	mov	r0, sp
 801bb06:	f7f8 fb13 	bl	8014130 <_ZN8touchgfx4RectaNERKS0_>
 801bb0a:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801bb0e:	b12b      	cbz	r3, 801bb1c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801bb10:	4669      	mov	r1, sp
 801bb12:	4620      	mov	r0, r4
 801bb14:	f7ff ffbf 	bl	801ba96 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801bb18:	b005      	add	sp, #20
 801bb1a:	bd30      	pop	{r4, r5, pc}
 801bb1c:	3404      	adds	r4, #4
 801bb1e:	4621      	mov	r1, r4
 801bb20:	a802      	add	r0, sp, #8
 801bb22:	f7ff f8c1 	bl	801aca8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bb26:	f8bd 3000 	ldrh.w	r3, [sp]
 801bb2a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801bb2e:	4669      	mov	r1, sp
 801bb30:	1a9b      	subs	r3, r3, r2
 801bb32:	f8ad 3000 	strh.w	r3, [sp]
 801bb36:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801bb3a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801bb3e:	4620      	mov	r0, r4
 801bb40:	1a9b      	subs	r3, r3, r2
 801bb42:	f8ad 3002 	strh.w	r3, [sp, #2]
 801bb46:	f7f8 fb92 	bl	801426e <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801bb4a:	e7e5      	b.n	801bb18 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801bb4c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801bb4c:	460b      	mov	r3, r1
 801bb4e:	680a      	ldr	r2, [r1, #0]
 801bb50:	1d01      	adds	r1, r0, #4
 801bb52:	6992      	ldr	r2, [r2, #24]
 801bb54:	4618      	mov	r0, r3
 801bb56:	4710      	bx	r2

0801bb58 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst>:
 801bb58:	4298      	cmp	r0, r3
 801bb5a:	d200      	bcs.n	801bb5e <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x6>
 801bb5c:	b913      	cbnz	r3, 801bb64 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0xc>
 801bb5e:	440a      	add	r2, r1
 801bb60:	b210      	sxth	r0, r2
 801bb62:	4770      	bx	lr
 801bb64:	ee07 0a90 	vmov	s15, r0
 801bb68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801bb6c:	ee07 3a90 	vmov	s15, r3
 801bb70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bb74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801bb78:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801bb7c:	ee07 2a90 	vmov	s15, r2
 801bb80:	ee37 7a66 	vsub.f32	s14, s14, s13
 801bb84:	eddf 4a11 	vldr	s9, [pc, #68]	@ 801bbcc <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x74>
 801bb88:	eddf 5a11 	vldr	s11, [pc, #68]	@ 801bbd0 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x78>
 801bb8c:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801bb90:	ee27 5a07 	vmul.f32	s10, s14, s14
 801bb94:	eee7 5a24 	vfma.f32	s11, s14, s9
 801bb98:	ee07 1a90 	vmov	s15, r1
 801bb9c:	eee5 6a25 	vfma.f32	s13, s10, s11
 801bba0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bba4:	eee6 7a26 	vfma.f32	s15, s12, s13
 801bba8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801bbac:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801bbb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bbb4:	bfcc      	ite	gt
 801bbb6:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801bbba:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801bbbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801bbc2:	ee17 3a90 	vmov	r3, s15
 801bbc6:	b218      	sxth	r0, r3
 801bbc8:	4770      	bx	lr
 801bbca:	bf00      	nop
 801bbcc:	402ce6b0 	.word	0x402ce6b0
 801bbd0:	3fd9cd60 	.word	0x3fd9cd60

0801bbd4 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801bbd4:	4298      	cmp	r0, r3
 801bbd6:	d200      	bcs.n	801bbda <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 801bbd8:	b913      	cbnz	r3, 801bbe0 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 801bbda:	440a      	add	r2, r1
 801bbdc:	b210      	sxth	r0, r2
 801bbde:	4770      	bx	lr
 801bbe0:	ee07 0a90 	vmov	s15, r0
 801bbe4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801bbe8:	ee07 3a90 	vmov	s15, r3
 801bbec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bbf0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801bbf4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801bbf8:	ee07 2a90 	vmov	s15, r2
 801bbfc:	ee37 7a66 	vsub.f32	s14, s14, s13
 801bc00:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801bc04:	ee67 5a07 	vmul.f32	s11, s14, s14
 801bc08:	ee07 1a90 	vmov	s15, r1
 801bc0c:	eee5 6a87 	vfma.f32	s13, s11, s14
 801bc10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bc14:	eee6 7a26 	vfma.f32	s15, s12, s13
 801bc18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801bc1c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801bc20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc24:	bfcc      	ite	gt
 801bc26:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801bc2a:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801bc2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801bc32:	ee17 3a90 	vmov	r3, s15
 801bc36:	b218      	sxth	r0, r3
 801bc38:	4770      	bx	lr

0801bc3a <_ZN8touchgfx12TextProviderC1Ev>:
 801bc3a:	b538      	push	{r3, r4, r5, lr}
 801bc3c:	2500      	movs	r5, #0
 801bc3e:	2302      	movs	r3, #2
 801bc40:	4604      	mov	r4, r0
 801bc42:	e9c0 5500 	strd	r5, r5, [r0]
 801bc46:	7403      	strb	r3, [r0, #16]
 801bc48:	6145      	str	r5, [r0, #20]
 801bc4a:	7605      	strb	r5, [r0, #24]
 801bc4c:	83c5      	strh	r5, [r0, #30]
 801bc4e:	8405      	strh	r5, [r0, #32]
 801bc50:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801bc52:	8705      	strh	r5, [r0, #56]	@ 0x38
 801bc54:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 801bc56:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 801bc5a:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 801bc5e:	220e      	movs	r2, #14
 801bc60:	4629      	mov	r1, r5
 801bc62:	304c      	adds	r0, #76	@ 0x4c
 801bc64:	f011 fa12 	bl	802d08c <memset>
 801bc68:	2301      	movs	r3, #1
 801bc6a:	4620      	mov	r0, r4
 801bc6c:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 801bc70:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801bc74:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 801bc78:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 801bc7c:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 801bc80:	f7f5 f974 	bl	8010f6c <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801bc84:	4620      	mov	r0, r4
 801bc86:	bd38      	pop	{r3, r4, r5, pc}

0801bc88 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801bc88:	b530      	push	{r4, r5, lr}
 801bc8a:	2500      	movs	r5, #0
 801bc8c:	2401      	movs	r4, #1
 801bc8e:	6843      	ldr	r3, [r0, #4]
 801bc90:	b913      	cbnz	r3, 801bc98 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801bc92:	6803      	ldr	r3, [r0, #0]
 801bc94:	b313      	cbz	r3, 801bcdc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801bc96:	6043      	str	r3, [r0, #4]
 801bc98:	7e03      	ldrb	r3, [r0, #24]
 801bc9a:	b143      	cbz	r3, 801bcae <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801bc9c:	6943      	ldr	r3, [r0, #20]
 801bc9e:	b12b      	cbz	r3, 801bcac <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801bca0:	881a      	ldrh	r2, [r3, #0]
 801bca2:	b11a      	cbz	r2, 801bcac <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801bca4:	1c9a      	adds	r2, r3, #2
 801bca6:	6142      	str	r2, [r0, #20]
 801bca8:	8818      	ldrh	r0, [r3, #0]
 801bcaa:	bd30      	pop	{r4, r5, pc}
 801bcac:	7605      	strb	r5, [r0, #24]
 801bcae:	6843      	ldr	r3, [r0, #4]
 801bcb0:	8819      	ldrh	r1, [r3, #0]
 801bcb2:	b199      	cbz	r1, 801bcdc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801bcb4:	1c9a      	adds	r2, r3, #2
 801bcb6:	2902      	cmp	r1, #2
 801bcb8:	6042      	str	r2, [r0, #4]
 801bcba:	d1f5      	bne.n	801bca8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801bcbc:	7c03      	ldrb	r3, [r0, #16]
 801bcbe:	2b01      	cmp	r3, #1
 801bcc0:	d8e5      	bhi.n	801bc8e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801bcc2:	1c5a      	adds	r2, r3, #1
 801bcc4:	7402      	strb	r2, [r0, #16]
 801bcc6:	3302      	adds	r3, #2
 801bcc8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801bccc:	6143      	str	r3, [r0, #20]
 801bcce:	2b00      	cmp	r3, #0
 801bcd0:	d0dd      	beq.n	801bc8e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801bcd2:	881b      	ldrh	r3, [r3, #0]
 801bcd4:	2b00      	cmp	r3, #0
 801bcd6:	d0da      	beq.n	801bc8e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801bcd8:	7604      	strb	r4, [r0, #24]
 801bcda:	e7d8      	b.n	801bc8e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801bcdc:	2000      	movs	r0, #0
 801bcde:	e7e4      	b.n	801bcaa <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801bce0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801bce0:	6001      	str	r1, [r0, #0]
 801bce2:	2100      	movs	r1, #0
 801bce4:	b430      	push	{r4, r5}
 801bce6:	6041      	str	r1, [r0, #4]
 801bce8:	6815      	ldr	r5, [r2, #0]
 801bcea:	6085      	str	r5, [r0, #8]
 801bcec:	6852      	ldr	r2, [r2, #4]
 801bcee:	6443      	str	r3, [r0, #68]	@ 0x44
 801bcf0:	9b02      	ldr	r3, [sp, #8]
 801bcf2:	60c2      	str	r2, [r0, #12]
 801bcf4:	7401      	strb	r1, [r0, #16]
 801bcf6:	6141      	str	r1, [r0, #20]
 801bcf8:	7601      	strb	r1, [r0, #24]
 801bcfa:	8701      	strh	r1, [r0, #56]	@ 0x38
 801bcfc:	8401      	strh	r1, [r0, #32]
 801bcfe:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 801bd02:	6483      	str	r3, [r0, #72]	@ 0x48
 801bd04:	bc30      	pop	{r4, r5}
 801bd06:	f7f5 b931 	b.w	8010f6c <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801bd0a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801bd0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bd0c:	4605      	mov	r5, r0
 801bd0e:	4608      	mov	r0, r1
 801bd10:	b1e9      	cbz	r1, 801bd4e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 801bd12:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 801bd16:	460b      	mov	r3, r1
 801bd18:	4622      	mov	r2, r4
 801bd1a:	f101 0708 	add.w	r7, r1, #8
 801bd1e:	4626      	mov	r6, r4
 801bd20:	6818      	ldr	r0, [r3, #0]
 801bd22:	6859      	ldr	r1, [r3, #4]
 801bd24:	3308      	adds	r3, #8
 801bd26:	c603      	stmia	r6!, {r0, r1}
 801bd28:	42bb      	cmp	r3, r7
 801bd2a:	4634      	mov	r4, r6
 801bd2c:	d1f7      	bne.n	801bd1e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801bd2e:	6818      	ldr	r0, [r3, #0]
 801bd30:	6030      	str	r0, [r6, #0]
 801bd32:	4610      	mov	r0, r2
 801bd34:	889b      	ldrh	r3, [r3, #4]
 801bd36:	80b3      	strh	r3, [r6, #4]
 801bd38:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 801bd3c:	015b      	lsls	r3, r3, #5
 801bd3e:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801bd42:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 801bd46:	430b      	orrs	r3, r1
 801bd48:	425b      	negs	r3, r3
 801bd4a:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 801bd4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801bd50 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801bd50:	b538      	push	{r3, r4, r5, lr}
 801bd52:	460c      	mov	r4, r1
 801bd54:	6811      	ldr	r1, [r2, #0]
 801bd56:	4610      	mov	r0, r2
 801bd58:	68cd      	ldr	r5, [r1, #12]
 801bd5a:	4619      	mov	r1, r3
 801bd5c:	47a8      	blx	r5
 801bd5e:	2800      	cmp	r0, #0
 801bd60:	bf08      	it	eq
 801bd62:	4620      	moveq	r0, r4
 801bd64:	bd38      	pop	{r3, r4, r5, pc}
	...

0801bd68 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801bd68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bd6c:	468c      	mov	ip, r1
 801bd6e:	4605      	mov	r5, r0
 801bd70:	4614      	mov	r4, r2
 801bd72:	b942      	cbnz	r2, 801bd86 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 801bd74:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 801bd78:	f8a5 205c 	strh.w	r2, [r5, #92]	@ 0x5c
 801bd7c:	f8a5 205e 	strh.w	r2, [r5, #94]	@ 0x5e
 801bd80:	4620      	mov	r0, r4
 801bd82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bd86:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 801bd8a:	7b50      	ldrb	r0, [r2, #13]
 801bd8c:	8893      	ldrh	r3, [r2, #4]
 801bd8e:	0106      	lsls	r6, r0, #4
 801bd90:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801bd94:	79e6      	ldrb	r6, [r4, #7]
 801bd96:	4316      	orrs	r6, r2
 801bd98:	185a      	adds	r2, r3, r1
 801bd9a:	b291      	uxth	r1, r2
 801bd9c:	291d      	cmp	r1, #29
 801bd9e:	b2b7      	uxth	r7, r6
 801bda0:	d87d      	bhi.n	801be9e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x136>
 801bda2:	2201      	movs	r2, #1
 801bda4:	408a      	lsls	r2, r1
 801bda6:	498a      	ldr	r1, [pc, #552]	@ (801bfd0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x268>)
 801bda8:	10f6      	asrs	r6, r6, #3
 801bdaa:	420a      	tst	r2, r1
 801bdac:	d12d      	bne.n	801be0a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa2>
 801bdae:	f412 7f60 	tst.w	r2, #896	@ 0x380
 801bdb2:	d074      	beq.n	801be9e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x136>
 801bdb4:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 801bdb8:	4623      	mov	r3, r4
 801bdba:	f104 0e08 	add.w	lr, r4, #8
 801bdbe:	4614      	mov	r4, r2
 801bdc0:	4694      	mov	ip, r2
 801bdc2:	6818      	ldr	r0, [r3, #0]
 801bdc4:	6859      	ldr	r1, [r3, #4]
 801bdc6:	3308      	adds	r3, #8
 801bdc8:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801bdcc:	4573      	cmp	r3, lr
 801bdce:	4662      	mov	r2, ip
 801bdd0:	d1f6      	bne.n	801bdc0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801bdd2:	6818      	ldr	r0, [r3, #0]
 801bdd4:	f8cc 0000 	str.w	r0, [ip]
 801bdd8:	889b      	ldrh	r3, [r3, #4]
 801bdda:	f8ac 3004 	strh.w	r3, [ip, #4]
 801bdde:	f8b5 105c 	ldrh.w	r1, [r5, #92]	@ 0x5c
 801bde2:	b2b3      	uxth	r3, r6
 801bde4:	1aca      	subs	r2, r1, r3
 801bde6:	b292      	uxth	r2, r2
 801bde8:	f895 0059 	ldrb.w	r0, [r5, #89]	@ 0x59
 801bdec:	f885 2054 	strb.w	r2, [r5, #84]	@ 0x54
 801bdf0:	10d2      	asrs	r2, r2, #3
 801bdf2:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 801bdf6:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 801bdfa:	4302      	orrs	r2, r0
 801bdfc:	1bcf      	subs	r7, r1, r7
 801bdfe:	f885 2059 	strb.w	r2, [r5, #89]	@ 0x59
 801be02:	1afb      	subs	r3, r7, r3
 801be04:	f8a5 305c 	strh.w	r3, [r5, #92]	@ 0x5c
 801be08:	e7ba      	b.n	801bd80 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 801be0a:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 801be0e:	4623      	mov	r3, r4
 801be10:	f104 0808 	add.w	r8, r4, #8
 801be14:	4614      	mov	r4, r2
 801be16:	4696      	mov	lr, r2
 801be18:	6818      	ldr	r0, [r3, #0]
 801be1a:	6859      	ldr	r1, [r3, #4]
 801be1c:	3308      	adds	r3, #8
 801be1e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801be22:	4543      	cmp	r3, r8
 801be24:	4672      	mov	r2, lr
 801be26:	d1f6      	bne.n	801be16 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xae>
 801be28:	6818      	ldr	r0, [r3, #0]
 801be2a:	f8ce 0000 	str.w	r0, [lr]
 801be2e:	889b      	ldrh	r3, [r3, #4]
 801be30:	f8ae 3004 	strh.w	r3, [lr, #4]
 801be34:	8eeb      	ldrh	r3, [r5, #54]	@ 0x36
 801be36:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 801be3a:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 801be3c:	f640 6333 	movw	r3, #3635	@ 0xe33
 801be40:	4299      	cmp	r1, r3
 801be42:	d111      	bne.n	801be68 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x100>
 801be44:	f8dc 3000 	ldr.w	r3, [ip]
 801be48:	4660      	mov	r0, ip
 801be4a:	68db      	ldr	r3, [r3, #12]
 801be4c:	4798      	blx	r3
 801be4e:	7b41      	ldrb	r1, [r0, #13]
 801be50:	00cb      	lsls	r3, r1, #3
 801be52:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801be56:	7a03      	ldrb	r3, [r0, #8]
 801be58:	4313      	orrs	r3, r2
 801be5a:	064a      	lsls	r2, r1, #25
 801be5c:	bf44      	itt	mi
 801be5e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801be62:	b21b      	sxthmi	r3, r3
 801be64:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 801be68:	f8b5 305a 	ldrh.w	r3, [r5, #90]	@ 0x5a
 801be6c:	f895 2059 	ldrb.w	r2, [r5, #89]	@ 0x59
 801be70:	443b      	add	r3, r7
 801be72:	4433      	add	r3, r6
 801be74:	b29b      	uxth	r3, r3
 801be76:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 801be7a:	f885 3054 	strb.w	r3, [r5, #84]	@ 0x54
 801be7e:	10db      	asrs	r3, r3, #3
 801be80:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801be84:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801be88:	4313      	orrs	r3, r2
 801be8a:	f885 3059 	strb.w	r3, [r5, #89]	@ 0x59
 801be8e:	f895 205e 	ldrb.w	r2, [r5, #94]	@ 0x5e
 801be92:	f895 3055 	ldrb.w	r3, [r5, #85]	@ 0x55
 801be96:	1a9b      	subs	r3, r3, r2
 801be98:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 801be9c:	e770      	b.n	801bd80 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 801be9e:	f640 611b 	movw	r1, #3611	@ 0xe1b
 801bea2:	f023 0204 	bic.w	r2, r3, #4
 801bea6:	428a      	cmp	r2, r1
 801bea8:	d003      	beq.n	801beb2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14a>
 801beaa:	f640 621d 	movw	r2, #3613	@ 0xe1d
 801beae:	4293      	cmp	r3, r2
 801beb0:	d137      	bne.n	801bf22 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 801beb2:	f105 064c 	add.w	r6, r5, #76	@ 0x4c
 801beb6:	4622      	mov	r2, r4
 801beb8:	f104 0808 	add.w	r8, r4, #8
 801bebc:	4634      	mov	r4, r6
 801bebe:	46b6      	mov	lr, r6
 801bec0:	6810      	ldr	r0, [r2, #0]
 801bec2:	6851      	ldr	r1, [r2, #4]
 801bec4:	3208      	adds	r2, #8
 801bec6:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801beca:	4542      	cmp	r2, r8
 801becc:	4676      	mov	r6, lr
 801bece:	d1f6      	bne.n	801bebe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x156>
 801bed0:	6810      	ldr	r0, [r2, #0]
 801bed2:	3b01      	subs	r3, #1
 801bed4:	f8ce 0000 	str.w	r0, [lr]
 801bed8:	8892      	ldrh	r2, [r2, #4]
 801beda:	b29b      	uxth	r3, r3
 801bedc:	f8ae 2004 	strh.w	r2, [lr, #4]
 801bee0:	4621      	mov	r1, r4
 801bee2:	4662      	mov	r2, ip
 801bee4:	4628      	mov	r0, r5
 801bee6:	f7ff ff33 	bl	801bd50 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801beea:	7b41      	ldrb	r1, [r0, #13]
 801beec:	00cb      	lsls	r3, r1, #3
 801beee:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801bef2:	7a03      	ldrb	r3, [r0, #8]
 801bef4:	0648      	lsls	r0, r1, #25
 801bef6:	ea43 0302 	orr.w	r3, r3, r2
 801befa:	bf44      	itt	mi
 801befc:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801bf00:	b21b      	sxthmi	r3, r3
 801bf02:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 801bf06:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 801bf0a:	f895 2056 	ldrb.w	r2, [r5, #86]	@ 0x56
 801bf0e:	005b      	lsls	r3, r3, #1
 801bf10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801bf14:	4313      	orrs	r3, r2
 801bf16:	115a      	asrs	r2, r3, #5
 801bf18:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801bf1c:	f8a5 305e 	strh.w	r3, [r5, #94]	@ 0x5e
 801bf20:	e046      	b.n	801bfb0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x248>
 801bf22:	00c2      	lsls	r2, r0, #3
 801bf24:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 801bf28:	7a22      	ldrb	r2, [r4, #8]
 801bf2a:	430a      	orrs	r2, r1
 801bf2c:	0641      	lsls	r1, r0, #25
 801bf2e:	f640 6109 	movw	r1, #3593	@ 0xe09
 801bf32:	bf44      	itt	mi
 801bf34:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 801bf38:	b212      	sxthmi	r2, r2
 801bf3a:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 801bf3e:	f023 0210 	bic.w	r2, r3, #16
 801bf42:	428a      	cmp	r2, r1
 801bf44:	d003      	beq.n	801bf4e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e6>
 801bf46:	f640 6213 	movw	r2, #3603	@ 0xe13
 801bf4a:	4293      	cmp	r3, r2
 801bf4c:	d13d      	bne.n	801bfca <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x262>
 801bf4e:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 801bf52:	4696      	mov	lr, r2
 801bf54:	f104 0808 	add.w	r8, r4, #8
 801bf58:	4616      	mov	r6, r2
 801bf5a:	6820      	ldr	r0, [r4, #0]
 801bf5c:	6861      	ldr	r1, [r4, #4]
 801bf5e:	3408      	adds	r4, #8
 801bf60:	c603      	stmia	r6!, {r0, r1}
 801bf62:	4544      	cmp	r4, r8
 801bf64:	4632      	mov	r2, r6
 801bf66:	d1f7      	bne.n	801bf58 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f0>
 801bf68:	6820      	ldr	r0, [r4, #0]
 801bf6a:	6030      	str	r0, [r6, #0]
 801bf6c:	88a1      	ldrh	r1, [r4, #4]
 801bf6e:	4628      	mov	r0, r5
 801bf70:	80b1      	strh	r1, [r6, #4]
 801bf72:	f895 6059 	ldrb.w	r6, [r5, #89]	@ 0x59
 801bf76:	4671      	mov	r1, lr
 801bf78:	0076      	lsls	r6, r6, #1
 801bf7a:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801bf7e:	f895 6056 	ldrb.w	r6, [r5, #86]	@ 0x56
 801bf82:	4674      	mov	r4, lr
 801bf84:	4316      	orrs	r6, r2
 801bf86:	f640 6213 	movw	r2, #3603	@ 0xe13
 801bf8a:	4293      	cmp	r3, r2
 801bf8c:	bf1a      	itte	ne
 801bf8e:	f103 33ff 	addne.w	r3, r3, #4294967295
 801bf92:	b29b      	uxthne	r3, r3
 801bf94:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 801bf98:	4662      	mov	r2, ip
 801bf9a:	f7ff fed9 	bl	801bd50 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801bf9e:	7b43      	ldrb	r3, [r0, #13]
 801bfa0:	7a82      	ldrb	r2, [r0, #10]
 801bfa2:	005b      	lsls	r3, r3, #1
 801bfa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801bfa8:	4313      	orrs	r3, r2
 801bfaa:	1af6      	subs	r6, r6, r3
 801bfac:	f8a5 605e 	strh.w	r6, [r5, #94]	@ 0x5e
 801bfb0:	7b61      	ldrb	r1, [r4, #13]
 801bfb2:	00cb      	lsls	r3, r1, #3
 801bfb4:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801bfb8:	7a23      	ldrb	r3, [r4, #8]
 801bfba:	4313      	orrs	r3, r2
 801bfbc:	064a      	lsls	r2, r1, #25
 801bfbe:	bf44      	itt	mi
 801bfc0:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801bfc4:	b21b      	sxthmi	r3, r3
 801bfc6:	1bdb      	subs	r3, r3, r7
 801bfc8:	e71c      	b.n	801be04 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9c>
 801bfca:	2300      	movs	r3, #0
 801bfcc:	e7a6      	b.n	801bf1c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b4>
 801bfce:	bf00      	nop
 801bfd0:	3fc00079 	.word	0x3fc00079

0801bfd4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801bfd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bfd8:	4604      	mov	r4, r0
 801bfda:	b942      	cbnz	r2, 801bfee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801bfdc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801bfe0:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 801bfe4:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 801bfe8:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 801bfec:	e047      	b.n	801c07e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801bfee:	7b51      	ldrb	r1, [r2, #13]
 801bff0:	8893      	ldrh	r3, [r2, #4]
 801bff2:	010d      	lsls	r5, r1, #4
 801bff4:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 801bff8:	79d5      	ldrb	r5, [r2, #7]
 801bffa:	4305      	orrs	r5, r0
 801bffc:	2d04      	cmp	r5, #4
 801bffe:	bfcc      	ite	gt
 801c000:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801c004:	f04f 0e01 	movle.w	lr, #1
 801c008:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 801c00c:	f200 80ab 	bhi.w	801c166 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801c010:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 801c014:	4283      	cmp	r3, r0
 801c016:	d216      	bcs.n	801c046 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c018:	f240 605b 	movw	r0, #1627	@ 0x65b
 801c01c:	4283      	cmp	r3, r0
 801c01e:	d859      	bhi.n	801c0d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801c020:	f240 6057 	movw	r0, #1623	@ 0x657
 801c024:	4283      	cmp	r3, r0
 801c026:	d20e      	bcs.n	801c046 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c028:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801c02c:	d24a      	bcs.n	801c0c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801c02e:	f240 604e 	movw	r0, #1614	@ 0x64e
 801c032:	4283      	cmp	r3, r0
 801c034:	d207      	bcs.n	801c046 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c036:	f240 601a 	movw	r0, #1562	@ 0x61a
 801c03a:	4283      	cmp	r3, r0
 801c03c:	d02a      	beq.n	801c094 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c03e:	d821      	bhi.n	801c084 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801c040:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 801c044:	d35b      	bcc.n	801c0fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801c046:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 801c04a:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801c04e:	f040 80d0 	bne.w	801c1f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801c052:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 801c056:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801c05a:	f040 80ca 	bne.w	801c1f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801c05e:	00cb      	lsls	r3, r1, #3
 801c060:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801c064:	7a13      	ldrb	r3, [r2, #8]
 801c066:	0649      	lsls	r1, r1, #25
 801c068:	ea43 0300 	orr.w	r3, r3, r0
 801c06c:	bf44      	itt	mi
 801c06e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801c072:	b21b      	sxthmi	r3, r3
 801c074:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801c078:	1b5d      	subs	r5, r3, r5
 801c07a:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801c07e:	4610      	mov	r0, r2
 801c080:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c084:	f240 604b 	movw	r0, #1611	@ 0x64b
 801c088:	4283      	cmp	r3, r0
 801c08a:	d338      	bcc.n	801c0fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801c08c:	f240 604c 	movw	r0, #1612	@ 0x64c
 801c090:	4283      	cmp	r3, r0
 801c092:	d9d8      	bls.n	801c046 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c094:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 801c098:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 801c09c:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801c0a0:	f040 80f2 	bne.w	801c288 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 801c0a4:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801c0a8:	f040 80ee 	bne.w	801c288 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 801c0ac:	00cb      	lsls	r3, r1, #3
 801c0ae:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801c0b2:	7a13      	ldrb	r3, [r2, #8]
 801c0b4:	064e      	lsls	r6, r1, #25
 801c0b6:	ea43 0300 	orr.w	r3, r3, r0
 801c0ba:	bf44      	itt	mi
 801c0bc:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801c0c0:	b21b      	sxthmi	r3, r3
 801c0c2:	e7d9      	b.n	801c078 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801c0c4:	f240 6054 	movw	r0, #1620	@ 0x654
 801c0c8:	4283      	cmp	r3, r0
 801c0ca:	d8e3      	bhi.n	801c094 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c0cc:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801c0d0:	d9e0      	bls.n	801c094 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c0d2:	e7b8      	b.n	801c046 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c0d4:	f240 6074 	movw	r0, #1652	@ 0x674
 801c0d8:	4283      	cmp	r3, r0
 801c0da:	d0b4      	beq.n	801c046 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c0dc:	d82d      	bhi.n	801c13a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801c0de:	f240 605e 	movw	r0, #1630	@ 0x65e
 801c0e2:	4283      	cmp	r3, r0
 801c0e4:	d804      	bhi.n	801c0f0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801c0e6:	f240 605d 	movw	r0, #1629	@ 0x65d
 801c0ea:	4283      	cmp	r3, r0
 801c0ec:	d3d2      	bcc.n	801c094 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c0ee:	e7aa      	b.n	801c046 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c0f0:	f240 605f 	movw	r0, #1631	@ 0x65f
 801c0f4:	4283      	cmp	r3, r0
 801c0f6:	d0cd      	beq.n	801c094 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c0f8:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 801c0fc:	d0a3      	beq.n	801c046 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c0fe:	00cb      	lsls	r3, r1, #3
 801c100:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801c104:	7a13      	ldrb	r3, [r2, #8]
 801c106:	0649      	lsls	r1, r1, #25
 801c108:	ea43 0300 	orr.w	r3, r3, r0
 801c10c:	bf44      	itt	mi
 801c10e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801c112:	b21b      	sxthmi	r3, r3
 801c114:	1b5d      	subs	r5, r3, r5
 801c116:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801c11a:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801c11e:	7b53      	ldrb	r3, [r2, #13]
 801c120:	015b      	lsls	r3, r3, #5
 801c122:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801c126:	7993      	ldrb	r3, [r2, #6]
 801c128:	430b      	orrs	r3, r1
 801c12a:	2105      	movs	r1, #5
 801c12c:	005b      	lsls	r3, r3, #1
 801c12e:	fb93 f3f1 	sdiv	r3, r3, r1
 801c132:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801c136:	440b      	add	r3, r1
 801c138:	e756      	b.n	801bfe8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801c13a:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 801c13e:	4283      	cmp	r3, r0
 801c140:	d809      	bhi.n	801c156 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801c142:	f240 60df 	movw	r0, #1759	@ 0x6df
 801c146:	4283      	cmp	r3, r0
 801c148:	f4bf af7d 	bcs.w	801c046 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c14c:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 801c150:	2b05      	cmp	r3, #5
 801c152:	d8d4      	bhi.n	801c0fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801c154:	e777      	b.n	801c046 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c156:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 801c15a:	4283      	cmp	r3, r0
 801c15c:	d09a      	beq.n	801c094 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c15e:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 801c162:	4283      	cmp	r3, r0
 801c164:	e7ca      	b.n	801c0fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801c166:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 801c16a:	d22b      	bcs.n	801c1c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801c16c:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 801c170:	4283      	cmp	r3, r0
 801c172:	d28f      	bcs.n	801c094 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c174:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801c178:	4283      	cmp	r3, r0
 801c17a:	d816      	bhi.n	801c1aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801c17c:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 801c180:	4283      	cmp	r3, r0
 801c182:	f4bf af60 	bcs.w	801c046 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c186:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 801c18a:	4283      	cmp	r3, r0
 801c18c:	d80a      	bhi.n	801c1a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801c18e:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 801c192:	4283      	cmp	r3, r0
 801c194:	f4bf af57 	bcs.w	801c046 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c198:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 801c19c:	4283      	cmp	r3, r0
 801c19e:	f43f af79 	beq.w	801c094 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c1a2:	e7ac      	b.n	801c0fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801c1a4:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 801c1a8:	e7f8      	b.n	801c19c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801c1aa:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 801c1ae:	4283      	cmp	r3, r0
 801c1b0:	d802      	bhi.n	801c1b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801c1b2:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801c1b6:	e798      	b.n	801c0ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801c1b8:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 801c1bc:	4283      	cmp	r3, r0
 801c1be:	f47f af42 	bne.w	801c046 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c1c2:	e767      	b.n	801c094 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c1c4:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 801c1c8:	4283      	cmp	r3, r0
 801c1ca:	f43f af63 	beq.w	801c094 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c1ce:	d802      	bhi.n	801c1d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801c1d0:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 801c1d4:	e7f2      	b.n	801c1bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801c1d6:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 801c1da:	4283      	cmp	r3, r0
 801c1dc:	d805      	bhi.n	801c1ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801c1de:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 801c1e2:	4283      	cmp	r3, r0
 801c1e4:	f4ff af2f 	bcc.w	801c046 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c1e8:	e754      	b.n	801c094 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c1ea:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 801c1ee:	4283      	cmp	r3, r0
 801c1f0:	e7af      	b.n	801c152 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801c1f2:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801c1f6:	4617      	mov	r7, r2
 801c1f8:	4666      	mov	r6, ip
 801c1fa:	f102 0808 	add.w	r8, r2, #8
 801c1fe:	46e6      	mov	lr, ip
 801c200:	6838      	ldr	r0, [r7, #0]
 801c202:	6879      	ldr	r1, [r7, #4]
 801c204:	3708      	adds	r7, #8
 801c206:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801c20a:	4547      	cmp	r7, r8
 801c20c:	46f4      	mov	ip, lr
 801c20e:	d1f6      	bne.n	801c1fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801c210:	6838      	ldr	r0, [r7, #0]
 801c212:	f8ce 0000 	str.w	r0, [lr]
 801c216:	88b9      	ldrh	r1, [r7, #4]
 801c218:	f8ae 1004 	strh.w	r1, [lr, #4]
 801c21c:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801c220:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801c224:	d009      	beq.n	801c23a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801c226:	7b51      	ldrb	r1, [r2, #13]
 801c228:	7992      	ldrb	r2, [r2, #6]
 801c22a:	0149      	lsls	r1, r1, #5
 801c22c:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801c230:	4311      	orrs	r1, r2
 801c232:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801c236:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801c23a:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801c23e:	b2ad      	uxth	r5, r5
 801c240:	d00d      	beq.n	801c25e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 801c242:	442b      	add	r3, r5
 801c244:	b29b      	uxth	r3, r3
 801c246:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801c24a:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801c24e:	10db      	asrs	r3, r3, #3
 801c250:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801c254:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801c258:	4313      	orrs	r3, r2
 801c25a:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801c25e:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801c262:	00cb      	lsls	r3, r1, #3
 801c264:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801c268:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801c26c:	064f      	lsls	r7, r1, #25
 801c26e:	ea43 0302 	orr.w	r3, r3, r2
 801c272:	bf44      	itt	mi
 801c274:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801c278:	b21b      	sxthmi	r3, r3
 801c27a:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801c27e:	1b5b      	subs	r3, r3, r5
 801c280:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 801c284:	4632      	mov	r2, r6
 801c286:	e6fa      	b.n	801c07e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801c288:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801c28c:	4617      	mov	r7, r2
 801c28e:	4666      	mov	r6, ip
 801c290:	f102 0908 	add.w	r9, r2, #8
 801c294:	46e0      	mov	r8, ip
 801c296:	6838      	ldr	r0, [r7, #0]
 801c298:	6879      	ldr	r1, [r7, #4]
 801c29a:	3708      	adds	r7, #8
 801c29c:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801c2a0:	454f      	cmp	r7, r9
 801c2a2:	46c4      	mov	ip, r8
 801c2a4:	d1f6      	bne.n	801c294 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 801c2a6:	6838      	ldr	r0, [r7, #0]
 801c2a8:	f8c8 0000 	str.w	r0, [r8]
 801c2ac:	88b9      	ldrh	r1, [r7, #4]
 801c2ae:	f8a8 1004 	strh.w	r1, [r8, #4]
 801c2b2:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801c2b6:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801c2ba:	d009      	beq.n	801c2d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 801c2bc:	7b51      	ldrb	r1, [r2, #13]
 801c2be:	7992      	ldrb	r2, [r2, #6]
 801c2c0:	0149      	lsls	r1, r1, #5
 801c2c2:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801c2c6:	4311      	orrs	r1, r2
 801c2c8:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801c2cc:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801c2d0:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801c2d4:	d00e      	beq.n	801c2f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 801c2d6:	eba3 030e 	sub.w	r3, r3, lr
 801c2da:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801c2de:	b29b      	uxth	r3, r3
 801c2e0:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801c2e4:	10db      	asrs	r3, r3, #3
 801c2e6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801c2ea:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801c2ee:	4313      	orrs	r3, r2
 801c2f0:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801c2f4:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801c2f8:	00cb      	lsls	r3, r1, #3
 801c2fa:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801c2fe:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801c302:	0648      	lsls	r0, r1, #25
 801c304:	ea43 0302 	orr.w	r3, r3, r2
 801c308:	bf44      	itt	mi
 801c30a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801c30e:	b21b      	sxthmi	r3, r3
 801c310:	1b5d      	subs	r5, r3, r5
 801c312:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801c316:	e7b5      	b.n	801c284 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

0801c318 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801c318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c31c:	461e      	mov	r6, r3
 801c31e:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801c320:	4604      	mov	r4, r0
 801c322:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801c326:	4617      	mov	r7, r2
 801c328:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801c32c:	f7f4 fd78 	bl	8010e20 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801c330:	4605      	mov	r5, r0
 801c332:	b918      	cbnz	r0, 801c33c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801c334:	6030      	str	r0, [r6, #0]
 801c336:	4628      	mov	r0, r5
 801c338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c33c:	683b      	ldr	r3, [r7, #0]
 801c33e:	4601      	mov	r1, r0
 801c340:	68db      	ldr	r3, [r3, #12]
 801c342:	4638      	mov	r0, r7
 801c344:	4798      	blx	r3
 801c346:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801c34a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801c34e:	4602      	mov	r2, r0
 801c350:	6030      	str	r0, [r6, #0]
 801c352:	d213      	bcs.n	801c37c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801c354:	4643      	mov	r3, r8
 801c356:	4639      	mov	r1, r7
 801c358:	4620      	mov	r0, r4
 801c35a:	f7ff fe3b 	bl	801bfd4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801c35e:	6030      	str	r0, [r6, #0]
 801c360:	6833      	ldr	r3, [r6, #0]
 801c362:	b143      	cbz	r3, 801c376 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801c364:	7b5a      	ldrb	r2, [r3, #13]
 801c366:	7a9b      	ldrb	r3, [r3, #10]
 801c368:	0052      	lsls	r2, r2, #1
 801c36a:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801c36e:	4313      	orrs	r3, r2
 801c370:	bf0c      	ite	eq
 801c372:	2301      	moveq	r3, #1
 801c374:	2300      	movne	r3, #0
 801c376:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 801c37a:	e7dc      	b.n	801c336 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801c37c:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 801c380:	b29b      	uxth	r3, r3
 801c382:	2b7f      	cmp	r3, #127	@ 0x7f
 801c384:	d804      	bhi.n	801c390 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801c386:	4639      	mov	r1, r7
 801c388:	4620      	mov	r0, r4
 801c38a:	f7ff fced 	bl	801bd68 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801c38e:	e7e6      	b.n	801c35e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801c390:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801c394:	2b00      	cmp	r3, #0
 801c396:	d0e3      	beq.n	801c360 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801c398:	f640 1302 	movw	r3, #2306	@ 0x902
 801c39c:	429d      	cmp	r5, r3
 801c39e:	d1df      	bne.n	801c360 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801c3a0:	4601      	mov	r1, r0
 801c3a2:	4620      	mov	r0, r4
 801c3a4:	f7ff fcb1 	bl	801bd0a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801c3a8:	e7d9      	b.n	801c35e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801c3aa <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801c3aa:	b510      	push	{r4, lr}
 801c3ac:	4604      	mov	r4, r0
 801c3ae:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 801c3b2:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801c3b4:	b1f1      	cbz	r1, 801c3f4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 801c3b6:	2b0a      	cmp	r3, #10
 801c3b8:	d02f      	beq.n	801c41a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 801c3ba:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 801c3bc:	3901      	subs	r1, #1
 801c3be:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801c3c2:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 801c3c4:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 801c3c8:	1c51      	adds	r1, r2, #1
 801c3ca:	b289      	uxth	r1, r1
 801c3cc:	2901      	cmp	r1, #1
 801c3ce:	bf84      	itt	hi
 801c3d0:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801c3d4:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 801c3d6:	f103 0201 	add.w	r2, r3, #1
 801c3da:	8722      	strh	r2, [r4, #56]	@ 0x38
 801c3dc:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801c3de:	bf98      	it	ls
 801c3e0:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 801c3e2:	4413      	add	r3, r2
 801c3e4:	b29b      	uxth	r3, r3
 801c3e6:	2b09      	cmp	r3, #9
 801c3e8:	bf88      	it	hi
 801c3ea:	3b0a      	subhi	r3, #10
 801c3ec:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c3f0:	8458      	strh	r0, [r3, #34]	@ 0x22
 801c3f2:	e7dc      	b.n	801c3ae <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801c3f4:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801c3f6:	2b0a      	cmp	r3, #10
 801c3f8:	d00f      	beq.n	801c41a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 801c3fa:	4620      	mov	r0, r4
 801c3fc:	f7ff fc44 	bl	801bc88 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801c400:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801c402:	1c5a      	adds	r2, r3, #1
 801c404:	8722      	strh	r2, [r4, #56]	@ 0x38
 801c406:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801c408:	4413      	add	r3, r2
 801c40a:	b29b      	uxth	r3, r3
 801c40c:	2b09      	cmp	r3, #9
 801c40e:	bf88      	it	hi
 801c410:	3b0a      	subhi	r3, #10
 801c412:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c416:	8458      	strh	r0, [r3, #34]	@ 0x22
 801c418:	e7ec      	b.n	801c3f4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 801c41a:	bd10      	pop	{r4, pc}

0801c41c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801c41c:	b538      	push	{r3, r4, r5, lr}
 801c41e:	4604      	mov	r4, r0
 801c420:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801c422:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801c426:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 801c428:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 801c42a:	3a01      	subs	r2, #1
 801c42c:	8702      	strh	r2, [r0, #56]	@ 0x38
 801c42e:	1c5a      	adds	r2, r3, #1
 801c430:	b292      	uxth	r2, r2
 801c432:	2a09      	cmp	r2, #9
 801c434:	bf86      	itte	hi
 801c436:	3b09      	subhi	r3, #9
 801c438:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 801c43a:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 801c43c:	f7ff ffb5 	bl	801c3aa <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801c440:	8c23      	ldrh	r3, [r4, #32]
 801c442:	2b01      	cmp	r3, #1
 801c444:	bf9c      	itt	ls
 801c446:	3301      	addls	r3, #1
 801c448:	8423      	strhls	r3, [r4, #32]
 801c44a:	8be3      	ldrh	r3, [r4, #30]
 801c44c:	b90b      	cbnz	r3, 801c452 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801c44e:	2302      	movs	r3, #2
 801c450:	83e3      	strh	r3, [r4, #30]
 801c452:	8be3      	ldrh	r3, [r4, #30]
 801c454:	4628      	mov	r0, r5
 801c456:	3b01      	subs	r3, #1
 801c458:	b29b      	uxth	r3, r3
 801c45a:	83e3      	strh	r3, [r4, #30]
 801c45c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c460:	8365      	strh	r5, [r4, #26]
 801c462:	bd38      	pop	{r3, r4, r5, pc}

0801c464 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801c464:	428a      	cmp	r2, r1
 801c466:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c46a:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 801c46c:	d931      	bls.n	801c4d2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 801c46e:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 801c470:	1a54      	subs	r4, r2, r1
 801c472:	19ee      	adds	r6, r5, r7
 801c474:	3e01      	subs	r6, #1
 801c476:	fa1f fe84 	uxth.w	lr, r4
 801c47a:	b2b4      	uxth	r4, r6
 801c47c:	eba4 090e 	sub.w	r9, r4, lr
 801c480:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 801c484:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 801c488:	fa1f f989 	uxth.w	r9, r9
 801c48c:	2c09      	cmp	r4, #9
 801c48e:	4626      	mov	r6, r4
 801c490:	bf88      	it	hi
 801c492:	f1a4 060a 	subhi.w	r6, r4, #10
 801c496:	f1bc 0f00 	cmp.w	ip, #0
 801c49a:	bf08      	it	eq
 801c49c:	f04f 0c02 	moveq.w	ip, #2
 801c4a0:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801c4a4:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c4a8:	3c01      	subs	r4, #1
 801c4aa:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 801c4ae:	fa1f fc8c 	uxth.w	ip, ip
 801c4b2:	b2a4      	uxth	r4, r4
 801c4b4:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801c4b8:	454c      	cmp	r4, r9
 801c4ba:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 801c4be:	d1e5      	bne.n	801c48c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801c4c0:	eba5 050e 	sub.w	r5, r5, lr
 801c4c4:	eb0e 0408 	add.w	r4, lr, r8
 801c4c8:	8705      	strh	r5, [r0, #56]	@ 0x38
 801c4ca:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 801c4ce:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 801c4d2:	250a      	movs	r5, #10
 801c4d4:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 801c4d6:	1a64      	subs	r4, r4, r1
 801c4d8:	4439      	add	r1, r7
 801c4da:	b289      	uxth	r1, r1
 801c4dc:	2909      	cmp	r1, #9
 801c4de:	bf88      	it	hi
 801c4e0:	390a      	subhi	r1, #10
 801c4e2:	8704      	strh	r4, [r0, #56]	@ 0x38
 801c4e4:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801c4e6:	b18a      	cbz	r2, 801c50c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 801c4e8:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 801c4ea:	3a01      	subs	r2, #1
 801c4ec:	3101      	adds	r1, #1
 801c4ee:	b292      	uxth	r2, r2
 801c4f0:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801c4f4:	8701      	strh	r1, [r0, #56]	@ 0x38
 801c4f6:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801c4f8:	b901      	cbnz	r1, 801c4fc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 801c4fa:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801c4fc:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801c4fe:	3901      	subs	r1, #1
 801c500:	b289      	uxth	r1, r1
 801c502:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801c504:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801c508:	844c      	strh	r4, [r1, #34]	@ 0x22
 801c50a:	e7ec      	b.n	801c4e6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 801c50c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c510:	f7ff bf4b 	b.w	801c3aa <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801c514 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801c514:	b570      	push	{r4, r5, r6, lr}
 801c516:	2500      	movs	r5, #0
 801c518:	4295      	cmp	r5, r2
 801c51a:	d011      	beq.n	801c540 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801c51c:	8bc4      	ldrh	r4, [r0, #30]
 801c51e:	f831 6b02 	ldrh.w	r6, [r1], #2
 801c522:	4414      	add	r4, r2
 801c524:	3c01      	subs	r4, #1
 801c526:	1b64      	subs	r4, r4, r5
 801c528:	b2a4      	uxth	r4, r4
 801c52a:	2c01      	cmp	r4, #1
 801c52c:	bf88      	it	hi
 801c52e:	3c02      	subhi	r4, #2
 801c530:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801c534:	8b64      	ldrh	r4, [r4, #26]
 801c536:	42b4      	cmp	r4, r6
 801c538:	d117      	bne.n	801c56a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801c53a:	3501      	adds	r5, #1
 801c53c:	b2ad      	uxth	r5, r5
 801c53e:	e7eb      	b.n	801c518 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801c540:	2400      	movs	r4, #0
 801c542:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801c546:	4413      	add	r3, r2
 801c548:	b2a2      	uxth	r2, r4
 801c54a:	429a      	cmp	r2, r3
 801c54c:	da0f      	bge.n	801c56e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801c54e:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 801c550:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801c554:	4432      	add	r2, r6
 801c556:	b292      	uxth	r2, r2
 801c558:	2a09      	cmp	r2, #9
 801c55a:	bf88      	it	hi
 801c55c:	3a0a      	subhi	r2, #10
 801c55e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801c562:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 801c564:	3401      	adds	r4, #1
 801c566:	42aa      	cmp	r2, r5
 801c568:	d0ee      	beq.n	801c548 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801c56a:	2000      	movs	r0, #0
 801c56c:	bd70      	pop	{r4, r5, r6, pc}
 801c56e:	2001      	movs	r0, #1
 801c570:	e7fc      	b.n	801c56c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801c572 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801c572:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c576:	4605      	mov	r5, r0
 801c578:	4616      	mov	r6, r2
 801c57a:	1c8c      	adds	r4, r1, #2
 801c57c:	8809      	ldrh	r1, [r1, #0]
 801c57e:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801c582:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801c586:	42b3      	cmp	r3, r6
 801c588:	d124      	bne.n	801c5d4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801c58a:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801c58e:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801c592:	f001 070f 	and.w	r7, r1, #15
 801c596:	f8cd 8000 	str.w	r8, [sp]
 801c59a:	464b      	mov	r3, r9
 801c59c:	4652      	mov	r2, sl
 801c59e:	4621      	mov	r1, r4
 801c5a0:	4628      	mov	r0, r5
 801c5a2:	f7ff ffb7 	bl	801c514 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801c5a6:	4683      	mov	fp, r0
 801c5a8:	b168      	cbz	r0, 801c5c6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801c5aa:	eb0a 0109 	add.w	r1, sl, r9
 801c5ae:	4441      	add	r1, r8
 801c5b0:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801c5b4:	463a      	mov	r2, r7
 801c5b6:	4649      	mov	r1, r9
 801c5b8:	4628      	mov	r0, r5
 801c5ba:	f7ff ff53 	bl	801c464 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801c5be:	4658      	mov	r0, fp
 801c5c0:	b003      	add	sp, #12
 801c5c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c5c6:	eb07 010a 	add.w	r1, r7, sl
 801c5ca:	4449      	add	r1, r9
 801c5cc:	4441      	add	r1, r8
 801c5ce:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801c5d2:	e7d2      	b.n	801c57a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801c5d4:	f04f 0b00 	mov.w	fp, #0
 801c5d8:	e7f1      	b.n	801c5be <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801c5da <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801c5da:	b570      	push	{r4, r5, r6, lr}
 801c5dc:	8810      	ldrh	r0, [r2, #0]
 801c5de:	4298      	cmp	r0, r3
 801c5e0:	d817      	bhi.n	801c612 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801c5e2:	1e48      	subs	r0, r1, #1
 801c5e4:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801c5e8:	4298      	cmp	r0, r3
 801c5ea:	d312      	bcc.n	801c612 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801c5ec:	2400      	movs	r4, #0
 801c5ee:	428c      	cmp	r4, r1
 801c5f0:	d20f      	bcs.n	801c612 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801c5f2:	1860      	adds	r0, r4, r1
 801c5f4:	1040      	asrs	r0, r0, #1
 801c5f6:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801c5fa:	0085      	lsls	r5, r0, #2
 801c5fc:	42b3      	cmp	r3, r6
 801c5fe:	d902      	bls.n	801c606 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801c600:	3001      	adds	r0, #1
 801c602:	b284      	uxth	r4, r0
 801c604:	e7f3      	b.n	801c5ee <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801c606:	d201      	bcs.n	801c60c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801c608:	b281      	uxth	r1, r0
 801c60a:	e7f0      	b.n	801c5ee <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801c60c:	442a      	add	r2, r5
 801c60e:	8850      	ldrh	r0, [r2, #2]
 801c610:	bd70      	pop	{r4, r5, r6, pc}
 801c612:	2000      	movs	r0, #0
 801c614:	e7fc      	b.n	801c610 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801c616 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801c616:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c61a:	4604      	mov	r4, r0
 801c61c:	260b      	movs	r6, #11
 801c61e:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 801c620:	886f      	ldrh	r7, [r5, #2]
 801c622:	087f      	lsrs	r7, r7, #1
 801c624:	3e01      	subs	r6, #1
 801c626:	d013      	beq.n	801c650 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801c628:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801c62a:	462a      	mov	r2, r5
 801c62c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c630:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801c634:	4639      	mov	r1, r7
 801c636:	4643      	mov	r3, r8
 801c638:	4620      	mov	r0, r4
 801c63a:	f7ff ffce 	bl	801c5da <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801c63e:	b138      	cbz	r0, 801c650 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801c640:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801c644:	4642      	mov	r2, r8
 801c646:	4620      	mov	r0, r4
 801c648:	f7ff ff93 	bl	801c572 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801c64c:	2800      	cmp	r0, #0
 801c64e:	d1e9      	bne.n	801c624 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801c650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801c654 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801c654:	b570      	push	{r4, r5, r6, lr}
 801c656:	694a      	ldr	r2, [r1, #20]
 801c658:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 801c65a:	684b      	ldr	r3, [r1, #4]
 801c65c:	1b54      	subs	r4, r2, r5
 801c65e:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 801c660:	f000 8107 	beq.w	801c872 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21e>
 801c664:	1b9b      	subs	r3, r3, r6
 801c666:	d003      	beq.n	801c670 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801c668:	2210      	movs	r2, #16
 801c66a:	4363      	muls	r3, r4
 801c66c:	fb93 f3f2 	sdiv	r3, r3, r2
 801c670:	680c      	ldr	r4, [r1, #0]
 801c672:	698a      	ldr	r2, [r1, #24]
 801c674:	1b65      	subs	r5, r4, r5
 801c676:	f000 80fe 	beq.w	801c876 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x222>
 801c67a:	1b92      	subs	r2, r2, r6
 801c67c:	d003      	beq.n	801c686 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801c67e:	2410      	movs	r4, #16
 801c680:	436a      	muls	r2, r5
 801c682:	fb92 f2f4 	sdiv	r2, r2, r4
 801c686:	1a9b      	subs	r3, r3, r2
 801c688:	ee07 3a90 	vmov	s15, r3
 801c68c:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 801c8b4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x260>
 801c690:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c694:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801c698:	ee67 7a84 	vmul.f32	s15, s15, s8
 801c69c:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801c6a0:	460a      	mov	r2, r1
 801c6a2:	eeb1 6a43 	vneg.f32	s12, s6
 801c6a6:	4603      	mov	r3, r0
 801c6a8:	f100 040c 	add.w	r4, r0, #12
 801c6ac:	edd2 7a02 	vldr	s15, [r2, #8]
 801c6b0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801c6b4:	ece3 6a01 	vstmia	r3!, {s13}
 801c6b8:	edd2 7a03 	vldr	s15, [r2, #12]
 801c6bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c6c0:	edc3 7a02 	vstr	s15, [r3, #8]
 801c6c4:	edd2 7a04 	vldr	s15, [r2, #16]
 801c6c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c6cc:	429c      	cmp	r4, r3
 801c6ce:	edc3 7a05 	vstr	s15, [r3, #20]
 801c6d2:	f102 0214 	add.w	r2, r2, #20
 801c6d6:	d1e9      	bne.n	801c6ac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801c6d8:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801c6da:	698b      	ldr	r3, [r1, #24]
 801c6dc:	edd0 4a02 	vldr	s9, [r0, #8]
 801c6e0:	1a9b      	subs	r3, r3, r2
 801c6e2:	ee07 3a90 	vmov	s15, r3
 801c6e6:	684b      	ldr	r3, [r1, #4]
 801c6e8:	edd0 3a00 	vldr	s7, [r0]
 801c6ec:	1a9b      	subs	r3, r3, r2
 801c6ee:	edd0 6a01 	vldr	s13, [r0, #4]
 801c6f2:	ee07 3a10 	vmov	s14, r3
 801c6f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c6fa:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801c6fe:	ee67 7a84 	vmul.f32	s15, s15, s8
 801c702:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801c706:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c70a:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801c70e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c712:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c716:	ee67 7a83 	vmul.f32	s15, s15, s6
 801c71a:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 801c71e:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801c720:	694a      	ldr	r2, [r1, #20]
 801c722:	ed90 5a05 	vldr	s10, [r0, #20]
 801c726:	1b13      	subs	r3, r2, r4
 801c728:	ee07 3a10 	vmov	s14, r3
 801c72c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c730:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c734:	680b      	ldr	r3, [r1, #0]
 801c736:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801c73a:	1b1b      	subs	r3, r3, r4
 801c73c:	ee07 3a10 	vmov	s14, r3
 801c740:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c744:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c748:	eee6 4a87 	vfma.f32	s9, s13, s14
 801c74c:	ee64 4a86 	vmul.f32	s9, s9, s12
 801c750:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 801c754:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801c756:	698b      	ldr	r3, [r1, #24]
 801c758:	ed90 2a03 	vldr	s4, [r0, #12]
 801c75c:	1a9b      	subs	r3, r3, r2
 801c75e:	ee06 3a90 	vmov	s13, r3
 801c762:	684b      	ldr	r3, [r1, #4]
 801c764:	edd0 5a04 	vldr	s11, [r0, #16]
 801c768:	1a9b      	subs	r3, r3, r2
 801c76a:	ee07 3a10 	vmov	s14, r3
 801c76e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801c772:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801c776:	ee66 6a84 	vmul.f32	s13, s13, s8
 801c77a:	ee32 5a45 	vsub.f32	s10, s4, s10
 801c77e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c782:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801c786:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c78a:	eee5 6a87 	vfma.f32	s13, s11, s14
 801c78e:	ee66 6a83 	vmul.f32	s13, s13, s6
 801c792:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 801c796:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801c798:	694a      	ldr	r2, [r1, #20]
 801c79a:	ed90 1a07 	vldr	s2, [r0, #28]
 801c79e:	1b13      	subs	r3, r2, r4
 801c7a0:	ee07 3a10 	vmov	s14, r3
 801c7a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c7a8:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c7ac:	680b      	ldr	r3, [r1, #0]
 801c7ae:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801c7b2:	1b1b      	subs	r3, r3, r4
 801c7b4:	ee07 3a10 	vmov	s14, r3
 801c7b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c7bc:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c7c0:	eea5 5a87 	vfma.f32	s10, s11, s14
 801c7c4:	ee25 5a06 	vmul.f32	s10, s10, s12
 801c7c8:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 801c7cc:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801c7ce:	698b      	ldr	r3, [r1, #24]
 801c7d0:	edd0 5a08 	vldr	s11, [r0, #32]
 801c7d4:	1a9b      	subs	r3, r3, r2
 801c7d6:	ee07 3a10 	vmov	s14, r3
 801c7da:	684b      	ldr	r3, [r1, #4]
 801c7dc:	edd0 2a06 	vldr	s5, [r0, #24]
 801c7e0:	1a9b      	subs	r3, r3, r2
 801c7e2:	ee01 3a90 	vmov	s3, r3
 801c7e6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c7ea:	ee31 1a65 	vsub.f32	s2, s2, s11
 801c7ee:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c7f2:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801c7f6:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801c7fa:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801c7fe:	ee61 1a84 	vmul.f32	s3, s3, s8
 801c802:	eea1 7a21 	vfma.f32	s14, s2, s3
 801c806:	ee27 7a03 	vmul.f32	s14, s14, s6
 801c80a:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801c80e:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801c810:	694a      	ldr	r2, [r1, #20]
 801c812:	1b13      	subs	r3, r2, r4
 801c814:	ee03 3a10 	vmov	s6, r3
 801c818:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801c81c:	ee23 3a04 	vmul.f32	s6, s6, s8
 801c820:	680b      	ldr	r3, [r1, #0]
 801c822:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801c826:	1b1b      	subs	r3, r3, r4
 801c828:	ee03 3a10 	vmov	s6, r3
 801c82c:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801c830:	ee23 4a04 	vmul.f32	s8, s6, s8
 801c834:	eee1 5a04 	vfma.f32	s11, s2, s8
 801c838:	ee25 6a86 	vmul.f32	s12, s11, s12
 801c83c:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801c840:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801c844:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801c848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c84c:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 801c850:	dd13      	ble.n	801c87a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801c852:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801c856:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801c85a:	eee3 7a87 	vfma.f32	s15, s7, s14
 801c85e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c866:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801c868:	dd15      	ble.n	801c896 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801c86a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801c86e:	6403      	str	r3, [r0, #64]	@ 0x40
 801c870:	bd70      	pop	{r4, r5, r6, pc}
 801c872:	4623      	mov	r3, r4
 801c874:	e6fc      	b.n	801c670 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801c876:	462a      	mov	r2, r5
 801c878:	e705      	b.n	801c686 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801c87a:	d502      	bpl.n	801c882 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22e>
 801c87c:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801c880:	e7e9      	b.n	801c856 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x202>
 801c882:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801c886:	eea3 2a85 	vfma.f32	s4, s7, s10
 801c88a:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801c88e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c892:	dade      	bge.n	801c852 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fe>
 801c894:	e7f2      	b.n	801c87c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x228>
 801c896:	d502      	bpl.n	801c89e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x24a>
 801c898:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801c89c:	e7e7      	b.n	801c86e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21a>
 801c89e:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801c8a2:	eee3 4a86 	vfma.f32	s9, s7, s12
 801c8a6:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801c8aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c8ae:	dadc      	bge.n	801c86a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x216>
 801c8b0:	e7f2      	b.n	801c898 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x244>
 801c8b2:	bf00      	nop
 801c8b4:	3d800000 	.word	0x3d800000

0801c8b8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801c8b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c8bc:	2714      	movs	r7, #20
 801c8be:	435f      	muls	r7, r3
 801c8c0:	eb02 0c07 	add.w	ip, r2, r7
 801c8c4:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801c8c8:	f115 0e0f 	adds.w	lr, r5, #15
 801c8cc:	f100 80a2 	bmi.w	801ca14 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801c8d0:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801c8d4:	2614      	movs	r6, #20
 801c8d6:	9c08      	ldr	r4, [sp, #32]
 801c8d8:	f8c0 e014 	str.w	lr, [r0, #20]
 801c8dc:	4366      	muls	r6, r4
 801c8de:	eb02 0806 	add.w	r8, r2, r6
 801c8e2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801c8e6:	f115 040f 	adds.w	r4, r5, #15
 801c8ea:	f100 809f 	bmi.w	801ca2c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801c8ee:	1124      	asrs	r4, r4, #4
 801c8f0:	eba4 040e 	sub.w	r4, r4, lr
 801c8f4:	6184      	str	r4, [r0, #24]
 801c8f6:	2c00      	cmp	r4, #0
 801c8f8:	f000 808a 	beq.w	801ca10 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801c8fc:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801c900:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801c904:	5995      	ldr	r5, [r2, r6]
 801c906:	eba4 0809 	sub.w	r8, r4, r9
 801c90a:	59d4      	ldr	r4, [r2, r7]
 801c90c:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801c910:	eba5 0a04 	sub.w	sl, r5, r4
 801c914:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801c918:	fb0e fe05 	mul.w	lr, lr, r5
 801c91c:	fb0a ee19 	mls	lr, sl, r9, lr
 801c920:	fb08 e404 	mla	r4, r8, r4, lr
 801c924:	3c01      	subs	r4, #1
 801c926:	19a4      	adds	r4, r4, r6
 801c928:	f100 808c 	bmi.w	801ca44 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801c92c:	fb94 fef6 	sdiv	lr, r4, r6
 801c930:	fb06 441e 	mls	r4, r6, lr, r4
 801c934:	f8c0 e000 	str.w	lr, [r0]
 801c938:	6104      	str	r4, [r0, #16]
 801c93a:	2d00      	cmp	r5, #0
 801c93c:	f2c0 8095 	blt.w	801ca6a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801c940:	fb95 f4f6 	sdiv	r4, r5, r6
 801c944:	fb06 5514 	mls	r5, r6, r4, r5
 801c948:	6044      	str	r4, [r0, #4]
 801c94a:	6085      	str	r5, [r0, #8]
 801c94c:	60c6      	str	r6, [r0, #12]
 801c94e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801c952:	6945      	ldr	r5, [r0, #20]
 801c954:	59d2      	ldr	r2, [r2, r7]
 801c956:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801c95a:	ee07 4a10 	vmov	s14, r4
 801c95e:	6804      	ldr	r4, [r0, #0]
 801c960:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 801ca8c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801c964:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801c968:	ee07 2a90 	vmov	s15, r2
 801c96c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c970:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c974:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801c978:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801c97c:	ee27 7a26 	vmul.f32	s14, s14, s13
 801c980:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c984:	edd3 6a00 	vldr	s13, [r3]
 801c988:	eee6 6a07 	vfma.f32	s13, s12, s14
 801c98c:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 801c990:	eee6 6a27 	vfma.f32	s13, s12, s15
 801c994:	edc0 6a07 	vstr	s13, [r0, #28]
 801c998:	edd0 6a01 	vldr	s13, [r0, #4]
 801c99c:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 801c9a0:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801c9a4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801c9a8:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801c9ac:	ed80 6a08 	vstr	s12, [r0, #32]
 801c9b0:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 801c9b2:	6242      	str	r2, [r0, #36]	@ 0x24
 801c9b4:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 801c9b8:	ed93 6a03 	vldr	s12, [r3, #12]
 801c9bc:	eea5 6a87 	vfma.f32	s12, s11, s14
 801c9c0:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801c9c4:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801c9c8:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 801c9cc:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801c9d0:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 801c9d4:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801c9d8:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 801c9dc:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801c9de:	6302      	str	r2, [r0, #48]	@ 0x30
 801c9e0:	ed93 6a06 	vldr	s12, [r3, #24]
 801c9e4:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 801c9e8:	eea5 6a87 	vfma.f32	s12, s11, s14
 801c9ec:	eeb0 7a46 	vmov.f32	s14, s12
 801c9f0:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 801c9f4:	eea6 7a27 	vfma.f32	s14, s12, s15
 801c9f8:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801c9fc:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 801ca00:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 801ca04:	eee6 7a87 	vfma.f32	s15, s13, s14
 801ca08:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 801ca0c:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801ca0e:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801ca10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ca14:	2410      	movs	r4, #16
 801ca16:	f1c5 0501 	rsb	r5, r5, #1
 801ca1a:	f015 050f 	ands.w	r5, r5, #15
 801ca1e:	fb9e fef4 	sdiv	lr, lr, r4
 801ca22:	bf18      	it	ne
 801ca24:	2501      	movne	r5, #1
 801ca26:	ebae 0e05 	sub.w	lr, lr, r5
 801ca2a:	e753      	b.n	801c8d4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801ca2c:	f04f 0910 	mov.w	r9, #16
 801ca30:	f1c5 0501 	rsb	r5, r5, #1
 801ca34:	f015 050f 	ands.w	r5, r5, #15
 801ca38:	fb94 f4f9 	sdiv	r4, r4, r9
 801ca3c:	bf18      	it	ne
 801ca3e:	2501      	movne	r5, #1
 801ca40:	1b64      	subs	r4, r4, r5
 801ca42:	e755      	b.n	801c8f0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801ca44:	4264      	negs	r4, r4
 801ca46:	fb94 fef6 	sdiv	lr, r4, r6
 801ca4a:	fb06 441e 	mls	r4, r6, lr, r4
 801ca4e:	f1ce 0800 	rsb	r8, lr, #0
 801ca52:	f8c0 8000 	str.w	r8, [r0]
 801ca56:	6104      	str	r4, [r0, #16]
 801ca58:	2c00      	cmp	r4, #0
 801ca5a:	f43f af6e 	beq.w	801c93a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801ca5e:	ea6f 0e0e 	mvn.w	lr, lr
 801ca62:	1b34      	subs	r4, r6, r4
 801ca64:	f8c0 e000 	str.w	lr, [r0]
 801ca68:	e766      	b.n	801c938 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801ca6a:	426d      	negs	r5, r5
 801ca6c:	fb95 f4f6 	sdiv	r4, r5, r6
 801ca70:	fb06 5514 	mls	r5, r6, r4, r5
 801ca74:	f1c4 0e00 	rsb	lr, r4, #0
 801ca78:	f8c0 e004 	str.w	lr, [r0, #4]
 801ca7c:	6085      	str	r5, [r0, #8]
 801ca7e:	2d00      	cmp	r5, #0
 801ca80:	f43f af64 	beq.w	801c94c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801ca84:	43e4      	mvns	r4, r4
 801ca86:	1b75      	subs	r5, r6, r5
 801ca88:	6044      	str	r4, [r0, #4]
 801ca8a:	e75e      	b.n	801c94a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801ca8c:	3d800000 	.word	0x3d800000

0801ca90 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801ca90:	4b01      	ldr	r3, [pc, #4]	@ (801ca98 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801ca92:	6018      	str	r0, [r3, #0]
 801ca94:	4770      	bx	lr
 801ca96:	bf00      	nop
 801ca98:	2005bae4 	.word	0x2005bae4

0801ca9c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801ca9c:	4b06      	ldr	r3, [pc, #24]	@ (801cab8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801ca9e:	881a      	ldrh	r2, [r3, #0]
 801caa0:	4282      	cmp	r2, r0
 801caa2:	d807      	bhi.n	801cab4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801caa4:	4b05      	ldr	r3, [pc, #20]	@ (801cabc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801caa6:	881b      	ldrh	r3, [r3, #0]
 801caa8:	4413      	add	r3, r2
 801caaa:	4298      	cmp	r0, r3
 801caac:	bfac      	ite	ge
 801caae:	2000      	movge	r0, #0
 801cab0:	2001      	movlt	r0, #1
 801cab2:	4770      	bx	lr
 801cab4:	2000      	movs	r0, #0
 801cab6:	4770      	bx	lr
 801cab8:	2005bb04 	.word	0x2005bb04
 801cabc:	2005bb08 	.word	0x2005bb08

0801cac0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801cac0:	b508      	push	{r3, lr}
 801cac2:	4601      	mov	r1, r0
 801cac4:	f7ff ffea 	bl	801ca9c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801cac8:	b118      	cbz	r0, 801cad2 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801caca:	4b02      	ldr	r3, [pc, #8]	@ (801cad4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801cacc:	681b      	ldr	r3, [r3, #0]
 801cace:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801cad2:	bd08      	pop	{r3, pc}
 801cad4:	2005bae8 	.word	0x2005bae8

0801cad8 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801cad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cada:	4c24      	ldr	r4, [pc, #144]	@ (801cb6c <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801cadc:	6823      	ldr	r3, [r4, #0]
 801cade:	2b00      	cmp	r3, #0
 801cae0:	d042      	beq.n	801cb68 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801cae2:	4a23      	ldr	r2, [pc, #140]	@ (801cb70 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801cae4:	4d23      	ldr	r5, [pc, #140]	@ (801cb74 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801cae6:	8811      	ldrh	r1, [r2, #0]
 801cae8:	f8b5 c000 	ldrh.w	ip, [r5]
 801caec:	4822      	ldr	r0, [pc, #136]	@ (801cb78 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801caee:	4461      	add	r1, ip
 801caf0:	1c4a      	adds	r2, r1, #1
 801caf2:	f022 0201 	bic.w	r2, r2, #1
 801caf6:	008f      	lsls	r7, r1, #2
 801caf8:	0412      	lsls	r2, r2, #16
 801cafa:	19de      	adds	r6, r3, r7
 801cafc:	0c12      	lsrs	r2, r2, #16
 801cafe:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801cb02:	6006      	str	r6, [r0, #0]
 801cb04:	4e1d      	ldr	r6, [pc, #116]	@ (801cb7c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801cb06:	19da      	adds	r2, r3, r7
 801cb08:	6032      	str	r2, [r6, #0]
 801cb0a:	220e      	movs	r2, #14
 801cb0c:	fb02 f20c 	mul.w	r2, r2, ip
 801cb10:	3203      	adds	r2, #3
 801cb12:	f022 0203 	bic.w	r2, r2, #3
 801cb16:	443a      	add	r2, r7
 801cb18:	4f19      	ldr	r7, [pc, #100]	@ (801cb80 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801cb1a:	4413      	add	r3, r2
 801cb1c:	603b      	str	r3, [r7, #0]
 801cb1e:	2300      	movs	r3, #0
 801cb20:	4f18      	ldr	r7, [pc, #96]	@ (801cb84 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801cb22:	469c      	mov	ip, r3
 801cb24:	803b      	strh	r3, [r7, #0]
 801cb26:	4f18      	ldr	r7, [pc, #96]	@ (801cb88 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801cb28:	683f      	ldr	r7, [r7, #0]
 801cb2a:	1aba      	subs	r2, r7, r2
 801cb2c:	4f17      	ldr	r7, [pc, #92]	@ (801cb8c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801cb2e:	603a      	str	r2, [r7, #0]
 801cb30:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 801cb34:	4a16      	ldr	r2, [pc, #88]	@ (801cb90 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801cb36:	8013      	strh	r3, [r2, #0]
 801cb38:	428b      	cmp	r3, r1
 801cb3a:	d10d      	bne.n	801cb58 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801cb3c:	2300      	movs	r3, #0
 801cb3e:	240e      	movs	r4, #14
 801cb40:	882d      	ldrh	r5, [r5, #0]
 801cb42:	6830      	ldr	r0, [r6, #0]
 801cb44:	429d      	cmp	r5, r3
 801cb46:	d90f      	bls.n	801cb68 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801cb48:	fb04 0203 	mla	r2, r4, r3, r0
 801cb4c:	7b11      	ldrb	r1, [r2, #12]
 801cb4e:	3301      	adds	r3, #1
 801cb50:	f36f 1145 	bfc	r1, #5, #1
 801cb54:	7311      	strb	r1, [r2, #12]
 801cb56:	e7f5      	b.n	801cb44 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801cb58:	6822      	ldr	r2, [r4, #0]
 801cb5a:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801cb5e:	6802      	ldr	r2, [r0, #0]
 801cb60:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801cb64:	3301      	adds	r3, #1
 801cb66:	e7e7      	b.n	801cb38 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801cb68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cb6a:	bf00      	nop
 801cb6c:	2005bae8 	.word	0x2005bae8
 801cb70:	2005bb04 	.word	0x2005bb04
 801cb74:	2005bb08 	.word	0x2005bb08
 801cb78:	2005bafc 	.word	0x2005bafc
 801cb7c:	2005baec 	.word	0x2005baec
 801cb80:	2005baf4 	.word	0x2005baf4
 801cb84:	2005bb06 	.word	0x2005bb06
 801cb88:	2005baf0 	.word	0x2005baf0
 801cb8c:	2005bb00 	.word	0x2005bb00
 801cb90:	2005baf8 	.word	0x2005baf8

0801cb94 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801cb94:	4b06      	ldr	r3, [pc, #24]	@ (801cbb0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801cb96:	681b      	ldr	r3, [r3, #0]
 801cb98:	b943      	cbnz	r3, 801cbac <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801cb9a:	b139      	cbz	r1, 801cbac <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801cb9c:	4b05      	ldr	r3, [pc, #20]	@ (801cbb4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801cb9e:	801a      	strh	r2, [r3, #0]
 801cba0:	4b05      	ldr	r3, [pc, #20]	@ (801cbb8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801cba2:	6019      	str	r1, [r3, #0]
 801cba4:	4b05      	ldr	r3, [pc, #20]	@ (801cbbc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801cba6:	6018      	str	r0, [r3, #0]
 801cba8:	f7ff bf96 	b.w	801cad8 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801cbac:	4770      	bx	lr
 801cbae:	bf00      	nop
 801cbb0:	2005baf4 	.word	0x2005baf4
 801cbb4:	2005bb08 	.word	0x2005bb08
 801cbb8:	2005baf0 	.word	0x2005baf0
 801cbbc:	2005bae8 	.word	0x2005bae8

0801cbc0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801cbc0:	b470      	push	{r4, r5, r6}
 801cbc2:	4c07      	ldr	r4, [pc, #28]	@ (801cbe0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801cbc4:	4605      	mov	r5, r0
 801cbc6:	6826      	ldr	r6, [r4, #0]
 801cbc8:	4610      	mov	r0, r2
 801cbca:	9a03      	ldr	r2, [sp, #12]
 801cbcc:	b936      	cbnz	r6, 801cbdc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801cbce:	6025      	str	r5, [r4, #0]
 801cbd0:	4c04      	ldr	r4, [pc, #16]	@ (801cbe4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801cbd2:	8021      	strh	r1, [r4, #0]
 801cbd4:	bc70      	pop	{r4, r5, r6}
 801cbd6:	4619      	mov	r1, r3
 801cbd8:	f7ff bfdc 	b.w	801cb94 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801cbdc:	bc70      	pop	{r4, r5, r6}
 801cbde:	4770      	bx	lr
 801cbe0:	2005bb0c 	.word	0x2005bb0c
 801cbe4:	2005bb04 	.word	0x2005bb04

0801cbe8 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801cbe8:	4a12      	ldr	r2, [pc, #72]	@ (801cc34 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801cbea:	8803      	ldrh	r3, [r0, #0]
 801cbec:	8812      	ldrh	r2, [r2, #0]
 801cbee:	4293      	cmp	r3, r2
 801cbf0:	d207      	bcs.n	801cc02 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801cbf2:	2114      	movs	r1, #20
 801cbf4:	4a10      	ldr	r2, [pc, #64]	@ (801cc38 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801cbf6:	6812      	ldr	r2, [r2, #0]
 801cbf8:	fb01 2303 	mla	r3, r1, r3, r2
 801cbfc:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801cc00:	4770      	bx	lr
 801cc02:	490e      	ldr	r1, [pc, #56]	@ (801cc3c <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801cc04:	8809      	ldrh	r1, [r1, #0]
 801cc06:	4411      	add	r1, r2
 801cc08:	428b      	cmp	r3, r1
 801cc0a:	da04      	bge.n	801cc16 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801cc0c:	1a9b      	subs	r3, r3, r2
 801cc0e:	4a0c      	ldr	r2, [pc, #48]	@ (801cc40 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801cc10:	210e      	movs	r1, #14
 801cc12:	6812      	ldr	r2, [r2, #0]
 801cc14:	e7f0      	b.n	801cbf8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801cc16:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801cc1a:	4293      	cmp	r3, r2
 801cc1c:	d108      	bne.n	801cc30 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801cc1e:	4b09      	ldr	r3, [pc, #36]	@ (801cc44 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801cc20:	781b      	ldrb	r3, [r3, #0]
 801cc22:	b91b      	cbnz	r3, 801cc2c <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801cc24:	4b08      	ldr	r3, [pc, #32]	@ (801cc48 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801cc26:	f9b3 0000 	ldrsh.w	r0, [r3]
 801cc2a:	4770      	bx	lr
 801cc2c:	4b07      	ldr	r3, [pc, #28]	@ (801cc4c <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801cc2e:	e7fa      	b.n	801cc26 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801cc30:	2000      	movs	r0, #0
 801cc32:	4770      	bx	lr
 801cc34:	2005bb04 	.word	0x2005bb04
 801cc38:	2005bb0c 	.word	0x2005bb0c
 801cc3c:	2005bb08 	.word	0x2005bb08
 801cc40:	2005baec 	.word	0x2005baec
 801cc44:	2005ba74 	.word	0x2005ba74
 801cc48:	2005ba76 	.word	0x2005ba76
 801cc4c:	2005ba78 	.word	0x2005ba78

0801cc50 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801cc50:	4a12      	ldr	r2, [pc, #72]	@ (801cc9c <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801cc52:	8803      	ldrh	r3, [r0, #0]
 801cc54:	8812      	ldrh	r2, [r2, #0]
 801cc56:	4293      	cmp	r3, r2
 801cc58:	d207      	bcs.n	801cc6a <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801cc5a:	2114      	movs	r1, #20
 801cc5c:	4a10      	ldr	r2, [pc, #64]	@ (801cca0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801cc5e:	6812      	ldr	r2, [r2, #0]
 801cc60:	fb01 2303 	mla	r3, r1, r3, r2
 801cc64:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801cc68:	4770      	bx	lr
 801cc6a:	490e      	ldr	r1, [pc, #56]	@ (801cca4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801cc6c:	8809      	ldrh	r1, [r1, #0]
 801cc6e:	4411      	add	r1, r2
 801cc70:	428b      	cmp	r3, r1
 801cc72:	da04      	bge.n	801cc7e <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801cc74:	1a9b      	subs	r3, r3, r2
 801cc76:	4a0c      	ldr	r2, [pc, #48]	@ (801cca8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801cc78:	210e      	movs	r1, #14
 801cc7a:	6812      	ldr	r2, [r2, #0]
 801cc7c:	e7f0      	b.n	801cc60 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801cc7e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801cc82:	4293      	cmp	r3, r2
 801cc84:	d108      	bne.n	801cc98 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801cc86:	4b09      	ldr	r3, [pc, #36]	@ (801ccac <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801cc88:	781b      	ldrb	r3, [r3, #0]
 801cc8a:	b91b      	cbnz	r3, 801cc94 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801cc8c:	4b08      	ldr	r3, [pc, #32]	@ (801ccb0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801cc8e:	f9b3 0000 	ldrsh.w	r0, [r3]
 801cc92:	4770      	bx	lr
 801cc94:	4b07      	ldr	r3, [pc, #28]	@ (801ccb4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801cc96:	e7fa      	b.n	801cc8e <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801cc98:	2000      	movs	r0, #0
 801cc9a:	4770      	bx	lr
 801cc9c:	2005bb04 	.word	0x2005bb04
 801cca0:	2005bb0c 	.word	0x2005bb0c
 801cca4:	2005bb08 	.word	0x2005bb08
 801cca8:	2005baec 	.word	0x2005baec
 801ccac:	2005ba74 	.word	0x2005ba74
 801ccb0:	2005ba78 	.word	0x2005ba78
 801ccb4:	2005ba76 	.word	0x2005ba76

0801ccb8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801ccb8:	b530      	push	{r4, r5, lr}
 801ccba:	4a22      	ldr	r2, [pc, #136]	@ (801cd44 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801ccbc:	880b      	ldrh	r3, [r1, #0]
 801ccbe:	8812      	ldrh	r2, [r2, #0]
 801ccc0:	4293      	cmp	r3, r2
 801ccc2:	d213      	bcs.n	801ccec <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801ccc4:	2114      	movs	r1, #20
 801ccc6:	4a20      	ldr	r2, [pc, #128]	@ (801cd48 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801ccc8:	6812      	ldr	r2, [r2, #0]
 801ccca:	fb01 2303 	mla	r3, r1, r3, r2
 801ccce:	8a1a      	ldrh	r2, [r3, #16]
 801ccd0:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801ccd4:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801ccd8:	8a5b      	ldrh	r3, [r3, #18]
 801ccda:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801ccde:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801cce2:	8004      	strh	r4, [r0, #0]
 801cce4:	8041      	strh	r1, [r0, #2]
 801cce6:	8082      	strh	r2, [r0, #4]
 801cce8:	80c3      	strh	r3, [r0, #6]
 801ccea:	e024      	b.n	801cd36 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 801ccec:	4917      	ldr	r1, [pc, #92]	@ (801cd4c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801ccee:	8809      	ldrh	r1, [r1, #0]
 801ccf0:	4411      	add	r1, r2
 801ccf2:	428b      	cmp	r3, r1
 801ccf4:	da10      	bge.n	801cd18 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 801ccf6:	1a9b      	subs	r3, r3, r2
 801ccf8:	220e      	movs	r2, #14
 801ccfa:	4353      	muls	r3, r2
 801ccfc:	4a14      	ldr	r2, [pc, #80]	@ (801cd50 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801ccfe:	6811      	ldr	r1, [r2, #0]
 801cd00:	18ca      	adds	r2, r1, r3
 801cd02:	5ecd      	ldrsh	r5, [r1, r3]
 801cd04:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 801cd08:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 801cd0c:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 801cd10:	8005      	strh	r5, [r0, #0]
 801cd12:	8044      	strh	r4, [r0, #2]
 801cd14:	8081      	strh	r1, [r0, #4]
 801cd16:	e7e7      	b.n	801cce8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801cd18:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801cd1c:	4293      	cmp	r3, r2
 801cd1e:	d10b      	bne.n	801cd38 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 801cd20:	4b0c      	ldr	r3, [pc, #48]	@ (801cd54 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801cd22:	f9b3 1000 	ldrsh.w	r1, [r3]
 801cd26:	4b0c      	ldr	r3, [pc, #48]	@ (801cd58 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801cd28:	8081      	strh	r1, [r0, #4]
 801cd2a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801cd2e:	2300      	movs	r3, #0
 801cd30:	80c2      	strh	r2, [r0, #6]
 801cd32:	8003      	strh	r3, [r0, #0]
 801cd34:	8043      	strh	r3, [r0, #2]
 801cd36:	bd30      	pop	{r4, r5, pc}
 801cd38:	2300      	movs	r3, #0
 801cd3a:	8003      	strh	r3, [r0, #0]
 801cd3c:	8043      	strh	r3, [r0, #2]
 801cd3e:	8083      	strh	r3, [r0, #4]
 801cd40:	e7d2      	b.n	801cce8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801cd42:	bf00      	nop
 801cd44:	2005bb04 	.word	0x2005bb04
 801cd48:	2005bb0c 	.word	0x2005bb0c
 801cd4c:	2005bb08 	.word	0x2005bb08
 801cd50:	2005baec 	.word	0x2005baec
 801cd54:	2005ba70 	.word	0x2005ba70
 801cd58:	2005ba72 	.word	0x2005ba72

0801cd5c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801cd5c:	4a17      	ldr	r2, [pc, #92]	@ (801cdbc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801cd5e:	8803      	ldrh	r3, [r0, #0]
 801cd60:	8812      	ldrh	r2, [r2, #0]
 801cd62:	4293      	cmp	r3, r2
 801cd64:	d213      	bcs.n	801cd8e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801cd66:	2114      	movs	r1, #20
 801cd68:	4a15      	ldr	r2, [pc, #84]	@ (801cdc0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801cd6a:	6812      	ldr	r2, [r2, #0]
 801cd6c:	fb01 2303 	mla	r3, r1, r3, r2
 801cd70:	8a1a      	ldrh	r2, [r3, #16]
 801cd72:	8919      	ldrh	r1, [r3, #8]
 801cd74:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801cd78:	428a      	cmp	r2, r1
 801cd7a:	db1d      	blt.n	801cdb8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801cd7c:	8a58      	ldrh	r0, [r3, #18]
 801cd7e:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801cd82:	895b      	ldrh	r3, [r3, #10]
 801cd84:	4298      	cmp	r0, r3
 801cd86:	bfac      	ite	ge
 801cd88:	2000      	movge	r0, #0
 801cd8a:	2001      	movlt	r0, #1
 801cd8c:	4770      	bx	lr
 801cd8e:	490d      	ldr	r1, [pc, #52]	@ (801cdc4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801cd90:	8809      	ldrh	r1, [r1, #0]
 801cd92:	4411      	add	r1, r2
 801cd94:	428b      	cmp	r3, r1
 801cd96:	da0d      	bge.n	801cdb4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801cd98:	210e      	movs	r1, #14
 801cd9a:	1a9b      	subs	r3, r3, r2
 801cd9c:	4a0a      	ldr	r2, [pc, #40]	@ (801cdc8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801cd9e:	6812      	ldr	r2, [r2, #0]
 801cda0:	fb01 2303 	mla	r3, r1, r3, r2
 801cda4:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801cda8:	891a      	ldrh	r2, [r3, #8]
 801cdaa:	4291      	cmp	r1, r2
 801cdac:	db04      	blt.n	801cdb8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801cdae:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801cdb2:	e7e6      	b.n	801cd82 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 801cdb4:	2000      	movs	r0, #0
 801cdb6:	4770      	bx	lr
 801cdb8:	2001      	movs	r0, #1
 801cdba:	4770      	bx	lr
 801cdbc:	2005bb04 	.word	0x2005bb04
 801cdc0:	2005bb0c 	.word	0x2005bb0c
 801cdc4:	2005bb08 	.word	0x2005bb08
 801cdc8:	2005baec 	.word	0x2005baec

0801cdcc <_ZNK8touchgfx6Bitmap7getDataEv>:
 801cdcc:	4a12      	ldr	r2, [pc, #72]	@ (801ce18 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801cdce:	8803      	ldrh	r3, [r0, #0]
 801cdd0:	8811      	ldrh	r1, [r2, #0]
 801cdd2:	428b      	cmp	r3, r1
 801cdd4:	d20b      	bcs.n	801cdee <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801cdd6:	4a11      	ldr	r2, [pc, #68]	@ (801ce1c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801cdd8:	6812      	ldr	r2, [r2, #0]
 801cdda:	b112      	cbz	r2, 801cde2 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801cddc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801cde0:	b9c0      	cbnz	r0, 801ce14 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801cde2:	4a0f      	ldr	r2, [pc, #60]	@ (801ce20 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801cde4:	6811      	ldr	r1, [r2, #0]
 801cde6:	2214      	movs	r2, #20
 801cde8:	4353      	muls	r3, r2
 801cdea:	58c8      	ldr	r0, [r1, r3]
 801cdec:	4770      	bx	lr
 801cdee:	4a0d      	ldr	r2, [pc, #52]	@ (801ce24 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801cdf0:	8812      	ldrh	r2, [r2, #0]
 801cdf2:	440a      	add	r2, r1
 801cdf4:	4293      	cmp	r3, r2
 801cdf6:	da04      	bge.n	801ce02 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801cdf8:	4a08      	ldr	r2, [pc, #32]	@ (801ce1c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801cdfa:	6812      	ldr	r2, [r2, #0]
 801cdfc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801ce00:	4770      	bx	lr
 801ce02:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801ce06:	4293      	cmp	r3, r2
 801ce08:	d103      	bne.n	801ce12 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801ce0a:	4b07      	ldr	r3, [pc, #28]	@ (801ce28 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801ce0c:	681b      	ldr	r3, [r3, #0]
 801ce0e:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 801ce10:	4770      	bx	lr
 801ce12:	2000      	movs	r0, #0
 801ce14:	4770      	bx	lr
 801ce16:	bf00      	nop
 801ce18:	2005bb04 	.word	0x2005bb04
 801ce1c:	2005bae8 	.word	0x2005bae8
 801ce20:	2005bb0c 	.word	0x2005bb0c
 801ce24:	2005bb08 	.word	0x2005bb08
 801ce28:	2005ba7c 	.word	0x2005ba7c

0801ce2c <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801ce2c:	4b24      	ldr	r3, [pc, #144]	@ (801cec0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801ce2e:	8802      	ldrh	r2, [r0, #0]
 801ce30:	8818      	ldrh	r0, [r3, #0]
 801ce32:	4282      	cmp	r2, r0
 801ce34:	d221      	bcs.n	801ce7a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801ce36:	4b23      	ldr	r3, [pc, #140]	@ (801cec4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801ce38:	6819      	ldr	r1, [r3, #0]
 801ce3a:	2314      	movs	r3, #20
 801ce3c:	fb03 1302 	mla	r3, r3, r2, r1
 801ce40:	6858      	ldr	r0, [r3, #4]
 801ce42:	2800      	cmp	r0, #0
 801ce44:	d03a      	beq.n	801cebc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801ce46:	4920      	ldr	r1, [pc, #128]	@ (801cec8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801ce48:	6809      	ldr	r1, [r1, #0]
 801ce4a:	2900      	cmp	r1, #0
 801ce4c:	d036      	beq.n	801cebc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801ce4e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801ce52:	2900      	cmp	r1, #0
 801ce54:	d032      	beq.n	801cebc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801ce56:	891a      	ldrh	r2, [r3, #8]
 801ce58:	8958      	ldrh	r0, [r3, #10]
 801ce5a:	4350      	muls	r0, r2
 801ce5c:	7c5a      	ldrb	r2, [r3, #17]
 801ce5e:	7cdb      	ldrb	r3, [r3, #19]
 801ce60:	0952      	lsrs	r2, r2, #5
 801ce62:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801ce66:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801ce6a:	2b0b      	cmp	r3, #11
 801ce6c:	bf18      	it	ne
 801ce6e:	0040      	lslne	r0, r0, #1
 801ce70:	3003      	adds	r0, #3
 801ce72:	f020 0003 	bic.w	r0, r0, #3
 801ce76:	4408      	add	r0, r1
 801ce78:	4770      	bx	lr
 801ce7a:	4b14      	ldr	r3, [pc, #80]	@ (801cecc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801ce7c:	881b      	ldrh	r3, [r3, #0]
 801ce7e:	4403      	add	r3, r0
 801ce80:	429a      	cmp	r2, r3
 801ce82:	da1a      	bge.n	801ceba <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801ce84:	210e      	movs	r1, #14
 801ce86:	4b12      	ldr	r3, [pc, #72]	@ (801ced0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801ce88:	1a10      	subs	r0, r2, r0
 801ce8a:	681b      	ldr	r3, [r3, #0]
 801ce8c:	fb01 3000 	mla	r0, r1, r0, r3
 801ce90:	7b03      	ldrb	r3, [r0, #12]
 801ce92:	f003 031f 	and.w	r3, r3, #31
 801ce96:	2b0b      	cmp	r3, #11
 801ce98:	d10b      	bne.n	801ceb2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801ce9a:	8903      	ldrh	r3, [r0, #8]
 801ce9c:	8940      	ldrh	r0, [r0, #10]
 801ce9e:	4358      	muls	r0, r3
 801cea0:	4b09      	ldr	r3, [pc, #36]	@ (801cec8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801cea2:	3003      	adds	r0, #3
 801cea4:	6819      	ldr	r1, [r3, #0]
 801cea6:	f020 0303 	bic.w	r3, r0, #3
 801ceaa:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801ceae:	4418      	add	r0, r3
 801ceb0:	4770      	bx	lr
 801ceb2:	2b0d      	cmp	r3, #13
 801ceb4:	d101      	bne.n	801ceba <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801ceb6:	300d      	adds	r0, #13
 801ceb8:	4770      	bx	lr
 801ceba:	2000      	movs	r0, #0
 801cebc:	4770      	bx	lr
 801cebe:	bf00      	nop
 801cec0:	2005bb04 	.word	0x2005bb04
 801cec4:	2005bb0c 	.word	0x2005bb0c
 801cec8:	2005bae8 	.word	0x2005bae8
 801cecc:	2005bb08 	.word	0x2005bb08
 801ced0:	2005baec 	.word	0x2005baec

0801ced4 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801ced4:	b510      	push	{r4, lr}
 801ced6:	4b1f      	ldr	r3, [pc, #124]	@ (801cf54 <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 801ced8:	8802      	ldrh	r2, [r0, #0]
 801ceda:	881b      	ldrh	r3, [r3, #0]
 801cedc:	429a      	cmp	r2, r3
 801cede:	d21a      	bcs.n	801cf16 <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 801cee0:	2114      	movs	r1, #20
 801cee2:	4b1d      	ldr	r3, [pc, #116]	@ (801cf58 <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 801cee4:	681b      	ldr	r3, [r3, #0]
 801cee6:	fb01 3102 	mla	r1, r1, r2, r3
 801ceea:	7c4b      	ldrb	r3, [r1, #17]
 801ceec:	0958      	lsrs	r0, r3, #5
 801ceee:	7ccb      	ldrb	r3, [r1, #19]
 801cef0:	491a      	ldr	r1, [pc, #104]	@ (801cf5c <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 801cef2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801cef6:	6809      	ldr	r1, [r1, #0]
 801cef8:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 801cefc:	b2d8      	uxtb	r0, r3
 801cefe:	b149      	cbz	r1, 801cf14 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801cf00:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801cf04:	b132      	cbz	r2, 801cf14 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801cf06:	2b0e      	cmp	r3, #14
 801cf08:	d021      	beq.n	801cf4e <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801cf0a:	280f      	cmp	r0, #15
 801cf0c:	d01d      	beq.n	801cf4a <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 801cf0e:	2810      	cmp	r0, #16
 801cf10:	bf08      	it	eq
 801cf12:	2002      	moveq	r0, #2
 801cf14:	bd10      	pop	{r4, pc}
 801cf16:	4912      	ldr	r1, [pc, #72]	@ (801cf60 <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 801cf18:	8809      	ldrh	r1, [r1, #0]
 801cf1a:	4419      	add	r1, r3
 801cf1c:	428a      	cmp	r2, r1
 801cf1e:	da09      	bge.n	801cf34 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 801cf20:	210e      	movs	r1, #14
 801cf22:	1ad3      	subs	r3, r2, r3
 801cf24:	4a0f      	ldr	r2, [pc, #60]	@ (801cf64 <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 801cf26:	6812      	ldr	r2, [r2, #0]
 801cf28:	fb01 2303 	mla	r3, r1, r3, r2
 801cf2c:	7b18      	ldrb	r0, [r3, #12]
 801cf2e:	f000 001f 	and.w	r0, r0, #31
 801cf32:	e7ef      	b.n	801cf14 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801cf34:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 801cf38:	429a      	cmp	r2, r3
 801cf3a:	d108      	bne.n	801cf4e <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801cf3c:	f7f2 fdb4 	bl	800faa8 <_ZN8touchgfx3HAL3lcdEv>
 801cf40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cf44:	6803      	ldr	r3, [r0, #0]
 801cf46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cf48:	4718      	bx	r3
 801cf4a:	2001      	movs	r0, #1
 801cf4c:	e7e2      	b.n	801cf14 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801cf4e:	2000      	movs	r0, #0
 801cf50:	e7e0      	b.n	801cf14 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801cf52:	bf00      	nop
 801cf54:	2005bb04 	.word	0x2005bb04
 801cf58:	2005bb0c 	.word	0x2005bb0c
 801cf5c:	2005bae8 	.word	0x2005bae8
 801cf60:	2005bb08 	.word	0x2005bb08
 801cf64:	2005baec 	.word	0x2005baec

0801cf68 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801cf68:	2010      	movs	r0, #16
 801cf6a:	4770      	bx	lr

0801cf6c <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801cf6c:	2000      	movs	r0, #0
 801cf6e:	4770      	bx	lr

0801cf70 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801cf70:	4b02      	ldr	r3, [pc, #8]	@ (801cf7c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 801cf72:	8818      	ldrh	r0, [r3, #0]
 801cf74:	0040      	lsls	r0, r0, #1
 801cf76:	b280      	uxth	r0, r0
 801cf78:	4770      	bx	lr
 801cf7a:	bf00      	nop
 801cf7c:	2005ba76 	.word	0x2005ba76

0801cf80 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801cf80:	2bff      	cmp	r3, #255	@ 0xff
 801cf82:	d05e      	beq.n	801d042 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc2>
 801cf84:	2a0b      	cmp	r2, #11
 801cf86:	d058      	beq.n	801d03a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 801cf88:	d80e      	bhi.n	801cfa8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801cf8a:	2a03      	cmp	r2, #3
 801cf8c:	d04d      	beq.n	801d02a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xaa>
 801cf8e:	d804      	bhi.n	801cf9a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cf90:	2a01      	cmp	r2, #1
 801cf92:	d04c      	beq.n	801d02e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xae>
 801cf94:	d94d      	bls.n	801d032 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb2>
 801cf96:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801cf98:	e031      	b.n	801cffe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cf9a:	2a09      	cmp	r2, #9
 801cf9c:	d04d      	beq.n	801d03a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 801cf9e:	d84a      	bhi.n	801d036 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 801cfa0:	2a08      	cmp	r2, #8
 801cfa2:	d048      	beq.n	801d036 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 801cfa4:	2300      	movs	r3, #0
 801cfa6:	e02a      	b.n	801cffe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cfa8:	2a2f      	cmp	r2, #47	@ 0x2f
 801cfaa:	d02c      	beq.n	801d006 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 801cfac:	d811      	bhi.n	801cfd2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801cfae:	2a2d      	cmp	r2, #45	@ 0x2d
 801cfb0:	d018      	beq.n	801cfe4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x64>
 801cfb2:	d831      	bhi.n	801d018 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x98>
 801cfb4:	2a2c      	cmp	r2, #44	@ 0x2c
 801cfb6:	d1f5      	bne.n	801cfa4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cfb8:	684a      	ldr	r2, [r1, #4]
 801cfba:	7813      	ldrb	r3, [r2, #0]
 801cfbc:	7852      	ldrb	r2, [r2, #1]
 801cfbe:	2a00      	cmp	r2, #0
 801cfc0:	d1f0      	bne.n	801cfa4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cfc2:	2b01      	cmp	r3, #1
 801cfc4:	d01d      	beq.n	801d002 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801cfc6:	2b00      	cmp	r3, #0
 801cfc8:	d02d      	beq.n	801d026 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801cfca:	2b02      	cmp	r3, #2
 801cfcc:	d1ea      	bne.n	801cfa4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cfce:	68c3      	ldr	r3, [r0, #12]
 801cfd0:	e015      	b.n	801cffe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cfd2:	2a31      	cmp	r2, #49	@ 0x31
 801cfd4:	d004      	beq.n	801cfe0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x60>
 801cfd6:	d332      	bcc.n	801d03e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801cfd8:	2a32      	cmp	r2, #50	@ 0x32
 801cfda:	d030      	beq.n	801d03e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801cfdc:	2a33      	cmp	r2, #51	@ 0x33
 801cfde:	d1e1      	bne.n	801cfa4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cfe0:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 801cfe2:	e00c      	b.n	801cffe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cfe4:	684a      	ldr	r2, [r1, #4]
 801cfe6:	7813      	ldrb	r3, [r2, #0]
 801cfe8:	7852      	ldrb	r2, [r2, #1]
 801cfea:	2a00      	cmp	r2, #0
 801cfec:	d1da      	bne.n	801cfa4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cfee:	2b01      	cmp	r3, #1
 801cff0:	d004      	beq.n	801cffc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7c>
 801cff2:	d30f      	bcc.n	801d014 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x94>
 801cff4:	2b02      	cmp	r3, #2
 801cff6:	d1d5      	bne.n	801cfa4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cff8:	6943      	ldr	r3, [r0, #20]
 801cffa:	e000      	b.n	801cffe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cffc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801cffe:	4618      	mov	r0, r3
 801d000:	4770      	bx	lr
 801d002:	69c3      	ldr	r3, [r0, #28]
 801d004:	e7fb      	b.n	801cffe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d006:	684b      	ldr	r3, [r1, #4]
 801d008:	781a      	ldrb	r2, [r3, #0]
 801d00a:	785b      	ldrb	r3, [r3, #1]
 801d00c:	2b00      	cmp	r3, #0
 801d00e:	d1c9      	bne.n	801cfa4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d010:	2a00      	cmp	r2, #0
 801d012:	d1f4      	bne.n	801cffe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d014:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801d016:	e7f2      	b.n	801cffe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d018:	684b      	ldr	r3, [r1, #4]
 801d01a:	781a      	ldrb	r2, [r3, #0]
 801d01c:	785b      	ldrb	r3, [r3, #1]
 801d01e:	2b00      	cmp	r3, #0
 801d020:	d1c0      	bne.n	801cfa4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d022:	2a00      	cmp	r2, #0
 801d024:	d1eb      	bne.n	801cffe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d026:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801d028:	e7e9      	b.n	801cffe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d02a:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 801d02c:	e7e7      	b.n	801cffe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d02e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801d030:	e7e5      	b.n	801cffe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d032:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801d034:	e7e3      	b.n	801cffe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d036:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 801d038:	e7e1      	b.n	801cffe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d03a:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 801d03c:	e7df      	b.n	801cffe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d03e:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801d040:	e7dd      	b.n	801cffe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d042:	2a0b      	cmp	r2, #11
 801d044:	d059      	beq.n	801d0fa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17a>
 801d046:	d80e      	bhi.n	801d066 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe6>
 801d048:	2a03      	cmp	r2, #3
 801d04a:	d050      	beq.n	801d0ee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16e>
 801d04c:	d804      	bhi.n	801d058 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd8>
 801d04e:	2a01      	cmp	r2, #1
 801d050:	d04f      	beq.n	801d0f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x172>
 801d052:	d950      	bls.n	801d0f6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x176>
 801d054:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801d056:	e7d2      	b.n	801cffe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d058:	2a09      	cmp	r2, #9
 801d05a:	d04e      	beq.n	801d0fa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17a>
 801d05c:	d801      	bhi.n	801d062 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 801d05e:	2a08      	cmp	r2, #8
 801d060:	d1a0      	bne.n	801cfa4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d062:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 801d064:	e7cb      	b.n	801cffe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d066:	2a2f      	cmp	r2, #47	@ 0x2f
 801d068:	d02d      	beq.n	801d0c6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x146>
 801d06a:	d811      	bhi.n	801d090 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801d06c:	2a2d      	cmp	r2, #45	@ 0x2d
 801d06e:	d018      	beq.n	801d0a2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x122>
 801d070:	d833      	bhi.n	801d0da <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x15a>
 801d072:	2a2c      	cmp	r2, #44	@ 0x2c
 801d074:	d196      	bne.n	801cfa4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d076:	684a      	ldr	r2, [r1, #4]
 801d078:	7813      	ldrb	r3, [r2, #0]
 801d07a:	7852      	ldrb	r2, [r2, #1]
 801d07c:	2a00      	cmp	r2, #0
 801d07e:	d191      	bne.n	801cfa4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d080:	2b01      	cmp	r3, #1
 801d082:	d01e      	beq.n	801d0c2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801d084:	2b00      	cmp	r3, #0
 801d086:	d030      	beq.n	801d0ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16a>
 801d088:	2b02      	cmp	r3, #2
 801d08a:	d18b      	bne.n	801cfa4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d08c:	6903      	ldr	r3, [r0, #16]
 801d08e:	e7b6      	b.n	801cffe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d090:	2a31      	cmp	r2, #49	@ 0x31
 801d092:	d004      	beq.n	801d09e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11e>
 801d094:	d333      	bcc.n	801d0fe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17e>
 801d096:	2a32      	cmp	r2, #50	@ 0x32
 801d098:	d031      	beq.n	801d0fe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17e>
 801d09a:	2a33      	cmp	r2, #51	@ 0x33
 801d09c:	d182      	bne.n	801cfa4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d09e:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 801d0a0:	e7ad      	b.n	801cffe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d0a2:	684a      	ldr	r2, [r1, #4]
 801d0a4:	7813      	ldrb	r3, [r2, #0]
 801d0a6:	7852      	ldrb	r2, [r2, #1]
 801d0a8:	2a00      	cmp	r2, #0
 801d0aa:	f47f af7b 	bne.w	801cfa4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d0ae:	2b01      	cmp	r3, #1
 801d0b0:	d005      	beq.n	801d0be <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801d0b2:	d310      	bcc.n	801d0d6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x156>
 801d0b4:	2b02      	cmp	r3, #2
 801d0b6:	f47f af75 	bne.w	801cfa4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d0ba:	6983      	ldr	r3, [r0, #24]
 801d0bc:	e79f      	b.n	801cffe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d0be:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801d0c0:	e79d      	b.n	801cffe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d0c2:	6a03      	ldr	r3, [r0, #32]
 801d0c4:	e79b      	b.n	801cffe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d0c6:	684b      	ldr	r3, [r1, #4]
 801d0c8:	781a      	ldrb	r2, [r3, #0]
 801d0ca:	785b      	ldrb	r3, [r3, #1]
 801d0cc:	2b00      	cmp	r3, #0
 801d0ce:	f47f af69 	bne.w	801cfa4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d0d2:	2a00      	cmp	r2, #0
 801d0d4:	d193      	bne.n	801cffe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d0d6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801d0d8:	e791      	b.n	801cffe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d0da:	684b      	ldr	r3, [r1, #4]
 801d0dc:	781a      	ldrb	r2, [r3, #0]
 801d0de:	785b      	ldrb	r3, [r3, #1]
 801d0e0:	2b00      	cmp	r3, #0
 801d0e2:	f47f af5f 	bne.w	801cfa4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d0e6:	2a00      	cmp	r2, #0
 801d0e8:	d189      	bne.n	801cffe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d0ea:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801d0ec:	e787      	b.n	801cffe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d0ee:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 801d0f0:	e785      	b.n	801cffe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d0f2:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 801d0f4:	e783      	b.n	801cffe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d0f6:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 801d0f8:	e781      	b.n	801cffe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d0fa:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801d0fc:	e77f      	b.n	801cffe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d0fe:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 801d100:	e77d      	b.n	801cffe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>

0801d102 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d102:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d106:	b087      	sub	sp, #28
 801d108:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801d10a:	9101      	str	r1, [sp, #4]
 801d10c:	9205      	str	r2, [sp, #20]
 801d10e:	6841      	ldr	r1, [r0, #4]
 801d110:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801d114:	f8dd e060 	ldr.w	lr, [sp, #96]	@ 0x60
 801d118:	9202      	str	r2, [sp, #8]
 801d11a:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801d11e:	fb01 2404 	mla	r4, r1, r4, r2
 801d122:	6802      	ldr	r2, [r0, #0]
 801d124:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d128:	f8de 2000 	ldr.w	r2, [lr]
 801d12c:	9203      	str	r2, [sp, #12]
 801d12e:	f8de 2004 	ldr.w	r2, [lr, #4]
 801d132:	3204      	adds	r2, #4
 801d134:	9204      	str	r2, [sp, #16]
 801d136:	9a02      	ldr	r2, [sp, #8]
 801d138:	43d6      	mvns	r6, r2
 801d13a:	b2f6      	uxtb	r6, r6
 801d13c:	9a01      	ldr	r2, [sp, #4]
 801d13e:	2a00      	cmp	r2, #0
 801d140:	dc03      	bgt.n	801d14a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801d142:	9a05      	ldr	r2, [sp, #20]
 801d144:	2a00      	cmp	r2, #0
 801d146:	f340 8129 	ble.w	801d39c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d14a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801d14c:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801d150:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801d154:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801d156:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801d15a:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801d15e:	2b00      	cmp	r3, #0
 801d160:	dd0e      	ble.n	801d180 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d162:	1408      	asrs	r0, r1, #16
 801d164:	d405      	bmi.n	801d172 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d166:	4560      	cmp	r0, ip
 801d168:	da03      	bge.n	801d172 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d16a:	1410      	asrs	r0, r2, #16
 801d16c:	d401      	bmi.n	801d172 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d16e:	42b8      	cmp	r0, r7
 801d170:	db07      	blt.n	801d182 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801d172:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801d174:	3b01      	subs	r3, #1
 801d176:	4401      	add	r1, r0
 801d178:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801d17a:	3402      	adds	r4, #2
 801d17c:	4402      	add	r2, r0
 801d17e:	e7ee      	b.n	801d15e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801d180:	d071      	beq.n	801d266 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d182:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801d184:	1e58      	subs	r0, r3, #1
 801d186:	fb05 1500 	mla	r5, r5, r0, r1
 801d18a:	142d      	asrs	r5, r5, #16
 801d18c:	d45f      	bmi.n	801d24e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801d18e:	4565      	cmp	r5, ip
 801d190:	da5d      	bge.n	801d24e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801d192:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801d194:	fb05 2000 	mla	r0, r5, r0, r2
 801d198:	1400      	asrs	r0, r0, #16
 801d19a:	d458      	bmi.n	801d24e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801d19c:	42b8      	cmp	r0, r7
 801d19e:	da56      	bge.n	801d24e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801d1a0:	4699      	mov	r9, r3
 801d1a2:	46a2      	mov	sl, r4
 801d1a4:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801d1a8:	f1b9 0f00 	cmp.w	r9, #0
 801d1ac:	dd57      	ble.n	801d25e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801d1ae:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801d1b2:	9803      	ldr	r0, [sp, #12]
 801d1b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801d1b8:	fb07 000c 	mla	r0, r7, ip, r0
 801d1bc:	140d      	asrs	r5, r1, #16
 801d1be:	5d40      	ldrb	r0, [r0, r5]
 801d1c0:	9d04      	ldr	r5, [sp, #16]
 801d1c2:	f109 39ff 	add.w	r9, r9, #4294967295
 801d1c6:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801d1ca:	f8ba 5000 	ldrh.w	r5, [sl]
 801d1ce:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801d1d2:	122f      	asrs	r7, r5, #8
 801d1d4:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801d1d8:	fb17 f706 	smulbb	r7, r7, r6
 801d1dc:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801d1e0:	00ed      	lsls	r5, r5, #3
 801d1e2:	f008 08fc 	and.w	r8, r8, #252	@ 0xfc
 801d1e6:	b2ed      	uxtb	r5, r5
 801d1e8:	fb18 f806 	smulbb	r8, r8, r6
 801d1ec:	fb15 f506 	smulbb	r5, r5, r6
 801d1f0:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801d1f4:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801d1f8:	10c7      	asrs	r7, r0, #3
 801d1fa:	00c0      	lsls	r0, r0, #3
 801d1fc:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801d200:	b2c0      	uxtb	r0, r0
 801d202:	fb07 870b 	mla	r7, r7, fp, r8
 801d206:	fb00 500b 	mla	r0, r0, fp, r5
 801d20a:	fa1f fc8c 	uxth.w	ip, ip
 801d20e:	b280      	uxth	r0, r0
 801d210:	b2bf      	uxth	r7, r7
 801d212:	f10c 0501 	add.w	r5, ip, #1
 801d216:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801d21a:	f107 0801 	add.w	r8, r7, #1
 801d21e:	1c45      	adds	r5, r0, #1
 801d220:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801d224:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801d228:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801d22a:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801d22e:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801d232:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801d236:	ea45 0c0c 	orr.w	ip, r5, ip
 801d23a:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 801d23e:	4401      	add	r1, r0
 801d240:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801d242:	ea4c 0c08 	orr.w	ip, ip, r8
 801d246:	f82a cb02 	strh.w	ip, [sl], #2
 801d24a:	4402      	add	r2, r0
 801d24c:	e7ac      	b.n	801d1a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801d24e:	f04f 0800 	mov.w	r8, #0
 801d252:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801d256:	eb03 0008 	add.w	r0, r3, r8
 801d25a:	2800      	cmp	r0, #0
 801d25c:	dc41      	bgt.n	801d2e2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801d25e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d262:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d266:	9b01      	ldr	r3, [sp, #4]
 801d268:	2b00      	cmp	r3, #0
 801d26a:	f340 8097 	ble.w	801d39c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d26e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d272:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d276:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d27a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d27e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d282:	eef0 6a62 	vmov.f32	s13, s5
 801d286:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d28a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d28e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d292:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d296:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d29a:	edcd 6a11 	vstr	s13, [sp, #68]	@ 0x44
 801d29e:	eef0 6a43 	vmov.f32	s13, s6
 801d2a2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d2a6:	ee12 2a90 	vmov	r2, s5
 801d2aa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d2ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d2b0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d2b4:	fb92 f3f3 	sdiv	r3, r2, r3
 801d2b8:	ee13 2a10 	vmov	r2, s6
 801d2bc:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d2be:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d2c0:	edcd 6a12 	vstr	s13, [sp, #72]	@ 0x48
 801d2c4:	fb92 f3f3 	sdiv	r3, r2, r3
 801d2c8:	9314      	str	r3, [sp, #80]	@ 0x50
 801d2ca:	9b01      	ldr	r3, [sp, #4]
 801d2cc:	9a05      	ldr	r2, [sp, #20]
 801d2ce:	3b01      	subs	r3, #1
 801d2d0:	9301      	str	r3, [sp, #4]
 801d2d2:	eeb0 3a67 	vmov.f32	s6, s15
 801d2d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d2d8:	eef0 2a47 	vmov.f32	s5, s14
 801d2dc:	bf08      	it	eq
 801d2de:	4613      	moveq	r3, r2
 801d2e0:	e72c      	b.n	801d13c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801d2e2:	140f      	asrs	r7, r1, #16
 801d2e4:	d453      	bmi.n	801d38e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801d2e6:	f8de 5008 	ldr.w	r5, [lr, #8]
 801d2ea:	42bd      	cmp	r5, r7
 801d2ec:	dd4f      	ble.n	801d38e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801d2ee:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801d2f2:	d44c      	bmi.n	801d38e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801d2f4:	f8de 000c 	ldr.w	r0, [lr, #12]
 801d2f8:	4560      	cmp	r0, ip
 801d2fa:	dd48      	ble.n	801d38e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801d2fc:	9803      	ldr	r0, [sp, #12]
 801d2fe:	b22d      	sxth	r5, r5
 801d300:	fb0c 0505 	mla	r5, ip, r5, r0
 801d304:	5de8      	ldrb	r0, [r5, r7]
 801d306:	9d04      	ldr	r5, [sp, #16]
 801d308:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801d30c:	f06f 0501 	mvn.w	r5, #1
 801d310:	fb05 fb08 	mul.w	fp, r5, r8
 801d314:	f834 500b 	ldrh.w	r5, [r4, fp]
 801d318:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801d31c:	122f      	asrs	r7, r5, #8
 801d31e:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801d322:	fb17 f706 	smulbb	r7, r7, r6
 801d326:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801d32a:	00ed      	lsls	r5, r5, #3
 801d32c:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 801d330:	b2ed      	uxtb	r5, r5
 801d332:	fb19 f906 	smulbb	r9, r9, r6
 801d336:	fb15 f506 	smulbb	r5, r5, r6
 801d33a:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801d33e:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801d342:	10c7      	asrs	r7, r0, #3
 801d344:	00c0      	lsls	r0, r0, #3
 801d346:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801d34a:	b2c0      	uxtb	r0, r0
 801d34c:	fb07 970a 	mla	r7, r7, sl, r9
 801d350:	fb00 500a 	mla	r0, r0, sl, r5
 801d354:	fa1f fc8c 	uxth.w	ip, ip
 801d358:	b2bf      	uxth	r7, r7
 801d35a:	b280      	uxth	r0, r0
 801d35c:	f10c 0501 	add.w	r5, ip, #1
 801d360:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801d364:	f107 0901 	add.w	r9, r7, #1
 801d368:	1c45      	adds	r5, r0, #1
 801d36a:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801d36e:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801d372:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801d376:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801d37a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801d37e:	ea45 0c0c 	orr.w	ip, r5, ip
 801d382:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801d386:	ea4c 0c09 	orr.w	ip, ip, r9
 801d38a:	f824 c00b 	strh.w	ip, [r4, fp]
 801d38e:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801d390:	f108 38ff 	add.w	r8, r8, #4294967295
 801d394:	4401      	add	r1, r0
 801d396:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801d398:	4402      	add	r2, r0
 801d39a:	e75c      	b.n	801d256 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801d39c:	b007      	add	sp, #28
 801d39e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d3a2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d3a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d3a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d3aa:	b085      	sub	sp, #20
 801d3ac:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801d3ae:	4693      	mov	fp, r2
 801d3b0:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801d3b4:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	@ 0x44
 801d3b8:	6870      	ldr	r0, [r6, #4]
 801d3ba:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 801d3bc:	fb00 2404 	mla	r4, r0, r4, r2
 801d3c0:	6832      	ldr	r2, [r6, #0]
 801d3c2:	9100      	str	r1, [sp, #0]
 801d3c4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d3c8:	682a      	ldr	r2, [r5, #0]
 801d3ca:	9201      	str	r2, [sp, #4]
 801d3cc:	686a      	ldr	r2, [r5, #4]
 801d3ce:	3204      	adds	r2, #4
 801d3d0:	9202      	str	r2, [sp, #8]
 801d3d2:	9a00      	ldr	r2, [sp, #0]
 801d3d4:	2a00      	cmp	r2, #0
 801d3d6:	dc03      	bgt.n	801d3e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801d3d8:	f1bb 0f00 	cmp.w	fp, #0
 801d3dc:	f340 80a0 	ble.w	801d520 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801d3e0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d3e2:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801d3e6:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801d3ea:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801d3ec:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801d3f0:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801d3f4:	2b00      	cmp	r3, #0
 801d3f6:	dd0c      	ble.n	801d412 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d3f8:	1406      	asrs	r6, r0, #16
 801d3fa:	d405      	bmi.n	801d408 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d3fc:	454e      	cmp	r6, r9
 801d3fe:	da03      	bge.n	801d408 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d400:	1416      	asrs	r6, r2, #16
 801d402:	d401      	bmi.n	801d408 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d404:	4546      	cmp	r6, r8
 801d406:	db05      	blt.n	801d414 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d408:	4470      	add	r0, lr
 801d40a:	4462      	add	r2, ip
 801d40c:	3b01      	subs	r3, #1
 801d40e:	3402      	adds	r4, #2
 801d410:	e7f0      	b.n	801d3f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801d412:	d00f      	beq.n	801d434 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d414:	1e5e      	subs	r6, r3, #1
 801d416:	fb0e 0706 	mla	r7, lr, r6, r0
 801d41a:	143f      	asrs	r7, r7, #16
 801d41c:	d541      	bpl.n	801d4a2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801d41e:	4698      	mov	r8, r3
 801d420:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801d424:	9603      	str	r6, [sp, #12]
 801d426:	f1b8 0f00 	cmp.w	r8, #0
 801d42a:	dc59      	bgt.n	801d4e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801d42c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d430:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d434:	9b00      	ldr	r3, [sp, #0]
 801d436:	2b00      	cmp	r3, #0
 801d438:	dd72      	ble.n	801d520 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801d43a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d43e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d442:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d446:	eeb0 6a62 	vmov.f32	s12, s5
 801d44a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d44e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d452:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d456:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d45a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d45e:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801d462:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d466:	eeb0 6a43 	vmov.f32	s12, s6
 801d46a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d46e:	ee12 2a90 	vmov	r2, s5
 801d472:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d476:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d478:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d47c:	fb92 fef3 	sdiv	lr, r2, r3
 801d480:	ee13 2a10 	vmov	r2, s6
 801d484:	fb92 fcf3 	sdiv	ip, r2, r3
 801d488:	9b00      	ldr	r3, [sp, #0]
 801d48a:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801d48e:	3b01      	subs	r3, #1
 801d490:	9300      	str	r3, [sp, #0]
 801d492:	eeb0 3a67 	vmov.f32	s6, s15
 801d496:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d498:	eef0 2a47 	vmov.f32	s5, s14
 801d49c:	bf08      	it	eq
 801d49e:	465b      	moveq	r3, fp
 801d4a0:	e797      	b.n	801d3d2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801d4a2:	454f      	cmp	r7, r9
 801d4a4:	dabb      	bge.n	801d41e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d4a6:	fb0c 2606 	mla	r6, ip, r6, r2
 801d4aa:	1436      	asrs	r6, r6, #16
 801d4ac:	d4b7      	bmi.n	801d41e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d4ae:	4546      	cmp	r6, r8
 801d4b0:	dab5      	bge.n	801d41e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d4b2:	461e      	mov	r6, r3
 801d4b4:	46a0      	mov	r8, r4
 801d4b6:	2e00      	cmp	r6, #0
 801d4b8:	ddb8      	ble.n	801d42c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801d4ba:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801d4be:	9901      	ldr	r1, [sp, #4]
 801d4c0:	1417      	asrs	r7, r2, #16
 801d4c2:	fb0a 1707 	mla	r7, sl, r7, r1
 801d4c6:	ea4f 4920 	mov.w	r9, r0, asr #16
 801d4ca:	f817 7009 	ldrb.w	r7, [r7, r9]
 801d4ce:	9902      	ldr	r1, [sp, #8]
 801d4d0:	4470      	add	r0, lr
 801d4d2:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801d4d6:	4462      	add	r2, ip
 801d4d8:	f828 7b02 	strh.w	r7, [r8], #2
 801d4dc:	3e01      	subs	r6, #1
 801d4de:	e7ea      	b.n	801d4b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801d4e0:	ea5f 4920 	movs.w	r9, r0, asr #16
 801d4e4:	d417      	bmi.n	801d516 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801d4e6:	68ae      	ldr	r6, [r5, #8]
 801d4e8:	454e      	cmp	r6, r9
 801d4ea:	dd14      	ble.n	801d516 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801d4ec:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801d4f0:	d411      	bmi.n	801d516 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801d4f2:	68ef      	ldr	r7, [r5, #12]
 801d4f4:	4557      	cmp	r7, sl
 801d4f6:	dd0e      	ble.n	801d516 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801d4f8:	f06f 0101 	mvn.w	r1, #1
 801d4fc:	9f01      	ldr	r7, [sp, #4]
 801d4fe:	b236      	sxth	r6, r6
 801d500:	fb0a 7606 	mla	r6, sl, r6, r7
 801d504:	9f02      	ldr	r7, [sp, #8]
 801d506:	f816 6009 	ldrb.w	r6, [r6, r9]
 801d50a:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801d50e:	fb01 f608 	mul.w	r6, r1, r8
 801d512:	9903      	ldr	r1, [sp, #12]
 801d514:	538f      	strh	r7, [r1, r6]
 801d516:	4470      	add	r0, lr
 801d518:	4462      	add	r2, ip
 801d51a:	f108 38ff 	add.w	r8, r8, #4294967295
 801d51e:	e782      	b.n	801d426 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d520:	b005      	add	sp, #20
 801d522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d526 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d526:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d52a:	b087      	sub	sp, #28
 801d52c:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801d52e:	9102      	str	r1, [sp, #8]
 801d530:	9205      	str	r2, [sp, #20]
 801d532:	6861      	ldr	r1, [r4, #4]
 801d534:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801d538:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 801d53c:	9203      	str	r2, [sp, #12]
 801d53e:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	@ 0x58
 801d542:	fb01 2000 	mla	r0, r1, r0, r2
 801d546:	6822      	ldr	r2, [r4, #0]
 801d548:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801d54c:	9200      	str	r2, [sp, #0]
 801d54e:	f8dc 2000 	ldr.w	r2, [ip]
 801d552:	9204      	str	r2, [sp, #16]
 801d554:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801d558:	3204      	adds	r2, #4
 801d55a:	9201      	str	r2, [sp, #4]
 801d55c:	9a03      	ldr	r2, [sp, #12]
 801d55e:	43d5      	mvns	r5, r2
 801d560:	b2ed      	uxtb	r5, r5
 801d562:	9a02      	ldr	r2, [sp, #8]
 801d564:	2a00      	cmp	r2, #0
 801d566:	dc03      	bgt.n	801d570 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801d568:	9a05      	ldr	r2, [sp, #20]
 801d56a:	2a00      	cmp	r2, #0
 801d56c:	f340 812c 	ble.w	801d7c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801d570:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801d572:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801d576:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801d57a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801d57c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801d580:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801d584:	2b00      	cmp	r3, #0
 801d586:	dd10      	ble.n	801d5aa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d588:	140c      	asrs	r4, r1, #16
 801d58a:	d405      	bmi.n	801d598 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d58c:	4574      	cmp	r4, lr
 801d58e:	da03      	bge.n	801d598 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d590:	1414      	asrs	r4, r2, #16
 801d592:	d401      	bmi.n	801d598 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d594:	42bc      	cmp	r4, r7
 801d596:	db09      	blt.n	801d5ac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d598:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d59a:	9800      	ldr	r0, [sp, #0]
 801d59c:	4421      	add	r1, r4
 801d59e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801d5a0:	3002      	adds	r0, #2
 801d5a2:	4422      	add	r2, r4
 801d5a4:	3b01      	subs	r3, #1
 801d5a6:	9000      	str	r0, [sp, #0]
 801d5a8:	e7ec      	b.n	801d584 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801d5aa:	d071      	beq.n	801d690 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801d5ac:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801d5ae:	1e5c      	subs	r4, r3, #1
 801d5b0:	fb06 1604 	mla	r6, r6, r4, r1
 801d5b4:	1436      	asrs	r6, r6, #16
 801d5b6:	d45d      	bmi.n	801d674 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801d5b8:	4576      	cmp	r6, lr
 801d5ba:	da5b      	bge.n	801d674 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801d5bc:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801d5be:	fb06 2404 	mla	r4, r6, r4, r2
 801d5c2:	1424      	asrs	r4, r4, #16
 801d5c4:	d456      	bmi.n	801d674 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801d5c6:	42bc      	cmp	r4, r7
 801d5c8:	da54      	bge.n	801d674 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801d5ca:	4698      	mov	r8, r3
 801d5cc:	f8dd 9000 	ldr.w	r9, [sp]
 801d5d0:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801d5d4:	f1b8 0f00 	cmp.w	r8, #0
 801d5d8:	dd54      	ble.n	801d684 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801d5da:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801d5de:	9804      	ldr	r0, [sp, #16]
 801d5e0:	1414      	asrs	r4, r2, #16
 801d5e2:	fb07 0404 	mla	r4, r7, r4, r0
 801d5e6:	140e      	asrs	r6, r1, #16
 801d5e8:	f814 e006 	ldrb.w	lr, [r4, r6]
 801d5ec:	9801      	ldr	r0, [sp, #4]
 801d5ee:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801d5f2:	eb00 0b0e 	add.w	fp, r0, lr
 801d5f6:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801d5fa:	f8b9 4000 	ldrh.w	r4, [r9]
 801d5fe:	fb16 f60a 	smulbb	r6, r6, sl
 801d602:	1227      	asrs	r7, r4, #8
 801d604:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801d608:	fb07 6705 	mla	r7, r7, r5, r6
 801d60c:	f89b b001 	ldrb.w	fp, [fp, #1]
 801d610:	10e6      	asrs	r6, r4, #3
 801d612:	00e4      	lsls	r4, r4, #3
 801d614:	b2e4      	uxtb	r4, r4
 801d616:	fb1b fb0a 	smulbb	fp, fp, sl
 801d61a:	fb14 f405 	smulbb	r4, r4, r5
 801d61e:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801d622:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801d626:	fb06 b605 	mla	r6, r6, r5, fp
 801d62a:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801d62e:	b2bf      	uxth	r7, r7
 801d630:	b2b6      	uxth	r6, r6
 801d632:	fa1f fe8e 	uxth.w	lr, lr
 801d636:	1c7c      	adds	r4, r7, #1
 801d638:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801d63c:	f106 0b01 	add.w	fp, r6, #1
 801d640:	f10e 0401 	add.w	r4, lr, #1
 801d644:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801d646:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801d64a:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801d64e:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801d652:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801d656:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801d65a:	4327      	orrs	r7, r4
 801d65c:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 801d660:	4401      	add	r1, r0
 801d662:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801d664:	ea47 070b 	orr.w	r7, r7, fp
 801d668:	f829 7b02 	strh.w	r7, [r9], #2
 801d66c:	4402      	add	r2, r0
 801d66e:	f108 38ff 	add.w	r8, r8, #4294967295
 801d672:	e7af      	b.n	801d5d4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801d674:	f04f 0e00 	mov.w	lr, #0
 801d678:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801d67c:	eb03 040e 	add.w	r4, r3, lr
 801d680:	2c00      	cmp	r4, #0
 801d682:	dc43      	bgt.n	801d70c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801d684:	9a00      	ldr	r2, [sp, #0]
 801d686:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d68a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801d68e:	9300      	str	r3, [sp, #0]
 801d690:	9b02      	ldr	r3, [sp, #8]
 801d692:	2b00      	cmp	r3, #0
 801d694:	f340 8098 	ble.w	801d7c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801d698:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d69c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d6a0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d6a4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d6a8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d6ac:	eef0 6a62 	vmov.f32	s13, s5
 801d6b0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d6b4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d6b8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d6bc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d6c0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d6c4:	edcd 6a11 	vstr	s13, [sp, #68]	@ 0x44
 801d6c8:	eef0 6a43 	vmov.f32	s13, s6
 801d6cc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d6d0:	ee12 2a90 	vmov	r2, s5
 801d6d4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d6d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d6da:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d6de:	fb92 f3f3 	sdiv	r3, r2, r3
 801d6e2:	ee13 2a10 	vmov	r2, s6
 801d6e6:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d6e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d6ea:	edcd 6a12 	vstr	s13, [sp, #72]	@ 0x48
 801d6ee:	fb92 f3f3 	sdiv	r3, r2, r3
 801d6f2:	9314      	str	r3, [sp, #80]	@ 0x50
 801d6f4:	9b02      	ldr	r3, [sp, #8]
 801d6f6:	9a05      	ldr	r2, [sp, #20]
 801d6f8:	3b01      	subs	r3, #1
 801d6fa:	9302      	str	r3, [sp, #8]
 801d6fc:	eeb0 3a67 	vmov.f32	s6, s15
 801d700:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d702:	eef0 2a47 	vmov.f32	s5, s14
 801d706:	bf08      	it	eq
 801d708:	4613      	moveq	r3, r2
 801d70a:	e72a      	b.n	801d562 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801d70c:	140f      	asrs	r7, r1, #16
 801d70e:	d454      	bmi.n	801d7ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801d710:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801d714:	42be      	cmp	r6, r7
 801d716:	dd50      	ble.n	801d7ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801d718:	ea5f 4822 	movs.w	r8, r2, asr #16
 801d71c:	d44d      	bmi.n	801d7ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801d71e:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801d722:	4544      	cmp	r4, r8
 801d724:	dd49      	ble.n	801d7ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801d726:	f06f 0001 	mvn.w	r0, #1
 801d72a:	9c04      	ldr	r4, [sp, #16]
 801d72c:	b236      	sxth	r6, r6
 801d72e:	fb08 4606 	mla	r6, r8, r6, r4
 801d732:	f816 8007 	ldrb.w	r8, [r6, r7]
 801d736:	9c01      	ldr	r4, [sp, #4]
 801d738:	fb00 fa0e 	mul.w	sl, r0, lr
 801d73c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801d740:	eb04 0b08 	add.w	fp, r4, r8
 801d744:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801d748:	9800      	ldr	r0, [sp, #0]
 801d74a:	fb16 f609 	smulbb	r6, r6, r9
 801d74e:	f830 400a 	ldrh.w	r4, [r0, sl]
 801d752:	f89b b001 	ldrb.w	fp, [fp, #1]
 801d756:	1227      	asrs	r7, r4, #8
 801d758:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801d75c:	fb07 6705 	mla	r7, r7, r5, r6
 801d760:	10e6      	asrs	r6, r4, #3
 801d762:	00e4      	lsls	r4, r4, #3
 801d764:	b2e4      	uxtb	r4, r4
 801d766:	fb1b fb09 	smulbb	fp, fp, r9
 801d76a:	9801      	ldr	r0, [sp, #4]
 801d76c:	fb14 f405 	smulbb	r4, r4, r5
 801d770:	f810 8008 	ldrb.w	r8, [r0, r8]
 801d774:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801d778:	fb06 b605 	mla	r6, r6, r5, fp
 801d77c:	fb08 4809 	mla	r8, r8, r9, r4
 801d780:	b2bf      	uxth	r7, r7
 801d782:	b2b6      	uxth	r6, r6
 801d784:	fa1f f888 	uxth.w	r8, r8
 801d788:	1c7c      	adds	r4, r7, #1
 801d78a:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801d78e:	f106 0b01 	add.w	fp, r6, #1
 801d792:	f108 0401 	add.w	r4, r8, #1
 801d796:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801d79a:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801d79e:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801d7a2:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801d7a6:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801d7aa:	4327      	orrs	r7, r4
 801d7ac:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 801d7b0:	9800      	ldr	r0, [sp, #0]
 801d7b2:	ea47 070b 	orr.w	r7, r7, fp
 801d7b6:	f820 700a 	strh.w	r7, [r0, sl]
 801d7ba:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801d7bc:	f10e 3eff 	add.w	lr, lr, #4294967295
 801d7c0:	4401      	add	r1, r0
 801d7c2:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801d7c4:	4402      	add	r2, r0
 801d7c6:	e759      	b.n	801d67c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801d7c8:	b007      	add	sp, #28
 801d7ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801d7d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d7d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7d8:	b085      	sub	sp, #20
 801d7da:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801d7dc:	9203      	str	r2, [sp, #12]
 801d7de:	6870      	ldr	r0, [r6, #4]
 801d7e0:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801d7e4:	fb00 2404 	mla	r4, r0, r4, r2
 801d7e8:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 801d7ea:	6832      	ldr	r2, [r6, #0]
 801d7ec:	686f      	ldr	r7, [r5, #4]
 801d7ee:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d7f2:	682a      	ldr	r2, [r5, #0]
 801d7f4:	f8dd c044 	ldr.w	ip, [sp, #68]	@ 0x44
 801d7f8:	9101      	str	r1, [sp, #4]
 801d7fa:	9202      	str	r2, [sp, #8]
 801d7fc:	3704      	adds	r7, #4
 801d7fe:	9a01      	ldr	r2, [sp, #4]
 801d800:	2a00      	cmp	r2, #0
 801d802:	dc03      	bgt.n	801d80c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801d804:	9a03      	ldr	r2, [sp, #12]
 801d806:	2a00      	cmp	r2, #0
 801d808:	f340 80cc 	ble.w	801d9a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801d80c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d80e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801d812:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801d816:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801d818:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801d81c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801d820:	2b00      	cmp	r3, #0
 801d822:	dd0d      	ble.n	801d840 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d824:	1406      	asrs	r6, r0, #16
 801d826:	d405      	bmi.n	801d834 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801d828:	454e      	cmp	r6, r9
 801d82a:	da03      	bge.n	801d834 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801d82c:	1416      	asrs	r6, r2, #16
 801d82e:	d401      	bmi.n	801d834 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801d830:	4546      	cmp	r6, r8
 801d832:	db06      	blt.n	801d842 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d834:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801d836:	4460      	add	r0, ip
 801d838:	4432      	add	r2, r6
 801d83a:	3b01      	subs	r3, #1
 801d83c:	3402      	adds	r4, #2
 801d83e:	e7ef      	b.n	801d820 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801d840:	d00f      	beq.n	801d862 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d842:	1e5e      	subs	r6, r3, #1
 801d844:	fb0c 0e06 	mla	lr, ip, r6, r0
 801d848:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801d84c:	d543      	bpl.n	801d8d6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801d84e:	4698      	mov	r8, r3
 801d850:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801d854:	f1b8 0f00 	cmp.w	r8, #0
 801d858:	dc71      	bgt.n	801d93e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801d85a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d85e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d862:	9b01      	ldr	r3, [sp, #4]
 801d864:	2b00      	cmp	r3, #0
 801d866:	f340 809d 	ble.w	801d9a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801d86a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d86e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d872:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d876:	eeb0 6a62 	vmov.f32	s12, s5
 801d87a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d87e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d882:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d886:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d88a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d88e:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801d892:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d896:	eeb0 6a43 	vmov.f32	s12, s6
 801d89a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d89e:	ee12 2a90 	vmov	r2, s5
 801d8a2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d8a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d8a8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d8ac:	fb92 fcf3 	sdiv	ip, r2, r3
 801d8b0:	ee13 2a10 	vmov	r2, s6
 801d8b4:	fb92 f3f3 	sdiv	r3, r2, r3
 801d8b8:	9312      	str	r3, [sp, #72]	@ 0x48
 801d8ba:	9b01      	ldr	r3, [sp, #4]
 801d8bc:	9a03      	ldr	r2, [sp, #12]
 801d8be:	3b01      	subs	r3, #1
 801d8c0:	9301      	str	r3, [sp, #4]
 801d8c2:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801d8c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d8c8:	eeb0 3a67 	vmov.f32	s6, s15
 801d8cc:	bf08      	it	eq
 801d8ce:	4613      	moveq	r3, r2
 801d8d0:	eef0 2a47 	vmov.f32	s5, s14
 801d8d4:	e793      	b.n	801d7fe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801d8d6:	45ce      	cmp	lr, r9
 801d8d8:	dab9      	bge.n	801d84e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d8da:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801d8dc:	fb01 2606 	mla	r6, r1, r6, r2
 801d8e0:	1436      	asrs	r6, r6, #16
 801d8e2:	d4b4      	bmi.n	801d84e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d8e4:	4546      	cmp	r6, r8
 801d8e6:	dab2      	bge.n	801d84e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d8e8:	4698      	mov	r8, r3
 801d8ea:	46a2      	mov	sl, r4
 801d8ec:	f1b8 0f00 	cmp.w	r8, #0
 801d8f0:	ddb3      	ble.n	801d85a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801d8f2:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801d8f6:	9902      	ldr	r1, [sp, #8]
 801d8f8:	1416      	asrs	r6, r2, #16
 801d8fa:	fb09 1606 	mla	r6, r9, r6, r1
 801d8fe:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801d902:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801d906:	4929      	ldr	r1, [pc, #164]	@ (801d9ac <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801d908:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801d90c:	eb07 0b0e 	add.w	fp, r7, lr
 801d910:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801d914:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801d918:	00f6      	lsls	r6, r6, #3
 801d91a:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801d91e:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801d922:	ea49 0606 	orr.w	r6, r9, r6
 801d926:	f817 900e 	ldrb.w	r9, [r7, lr]
 801d92a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801d92c:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801d930:	f82a 6b02 	strh.w	r6, [sl], #2
 801d934:	4460      	add	r0, ip
 801d936:	440a      	add	r2, r1
 801d938:	f108 38ff 	add.w	r8, r8, #4294967295
 801d93c:	e7d6      	b.n	801d8ec <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801d93e:	ea5f 4920 	movs.w	r9, r0, asr #16
 801d942:	d429      	bmi.n	801d998 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801d944:	68ae      	ldr	r6, [r5, #8]
 801d946:	454e      	cmp	r6, r9
 801d948:	dd26      	ble.n	801d998 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801d94a:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801d94e:	d423      	bmi.n	801d998 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801d950:	68e9      	ldr	r1, [r5, #12]
 801d952:	4559      	cmp	r1, fp
 801d954:	dd20      	ble.n	801d998 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801d956:	9902      	ldr	r1, [sp, #8]
 801d958:	fa0f fe86 	sxth.w	lr, r6
 801d95c:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801d960:	f06f 0101 	mvn.w	r1, #1
 801d964:	f81e e009 	ldrb.w	lr, [lr, r9]
 801d968:	fb01 f908 	mul.w	r9, r1, r8
 801d96c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801d970:	eb07 060e 	add.w	r6, r7, lr
 801d974:	f896 b002 	ldrb.w	fp, [r6, #2]
 801d978:	7876      	ldrb	r6, [r6, #1]
 801d97a:	f2a1 71fe 	subw	r1, r1, #2046	@ 0x7fe
 801d97e:	00f6      	lsls	r6, r6, #3
 801d980:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801d984:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801d988:	ea4b 0606 	orr.w	r6, fp, r6
 801d98c:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801d990:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801d994:	f82a 6009 	strh.w	r6, [sl, r9]
 801d998:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801d99a:	4460      	add	r0, ip
 801d99c:	440a      	add	r2, r1
 801d99e:	f108 38ff 	add.w	r8, r8, #4294967295
 801d9a2:	e757      	b.n	801d854 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d9a4:	b005      	add	sp, #20
 801d9a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d9aa:	bf00      	nop
 801d9ac:	fffff800 	.word	0xfffff800

0801d9b0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d9b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d9b8:	b087      	sub	sp, #28
 801d9ba:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801d9bc:	468b      	mov	fp, r1
 801d9be:	9204      	str	r2, [sp, #16]
 801d9c0:	6841      	ldr	r1, [r0, #4]
 801d9c2:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801d9c6:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 801d9ca:	9205      	str	r2, [sp, #20]
 801d9cc:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801d9d0:	fb01 2404 	mla	r4, r1, r4, r2
 801d9d4:	6802      	ldr	r2, [r0, #0]
 801d9d6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d9da:	f8dc 2000 	ldr.w	r2, [ip]
 801d9de:	9201      	str	r2, [sp, #4]
 801d9e0:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801d9e4:	3204      	adds	r2, #4
 801d9e6:	9202      	str	r2, [sp, #8]
 801d9e8:	f1bb 0f00 	cmp.w	fp, #0
 801d9ec:	dc03      	bgt.n	801d9f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801d9ee:	9a04      	ldr	r2, [sp, #16]
 801d9f0:	2a00      	cmp	r2, #0
 801d9f2:	f340 8138 	ble.w	801dc66 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801d9f6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801d9f8:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801d9fc:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801da00:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801da02:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801da06:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801da0a:	2b00      	cmp	r3, #0
 801da0c:	dd0e      	ble.n	801da2c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801da0e:	1402      	asrs	r2, r0, #16
 801da10:	d405      	bmi.n	801da1e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801da12:	42ba      	cmp	r2, r7
 801da14:	da03      	bge.n	801da1e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801da16:	140a      	asrs	r2, r1, #16
 801da18:	d401      	bmi.n	801da1e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801da1a:	42b2      	cmp	r2, r6
 801da1c:	db07      	blt.n	801da2e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801da1e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801da20:	3b01      	subs	r3, #1
 801da22:	4410      	add	r0, r2
 801da24:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801da26:	3402      	adds	r4, #2
 801da28:	4411      	add	r1, r2
 801da2a:	e7ee      	b.n	801da0a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801da2c:	d019      	beq.n	801da62 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801da2e:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801da30:	1e5a      	subs	r2, r3, #1
 801da32:	fb05 0502 	mla	r5, r5, r2, r0
 801da36:	142d      	asrs	r5, r5, #16
 801da38:	d409      	bmi.n	801da4e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801da3a:	42bd      	cmp	r5, r7
 801da3c:	da07      	bge.n	801da4e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801da3e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801da40:	fb05 1202 	mla	r2, r5, r2, r1
 801da44:	1412      	asrs	r2, r2, #16
 801da46:	d402      	bmi.n	801da4e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801da48:	42b2      	cmp	r2, r6
 801da4a:	f2c0 80ac 	blt.w	801dba6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801da4e:	f04f 0e00 	mov.w	lr, #0
 801da52:	eb03 020e 	add.w	r2, r3, lr
 801da56:	2a00      	cmp	r2, #0
 801da58:	dc3e      	bgt.n	801dad8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801da5a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801da5e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801da62:	f1bb 0f00 	cmp.w	fp, #0
 801da66:	f340 80fe 	ble.w	801dc66 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801da6a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801da6e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801da72:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801da76:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801da7a:	eeb0 6a62 	vmov.f32	s12, s5
 801da7e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801da82:	ee77 2a62 	vsub.f32	s5, s14, s5
 801da86:	ee61 7a27 	vmul.f32	s15, s2, s15
 801da8a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801da8e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801da92:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801da96:	eeb0 6a43 	vmov.f32	s12, s6
 801da9a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801da9e:	ee12 2a90 	vmov	r2, s5
 801daa2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801daa6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801daa8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801daac:	fb92 f3f3 	sdiv	r3, r2, r3
 801dab0:	ee13 2a10 	vmov	r2, s6
 801dab4:	9313      	str	r3, [sp, #76]	@ 0x4c
 801dab6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801dab8:	f1bb 0b01 	subs.w	fp, fp, #1
 801dabc:	fb92 f3f3 	sdiv	r3, r2, r3
 801dac0:	9a04      	ldr	r2, [sp, #16]
 801dac2:	9314      	str	r3, [sp, #80]	@ 0x50
 801dac4:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801dac8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801daca:	eeb0 3a67 	vmov.f32	s6, s15
 801dace:	bf08      	it	eq
 801dad0:	4613      	moveq	r3, r2
 801dad2:	eef0 2a47 	vmov.f32	s5, s14
 801dad6:	e787      	b.n	801d9e8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801dad8:	1406      	asrs	r6, r0, #16
 801dada:	d45d      	bmi.n	801db98 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801dadc:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801dae0:	42b5      	cmp	r5, r6
 801dae2:	dd59      	ble.n	801db98 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801dae4:	140f      	asrs	r7, r1, #16
 801dae6:	d457      	bmi.n	801db98 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801dae8:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801daec:	42ba      	cmp	r2, r7
 801daee:	dd53      	ble.n	801db98 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801daf0:	9a01      	ldr	r2, [sp, #4]
 801daf2:	b22d      	sxth	r5, r5
 801daf4:	fb07 2505 	mla	r5, r7, r5, r2
 801daf8:	5daa      	ldrb	r2, [r5, r6]
 801dafa:	9d02      	ldr	r5, [sp, #8]
 801dafc:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801db00:	0e2e      	lsrs	r6, r5, #24
 801db02:	d049      	beq.n	801db98 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801db04:	f06f 0201 	mvn.w	r2, #1
 801db08:	fb02 f20e 	mul.w	r2, r2, lr
 801db0c:	f834 8002 	ldrh.w	r8, [r4, r2]
 801db10:	9203      	str	r2, [sp, #12]
 801db12:	9a05      	ldr	r2, [sp, #20]
 801db14:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801db18:	4356      	muls	r6, r2
 801db1a:	1c72      	adds	r2, r6, #1
 801db1c:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801db20:	1212      	asrs	r2, r2, #8
 801db22:	fa1f f982 	uxth.w	r9, r2
 801db26:	43d2      	mvns	r2, r2
 801db28:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801db2c:	fb16 f609 	smulbb	r6, r6, r9
 801db30:	b2ed      	uxtb	r5, r5
 801db32:	ea4f 2728 	mov.w	r7, r8, asr #8
 801db36:	fb15 f509 	smulbb	r5, r5, r9
 801db3a:	b2d2      	uxtb	r2, r2
 801db3c:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801db40:	fb07 6702 	mla	r7, r7, r2, r6
 801db44:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801db48:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801db4c:	fb1a fa09 	smulbb	sl, sl, r9
 801db50:	fa5f f888 	uxtb.w	r8, r8
 801db54:	fb08 5502 	mla	r5, r8, r2, r5
 801db58:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801db5c:	fb06 a602 	mla	r6, r6, r2, sl
 801db60:	b2bf      	uxth	r7, r7
 801db62:	b2ad      	uxth	r5, r5
 801db64:	1c7a      	adds	r2, r7, #1
 801db66:	f105 0a01 	add.w	sl, r5, #1
 801db6a:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801db6e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801db72:	b2b6      	uxth	r6, r6
 801db74:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801db78:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801db7c:	ea4a 0707 	orr.w	r7, sl, r7
 801db80:	f106 0a01 	add.w	sl, r6, #1
 801db84:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801db88:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801db8c:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801db90:	9a03      	ldr	r2, [sp, #12]
 801db92:	ea47 070a 	orr.w	r7, r7, sl
 801db96:	52a7      	strh	r7, [r4, r2]
 801db98:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801db9a:	f10e 3eff 	add.w	lr, lr, #4294967295
 801db9e:	4410      	add	r0, r2
 801dba0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801dba2:	4411      	add	r1, r2
 801dba4:	e755      	b.n	801da52 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801dba6:	f04f 0800 	mov.w	r8, #0
 801dbaa:	eba3 0208 	sub.w	r2, r3, r8
 801dbae:	2a00      	cmp	r2, #0
 801dbb0:	f77f af53 	ble.w	801da5a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801dbb4:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801dbb8:	9f01      	ldr	r7, [sp, #4]
 801dbba:	140a      	asrs	r2, r1, #16
 801dbbc:	fb06 7202 	mla	r2, r6, r2, r7
 801dbc0:	1405      	asrs	r5, r0, #16
 801dbc2:	5d52      	ldrb	r2, [r2, r5]
 801dbc4:	9d02      	ldr	r5, [sp, #8]
 801dbc6:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801dbca:	0e2e      	lsrs	r6, r5, #24
 801dbcc:	d044      	beq.n	801dc58 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801dbce:	9a05      	ldr	r2, [sp, #20]
 801dbd0:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801dbd4:	4356      	muls	r6, r2
 801dbd6:	1c72      	adds	r2, r6, #1
 801dbd8:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801dbdc:	1212      	asrs	r2, r2, #8
 801dbde:	fa1f f982 	uxth.w	r9, r2
 801dbe2:	43d2      	mvns	r2, r2
 801dbe4:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801dbe8:	fb16 f609 	smulbb	r6, r6, r9
 801dbec:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801dbf0:	b2ed      	uxtb	r5, r5
 801dbf2:	ea4f 272e 	mov.w	r7, lr, asr #8
 801dbf6:	fb15 f509 	smulbb	r5, r5, r9
 801dbfa:	b2d2      	uxtb	r2, r2
 801dbfc:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801dc00:	fb07 6702 	mla	r7, r7, r2, r6
 801dc04:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801dc08:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801dc0c:	fb1a fa09 	smulbb	sl, sl, r9
 801dc10:	fa5f fe8e 	uxtb.w	lr, lr
 801dc14:	fb0e 5502 	mla	r5, lr, r2, r5
 801dc18:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801dc1c:	fb06 a602 	mla	r6, r6, r2, sl
 801dc20:	b2bf      	uxth	r7, r7
 801dc22:	b2ad      	uxth	r5, r5
 801dc24:	1c7a      	adds	r2, r7, #1
 801dc26:	f105 0a01 	add.w	sl, r5, #1
 801dc2a:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801dc2e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801dc32:	b2b6      	uxth	r6, r6
 801dc34:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801dc38:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801dc3c:	ea4a 0707 	orr.w	r7, sl, r7
 801dc40:	f106 0a01 	add.w	sl, r6, #1
 801dc44:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801dc48:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801dc4c:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801dc50:	ea47 070a 	orr.w	r7, r7, sl
 801dc54:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801dc58:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801dc5a:	f108 0801 	add.w	r8, r8, #1
 801dc5e:	4410      	add	r0, r2
 801dc60:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801dc62:	4411      	add	r1, r2
 801dc64:	e7a1      	b.n	801dbaa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801dc66:	b007      	add	sp, #28
 801dc68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dc6c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dc6c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801dc70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc74:	b085      	sub	sp, #20
 801dc76:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801dc78:	468b      	mov	fp, r1
 801dc7a:	6841      	ldr	r1, [r0, #4]
 801dc7c:	9203      	str	r2, [sp, #12]
 801dc7e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801dc82:	fb01 2404 	mla	r4, r1, r4, r2
 801dc86:	f8dd e058 	ldr.w	lr, [sp, #88]	@ 0x58
 801dc8a:	6802      	ldr	r2, [r0, #0]
 801dc8c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801dc90:	f8de 2000 	ldr.w	r2, [lr]
 801dc94:	9200      	str	r2, [sp, #0]
 801dc96:	f8de 2004 	ldr.w	r2, [lr, #4]
 801dc9a:	3204      	adds	r2, #4
 801dc9c:	9201      	str	r2, [sp, #4]
 801dc9e:	f1bb 0f00 	cmp.w	fp, #0
 801dca2:	dc03      	bgt.n	801dcac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801dca4:	9a03      	ldr	r2, [sp, #12]
 801dca6:	2a00      	cmp	r2, #0
 801dca8:	f340 8153 	ble.w	801df52 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801dcac:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801dcae:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801dcb2:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801dcb6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801dcb8:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801dcbc:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801dcc0:	2b00      	cmp	r3, #0
 801dcc2:	dd0e      	ble.n	801dce2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801dcc4:	1408      	asrs	r0, r1, #16
 801dcc6:	d405      	bmi.n	801dcd4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801dcc8:	42b8      	cmp	r0, r7
 801dcca:	da03      	bge.n	801dcd4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801dccc:	1410      	asrs	r0, r2, #16
 801dcce:	d401      	bmi.n	801dcd4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801dcd0:	42b0      	cmp	r0, r6
 801dcd2:	db07      	blt.n	801dce4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801dcd4:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801dcd6:	3b01      	subs	r3, #1
 801dcd8:	4401      	add	r1, r0
 801dcda:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801dcdc:	3402      	adds	r4, #2
 801dcde:	4402      	add	r2, r0
 801dce0:	e7ee      	b.n	801dcc0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801dce2:	d017      	beq.n	801dd14 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801dce4:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801dce6:	1e58      	subs	r0, r3, #1
 801dce8:	fb05 1500 	mla	r5, r5, r0, r1
 801dcec:	142d      	asrs	r5, r5, #16
 801dcee:	d409      	bmi.n	801dd04 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801dcf0:	42bd      	cmp	r5, r7
 801dcf2:	da07      	bge.n	801dd04 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801dcf4:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801dcf6:	fb05 2000 	mla	r0, r5, r0, r2
 801dcfa:	1400      	asrs	r0, r0, #16
 801dcfc:	d402      	bmi.n	801dd04 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801dcfe:	42b0      	cmp	r0, r6
 801dd00:	f2c0 80bc 	blt.w	801de7c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801dd04:	2600      	movs	r6, #0
 801dd06:	1998      	adds	r0, r3, r6
 801dd08:	2800      	cmp	r0, #0
 801dd0a:	dc3e      	bgt.n	801dd8a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801dd0c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801dd10:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801dd14:	f1bb 0f00 	cmp.w	fp, #0
 801dd18:	f340 811b 	ble.w	801df52 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801dd1c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dd20:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dd24:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801dd28:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dd2c:	eeb0 6a62 	vmov.f32	s12, s5
 801dd30:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dd34:	ee77 2a62 	vsub.f32	s5, s14, s5
 801dd38:	ee61 7a27 	vmul.f32	s15, s2, s15
 801dd3c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dd40:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801dd44:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801dd48:	eeb0 6a43 	vmov.f32	s12, s6
 801dd4c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801dd50:	ee12 2a90 	vmov	r2, s5
 801dd54:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801dd58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dd5a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dd5e:	fb92 f3f3 	sdiv	r3, r2, r3
 801dd62:	ee13 2a10 	vmov	r2, s6
 801dd66:	9311      	str	r3, [sp, #68]	@ 0x44
 801dd68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dd6a:	f1bb 0b01 	subs.w	fp, fp, #1
 801dd6e:	fb92 f3f3 	sdiv	r3, r2, r3
 801dd72:	9a03      	ldr	r2, [sp, #12]
 801dd74:	9312      	str	r3, [sp, #72]	@ 0x48
 801dd76:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801dd7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dd7c:	eeb0 3a67 	vmov.f32	s6, s15
 801dd80:	bf08      	it	eq
 801dd82:	4613      	moveq	r3, r2
 801dd84:	eef0 2a47 	vmov.f32	s5, s14
 801dd88:	e789      	b.n	801dc9e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801dd8a:	140f      	asrs	r7, r1, #16
 801dd8c:	d426      	bmi.n	801dddc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801dd8e:	f8de 5008 	ldr.w	r5, [lr, #8]
 801dd92:	42bd      	cmp	r5, r7
 801dd94:	dd22      	ble.n	801dddc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801dd96:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801dd9a:	d41f      	bmi.n	801dddc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801dd9c:	f8de 000c 	ldr.w	r0, [lr, #12]
 801dda0:	4560      	cmp	r0, ip
 801dda2:	dd1b      	ble.n	801dddc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801dda4:	9800      	ldr	r0, [sp, #0]
 801dda6:	b22d      	sxth	r5, r5
 801dda8:	fb0c 0505 	mla	r5, ip, r5, r0
 801ddac:	5de8      	ldrb	r0, [r5, r7]
 801ddae:	9d01      	ldr	r5, [sp, #4]
 801ddb0:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801ddb4:	0e07      	lsrs	r7, r0, #24
 801ddb6:	2fff      	cmp	r7, #255	@ 0xff
 801ddb8:	d116      	bne.n	801dde8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801ddba:	f06f 0501 	mvn.w	r5, #1
 801ddbe:	fb05 f706 	mul.w	r7, r5, r6
 801ddc2:	f2a5 75fe 	subw	r5, r5, #2046	@ 0x7fe
 801ddc6:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801ddca:	0945      	lsrs	r5, r0, #5
 801ddcc:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801ddd0:	ea4c 0505 	orr.w	r5, ip, r5
 801ddd4:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801ddd8:	4305      	orrs	r5, r0
 801ddda:	53e5      	strh	r5, [r4, r7]
 801dddc:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801ddde:	3e01      	subs	r6, #1
 801dde0:	4401      	add	r1, r0
 801dde2:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801dde4:	4402      	add	r2, r0
 801dde6:	e78e      	b.n	801dd06 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801dde8:	b2fd      	uxtb	r5, r7
 801ddea:	2f00      	cmp	r7, #0
 801ddec:	d0f6      	beq.n	801dddc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ddee:	f06f 0701 	mvn.w	r7, #1
 801ddf2:	fa1f f985 	uxth.w	r9, r5
 801ddf6:	43ed      	mvns	r5, r5
 801ddf8:	4377      	muls	r7, r6
 801ddfa:	f834 8007 	ldrh.w	r8, [r4, r7]
 801ddfe:	9702      	str	r7, [sp, #8]
 801de00:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801de04:	fb17 f709 	smulbb	r7, r7, r9
 801de08:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801de0c:	b2c0      	uxtb	r0, r0
 801de0e:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801de12:	fb10 f009 	smulbb	r0, r0, r9
 801de16:	b2ed      	uxtb	r5, r5
 801de18:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801de1c:	fb0c 7c05 	mla	ip, ip, r5, r7
 801de20:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801de24:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801de28:	fb1a fa09 	smulbb	sl, sl, r9
 801de2c:	fa5f f888 	uxtb.w	r8, r8
 801de30:	fb08 0005 	mla	r0, r8, r5, r0
 801de34:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801de38:	fb07 a705 	mla	r7, r7, r5, sl
 801de3c:	b280      	uxth	r0, r0
 801de3e:	fa1f fc8c 	uxth.w	ip, ip
 801de42:	f100 0a01 	add.w	sl, r0, #1
 801de46:	f10c 0501 	add.w	r5, ip, #1
 801de4a:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801de4e:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801de52:	b2bf      	uxth	r7, r7
 801de54:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801de58:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801de5c:	ea4a 0c0c 	orr.w	ip, sl, ip
 801de60:	f107 0a01 	add.w	sl, r7, #1
 801de64:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801de68:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801de6c:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801de70:	9802      	ldr	r0, [sp, #8]
 801de72:	ea4c 0c0a 	orr.w	ip, ip, sl
 801de76:	f824 c000 	strh.w	ip, [r4, r0]
 801de7a:	e7af      	b.n	801dddc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801de7c:	f04f 0800 	mov.w	r8, #0
 801de80:	eba3 0008 	sub.w	r0, r3, r8
 801de84:	2800      	cmp	r0, #0
 801de86:	f77f af41 	ble.w	801dd0c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801de8a:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801de8e:	9f00      	ldr	r7, [sp, #0]
 801de90:	1410      	asrs	r0, r2, #16
 801de92:	fb06 7000 	mla	r0, r6, r0, r7
 801de96:	140d      	asrs	r5, r1, #16
 801de98:	5d40      	ldrb	r0, [r0, r5]
 801de9a:	9d01      	ldr	r5, [sp, #4]
 801de9c:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801dea0:	0e2e      	lsrs	r6, r5, #24
 801dea2:	2eff      	cmp	r6, #255	@ 0xff
 801dea4:	d112      	bne.n	801decc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801dea6:	482c      	ldr	r0, [pc, #176]	@ (801df58 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801dea8:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801deac:	0968      	lsrs	r0, r5, #5
 801deae:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801deb2:	4330      	orrs	r0, r6
 801deb4:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801deb8:	4328      	orrs	r0, r5
 801deba:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 801debe:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801dec0:	f108 0801 	add.w	r8, r8, #1
 801dec4:	4401      	add	r1, r0
 801dec6:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801dec8:	4402      	add	r2, r0
 801deca:	e7d9      	b.n	801de80 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801decc:	b2f0      	uxtb	r0, r6
 801dece:	2e00      	cmp	r6, #0
 801ded0:	d0f5      	beq.n	801debe <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801ded2:	fa1f f980 	uxth.w	r9, r0
 801ded6:	43c0      	mvns	r0, r0
 801ded8:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801dedc:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801dee0:	fb16 f609 	smulbb	r6, r6, r9
 801dee4:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801dee8:	b2ed      	uxtb	r5, r5
 801deea:	ea4f 272c 	mov.w	r7, ip, asr #8
 801deee:	fb15 f509 	smulbb	r5, r5, r9
 801def2:	b2c0      	uxtb	r0, r0
 801def4:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801def8:	fb07 6700 	mla	r7, r7, r0, r6
 801defc:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801df00:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801df04:	fb1a fa09 	smulbb	sl, sl, r9
 801df08:	fa5f fc8c 	uxtb.w	ip, ip
 801df0c:	fb0c 5500 	mla	r5, ip, r0, r5
 801df10:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801df14:	fb06 a600 	mla	r6, r6, r0, sl
 801df18:	b2bf      	uxth	r7, r7
 801df1a:	b2ad      	uxth	r5, r5
 801df1c:	1c78      	adds	r0, r7, #1
 801df1e:	f105 0a01 	add.w	sl, r5, #1
 801df22:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801df26:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801df2a:	b2b6      	uxth	r6, r6
 801df2c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801df30:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801df34:	ea4a 0707 	orr.w	r7, sl, r7
 801df38:	f106 0a01 	add.w	sl, r6, #1
 801df3c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801df40:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801df44:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801df48:	ea47 070a 	orr.w	r7, r7, sl
 801df4c:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801df50:	e7b5      	b.n	801debe <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801df52:	b005      	add	sp, #20
 801df54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df58:	fffff800 	.word	0xfffff800

0801df5c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801df5c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801df60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df64:	b087      	sub	sp, #28
 801df66:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801df68:	468b      	mov	fp, r1
 801df6a:	9204      	str	r2, [sp, #16]
 801df6c:	6861      	ldr	r1, [r4, #4]
 801df6e:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801df72:	f8dd e060 	ldr.w	lr, [sp, #96]	@ 0x60
 801df76:	9205      	str	r2, [sp, #20]
 801df78:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	@ 0x58
 801df7c:	fb01 2000 	mla	r0, r1, r0, r2
 801df80:	6822      	ldr	r2, [r4, #0]
 801df82:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801df86:	f8de 2000 	ldr.w	r2, [lr]
 801df8a:	9201      	str	r2, [sp, #4]
 801df8c:	f8de 2004 	ldr.w	r2, [lr, #4]
 801df90:	9202      	str	r2, [sp, #8]
 801df92:	f1bb 0f00 	cmp.w	fp, #0
 801df96:	dc03      	bgt.n	801dfa0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801df98:	9a04      	ldr	r2, [sp, #16]
 801df9a:	2a00      	cmp	r2, #0
 801df9c:	f340 8142 	ble.w	801e224 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801dfa0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801dfa2:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801dfa6:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801dfaa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801dfac:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801dfb0:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801dfb4:	2b00      	cmp	r3, #0
 801dfb6:	dd0e      	ble.n	801dfd6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801dfb8:	140c      	asrs	r4, r1, #16
 801dfba:	d405      	bmi.n	801dfc8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801dfbc:	42bc      	cmp	r4, r7
 801dfbe:	da03      	bge.n	801dfc8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801dfc0:	1414      	asrs	r4, r2, #16
 801dfc2:	d401      	bmi.n	801dfc8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801dfc4:	42b4      	cmp	r4, r6
 801dfc6:	db07      	blt.n	801dfd8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801dfc8:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801dfca:	3b01      	subs	r3, #1
 801dfcc:	4421      	add	r1, r4
 801dfce:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801dfd0:	3002      	adds	r0, #2
 801dfd2:	4422      	add	r2, r4
 801dfd4:	e7ee      	b.n	801dfb4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801dfd6:	d019      	beq.n	801e00c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801dfd8:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801dfda:	1e5c      	subs	r4, r3, #1
 801dfdc:	fb05 1504 	mla	r5, r5, r4, r1
 801dfe0:	142d      	asrs	r5, r5, #16
 801dfe2:	d409      	bmi.n	801dff8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801dfe4:	42bd      	cmp	r5, r7
 801dfe6:	da07      	bge.n	801dff8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801dfe8:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801dfea:	fb05 2404 	mla	r4, r5, r4, r2
 801dfee:	1424      	asrs	r4, r4, #16
 801dff0:	d402      	bmi.n	801dff8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801dff2:	42b4      	cmp	r4, r6
 801dff4:	f2c0 80b1 	blt.w	801e15a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801dff8:	f04f 0800 	mov.w	r8, #0
 801dffc:	eb03 0408 	add.w	r4, r3, r8
 801e000:	2c00      	cmp	r4, #0
 801e002:	dc3e      	bgt.n	801e082 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801e004:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e008:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e00c:	f1bb 0f00 	cmp.w	fp, #0
 801e010:	f340 8108 	ble.w	801e224 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801e014:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e018:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e01c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e020:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e024:	eeb0 6a62 	vmov.f32	s12, s5
 801e028:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e02c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e030:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e034:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e038:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e03c:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801e040:	eeb0 6a43 	vmov.f32	s12, s6
 801e044:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e048:	ee12 2a90 	vmov	r2, s5
 801e04c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e050:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e052:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e056:	fb92 f3f3 	sdiv	r3, r2, r3
 801e05a:	ee13 2a10 	vmov	r2, s6
 801e05e:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e060:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e062:	f1bb 0b01 	subs.w	fp, fp, #1
 801e066:	fb92 f3f3 	sdiv	r3, r2, r3
 801e06a:	9a04      	ldr	r2, [sp, #16]
 801e06c:	9314      	str	r3, [sp, #80]	@ 0x50
 801e06e:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801e072:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e074:	eeb0 3a67 	vmov.f32	s6, s15
 801e078:	bf08      	it	eq
 801e07a:	4613      	moveq	r3, r2
 801e07c:	eef0 2a47 	vmov.f32	s5, s14
 801e080:	e787      	b.n	801df92 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801e082:	140e      	asrs	r6, r1, #16
 801e084:	d462      	bmi.n	801e14c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801e086:	f8de 5008 	ldr.w	r5, [lr, #8]
 801e08a:	42b5      	cmp	r5, r6
 801e08c:	dd5e      	ble.n	801e14c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801e08e:	1417      	asrs	r7, r2, #16
 801e090:	d45c      	bmi.n	801e14c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801e092:	f8de 400c 	ldr.w	r4, [lr, #12]
 801e096:	42bc      	cmp	r4, r7
 801e098:	dd58      	ble.n	801e14c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801e09a:	b22d      	sxth	r5, r5
 801e09c:	fb07 6505 	mla	r5, r7, r5, r6
 801e0a0:	9c02      	ldr	r4, [sp, #8]
 801e0a2:	5d66      	ldrb	r6, [r4, r5]
 801e0a4:	2e00      	cmp	r6, #0
 801e0a6:	d051      	beq.n	801e14c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801e0a8:	9c01      	ldr	r4, [sp, #4]
 801e0aa:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801e0ae:	f06f 0401 	mvn.w	r4, #1
 801e0b2:	fb04 f408 	mul.w	r4, r4, r8
 801e0b6:	5b05      	ldrh	r5, [r0, r4]
 801e0b8:	9403      	str	r4, [sp, #12]
 801e0ba:	9c05      	ldr	r4, [sp, #20]
 801e0bc:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801e0c0:	4366      	muls	r6, r4
 801e0c2:	1c74      	adds	r4, r6, #1
 801e0c4:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801e0c8:	1224      	asrs	r4, r4, #8
 801e0ca:	b2a7      	uxth	r7, r4
 801e0cc:	43e4      	mvns	r4, r4
 801e0ce:	122e      	asrs	r6, r5, #8
 801e0d0:	b2e4      	uxtb	r4, r4
 801e0d2:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801e0d6:	fb16 f604 	smulbb	r6, r6, r4
 801e0da:	00ed      	lsls	r5, r5, #3
 801e0dc:	b2ed      	uxtb	r5, r5
 801e0de:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801e0e2:	fb15 f504 	smulbb	r5, r5, r4
 801e0e6:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801e0ea:	fb0c 6c07 	mla	ip, ip, r7, r6
 801e0ee:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801e0f2:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801e0f6:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801e0fa:	fb1a fa04 	smulbb	sl, sl, r4
 801e0fe:	fa5f f989 	uxtb.w	r9, r9
 801e102:	fb09 5507 	mla	r5, r9, r7, r5
 801e106:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801e10a:	fb06 a607 	mla	r6, r6, r7, sl
 801e10e:	fa1f fc8c 	uxth.w	ip, ip
 801e112:	b2ad      	uxth	r5, r5
 801e114:	f10c 0401 	add.w	r4, ip, #1
 801e118:	f105 0a01 	add.w	sl, r5, #1
 801e11c:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801e120:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801e124:	b2b6      	uxth	r6, r6
 801e126:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e12a:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801e12e:	ea4a 0c0c 	orr.w	ip, sl, ip
 801e132:	f106 0a01 	add.w	sl, r6, #1
 801e136:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801e13a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e13e:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801e142:	9c03      	ldr	r4, [sp, #12]
 801e144:	ea4c 0c0a 	orr.w	ip, ip, sl
 801e148:	f820 c004 	strh.w	ip, [r0, r4]
 801e14c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e14e:	f108 38ff 	add.w	r8, r8, #4294967295
 801e152:	4421      	add	r1, r4
 801e154:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e156:	4422      	add	r2, r4
 801e158:	e750      	b.n	801dffc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801e15a:	f04f 0900 	mov.w	r9, #0
 801e15e:	eba3 0409 	sub.w	r4, r3, r9
 801e162:	2c00      	cmp	r4, #0
 801e164:	f77f af4e 	ble.w	801e004 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801e168:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801e16c:	140d      	asrs	r5, r1, #16
 801e16e:	1414      	asrs	r4, r2, #16
 801e170:	fb06 5404 	mla	r4, r6, r4, r5
 801e174:	9d02      	ldr	r5, [sp, #8]
 801e176:	5d2e      	ldrb	r6, [r5, r4]
 801e178:	2e00      	cmp	r6, #0
 801e17a:	d04c      	beq.n	801e216 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801e17c:	9d01      	ldr	r5, [sp, #4]
 801e17e:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801e182:	9c05      	ldr	r4, [sp, #20]
 801e184:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801e188:	4366      	muls	r6, r4
 801e18a:	1c74      	adds	r4, r6, #1
 801e18c:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801e190:	1224      	asrs	r4, r4, #8
 801e192:	b2a7      	uxth	r7, r4
 801e194:	43e4      	mvns	r4, r4
 801e196:	122e      	asrs	r6, r5, #8
 801e198:	b2e4      	uxtb	r4, r4
 801e19a:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801e19e:	fb16 f604 	smulbb	r6, r6, r4
 801e1a2:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801e1a6:	00ed      	lsls	r5, r5, #3
 801e1a8:	b2ed      	uxtb	r5, r5
 801e1aa:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801e1ae:	fb15 f504 	smulbb	r5, r5, r4
 801e1b2:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801e1b6:	fb0c 6c07 	mla	ip, ip, r7, r6
 801e1ba:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801e1be:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801e1c2:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801e1c6:	fb1a fa04 	smulbb	sl, sl, r4
 801e1ca:	fa5f f888 	uxtb.w	r8, r8
 801e1ce:	fb08 5507 	mla	r5, r8, r7, r5
 801e1d2:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801e1d6:	fb06 a607 	mla	r6, r6, r7, sl
 801e1da:	fa1f fc8c 	uxth.w	ip, ip
 801e1de:	b2ad      	uxth	r5, r5
 801e1e0:	f10c 0401 	add.w	r4, ip, #1
 801e1e4:	f105 0a01 	add.w	sl, r5, #1
 801e1e8:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801e1ec:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801e1f0:	b2b6      	uxth	r6, r6
 801e1f2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e1f6:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801e1fa:	ea4a 0c0c 	orr.w	ip, sl, ip
 801e1fe:	f106 0a01 	add.w	sl, r6, #1
 801e202:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801e206:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e20a:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801e20e:	ea4c 0c0a 	orr.w	ip, ip, sl
 801e212:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801e216:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e218:	f109 0901 	add.w	r9, r9, #1
 801e21c:	4421      	add	r1, r4
 801e21e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e220:	4422      	add	r2, r4
 801e222:	e79c      	b.n	801e15e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801e224:	b007      	add	sp, #28
 801e226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e22a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e22a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e22e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e232:	b085      	sub	sp, #20
 801e234:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e236:	468b      	mov	fp, r1
 801e238:	6861      	ldr	r1, [r4, #4]
 801e23a:	9203      	str	r2, [sp, #12]
 801e23c:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	@ 0x50
 801e240:	fb01 2000 	mla	r0, r1, r0, r2
 801e244:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801e248:	6822      	ldr	r2, [r4, #0]
 801e24a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801e24e:	f8d8 2000 	ldr.w	r2, [r8]
 801e252:	9200      	str	r2, [sp, #0]
 801e254:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801e258:	9201      	str	r2, [sp, #4]
 801e25a:	f1bb 0f00 	cmp.w	fp, #0
 801e25e:	dc03      	bgt.n	801e268 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801e260:	9a03      	ldr	r2, [sp, #12]
 801e262:	2a00      	cmp	r2, #0
 801e264:	f340 8146 	ble.w	801e4f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801e268:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e26a:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801e26e:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801e272:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e274:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801e278:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801e27c:	2b00      	cmp	r3, #0
 801e27e:	dd0e      	ble.n	801e29e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801e280:	140c      	asrs	r4, r1, #16
 801e282:	d405      	bmi.n	801e290 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e284:	42bc      	cmp	r4, r7
 801e286:	da03      	bge.n	801e290 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e288:	1414      	asrs	r4, r2, #16
 801e28a:	d401      	bmi.n	801e290 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e28c:	42b4      	cmp	r4, r6
 801e28e:	db07      	blt.n	801e2a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e290:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e292:	3b01      	subs	r3, #1
 801e294:	4421      	add	r1, r4
 801e296:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e298:	3002      	adds	r0, #2
 801e29a:	4422      	add	r2, r4
 801e29c:	e7ee      	b.n	801e27c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801e29e:	d017      	beq.n	801e2d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801e2a0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801e2a2:	1e5c      	subs	r4, r3, #1
 801e2a4:	fb05 1504 	mla	r5, r5, r4, r1
 801e2a8:	142d      	asrs	r5, r5, #16
 801e2aa:	d409      	bmi.n	801e2c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e2ac:	42bd      	cmp	r5, r7
 801e2ae:	da07      	bge.n	801e2c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e2b0:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801e2b2:	fb05 2404 	mla	r4, r5, r4, r2
 801e2b6:	1424      	asrs	r4, r4, #16
 801e2b8:	d402      	bmi.n	801e2c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e2ba:	42b4      	cmp	r4, r6
 801e2bc:	f2c0 80b3 	blt.w	801e426 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801e2c0:	2600      	movs	r6, #0
 801e2c2:	199c      	adds	r4, r3, r6
 801e2c4:	2c00      	cmp	r4, #0
 801e2c6:	dc3e      	bgt.n	801e346 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801e2c8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e2cc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e2d0:	f1bb 0f00 	cmp.w	fp, #0
 801e2d4:	f340 810e 	ble.w	801e4f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801e2d8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e2dc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e2e0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e2e4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e2e8:	eeb0 6a62 	vmov.f32	s12, s5
 801e2ec:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e2f0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e2f4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e2f8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e2fc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e300:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801e304:	eeb0 6a43 	vmov.f32	s12, s6
 801e308:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e30c:	ee12 2a90 	vmov	r2, s5
 801e310:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e314:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e316:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e31a:	fb92 f3f3 	sdiv	r3, r2, r3
 801e31e:	ee13 2a10 	vmov	r2, s6
 801e322:	9311      	str	r3, [sp, #68]	@ 0x44
 801e324:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e326:	f1bb 0b01 	subs.w	fp, fp, #1
 801e32a:	fb92 f3f3 	sdiv	r3, r2, r3
 801e32e:	9a03      	ldr	r2, [sp, #12]
 801e330:	9312      	str	r3, [sp, #72]	@ 0x48
 801e332:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801e336:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e338:	eeb0 3a67 	vmov.f32	s6, s15
 801e33c:	bf08      	it	eq
 801e33e:	4613      	moveq	r3, r2
 801e340:	eef0 2a47 	vmov.f32	s5, s14
 801e344:	e789      	b.n	801e25a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801e346:	140f      	asrs	r7, r1, #16
 801e348:	d418      	bmi.n	801e37c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801e34a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801e34e:	42bd      	cmp	r5, r7
 801e350:	dd14      	ble.n	801e37c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801e352:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801e356:	d411      	bmi.n	801e37c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801e358:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801e35c:	4564      	cmp	r4, ip
 801e35e:	dd0d      	ble.n	801e37c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801e360:	b22d      	sxth	r5, r5
 801e362:	fb0c 7505 	mla	r5, ip, r5, r7
 801e366:	9c01      	ldr	r4, [sp, #4]
 801e368:	5d64      	ldrb	r4, [r4, r5]
 801e36a:	2cff      	cmp	r4, #255	@ 0xff
 801e36c:	d10c      	bne.n	801e388 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801e36e:	9c00      	ldr	r4, [sp, #0]
 801e370:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801e374:	f06f 0401 	mvn.w	r4, #1
 801e378:	4374      	muls	r4, r6
 801e37a:	5305      	strh	r5, [r0, r4]
 801e37c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e37e:	3e01      	subs	r6, #1
 801e380:	4421      	add	r1, r4
 801e382:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e384:	4422      	add	r2, r4
 801e386:	e79c      	b.n	801e2c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801e388:	2c00      	cmp	r4, #0
 801e38a:	d0f7      	beq.n	801e37c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801e38c:	9f00      	ldr	r7, [sp, #0]
 801e38e:	fa1f fc84 	uxth.w	ip, r4
 801e392:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801e396:	f06f 0501 	mvn.w	r5, #1
 801e39a:	43e4      	mvns	r4, r4
 801e39c:	4375      	muls	r5, r6
 801e39e:	9502      	str	r5, [sp, #8]
 801e3a0:	5b45      	ldrh	r5, [r0, r5]
 801e3a2:	b2e4      	uxtb	r4, r4
 801e3a4:	122f      	asrs	r7, r5, #8
 801e3a6:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801e3aa:	fb17 f704 	smulbb	r7, r7, r4
 801e3ae:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801e3b2:	00ed      	lsls	r5, r5, #3
 801e3b4:	b2ed      	uxtb	r5, r5
 801e3b6:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801e3ba:	fb15 f504 	smulbb	r5, r5, r4
 801e3be:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801e3c2:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801e3c6:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801e3ca:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801e3ce:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801e3d2:	fb1a fa04 	smulbb	sl, sl, r4
 801e3d6:	fa5f f989 	uxtb.w	r9, r9
 801e3da:	fb09 550c 	mla	r5, r9, ip, r5
 801e3de:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801e3e2:	fb07 a70c 	mla	r7, r7, ip, sl
 801e3e6:	fa1f fe8e 	uxth.w	lr, lr
 801e3ea:	b2ad      	uxth	r5, r5
 801e3ec:	f10e 0401 	add.w	r4, lr, #1
 801e3f0:	f105 0a01 	add.w	sl, r5, #1
 801e3f4:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801e3f8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801e3fc:	b2bf      	uxth	r7, r7
 801e3fe:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e402:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 801e406:	ea4a 0e0e 	orr.w	lr, sl, lr
 801e40a:	f107 0a01 	add.w	sl, r7, #1
 801e40e:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801e412:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e416:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801e41a:	9c02      	ldr	r4, [sp, #8]
 801e41c:	ea4e 0e0a 	orr.w	lr, lr, sl
 801e420:	f820 e004 	strh.w	lr, [r0, r4]
 801e424:	e7aa      	b.n	801e37c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801e426:	f04f 0900 	mov.w	r9, #0
 801e42a:	eba3 0409 	sub.w	r4, r3, r9
 801e42e:	2c00      	cmp	r4, #0
 801e430:	f77f af4a 	ble.w	801e2c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801e434:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801e438:	1414      	asrs	r4, r2, #16
 801e43a:	140d      	asrs	r5, r1, #16
 801e43c:	fb06 5504 	mla	r5, r6, r4, r5
 801e440:	9c01      	ldr	r4, [sp, #4]
 801e442:	5d64      	ldrb	r4, [r4, r5]
 801e444:	2cff      	cmp	r4, #255	@ 0xff
 801e446:	d10b      	bne.n	801e460 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801e448:	9c00      	ldr	r4, [sp, #0]
 801e44a:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801e44e:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801e452:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e454:	f109 0901 	add.w	r9, r9, #1
 801e458:	4421      	add	r1, r4
 801e45a:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e45c:	4422      	add	r2, r4
 801e45e:	e7e4      	b.n	801e42a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801e460:	2c00      	cmp	r4, #0
 801e462:	d0f6      	beq.n	801e452 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801e464:	b2a7      	uxth	r7, r4
 801e466:	43e4      	mvns	r4, r4
 801e468:	9e00      	ldr	r6, [sp, #0]
 801e46a:	b2e4      	uxtb	r4, r4
 801e46c:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801e470:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801e474:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801e478:	122e      	asrs	r6, r5, #8
 801e47a:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801e47e:	fb16 f604 	smulbb	r6, r6, r4
 801e482:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801e486:	00ed      	lsls	r5, r5, #3
 801e488:	b2ed      	uxtb	r5, r5
 801e48a:	fb15 f504 	smulbb	r5, r5, r4
 801e48e:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801e492:	fb0c 6c07 	mla	ip, ip, r7, r6
 801e496:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801e49a:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801e49e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801e4a2:	fb1a fa04 	smulbb	sl, sl, r4
 801e4a6:	fa5f fe8e 	uxtb.w	lr, lr
 801e4aa:	fb0e 5507 	mla	r5, lr, r7, r5
 801e4ae:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801e4b2:	fb06 a607 	mla	r6, r6, r7, sl
 801e4b6:	fa1f fc8c 	uxth.w	ip, ip
 801e4ba:	b2ad      	uxth	r5, r5
 801e4bc:	f10c 0401 	add.w	r4, ip, #1
 801e4c0:	f105 0a01 	add.w	sl, r5, #1
 801e4c4:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801e4c8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801e4cc:	b2b6      	uxth	r6, r6
 801e4ce:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e4d2:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801e4d6:	ea4a 0c0c 	orr.w	ip, sl, ip
 801e4da:	f106 0a01 	add.w	sl, r6, #1
 801e4de:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801e4e2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e4e6:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801e4ea:	ea4c 0c0a 	orr.w	ip, ip, sl
 801e4ee:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801e4f2:	e7ae      	b.n	801e452 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801e4f4:	b005      	add	sp, #20
 801e4f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e4fa <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e4fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e4fe:	b085      	sub	sp, #20
 801e500:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801e502:	9100      	str	r1, [sp, #0]
 801e504:	9203      	str	r2, [sp, #12]
 801e506:	6841      	ldr	r1, [r0, #4]
 801e508:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801e50c:	f8dd e058 	ldr.w	lr, [sp, #88]	@ 0x58
 801e510:	9201      	str	r2, [sp, #4]
 801e512:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801e516:	fb01 2404 	mla	r4, r1, r4, r2
 801e51a:	6802      	ldr	r2, [r0, #0]
 801e51c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e520:	f8de 2000 	ldr.w	r2, [lr]
 801e524:	9202      	str	r2, [sp, #8]
 801e526:	9a01      	ldr	r2, [sp, #4]
 801e528:	43d6      	mvns	r6, r2
 801e52a:	b2f6      	uxtb	r6, r6
 801e52c:	9a00      	ldr	r2, [sp, #0]
 801e52e:	2a00      	cmp	r2, #0
 801e530:	dc03      	bgt.n	801e53a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801e532:	9a03      	ldr	r2, [sp, #12]
 801e534:	2a00      	cmp	r2, #0
 801e536:	f340 8124 	ble.w	801e782 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801e53a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e53c:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801e540:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801e544:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e546:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801e54a:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801e54e:	2b00      	cmp	r3, #0
 801e550:	dd0e      	ble.n	801e570 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e552:	1408      	asrs	r0, r1, #16
 801e554:	d405      	bmi.n	801e562 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801e556:	4560      	cmp	r0, ip
 801e558:	da03      	bge.n	801e562 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801e55a:	1410      	asrs	r0, r2, #16
 801e55c:	d401      	bmi.n	801e562 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801e55e:	42b8      	cmp	r0, r7
 801e560:	db07      	blt.n	801e572 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e562:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801e564:	3b01      	subs	r3, #1
 801e566:	4401      	add	r1, r0
 801e568:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801e56a:	3402      	adds	r4, #2
 801e56c:	4402      	add	r2, r0
 801e56e:	e7ee      	b.n	801e54e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801e570:	d06e      	beq.n	801e650 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801e572:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801e574:	1e58      	subs	r0, r3, #1
 801e576:	fb05 1500 	mla	r5, r5, r0, r1
 801e57a:	142d      	asrs	r5, r5, #16
 801e57c:	d45c      	bmi.n	801e638 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801e57e:	4565      	cmp	r5, ip
 801e580:	da5a      	bge.n	801e638 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801e582:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801e584:	fb05 2000 	mla	r0, r5, r0, r2
 801e588:	1400      	asrs	r0, r0, #16
 801e58a:	d455      	bmi.n	801e638 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801e58c:	42b8      	cmp	r0, r7
 801e58e:	da53      	bge.n	801e638 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801e590:	4699      	mov	r9, r3
 801e592:	46a2      	mov	sl, r4
 801e594:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801e598:	f1b9 0f00 	cmp.w	r9, #0
 801e59c:	dd54      	ble.n	801e648 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e59e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801e5a2:	140d      	asrs	r5, r1, #16
 801e5a4:	1410      	asrs	r0, r2, #16
 801e5a6:	fb07 5000 	mla	r0, r7, r0, r5
 801e5aa:	9d02      	ldr	r5, [sp, #8]
 801e5ac:	f109 39ff 	add.w	r9, r9, #4294967295
 801e5b0:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801e5b4:	f8ba 5000 	ldrh.w	r5, [sl]
 801e5b8:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801e5bc:	122f      	asrs	r7, r5, #8
 801e5be:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801e5c2:	fb17 f706 	smulbb	r7, r7, r6
 801e5c6:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801e5ca:	00ed      	lsls	r5, r5, #3
 801e5cc:	f008 08fc 	and.w	r8, r8, #252	@ 0xfc
 801e5d0:	b2ed      	uxtb	r5, r5
 801e5d2:	fb18 f806 	smulbb	r8, r8, r6
 801e5d6:	fb15 f506 	smulbb	r5, r5, r6
 801e5da:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801e5de:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801e5e2:	10c7      	asrs	r7, r0, #3
 801e5e4:	00c0      	lsls	r0, r0, #3
 801e5e6:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801e5ea:	b2c0      	uxtb	r0, r0
 801e5ec:	fb07 870b 	mla	r7, r7, fp, r8
 801e5f0:	fb00 500b 	mla	r0, r0, fp, r5
 801e5f4:	fa1f fc8c 	uxth.w	ip, ip
 801e5f8:	b280      	uxth	r0, r0
 801e5fa:	b2bf      	uxth	r7, r7
 801e5fc:	f10c 0501 	add.w	r5, ip, #1
 801e600:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801e604:	f107 0801 	add.w	r8, r7, #1
 801e608:	1c45      	adds	r5, r0, #1
 801e60a:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801e60e:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801e612:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801e614:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801e618:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801e61c:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801e620:	ea45 0c0c 	orr.w	ip, r5, ip
 801e624:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 801e628:	4401      	add	r1, r0
 801e62a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801e62c:	ea4c 0c08 	orr.w	ip, ip, r8
 801e630:	f82a cb02 	strh.w	ip, [sl], #2
 801e634:	4402      	add	r2, r0
 801e636:	e7af      	b.n	801e598 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801e638:	f04f 0800 	mov.w	r8, #0
 801e63c:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801e640:	eb03 0008 	add.w	r0, r3, r8
 801e644:	2800      	cmp	r0, #0
 801e646:	dc41      	bgt.n	801e6cc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801e648:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e64c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e650:	9b00      	ldr	r3, [sp, #0]
 801e652:	2b00      	cmp	r3, #0
 801e654:	f340 8095 	ble.w	801e782 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801e658:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e65c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e660:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e664:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e668:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e66c:	eef0 6a62 	vmov.f32	s13, s5
 801e670:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e674:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e678:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e67c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e680:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e684:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 801e688:	eef0 6a43 	vmov.f32	s13, s6
 801e68c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e690:	ee12 2a90 	vmov	r2, s5
 801e694:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e698:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e69a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e69e:	fb92 f3f3 	sdiv	r3, r2, r3
 801e6a2:	ee13 2a10 	vmov	r2, s6
 801e6a6:	9311      	str	r3, [sp, #68]	@ 0x44
 801e6a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e6aa:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 801e6ae:	fb92 f3f3 	sdiv	r3, r2, r3
 801e6b2:	9312      	str	r3, [sp, #72]	@ 0x48
 801e6b4:	9b00      	ldr	r3, [sp, #0]
 801e6b6:	9a03      	ldr	r2, [sp, #12]
 801e6b8:	3b01      	subs	r3, #1
 801e6ba:	9300      	str	r3, [sp, #0]
 801e6bc:	eeb0 3a67 	vmov.f32	s6, s15
 801e6c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e6c2:	eef0 2a47 	vmov.f32	s5, s14
 801e6c6:	bf08      	it	eq
 801e6c8:	4613      	moveq	r3, r2
 801e6ca:	e72f      	b.n	801e52c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801e6cc:	140f      	asrs	r7, r1, #16
 801e6ce:	d451      	bmi.n	801e774 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801e6d0:	f8de 5008 	ldr.w	r5, [lr, #8]
 801e6d4:	42bd      	cmp	r5, r7
 801e6d6:	dd4d      	ble.n	801e774 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801e6d8:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801e6dc:	d44a      	bmi.n	801e774 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801e6de:	f8de 000c 	ldr.w	r0, [lr, #12]
 801e6e2:	4560      	cmp	r0, ip
 801e6e4:	dd46      	ble.n	801e774 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801e6e6:	b22d      	sxth	r5, r5
 801e6e8:	fb0c 7505 	mla	r5, ip, r5, r7
 801e6ec:	9802      	ldr	r0, [sp, #8]
 801e6ee:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801e6f2:	f06f 0501 	mvn.w	r5, #1
 801e6f6:	fb05 fb08 	mul.w	fp, r5, r8
 801e6fa:	f834 500b 	ldrh.w	r5, [r4, fp]
 801e6fe:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801e702:	122f      	asrs	r7, r5, #8
 801e704:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801e708:	fb17 f706 	smulbb	r7, r7, r6
 801e70c:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801e710:	00ed      	lsls	r5, r5, #3
 801e712:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 801e716:	b2ed      	uxtb	r5, r5
 801e718:	fb19 f906 	smulbb	r9, r9, r6
 801e71c:	fb15 f506 	smulbb	r5, r5, r6
 801e720:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801e724:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801e728:	10c7      	asrs	r7, r0, #3
 801e72a:	00c0      	lsls	r0, r0, #3
 801e72c:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801e730:	b2c0      	uxtb	r0, r0
 801e732:	fb07 970a 	mla	r7, r7, sl, r9
 801e736:	fb00 500a 	mla	r0, r0, sl, r5
 801e73a:	fa1f fc8c 	uxth.w	ip, ip
 801e73e:	b2bf      	uxth	r7, r7
 801e740:	b280      	uxth	r0, r0
 801e742:	f10c 0501 	add.w	r5, ip, #1
 801e746:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801e74a:	f107 0901 	add.w	r9, r7, #1
 801e74e:	1c45      	adds	r5, r0, #1
 801e750:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801e754:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801e758:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801e75c:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801e760:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801e764:	ea45 0c0c 	orr.w	ip, r5, ip
 801e768:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801e76c:	ea4c 0c09 	orr.w	ip, ip, r9
 801e770:	f824 c00b 	strh.w	ip, [r4, fp]
 801e774:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801e776:	f108 38ff 	add.w	r8, r8, #4294967295
 801e77a:	4401      	add	r1, r0
 801e77c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801e77e:	4402      	add	r2, r0
 801e780:	e75e      	b.n	801e640 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801e782:	b005      	add	sp, #20
 801e784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e788 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e788:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e78c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e790:	b085      	sub	sp, #20
 801e792:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801e794:	4693      	mov	fp, r2
 801e796:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801e79a:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	@ 0x44
 801e79e:	6870      	ldr	r0, [r6, #4]
 801e7a0:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 801e7a2:	fb00 2404 	mla	r4, r0, r4, r2
 801e7a6:	6832      	ldr	r2, [r6, #0]
 801e7a8:	9101      	str	r1, [sp, #4]
 801e7aa:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e7ae:	682a      	ldr	r2, [r5, #0]
 801e7b0:	9202      	str	r2, [sp, #8]
 801e7b2:	9a01      	ldr	r2, [sp, #4]
 801e7b4:	2a00      	cmp	r2, #0
 801e7b6:	dc03      	bgt.n	801e7c0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801e7b8:	f1bb 0f00 	cmp.w	fp, #0
 801e7bc:	f340 809a 	ble.w	801e8f4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801e7c0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e7c2:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801e7c6:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801e7ca:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e7cc:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801e7d0:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801e7d4:	2b00      	cmp	r3, #0
 801e7d6:	dd0c      	ble.n	801e7f2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801e7d8:	1406      	asrs	r6, r0, #16
 801e7da:	d405      	bmi.n	801e7e8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801e7dc:	454e      	cmp	r6, r9
 801e7de:	da03      	bge.n	801e7e8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801e7e0:	1416      	asrs	r6, r2, #16
 801e7e2:	d401      	bmi.n	801e7e8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801e7e4:	4546      	cmp	r6, r8
 801e7e6:	db05      	blt.n	801e7f4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801e7e8:	4470      	add	r0, lr
 801e7ea:	4462      	add	r2, ip
 801e7ec:	3b01      	subs	r3, #1
 801e7ee:	3402      	adds	r4, #2
 801e7f0:	e7f0      	b.n	801e7d4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801e7f2:	d00f      	beq.n	801e814 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e7f4:	1e5e      	subs	r6, r3, #1
 801e7f6:	fb0e 0706 	mla	r7, lr, r6, r0
 801e7fa:	143f      	asrs	r7, r7, #16
 801e7fc:	d541      	bpl.n	801e882 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801e7fe:	4698      	mov	r8, r3
 801e800:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801e804:	9603      	str	r6, [sp, #12]
 801e806:	f1b8 0f00 	cmp.w	r8, #0
 801e80a:	dc56      	bgt.n	801e8ba <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801e80c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e810:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e814:	9b01      	ldr	r3, [sp, #4]
 801e816:	2b00      	cmp	r3, #0
 801e818:	dd6c      	ble.n	801e8f4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801e81a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e81e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e822:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e826:	eeb0 6a62 	vmov.f32	s12, s5
 801e82a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e82e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e832:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e836:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e83a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e83e:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801e842:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e846:	eeb0 6a43 	vmov.f32	s12, s6
 801e84a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e84e:	ee12 2a90 	vmov	r2, s5
 801e852:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e856:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e858:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e85c:	fb92 fef3 	sdiv	lr, r2, r3
 801e860:	ee13 2a10 	vmov	r2, s6
 801e864:	fb92 fcf3 	sdiv	ip, r2, r3
 801e868:	9b01      	ldr	r3, [sp, #4]
 801e86a:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801e86e:	3b01      	subs	r3, #1
 801e870:	9301      	str	r3, [sp, #4]
 801e872:	eeb0 3a67 	vmov.f32	s6, s15
 801e876:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e878:	eef0 2a47 	vmov.f32	s5, s14
 801e87c:	bf08      	it	eq
 801e87e:	465b      	moveq	r3, fp
 801e880:	e797      	b.n	801e7b2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801e882:	454f      	cmp	r7, r9
 801e884:	dabb      	bge.n	801e7fe <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e886:	fb0c 2606 	mla	r6, ip, r6, r2
 801e88a:	1436      	asrs	r6, r6, #16
 801e88c:	d4b7      	bmi.n	801e7fe <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e88e:	4546      	cmp	r6, r8
 801e890:	dab5      	bge.n	801e7fe <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e892:	461e      	mov	r6, r3
 801e894:	46a0      	mov	r8, r4
 801e896:	2e00      	cmp	r6, #0
 801e898:	ddb8      	ble.n	801e80c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801e89a:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801e89e:	1417      	asrs	r7, r2, #16
 801e8a0:	ea4f 4920 	mov.w	r9, r0, asr #16
 801e8a4:	fb0a 9707 	mla	r7, sl, r7, r9
 801e8a8:	9902      	ldr	r1, [sp, #8]
 801e8aa:	4470      	add	r0, lr
 801e8ac:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801e8b0:	4462      	add	r2, ip
 801e8b2:	f828 7b02 	strh.w	r7, [r8], #2
 801e8b6:	3e01      	subs	r6, #1
 801e8b8:	e7ed      	b.n	801e896 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801e8ba:	ea5f 4920 	movs.w	r9, r0, asr #16
 801e8be:	d414      	bmi.n	801e8ea <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801e8c0:	68ae      	ldr	r6, [r5, #8]
 801e8c2:	454e      	cmp	r6, r9
 801e8c4:	dd11      	ble.n	801e8ea <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801e8c6:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801e8ca:	d40e      	bmi.n	801e8ea <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801e8cc:	68ef      	ldr	r7, [r5, #12]
 801e8ce:	4557      	cmp	r7, sl
 801e8d0:	dd0b      	ble.n	801e8ea <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801e8d2:	f06f 0101 	mvn.w	r1, #1
 801e8d6:	b236      	sxth	r6, r6
 801e8d8:	fb0a 9606 	mla	r6, sl, r6, r9
 801e8dc:	9f02      	ldr	r7, [sp, #8]
 801e8de:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801e8e2:	fb01 f608 	mul.w	r6, r1, r8
 801e8e6:	9903      	ldr	r1, [sp, #12]
 801e8e8:	538f      	strh	r7, [r1, r6]
 801e8ea:	4470      	add	r0, lr
 801e8ec:	4462      	add	r2, ip
 801e8ee:	f108 38ff 	add.w	r8, r8, #4294967295
 801e8f2:	e788      	b.n	801e806 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e8f4:	b005      	add	sp, #20
 801e8f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e8fa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e8fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e8fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e902:	b087      	sub	sp, #28
 801e904:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801e906:	468b      	mov	fp, r1
 801e908:	9203      	str	r2, [sp, #12]
 801e90a:	6841      	ldr	r1, [r0, #4]
 801e90c:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801e910:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
 801e914:	9204      	str	r2, [sp, #16]
 801e916:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 801e91a:	fb01 2505 	mla	r5, r1, r5, r2
 801e91e:	6802      	ldr	r2, [r0, #0]
 801e920:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801e924:	f8d9 2000 	ldr.w	r2, [r9]
 801e928:	9201      	str	r2, [sp, #4]
 801e92a:	f1bb 0f00 	cmp.w	fp, #0
 801e92e:	dc03      	bgt.n	801e938 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801e930:	9a03      	ldr	r2, [sp, #12]
 801e932:	2a00      	cmp	r2, #0
 801e934:	f340 8159 	ble.w	801ebea <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801e938:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801e93a:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801e93e:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801e942:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801e944:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801e948:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801e94c:	2b00      	cmp	r3, #0
 801e94e:	dd0e      	ble.n	801e96e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801e950:	1402      	asrs	r2, r0, #16
 801e952:	d405      	bmi.n	801e960 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e954:	42ba      	cmp	r2, r7
 801e956:	da03      	bge.n	801e960 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e958:	140a      	asrs	r2, r1, #16
 801e95a:	d401      	bmi.n	801e960 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e95c:	42b2      	cmp	r2, r6
 801e95e:	db07      	blt.n	801e970 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e960:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e962:	3b01      	subs	r3, #1
 801e964:	4410      	add	r0, r2
 801e966:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e968:	3502      	adds	r5, #2
 801e96a:	4411      	add	r1, r2
 801e96c:	e7ee      	b.n	801e94c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801e96e:	d017      	beq.n	801e9a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801e970:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e972:	1e5a      	subs	r2, r3, #1
 801e974:	fb04 0402 	mla	r4, r4, r2, r0
 801e978:	1424      	asrs	r4, r4, #16
 801e97a:	d409      	bmi.n	801e990 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e97c:	42bc      	cmp	r4, r7
 801e97e:	da07      	bge.n	801e990 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e980:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e982:	fb04 1202 	mla	r2, r4, r2, r1
 801e986:	1412      	asrs	r2, r2, #16
 801e988:	d402      	bmi.n	801e990 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e98a:	42b2      	cmp	r2, r6
 801e98c:	f2c0 80bf 	blt.w	801eb0e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801e990:	2700      	movs	r7, #0
 801e992:	19da      	adds	r2, r3, r7
 801e994:	2a00      	cmp	r2, #0
 801e996:	dc3e      	bgt.n	801ea16 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801e998:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e99c:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801e9a0:	f1bb 0f00 	cmp.w	fp, #0
 801e9a4:	f340 8121 	ble.w	801ebea <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801e9a8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e9ac:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e9b0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e9b4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e9b8:	eeb0 6a62 	vmov.f32	s12, s5
 801e9bc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e9c0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e9c4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e9c8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e9cc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e9d0:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801e9d4:	eeb0 6a43 	vmov.f32	s12, s6
 801e9d8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e9dc:	ee12 2a90 	vmov	r2, s5
 801e9e0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e9e4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e9e6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e9ea:	fb92 f3f3 	sdiv	r3, r2, r3
 801e9ee:	ee13 2a10 	vmov	r2, s6
 801e9f2:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e9f4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e9f6:	f1bb 0b01 	subs.w	fp, fp, #1
 801e9fa:	fb92 f3f3 	sdiv	r3, r2, r3
 801e9fe:	9a03      	ldr	r2, [sp, #12]
 801ea00:	9314      	str	r3, [sp, #80]	@ 0x50
 801ea02:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801ea06:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ea08:	eeb0 3a67 	vmov.f32	s6, s15
 801ea0c:	bf08      	it	eq
 801ea0e:	4613      	moveq	r3, r2
 801ea10:	eef0 2a47 	vmov.f32	s5, s14
 801ea14:	e789      	b.n	801e92a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801ea16:	1406      	asrs	r6, r0, #16
 801ea18:	d42d      	bmi.n	801ea76 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801ea1a:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801ea1e:	42b4      	cmp	r4, r6
 801ea20:	dd29      	ble.n	801ea76 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801ea22:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801ea26:	d426      	bmi.n	801ea76 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801ea28:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801ea2c:	4562      	cmp	r2, ip
 801ea2e:	dd22      	ble.n	801ea76 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801ea30:	b224      	sxth	r4, r4
 801ea32:	fb0c 6404 	mla	r4, ip, r4, r6
 801ea36:	9a01      	ldr	r2, [sp, #4]
 801ea38:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 801ea3c:	0e22      	lsrs	r2, r4, #24
 801ea3e:	d01a      	beq.n	801ea76 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801ea40:	9e04      	ldr	r6, [sp, #16]
 801ea42:	4372      	muls	r2, r6
 801ea44:	1c56      	adds	r6, r2, #1
 801ea46:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801ea4a:	1212      	asrs	r2, r2, #8
 801ea4c:	0a26      	lsrs	r6, r4, #8
 801ea4e:	2aff      	cmp	r2, #255	@ 0xff
 801ea50:	9605      	str	r6, [sp, #20]
 801ea52:	d116      	bne.n	801ea82 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801ea54:	f06f 0201 	mvn.w	r2, #1
 801ea58:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 801ea5c:	fb02 fc07 	mul.w	ip, r2, r7
 801ea60:	0962      	lsrs	r2, r4, #5
 801ea62:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801ea66:	f026 0607 	bic.w	r6, r6, #7
 801ea6a:	4316      	orrs	r6, r2
 801ea6c:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801ea70:	4326      	orrs	r6, r4
 801ea72:	f825 600c 	strh.w	r6, [r5, ip]
 801ea76:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ea78:	3f01      	subs	r7, #1
 801ea7a:	4410      	add	r0, r2
 801ea7c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801ea7e:	4411      	add	r1, r2
 801ea80:	e787      	b.n	801e992 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ea82:	f06f 0601 	mvn.w	r6, #1
 801ea86:	fa1f fa82 	uxth.w	sl, r2
 801ea8a:	43d2      	mvns	r2, r2
 801ea8c:	437e      	muls	r6, r7
 801ea8e:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 801ea92:	f835 8006 	ldrh.w	r8, [r5, r6]
 801ea96:	fb1c fc0a 	smulbb	ip, ip, sl
 801ea9a:	b2e4      	uxtb	r4, r4
 801ea9c:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801eaa0:	fb14 f40a 	smulbb	r4, r4, sl
 801eaa4:	b2d2      	uxtb	r2, r2
 801eaa6:	9602      	str	r6, [sp, #8]
 801eaa8:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801eaac:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801eab0:	fb0e ce02 	mla	lr, lr, r2, ip
 801eab4:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801eab8:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801eabc:	fb16 f60a 	smulbb	r6, r6, sl
 801eac0:	fa5f f888 	uxtb.w	r8, r8
 801eac4:	fb08 4402 	mla	r4, r8, r2, r4
 801eac8:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 801eacc:	fb0c 6c02 	mla	ip, ip, r2, r6
 801ead0:	fa1f fe8e 	uxth.w	lr, lr
 801ead4:	b2a4      	uxth	r4, r4
 801ead6:	f10e 0201 	add.w	r2, lr, #1
 801eada:	1c66      	adds	r6, r4, #1
 801eadc:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801eae0:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801eae4:	fa1f fc8c 	uxth.w	ip, ip
 801eae8:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801eaec:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 801eaf0:	ea46 0e0e 	orr.w	lr, r6, lr
 801eaf4:	f10c 0601 	add.w	r6, ip, #1
 801eaf8:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801eafc:	0976      	lsrs	r6, r6, #5
 801eafe:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801eb02:	9a02      	ldr	r2, [sp, #8]
 801eb04:	ea4e 0e06 	orr.w	lr, lr, r6
 801eb08:	f825 e002 	strh.w	lr, [r5, r2]
 801eb0c:	e7b3      	b.n	801ea76 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801eb0e:	f04f 0800 	mov.w	r8, #0
 801eb12:	eba3 0208 	sub.w	r2, r3, r8
 801eb16:	2a00      	cmp	r2, #0
 801eb18:	f77f af3e 	ble.w	801e998 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801eb1c:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801eb20:	1404      	asrs	r4, r0, #16
 801eb22:	140a      	asrs	r2, r1, #16
 801eb24:	fb06 4202 	mla	r2, r6, r2, r4
 801eb28:	9c01      	ldr	r4, [sp, #4]
 801eb2a:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 801eb2e:	0e22      	lsrs	r2, r4, #24
 801eb30:	d016      	beq.n	801eb60 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801eb32:	9e04      	ldr	r6, [sp, #16]
 801eb34:	4372      	muls	r2, r6
 801eb36:	1c56      	adds	r6, r2, #1
 801eb38:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801eb3c:	1212      	asrs	r2, r2, #8
 801eb3e:	2aff      	cmp	r2, #255	@ 0xff
 801eb40:	ea4f 2614 	mov.w	r6, r4, lsr #8
 801eb44:	d113      	bne.n	801eb6e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 801eb46:	0962      	lsrs	r2, r4, #5
 801eb48:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 801eb4c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801eb50:	f026 0607 	bic.w	r6, r6, #7
 801eb54:	4316      	orrs	r6, r2
 801eb56:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801eb5a:	4326      	orrs	r6, r4
 801eb5c:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 801eb60:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801eb62:	f108 0801 	add.w	r8, r8, #1
 801eb66:	4410      	add	r0, r2
 801eb68:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801eb6a:	4411      	add	r1, r2
 801eb6c:	e7d1      	b.n	801eb12 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801eb6e:	fa1f fa82 	uxth.w	sl, r2
 801eb72:	43d2      	mvns	r2, r2
 801eb74:	f3c4 4707 	ubfx	r7, r4, #16, #8
 801eb78:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 801eb7c:	fb17 f70a 	smulbb	r7, r7, sl
 801eb80:	b2e4      	uxtb	r4, r4
 801eb82:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801eb86:	fb14 f40a 	smulbb	r4, r4, sl
 801eb8a:	b2d2      	uxtb	r2, r2
 801eb8c:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801eb90:	fb0c 7c02 	mla	ip, ip, r2, r7
 801eb94:	b2f6      	uxtb	r6, r6
 801eb96:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801eb9a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801eb9e:	fb16 f60a 	smulbb	r6, r6, sl
 801eba2:	fa5f fe8e 	uxtb.w	lr, lr
 801eba6:	fb0e 4402 	mla	r4, lr, r2, r4
 801ebaa:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801ebae:	fb07 6702 	mla	r7, r7, r2, r6
 801ebb2:	fa1f fc8c 	uxth.w	ip, ip
 801ebb6:	b2a4      	uxth	r4, r4
 801ebb8:	f10c 0201 	add.w	r2, ip, #1
 801ebbc:	1c66      	adds	r6, r4, #1
 801ebbe:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801ebc2:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801ebc6:	b2bf      	uxth	r7, r7
 801ebc8:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801ebcc:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801ebd0:	ea46 0c0c 	orr.w	ip, r6, ip
 801ebd4:	1c7e      	adds	r6, r7, #1
 801ebd6:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801ebda:	0976      	lsrs	r6, r6, #5
 801ebdc:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801ebe0:	ea4c 0c06 	orr.w	ip, ip, r6
 801ebe4:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 801ebe8:	e7ba      	b.n	801eb60 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801ebea:	b007      	add	sp, #28
 801ebec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ebf0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ebf0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ebf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ebf8:	b085      	sub	sp, #20
 801ebfa:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801ebfc:	468b      	mov	fp, r1
 801ebfe:	6841      	ldr	r1, [r0, #4]
 801ec00:	9203      	str	r2, [sp, #12]
 801ec02:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801ec06:	fb01 2404 	mla	r4, r1, r4, r2
 801ec0a:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801ec0e:	6802      	ldr	r2, [r0, #0]
 801ec10:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ec14:	f8d8 2000 	ldr.w	r2, [r8]
 801ec18:	9201      	str	r2, [sp, #4]
 801ec1a:	f1bb 0f00 	cmp.w	fp, #0
 801ec1e:	dc03      	bgt.n	801ec28 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801ec20:	9a03      	ldr	r2, [sp, #12]
 801ec22:	2a00      	cmp	r2, #0
 801ec24:	f340 814f 	ble.w	801eec6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801ec28:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801ec2a:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801ec2e:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801ec32:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801ec34:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801ec38:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801ec3c:	2b00      	cmp	r3, #0
 801ec3e:	dd0e      	ble.n	801ec5e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801ec40:	1408      	asrs	r0, r1, #16
 801ec42:	d405      	bmi.n	801ec50 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ec44:	42b8      	cmp	r0, r7
 801ec46:	da03      	bge.n	801ec50 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ec48:	1410      	asrs	r0, r2, #16
 801ec4a:	d401      	bmi.n	801ec50 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ec4c:	42b0      	cmp	r0, r6
 801ec4e:	db07      	blt.n	801ec60 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ec50:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801ec52:	3b01      	subs	r3, #1
 801ec54:	4401      	add	r1, r0
 801ec56:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801ec58:	3402      	adds	r4, #2
 801ec5a:	4402      	add	r2, r0
 801ec5c:	e7ee      	b.n	801ec3c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801ec5e:	d017      	beq.n	801ec90 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801ec60:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801ec62:	1e58      	subs	r0, r3, #1
 801ec64:	fb05 1500 	mla	r5, r5, r0, r1
 801ec68:	142d      	asrs	r5, r5, #16
 801ec6a:	d409      	bmi.n	801ec80 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ec6c:	42bd      	cmp	r5, r7
 801ec6e:	da07      	bge.n	801ec80 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ec70:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801ec72:	fb05 2000 	mla	r0, r5, r0, r2
 801ec76:	1400      	asrs	r0, r0, #16
 801ec78:	d402      	bmi.n	801ec80 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ec7a:	42b0      	cmp	r0, r6
 801ec7c:	f2c0 80ba 	blt.w	801edf4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801ec80:	2600      	movs	r6, #0
 801ec82:	1998      	adds	r0, r3, r6
 801ec84:	2800      	cmp	r0, #0
 801ec86:	dc3e      	bgt.n	801ed06 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801ec88:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ec8c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ec90:	f1bb 0f00 	cmp.w	fp, #0
 801ec94:	f340 8117 	ble.w	801eec6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801ec98:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ec9c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801eca0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801eca4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801eca8:	eeb0 6a62 	vmov.f32	s12, s5
 801ecac:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ecb0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ecb4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ecb8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ecbc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ecc0:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801ecc4:	eeb0 6a43 	vmov.f32	s12, s6
 801ecc8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801eccc:	ee12 2a90 	vmov	r2, s5
 801ecd0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ecd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ecd6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ecda:	fb92 f3f3 	sdiv	r3, r2, r3
 801ecde:	ee13 2a10 	vmov	r2, s6
 801ece2:	9311      	str	r3, [sp, #68]	@ 0x44
 801ece4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ece6:	f1bb 0b01 	subs.w	fp, fp, #1
 801ecea:	fb92 f3f3 	sdiv	r3, r2, r3
 801ecee:	9a03      	ldr	r2, [sp, #12]
 801ecf0:	9312      	str	r3, [sp, #72]	@ 0x48
 801ecf2:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801ecf6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ecf8:	eeb0 3a67 	vmov.f32	s6, s15
 801ecfc:	bf08      	it	eq
 801ecfe:	4613      	moveq	r3, r2
 801ed00:	eef0 2a47 	vmov.f32	s5, s14
 801ed04:	e789      	b.n	801ec1a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801ed06:	140f      	asrs	r7, r1, #16
 801ed08:	d424      	bmi.n	801ed54 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ed0a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801ed0e:	42bd      	cmp	r5, r7
 801ed10:	dd20      	ble.n	801ed54 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ed12:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801ed16:	d41d      	bmi.n	801ed54 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ed18:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801ed1c:	4560      	cmp	r0, ip
 801ed1e:	dd19      	ble.n	801ed54 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ed20:	b22d      	sxth	r5, r5
 801ed22:	fb0c 7505 	mla	r5, ip, r5, r7
 801ed26:	9801      	ldr	r0, [sp, #4]
 801ed28:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801ed2c:	0e07      	lsrs	r7, r0, #24
 801ed2e:	2fff      	cmp	r7, #255	@ 0xff
 801ed30:	d116      	bne.n	801ed60 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ed32:	f06f 0501 	mvn.w	r5, #1
 801ed36:	fb05 f706 	mul.w	r7, r5, r6
 801ed3a:	f2a5 75fe 	subw	r5, r5, #2046	@ 0x7fe
 801ed3e:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801ed42:	0945      	lsrs	r5, r0, #5
 801ed44:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801ed48:	ea4c 0505 	orr.w	r5, ip, r5
 801ed4c:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801ed50:	4305      	orrs	r5, r0
 801ed52:	53e5      	strh	r5, [r4, r7]
 801ed54:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801ed56:	3e01      	subs	r6, #1
 801ed58:	4401      	add	r1, r0
 801ed5a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801ed5c:	4402      	add	r2, r0
 801ed5e:	e790      	b.n	801ec82 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801ed60:	b2fd      	uxtb	r5, r7
 801ed62:	2f00      	cmp	r7, #0
 801ed64:	d0f6      	beq.n	801ed54 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ed66:	f06f 0701 	mvn.w	r7, #1
 801ed6a:	fa1f f985 	uxth.w	r9, r5
 801ed6e:	43ed      	mvns	r5, r5
 801ed70:	4377      	muls	r7, r6
 801ed72:	f834 e007 	ldrh.w	lr, [r4, r7]
 801ed76:	9702      	str	r7, [sp, #8]
 801ed78:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801ed7c:	fb17 f709 	smulbb	r7, r7, r9
 801ed80:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801ed84:	b2c0      	uxtb	r0, r0
 801ed86:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801ed8a:	fb10 f009 	smulbb	r0, r0, r9
 801ed8e:	b2ed      	uxtb	r5, r5
 801ed90:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801ed94:	fb0c 7c05 	mla	ip, ip, r5, r7
 801ed98:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801ed9c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801eda0:	fb1a fa09 	smulbb	sl, sl, r9
 801eda4:	fa5f fe8e 	uxtb.w	lr, lr
 801eda8:	fb0e 0005 	mla	r0, lr, r5, r0
 801edac:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801edb0:	fb07 a705 	mla	r7, r7, r5, sl
 801edb4:	b280      	uxth	r0, r0
 801edb6:	fa1f fc8c 	uxth.w	ip, ip
 801edba:	f100 0a01 	add.w	sl, r0, #1
 801edbe:	f10c 0501 	add.w	r5, ip, #1
 801edc2:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801edc6:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801edca:	b2bf      	uxth	r7, r7
 801edcc:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801edd0:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801edd4:	ea4a 0c0c 	orr.w	ip, sl, ip
 801edd8:	f107 0a01 	add.w	sl, r7, #1
 801eddc:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801ede0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ede4:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801ede8:	9802      	ldr	r0, [sp, #8]
 801edea:	ea4c 0c0a 	orr.w	ip, ip, sl
 801edee:	f824 c000 	strh.w	ip, [r4, r0]
 801edf2:	e7af      	b.n	801ed54 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801edf4:	f04f 0e00 	mov.w	lr, #0
 801edf8:	eba3 000e 	sub.w	r0, r3, lr
 801edfc:	2800      	cmp	r0, #0
 801edfe:	f77f af43 	ble.w	801ec88 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ee02:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801ee06:	140d      	asrs	r5, r1, #16
 801ee08:	1410      	asrs	r0, r2, #16
 801ee0a:	fb06 5000 	mla	r0, r6, r0, r5
 801ee0e:	9d01      	ldr	r5, [sp, #4]
 801ee10:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801ee14:	0e2e      	lsrs	r6, r5, #24
 801ee16:	2eff      	cmp	r6, #255	@ 0xff
 801ee18:	d112      	bne.n	801ee40 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801ee1a:	482c      	ldr	r0, [pc, #176]	@ (801eecc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 801ee1c:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801ee20:	0968      	lsrs	r0, r5, #5
 801ee22:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801ee26:	4330      	orrs	r0, r6
 801ee28:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801ee2c:	4328      	orrs	r0, r5
 801ee2e:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 801ee32:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801ee34:	f10e 0e01 	add.w	lr, lr, #1
 801ee38:	4401      	add	r1, r0
 801ee3a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801ee3c:	4402      	add	r2, r0
 801ee3e:	e7db      	b.n	801edf8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801ee40:	b2f0      	uxtb	r0, r6
 801ee42:	2e00      	cmp	r6, #0
 801ee44:	d0f5      	beq.n	801ee32 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801ee46:	fa1f f980 	uxth.w	r9, r0
 801ee4a:	43c0      	mvns	r0, r0
 801ee4c:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801ee50:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801ee54:	fb16 f609 	smulbb	r6, r6, r9
 801ee58:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801ee5c:	b2ed      	uxtb	r5, r5
 801ee5e:	ea4f 272c 	mov.w	r7, ip, asr #8
 801ee62:	fb15 f509 	smulbb	r5, r5, r9
 801ee66:	b2c0      	uxtb	r0, r0
 801ee68:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801ee6c:	fb07 6700 	mla	r7, r7, r0, r6
 801ee70:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801ee74:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801ee78:	fb1a fa09 	smulbb	sl, sl, r9
 801ee7c:	fa5f fc8c 	uxtb.w	ip, ip
 801ee80:	fb0c 5500 	mla	r5, ip, r0, r5
 801ee84:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801ee88:	fb06 a600 	mla	r6, r6, r0, sl
 801ee8c:	b2bf      	uxth	r7, r7
 801ee8e:	b2ad      	uxth	r5, r5
 801ee90:	1c78      	adds	r0, r7, #1
 801ee92:	f105 0a01 	add.w	sl, r5, #1
 801ee96:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801ee9a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ee9e:	b2b6      	uxth	r6, r6
 801eea0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801eea4:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801eea8:	ea4a 0707 	orr.w	r7, sl, r7
 801eeac:	f106 0a01 	add.w	sl, r6, #1
 801eeb0:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801eeb4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801eeb8:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801eebc:	ea47 070a 	orr.w	r7, r7, sl
 801eec0:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801eec4:	e7b5      	b.n	801ee32 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801eec6:	b005      	add	sp, #20
 801eec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eecc:	fffff800 	.word	0xfffff800

0801eed0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801eed0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801eed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eed8:	b087      	sub	sp, #28
 801eeda:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801eedc:	468b      	mov	fp, r1
 801eede:	9203      	str	r2, [sp, #12]
 801eee0:	6841      	ldr	r1, [r0, #4]
 801eee2:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801eee6:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
 801eeea:	9204      	str	r2, [sp, #16]
 801eeec:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801eef0:	fb01 2404 	mla	r4, r1, r4, r2
 801eef4:	6802      	ldr	r2, [r0, #0]
 801eef6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801eefa:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801eefe:	3201      	adds	r2, #1
 801ef00:	f022 0201 	bic.w	r2, r2, #1
 801ef04:	9200      	str	r2, [sp, #0]
 801ef06:	f8d9 2000 	ldr.w	r2, [r9]
 801ef0a:	9201      	str	r2, [sp, #4]
 801ef0c:	f1bb 0f00 	cmp.w	fp, #0
 801ef10:	dc03      	bgt.n	801ef1a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801ef12:	9a03      	ldr	r2, [sp, #12]
 801ef14:	2a00      	cmp	r2, #0
 801ef16:	f340 816a 	ble.w	801f1ee <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801ef1a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801ef1c:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801ef20:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801ef24:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801ef26:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801ef2a:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801ef2e:	2b00      	cmp	r3, #0
 801ef30:	dd0e      	ble.n	801ef50 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801ef32:	1402      	asrs	r2, r0, #16
 801ef34:	d405      	bmi.n	801ef42 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ef36:	42ba      	cmp	r2, r7
 801ef38:	da03      	bge.n	801ef42 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ef3a:	140a      	asrs	r2, r1, #16
 801ef3c:	d401      	bmi.n	801ef42 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ef3e:	42b2      	cmp	r2, r6
 801ef40:	db07      	blt.n	801ef52 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801ef42:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ef44:	3b01      	subs	r3, #1
 801ef46:	4410      	add	r0, r2
 801ef48:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801ef4a:	3402      	adds	r4, #2
 801ef4c:	4411      	add	r1, r2
 801ef4e:	e7ee      	b.n	801ef2e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801ef50:	d017      	beq.n	801ef82 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801ef52:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801ef54:	1e5a      	subs	r2, r3, #1
 801ef56:	fb05 0502 	mla	r5, r5, r2, r0
 801ef5a:	142d      	asrs	r5, r5, #16
 801ef5c:	d409      	bmi.n	801ef72 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801ef5e:	42bd      	cmp	r5, r7
 801ef60:	da07      	bge.n	801ef72 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801ef62:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801ef64:	fb05 1202 	mla	r2, r5, r2, r1
 801ef68:	1412      	asrs	r2, r2, #16
 801ef6a:	d402      	bmi.n	801ef72 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801ef6c:	42b2      	cmp	r2, r6
 801ef6e:	f2c0 80c8 	blt.w	801f102 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801ef72:	2700      	movs	r7, #0
 801ef74:	19da      	adds	r2, r3, r7
 801ef76:	2a00      	cmp	r2, #0
 801ef78:	dc3e      	bgt.n	801eff8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801ef7a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ef7e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ef82:	f1bb 0f00 	cmp.w	fp, #0
 801ef86:	f340 8132 	ble.w	801f1ee <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801ef8a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ef8e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ef92:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ef96:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ef9a:	eeb0 6a62 	vmov.f32	s12, s5
 801ef9e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801efa2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801efa6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801efaa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801efae:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801efb2:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801efb6:	eeb0 6a43 	vmov.f32	s12, s6
 801efba:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801efbe:	ee12 2a90 	vmov	r2, s5
 801efc2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801efc6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801efc8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801efcc:	fb92 f3f3 	sdiv	r3, r2, r3
 801efd0:	ee13 2a10 	vmov	r2, s6
 801efd4:	9313      	str	r3, [sp, #76]	@ 0x4c
 801efd6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801efd8:	f1bb 0b01 	subs.w	fp, fp, #1
 801efdc:	fb92 f3f3 	sdiv	r3, r2, r3
 801efe0:	9a03      	ldr	r2, [sp, #12]
 801efe2:	9314      	str	r3, [sp, #80]	@ 0x50
 801efe4:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801efe8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801efea:	eeb0 3a67 	vmov.f32	s6, s15
 801efee:	bf08      	it	eq
 801eff0:	4613      	moveq	r3, r2
 801eff2:	eef0 2a47 	vmov.f32	s5, s14
 801eff6:	e789      	b.n	801ef0c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801eff8:	1405      	asrs	r5, r0, #16
 801effa:	d436      	bmi.n	801f06a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801effc:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801f000:	42aa      	cmp	r2, r5
 801f002:	dd32      	ble.n	801f06a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801f004:	140e      	asrs	r6, r1, #16
 801f006:	d430      	bmi.n	801f06a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801f008:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801f00c:	42b2      	cmp	r2, r6
 801f00e:	dd2c      	ble.n	801f06a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801f010:	9a00      	ldr	r2, [sp, #0]
 801f012:	fb06 5502 	mla	r5, r6, r2, r5
 801f016:	9e01      	ldr	r6, [sp, #4]
 801f018:	086a      	lsrs	r2, r5, #1
 801f01a:	5cb2      	ldrb	r2, [r6, r2]
 801f01c:	07ee      	lsls	r6, r5, #31
 801f01e:	bf54      	ite	pl
 801f020:	f002 020f 	andpl.w	r2, r2, #15
 801f024:	1112      	asrmi	r2, r2, #4
 801f026:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801f02a:	b2d2      	uxtb	r2, r2
 801f02c:	b1ea      	cbz	r2, 801f06a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801f02e:	9d04      	ldr	r5, [sp, #16]
 801f030:	436a      	muls	r2, r5
 801f032:	1c55      	adds	r5, r2, #1
 801f034:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801f038:	4d6e      	ldr	r5, [pc, #440]	@ (801f1f4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801f03a:	1212      	asrs	r2, r2, #8
 801f03c:	682d      	ldr	r5, [r5, #0]
 801f03e:	2aff      	cmp	r2, #255	@ 0xff
 801f040:	ea4f 2615 	mov.w	r6, r5, lsr #8
 801f044:	9605      	str	r6, [sp, #20]
 801f046:	d116      	bne.n	801f076 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801f048:	f06f 0201 	mvn.w	r2, #1
 801f04c:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 801f050:	fb02 fc07 	mul.w	ip, r2, r7
 801f054:	096a      	lsrs	r2, r5, #5
 801f056:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801f05a:	f026 0607 	bic.w	r6, r6, #7
 801f05e:	4316      	orrs	r6, r2
 801f060:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801f064:	432e      	orrs	r6, r5
 801f066:	f824 600c 	strh.w	r6, [r4, ip]
 801f06a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f06c:	3f01      	subs	r7, #1
 801f06e:	4410      	add	r0, r2
 801f070:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f072:	4411      	add	r1, r2
 801f074:	e77e      	b.n	801ef74 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801f076:	f06f 0601 	mvn.w	r6, #1
 801f07a:	fa1f fa82 	uxth.w	sl, r2
 801f07e:	43d2      	mvns	r2, r2
 801f080:	437e      	muls	r6, r7
 801f082:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 801f086:	f834 8006 	ldrh.w	r8, [r4, r6]
 801f08a:	fb1c fc0a 	smulbb	ip, ip, sl
 801f08e:	b2ed      	uxtb	r5, r5
 801f090:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801f094:	fb15 f50a 	smulbb	r5, r5, sl
 801f098:	b2d2      	uxtb	r2, r2
 801f09a:	9602      	str	r6, [sp, #8]
 801f09c:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801f0a0:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801f0a4:	fb0e ce02 	mla	lr, lr, r2, ip
 801f0a8:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801f0ac:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801f0b0:	fb16 f60a 	smulbb	r6, r6, sl
 801f0b4:	fa5f f888 	uxtb.w	r8, r8
 801f0b8:	fb08 5502 	mla	r5, r8, r2, r5
 801f0bc:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 801f0c0:	fb0c 6c02 	mla	ip, ip, r2, r6
 801f0c4:	fa1f fe8e 	uxth.w	lr, lr
 801f0c8:	b2ad      	uxth	r5, r5
 801f0ca:	f10e 0201 	add.w	r2, lr, #1
 801f0ce:	1c6e      	adds	r6, r5, #1
 801f0d0:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801f0d4:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 801f0d8:	fa1f fc8c 	uxth.w	ip, ip
 801f0dc:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801f0e0:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 801f0e4:	ea46 0e0e 	orr.w	lr, r6, lr
 801f0e8:	f10c 0601 	add.w	r6, ip, #1
 801f0ec:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801f0f0:	0976      	lsrs	r6, r6, #5
 801f0f2:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801f0f6:	9a02      	ldr	r2, [sp, #8]
 801f0f8:	ea4e 0e06 	orr.w	lr, lr, r6
 801f0fc:	f824 e002 	strh.w	lr, [r4, r2]
 801f100:	e7b3      	b.n	801f06a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801f102:	f04f 0800 	mov.w	r8, #0
 801f106:	eba3 0208 	sub.w	r2, r3, r8
 801f10a:	2a00      	cmp	r2, #0
 801f10c:	f77f af35 	ble.w	801ef7a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801f110:	9e00      	ldr	r6, [sp, #0]
 801f112:	1402      	asrs	r2, r0, #16
 801f114:	140d      	asrs	r5, r1, #16
 801f116:	fb06 2505 	mla	r5, r6, r5, r2
 801f11a:	9e01      	ldr	r6, [sp, #4]
 801f11c:	086a      	lsrs	r2, r5, #1
 801f11e:	5cb2      	ldrb	r2, [r6, r2]
 801f120:	07ed      	lsls	r5, r5, #31
 801f122:	bf54      	ite	pl
 801f124:	f002 020f 	andpl.w	r2, r2, #15
 801f128:	1112      	asrmi	r2, r2, #4
 801f12a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801f12e:	b2d2      	uxtb	r2, r2
 801f130:	b1c2      	cbz	r2, 801f164 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801f132:	9d04      	ldr	r5, [sp, #16]
 801f134:	436a      	muls	r2, r5
 801f136:	1c55      	adds	r5, r2, #1
 801f138:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801f13c:	4d2d      	ldr	r5, [pc, #180]	@ (801f1f4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801f13e:	1212      	asrs	r2, r2, #8
 801f140:	682e      	ldr	r6, [r5, #0]
 801f142:	2aff      	cmp	r2, #255	@ 0xff
 801f144:	ea4f 2516 	mov.w	r5, r6, lsr #8
 801f148:	d113      	bne.n	801f172 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801f14a:	0972      	lsrs	r2, r6, #5
 801f14c:	f425 65ff 	bic.w	r5, r5, #2040	@ 0x7f8
 801f150:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801f154:	f025 0507 	bic.w	r5, r5, #7
 801f158:	4315      	orrs	r5, r2
 801f15a:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801f15e:	4335      	orrs	r5, r6
 801f160:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 801f164:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f166:	f108 0801 	add.w	r8, r8, #1
 801f16a:	4410      	add	r0, r2
 801f16c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f16e:	4411      	add	r1, r2
 801f170:	e7c9      	b.n	801f106 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801f172:	fa1f fa82 	uxth.w	sl, r2
 801f176:	43d2      	mvns	r2, r2
 801f178:	f3c6 4707 	ubfx	r7, r6, #16, #8
 801f17c:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801f180:	fb17 f70a 	smulbb	r7, r7, sl
 801f184:	b2f6      	uxtb	r6, r6
 801f186:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801f18a:	fb16 f60a 	smulbb	r6, r6, sl
 801f18e:	b2d2      	uxtb	r2, r2
 801f190:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801f194:	fb0c 7c02 	mla	ip, ip, r2, r7
 801f198:	b2ed      	uxtb	r5, r5
 801f19a:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801f19e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801f1a2:	fb15 f50a 	smulbb	r5, r5, sl
 801f1a6:	fa5f fe8e 	uxtb.w	lr, lr
 801f1aa:	fb0e 6602 	mla	r6, lr, r2, r6
 801f1ae:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801f1b2:	fb07 5702 	mla	r7, r7, r2, r5
 801f1b6:	fa1f fc8c 	uxth.w	ip, ip
 801f1ba:	b2b6      	uxth	r6, r6
 801f1bc:	f10c 0201 	add.w	r2, ip, #1
 801f1c0:	1c75      	adds	r5, r6, #1
 801f1c2:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801f1c6:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 801f1ca:	b2bf      	uxth	r7, r7
 801f1cc:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801f1d0:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801f1d4:	ea45 0c0c 	orr.w	ip, r5, ip
 801f1d8:	1c7d      	adds	r5, r7, #1
 801f1da:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 801f1de:	096d      	lsrs	r5, r5, #5
 801f1e0:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801f1e4:	ea4c 0c05 	orr.w	ip, ip, r5
 801f1e8:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 801f1ec:	e7ba      	b.n	801f164 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801f1ee:	b007      	add	sp, #28
 801f1f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f1f4:	2005ba8c 	.word	0x2005ba8c

0801f1f8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f1f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f1fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f200:	b087      	sub	sp, #28
 801f202:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801f204:	9101      	str	r1, [sp, #4]
 801f206:	6841      	ldr	r1, [r0, #4]
 801f208:	9205      	str	r2, [sp, #20]
 801f20a:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801f20e:	fb01 2404 	mla	r4, r1, r4, r2
 801f212:	f8dd b060 	ldr.w	fp, [sp, #96]	@ 0x60
 801f216:	6802      	ldr	r2, [r0, #0]
 801f218:	f8df 82f0 	ldr.w	r8, [pc, #752]	@ 801f50c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 801f21c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f220:	f8db 2008 	ldr.w	r2, [fp, #8]
 801f224:	3201      	adds	r2, #1
 801f226:	f022 0201 	bic.w	r2, r2, #1
 801f22a:	9202      	str	r2, [sp, #8]
 801f22c:	f8db 2000 	ldr.w	r2, [fp]
 801f230:	9203      	str	r2, [sp, #12]
 801f232:	9a01      	ldr	r2, [sp, #4]
 801f234:	2a00      	cmp	r2, #0
 801f236:	dc03      	bgt.n	801f240 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801f238:	9a05      	ldr	r2, [sp, #20]
 801f23a:	2a00      	cmp	r2, #0
 801f23c:	f340 8162 	ble.w	801f504 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801f240:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801f242:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801f246:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801f24a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f24c:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 801f250:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801f254:	2b00      	cmp	r3, #0
 801f256:	dd0e      	ble.n	801f276 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f258:	1402      	asrs	r2, r0, #16
 801f25a:	d405      	bmi.n	801f268 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f25c:	42ba      	cmp	r2, r7
 801f25e:	da03      	bge.n	801f268 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f260:	140a      	asrs	r2, r1, #16
 801f262:	d401      	bmi.n	801f268 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f264:	42b2      	cmp	r2, r6
 801f266:	db07      	blt.n	801f278 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801f268:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f26a:	3b01      	subs	r3, #1
 801f26c:	4410      	add	r0, r2
 801f26e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f270:	3402      	adds	r4, #2
 801f272:	4411      	add	r1, r2
 801f274:	e7ee      	b.n	801f254 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801f276:	d017      	beq.n	801f2a8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801f278:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801f27a:	1e5a      	subs	r2, r3, #1
 801f27c:	fb05 0502 	mla	r5, r5, r2, r0
 801f280:	142d      	asrs	r5, r5, #16
 801f282:	d409      	bmi.n	801f298 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801f284:	42bd      	cmp	r5, r7
 801f286:	da07      	bge.n	801f298 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801f288:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801f28a:	fb05 1202 	mla	r2, r5, r2, r1
 801f28e:	1412      	asrs	r2, r2, #16
 801f290:	d402      	bmi.n	801f298 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801f292:	42b2      	cmp	r2, r6
 801f294:	f2c0 80c3 	blt.w	801f41e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 801f298:	2500      	movs	r5, #0
 801f29a:	195a      	adds	r2, r3, r5
 801f29c:	2a00      	cmp	r2, #0
 801f29e:	dc3f      	bgt.n	801f320 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801f2a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f2a4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f2a8:	9b01      	ldr	r3, [sp, #4]
 801f2aa:	2b00      	cmp	r3, #0
 801f2ac:	f340 812a 	ble.w	801f504 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801f2b0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f2b4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f2b8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f2bc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f2c0:	eeb0 6a62 	vmov.f32	s12, s5
 801f2c4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f2c8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f2cc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f2d0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f2d4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f2d8:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801f2dc:	eeb0 6a43 	vmov.f32	s12, s6
 801f2e0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f2e4:	ee12 2a90 	vmov	r2, s5
 801f2e8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f2ec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f2ee:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f2f2:	fb92 f3f3 	sdiv	r3, r2, r3
 801f2f6:	ee13 2a10 	vmov	r2, s6
 801f2fa:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f2fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f2fe:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801f302:	fb92 f3f3 	sdiv	r3, r2, r3
 801f306:	9314      	str	r3, [sp, #80]	@ 0x50
 801f308:	9b01      	ldr	r3, [sp, #4]
 801f30a:	9a05      	ldr	r2, [sp, #20]
 801f30c:	3b01      	subs	r3, #1
 801f30e:	9301      	str	r3, [sp, #4]
 801f310:	eeb0 3a67 	vmov.f32	s6, s15
 801f314:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f316:	eef0 2a47 	vmov.f32	s5, s14
 801f31a:	bf08      	it	eq
 801f31c:	4613      	moveq	r3, r2
 801f31e:	e788      	b.n	801f232 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801f320:	1406      	asrs	r6, r0, #16
 801f322:	d42c      	bmi.n	801f37e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f324:	f8db 2008 	ldr.w	r2, [fp, #8]
 801f328:	42b2      	cmp	r2, r6
 801f32a:	dd28      	ble.n	801f37e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f32c:	140f      	asrs	r7, r1, #16
 801f32e:	d426      	bmi.n	801f37e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f330:	f8db 200c 	ldr.w	r2, [fp, #12]
 801f334:	42ba      	cmp	r2, r7
 801f336:	dd22      	ble.n	801f37e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f338:	9a02      	ldr	r2, [sp, #8]
 801f33a:	fb07 6602 	mla	r6, r7, r2, r6
 801f33e:	9f03      	ldr	r7, [sp, #12]
 801f340:	0872      	lsrs	r2, r6, #1
 801f342:	5cba      	ldrb	r2, [r7, r2]
 801f344:	07f6      	lsls	r6, r6, #31
 801f346:	bf54      	ite	pl
 801f348:	f002 020f 	andpl.w	r2, r2, #15
 801f34c:	1112      	asrmi	r2, r2, #4
 801f34e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801f352:	b2d2      	uxtb	r2, r2
 801f354:	2aff      	cmp	r2, #255	@ 0xff
 801f356:	d118      	bne.n	801f38a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801f358:	f06f 0601 	mvn.w	r6, #1
 801f35c:	f8d8 2000 	ldr.w	r2, [r8]
 801f360:	fb06 f705 	mul.w	r7, r6, r5
 801f364:	f2a6 76fe 	subw	r6, r6, #2046	@ 0x7fe
 801f368:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 801f36c:	0956      	lsrs	r6, r2, #5
 801f36e:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801f372:	ea4c 0606 	orr.w	r6, ip, r6
 801f376:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801f37a:	4316      	orrs	r6, r2
 801f37c:	53e6      	strh	r6, [r4, r7]
 801f37e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f380:	3d01      	subs	r5, #1
 801f382:	4410      	add	r0, r2
 801f384:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f386:	4411      	add	r1, r2
 801f388:	e787      	b.n	801f29a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801f38a:	2a00      	cmp	r2, #0
 801f38c:	d0f7      	beq.n	801f37e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f38e:	f06f 0601 	mvn.w	r6, #1
 801f392:	fa1f f982 	uxth.w	r9, r2
 801f396:	43d2      	mvns	r2, r2
 801f398:	436e      	muls	r6, r5
 801f39a:	f8d8 c000 	ldr.w	ip, [r8]
 801f39e:	f834 e006 	ldrh.w	lr, [r4, r6]
 801f3a2:	9604      	str	r6, [sp, #16]
 801f3a4:	f3cc 4607 	ubfx	r6, ip, #16, #8
 801f3a8:	fb16 f609 	smulbb	r6, r6, r9
 801f3ac:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 801f3b0:	fa5f fc8c 	uxtb.w	ip, ip
 801f3b4:	ea4f 272e 	mov.w	r7, lr, asr #8
 801f3b8:	fb1c fc09 	smulbb	ip, ip, r9
 801f3bc:	b2d2      	uxtb	r2, r2
 801f3be:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801f3c2:	fb07 6702 	mla	r7, r7, r2, r6
 801f3c6:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801f3ca:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801f3ce:	fb1a fa09 	smulbb	sl, sl, r9
 801f3d2:	fa5f fe8e 	uxtb.w	lr, lr
 801f3d6:	fb0e cc02 	mla	ip, lr, r2, ip
 801f3da:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801f3de:	fb06 a602 	mla	r6, r6, r2, sl
 801f3e2:	b2bf      	uxth	r7, r7
 801f3e4:	fa1f fc8c 	uxth.w	ip, ip
 801f3e8:	1c7a      	adds	r2, r7, #1
 801f3ea:	f10c 0a01 	add.w	sl, ip, #1
 801f3ee:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801f3f2:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801f3f6:	b2b6      	uxth	r6, r6
 801f3f8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f3fc:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801f400:	ea4a 0707 	orr.w	r7, sl, r7
 801f404:	f106 0a01 	add.w	sl, r6, #1
 801f408:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f40c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f410:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801f414:	9a04      	ldr	r2, [sp, #16]
 801f416:	ea47 070a 	orr.w	r7, r7, sl
 801f41a:	52a7      	strh	r7, [r4, r2]
 801f41c:	e7af      	b.n	801f37e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f41e:	f04f 0e00 	mov.w	lr, #0
 801f422:	eba3 020e 	sub.w	r2, r3, lr
 801f426:	2a00      	cmp	r2, #0
 801f428:	f77f af3a 	ble.w	801f2a0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801f42c:	9e02      	ldr	r6, [sp, #8]
 801f42e:	1402      	asrs	r2, r0, #16
 801f430:	140d      	asrs	r5, r1, #16
 801f432:	fb06 2505 	mla	r5, r6, r5, r2
 801f436:	9e03      	ldr	r6, [sp, #12]
 801f438:	086a      	lsrs	r2, r5, #1
 801f43a:	5cb2      	ldrb	r2, [r6, r2]
 801f43c:	07ed      	lsls	r5, r5, #31
 801f43e:	bf54      	ite	pl
 801f440:	f002 020f 	andpl.w	r2, r2, #15
 801f444:	1112      	asrmi	r2, r2, #4
 801f446:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801f44a:	b2d2      	uxtb	r2, r2
 801f44c:	2aff      	cmp	r2, #255	@ 0xff
 801f44e:	d115      	bne.n	801f47c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801f450:	f8d8 5000 	ldr.w	r5, [r8]
 801f454:	f6a2 02ff 	subw	r2, r2, #2303	@ 0x8ff
 801f458:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 801f45c:	096a      	lsrs	r2, r5, #5
 801f45e:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801f462:	4332      	orrs	r2, r6
 801f464:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801f468:	432a      	orrs	r2, r5
 801f46a:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 801f46e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f470:	f10e 0e01 	add.w	lr, lr, #1
 801f474:	4410      	add	r0, r2
 801f476:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f478:	4411      	add	r1, r2
 801f47a:	e7d2      	b.n	801f422 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801f47c:	2a00      	cmp	r2, #0
 801f47e:	d0f6      	beq.n	801f46e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801f480:	fa1f f982 	uxth.w	r9, r2
 801f484:	43d2      	mvns	r2, r2
 801f486:	f8d8 7000 	ldr.w	r7, [r8]
 801f48a:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801f48e:	f3c7 4507 	ubfx	r5, r7, #16, #8
 801f492:	fb15 f509 	smulbb	r5, r5, r9
 801f496:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801f49a:	b2ff      	uxtb	r7, r7
 801f49c:	ea4f 262c 	mov.w	r6, ip, asr #8
 801f4a0:	fb17 f709 	smulbb	r7, r7, r9
 801f4a4:	b2d2      	uxtb	r2, r2
 801f4a6:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801f4aa:	fb06 5602 	mla	r6, r6, r2, r5
 801f4ae:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801f4b2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801f4b6:	fb1a fa09 	smulbb	sl, sl, r9
 801f4ba:	fa5f fc8c 	uxtb.w	ip, ip
 801f4be:	fb0c 7702 	mla	r7, ip, r2, r7
 801f4c2:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801f4c6:	fb05 a502 	mla	r5, r5, r2, sl
 801f4ca:	b2b6      	uxth	r6, r6
 801f4cc:	b2bf      	uxth	r7, r7
 801f4ce:	1c72      	adds	r2, r6, #1
 801f4d0:	f107 0a01 	add.w	sl, r7, #1
 801f4d4:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801f4d8:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801f4dc:	b2ad      	uxth	r5, r5
 801f4de:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f4e2:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 801f4e6:	ea4a 0606 	orr.w	r6, sl, r6
 801f4ea:	f105 0a01 	add.w	sl, r5, #1
 801f4ee:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f4f2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f4f6:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801f4fa:	ea46 060a 	orr.w	r6, r6, sl
 801f4fe:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 801f502:	e7b4      	b.n	801f46e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801f504:	b007      	add	sp, #28
 801f506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f50a:	bf00      	nop
 801f50c:	2005ba8c 	.word	0x2005ba8c

0801f510 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOID1Ev>:
 801f510:	4770      	bx	lr

0801f512 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D1Ev>:
 801f512:	4770      	bx	lr

0801f514 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED1Ev>:
 801f514:	4770      	bx	lr

0801f516 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D1Ev>:
 801f516:	4770      	bx	lr

0801f518 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801f518:	4770      	bx	lr

0801f51a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801f51a:	4770      	bx	lr

0801f51c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801f51c:	4770      	bx	lr

0801f51e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801f51e:	4770      	bx	lr

0801f520 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801f520:	4770      	bx	lr

0801f522 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801f522:	4770      	bx	lr

0801f524 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801f524:	4770      	bx	lr

0801f526 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801f526:	4770      	bx	lr

0801f528 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801f528:	4770      	bx	lr

0801f52a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801f52a:	4770      	bx	lr

0801f52c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801f52c:	4770      	bx	lr

0801f52e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801f52e:	4770      	bx	lr

0801f530 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801f530:	4770      	bx	lr

0801f532 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801f532:	4770      	bx	lr

0801f534 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801f534:	4770      	bx	lr

0801f536 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801f536:	4770      	bx	lr

0801f538 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801f538:	4770      	bx	lr

0801f53a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801f53a:	4770      	bx	lr

0801f53c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801f53c:	4770      	bx	lr

0801f53e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801f53e:	4770      	bx	lr

0801f540 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801f540:	4770      	bx	lr

0801f542 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801f542:	4770      	bx	lr

0801f544 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801f544:	4770      	bx	lr

0801f546 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801f546:	4770      	bx	lr

0801f548 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801f548:	4770      	bx	lr

0801f54a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801f54a:	4770      	bx	lr

0801f54c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801f54c:	4770      	bx	lr

0801f54e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801f54e:	4770      	bx	lr

0801f550 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801f550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f554:	b088      	sub	sp, #32
 801f556:	ac08      	add	r4, sp, #32
 801f558:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801f55c:	4606      	mov	r6, r0
 801f55e:	4620      	mov	r0, r4
 801f560:	4688      	mov	r8, r1
 801f562:	4691      	mov	r9, r2
 801f564:	f7fd fc32 	bl	801cdcc <_ZNK8touchgfx6Bitmap7getDataEv>
 801f568:	6833      	ldr	r3, [r6, #0]
 801f56a:	4605      	mov	r5, r0
 801f56c:	4620      	mov	r0, r4
 801f56e:	699f      	ldr	r7, [r3, #24]
 801f570:	f7fd fb3a 	bl	801cbe8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801f574:	4682      	mov	sl, r0
 801f576:	4620      	mov	r0, r4
 801f578:	f7fd fb6a 	bl	801cc50 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801f57c:	9500      	str	r5, [sp, #0]
 801f57e:	e9cd a001 	strd	sl, r0, [sp, #4]
 801f582:	464b      	mov	r3, r9
 801f584:	a806      	add	r0, sp, #24
 801f586:	4642      	mov	r2, r8
 801f588:	4631      	mov	r1, r6
 801f58a:	47b8      	blx	r7
 801f58c:	4628      	mov	r0, r5
 801f58e:	b008      	add	sp, #32
 801f590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801f594 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801f594:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f598:	2300      	movs	r3, #0
 801f59a:	9300      	str	r3, [sp, #0]
 801f59c:	4b3d      	ldr	r3, [pc, #244]	@ (801f694 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 801f59e:	781b      	ldrb	r3, [r3, #0]
 801f5a0:	2b00      	cmp	r3, #0
 801f5a2:	d137      	bne.n	801f614 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 801f5a4:	4a3c      	ldr	r2, [pc, #240]	@ (801f698 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801f5a6:	f9b2 2000 	ldrsh.w	r2, [r2]
 801f5aa:	f8ad 2004 	strh.w	r2, [sp, #4]
 801f5ae:	2b00      	cmp	r3, #0
 801f5b0:	d132      	bne.n	801f618 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 801f5b2:	4b3a      	ldr	r3, [pc, #232]	@ (801f69c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801f5b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f5b8:	6808      	ldr	r0, [r1, #0]
 801f5ba:	6849      	ldr	r1, [r1, #4]
 801f5bc:	f8ad 3006 	strh.w	r3, [sp, #6]
 801f5c0:	ac02      	add	r4, sp, #8
 801f5c2:	ab02      	add	r3, sp, #8
 801f5c4:	c303      	stmia	r3!, {r0, r1}
 801f5c6:	4669      	mov	r1, sp
 801f5c8:	4620      	mov	r0, r4
 801f5ca:	f7f9 ff6f 	bl	80194ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f5ce:	4668      	mov	r0, sp
 801f5d0:	f7f9 ff44 	bl	801945c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f5d4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801f5d8:	f8bd 2000 	ldrh.w	r2, [sp]
 801f5dc:	4d30      	ldr	r5, [pc, #192]	@ (801f6a0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 801f5de:	4413      	add	r3, r2
 801f5e0:	f8ad 3008 	strh.w	r3, [sp, #8]
 801f5e4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801f5e8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801f5ec:	6828      	ldr	r0, [r5, #0]
 801f5ee:	4413      	add	r3, r2
 801f5f0:	f8ad 300a 	strh.w	r3, [sp, #10]
 801f5f4:	6803      	ldr	r3, [r0, #0]
 801f5f6:	462f      	mov	r7, r5
 801f5f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f5fa:	4798      	blx	r3
 801f5fc:	f010 0f01 	tst.w	r0, #1
 801f600:	d00c      	beq.n	801f61c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 801f602:	e894 0006 	ldmia.w	r4, {r1, r2}
 801f606:	6828      	ldr	r0, [r5, #0]
 801f608:	6803      	ldr	r3, [r0, #0]
 801f60a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801f60c:	4798      	blx	r3
 801f60e:	b004      	add	sp, #16
 801f610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f614:	4a21      	ldr	r2, [pc, #132]	@ (801f69c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801f616:	e7c6      	b.n	801f5a6 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801f618:	4b1f      	ldr	r3, [pc, #124]	@ (801f698 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801f61a:	e7cb      	b.n	801f5b4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801f61c:	6838      	ldr	r0, [r7, #0]
 801f61e:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801f622:	6803      	ldr	r3, [r0, #0]
 801f624:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 801f628:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f62a:	4798      	blx	r3
 801f62c:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801f630:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801f634:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 801f638:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801f63c:	fb16 3602 	smlabb	r6, r6, r2, r3
 801f640:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801f644:	6838      	ldr	r0, [r7, #0]
 801f646:	6803      	ldr	r3, [r0, #0]
 801f648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f64a:	4798      	blx	r3
 801f64c:	4a12      	ldr	r2, [pc, #72]	@ (801f698 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801f64e:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 801f652:	4691      	mov	r9, r2
 801f654:	8813      	ldrh	r3, [r2, #0]
 801f656:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801f65a:	435d      	muls	r5, r3
 801f65c:	fb03 1404 	mla	r4, r3, r4, r1
 801f660:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801f664:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801f668:	6838      	ldr	r0, [r7, #0]
 801f66a:	42ac      	cmp	r4, r5
 801f66c:	6803      	ldr	r3, [r0, #0]
 801f66e:	d20e      	bcs.n	801f68e <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 801f670:	f8d3 a038 	ldr.w	sl, [r3, #56]	@ 0x38
 801f674:	4632      	mov	r2, r6
 801f676:	4643      	mov	r3, r8
 801f678:	4621      	mov	r1, r4
 801f67a:	47d0      	blx	sl
 801f67c:	f8b9 3000 	ldrh.w	r3, [r9]
 801f680:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f684:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801f688:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801f68c:	e7ec      	b.n	801f668 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 801f68e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f690:	4798      	blx	r3
 801f692:	e7bc      	b.n	801f60e <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801f694:	2005ba74 	.word	0x2005ba74
 801f698:	2005ba76 	.word	0x2005ba76
 801f69c:	2005ba78 	.word	0x2005ba78
 801f6a0:	2005ba7c 	.word	0x2005ba7c

0801f6a4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801f6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f6a8:	b08b      	sub	sp, #44	@ 0x2c
 801f6aa:	f89d b050 	ldrb.w	fp, [sp, #80]	@ 0x50
 801f6ae:	460f      	mov	r7, r1
 801f6b0:	4616      	mov	r6, r2
 801f6b2:	f89d 4054 	ldrb.w	r4, [sp, #84]	@ 0x54
 801f6b6:	f1bb 0f00 	cmp.w	fp, #0
 801f6ba:	d04a      	beq.n	801f752 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 801f6bc:	6810      	ldr	r0, [r2, #0]
 801f6be:	6851      	ldr	r1, [r2, #4]
 801f6c0:	ad06      	add	r5, sp, #24
 801f6c2:	c503      	stmia	r5!, {r0, r1}
 801f6c4:	6818      	ldr	r0, [r3, #0]
 801f6c6:	6859      	ldr	r1, [r3, #4]
 801f6c8:	ad08      	add	r5, sp, #32
 801f6ca:	c503      	stmia	r5!, {r0, r1}
 801f6cc:	a806      	add	r0, sp, #24
 801f6ce:	f7f9 fec5 	bl	801945c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f6d2:	4631      	mov	r1, r6
 801f6d4:	a808      	add	r0, sp, #32
 801f6d6:	f7f9 fee9 	bl	80194ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f6da:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801f6de:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801f6e2:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801f6e6:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 801f6ea:	fb16 2103 	smlabb	r1, r6, r3, r2
 801f6ee:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801f6f2:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801f6f6:	4f60      	ldr	r7, [pc, #384]	@ (801f878 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801f6f8:	440a      	add	r2, r1
 801f6fa:	f8ad 2020 	strh.w	r2, [sp, #32]
 801f6fe:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801f702:	6838      	ldr	r0, [r7, #0]
 801f704:	4413      	add	r3, r2
 801f706:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801f70a:	6803      	ldr	r3, [r0, #0]
 801f70c:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 801f710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f712:	4798      	blx	r3
 801f714:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801f718:	46b9      	mov	r9, r7
 801f71a:	d11d      	bne.n	801f758 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 801f71c:	b9fc      	cbnz	r4, 801f75e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801f71e:	f010 0f01 	tst.w	r0, #1
 801f722:	d01c      	beq.n	801f75e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801f724:	2700      	movs	r7, #0
 801f726:	f8d9 0000 	ldr.w	r0, [r9]
 801f72a:	b2ad      	uxth	r5, r5
 801f72c:	6801      	ldr	r1, [r0, #0]
 801f72e:	e9cd 4704 	strd	r4, r7, [sp, #16]
 801f732:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801f736:	f8cd b00c 	str.w	fp, [sp, #12]
 801f73a:	9402      	str	r4, [sp, #8]
 801f73c:	fa1f f488 	uxth.w	r4, r8
 801f740:	9501      	str	r5, [sp, #4]
 801f742:	9400      	str	r4, [sp, #0]
 801f744:	6c8c      	ldr	r4, [r1, #72]	@ 0x48
 801f746:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 801f74a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801f74e:	4631      	mov	r1, r6
 801f750:	47a0      	blx	r4
 801f752:	b00b      	add	sp, #44	@ 0x2c
 801f754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f758:	f010 0f04 	tst.w	r0, #4
 801f75c:	e7e1      	b.n	801f722 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
 801f75e:	f8d9 0000 	ldr.w	r0, [r9]
 801f762:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801f766:	6803      	ldr	r3, [r0, #0]
 801f768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f76a:	4798      	blx	r3
 801f76c:	4b43      	ldr	r3, [pc, #268]	@ (801f87c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 801f76e:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 801f772:	881a      	ldrh	r2, [r3, #0]
 801f774:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801f778:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801f77c:	fb02 1404 	mla	r4, r2, r4, r1
 801f780:	469a      	mov	sl, r3
 801f782:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801f786:	fb05 f502 	mul.w	r5, r5, r2
 801f78a:	d059      	beq.n	801f840 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 801f78c:	469e      	mov	lr, r3
 801f78e:	f1cb 09ff 	rsb	r9, fp, #255	@ 0xff
 801f792:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801f796:	fa1f f28b 	uxth.w	r2, fp
 801f79a:	fa1f f989 	uxth.w	r9, r9
 801f79e:	42ac      	cmp	r4, r5
 801f7a0:	d264      	bcs.n	801f86c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801f7a2:	eb04 0a07 	add.w	sl, r4, r7
 801f7a6:	4554      	cmp	r4, sl
 801f7a8:	d23d      	bcs.n	801f826 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 801f7aa:	8821      	ldrh	r1, [r4, #0]
 801f7ac:	f836 3b02 	ldrh.w	r3, [r6], #2
 801f7b0:	1208      	asrs	r0, r1, #8
 801f7b2:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 801f7b6:	fb10 f009 	smulbb	r0, r0, r9
 801f7ba:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801f7be:	00c9      	lsls	r1, r1, #3
 801f7c0:	b2c9      	uxtb	r1, r1
 801f7c2:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801f7c6:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 801f7ca:	fb11 f109 	smulbb	r1, r1, r9
 801f7ce:	fb1b fb09 	smulbb	fp, fp, r9
 801f7d2:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801f7d6:	fb0c 0c02 	mla	ip, ip, r2, r0
 801f7da:	10d8      	asrs	r0, r3, #3
 801f7dc:	00db      	lsls	r3, r3, #3
 801f7de:	b2db      	uxtb	r3, r3
 801f7e0:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801f7e4:	fb03 1302 	mla	r3, r3, r2, r1
 801f7e8:	fb00 b002 	mla	r0, r0, r2, fp
 801f7ec:	fa1f fc8c 	uxth.w	ip, ip
 801f7f0:	f10c 0b01 	add.w	fp, ip, #1
 801f7f4:	b29b      	uxth	r3, r3
 801f7f6:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801f7fa:	b280      	uxth	r0, r0
 801f7fc:	f40c 4b78 	and.w	fp, ip, #63488	@ 0xf800
 801f800:	f103 0c01 	add.w	ip, r3, #1
 801f804:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801f808:	1c43      	adds	r3, r0, #1
 801f80a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801f80e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801f812:	0940      	lsrs	r0, r0, #5
 801f814:	ea4c 0c0b 	orr.w	ip, ip, fp
 801f818:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801f81c:	ea4c 0c00 	orr.w	ip, ip, r0
 801f820:	f824 cb02 	strh.w	ip, [r4], #2
 801f824:	e7bf      	b.n	801f7a6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 801f826:	f8be 3000 	ldrh.w	r3, [lr]
 801f82a:	eba3 0308 	sub.w	r3, r3, r8
 801f82e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f832:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801f836:	eba3 0308 	sub.w	r3, r3, r8
 801f83a:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801f83e:	e7ae      	b.n	801f79e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 801f840:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801f844:	f8d9 0000 	ldr.w	r0, [r9]
 801f848:	42ac      	cmp	r4, r5
 801f84a:	6803      	ldr	r3, [r0, #0]
 801f84c:	d20e      	bcs.n	801f86c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801f84e:	f8d3 8038 	ldr.w	r8, [r3, #56]	@ 0x38
 801f852:	4632      	mov	r2, r6
 801f854:	463b      	mov	r3, r7
 801f856:	4621      	mov	r1, r4
 801f858:	47c0      	blx	r8
 801f85a:	f8ba 3000 	ldrh.w	r3, [sl]
 801f85e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f862:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801f866:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801f86a:	e7eb      	b.n	801f844 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 801f86c:	4b02      	ldr	r3, [pc, #8]	@ (801f878 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801f86e:	6818      	ldr	r0, [r3, #0]
 801f870:	6803      	ldr	r3, [r0, #0]
 801f872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f874:	4798      	blx	r3
 801f876:	e76c      	b.n	801f752 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 801f878:	2005ba7c 	.word	0x2005ba7c
 801f87c:	2005ba76 	.word	0x2005ba76

0801f880 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D0Ev>:
 801f880:	b510      	push	{r4, lr}
 801f882:	4604      	mov	r4, r0
 801f884:	2104      	movs	r1, #4
 801f886:	f00c fa00 	bl	802bc8a <_ZdlPvj>
 801f88a:	4620      	mov	r0, r4
 801f88c:	bd10      	pop	{r4, pc}

0801f88e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED0Ev>:
 801f88e:	b510      	push	{r4, lr}
 801f890:	4604      	mov	r4, r0
 801f892:	2104      	movs	r1, #4
 801f894:	f00c f9f9 	bl	802bc8a <_ZdlPvj>
 801f898:	4620      	mov	r0, r4
 801f89a:	bd10      	pop	{r4, pc}

0801f89c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D0Ev>:
 801f89c:	b510      	push	{r4, lr}
 801f89e:	4604      	mov	r4, r0
 801f8a0:	f640 0144 	movw	r1, #2116	@ 0x844
 801f8a4:	f00c f9f1 	bl	802bc8a <_ZdlPvj>
 801f8a8:	4620      	mov	r0, r4
 801f8aa:	bd10      	pop	{r4, pc}

0801f8ac <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOID0Ev>:
 801f8ac:	b510      	push	{r4, lr}
 801f8ae:	4604      	mov	r4, r0
 801f8b0:	f44f 7182 	mov.w	r1, #260	@ 0x104
 801f8b4:	f00c f9e9 	bl	802bc8a <_ZdlPvj>
 801f8b8:	4620      	mov	r0, r4
 801f8ba:	bd10      	pop	{r4, pc}

0801f8bc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801f8bc:	b510      	push	{r4, lr}
 801f8be:	4604      	mov	r4, r0
 801f8c0:	2104      	movs	r1, #4
 801f8c2:	f00c f9e2 	bl	802bc8a <_ZdlPvj>
 801f8c6:	4620      	mov	r0, r4
 801f8c8:	bd10      	pop	{r4, pc}

0801f8ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801f8ca:	b510      	push	{r4, lr}
 801f8cc:	4604      	mov	r4, r0
 801f8ce:	2104      	movs	r1, #4
 801f8d0:	f00c f9db 	bl	802bc8a <_ZdlPvj>
 801f8d4:	4620      	mov	r0, r4
 801f8d6:	bd10      	pop	{r4, pc}

0801f8d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801f8d8:	b510      	push	{r4, lr}
 801f8da:	4604      	mov	r4, r0
 801f8dc:	2104      	movs	r1, #4
 801f8de:	f00c f9d4 	bl	802bc8a <_ZdlPvj>
 801f8e2:	4620      	mov	r0, r4
 801f8e4:	bd10      	pop	{r4, pc}

0801f8e6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801f8e6:	b510      	push	{r4, lr}
 801f8e8:	4604      	mov	r4, r0
 801f8ea:	2104      	movs	r1, #4
 801f8ec:	f00c f9cd 	bl	802bc8a <_ZdlPvj>
 801f8f0:	4620      	mov	r0, r4
 801f8f2:	bd10      	pop	{r4, pc}

0801f8f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801f8f4:	b510      	push	{r4, lr}
 801f8f6:	4604      	mov	r4, r0
 801f8f8:	2104      	movs	r1, #4
 801f8fa:	f00c f9c6 	bl	802bc8a <_ZdlPvj>
 801f8fe:	4620      	mov	r0, r4
 801f900:	bd10      	pop	{r4, pc}

0801f902 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801f902:	b510      	push	{r4, lr}
 801f904:	4604      	mov	r4, r0
 801f906:	2104      	movs	r1, #4
 801f908:	f00c f9bf 	bl	802bc8a <_ZdlPvj>
 801f90c:	4620      	mov	r0, r4
 801f90e:	bd10      	pop	{r4, pc}

0801f910 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801f910:	b510      	push	{r4, lr}
 801f912:	4604      	mov	r4, r0
 801f914:	2104      	movs	r1, #4
 801f916:	f00c f9b8 	bl	802bc8a <_ZdlPvj>
 801f91a:	4620      	mov	r0, r4
 801f91c:	bd10      	pop	{r4, pc}

0801f91e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801f91e:	b510      	push	{r4, lr}
 801f920:	4604      	mov	r4, r0
 801f922:	2104      	movs	r1, #4
 801f924:	f00c f9b1 	bl	802bc8a <_ZdlPvj>
 801f928:	4620      	mov	r0, r4
 801f92a:	bd10      	pop	{r4, pc}

0801f92c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801f92c:	b510      	push	{r4, lr}
 801f92e:	4604      	mov	r4, r0
 801f930:	2104      	movs	r1, #4
 801f932:	f00c f9aa 	bl	802bc8a <_ZdlPvj>
 801f936:	4620      	mov	r0, r4
 801f938:	bd10      	pop	{r4, pc}

0801f93a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801f93a:	b510      	push	{r4, lr}
 801f93c:	4604      	mov	r4, r0
 801f93e:	2104      	movs	r1, #4
 801f940:	f00c f9a3 	bl	802bc8a <_ZdlPvj>
 801f944:	4620      	mov	r0, r4
 801f946:	bd10      	pop	{r4, pc}

0801f948 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801f948:	b510      	push	{r4, lr}
 801f94a:	4604      	mov	r4, r0
 801f94c:	2104      	movs	r1, #4
 801f94e:	f00c f99c 	bl	802bc8a <_ZdlPvj>
 801f952:	4620      	mov	r0, r4
 801f954:	bd10      	pop	{r4, pc}

0801f956 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801f956:	b510      	push	{r4, lr}
 801f958:	4604      	mov	r4, r0
 801f95a:	2104      	movs	r1, #4
 801f95c:	f00c f995 	bl	802bc8a <_ZdlPvj>
 801f960:	4620      	mov	r0, r4
 801f962:	bd10      	pop	{r4, pc}

0801f964 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801f964:	b510      	push	{r4, lr}
 801f966:	4604      	mov	r4, r0
 801f968:	2104      	movs	r1, #4
 801f96a:	f00c f98e 	bl	802bc8a <_ZdlPvj>
 801f96e:	4620      	mov	r0, r4
 801f970:	bd10      	pop	{r4, pc}

0801f972 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801f972:	b510      	push	{r4, lr}
 801f974:	4604      	mov	r4, r0
 801f976:	2104      	movs	r1, #4
 801f978:	f00c f987 	bl	802bc8a <_ZdlPvj>
 801f97c:	4620      	mov	r0, r4
 801f97e:	bd10      	pop	{r4, pc}

0801f980 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801f980:	b510      	push	{r4, lr}
 801f982:	4604      	mov	r4, r0
 801f984:	2104      	movs	r1, #4
 801f986:	f00c f980 	bl	802bc8a <_ZdlPvj>
 801f98a:	4620      	mov	r0, r4
 801f98c:	bd10      	pop	{r4, pc}

0801f98e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801f98e:	b510      	push	{r4, lr}
 801f990:	4604      	mov	r4, r0
 801f992:	2104      	movs	r1, #4
 801f994:	f00c f979 	bl	802bc8a <_ZdlPvj>
 801f998:	4620      	mov	r0, r4
 801f99a:	bd10      	pop	{r4, pc}

0801f99c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801f99c:	b510      	push	{r4, lr}
 801f99e:	4604      	mov	r4, r0
 801f9a0:	2104      	movs	r1, #4
 801f9a2:	f00c f972 	bl	802bc8a <_ZdlPvj>
 801f9a6:	4620      	mov	r0, r4
 801f9a8:	bd10      	pop	{r4, pc}

0801f9aa <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801f9aa:	b510      	push	{r4, lr}
 801f9ac:	4604      	mov	r4, r0
 801f9ae:	2104      	movs	r1, #4
 801f9b0:	f00c f96b 	bl	802bc8a <_ZdlPvj>
 801f9b4:	4620      	mov	r0, r4
 801f9b6:	bd10      	pop	{r4, pc}

0801f9b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801f9b8:	b510      	push	{r4, lr}
 801f9ba:	4604      	mov	r4, r0
 801f9bc:	2104      	movs	r1, #4
 801f9be:	f00c f964 	bl	802bc8a <_ZdlPvj>
 801f9c2:	4620      	mov	r0, r4
 801f9c4:	bd10      	pop	{r4, pc}

0801f9c6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 801f9c6:	b510      	push	{r4, lr}
 801f9c8:	4604      	mov	r4, r0
 801f9ca:	2104      	movs	r1, #4
 801f9cc:	f00c f95d 	bl	802bc8a <_ZdlPvj>
 801f9d0:	4620      	mov	r0, r4
 801f9d2:	bd10      	pop	{r4, pc}

0801f9d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801f9d4:	b510      	push	{r4, lr}
 801f9d6:	4604      	mov	r4, r0
 801f9d8:	2104      	movs	r1, #4
 801f9da:	f00c f956 	bl	802bc8a <_ZdlPvj>
 801f9de:	4620      	mov	r0, r4
 801f9e0:	bd10      	pop	{r4, pc}

0801f9e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801f9e2:	b510      	push	{r4, lr}
 801f9e4:	4604      	mov	r4, r0
 801f9e6:	2104      	movs	r1, #4
 801f9e8:	f00c f94f 	bl	802bc8a <_ZdlPvj>
 801f9ec:	4620      	mov	r0, r4
 801f9ee:	bd10      	pop	{r4, pc}

0801f9f0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801f9f0:	b510      	push	{r4, lr}
 801f9f2:	4604      	mov	r4, r0
 801f9f4:	2104      	movs	r1, #4
 801f9f6:	f00c f948 	bl	802bc8a <_ZdlPvj>
 801f9fa:	4620      	mov	r0, r4
 801f9fc:	bd10      	pop	{r4, pc}

0801f9fe <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801f9fe:	b510      	push	{r4, lr}
 801fa00:	4604      	mov	r4, r0
 801fa02:	2104      	movs	r1, #4
 801fa04:	f00c f941 	bl	802bc8a <_ZdlPvj>
 801fa08:	4620      	mov	r0, r4
 801fa0a:	bd10      	pop	{r4, pc}

0801fa0c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801fa0c:	b510      	push	{r4, lr}
 801fa0e:	4604      	mov	r4, r0
 801fa10:	2104      	movs	r1, #4
 801fa12:	f00c f93a 	bl	802bc8a <_ZdlPvj>
 801fa16:	4620      	mov	r0, r4
 801fa18:	bd10      	pop	{r4, pc}

0801fa1a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801fa1a:	b510      	push	{r4, lr}
 801fa1c:	4604      	mov	r4, r0
 801fa1e:	2104      	movs	r1, #4
 801fa20:	f00c f933 	bl	802bc8a <_ZdlPvj>
 801fa24:	4620      	mov	r0, r4
 801fa26:	bd10      	pop	{r4, pc}

0801fa28 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801fa28:	b510      	push	{r4, lr}
 801fa2a:	4604      	mov	r4, r0
 801fa2c:	2104      	movs	r1, #4
 801fa2e:	f00c f92c 	bl	802bc8a <_ZdlPvj>
 801fa32:	4620      	mov	r0, r4
 801fa34:	bd10      	pop	{r4, pc}

0801fa36 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801fa36:	b510      	push	{r4, lr}
 801fa38:	4604      	mov	r4, r0
 801fa3a:	2104      	movs	r1, #4
 801fa3c:	f00c f925 	bl	802bc8a <_ZdlPvj>
 801fa40:	4620      	mov	r0, r4
 801fa42:	bd10      	pop	{r4, pc}

0801fa44 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h>:
 801fa44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa48:	b08f      	sub	sp, #60	@ 0x3c
 801fa4a:	4616      	mov	r6, r2
 801fa4c:	f89d 2060 	ldrb.w	r2, [sp, #96]	@ 0x60
 801fa50:	4682      	mov	sl, r0
 801fa52:	460d      	mov	r5, r1
 801fa54:	9205      	str	r2, [sp, #20]
 801fa56:	2a00      	cmp	r2, #0
 801fa58:	f000 82b7 	beq.w	801ffca <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x586>
 801fa5c:	6830      	ldr	r0, [r6, #0]
 801fa5e:	6871      	ldr	r1, [r6, #4]
 801fa60:	ac0a      	add	r4, sp, #40	@ 0x28
 801fa62:	c403      	stmia	r4!, {r0, r1}
 801fa64:	6818      	ldr	r0, [r3, #0]
 801fa66:	6859      	ldr	r1, [r3, #4]
 801fa68:	ac0c      	add	r4, sp, #48	@ 0x30
 801fa6a:	c403      	stmia	r4!, {r0, r1}
 801fa6c:	a80a      	add	r0, sp, #40	@ 0x28
 801fa6e:	f7f9 fcf5 	bl	801945c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fa72:	4631      	mov	r1, r6
 801fa74:	a80c      	add	r0, sp, #48	@ 0x30
 801fa76:	f7f9 fd19 	bl	80194ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801fa7a:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801fa7e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801fa82:	bfdd      	ittte	le
 801fa84:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801fa88:	b293      	uxthle	r3, r2
 801fa8a:	fb91 f3f3 	sdivle	r3, r1, r3
 801fa8e:	2301      	movgt	r3, #1
 801fa90:	9300      	str	r3, [sp, #0]
 801fa92:	f105 0308 	add.w	r3, r5, #8
 801fa96:	9900      	ldr	r1, [sp, #0]
 801fa98:	9306      	str	r3, [sp, #24]
 801fa9a:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 801fa9e:	440b      	add	r3, r1
 801faa0:	3b01      	subs	r3, #1
 801faa2:	fb93 f3f1 	sdiv	r3, r3, r1
 801faa6:	9906      	ldr	r1, [sp, #24]
 801faa8:	3b01      	subs	r3, #1
 801faaa:	b29b      	uxth	r3, r3
 801faac:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801fab0:	9307      	str	r3, [sp, #28]
 801fab2:	9900      	ldr	r1, [sp, #0]
 801fab4:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801fab8:	fb93 f0f1 	sdiv	r0, r3, r1
 801fabc:	b284      	uxth	r4, r0
 801fabe:	9402      	str	r4, [sp, #8]
 801fac0:	9d02      	ldr	r5, [sp, #8]
 801fac2:	9c00      	ldr	r4, [sp, #0]
 801fac4:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801fac8:	fb05 3414 	mls	r4, r5, r4, r3
 801facc:	fb14 f402 	smulbb	r4, r4, r2
 801fad0:	440c      	add	r4, r1
 801fad2:	b2a4      	uxth	r4, r4
 801fad4:	2d00      	cmp	r5, #0
 801fad6:	d06c      	beq.n	801fbb2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16e>
 801fad8:	9806      	ldr	r0, [sp, #24]
 801fada:	1e6a      	subs	r2, r5, #1
 801fadc:	f850 6022 	ldr.w	r6, [r0, r2, lsl #2]
 801fae0:	9a07      	ldr	r2, [sp, #28]
 801fae2:	ba36      	rev	r6, r6
 801fae4:	4416      	add	r6, r2
 801fae6:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 801faea:	f9bd 5036 	ldrsh.w	r5, [sp, #54]	@ 0x36
 801faee:	4411      	add	r1, r2
 801faf0:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801faf4:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 801faf8:	4413      	add	r3, r2
 801fafa:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801fafe:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801fb02:	f8df 9320 	ldr.w	r9, [pc, #800]	@ 801fe24 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e0>
 801fb06:	9301      	str	r3, [sp, #4]
 801fb08:	4bc4      	ldr	r3, [pc, #784]	@ (801fe1c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3d8>)
 801fb0a:	6818      	ldr	r0, [r3, #0]
 801fb0c:	6803      	ldr	r3, [r0, #0]
 801fb0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fb10:	4798      	blx	r3
 801fb12:	4bc3      	ldr	r3, [pc, #780]	@ (801fe20 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3dc>)
 801fb14:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801fb18:	881b      	ldrh	r3, [r3, #0]
 801fb1a:	f9bd 8032 	ldrsh.w	r8, [sp, #50]	@ 0x32
 801fb1e:	fb03 2808 	mla	r8, r3, r8, r2
 801fb22:	436b      	muls	r3, r5
 801fb24:	eb00 0848 	add.w	r8, r0, r8, lsl #1
 801fb28:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 801fb2c:	9309      	str	r3, [sp, #36]	@ 0x24
 801fb2e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801fb32:	2500      	movs	r5, #0
 801fb34:	fb94 f3f3 	sdiv	r3, r4, r3
 801fb38:	9304      	str	r3, [sp, #16]
 801fb3a:	f10a 0304 	add.w	r3, sl, #4
 801fb3e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801fb42:	4629      	mov	r1, r5
 801fb44:	4618      	mov	r0, r3
 801fb46:	9308      	str	r3, [sp, #32]
 801fb48:	f00d faa0 	bl	802d08c <memset>
 801fb4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fb4e:	4543      	cmp	r3, r8
 801fb50:	f240 8236 	bls.w	801ffc0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x57c>
 801fb54:	2203      	movs	r2, #3
 801fb56:	2107      	movs	r1, #7
 801fb58:	200b      	movs	r0, #11
 801fb5a:	2c00      	cmp	r4, #0
 801fb5c:	f000 8131 	beq.w	801fdc2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x37e>
 801fb60:	7833      	ldrb	r3, [r6, #0]
 801fb62:	b2db      	uxtb	r3, r3
 801fb64:	2bfe      	cmp	r3, #254	@ 0xfe
 801fb66:	d126      	bne.n	801fbb6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x172>
 801fb68:	f896 e001 	ldrb.w	lr, [r6, #1]
 801fb6c:	f896 c002 	ldrb.w	ip, [r6, #2]
 801fb70:	fa5f fe8e 	uxtb.w	lr, lr
 801fb74:	f896 b003 	ldrb.w	fp, [r6, #3]
 801fb78:	fa5f fc8c 	uxtb.w	ip, ip
 801fb7c:	f36e 0507 	bfi	r5, lr, #0, #8
 801fb80:	f36c 250f 	bfi	r5, ip, #8, #8
 801fb84:	fa5f fb8b 	uxtb.w	fp, fp
 801fb88:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 801fb8c:	fb12 cc0b 	smlabb	ip, r2, fp, ip
 801fb90:	fb11 cc0e 	smlabb	ip, r1, lr, ip
 801fb94:	f36b 4517 	bfi	r5, fp, #16, #8
 801fb98:	0e2b      	lsrs	r3, r5, #24
 801fb9a:	fb10 c303 	smlabb	r3, r0, r3, ip
 801fb9e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801fba2:	3c01      	subs	r4, #1
 801fba4:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 801fba8:	1d37      	adds	r7, r6, #4
 801fbaa:	b2a4      	uxth	r4, r4
 801fbac:	605d      	str	r5, [r3, #4]
 801fbae:	463e      	mov	r6, r7
 801fbb0:	e7d3      	b.n	801fb5a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x116>
 801fbb2:	9e07      	ldr	r6, [sp, #28]
 801fbb4:	e797      	b.n	801fae6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0xa2>
 801fbb6:	2bff      	cmp	r3, #255	@ 0xff
 801fbb8:	d127      	bne.n	801fc0a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1c6>
 801fbba:	f896 c001 	ldrb.w	ip, [r6, #1]
 801fbbe:	78b3      	ldrb	r3, [r6, #2]
 801fbc0:	fa5f fc8c 	uxtb.w	ip, ip
 801fbc4:	f896 e003 	ldrb.w	lr, [r6, #3]
 801fbc8:	b2db      	uxtb	r3, r3
 801fbca:	f36c 0507 	bfi	r5, ip, #0, #8
 801fbce:	f363 250f 	bfi	r5, r3, #8, #8
 801fbd2:	fa5f fe8e 	uxtb.w	lr, lr
 801fbd6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801fbda:	fb12 330e 	smlabb	r3, r2, lr, r3
 801fbde:	fb11 330c 	smlabb	r3, r1, ip, r3
 801fbe2:	f896 b004 	ldrb.w	fp, [r6, #4]
 801fbe6:	f36e 4517 	bfi	r5, lr, #16, #8
 801fbea:	fa5f fb8b 	uxtb.w	fp, fp
 801fbee:	f36b 651f 	bfi	r5, fp, #24, #8
 801fbf2:	fb10 3b0b 	smlabb	fp, r0, fp, r3
 801fbf6:	f00b 0b3f 	and.w	fp, fp, #63	@ 0x3f
 801fbfa:	3c01      	subs	r4, #1
 801fbfc:	eb0a 0b8b 	add.w	fp, sl, fp, lsl #2
 801fc00:	1d77      	adds	r7, r6, #5
 801fc02:	b2a4      	uxth	r4, r4
 801fc04:	f8cb 5004 	str.w	r5, [fp, #4]
 801fc08:	e7d1      	b.n	801fbae <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16a>
 801fc0a:	ea5f 1ca3 	movs.w	ip, r3, asr #6
 801fc0e:	f106 0701 	add.w	r7, r6, #1
 801fc12:	d107      	bne.n	801fc24 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e0>
 801fc14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801fc18:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 801fc1c:	685d      	ldr	r5, [r3, #4]
 801fc1e:	3c01      	subs	r4, #1
 801fc20:	b2a4      	uxth	r4, r4
 801fc22:	e7c4      	b.n	801fbae <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16a>
 801fc24:	f1bc 0f01 	cmp.w	ip, #1
 801fc28:	d12c      	bne.n	801fc84 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x240>
 801fc2a:	f003 0e03 	and.w	lr, r3, #3
 801fc2e:	f1ae 0e02 	sub.w	lr, lr, #2
 801fc32:	eb05 0ece 	add.w	lr, r5, lr, lsl #3
 801fc36:	fa5f fe8e 	uxtb.w	lr, lr
 801fc3a:	f003 0c0c 	and.w	ip, r3, #12
 801fc3e:	f36e 0507 	bfi	r5, lr, #0, #8
 801fc42:	f1ac 0c08 	sub.w	ip, ip, #8
 801fc46:	eb0c 2c15 	add.w	ip, ip, r5, lsr #8
 801fc4a:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
 801fc4e:	f36c 250f 	bfi	r5, ip, #8, #8
 801fc52:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801fc56:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801fc5a:	3b02      	subs	r3, #2
 801fc5c:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 801fc60:	b2db      	uxtb	r3, r3
 801fc62:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 801fc66:	fb12 cc03 	smlabb	ip, r2, r3, ip
 801fc6a:	fb11 cc0e 	smlabb	ip, r1, lr, ip
 801fc6e:	f363 4517 	bfi	r5, r3, #16, #8
 801fc72:	0e2e      	lsrs	r6, r5, #24
 801fc74:	fb10 c606 	smlabb	r6, r0, r6, ip
 801fc78:	f006 063f 	and.w	r6, r6, #63	@ 0x3f
 801fc7c:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
 801fc80:	6075      	str	r5, [r6, #4]
 801fc82:	e7cc      	b.n	801fc1e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1da>
 801fc84:	f1bc 0f02 	cmp.w	ip, #2
 801fc88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801fc8c:	d12a      	bne.n	801fce4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2a0>
 801fc8e:	1cb7      	adds	r7, r6, #2
 801fc90:	7876      	ldrb	r6, [r6, #1]
 801fc92:	3b20      	subs	r3, #32
 801fc94:	b2f6      	uxtb	r6, r6
 801fc96:	f006 0c0f 	and.w	ip, r6, #15
 801fc9a:	f1ac 0c08 	sub.w	ip, ip, #8
 801fc9e:	449c      	add	ip, r3
 801fca0:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
 801fca4:	fa5f fc8c 	uxtb.w	ip, ip
 801fca8:	f36c 0507 	bfi	r5, ip, #0, #8
 801fcac:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 801fcb0:	eb0e 0e83 	add.w	lr, lr, r3, lsl #2
 801fcb4:	fa5f fe8e 	uxtb.w	lr, lr
 801fcb8:	1136      	asrs	r6, r6, #4
 801fcba:	f36e 250f 	bfi	r5, lr, #8, #8
 801fcbe:	3e08      	subs	r6, #8
 801fcc0:	4433      	add	r3, r6
 801fcc2:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801fcc6:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 801fcca:	b2db      	uxtb	r3, r3
 801fccc:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
 801fcd0:	fb12 ee03 	smlabb	lr, r2, r3, lr
 801fcd4:	fb11 ee0c 	smlabb	lr, r1, ip, lr
 801fcd8:	f363 4517 	bfi	r5, r3, #16, #8
 801fcdc:	0e2e      	lsrs	r6, r5, #24
 801fcde:	fb10 e606 	smlabb	r6, r0, r6, lr
 801fce2:	e7c9      	b.n	801fc78 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x234>
 801fce4:	1c5e      	adds	r6, r3, #1
 801fce6:	42a6      	cmp	r6, r4
 801fce8:	dd4e      	ble.n	801fd88 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x344>
 801fcea:	1b36      	subs	r6, r6, r4
 801fcec:	2e00      	cmp	r6, #0
 801fcee:	dc4e      	bgt.n	801fd8e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x34a>
 801fcf0:	2400      	movs	r4, #0
 801fcf2:	f8dd b004 	ldr.w	fp, [sp, #4]
 801fcf6:	f1bb 0f00 	cmp.w	fp, #0
 801fcfa:	f340 8122 	ble.w	801ff42 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4fe>
 801fcfe:	1c7b      	adds	r3, r7, #1
 801fd00:	9303      	str	r3, [sp, #12]
 801fd02:	783b      	ldrb	r3, [r7, #0]
 801fd04:	b2db      	uxtb	r3, r3
 801fd06:	2bfe      	cmp	r3, #254	@ 0xfe
 801fd08:	d160      	bne.n	801fdcc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x388>
 801fd0a:	1d3b      	adds	r3, r7, #4
 801fd0c:	9303      	str	r3, [sp, #12]
 801fd0e:	2303      	movs	r3, #3
 801fd10:	7879      	ldrb	r1, [r7, #1]
 801fd12:	78ba      	ldrb	r2, [r7, #2]
 801fd14:	b2c9      	uxtb	r1, r1
 801fd16:	78f8      	ldrb	r0, [r7, #3]
 801fd18:	f361 0507 	bfi	r5, r1, #0, #8
 801fd1c:	b2d2      	uxtb	r2, r2
 801fd1e:	f362 250f 	bfi	r5, r2, #8, #8
 801fd22:	b2c0      	uxtb	r0, r0
 801fd24:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801fd28:	fb13 2200 	smlabb	r2, r3, r0, r2
 801fd2c:	2307      	movs	r3, #7
 801fd2e:	fb13 2101 	smlabb	r1, r3, r1, r2
 801fd32:	230b      	movs	r3, #11
 801fd34:	f360 4517 	bfi	r5, r0, #16, #8
 801fd38:	0e2e      	lsrs	r6, r5, #24
 801fd3a:	fb13 1306 	smlabb	r3, r3, r6, r1
 801fd3e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801fd42:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 801fd46:	605d      	str	r5, [r3, #4]
 801fd48:	2601      	movs	r6, #1
 801fd4a:	4637      	mov	r7, r6
 801fd4c:	0e2b      	lsrs	r3, r5, #24
 801fd4e:	ebab 0b07 	sub.w	fp, fp, r7
 801fd52:	eba6 0607 	sub.w	r6, r6, r7
 801fd56:	f040 80d3 	bne.w	801ff00 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4bc>
 801fd5a:	b18c      	cbz	r4, 801fd80 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x33c>
 801fd5c:	4648      	mov	r0, r9
 801fd5e:	00a1      	lsls	r1, r4, #2
 801fd60:	f7f2 fcaa 	bl	80126b8 <_ZN8touchgfx5paint9flushLineEPmi>
 801fd64:	9b05      	ldr	r3, [sp, #20]
 801fd66:	4622      	mov	r2, r4
 801fd68:	4649      	mov	r1, r9
 801fd6a:	4640      	mov	r0, r8
 801fd6c:	f7f2 fd4e 	bl	801280c <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>
 801fd70:	4b2c      	ldr	r3, [pc, #176]	@ (801fe24 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e0>)
 801fd72:	4a2d      	ldr	r2, [pc, #180]	@ (801fe28 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e4>)
 801fd74:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801fd78:	4599      	cmp	r9, r3
 801fd7a:	bf08      	it	eq
 801fd7c:	4613      	moveq	r3, r2
 801fd7e:	4699      	mov	r9, r3
 801fd80:	eb08 0847 	add.w	r8, r8, r7, lsl #1
 801fd84:	2400      	movs	r4, #0
 801fd86:	e0da      	b.n	801ff3e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4fa>
 801fd88:	1ba6      	subs	r6, r4, r6
 801fd8a:	b2b4      	uxth	r4, r6
 801fd8c:	e70f      	b.n	801fbae <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16a>
 801fd8e:	9b01      	ldr	r3, [sp, #4]
 801fd90:	9a01      	ldr	r2, [sp, #4]
 801fd92:	42b3      	cmp	r3, r6
 801fd94:	bfa8      	it	ge
 801fd96:	4633      	movge	r3, r6
 801fd98:	0e2c      	lsrs	r4, r5, #24
 801fd9a:	eba2 0b03 	sub.w	fp, r2, r3
 801fd9e:	eba6 0603 	sub.w	r6, r6, r3
 801fda2:	d00b      	beq.n	801fdbc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x378>
 801fda4:	461a      	mov	r2, r3
 801fda6:	f1a9 0104 	sub.w	r1, r9, #4
 801fdaa:	2a00      	cmp	r2, #0
 801fdac:	dc02      	bgt.n	801fdb4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x370>
 801fdae:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801fdb2:	e7a0      	b.n	801fcf6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 801fdb4:	f841 5f04 	str.w	r5, [r1, #4]!
 801fdb8:	3a01      	subs	r2, #1
 801fdba:	e7f6      	b.n	801fdaa <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x366>
 801fdbc:	eb08 0843 	add.w	r8, r8, r3, lsl #1
 801fdc0:	e799      	b.n	801fcf6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 801fdc2:	4637      	mov	r7, r6
 801fdc4:	f8dd b004 	ldr.w	fp, [sp, #4]
 801fdc8:	4626      	mov	r6, r4
 801fdca:	e794      	b.n	801fcf6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 801fdcc:	2bff      	cmp	r3, #255	@ 0xff
 801fdce:	d11d      	bne.n	801fe0c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3c8>
 801fdd0:	1d7b      	adds	r3, r7, #5
 801fdd2:	7878      	ldrb	r0, [r7, #1]
 801fdd4:	9303      	str	r3, [sp, #12]
 801fdd6:	78ba      	ldrb	r2, [r7, #2]
 801fdd8:	78fe      	ldrb	r6, [r7, #3]
 801fdda:	793b      	ldrb	r3, [r7, #4]
 801fddc:	b2c0      	uxtb	r0, r0
 801fdde:	b2d9      	uxtb	r1, r3
 801fde0:	2303      	movs	r3, #3
 801fde2:	f360 0507 	bfi	r5, r0, #0, #8
 801fde6:	b2d2      	uxtb	r2, r2
 801fde8:	f362 250f 	bfi	r5, r2, #8, #8
 801fdec:	b2f6      	uxtb	r6, r6
 801fdee:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801fdf2:	fb13 2206 	smlabb	r2, r3, r6, r2
 801fdf6:	2307      	movs	r3, #7
 801fdf8:	fb13 2000 	smlabb	r0, r3, r0, r2
 801fdfc:	230b      	movs	r3, #11
 801fdfe:	f366 4517 	bfi	r5, r6, #16, #8
 801fe02:	f361 651f 	bfi	r5, r1, #24, #8
 801fe06:	fb13 0301 	smlabb	r3, r3, r1, r0
 801fe0a:	e798      	b.n	801fd3e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2fa>
 801fe0c:	119e      	asrs	r6, r3, #6
 801fe0e:	d10d      	bne.n	801fe2c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e8>
 801fe10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801fe14:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 801fe18:	685d      	ldr	r5, [r3, #4]
 801fe1a:	e795      	b.n	801fd48 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x304>
 801fe1c:	2005ba7c 	.word	0x2005ba7c
 801fe20:	2005ba76 	.word	0x2005ba76
 801fe24:	20045700 	.word	0x20045700
 801fe28:	20045800 	.word	0x20045800
 801fe2c:	2e01      	cmp	r6, #1
 801fe2e:	ea4f 6115 	mov.w	r1, r5, lsr #24
 801fe32:	d12b      	bne.n	801fe8c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x448>
 801fe34:	f003 0003 	and.w	r0, r3, #3
 801fe38:	3802      	subs	r0, #2
 801fe3a:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 801fe3e:	b2c0      	uxtb	r0, r0
 801fe40:	f003 020c 	and.w	r2, r3, #12
 801fe44:	f360 0507 	bfi	r5, r0, #0, #8
 801fe48:	3a08      	subs	r2, #8
 801fe4a:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 801fe4e:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801fe52:	f362 250f 	bfi	r5, r2, #8, #8
 801fe56:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801fe5a:	1e9f      	subs	r7, r3, #2
 801fe5c:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801fe60:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801fe64:	2703      	movs	r7, #3
 801fe66:	b2db      	uxtb	r3, r3
 801fe68:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801fe6c:	fb17 2203 	smlabb	r2, r7, r3, r2
 801fe70:	2707      	movs	r7, #7
 801fe72:	f363 4517 	bfi	r5, r3, #16, #8
 801fe76:	230b      	movs	r3, #11
 801fe78:	fb17 2000 	smlabb	r0, r7, r0, r2
 801fe7c:	fb13 0101 	smlabb	r1, r3, r1, r0
 801fe80:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 801fe84:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 801fe88:	604d      	str	r5, [r1, #4]
 801fe8a:	e75e      	b.n	801fd4a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x306>
 801fe8c:	2e02      	cmp	r6, #2
 801fe8e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801fe92:	d12f      	bne.n	801fef4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4b0>
 801fe94:	7878      	ldrb	r0, [r7, #1]
 801fe96:	1cba      	adds	r2, r7, #2
 801fe98:	b2c0      	uxtb	r0, r0
 801fe9a:	9203      	str	r2, [sp, #12]
 801fe9c:	f000 020f 	and.w	r2, r0, #15
 801fea0:	3b20      	subs	r3, #32
 801fea2:	3a08      	subs	r2, #8
 801fea4:	441a      	add	r2, r3
 801fea6:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 801feaa:	b2d2      	uxtb	r2, r2
 801feac:	f362 0507 	bfi	r5, r2, #0, #8
 801feb0:	f3c5 2607 	ubfx	r6, r5, #8, #8
 801feb4:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 801feb8:	b2f6      	uxtb	r6, r6
 801feba:	1100      	asrs	r0, r0, #4
 801febc:	f366 250f 	bfi	r5, r6, #8, #8
 801fec0:	3808      	subs	r0, #8
 801fec2:	4403      	add	r3, r0
 801fec4:	f3c5 4007 	ubfx	r0, r5, #16, #8
 801fec8:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801fecc:	2003      	movs	r0, #3
 801fece:	b2db      	uxtb	r3, r3
 801fed0:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 801fed4:	fb10 6603 	smlabb	r6, r0, r3, r6
 801fed8:	2007      	movs	r0, #7
 801feda:	f363 4517 	bfi	r5, r3, #16, #8
 801fede:	230b      	movs	r3, #11
 801fee0:	fb10 6202 	smlabb	r2, r0, r2, r6
 801fee4:	fb13 2101 	smlabb	r1, r3, r1, r2
 801fee8:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 801feec:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 801fef0:	604d      	str	r5, [r1, #4]
 801fef2:	e729      	b.n	801fd48 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x304>
 801fef4:	1c5e      	adds	r6, r3, #1
 801fef6:	45b3      	cmp	fp, r6
 801fef8:	465f      	mov	r7, fp
 801fefa:	bfa8      	it	ge
 801fefc:	4637      	movge	r7, r6
 801fefe:	e725      	b.n	801fd4c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x308>
 801ff00:	193b      	adds	r3, r7, r4
 801ff02:	2b40      	cmp	r3, #64	@ 0x40
 801ff04:	dd13      	ble.n	801ff2e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4ea>
 801ff06:	4648      	mov	r0, r9
 801ff08:	00a1      	lsls	r1, r4, #2
 801ff0a:	f7f2 fbd5 	bl	80126b8 <_ZN8touchgfx5paint9flushLineEPmi>
 801ff0e:	4622      	mov	r2, r4
 801ff10:	4640      	mov	r0, r8
 801ff12:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801ff16:	2400      	movs	r4, #0
 801ff18:	4649      	mov	r1, r9
 801ff1a:	9b05      	ldr	r3, [sp, #20]
 801ff1c:	f7f2 fc76 	bl	801280c <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>
 801ff20:	4b2b      	ldr	r3, [pc, #172]	@ (801ffd0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x58c>)
 801ff22:	4599      	cmp	r9, r3
 801ff24:	bf0c      	ite	eq
 801ff26:	f8df 90b4 	ldreq.w	r9, [pc, #180]	@ 801ffdc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x598>
 801ff2a:	f8df 90a4 	ldrne.w	r9, [pc, #164]	@ 801ffd0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x58c>
 801ff2e:	463b      	mov	r3, r7
 801ff30:	eb09 0284 	add.w	r2, r9, r4, lsl #2
 801ff34:	3b01      	subs	r3, #1
 801ff36:	f842 5b04 	str.w	r5, [r2], #4
 801ff3a:	d1fb      	bne.n	801ff34 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4f0>
 801ff3c:	443c      	add	r4, r7
 801ff3e:	9f03      	ldr	r7, [sp, #12]
 801ff40:	e6d9      	b.n	801fcf6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 801ff42:	b15c      	cbz	r4, 801ff5c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x518>
 801ff44:	00a1      	lsls	r1, r4, #2
 801ff46:	4648      	mov	r0, r9
 801ff48:	f7f2 fbb6 	bl	80126b8 <_ZN8touchgfx5paint9flushLineEPmi>
 801ff4c:	4640      	mov	r0, r8
 801ff4e:	9b05      	ldr	r3, [sp, #20]
 801ff50:	4622      	mov	r2, r4
 801ff52:	4649      	mov	r1, r9
 801ff54:	f7f2 fc5a 	bl	801280c <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>
 801ff58:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801ff5c:	4b1d      	ldr	r3, [pc, #116]	@ (801ffd4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x590>)
 801ff5e:	9a01      	ldr	r2, [sp, #4]
 801ff60:	881b      	ldrh	r3, [r3, #0]
 801ff62:	1a9b      	subs	r3, r3, r2
 801ff64:	eb08 0843 	add.w	r8, r8, r3, lsl #1
 801ff68:	9b04      	ldr	r3, [sp, #16]
 801ff6a:	3301      	adds	r3, #1
 801ff6c:	9304      	str	r3, [sp, #16]
 801ff6e:	9a04      	ldr	r2, [sp, #16]
 801ff70:	9b00      	ldr	r3, [sp, #0]
 801ff72:	4293      	cmp	r3, r2
 801ff74:	d11d      	bne.n	801ffb2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x56e>
 801ff76:	2500      	movs	r5, #0
 801ff78:	9b02      	ldr	r3, [sp, #8]
 801ff7a:	9a02      	ldr	r2, [sp, #8]
 801ff7c:	f103 0b01 	add.w	fp, r3, #1
 801ff80:	9b06      	ldr	r3, [sp, #24]
 801ff82:	f8bd 4030 	ldrh.w	r4, [sp, #48]	@ 0x30
 801ff86:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 801ff8a:	f8bd 6028 	ldrh.w	r6, [sp, #40]	@ 0x28
 801ff8e:	9b07      	ldr	r3, [sp, #28]
 801ff90:	ba3f      	rev	r7, r7
 801ff92:	1ba4      	subs	r4, r4, r6
 801ff94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801ff98:	4629      	mov	r1, r5
 801ff9a:	9808      	ldr	r0, [sp, #32]
 801ff9c:	441f      	add	r7, r3
 801ff9e:	b2a4      	uxth	r4, r4
 801ffa0:	f00d f874 	bl	802d08c <memset>
 801ffa4:	f8cd b008 	str.w	fp, [sp, #8]
 801ffa8:	9504      	str	r5, [sp, #16]
 801ffaa:	f7f2 fb6d 	bl	8012688 <_ZN8touchgfx5paint8tearDownEv>
 801ffae:	463e      	mov	r6, r7
 801ffb0:	e5cc      	b.n	801fb4c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x108>
 801ffb2:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801ffb6:	9b01      	ldr	r3, [sp, #4]
 801ffb8:	1ae4      	subs	r4, r4, r3
 801ffba:	1ba4      	subs	r4, r4, r6
 801ffbc:	b2a4      	uxth	r4, r4
 801ffbe:	e7f4      	b.n	801ffaa <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x566>
 801ffc0:	4b05      	ldr	r3, [pc, #20]	@ (801ffd8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x594>)
 801ffc2:	6818      	ldr	r0, [r3, #0]
 801ffc4:	6803      	ldr	r3, [r0, #0]
 801ffc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ffc8:	4798      	blx	r3
 801ffca:	b00f      	add	sp, #60	@ 0x3c
 801ffcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ffd0:	20045700 	.word	0x20045700
 801ffd4:	2005ba76 	.word	0x2005ba76
 801ffd8:	2005ba7c 	.word	0x2005ba7c
 801ffdc:	20045800 	.word	0x20045800

0801ffe0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 801ffe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ffe4:	b08f      	sub	sp, #60	@ 0x3c
 801ffe6:	9205      	str	r2, [sp, #20]
 801ffe8:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801ffec:	461c      	mov	r4, r3
 801ffee:	9100      	str	r1, [sp, #0]
 801fff0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801fff2:	9201      	str	r2, [sp, #4]
 801fff4:	2a00      	cmp	r2, #0
 801fff6:	f000 8116 	beq.w	8020226 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x246>
 801fffa:	6820      	ldr	r0, [r4, #0]
 801fffc:	6861      	ldr	r1, [r4, #4]
 801fffe:	aa0a      	add	r2, sp, #40	@ 0x28
 8020000:	c203      	stmia	r2!, {r0, r1}
 8020002:	6818      	ldr	r0, [r3, #0]
 8020004:	6859      	ldr	r1, [r3, #4]
 8020006:	aa0c      	add	r2, sp, #48	@ 0x30
 8020008:	c203      	stmia	r2!, {r0, r1}
 802000a:	a80a      	add	r0, sp, #40	@ 0x28
 802000c:	f7f9 fa26 	bl	801945c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020010:	4621      	mov	r1, r4
 8020012:	a80c      	add	r0, sp, #48	@ 0x30
 8020014:	f7f9 fa4a 	bl	80194ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020018:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 802001c:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 8020020:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8020024:	bfdd      	ittte	le
 8020026:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 802002a:	b2b3      	uxthle	r3, r6
 802002c:	fb92 f3f3 	sdivle	r3, r2, r3
 8020030:	2301      	movgt	r3, #1
 8020032:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8020036:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 802003a:	fb92 f1f3 	sdiv	r1, r2, r3
 802003e:	fa1f fc81 	uxth.w	ip, r1
 8020042:	4661      	mov	r1, ip
 8020044:	fb0c 2413 	mls	r4, ip, r3, r2
 8020048:	fb14 f406 	smulbb	r4, r4, r6
 802004c:	441d      	add	r5, r3
 802004e:	3d01      	subs	r5, #1
 8020050:	4404      	add	r4, r0
 8020052:	fb95 f5f3 	sdiv	r5, r5, r3
 8020056:	b2a4      	uxth	r4, r4
 8020058:	b131      	cbz	r1, 8020068 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x88>
 802005a:	9b05      	ldr	r3, [sp, #20]
 802005c:	9900      	ldr	r1, [sp, #0]
 802005e:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8020062:	ba1b      	rev	r3, r3
 8020064:	4419      	add	r1, r3
 8020066:	9100      	str	r1, [sp, #0]
 8020068:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 802006c:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 8020070:	4418      	add	r0, r3
 8020072:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8020076:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 802007a:	441a      	add	r2, r3
 802007c:	4b6b      	ldr	r3, [pc, #428]	@ (802022c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
 802007e:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8020082:	6818      	ldr	r0, [r3, #0]
 8020084:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 8020088:	6803      	ldr	r3, [r0, #0]
 802008a:	b2ad      	uxth	r5, r5
 802008c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802008e:	4798      	blx	r3
 8020090:	4967      	ldr	r1, [pc, #412]	@ (8020230 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x250>)
 8020092:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8020096:	880b      	ldrh	r3, [r1, #0]
 8020098:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 802009c:	00ad      	lsls	r5, r5, #2
 802009e:	fb03 c202 	mla	r2, r3, r2, ip
 80200a2:	4373      	muls	r3, r6
 80200a4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80200a8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80200ac:	9306      	str	r3, [sp, #24]
 80200ae:	1d2b      	adds	r3, r5, #4
 80200b0:	9307      	str	r3, [sp, #28]
 80200b2:	9b01      	ldr	r3, [sp, #4]
 80200b4:	2c00      	cmp	r4, #0
 80200b6:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 80200ba:	bf0c      	ite	eq
 80200bc:	46c6      	moveq	lr, r8
 80200be:	f04f 0e00 	movne.w	lr, #0
 80200c2:	2300      	movs	r3, #0
 80200c4:	9109      	str	r1, [sp, #36]	@ 0x24
 80200c6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80200ca:	b292      	uxth	r2, r2
 80200cc:	fa1f fe8e 	uxth.w	lr, lr
 80200d0:	9302      	str	r3, [sp, #8]
 80200d2:	9103      	str	r1, [sp, #12]
 80200d4:	9204      	str	r2, [sp, #16]
 80200d6:	9a06      	ldr	r2, [sp, #24]
 80200d8:	4282      	cmp	r2, r0
 80200da:	f240 809f 	bls.w	802021c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x23c>
 80200de:	b963      	cbnz	r3, 80200fa <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11a>
 80200e0:	9b00      	ldr	r3, [sp, #0]
 80200e2:	781a      	ldrb	r2, [r3, #0]
 80200e4:	0993      	lsrs	r3, r2, #6
 80200e6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80200ea:	9202      	str	r2, [sp, #8]
 80200ec:	1e5a      	subs	r2, r3, #1
 80200ee:	2a02      	cmp	r2, #2
 80200f0:	d815      	bhi.n	802011e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13e>
 80200f2:	9a00      	ldr	r2, [sp, #0]
 80200f4:	b29b      	uxth	r3, r3
 80200f6:	3201      	adds	r2, #1
 80200f8:	9200      	str	r2, [sp, #0]
 80200fa:	b1b4      	cbz	r4, 802012a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x14a>
 80200fc:	429c      	cmp	r4, r3
 80200fe:	bf99      	ittee	ls
 8020100:	1b1c      	subls	r4, r3, r4
 8020102:	fa1f fa84 	uxthls.w	sl, r4
 8020106:	4671      	movhi	r1, lr
 8020108:	f04f 0a00 	movhi.w	sl, #0
 802010c:	bf93      	iteet	ls
 802010e:	2400      	movls	r4, #0
 8020110:	1ae4      	subhi	r4, r4, r3
 8020112:	b2a4      	uxthhi	r4, r4
 8020114:	fa1f f188 	uxthls.w	r1, r8
 8020118:	4653      	mov	r3, sl
 802011a:	468e      	mov	lr, r1
 802011c:	e7db      	b.n	80200d6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xf6>
 802011e:	9a00      	ldr	r2, [sp, #0]
 8020120:	9b00      	ldr	r3, [sp, #0]
 8020122:	3202      	adds	r2, #2
 8020124:	785b      	ldrb	r3, [r3, #1]
 8020126:	9200      	str	r2, [sp, #0]
 8020128:	e7e7      	b.n	80200fa <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11a>
 802012a:	2202      	movs	r2, #2
 802012c:	4615      	mov	r5, r2
 802012e:	4573      	cmp	r3, lr
 8020130:	bf2c      	ite	cs
 8020132:	46f1      	movcs	r9, lr
 8020134:	4699      	movcc	r9, r3
 8020136:	9907      	ldr	r1, [sp, #28]
 8020138:	9a02      	ldr	r2, [sp, #8]
 802013a:	bf28      	it	cs
 802013c:	eba3 0a0e 	subcs.w	sl, r3, lr
 8020140:	fb15 1202 	smlabb	r2, r5, r2, r1
 8020144:	9905      	ldr	r1, [sp, #20]
 8020146:	bf28      	it	cs
 8020148:	fa1f fa8a 	uxthcs.w	sl, sl
 802014c:	f831 c002 	ldrh.w	ip, [r1, r2]
 8020150:	9a01      	ldr	r2, [sp, #4]
 8020152:	bf37      	itett	cc
 8020154:	ebae 0103 	subcc.w	r1, lr, r3
 8020158:	4621      	movcs	r1, r4
 802015a:	b289      	uxthcc	r1, r1
 802015c:	46a2      	movcc	sl, r4
 802015e:	2aff      	cmp	r2, #255	@ 0xff
 8020160:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8020164:	d105      	bne.n	8020172 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x192>
 8020166:	4481      	add	r9, r0
 8020168:	4581      	cmp	r9, r0
 802016a:	d045      	beq.n	80201f8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x218>
 802016c:	f820 cb02 	strh.w	ip, [r0], #2
 8020170:	e7fa      	b.n	8020168 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x188>
 8020172:	9d03      	ldr	r5, [sp, #12]
 8020174:	ea4f 222c 	mov.w	r2, ip, asr #8
 8020178:	ea4f 0bec 	mov.w	fp, ip, asr #3
 802017c:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8020180:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8020184:	436a      	muls	r2, r5
 8020186:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 802018a:	fa5f fc8c 	uxtb.w	ip, ip
 802018e:	fb0b fb05 	mul.w	fp, fp, r5
 8020192:	fb0c fc05 	mul.w	ip, ip, r5
 8020196:	9208      	str	r2, [sp, #32]
 8020198:	4481      	add	r9, r0
 802019a:	4581      	cmp	r9, r0
 802019c:	d02c      	beq.n	80201f8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x218>
 802019e:	8802      	ldrh	r2, [r0, #0]
 80201a0:	9d04      	ldr	r5, [sp, #16]
 80201a2:	1216      	asrs	r6, r2, #8
 80201a4:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 80201a8:	fb16 f605 	smulbb	r6, r6, r5
 80201ac:	9d08      	ldr	r5, [sp, #32]
 80201ae:	9f04      	ldr	r7, [sp, #16]
 80201b0:	442e      	add	r6, r5
 80201b2:	10d5      	asrs	r5, r2, #3
 80201b4:	00d2      	lsls	r2, r2, #3
 80201b6:	b2d2      	uxtb	r2, r2
 80201b8:	fb12 f207 	smulbb	r2, r2, r7
 80201bc:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 80201c0:	fb15 f507 	smulbb	r5, r5, r7
 80201c4:	b2b6      	uxth	r6, r6
 80201c6:	4462      	add	r2, ip
 80201c8:	b292      	uxth	r2, r2
 80201ca:	1c77      	adds	r7, r6, #1
 80201cc:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 80201d0:	1c57      	adds	r7, r2, #1
 80201d2:	445d      	add	r5, fp
 80201d4:	eb07 2212 	add.w	r2, r7, r2, lsr #8
 80201d8:	b2ad      	uxth	r5, r5
 80201da:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80201de:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 80201e2:	4316      	orrs	r6, r2
 80201e4:	1c6a      	adds	r2, r5, #1
 80201e6:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 80201ea:	096d      	lsrs	r5, r5, #5
 80201ec:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80201f0:	432e      	orrs	r6, r5
 80201f2:	f820 6b02 	strh.w	r6, [r0], #2
 80201f6:	e7d0      	b.n	802019a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ba>
 80201f8:	4573      	cmp	r3, lr
 80201fa:	d38d      	bcc.n	8020118 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x138>
 80201fc:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8020200:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020202:	fa1f f188 	uxth.w	r1, r8
 8020206:	1a64      	subs	r4, r4, r1
 8020208:	881b      	ldrh	r3, [r3, #0]
 802020a:	b2a4      	uxth	r4, r4
 802020c:	2c00      	cmp	r4, #0
 802020e:	eba3 0308 	sub.w	r3, r3, r8
 8020212:	bf18      	it	ne
 8020214:	2100      	movne	r1, #0
 8020216:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802021a:	e77d      	b.n	8020118 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x138>
 802021c:	4b03      	ldr	r3, [pc, #12]	@ (802022c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
 802021e:	6818      	ldr	r0, [r3, #0]
 8020220:	6803      	ldr	r3, [r0, #0]
 8020222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020224:	4798      	blx	r3
 8020226:	b00f      	add	sp, #60	@ 0x3c
 8020228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802022c:	2005ba7c 	.word	0x2005ba7c
 8020230:	2005ba76 	.word	0x2005ba76

08020234 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 8020234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020238:	b09f      	sub	sp, #124	@ 0x7c
 802023a:	e9cd 1213 	strd	r1, r2, [sp, #76]	@ 0x4c
 802023e:	f89d 20a4 	ldrb.w	r2, [sp, #164]	@ 0xa4
 8020242:	461d      	mov	r5, r3
 8020244:	4604      	mov	r4, r0
 8020246:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8020248:	9209      	str	r2, [sp, #36]	@ 0x24
 802024a:	2a00      	cmp	r2, #0
 802024c:	f000 81e9 	beq.w	8020622 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3ee>
 8020250:	6828      	ldr	r0, [r5, #0]
 8020252:	6869      	ldr	r1, [r5, #4]
 8020254:	aa1a      	add	r2, sp, #104	@ 0x68
 8020256:	c203      	stmia	r2!, {r0, r1}
 8020258:	6818      	ldr	r0, [r3, #0]
 802025a:	6859      	ldr	r1, [r3, #4]
 802025c:	aa1c      	add	r2, sp, #112	@ 0x70
 802025e:	c203      	stmia	r2!, {r0, r1}
 8020260:	a81a      	add	r0, sp, #104	@ 0x68
 8020262:	f7f9 f8fb 	bl	801945c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020266:	4629      	mov	r1, r5
 8020268:	a81c      	add	r0, sp, #112	@ 0x70
 802026a:	f7f9 f91f 	bl	80194ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802026e:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 8020272:	f9bd 806e 	ldrsh.w	r8, [sp, #110]	@ 0x6e
 8020276:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 802027a:	bfdd      	ittte	le
 802027c:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8020280:	b29a      	uxthle	r2, r3
 8020282:	fb91 f2f2 	sdivle	r2, r1, r2
 8020286:	2201      	movgt	r2, #1
 8020288:	9202      	str	r2, [sp, #8]
 802028a:	9802      	ldr	r0, [sp, #8]
 802028c:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	@ 0x72
 8020290:	9902      	ldr	r1, [sp, #8]
 8020292:	fb92 f0f0 	sdiv	r0, r2, r0
 8020296:	b280      	uxth	r0, r0
 8020298:	9010      	str	r0, [sp, #64]	@ 0x40
 802029a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 802029c:	9802      	ldr	r0, [sp, #8]
 802029e:	4488      	add	r8, r1
 80202a0:	fb05 2510 	mls	r5, r5, r0, r2
 80202a4:	fb15 f503 	smulbb	r5, r5, r3
 80202a8:	f108 38ff 	add.w	r8, r8, #4294967295
 80202ac:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 80202b0:	fb98 f8f1 	sdiv	r8, r8, r1
 80202b4:	f8bd 1070 	ldrh.w	r1, [sp, #112]	@ 0x70
 80202b8:	f9bd 6076 	ldrsh.w	r6, [sp, #118]	@ 0x76
 80202bc:	440d      	add	r5, r1
 80202be:	4419      	add	r1, r3
 80202c0:	f8bd 306a 	ldrh.w	r3, [sp, #106]	@ 0x6a
 80202c4:	f8ad 1070 	strh.w	r1, [sp, #112]	@ 0x70
 80202c8:	441a      	add	r2, r3
 80202ca:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	@ 0x74
 80202ce:	f8ad 2072 	strh.w	r2, [sp, #114]	@ 0x72
 80202d2:	9304      	str	r3, [sp, #16]
 80202d4:	4b93      	ldr	r3, [pc, #588]	@ (8020524 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2f0>)
 80202d6:	f108 0801 	add.w	r8, r8, #1
 80202da:	6818      	ldr	r0, [r3, #0]
 80202dc:	fa1f f888 	uxth.w	r8, r8
 80202e0:	6803      	ldr	r3, [r0, #0]
 80202e2:	b2ad      	uxth	r5, r5
 80202e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80202e6:	4798      	blx	r3
 80202e8:	4b8f      	ldr	r3, [pc, #572]	@ (8020528 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2f4>)
 80202ea:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	@ 0x72
 80202ee:	881a      	ldrh	r2, [r3, #0]
 80202f0:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	@ 0x70
 80202f4:	4356      	muls	r6, r2
 80202f6:	fb02 7101 	mla	r1, r2, r1, r7
 80202fa:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80202fe:	eb00 0246 	add.w	r2, r0, r6, lsl #1
 8020302:	920a      	str	r2, [sp, #40]	@ 0x28
 8020304:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020306:	2d00      	cmp	r5, #0
 8020308:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 802030c:	f108 0204 	add.w	r2, r8, #4
 8020310:	9211      	str	r2, [sp, #68]	@ 0x44
 8020312:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020314:	f04f 0100 	mov.w	r1, #0
 8020318:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 802031c:	9215      	str	r2, [sp, #84]	@ 0x54
 802031e:	9a04      	ldr	r2, [sp, #16]
 8020320:	bf18      	it	ne
 8020322:	2200      	movne	r2, #0
 8020324:	9318      	str	r3, [sp, #96]	@ 0x60
 8020326:	f8bd 3024 	ldrh.w	r3, [sp, #36]	@ 0x24
 802032a:	b292      	uxth	r2, r2
 802032c:	930f      	str	r3, [sp, #60]	@ 0x3c
 802032e:	4b7f      	ldr	r3, [pc, #508]	@ (802052c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2f8>)
 8020330:	910d      	str	r1, [sp, #52]	@ 0x34
 8020332:	1b1b      	subs	r3, r3, r4
 8020334:	9319      	str	r3, [sp, #100]	@ 0x64
 8020336:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8020338:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802033a:	fa11 f383 	uxtah	r3, r1, r3
 802033e:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8020340:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8020344:	3304      	adds	r3, #4
 8020346:	9306      	str	r3, [sp, #24]
 8020348:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802034a:	4283      	cmp	r3, r0
 802034c:	f240 8164 	bls.w	8020618 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3e4>
 8020350:	f8bd 306c 	ldrh.w	r3, [sp, #108]	@ 0x6c
 8020354:	f04f 0a01 	mov.w	sl, #1
 8020358:	fbb5 f3f3 	udiv	r3, r5, r3
 802035c:	9902      	ldr	r1, [sp, #8]
 802035e:	9e06      	ldr	r6, [sp, #24]
 8020360:	1acb      	subs	r3, r1, r3
 8020362:	b29b      	uxth	r3, r3
 8020364:	9316      	str	r3, [sp, #88]	@ 0x58
 8020366:	9b06      	ldr	r3, [sp, #24]
 8020368:	7836      	ldrb	r6, [r6, #0]
 802036a:	7859      	ldrb	r1, [r3, #1]
 802036c:	789b      	ldrb	r3, [r3, #2]
 802036e:	9612      	str	r6, [sp, #72]	@ 0x48
 8020370:	021b      	lsls	r3, r3, #8
 8020372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020376:	9906      	ldr	r1, [sp, #24]
 8020378:	3601      	adds	r6, #1
 802037a:	78c9      	ldrb	r1, [r1, #3]
 802037c:	9605      	str	r6, [sp, #20]
 802037e:	430b      	orrs	r3, r1
 8020380:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8020382:	46d3      	mov	fp, sl
 8020384:	4419      	add	r1, r3
 8020386:	1c4e      	adds	r6, r1, #1
 8020388:	9603      	str	r6, [sp, #12]
 802038a:	7849      	ldrb	r1, [r1, #1]
 802038c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 802038e:	0209      	lsls	r1, r1, #8
 8020390:	5cf3      	ldrb	r3, [r6, r3]
 8020392:	f401 71ff 	and.w	r1, r1, #510	@ 0x1fe
 8020396:	4319      	orrs	r1, r3
 8020398:	b28b      	uxth	r3, r1
 802039a:	930c      	str	r3, [sp, #48]	@ 0x30
 802039c:	2300      	movs	r3, #0
 802039e:	4657      	mov	r7, sl
 80203a0:	9307      	str	r3, [sp, #28]
 80203a2:	469c      	mov	ip, r3
 80203a4:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 80203a8:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 80203ac:	930e      	str	r3, [sp, #56]	@ 0x38
 80203ae:	2d00      	cmp	r5, #0
 80203b0:	d07e      	beq.n	80204b0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x27c>
 80203b2:	42af      	cmp	r7, r5
 80203b4:	d26e      	bcs.n	8020494 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x260>
 80203b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80203b8:	1bed      	subs	r5, r5, r7
 80203ba:	4283      	cmp	r3, r0
 80203bc:	b2ad      	uxth	r5, r5
 80203be:	9201      	str	r2, [sp, #4]
 80203c0:	d802      	bhi.n	80203c8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x194>
 80203c2:	e073      	b.n	80204ac <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x278>
 80203c4:	2b00      	cmp	r3, #0
 80203c6:	d15f      	bne.n	8020488 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x254>
 80203c8:	9b03      	ldr	r3, [sp, #12]
 80203ca:	f1cb 0207 	rsb	r2, fp, #7
 80203ce:	785b      	ldrb	r3, [r3, #1]
 80203d0:	4093      	lsls	r3, r2
 80203d2:	005b      	lsls	r3, r3, #1
 80203d4:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 80203d8:	9b03      	ldr	r3, [sp, #12]
 80203da:	781b      	ldrb	r3, [r3, #0]
 80203dc:	fa43 f30b 	asr.w	r3, r3, fp
 80203e0:	b2db      	uxtb	r3, r3
 80203e2:	4313      	orrs	r3, r2
 80203e4:	f10b 0201 	add.w	r2, fp, #1
 80203e8:	fa5f fb82 	uxtb.w	fp, r2
 80203ec:	9a03      	ldr	r2, [sp, #12]
 80203ee:	f1bb 0f08 	cmp.w	fp, #8
 80203f2:	bf15      	itete	ne
 80203f4:	3201      	addne	r2, #1
 80203f6:	3202      	addeq	r2, #2
 80203f8:	9203      	strne	r2, [sp, #12]
 80203fa:	9203      	streq	r2, [sp, #12]
 80203fc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80203fe:	b29f      	uxth	r7, r3
 8020400:	bf08      	it	eq
 8020402:	f04f 0b00 	moveq.w	fp, #0
 8020406:	42ba      	cmp	r2, r7
 8020408:	d309      	bcc.n	802041e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ea>
 802040a:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 802040e:	2301      	movs	r3, #1
 8020410:	9a05      	ldr	r2, [sp, #20]
 8020412:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8020416:	d30e      	bcc.n	8020436 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x202>
 8020418:	469a      	mov	sl, r3
 802041a:	2600      	movs	r6, #0
 802041c:	e035      	b.n	802048a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x256>
 802041e:	9b05      	ldr	r3, [sp, #20]
 8020420:	429f      	cmp	r7, r3
 8020422:	d318      	bcc.n	8020456 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x222>
 8020424:	f894 2804 	ldrb.w	r2, [r4, #2052]	@ 0x804
 8020428:	eb04 030a 	add.w	r3, r4, sl
 802042c:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 8020430:	f10a 0301 	add.w	r3, sl, #1
 8020434:	b29b      	uxth	r3, r3
 8020436:	9a05      	ldr	r2, [sp, #20]
 8020438:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 802043c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8020440:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8020442:	7116      	strb	r6, [r2, #4]
 8020444:	f10a 0601 	add.w	r6, sl, #1
 8020448:	80d1      	strh	r1, [r2, #6]
 802044a:	7156      	strb	r6, [r2, #5]
 802044c:	9a05      	ldr	r2, [sp, #20]
 802044e:	3201      	adds	r2, #1
 8020450:	b292      	uxth	r2, r2
 8020452:	9205      	str	r2, [sp, #20]
 8020454:	e7e0      	b.n	8020418 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e4>
 8020456:	463a      	mov	r2, r7
 8020458:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 802045c:	795b      	ldrb	r3, [r3, #5]
 802045e:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 8020462:	4426      	add	r6, r4
 8020464:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8020466:	eb01 0c06 	add.w	ip, r1, r6
 802046a:	f1bc 0f00 	cmp.w	ip, #0
 802046e:	dd07      	ble.n	8020480 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>
 8020470:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8020474:	f892 c004 	ldrb.w	ip, [r2, #4]
 8020478:	f806 cd01 	strb.w	ip, [r6, #-1]!
 802047c:	88d2      	ldrh	r2, [r2, #6]
 802047e:	e7f1      	b.n	8020464 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x230>
 8020480:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 8020484:	b29b      	uxth	r3, r3
 8020486:	e7c3      	b.n	8020410 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1dc>
 8020488:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 802048a:	970c      	str	r7, [sp, #48]	@ 0x30
 802048c:	9a01      	ldr	r2, [sp, #4]
 802048e:	46b4      	mov	ip, r6
 8020490:	461f      	mov	r7, r3
 8020492:	e78c      	b.n	80203ae <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x17a>
 8020494:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8020498:	1b7b      	subs	r3, r7, r5
 802049a:	eb0c 0605 	add.w	r6, ip, r5
 802049e:	b29b      	uxth	r3, r3
 80204a0:	9201      	str	r2, [sp, #4]
 80204a2:	b2b6      	uxth	r6, r6
 80204a4:	2500      	movs	r5, #0
 80204a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80204a8:	4282      	cmp	r2, r0
 80204aa:	d88b      	bhi.n	80203c4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x190>
 80204ac:	9a01      	ldr	r2, [sp, #4]
 80204ae:	e74b      	b.n	8020348 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x114>
 80204b0:	4297      	cmp	r7, r2
 80204b2:	d331      	bcc.n	8020518 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2e4>
 80204b4:	1abb      	subs	r3, r7, r2
 80204b6:	b29b      	uxth	r3, r3
 80204b8:	9208      	str	r2, [sp, #32]
 80204ba:	9501      	str	r5, [sp, #4]
 80204bc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80204be:	29ff      	cmp	r1, #255	@ 0xff
 80204c0:	9908      	ldr	r1, [sp, #32]
 80204c2:	eb0c 0601 	add.w	r6, ip, r1
 80204c6:	d133      	bne.n	8020530 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2fc>
 80204c8:	f1a0 0e02 	sub.w	lr, r0, #2
 80204cc:	b2b6      	uxth	r6, r6
 80204ce:	45b4      	cmp	ip, r6
 80204d0:	f040 808a 	bne.w	80205e8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3b4>
 80204d4:	9908      	ldr	r1, [sp, #32]
 80204d6:	4297      	cmp	r7, r2
 80204d8:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80204dc:	d3e2      	bcc.n	80204a4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x270>
 80204de:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80204e0:	9904      	ldr	r1, [sp, #16]
 80204e2:	8812      	ldrh	r2, [r2, #0]
 80204e4:	1a52      	subs	r2, r2, r1
 80204e6:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80204ea:	9a07      	ldr	r2, [sp, #28]
 80204ec:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80204ee:	3201      	adds	r2, #1
 80204f0:	428a      	cmp	r2, r1
 80204f2:	9207      	str	r2, [sp, #28]
 80204f4:	f040 8085 	bne.w	8020602 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3ce>
 80204f8:	f8bd 5070 	ldrh.w	r5, [sp, #112]	@ 0x70
 80204fc:	f8bd 7068 	ldrh.w	r7, [sp, #104]	@ 0x68
 8020500:	9b04      	ldr	r3, [sp, #16]
 8020502:	1bed      	subs	r5, r5, r7
 8020504:	b2ad      	uxth	r5, r5
 8020506:	2d00      	cmp	r5, #0
 8020508:	bf0c      	ite	eq
 802050a:	461a      	moveq	r2, r3
 802050c:	2200      	movne	r2, #0
 802050e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020510:	b292      	uxth	r2, r2
 8020512:	3301      	adds	r3, #1
 8020514:	930d      	str	r3, [sp, #52]	@ 0x34
 8020516:	e70e      	b.n	8020336 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x102>
 8020518:	1bd1      	subs	r1, r2, r7
 802051a:	b28b      	uxth	r3, r1
 802051c:	9301      	str	r3, [sp, #4]
 802051e:	9708      	str	r7, [sp, #32]
 8020520:	462b      	mov	r3, r5
 8020522:	e7cb      	b.n	80204bc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x288>
 8020524:	2005ba7c 	.word	0x2005ba7c
 8020528:	2005ba76 	.word	0x2005ba76
 802052c:	fffff7fb 	.word	0xfffff7fb
 8020530:	b2b6      	uxth	r6, r6
 8020532:	900b      	str	r0, [sp, #44]	@ 0x2c
 8020534:	45b4      	cmp	ip, r6
 8020536:	d0cd      	beq.n	80204d4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2a0>
 8020538:	f10c 0101 	add.w	r1, ip, #1
 802053c:	44a4      	add	ip, r4
 802053e:	f89c 5804 	ldrb.w	r5, [ip, #2052]	@ 0x804
 8020542:	9117      	str	r1, [sp, #92]	@ 0x5c
 8020544:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8020546:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
 802054a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802054c:	ea4f 2825 	mov.w	r8, r5, asr #8
 8020550:	f8b1 c000 	ldrh.w	ip, [r1]
 8020554:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8020556:	ea4f 2e2c 	mov.w	lr, ip, asr #8
 802055a:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 802055e:	fb1e fe01 	smulbb	lr, lr, r1
 8020562:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8020564:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 8020568:	fb08 e801 	mla	r8, r8, r1, lr
 802056c:	ea4f 09ec 	mov.w	r9, ip, asr #3
 8020570:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8020572:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 8020576:	fb19 f901 	smulbb	r9, r9, r1
 802057a:	ea4f 0ee5 	mov.w	lr, r5, asr #3
 802057e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8020580:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8020584:	fb0e 9e01 	mla	lr, lr, r1, r9
 8020588:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802058c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802058e:	fa5f fc8c 	uxtb.w	ip, ip
 8020592:	fb1c fc01 	smulbb	ip, ip, r1
 8020596:	00ed      	lsls	r5, r5, #3
 8020598:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802059a:	b2ed      	uxtb	r5, r5
 802059c:	fb05 c501 	mla	r5, r5, r1, ip
 80205a0:	fa1f f888 	uxth.w	r8, r8
 80205a4:	fa1f fe8e 	uxth.w	lr, lr
 80205a8:	b2ad      	uxth	r5, r5
 80205aa:	f108 0c01 	add.w	ip, r8, #1
 80205ae:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 80205b2:	f10e 0901 	add.w	r9, lr, #1
 80205b6:	f105 0c01 	add.w	ip, r5, #1
 80205ba:	eb0c 2c15 	add.w	ip, ip, r5, lsr #8
 80205be:	eb09 291e 	add.w	r9, r9, lr, lsr #8
 80205c2:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80205c6:	f408 4878 	and.w	r8, r8, #63488	@ 0xf800
 80205ca:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80205ce:	ea4c 0808 	orr.w	r8, ip, r8
 80205d2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80205d4:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 80205d8:	ea48 0809 	orr.w	r8, r8, r9
 80205dc:	f821 8b02 	strh.w	r8, [r1], #2
 80205e0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80205e2:	f8bd c05c 	ldrh.w	ip, [sp, #92]	@ 0x5c
 80205e6:	e7a5      	b.n	8020534 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x300>
 80205e8:	f10c 0801 	add.w	r8, ip, #1
 80205ec:	44a4      	add	ip, r4
 80205ee:	f89c 5804 	ldrb.w	r5, [ip, #2052]	@ 0x804
 80205f2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80205f4:	fa1f fc88 	uxth.w	ip, r8
 80205f8:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
 80205fc:	f82e 5f02 	strh.w	r5, [lr, #2]!
 8020600:	e765      	b.n	80204ce <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x29a>
 8020602:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8020606:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 802060a:	1aad      	subs	r5, r5, r2
 802060c:	b2ad      	uxth	r5, r5
 802060e:	2d00      	cmp	r5, #0
 8020610:	bf18      	it	ne
 8020612:	2200      	movne	r2, #0
 8020614:	9201      	str	r2, [sp, #4]
 8020616:	e746      	b.n	80204a6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x272>
 8020618:	4b03      	ldr	r3, [pc, #12]	@ (8020628 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3f4>)
 802061a:	6818      	ldr	r0, [r3, #0]
 802061c:	6803      	ldr	r3, [r0, #0]
 802061e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020620:	4798      	blx	r3
 8020622:	b01f      	add	sp, #124	@ 0x7c
 8020624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020628:	2005ba7c 	.word	0x2005ba7c

0802062c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h>:
 802062c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020630:	b093      	sub	sp, #76	@ 0x4c
 8020632:	4616      	mov	r6, r2
 8020634:	f89d 2070 	ldrb.w	r2, [sp, #112]	@ 0x70
 8020638:	9003      	str	r0, [sp, #12]
 802063a:	460d      	mov	r5, r1
 802063c:	9201      	str	r2, [sp, #4]
 802063e:	2a00      	cmp	r2, #0
 8020640:	f000 8304 	beq.w	8020c4c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x620>
 8020644:	6830      	ldr	r0, [r6, #0]
 8020646:	6871      	ldr	r1, [r6, #4]
 8020648:	ac0e      	add	r4, sp, #56	@ 0x38
 802064a:	c403      	stmia	r4!, {r0, r1}
 802064c:	6818      	ldr	r0, [r3, #0]
 802064e:	6859      	ldr	r1, [r3, #4]
 8020650:	ac10      	add	r4, sp, #64	@ 0x40
 8020652:	c403      	stmia	r4!, {r0, r1}
 8020654:	a80e      	add	r0, sp, #56	@ 0x38
 8020656:	f7f8 ff01 	bl	801945c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802065a:	4631      	mov	r1, r6
 802065c:	a810      	add	r0, sp, #64	@ 0x40
 802065e:	f7f8 ff25 	bl	80194ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020662:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 8020666:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 802066a:	bfdd      	ittte	le
 802066c:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8020670:	b293      	uxthle	r3, r2
 8020672:	fb91 f3f3 	sdivle	r3, r1, r3
 8020676:	2301      	movgt	r3, #1
 8020678:	9304      	str	r3, [sp, #16]
 802067a:	f105 0308 	add.w	r3, r5, #8
 802067e:	9904      	ldr	r1, [sp, #16]
 8020680:	9308      	str	r3, [sp, #32]
 8020682:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 8020686:	440b      	add	r3, r1
 8020688:	3b01      	subs	r3, #1
 802068a:	fb93 f3f1 	sdiv	r3, r3, r1
 802068e:	9908      	ldr	r1, [sp, #32]
 8020690:	3b01      	subs	r3, #1
 8020692:	b29b      	uxth	r3, r3
 8020694:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8020698:	9309      	str	r3, [sp, #36]	@ 0x24
 802069a:	9904      	ldr	r1, [sp, #16]
 802069c:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 80206a0:	fb93 f0f1 	sdiv	r0, r3, r1
 80206a4:	b284      	uxth	r4, r0
 80206a6:	9405      	str	r4, [sp, #20]
 80206a8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80206ac:	fb05 3914 	mls	r9, r5, r4, r3
 80206b0:	fb19 f902 	smulbb	r9, r9, r2
 80206b4:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 80206b8:	4489      	add	r9, r1
 80206ba:	fa1f f989 	uxth.w	r9, r9
 80206be:	2d00      	cmp	r5, #0
 80206c0:	d05d      	beq.n	802077e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x152>
 80206c2:	9808      	ldr	r0, [sp, #32]
 80206c4:	1e6a      	subs	r2, r5, #1
 80206c6:	f850 a022 	ldr.w	sl, [r0, r2, lsl #2]
 80206ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80206cc:	fa9a fa8a 	rev.w	sl, sl
 80206d0:	4492      	add	sl, r2
 80206d2:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 80206d6:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 80206da:	4411      	add	r1, r2
 80206dc:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 80206e0:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 80206e4:	4413      	add	r3, r2
 80206e6:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 80206ea:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 80206ee:	f04f 0600 	mov.w	r6, #0
 80206f2:	9302      	str	r3, [sp, #8]
 80206f4:	4bca      	ldr	r3, [pc, #808]	@ (8020a20 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3f4>)
 80206f6:	6818      	ldr	r0, [r3, #0]
 80206f8:	6803      	ldr	r3, [r0, #0]
 80206fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80206fc:	4798      	blx	r3
 80206fe:	4bc9      	ldr	r3, [pc, #804]	@ (8020a24 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3f8>)
 8020700:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 8020704:	881b      	ldrh	r3, [r3, #0]
 8020706:	f9bd 4042 	ldrsh.w	r4, [sp, #66]	@ 0x42
 802070a:	2100      	movs	r1, #0
 802070c:	fb03 2404 	mla	r4, r3, r4, r2
 8020710:	436b      	muls	r3, r5
 8020712:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8020716:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 802071a:	930d      	str	r3, [sp, #52]	@ 0x34
 802071c:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 8020720:	2280      	movs	r2, #128	@ 0x80
 8020722:	fb99 f3f3 	sdiv	r3, r9, r3
 8020726:	9306      	str	r3, [sp, #24]
 8020728:	9b01      	ldr	r3, [sp, #4]
 802072a:	43db      	mvns	r3, r3
 802072c:	b2db      	uxtb	r3, r3
 802072e:	930a      	str	r3, [sp, #40]	@ 0x28
 8020730:	9b03      	ldr	r3, [sp, #12]
 8020732:	3304      	adds	r3, #4
 8020734:	4618      	mov	r0, r3
 8020736:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020738:	f00c fca8 	bl	802d08c <memset>
 802073c:	4bba      	ldr	r3, [pc, #744]	@ (8020a28 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3fc>)
 802073e:	9300      	str	r3, [sp, #0]
 8020740:	2300      	movs	r3, #0
 8020742:	9307      	str	r3, [sp, #28]
 8020744:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020746:	42a3      	cmp	r3, r4
 8020748:	f240 827b 	bls.w	8020c42 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x616>
 802074c:	f04f 0e07 	mov.w	lr, #7
 8020750:	f1b9 0f00 	cmp.w	r9, #0
 8020754:	f000 8159 	beq.w	8020a0a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3de>
 8020758:	f89a 5000 	ldrb.w	r5, [sl]
 802075c:	f10a 0701 	add.w	r7, sl, #1
 8020760:	b2ed      	uxtb	r5, r5
 8020762:	11aa      	asrs	r2, r5, #6
 8020764:	d10e      	bne.n	8020784 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x158>
 8020766:	9b03      	ldr	r3, [sp, #12]
 8020768:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
 802076c:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8020770:	88ae      	ldrh	r6, [r5, #4]
 8020772:	f109 39ff 	add.w	r9, r9, #4294967295
 8020776:	fa1f f989 	uxth.w	r9, r9
 802077a:	46ba      	mov	sl, r7
 802077c:	e7e8      	b.n	8020750 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x124>
 802077e:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 8020782:	e7a6      	b.n	80206d2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0xa6>
 8020784:	2a01      	cmp	r2, #1
 8020786:	d129      	bne.n	80207dc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x1b0>
 8020788:	2103      	movs	r1, #3
 802078a:	f3c6 0304 	ubfx	r3, r6, #0, #5
 802078e:	f005 0203 	and.w	r2, r5, #3
 8020792:	3b02      	subs	r3, #2
 8020794:	4413      	add	r3, r2
 8020796:	f003 031f 	and.w	r3, r3, #31
 802079a:	f3c5 0281 	ubfx	r2, r5, #2, #2
 802079e:	f363 0604 	bfi	r6, r3, #0, #5
 80207a2:	3a02      	subs	r2, #2
 80207a4:	eb02 1256 	add.w	r2, r2, r6, lsr #5
 80207a8:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80207ac:	f3c5 1501 	ubfx	r5, r5, #4, #2
 80207b0:	f362 164a 	bfi	r6, r2, #5, #6
 80207b4:	3d02      	subs	r5, #2
 80207b6:	eb05 25d6 	add.w	r5, r5, r6, lsr #11
 80207ba:	f005 051f 	and.w	r5, r5, #31
 80207be:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80207c2:	fb11 2205 	smlabb	r2, r1, r5, r2
 80207c6:	fb1e 2303 	smlabb	r3, lr, r3, r2
 80207ca:	9a03      	ldr	r2, [sp, #12]
 80207cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80207d0:	f365 26cf 	bfi	r6, r5, #11, #5
 80207d4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80207d8:	809e      	strh	r6, [r3, #4]
 80207da:	e7ca      	b.n	8020772 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x146>
 80207dc:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
 80207e0:	2a02      	cmp	r2, #2
 80207e2:	b2ab      	uxth	r3, r5
 80207e4:	d136      	bne.n	8020854 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x228>
 80207e6:	2101      	movs	r1, #1
 80207e8:	fb12 1205 	smlabb	r2, r2, r5, r1
 80207ec:	4492      	add	sl, r2
 80207ee:	463a      	mov	r2, r7
 80207f0:	4552      	cmp	r2, sl
 80207f2:	d01c      	beq.n	802082e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x202>
 80207f4:	4694      	mov	ip, r2
 80207f6:	f04f 0b03 	mov.w	fp, #3
 80207fa:	f81c 1b02 	ldrb.w	r1, [ip], #2
 80207fe:	7852      	ldrb	r2, [r2, #1]
 8020800:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8020804:	f3c1 1045 	ubfx	r0, r1, #5, #6
 8020808:	ea4f 28d1 	mov.w	r8, r1, lsr #11
 802080c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8020810:	fb1b 0008 	smlabb	r0, fp, r8, r0
 8020814:	f001 021f 	and.w	r2, r1, #31
 8020818:	fb1e 0002 	smlabb	r0, lr, r2, r0
 802081c:	9a03      	ldr	r2, [sp, #12]
 802081e:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 8020822:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8020826:	460e      	mov	r6, r1
 8020828:	8081      	strh	r1, [r0, #4]
 802082a:	4662      	mov	r2, ip
 802082c:	e7e0      	b.n	80207f0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x1c4>
 802082e:	4599      	cmp	r9, r3
 8020830:	d20b      	bcs.n	802084a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x21e>
 8020832:	eba5 0509 	sub.w	r5, r5, r9
 8020836:	2d00      	cmp	r5, #0
 8020838:	eb07 0749 	add.w	r7, r7, r9, lsl #1
 802083c:	f300 8209 	bgt.w	8020c52 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x626>
 8020840:	2301      	movs	r3, #1
 8020842:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8020846:	9307      	str	r3, [sp, #28]
 8020848:	e00c      	b.n	8020864 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 802084a:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 802084e:	eba9 0903 	sub.w	r9, r9, r3
 8020852:	e790      	b.n	8020776 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x14a>
 8020854:	4599      	cmp	r9, r3
 8020856:	d2fa      	bcs.n	802084e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x222>
 8020858:	eba5 0509 	sub.w	r5, r5, r9
 802085c:	2d00      	cmp	r5, #0
 802085e:	dc1d      	bgt.n	802089c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x270>
 8020860:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8020864:	f04f 0b00 	mov.w	fp, #0
 8020868:	f1b8 0f00 	cmp.w	r8, #0
 802086c:	f340 81a1 	ble.w	8020bb2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x586>
 8020870:	783b      	ldrb	r3, [r7, #0]
 8020872:	f107 0a01 	add.w	sl, r7, #1
 8020876:	b2db      	uxtb	r3, r3
 8020878:	119a      	asrs	r2, r3, #6
 802087a:	f040 80d7 	bne.w	8020a2c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x400>
 802087e:	9a03      	ldr	r2, [sp, #12]
 8020880:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8020884:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020888:	889e      	ldrh	r6, [r3, #4]
 802088a:	9b01      	ldr	r3, [sp, #4]
 802088c:	2bff      	cmp	r3, #255	@ 0xff
 802088e:	f040 81e9 	bne.w	8020c64 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x638>
 8020892:	8026      	strh	r6, [r4, #0]
 8020894:	f108 38ff 	add.w	r8, r8, #4294967295
 8020898:	3402      	adds	r4, #2
 802089a:	e0be      	b.n	8020a1a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ee>
 802089c:	9b02      	ldr	r3, [sp, #8]
 802089e:	9a02      	ldr	r2, [sp, #8]
 80208a0:	42ab      	cmp	r3, r5
 80208a2:	bfa8      	it	ge
 80208a4:	462b      	movge	r3, r5
 80208a6:	eba2 0803 	sub.w	r8, r2, r3
 80208aa:	9a07      	ldr	r2, [sp, #28]
 80208ac:	1aed      	subs	r5, r5, r3
 80208ae:	2a00      	cmp	r2, #0
 80208b0:	d05a      	beq.n	8020968 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x33c>
 80208b2:	9a01      	ldr	r2, [sp, #4]
 80208b4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80208b8:	2aff      	cmp	r2, #255	@ 0xff
 80208ba:	d049      	beq.n	8020950 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x324>
 80208bc:	f8bd e004 	ldrh.w	lr, [sp, #4]
 80208c0:	f8bd 9028 	ldrh.w	r9, [sp, #40]	@ 0x28
 80208c4:	42a3      	cmp	r3, r4
 80208c6:	f240 80a5 	bls.w	8020a14 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3e8>
 80208ca:	46bc      	mov	ip, r7
 80208cc:	8820      	ldrh	r0, [r4, #0]
 80208ce:	f81c 2b02 	ldrb.w	r2, [ip], #2
 80208d2:	7879      	ldrb	r1, [r7, #1]
 80208d4:	ea4f 2a20 	mov.w	sl, r0, asr #8
 80208d8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80208dc:	f00a 0af8 	and.w	sl, sl, #248	@ 0xf8
 80208e0:	b212      	sxth	r2, r2
 80208e2:	fb1a fa09 	smulbb	sl, sl, r9
 80208e6:	b291      	uxth	r1, r2
 80208e8:	120f      	asrs	r7, r1, #8
 80208ea:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 80208ee:	fb07 a70e 	mla	r7, r7, lr, sl
 80208f2:	ea4f 0ae0 	mov.w	sl, r0, asr #3
 80208f6:	00c0      	lsls	r0, r0, #3
 80208f8:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 80208fc:	b2c0      	uxtb	r0, r0
 80208fe:	fb1a fa09 	smulbb	sl, sl, r9
 8020902:	fb10 f009 	smulbb	r0, r0, r9
 8020906:	10c9      	asrs	r1, r1, #3
 8020908:	00d2      	lsls	r2, r2, #3
 802090a:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 802090e:	b2d2      	uxtb	r2, r2
 8020910:	fb01 a10e 	mla	r1, r1, lr, sl
 8020914:	fb02 020e 	mla	r2, r2, lr, r0
 8020918:	b2bf      	uxth	r7, r7
 802091a:	b289      	uxth	r1, r1
 802091c:	b292      	uxth	r2, r2
 802091e:	1c78      	adds	r0, r7, #1
 8020920:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8020924:	f101 0a01 	add.w	sl, r1, #1
 8020928:	1c50      	adds	r0, r2, #1
 802092a:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 802092e:	eb0a 2a11 	add.w	sl, sl, r1, lsr #8
 8020932:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 8020936:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802093a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 802093e:	4307      	orrs	r7, r0
 8020940:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8020944:	ea47 070a 	orr.w	r7, r7, sl
 8020948:	f824 7b02 	strh.w	r7, [r4], #2
 802094c:	4667      	mov	r7, ip
 802094e:	e7b9      	b.n	80208c4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x298>
 8020950:	42a3      	cmp	r3, r4
 8020952:	d95f      	bls.n	8020a14 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3e8>
 8020954:	463a      	mov	r2, r7
 8020956:	f812 1b02 	ldrb.w	r1, [r2], #2
 802095a:	7878      	ldrb	r0, [r7, #1]
 802095c:	4617      	mov	r7, r2
 802095e:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8020962:	f824 1b02 	strh.w	r1, [r4], #2
 8020966:	e7f3      	b.n	8020950 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x324>
 8020968:	9901      	ldr	r1, [sp, #4]
 802096a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 802096e:	29ff      	cmp	r1, #255	@ 0xff
 8020970:	b2b2      	uxth	r2, r6
 8020972:	d044      	beq.n	80209fe <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3d2>
 8020974:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8020978:	ea4f 2922 	mov.w	r9, r2, asr #8
 802097c:	4608      	mov	r0, r1
 802097e:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 8020982:	f009 09f8 	and.w	r9, r9, #248	@ 0xf8
 8020986:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 802098a:	fb09 f901 	mul.w	r9, r9, r1
 802098e:	fb0e fe01 	mul.w	lr, lr, r1
 8020992:	00d1      	lsls	r1, r2, #3
 8020994:	b2c9      	uxtb	r1, r1
 8020996:	4341      	muls	r1, r0
 8020998:	f8bd a028 	ldrh.w	sl, [sp, #40]	@ 0x28
 802099c:	429c      	cmp	r4, r3
 802099e:	f4bf af61 	bcs.w	8020864 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 80209a2:	8822      	ldrh	r2, [r4, #0]
 80209a4:	1210      	asrs	r0, r2, #8
 80209a6:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 80209aa:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 80209ae:	00d2      	lsls	r2, r2, #3
 80209b0:	fb00 900a 	mla	r0, r0, sl, r9
 80209b4:	b2d2      	uxtb	r2, r2
 80209b6:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 80209ba:	fb02 120a 	mla	r2, r2, sl, r1
 80209be:	fb0c ec0a 	mla	ip, ip, sl, lr
 80209c2:	b280      	uxth	r0, r0
 80209c4:	b292      	uxth	r2, r2
 80209c6:	f100 0b01 	add.w	fp, r0, #1
 80209ca:	fa1f fc8c 	uxth.w	ip, ip
 80209ce:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 80209d2:	1c50      	adds	r0, r2, #1
 80209d4:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80209d8:	f10c 0201 	add.w	r2, ip, #1
 80209dc:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 80209e0:	f40b 4b78 	and.w	fp, fp, #63488	@ 0xf800
 80209e4:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 80209e8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80209ec:	ea40 0b0b 	orr.w	fp, r0, fp
 80209f0:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 80209f4:	ea4b 0b0c 	orr.w	fp, fp, ip
 80209f8:	f824 bb02 	strh.w	fp, [r4], #2
 80209fc:	e7ce      	b.n	802099c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x370>
 80209fe:	429c      	cmp	r4, r3
 8020a00:	f4bf af30 	bcs.w	8020864 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 8020a04:	f824 2b02 	strh.w	r2, [r4], #2
 8020a08:	e7f9      	b.n	80209fe <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3d2>
 8020a0a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8020a0e:	4657      	mov	r7, sl
 8020a10:	464d      	mov	r5, r9
 8020a12:	e727      	b.n	8020864 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 8020a14:	2300      	movs	r3, #0
 8020a16:	e716      	b.n	8020846 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x21a>
 8020a18:	44bb      	add	fp, r7
 8020a1a:	4657      	mov	r7, sl
 8020a1c:	e724      	b.n	8020868 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x23c>
 8020a1e:	bf00      	nop
 8020a20:	2005ba7c 	.word	0x2005ba7c
 8020a24:	2005ba76 	.word	0x2005ba76
 8020a28:	20045700 	.word	0x20045700
 8020a2c:	2a01      	cmp	r2, #1
 8020a2e:	d12a      	bne.n	8020a86 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x45a>
 8020a30:	f3c6 0104 	ubfx	r1, r6, #0, #5
 8020a34:	f003 0203 	and.w	r2, r3, #3
 8020a38:	3902      	subs	r1, #2
 8020a3a:	4411      	add	r1, r2
 8020a3c:	f001 011f 	and.w	r1, r1, #31
 8020a40:	f3c3 0081 	ubfx	r0, r3, #2, #2
 8020a44:	f361 0604 	bfi	r6, r1, #0, #5
 8020a48:	3802      	subs	r0, #2
 8020a4a:	eb00 1056 	add.w	r0, r0, r6, lsr #5
 8020a4e:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 8020a52:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8020a56:	f360 164a 	bfi	r6, r0, #5, #6
 8020a5a:	3b02      	subs	r3, #2
 8020a5c:	eb03 22d6 	add.w	r2, r3, r6, lsr #11
 8020a60:	f002 031f 	and.w	r3, r2, #31
 8020a64:	2203      	movs	r2, #3
 8020a66:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8020a6a:	f363 26cf 	bfi	r6, r3, #11, #5
 8020a6e:	fb12 0303 	smlabb	r3, r2, r3, r0
 8020a72:	2207      	movs	r2, #7
 8020a74:	fb12 3301 	smlabb	r3, r2, r1, r3
 8020a78:	9a03      	ldr	r2, [sp, #12]
 8020a7a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8020a7e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020a82:	809e      	strh	r6, [r3, #4]
 8020a84:	e701      	b.n	802088a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x25e>
 8020a86:	f003 053f 	and.w	r5, r3, #63	@ 0x3f
 8020a8a:	45a8      	cmp	r8, r5
 8020a8c:	4647      	mov	r7, r8
 8020a8e:	bfa8      	it	ge
 8020a90:	462f      	movge	r7, r5
 8020a92:	2a02      	cmp	r2, #2
 8020a94:	d154      	bne.n	8020b40 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x514>
 8020a96:	9b01      	ldr	r3, [sp, #4]
 8020a98:	2bff      	cmp	r3, #255	@ 0xff
 8020a9a:	d01a      	beq.n	8020ad2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4a6>
 8020a9c:	eb0b 0307 	add.w	r3, fp, r7
 8020aa0:	2b40      	cmp	r3, #64	@ 0x40
 8020aa2:	dd16      	ble.n	8020ad2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4a6>
 8020aa4:	ea4f 094b 	mov.w	r9, fp, lsl #1
 8020aa8:	4649      	mov	r1, r9
 8020aaa:	9800      	ldr	r0, [sp, #0]
 8020aac:	f7f1 fe04 	bl	80126b8 <_ZN8touchgfx5paint9flushLineEPmi>
 8020ab0:	465a      	mov	r2, fp
 8020ab2:	9b01      	ldr	r3, [sp, #4]
 8020ab4:	4620      	mov	r0, r4
 8020ab6:	9900      	ldr	r1, [sp, #0]
 8020ab8:	f7f1 fe5c 	bl	8012774 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>
 8020abc:	9b00      	ldr	r3, [sp, #0]
 8020abe:	f04f 0b00 	mov.w	fp, #0
 8020ac2:	461a      	mov	r2, r3
 8020ac4:	4b6b      	ldr	r3, [pc, #428]	@ (8020c74 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x648>)
 8020ac6:	444c      	add	r4, r9
 8020ac8:	429a      	cmp	r2, r3
 8020aca:	bf0c      	ite	eq
 8020acc:	4b6a      	ldreq	r3, [pc, #424]	@ (8020c78 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x64c>)
 8020ace:	4b69      	ldrne	r3, [pc, #420]	@ (8020c74 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x648>)
 8020ad0:	9300      	str	r3, [sp, #0]
 8020ad2:	4652      	mov	r2, sl
 8020ad4:	2100      	movs	r1, #0
 8020ad6:	42a9      	cmp	r1, r5
 8020ad8:	da2c      	bge.n	8020b34 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x508>
 8020ada:	4694      	mov	ip, r2
 8020adc:	f04f 0903 	mov.w	r9, #3
 8020ae0:	f81c 3b02 	ldrb.w	r3, [ip], #2
 8020ae4:	7852      	ldrb	r2, [r2, #1]
 8020ae6:	42b9      	cmp	r1, r7
 8020ae8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8020aec:	f3c3 1045 	ubfx	r0, r3, #5, #6
 8020af0:	ea4f 2ed3 	mov.w	lr, r3, lsr #11
 8020af4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8020af8:	fb19 000e 	smlabb	r0, r9, lr, r0
 8020afc:	f04f 0e07 	mov.w	lr, #7
 8020b00:	f003 021f 	and.w	r2, r3, #31
 8020b04:	fb1e 0002 	smlabb	r0, lr, r2, r0
 8020b08:	9a03      	ldr	r2, [sp, #12]
 8020b0a:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 8020b0e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8020b12:	461e      	mov	r6, r3
 8020b14:	8083      	strh	r3, [r0, #4]
 8020b16:	da0a      	bge.n	8020b2e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x502>
 8020b18:	9a01      	ldr	r2, [sp, #4]
 8020b1a:	2aff      	cmp	r2, #255	@ 0xff
 8020b1c:	bf15      	itete	ne
 8020b1e:	9a00      	ldrne	r2, [sp, #0]
 8020b20:	8023      	strheq	r3, [r4, #0]
 8020b22:	f822 301b 	strhne.w	r3, [r2, fp, lsl #1]
 8020b26:	3402      	addeq	r4, #2
 8020b28:	bf18      	it	ne
 8020b2a:	f10b 0b01 	addne.w	fp, fp, #1
 8020b2e:	3101      	adds	r1, #1
 8020b30:	4662      	mov	r2, ip
 8020b32:	e7d0      	b.n	8020ad6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4aa>
 8020b34:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 8020b38:	eba8 0807 	sub.w	r8, r8, r7
 8020b3c:	1bed      	subs	r5, r5, r7
 8020b3e:	e76c      	b.n	8020a1a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ee>
 8020b40:	9b01      	ldr	r3, [sp, #4]
 8020b42:	eba8 0807 	sub.w	r8, r8, r7
 8020b46:	2bff      	cmp	r3, #255	@ 0xff
 8020b48:	eba5 0507 	sub.w	r5, r5, r7
 8020b4c:	fa1f f986 	uxth.w	r9, r6
 8020b50:	d027      	beq.n	8020ba2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x576>
 8020b52:	eb0b 0307 	add.w	r3, fp, r7
 8020b56:	2b40      	cmp	r3, #64	@ 0x40
 8020b58:	dd18      	ble.n	8020b8c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x560>
 8020b5a:	ea4f 034b 	mov.w	r3, fp, lsl #1
 8020b5e:	4619      	mov	r1, r3
 8020b60:	9800      	ldr	r0, [sp, #0]
 8020b62:	930c      	str	r3, [sp, #48]	@ 0x30
 8020b64:	f7f1 fda8 	bl	80126b8 <_ZN8touchgfx5paint9flushLineEPmi>
 8020b68:	465a      	mov	r2, fp
 8020b6a:	9b01      	ldr	r3, [sp, #4]
 8020b6c:	4620      	mov	r0, r4
 8020b6e:	9900      	ldr	r1, [sp, #0]
 8020b70:	f7f1 fe00 	bl	8012774 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>
 8020b74:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020b76:	f04f 0b00 	mov.w	fp, #0
 8020b7a:	441c      	add	r4, r3
 8020b7c:	9b00      	ldr	r3, [sp, #0]
 8020b7e:	461a      	mov	r2, r3
 8020b80:	4b3c      	ldr	r3, [pc, #240]	@ (8020c74 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x648>)
 8020b82:	429a      	cmp	r2, r3
 8020b84:	bf0c      	ite	eq
 8020b86:	4b3c      	ldreq	r3, [pc, #240]	@ (8020c78 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x64c>)
 8020b88:	4b3a      	ldrne	r3, [pc, #232]	@ (8020c74 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x648>)
 8020b8a:	9300      	str	r3, [sp, #0]
 8020b8c:	9b00      	ldr	r3, [sp, #0]
 8020b8e:	eb03 024b 	add.w	r2, r3, fp, lsl #1
 8020b92:	463b      	mov	r3, r7
 8020b94:	2b00      	cmp	r3, #0
 8020b96:	f43f af3f 	beq.w	8020a18 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ec>
 8020b9a:	f822 9b02 	strh.w	r9, [r2], #2
 8020b9e:	3b01      	subs	r3, #1
 8020ba0:	e7f8      	b.n	8020b94 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x568>
 8020ba2:	eb04 0747 	add.w	r7, r4, r7, lsl #1
 8020ba6:	42a7      	cmp	r7, r4
 8020ba8:	f67f af37 	bls.w	8020a1a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ee>
 8020bac:	f824 9b02 	strh.w	r9, [r4], #2
 8020bb0:	e7f9      	b.n	8020ba6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x57a>
 8020bb2:	f1bb 0f00 	cmp.w	fp, #0
 8020bb6:	d00c      	beq.n	8020bd2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x5a6>
 8020bb8:	ea4f 084b 	mov.w	r8, fp, lsl #1
 8020bbc:	4641      	mov	r1, r8
 8020bbe:	9800      	ldr	r0, [sp, #0]
 8020bc0:	f7f1 fd7a 	bl	80126b8 <_ZN8touchgfx5paint9flushLineEPmi>
 8020bc4:	4620      	mov	r0, r4
 8020bc6:	9b01      	ldr	r3, [sp, #4]
 8020bc8:	465a      	mov	r2, fp
 8020bca:	9900      	ldr	r1, [sp, #0]
 8020bcc:	f7f1 fdd2 	bl	8012774 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>
 8020bd0:	4444      	add	r4, r8
 8020bd2:	4b2a      	ldr	r3, [pc, #168]	@ (8020c7c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x650>)
 8020bd4:	9a02      	ldr	r2, [sp, #8]
 8020bd6:	881b      	ldrh	r3, [r3, #0]
 8020bd8:	1a9b      	subs	r3, r3, r2
 8020bda:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020bde:	9b06      	ldr	r3, [sp, #24]
 8020be0:	3301      	adds	r3, #1
 8020be2:	9306      	str	r3, [sp, #24]
 8020be4:	9a06      	ldr	r2, [sp, #24]
 8020be6:	9b04      	ldr	r3, [sp, #16]
 8020be8:	4293      	cmp	r3, r2
 8020bea:	d120      	bne.n	8020c2e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x602>
 8020bec:	9b05      	ldr	r3, [sp, #20]
 8020bee:	9a05      	ldr	r2, [sp, #20]
 8020bf0:	f103 0801 	add.w	r8, r3, #1
 8020bf4:	9b08      	ldr	r3, [sp, #32]
 8020bf6:	2100      	movs	r1, #0
 8020bf8:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8020bfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020bfe:	ba3f      	rev	r7, r7
 8020c00:	2280      	movs	r2, #128	@ 0x80
 8020c02:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8020c04:	441f      	add	r7, r3
 8020c06:	f8bd 9040 	ldrh.w	r9, [sp, #64]	@ 0x40
 8020c0a:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8020c0e:	f00c fa3d 	bl	802d08c <memset>
 8020c12:	2300      	movs	r3, #0
 8020c14:	f04f 0600 	mov.w	r6, #0
 8020c18:	eba9 0905 	sub.w	r9, r9, r5
 8020c1c:	fa1f f989 	uxth.w	r9, r9
 8020c20:	f8cd 8014 	str.w	r8, [sp, #20]
 8020c24:	9306      	str	r3, [sp, #24]
 8020c26:	f7f1 fd2f 	bl	8012688 <_ZN8touchgfx5paint8tearDownEv>
 8020c2a:	46ba      	mov	sl, r7
 8020c2c:	e58a      	b.n	8020744 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x118>
 8020c2e:	f8bd 903c 	ldrh.w	r9, [sp, #60]	@ 0x3c
 8020c32:	9b02      	ldr	r3, [sp, #8]
 8020c34:	eba9 0903 	sub.w	r9, r9, r3
 8020c38:	eba9 0505 	sub.w	r5, r9, r5
 8020c3c:	fa1f f985 	uxth.w	r9, r5
 8020c40:	e7f1      	b.n	8020c26 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x5fa>
 8020c42:	4b0f      	ldr	r3, [pc, #60]	@ (8020c80 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x654>)
 8020c44:	6818      	ldr	r0, [r3, #0]
 8020c46:	6803      	ldr	r3, [r0, #0]
 8020c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020c4a:	4798      	blx	r3
 8020c4c:	b013      	add	sp, #76	@ 0x4c
 8020c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020c52:	9b02      	ldr	r3, [sp, #8]
 8020c54:	9a02      	ldr	r2, [sp, #8]
 8020c56:	42ab      	cmp	r3, r5
 8020c58:	bfa8      	it	ge
 8020c5a:	462b      	movge	r3, r5
 8020c5c:	eba2 0803 	sub.w	r8, r2, r3
 8020c60:	1aed      	subs	r5, r5, r3
 8020c62:	e626      	b.n	80208b2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x286>
 8020c64:	f108 38ff 	add.w	r8, r8, #4294967295
 8020c68:	fa1f f986 	uxth.w	r9, r6
 8020c6c:	2500      	movs	r5, #0
 8020c6e:	2701      	movs	r7, #1
 8020c70:	e76f      	b.n	8020b52 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x526>
 8020c72:	bf00      	nop
 8020c74:	20045700 	.word	0x20045700
 8020c78:	20045800 	.word	0x20045800
 8020c7c:	2005ba76 	.word	0x2005ba76
 8020c80:	2005ba7c 	.word	0x2005ba7c

08020c84 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8020c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c88:	b08f      	sub	sp, #60	@ 0x3c
 8020c8a:	9203      	str	r2, [sp, #12]
 8020c8c:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8020c90:	461c      	mov	r4, r3
 8020c92:	460f      	mov	r7, r1
 8020c94:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8020c96:	9202      	str	r2, [sp, #8]
 8020c98:	2a00      	cmp	r2, #0
 8020c9a:	f000 812a 	beq.w	8020ef2 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26e>
 8020c9e:	6820      	ldr	r0, [r4, #0]
 8020ca0:	6861      	ldr	r1, [r4, #4]
 8020ca2:	aa0a      	add	r2, sp, #40	@ 0x28
 8020ca4:	c203      	stmia	r2!, {r0, r1}
 8020ca6:	6818      	ldr	r0, [r3, #0]
 8020ca8:	6859      	ldr	r1, [r3, #4]
 8020caa:	aa0c      	add	r2, sp, #48	@ 0x30
 8020cac:	c203      	stmia	r2!, {r0, r1}
 8020cae:	a80a      	add	r0, sp, #40	@ 0x28
 8020cb0:	f7f8 fbd4 	bl	801945c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020cb4:	4621      	mov	r1, r4
 8020cb6:	a80c      	add	r0, sp, #48	@ 0x30
 8020cb8:	f7f8 fbf8 	bl	80194ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020cbc:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 8020cc0:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 8020cc4:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8020cc8:	bfdd      	ittte	le
 8020cca:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 8020cce:	b2b3      	uxthle	r3, r6
 8020cd0:	fb92 f3f3 	sdivle	r3, r2, r3
 8020cd4:	2301      	movgt	r3, #1
 8020cd6:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8020cda:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 8020cde:	fb92 f1f3 	sdiv	r1, r2, r3
 8020ce2:	fa1f fc81 	uxth.w	ip, r1
 8020ce6:	4661      	mov	r1, ip
 8020ce8:	fb0c 2413 	mls	r4, ip, r3, r2
 8020cec:	fb14 f406 	smulbb	r4, r4, r6
 8020cf0:	441d      	add	r5, r3
 8020cf2:	3d01      	subs	r5, #1
 8020cf4:	4404      	add	r4, r0
 8020cf6:	fb95 f5f3 	sdiv	r5, r5, r3
 8020cfa:	b2a4      	uxth	r4, r4
 8020cfc:	b121      	cbz	r1, 8020d08 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x84>
 8020cfe:	9b03      	ldr	r3, [sp, #12]
 8020d00:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8020d04:	ba1b      	rev	r3, r3
 8020d06:	441f      	add	r7, r3
 8020d08:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8020d0c:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8020d10:	4418      	add	r0, r3
 8020d12:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8020d16:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8020d1a:	441a      	add	r2, r3
 8020d1c:	4b76      	ldr	r3, [pc, #472]	@ (8020ef8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x274>)
 8020d1e:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8020d22:	6818      	ldr	r0, [r3, #0]
 8020d24:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 8020d28:	6803      	ldr	r3, [r0, #0]
 8020d2a:	b2ad      	uxth	r5, r5
 8020d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020d2e:	4798      	blx	r3
 8020d30:	4a72      	ldr	r2, [pc, #456]	@ (8020efc <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x278>)
 8020d32:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8020d36:	8813      	ldrh	r3, [r2, #0]
 8020d38:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 8020d3c:	00ad      	lsls	r5, r5, #2
 8020d3e:	fb03 c101 	mla	r1, r3, r1, ip
 8020d42:	4373      	muls	r3, r6
 8020d44:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8020d48:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8020d4c:	2c00      	cmp	r4, #0
 8020d4e:	9304      	str	r3, [sp, #16]
 8020d50:	f105 0304 	add.w	r3, r5, #4
 8020d54:	9305      	str	r3, [sp, #20]
 8020d56:	bf0c      	ite	eq
 8020d58:	46c8      	moveq	r8, r9
 8020d5a:	f04f 0800 	movne.w	r8, #0
 8020d5e:	2300      	movs	r3, #0
 8020d60:	fa1f f888 	uxth.w	r8, r8
 8020d64:	9301      	str	r3, [sp, #4]
 8020d66:	9209      	str	r2, [sp, #36]	@ 0x24
 8020d68:	9a04      	ldr	r2, [sp, #16]
 8020d6a:	4282      	cmp	r2, r0
 8020d6c:	f240 80bc 	bls.w	8020ee8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x264>
 8020d70:	b95b      	cbnz	r3, 8020d8a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x106>
 8020d72:	783a      	ldrb	r2, [r7, #0]
 8020d74:	0993      	lsrs	r3, r2, #6
 8020d76:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8020d7a:	9201      	str	r2, [sp, #4]
 8020d7c:	1e5a      	subs	r2, r3, #1
 8020d7e:	2a02      	cmp	r2, #2
 8020d80:	bf8d      	iteet	hi
 8020d82:	787b      	ldrbhi	r3, [r7, #1]
 8020d84:	3701      	addls	r7, #1
 8020d86:	b29b      	uxthls	r3, r3
 8020d88:	3702      	addhi	r7, #2
 8020d8a:	b184      	cbz	r4, 8020dae <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12a>
 8020d8c:	429c      	cmp	r4, r3
 8020d8e:	bf99      	ittee	ls
 8020d90:	1b1c      	subls	r4, r3, r4
 8020d92:	fa1f fa84 	uxthls.w	sl, r4
 8020d96:	46c4      	movhi	ip, r8
 8020d98:	f04f 0a00 	movhi.w	sl, #0
 8020d9c:	bf93      	iteet	ls
 8020d9e:	2400      	movls	r4, #0
 8020da0:	1ae4      	subhi	r4, r4, r3
 8020da2:	b2a4      	uxthhi	r4, r4
 8020da4:	fa1f fc89 	uxthls.w	ip, r9
 8020da8:	4653      	mov	r3, sl
 8020daa:	46e0      	mov	r8, ip
 8020dac:	e7dc      	b.n	8020d68 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xe4>
 8020dae:	2204      	movs	r2, #4
 8020db0:	4615      	mov	r5, r2
 8020db2:	4543      	cmp	r3, r8
 8020db4:	bf2c      	ite	cs
 8020db6:	46c6      	movcs	lr, r8
 8020db8:	469e      	movcc	lr, r3
 8020dba:	9905      	ldr	r1, [sp, #20]
 8020dbc:	9a01      	ldr	r2, [sp, #4]
 8020dbe:	bf28      	it	cs
 8020dc0:	eba3 0a08 	subcs.w	sl, r3, r8
 8020dc4:	fb15 1202 	smlabb	r2, r5, r2, r1
 8020dc8:	9903      	ldr	r1, [sp, #12]
 8020dca:	bf38      	it	cc
 8020dcc:	eba8 0c03 	subcc.w	ip, r8, r3
 8020dd0:	588a      	ldr	r2, [r1, r2]
 8020dd2:	bf28      	it	cs
 8020dd4:	fa1f fa8a 	uxthcs.w	sl, sl
 8020dd8:	ea4f 6112 	mov.w	r1, r2, lsr #24
 8020ddc:	bf2e      	itee	cs
 8020dde:	46a4      	movcs	ip, r4
 8020de0:	fa1f fc8c 	uxthcc.w	ip, ip
 8020de4:	46a2      	movcc	sl, r4
 8020de6:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8020dea:	2900      	cmp	r1, #0
 8020dec:	d066      	beq.n	8020ebc <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x238>
 8020dee:	29ff      	cmp	r1, #255	@ 0xff
 8020df0:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8020df4:	d114      	bne.n	8020e20 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x19c>
 8020df6:	9d02      	ldr	r5, [sp, #8]
 8020df8:	2dff      	cmp	r5, #255	@ 0xff
 8020dfa:	d111      	bne.n	8020e20 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x19c>
 8020dfc:	0951      	lsrs	r1, r2, #5
 8020dfe:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 8020e02:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8020e06:	f026 0607 	bic.w	r6, r6, #7
 8020e0a:	430e      	orrs	r6, r1
 8020e0c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8020e10:	4316      	orrs	r6, r2
 8020e12:	b2b6      	uxth	r6, r6
 8020e14:	4486      	add	lr, r0
 8020e16:	4586      	cmp	lr, r0
 8020e18:	d051      	beq.n	8020ebe <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 8020e1a:	f820 6b02 	strh.w	r6, [r0], #2
 8020e1e:	e7fa      	b.n	8020e16 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x192>
 8020e20:	9d02      	ldr	r5, [sp, #8]
 8020e22:	b2f6      	uxtb	r6, r6
 8020e24:	4369      	muls	r1, r5
 8020e26:	1c4d      	adds	r5, r1, #1
 8020e28:	eb05 2521 	add.w	r5, r5, r1, asr #8
 8020e2c:	122d      	asrs	r5, r5, #8
 8020e2e:	ea6f 0b05 	mvn.w	fp, r5
 8020e32:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8020e36:	b2ad      	uxth	r5, r5
 8020e38:	b2d2      	uxtb	r2, r2
 8020e3a:	fb11 f105 	smulbb	r1, r1, r5
 8020e3e:	fb16 f605 	smulbb	r6, r6, r5
 8020e42:	fb12 f205 	smulbb	r2, r2, r5
 8020e46:	b289      	uxth	r1, r1
 8020e48:	b2b6      	uxth	r6, r6
 8020e4a:	b292      	uxth	r2, r2
 8020e4c:	9106      	str	r1, [sp, #24]
 8020e4e:	9607      	str	r6, [sp, #28]
 8020e50:	9208      	str	r2, [sp, #32]
 8020e52:	4486      	add	lr, r0
 8020e54:	fa5f fb8b 	uxtb.w	fp, fp
 8020e58:	4586      	cmp	lr, r0
 8020e5a:	d030      	beq.n	8020ebe <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 8020e5c:	8802      	ldrh	r2, [r0, #0]
 8020e5e:	9906      	ldr	r1, [sp, #24]
 8020e60:	1216      	asrs	r6, r2, #8
 8020e62:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8020e66:	10d5      	asrs	r5, r2, #3
 8020e68:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8020e6c:	fb06 160b 	mla	r6, r6, fp, r1
 8020e70:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8020e74:	9907      	ldr	r1, [sp, #28]
 8020e76:	00d2      	lsls	r2, r2, #3
 8020e78:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8020e7c:	fb05 150b 	mla	r5, r5, fp, r1
 8020e80:	b2d2      	uxtb	r2, r2
 8020e82:	9908      	ldr	r1, [sp, #32]
 8020e84:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8020e88:	fb02 120b 	mla	r2, r2, fp, r1
 8020e8c:	b2b6      	uxth	r6, r6
 8020e8e:	b292      	uxth	r2, r2
 8020e90:	1c71      	adds	r1, r6, #1
 8020e92:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 8020e96:	1c51      	adds	r1, r2, #1
 8020e98:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8020e9c:	b2ad      	uxth	r5, r5
 8020e9e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020ea2:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 8020ea6:	4316      	orrs	r6, r2
 8020ea8:	1c6a      	adds	r2, r5, #1
 8020eaa:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 8020eae:	096d      	lsrs	r5, r5, #5
 8020eb0:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8020eb4:	432e      	orrs	r6, r5
 8020eb6:	f820 6b02 	strh.w	r6, [r0], #2
 8020eba:	e7cd      	b.n	8020e58 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d4>
 8020ebc:	4470      	add	r0, lr
 8020ebe:	4543      	cmp	r3, r8
 8020ec0:	f4ff af72 	bcc.w	8020da8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 8020ec4:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8020ec8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020eca:	fa1f fc89 	uxth.w	ip, r9
 8020ece:	eba4 040c 	sub.w	r4, r4, ip
 8020ed2:	881b      	ldrh	r3, [r3, #0]
 8020ed4:	b2a4      	uxth	r4, r4
 8020ed6:	2c00      	cmp	r4, #0
 8020ed8:	eba3 0309 	sub.w	r3, r3, r9
 8020edc:	bf18      	it	ne
 8020ede:	f04f 0c00 	movne.w	ip, #0
 8020ee2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020ee6:	e75f      	b.n	8020da8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 8020ee8:	4b03      	ldr	r3, [pc, #12]	@ (8020ef8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x274>)
 8020eea:	6818      	ldr	r0, [r3, #0]
 8020eec:	6803      	ldr	r3, [r0, #0]
 8020eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020ef0:	4798      	blx	r3
 8020ef2:	b00f      	add	sp, #60	@ 0x3c
 8020ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020ef8:	2005ba7c 	.word	0x2005ba7c
 8020efc:	2005ba76 	.word	0x2005ba76

08020f00 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8020f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f04:	b093      	sub	sp, #76	@ 0x4c
 8020f06:	9205      	str	r2, [sp, #20]
 8020f08:	f89d 2074 	ldrb.w	r2, [sp, #116]	@ 0x74
 8020f0c:	461c      	mov	r4, r3
 8020f0e:	9101      	str	r1, [sp, #4]
 8020f10:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8020f12:	9202      	str	r2, [sp, #8]
 8020f14:	2a00      	cmp	r2, #0
 8020f16:	f000 812d 	beq.w	8021174 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>
 8020f1a:	6820      	ldr	r0, [r4, #0]
 8020f1c:	6861      	ldr	r1, [r4, #4]
 8020f1e:	aa0e      	add	r2, sp, #56	@ 0x38
 8020f20:	c203      	stmia	r2!, {r0, r1}
 8020f22:	6818      	ldr	r0, [r3, #0]
 8020f24:	6859      	ldr	r1, [r3, #4]
 8020f26:	aa10      	add	r2, sp, #64	@ 0x40
 8020f28:	c203      	stmia	r2!, {r0, r1}
 8020f2a:	a80e      	add	r0, sp, #56	@ 0x38
 8020f2c:	f7f8 fa96 	bl	801945c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020f30:	4621      	mov	r1, r4
 8020f32:	a810      	add	r0, sp, #64	@ 0x40
 8020f34:	f7f8 faba 	bl	80194ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020f38:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 8020f3c:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 8020f40:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8020f44:	bfdd      	ittte	le
 8020f46:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 8020f4a:	b2b3      	uxthle	r3, r6
 8020f4c:	fb92 f3f3 	sdivle	r3, r2, r3
 8020f50:	2301      	movgt	r3, #1
 8020f52:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 8020f56:	f8bd 0040 	ldrh.w	r0, [sp, #64]	@ 0x40
 8020f5a:	fb92 f1f3 	sdiv	r1, r2, r3
 8020f5e:	fa1f fc81 	uxth.w	ip, r1
 8020f62:	4661      	mov	r1, ip
 8020f64:	fb0c 2413 	mls	r4, ip, r3, r2
 8020f68:	fb14 f406 	smulbb	r4, r4, r6
 8020f6c:	441d      	add	r5, r3
 8020f6e:	3d01      	subs	r5, #1
 8020f70:	4404      	add	r4, r0
 8020f72:	fb95 f5f3 	sdiv	r5, r5, r3
 8020f76:	b2a4      	uxth	r4, r4
 8020f78:	b131      	cbz	r1, 8020f88 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x88>
 8020f7a:	9b05      	ldr	r3, [sp, #20]
 8020f7c:	9901      	ldr	r1, [sp, #4]
 8020f7e:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8020f82:	ba1b      	rev	r3, r3
 8020f84:	4419      	add	r1, r3
 8020f86:	9101      	str	r1, [sp, #4]
 8020f88:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8020f8c:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 8020f90:	4418      	add	r0, r3
 8020f92:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 8020f96:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8020f9a:	441a      	add	r2, r3
 8020f9c:	4b77      	ldr	r3, [pc, #476]	@ (802117c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>)
 8020f9e:	f8ad 2042 	strh.w	r2, [sp, #66]	@ 0x42
 8020fa2:	6818      	ldr	r0, [r3, #0]
 8020fa4:	f9bd 6046 	ldrsh.w	r6, [sp, #70]	@ 0x46
 8020fa8:	6803      	ldr	r3, [r0, #0]
 8020faa:	b2ad      	uxth	r5, r5
 8020fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020fae:	4798      	blx	r3
 8020fb0:	4973      	ldr	r1, [pc, #460]	@ (8021180 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x280>)
 8020fb2:	f9bd c040 	ldrsh.w	ip, [sp, #64]	@ 0x40
 8020fb6:	880b      	ldrh	r3, [r1, #0]
 8020fb8:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 8020fbc:	00ad      	lsls	r5, r5, #2
 8020fbe:	fb03 c202 	mla	r2, r3, r2, ip
 8020fc2:	4373      	muls	r3, r6
 8020fc4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8020fc8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8020fcc:	9308      	str	r3, [sp, #32]
 8020fce:	1d2b      	adds	r3, r5, #4
 8020fd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8020fd2:	9b02      	ldr	r3, [sp, #8]
 8020fd4:	2c00      	cmp	r4, #0
 8020fd6:	ea6f 0203 	mvn.w	r2, r3
 8020fda:	bf0c      	ite	eq
 8020fdc:	46dc      	moveq	ip, fp
 8020fde:	f04f 0c00 	movne.w	ip, #0
 8020fe2:	2300      	movs	r3, #0
 8020fe4:	910d      	str	r1, [sp, #52]	@ 0x34
 8020fe6:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8020fea:	b2d2      	uxtb	r2, r2
 8020fec:	fa1f fc8c 	uxth.w	ip, ip
 8020ff0:	9303      	str	r3, [sp, #12]
 8020ff2:	9106      	str	r1, [sp, #24]
 8020ff4:	9207      	str	r2, [sp, #28]
 8020ff6:	9a08      	ldr	r2, [sp, #32]
 8020ff8:	4282      	cmp	r2, r0
 8020ffa:	f240 80b6 	bls.w	802116a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 8020ffe:	b963      	cbnz	r3, 802101a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 8021000:	9b01      	ldr	r3, [sp, #4]
 8021002:	781a      	ldrb	r2, [r3, #0]
 8021004:	0993      	lsrs	r3, r2, #6
 8021006:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 802100a:	9203      	str	r2, [sp, #12]
 802100c:	1e5a      	subs	r2, r3, #1
 802100e:	2a02      	cmp	r2, #2
 8021010:	d815      	bhi.n	802103e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13e>
 8021012:	9a01      	ldr	r2, [sp, #4]
 8021014:	b29b      	uxth	r3, r3
 8021016:	3201      	adds	r2, #1
 8021018:	9201      	str	r2, [sp, #4]
 802101a:	b1b4      	cbz	r4, 802104a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x14a>
 802101c:	429c      	cmp	r4, r3
 802101e:	bf99      	ittee	ls
 8021020:	1b1c      	subls	r4, r3, r4
 8021022:	fa1f f884 	uxthls.w	r8, r4
 8021026:	4666      	movhi	r6, ip
 8021028:	f04f 0800 	movhi.w	r8, #0
 802102c:	bf93      	iteet	ls
 802102e:	2400      	movls	r4, #0
 8021030:	1ae4      	subhi	r4, r4, r3
 8021032:	b2a4      	uxthhi	r4, r4
 8021034:	fa1f f68b 	uxthls.w	r6, fp
 8021038:	4643      	mov	r3, r8
 802103a:	46b4      	mov	ip, r6
 802103c:	e7db      	b.n	8020ff6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 802103e:	9a01      	ldr	r2, [sp, #4]
 8021040:	9b01      	ldr	r3, [sp, #4]
 8021042:	3202      	adds	r2, #2
 8021044:	785b      	ldrb	r3, [r3, #1]
 8021046:	9201      	str	r2, [sp, #4]
 8021048:	e7e7      	b.n	802101a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 802104a:	2203      	movs	r2, #3
 802104c:	4615      	mov	r5, r2
 802104e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8021050:	9a03      	ldr	r2, [sp, #12]
 8021052:	4563      	cmp	r3, ip
 8021054:	fb15 1202 	smlabb	r2, r5, r2, r1
 8021058:	9905      	ldr	r1, [sp, #20]
 802105a:	bf28      	it	cs
 802105c:	eba3 080c 	subcs.w	r8, r3, ip
 8021060:	eb01 0502 	add.w	r5, r1, r2
 8021064:	9902      	ldr	r1, [sp, #8]
 8021066:	bf31      	iteee	cc
 8021068:	ebac 0603 	subcc.w	r6, ip, r3
 802106c:	fa1f f888 	uxthcs.w	r8, r8
 8021070:	46e1      	movcs	r9, ip
 8021072:	4626      	movcs	r6, r4
 8021074:	bf3e      	ittt	cc
 8021076:	b2b6      	uxthcc	r6, r6
 8021078:	4699      	movcc	r9, r3
 802107a:	46a0      	movcc	r8, r4
 802107c:	29ff      	cmp	r1, #255	@ 0xff
 802107e:	d04a      	beq.n	8021116 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x216>
 8021080:	46ca      	mov	sl, r9
 8021082:	9f06      	ldr	r7, [sp, #24]
 8021084:	78a9      	ldrb	r1, [r5, #2]
 8021086:	9004      	str	r0, [sp, #16]
 8021088:	4379      	muls	r1, r7
 802108a:	910a      	str	r1, [sp, #40]	@ 0x28
 802108c:	7869      	ldrb	r1, [r5, #1]
 802108e:	4379      	muls	r1, r7
 8021090:	910b      	str	r1, [sp, #44]	@ 0x2c
 8021092:	9905      	ldr	r1, [sp, #20]
 8021094:	5c8a      	ldrb	r2, [r1, r2]
 8021096:	437a      	muls	r2, r7
 8021098:	920c      	str	r2, [sp, #48]	@ 0x30
 802109a:	f1ba 0f00 	cmp.w	sl, #0
 802109e:	d03d      	beq.n	802111c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21c>
 80210a0:	9f07      	ldr	r7, [sp, #28]
 80210a2:	9a04      	ldr	r2, [sp, #16]
 80210a4:	46be      	mov	lr, r7
 80210a6:	8812      	ldrh	r2, [r2, #0]
 80210a8:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80210aa:	1215      	asrs	r5, r2, #8
 80210ac:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 80210b0:	10d1      	asrs	r1, r2, #3
 80210b2:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 80210b6:	fb05 750e 	mla	r5, r5, lr, r7
 80210ba:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 80210be:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80210c0:	00d2      	lsls	r2, r2, #3
 80210c2:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 80210c6:	fb01 710e 	mla	r1, r1, lr, r7
 80210ca:	b2d2      	uxtb	r2, r2
 80210cc:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80210ce:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80210d2:	fb02 720e 	mla	r2, r2, lr, r7
 80210d6:	b2ad      	uxth	r5, r5
 80210d8:	b292      	uxth	r2, r2
 80210da:	f105 0e01 	add.w	lr, r5, #1
 80210de:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 80210e2:	f102 0e01 	add.w	lr, r2, #1
 80210e6:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 80210ea:	b289      	uxth	r1, r1
 80210ec:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80210f0:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 80210f4:	4315      	orrs	r5, r2
 80210f6:	1c4a      	adds	r2, r1, #1
 80210f8:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80210fc:	0949      	lsrs	r1, r1, #5
 80210fe:	9a04      	ldr	r2, [sp, #16]
 8021100:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8021104:	430d      	orrs	r5, r1
 8021106:	f822 5b02 	strh.w	r5, [r2], #2
 802110a:	f10a 3aff 	add.w	sl, sl, #4294967295
 802110e:	9204      	str	r2, [sp, #16]
 8021110:	fa1f fa8a 	uxth.w	sl, sl
 8021114:	e7c1      	b.n	802109a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19a>
 8021116:	4649      	mov	r1, r9
 8021118:	4686      	mov	lr, r0
 802111a:	b999      	cbnz	r1, 8021144 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x244>
 802111c:	4563      	cmp	r3, ip
 802111e:	eb00 0049 	add.w	r0, r0, r9, lsl #1
 8021122:	d389      	bcc.n	8021038 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x138>
 8021124:	f8bd 403c 	ldrh.w	r4, [sp, #60]	@ 0x3c
 8021128:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802112a:	fa1f f68b 	uxth.w	r6, fp
 802112e:	1ba4      	subs	r4, r4, r6
 8021130:	881b      	ldrh	r3, [r3, #0]
 8021132:	b2a4      	uxth	r4, r4
 8021134:	2c00      	cmp	r4, #0
 8021136:	eba3 030b 	sub.w	r3, r3, fp
 802113a:	bf18      	it	ne
 802113c:	2600      	movne	r6, #0
 802113e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021142:	e779      	b.n	8021038 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x138>
 8021144:	78aa      	ldrb	r2, [r5, #2]
 8021146:	4f0f      	ldr	r7, [pc, #60]	@ (8021184 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x284>)
 8021148:	3901      	subs	r1, #1
 802114a:	ea07 2a02 	and.w	sl, r7, r2, lsl #8
 802114e:	786a      	ldrb	r2, [r5, #1]
 8021150:	b289      	uxth	r1, r1
 8021152:	00d2      	lsls	r2, r2, #3
 8021154:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8021158:	ea4a 0202 	orr.w	r2, sl, r2
 802115c:	f895 a000 	ldrb.w	sl, [r5]
 8021160:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
 8021164:	f82e 2b02 	strh.w	r2, [lr], #2
 8021168:	e7d7      	b.n	802111a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21a>
 802116a:	4b04      	ldr	r3, [pc, #16]	@ (802117c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>)
 802116c:	6818      	ldr	r0, [r3, #0]
 802116e:	6803      	ldr	r3, [r0, #0]
 8021170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021172:	4798      	blx	r3
 8021174:	b013      	add	sp, #76	@ 0x4c
 8021176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802117a:	bf00      	nop
 802117c:	2005ba7c 	.word	0x2005ba7c
 8021180:	2005ba76 	.word	0x2005ba76
 8021184:	fffff800 	.word	0xfffff800

08021188 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8021188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802118c:	b09d      	sub	sp, #116	@ 0x74
 802118e:	e9cd 1211 	strd	r1, r2, [sp, #68]	@ 0x44
 8021192:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 8021196:	461c      	mov	r4, r3
 8021198:	4683      	mov	fp, r0
 802119a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802119c:	920e      	str	r2, [sp, #56]	@ 0x38
 802119e:	2a00      	cmp	r2, #0
 80211a0:	f000 81e1 	beq.w	8021566 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3de>
 80211a4:	6820      	ldr	r0, [r4, #0]
 80211a6:	6861      	ldr	r1, [r4, #4]
 80211a8:	aa18      	add	r2, sp, #96	@ 0x60
 80211aa:	c203      	stmia	r2!, {r0, r1}
 80211ac:	6818      	ldr	r0, [r3, #0]
 80211ae:	6859      	ldr	r1, [r3, #4]
 80211b0:	aa1a      	add	r2, sp, #104	@ 0x68
 80211b2:	c203      	stmia	r2!, {r0, r1}
 80211b4:	a818      	add	r0, sp, #96	@ 0x60
 80211b6:	f7f8 f951 	bl	801945c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80211ba:	4621      	mov	r1, r4
 80211bc:	a81a      	add	r0, sp, #104	@ 0x68
 80211be:	f7f8 f975 	bl	80194ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80211c2:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 80211c6:	f9bd 4066 	ldrsh.w	r4, [sp, #102]	@ 0x66
 80211ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80211ce:	bfdd      	ittte	le
 80211d0:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 80211d4:	b29a      	uxthle	r2, r3
 80211d6:	fb91 f2f2 	sdivle	r2, r1, r2
 80211da:	2201      	movgt	r2, #1
 80211dc:	9202      	str	r2, [sp, #8]
 80211de:	9802      	ldr	r0, [sp, #8]
 80211e0:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 80211e4:	9902      	ldr	r1, [sp, #8]
 80211e6:	fb92 f0f0 	sdiv	r0, r2, r0
 80211ea:	b280      	uxth	r0, r0
 80211ec:	900f      	str	r0, [sp, #60]	@ 0x3c
 80211ee:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80211f0:	9802      	ldr	r0, [sp, #8]
 80211f2:	440c      	add	r4, r1
 80211f4:	fb05 2510 	mls	r5, r5, r0, r2
 80211f8:	fb15 f503 	smulbb	r5, r5, r3
 80211fc:	3c01      	subs	r4, #1
 80211fe:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 8021202:	fb94 f4f1 	sdiv	r4, r4, r1
 8021206:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 802120a:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 802120e:	440d      	add	r5, r1
 8021210:	4419      	add	r1, r3
 8021212:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 8021216:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 802121a:	441a      	add	r2, r3
 802121c:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 8021220:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 8021224:	9306      	str	r3, [sp, #24]
 8021226:	4bb3      	ldr	r3, [pc, #716]	@ (80214f4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 8021228:	3401      	adds	r4, #1
 802122a:	6818      	ldr	r0, [r3, #0]
 802122c:	b2a4      	uxth	r4, r4
 802122e:	6803      	ldr	r3, [r0, #0]
 8021230:	00a4      	lsls	r4, r4, #2
 8021232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021234:	4798      	blx	r3
 8021236:	4bb0      	ldr	r3, [pc, #704]	@ (80214f8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>)
 8021238:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	@ 0x6a
 802123c:	881a      	ldrh	r2, [r3, #0]
 802123e:	f9bd 7068 	ldrsh.w	r7, [sp, #104]	@ 0x68
 8021242:	4356      	muls	r6, r2
 8021244:	fb02 7101 	mla	r1, r2, r1, r7
 8021248:	eb00 0841 	add.w	r8, r0, r1, lsl #1
 802124c:	eb08 0246 	add.w	r2, r8, r6, lsl #1
 8021250:	920a      	str	r2, [sp, #40]	@ 0x28
 8021252:	1d22      	adds	r2, r4, #4
 8021254:	b2ad      	uxth	r5, r5
 8021256:	9213      	str	r2, [sp, #76]	@ 0x4c
 8021258:	9a06      	ldr	r2, [sp, #24]
 802125a:	2d00      	cmp	r5, #0
 802125c:	bf0c      	ite	eq
 802125e:	4611      	moveq	r1, r2
 8021260:	2100      	movne	r1, #0
 8021262:	2200      	movs	r2, #0
 8021264:	9316      	str	r3, [sp, #88]	@ 0x58
 8021266:	4ba5      	ldr	r3, [pc, #660]	@ (80214fc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x374>)
 8021268:	b289      	uxth	r1, r1
 802126a:	eba3 030b 	sub.w	r3, r3, fp
 802126e:	920d      	str	r2, [sp, #52]	@ 0x34
 8021270:	9317      	str	r3, [sp, #92]	@ 0x5c
 8021272:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8021274:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021276:	fa12 f383 	uxtah	r3, r2, r3
 802127a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802127c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8021280:	3304      	adds	r3, #4
 8021282:	9308      	str	r3, [sp, #32]
 8021284:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021286:	4543      	cmp	r3, r8
 8021288:	f240 8168 	bls.w	802155c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d4>
 802128c:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 8021290:	9a02      	ldr	r2, [sp, #8]
 8021292:	fbb5 f3f3 	udiv	r3, r5, r3
 8021296:	1ad3      	subs	r3, r2, r3
 8021298:	b29b      	uxth	r3, r3
 802129a:	9314      	str	r3, [sp, #80]	@ 0x50
 802129c:	9b08      	ldr	r3, [sp, #32]
 802129e:	9808      	ldr	r0, [sp, #32]
 80212a0:	785a      	ldrb	r2, [r3, #1]
 80212a2:	789b      	ldrb	r3, [r3, #2]
 80212a4:	7800      	ldrb	r0, [r0, #0]
 80212a6:	021b      	lsls	r3, r3, #8
 80212a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80212ac:	9a08      	ldr	r2, [sp, #32]
 80212ae:	9010      	str	r0, [sp, #64]	@ 0x40
 80212b0:	78d2      	ldrb	r2, [r2, #3]
 80212b2:	3001      	adds	r0, #1
 80212b4:	4313      	orrs	r3, r2
 80212b6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80212b8:	9007      	str	r0, [sp, #28]
 80212ba:	441a      	add	r2, r3
 80212bc:	1c50      	adds	r0, r2, #1
 80212be:	9005      	str	r0, [sp, #20]
 80212c0:	7852      	ldrb	r2, [r2, #1]
 80212c2:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80212c4:	0212      	lsls	r2, r2, #8
 80212c6:	5cc3      	ldrb	r3, [r0, r3]
 80212c8:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 80212cc:	431a      	orrs	r2, r3
 80212ce:	b293      	uxth	r3, r2
 80212d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80212d2:	2300      	movs	r3, #0
 80212d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80212d6:	2301      	movs	r3, #1
 80212d8:	9301      	str	r3, [sp, #4]
 80212da:	9304      	str	r3, [sp, #16]
 80212dc:	2300      	movs	r3, #0
 80212de:	f04f 0e01 	mov.w	lr, #1
 80212e2:	f88b 2804 	strb.w	r2, [fp, #2052]	@ 0x804
 80212e6:	9303      	str	r3, [sp, #12]
 80212e8:	2d00      	cmp	r5, #0
 80212ea:	d07c      	beq.n	80213e6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 80212ec:	45ae      	cmp	lr, r5
 80212ee:	d26b      	bcs.n	80213c8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x240>
 80212f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80212f2:	eba5 050e 	sub.w	r5, r5, lr
 80212f6:	4543      	cmp	r3, r8
 80212f8:	b2ad      	uxth	r5, r5
 80212fa:	460c      	mov	r4, r1
 80212fc:	d802      	bhi.n	8021304 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>
 80212fe:	e070      	b.n	80213e2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25a>
 8021300:	2b00      	cmp	r3, #0
 8021302:	d15c      	bne.n	80213be <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 8021304:	9b05      	ldr	r3, [sp, #20]
 8021306:	9a04      	ldr	r2, [sp, #16]
 8021308:	785b      	ldrb	r3, [r3, #1]
 802130a:	f1c2 0207 	rsb	r2, r2, #7
 802130e:	4093      	lsls	r3, r2
 8021310:	005b      	lsls	r3, r3, #1
 8021312:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 8021316:	9b05      	ldr	r3, [sp, #20]
 8021318:	9904      	ldr	r1, [sp, #16]
 802131a:	781b      	ldrb	r3, [r3, #0]
 802131c:	410b      	asrs	r3, r1
 802131e:	3101      	adds	r1, #1
 8021320:	b2c9      	uxtb	r1, r1
 8021322:	2908      	cmp	r1, #8
 8021324:	9104      	str	r1, [sp, #16]
 8021326:	9905      	ldr	r1, [sp, #20]
 8021328:	b2db      	uxtb	r3, r3
 802132a:	bf03      	ittte	eq
 802132c:	3102      	addeq	r1, #2
 802132e:	9105      	streq	r1, [sp, #20]
 8021330:	2100      	moveq	r1, #0
 8021332:	3101      	addne	r1, #1
 8021334:	bf14      	ite	ne
 8021336:	9105      	strne	r1, [sp, #20]
 8021338:	9104      	streq	r1, [sp, #16]
 802133a:	4313      	orrs	r3, r2
 802133c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 802133e:	b29a      	uxth	r2, r3
 8021340:	4291      	cmp	r1, r2
 8021342:	d30a      	bcc.n	802135a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 8021344:	f88b 3804 	strb.w	r3, [fp, #2052]	@ 0x804
 8021348:	2301      	movs	r3, #1
 802134a:	9907      	ldr	r1, [sp, #28]
 802134c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8021350:	d30f      	bcc.n	8021372 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ea>
 8021352:	2100      	movs	r1, #0
 8021354:	9301      	str	r3, [sp, #4]
 8021356:	9103      	str	r1, [sp, #12]
 8021358:	e032      	b.n	80213c0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x238>
 802135a:	9b07      	ldr	r3, [sp, #28]
 802135c:	429a      	cmp	r2, r3
 802135e:	d318      	bcc.n	8021392 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 8021360:	9b01      	ldr	r3, [sp, #4]
 8021362:	f89b 1804 	ldrb.w	r1, [fp, #2052]	@ 0x804
 8021366:	445b      	add	r3, fp
 8021368:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 802136c:	9b01      	ldr	r3, [sp, #4]
 802136e:	3301      	adds	r3, #1
 8021370:	b29b      	uxth	r3, r3
 8021372:	9907      	ldr	r1, [sp, #28]
 8021374:	f89b 0804 	ldrb.w	r0, [fp, #2052]	@ 0x804
 8021378:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 802137c:	7108      	strb	r0, [r1, #4]
 802137e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8021380:	80c8      	strh	r0, [r1, #6]
 8021382:	9801      	ldr	r0, [sp, #4]
 8021384:	3001      	adds	r0, #1
 8021386:	7148      	strb	r0, [r1, #5]
 8021388:	9907      	ldr	r1, [sp, #28]
 802138a:	3101      	adds	r1, #1
 802138c:	b289      	uxth	r1, r1
 802138e:	9107      	str	r1, [sp, #28]
 8021390:	e7df      	b.n	8021352 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ca>
 8021392:	4611      	mov	r1, r2
 8021394:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
 8021398:	795b      	ldrb	r3, [r3, #5]
 802139a:	f603 0004 	addw	r0, r3, #2052	@ 0x804
 802139e:	4458      	add	r0, fp
 80213a0:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 80213a2:	4406      	add	r6, r0
 80213a4:	2e00      	cmp	r6, #0
 80213a6:	dd06      	ble.n	80213b6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x22e>
 80213a8:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 80213ac:	790e      	ldrb	r6, [r1, #4]
 80213ae:	f800 6d01 	strb.w	r6, [r0, #-1]!
 80213b2:	88c9      	ldrh	r1, [r1, #6]
 80213b4:	e7f4      	b.n	80213a0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x218>
 80213b6:	f88b 1804 	strb.w	r1, [fp, #2052]	@ 0x804
 80213ba:	b29b      	uxth	r3, r3
 80213bc:	e7c5      	b.n	802134a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c2>
 80213be:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80213c0:	4621      	mov	r1, r4
 80213c2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80213c4:	469e      	mov	lr, r3
 80213c6:	e78f      	b.n	80212e8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x160>
 80213c8:	9a03      	ldr	r2, [sp, #12]
 80213ca:	ebae 0305 	sub.w	r3, lr, r5
 80213ce:	442a      	add	r2, r5
 80213d0:	b292      	uxth	r2, r2
 80213d2:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 80213d6:	b29b      	uxth	r3, r3
 80213d8:	9203      	str	r2, [sp, #12]
 80213da:	2500      	movs	r5, #0
 80213dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80213de:	4542      	cmp	r2, r8
 80213e0:	d88e      	bhi.n	8021300 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x178>
 80213e2:	4621      	mov	r1, r4
 80213e4:	e74e      	b.n	8021284 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 80213e6:	458e      	cmp	lr, r1
 80213e8:	bf2c      	ite	cs
 80213ea:	462c      	movcs	r4, r5
 80213ec:	462b      	movcc	r3, r5
 80213ee:	f04f 0900 	mov.w	r9, #0
 80213f2:	bf29      	itett	cs
 80213f4:	ebae 0301 	subcs.w	r3, lr, r1
 80213f8:	eba1 040e 	subcc.w	r4, r1, lr
 80213fc:	b29b      	uxthcs	r3, r3
 80213fe:	910c      	strcs	r1, [sp, #48]	@ 0x30
 8021400:	bf3c      	itt	cc
 8021402:	b2a4      	uxthcc	r4, r4
 8021404:	f8cd e030 	strcc.w	lr, [sp, #48]	@ 0x30
 8021408:	9a03      	ldr	r2, [sp, #12]
 802140a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 802140c:	444a      	add	r2, r9
 802140e:	4548      	cmp	r0, r9
 8021410:	b292      	uxth	r2, r2
 8021412:	d075      	beq.n	8021500 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x378>
 8021414:	2004      	movs	r0, #4
 8021416:	4605      	mov	r5, r0
 8021418:	445a      	add	r2, fp
 802141a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802141c:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 8021420:	fb15 0202 	smlabb	r2, r5, r2, r0
 8021424:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8021426:	5880      	ldr	r0, [r0, r2]
 8021428:	ea5f 6a10 	movs.w	sl, r0, lsr #24
 802142c:	d014      	beq.n	8021458 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d0>
 802142e:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8021432:	ea4f 2510 	mov.w	r5, r0, lsr #8
 8021436:	d112      	bne.n	802145e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d6>
 8021438:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802143a:	2aff      	cmp	r2, #255	@ 0xff
 802143c:	d10f      	bne.n	802145e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d6>
 802143e:	0942      	lsrs	r2, r0, #5
 8021440:	f425 65ff 	bic.w	r5, r5, #2040	@ 0x7f8
 8021444:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8021448:	f025 0507 	bic.w	r5, r5, #7
 802144c:	4315      	orrs	r5, r2
 802144e:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8021452:	4305      	orrs	r5, r0
 8021454:	f828 5019 	strh.w	r5, [r8, r9, lsl #1]
 8021458:	f109 0901 	add.w	r9, r9, #1
 802145c:	e7d4      	b.n	8021408 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x280>
 802145e:	f838 c019 	ldrh.w	ip, [r8, r9, lsl #1]
 8021462:	b2ed      	uxtb	r5, r5
 8021464:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8021468:	f006 02fc 	and.w	r2, r6, #252	@ 0xfc
 802146c:	9215      	str	r2, [sp, #84]	@ 0x54
 802146e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021470:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8021474:	fb02 fa0a 	mul.w	sl, r2, sl
 8021478:	f10a 0201 	add.w	r2, sl, #1
 802147c:	eb02 222a 	add.w	r2, r2, sl, asr #8
 8021480:	1212      	asrs	r2, r2, #8
 8021482:	fa1f fa82 	uxth.w	sl, r2
 8021486:	43d2      	mvns	r2, r2
 8021488:	b2c0      	uxtb	r0, r0
 802148a:	fb16 f60a 	smulbb	r6, r6, sl
 802148e:	fb10 f00a 	smulbb	r0, r0, sl
 8021492:	ea4f 272c 	mov.w	r7, ip, asr #8
 8021496:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802149a:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 802149e:	fa5f fc8c 	uxtb.w	ip, ip
 80214a2:	b2d2      	uxtb	r2, r2
 80214a4:	fb15 f50a 	smulbb	r5, r5, sl
 80214a8:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 80214ac:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 80214b0:	fb07 6702 	mla	r7, r7, r2, r6
 80214b4:	fb0c 0002 	mla	r0, ip, r2, r0
 80214b8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80214ba:	b2bf      	uxth	r7, r7
 80214bc:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 80214c0:	fb06 5602 	mla	r6, r6, r2, r5
 80214c4:	b280      	uxth	r0, r0
 80214c6:	1c7a      	adds	r2, r7, #1
 80214c8:	1c45      	adds	r5, r0, #1
 80214ca:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80214ce:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 80214d2:	b2b6      	uxth	r6, r6
 80214d4:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80214d8:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 80214dc:	432f      	orrs	r7, r5
 80214de:	1c75      	adds	r5, r6, #1
 80214e0:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 80214e4:	096d      	lsrs	r5, r5, #5
 80214e6:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80214ea:	432f      	orrs	r7, r5
 80214ec:	f828 7019 	strh.w	r7, [r8, r9, lsl #1]
 80214f0:	e7b2      	b.n	8021458 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d0>
 80214f2:	bf00      	nop
 80214f4:	2005ba7c 	.word	0x2005ba7c
 80214f8:	2005ba76 	.word	0x2005ba76
 80214fc:	fffff7fb 	.word	0xfffff7fb
 8021500:	9203      	str	r2, [sp, #12]
 8021502:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8021504:	458e      	cmp	lr, r1
 8021506:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 802150a:	f4ff af66 	bcc.w	80213da <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x252>
 802150e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8021510:	9906      	ldr	r1, [sp, #24]
 8021512:	8812      	ldrh	r2, [r2, #0]
 8021514:	1a52      	subs	r2, r2, r1
 8021516:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 802151a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802151c:	9914      	ldr	r1, [sp, #80]	@ 0x50
 802151e:	3201      	adds	r2, #1
 8021520:	428a      	cmp	r2, r1
 8021522:	9209      	str	r2, [sp, #36]	@ 0x24
 8021524:	d110      	bne.n	8021548 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3c0>
 8021526:	f8bd 5068 	ldrh.w	r5, [sp, #104]	@ 0x68
 802152a:	f8bd 9060 	ldrh.w	r9, [sp, #96]	@ 0x60
 802152e:	9b06      	ldr	r3, [sp, #24]
 8021530:	eba5 0509 	sub.w	r5, r5, r9
 8021534:	b2ad      	uxth	r5, r5
 8021536:	2d00      	cmp	r5, #0
 8021538:	bf0c      	ite	eq
 802153a:	4619      	moveq	r1, r3
 802153c:	2100      	movne	r1, #0
 802153e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021540:	b289      	uxth	r1, r1
 8021542:	3301      	adds	r3, #1
 8021544:	930d      	str	r3, [sp, #52]	@ 0x34
 8021546:	e694      	b.n	8021272 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 8021548:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 802154c:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 8021550:	1b2d      	subs	r5, r5, r4
 8021552:	b2ad      	uxth	r5, r5
 8021554:	2d00      	cmp	r5, #0
 8021556:	bf18      	it	ne
 8021558:	2400      	movne	r4, #0
 802155a:	e73f      	b.n	80213dc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x254>
 802155c:	4b03      	ldr	r3, [pc, #12]	@ (802156c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e4>)
 802155e:	6818      	ldr	r0, [r3, #0]
 8021560:	6803      	ldr	r3, [r0, #0]
 8021562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021564:	4798      	blx	r3
 8021566:	b01d      	add	sp, #116	@ 0x74
 8021568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802156c:	2005ba7c 	.word	0x2005ba7c

08021570 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8021570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021574:	b09f      	sub	sp, #124	@ 0x7c
 8021576:	e9cd 1213 	strd	r1, r2, [sp, #76]	@ 0x4c
 802157a:	f89d 20a4 	ldrb.w	r2, [sp, #164]	@ 0xa4
 802157e:	461d      	mov	r5, r3
 8021580:	4604      	mov	r4, r0
 8021582:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8021584:	920a      	str	r2, [sp, #40]	@ 0x28
 8021586:	2a00      	cmp	r2, #0
 8021588:	f000 81fc 	beq.w	8021984 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x414>
 802158c:	6828      	ldr	r0, [r5, #0]
 802158e:	6869      	ldr	r1, [r5, #4]
 8021590:	aa1a      	add	r2, sp, #104	@ 0x68
 8021592:	c203      	stmia	r2!, {r0, r1}
 8021594:	6818      	ldr	r0, [r3, #0]
 8021596:	6859      	ldr	r1, [r3, #4]
 8021598:	aa1c      	add	r2, sp, #112	@ 0x70
 802159a:	c203      	stmia	r2!, {r0, r1}
 802159c:	a81a      	add	r0, sp, #104	@ 0x68
 802159e:	f7f7 ff5d 	bl	801945c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80215a2:	4629      	mov	r1, r5
 80215a4:	a81c      	add	r0, sp, #112	@ 0x70
 80215a6:	f7f7 ff81 	bl	80194ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80215aa:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 80215ae:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 80215b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80215b6:	bfdd      	ittte	le
 80215b8:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 80215bc:	b29a      	uxthle	r2, r3
 80215be:	fb91 f2f2 	sdivle	r2, r1, r2
 80215c2:	2201      	movgt	r2, #1
 80215c4:	9201      	str	r2, [sp, #4]
 80215c6:	9801      	ldr	r0, [sp, #4]
 80215c8:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	@ 0x72
 80215cc:	9901      	ldr	r1, [sp, #4]
 80215ce:	fb92 f0f0 	sdiv	r0, r2, r0
 80215d2:	b280      	uxth	r0, r0
 80215d4:	9010      	str	r0, [sp, #64]	@ 0x40
 80215d6:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80215d8:	9801      	ldr	r0, [sp, #4]
 80215da:	440e      	add	r6, r1
 80215dc:	fb05 2510 	mls	r5, r5, r0, r2
 80215e0:	fb15 f503 	smulbb	r5, r5, r3
 80215e4:	3e01      	subs	r6, #1
 80215e6:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 80215ea:	fb96 f6f1 	sdiv	r6, r6, r1
 80215ee:	f8bd 1070 	ldrh.w	r1, [sp, #112]	@ 0x70
 80215f2:	f9bd 7076 	ldrsh.w	r7, [sp, #118]	@ 0x76
 80215f6:	440d      	add	r5, r1
 80215f8:	4419      	add	r1, r3
 80215fa:	f8bd 306a 	ldrh.w	r3, [sp, #106]	@ 0x6a
 80215fe:	f8ad 1070 	strh.w	r1, [sp, #112]	@ 0x70
 8021602:	441a      	add	r2, r3
 8021604:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	@ 0x74
 8021608:	f8ad 2072 	strh.w	r2, [sp, #114]	@ 0x72
 802160c:	9304      	str	r3, [sp, #16]
 802160e:	4b96      	ldr	r3, [pc, #600]	@ (8021868 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2f8>)
 8021610:	3601      	adds	r6, #1
 8021612:	6818      	ldr	r0, [r3, #0]
 8021614:	b2b6      	uxth	r6, r6
 8021616:	6803      	ldr	r3, [r0, #0]
 8021618:	b2ad      	uxth	r5, r5
 802161a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802161c:	4798      	blx	r3
 802161e:	4b93      	ldr	r3, [pc, #588]	@ (802186c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2fc>)
 8021620:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	@ 0x72
 8021624:	881a      	ldrh	r2, [r3, #0]
 8021626:	f9bd c070 	ldrsh.w	ip, [sp, #112]	@ 0x70
 802162a:	4357      	muls	r7, r2
 802162c:	fb02 c101 	mla	r1, r2, r1, ip
 8021630:	eb00 0b41 	add.w	fp, r0, r1, lsl #1
 8021634:	eb0b 0247 	add.w	r2, fp, r7, lsl #1
 8021638:	920b      	str	r2, [sp, #44]	@ 0x2c
 802163a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802163c:	2d00      	cmp	r5, #0
 802163e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8021642:	f106 0204 	add.w	r2, r6, #4
 8021646:	9206      	str	r2, [sp, #24]
 8021648:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802164a:	bf18      	it	ne
 802164c:	2100      	movne	r1, #0
 802164e:	ea6f 0202 	mvn.w	r2, r2
 8021652:	b2d2      	uxtb	r2, r2
 8021654:	9215      	str	r2, [sp, #84]	@ 0x54
 8021656:	9a04      	ldr	r2, [sp, #16]
 8021658:	9318      	str	r3, [sp, #96]	@ 0x60
 802165a:	bf08      	it	eq
 802165c:	4611      	moveq	r1, r2
 802165e:	2200      	movs	r2, #0
 8021660:	4b83      	ldr	r3, [pc, #524]	@ (8021870 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x300>)
 8021662:	b289      	uxth	r1, r1
 8021664:	1b1b      	subs	r3, r3, r4
 8021666:	920d      	str	r2, [sp, #52]	@ 0x34
 8021668:	9319      	str	r3, [sp, #100]	@ 0x64
 802166a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802166c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802166e:	fa12 f383 	uxtah	r3, r2, r3
 8021672:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8021674:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8021678:	3304      	adds	r3, #4
 802167a:	9307      	str	r3, [sp, #28]
 802167c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802167e:	455b      	cmp	r3, fp
 8021680:	f240 817b 	bls.w	802197a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x40a>
 8021684:	f8bd 306c 	ldrh.w	r3, [sp, #108]	@ 0x6c
 8021688:	f04f 0801 	mov.w	r8, #1
 802168c:	fbb5 f3f3 	udiv	r3, r5, r3
 8021690:	9a01      	ldr	r2, [sp, #4]
 8021692:	9807      	ldr	r0, [sp, #28]
 8021694:	1ad3      	subs	r3, r2, r3
 8021696:	b29b      	uxth	r3, r3
 8021698:	9316      	str	r3, [sp, #88]	@ 0x58
 802169a:	9b07      	ldr	r3, [sp, #28]
 802169c:	7800      	ldrb	r0, [r0, #0]
 802169e:	785a      	ldrb	r2, [r3, #1]
 80216a0:	789b      	ldrb	r3, [r3, #2]
 80216a2:	9011      	str	r0, [sp, #68]	@ 0x44
 80216a4:	021b      	lsls	r3, r3, #8
 80216a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80216aa:	9a07      	ldr	r2, [sp, #28]
 80216ac:	3001      	adds	r0, #1
 80216ae:	78d2      	ldrb	r2, [r2, #3]
 80216b0:	9005      	str	r0, [sp, #20]
 80216b2:	4313      	orrs	r3, r2
 80216b4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80216b6:	46c4      	mov	ip, r8
 80216b8:	441a      	add	r2, r3
 80216ba:	1c50      	adds	r0, r2, #1
 80216bc:	9003      	str	r0, [sp, #12]
 80216be:	7852      	ldrb	r2, [r2, #1]
 80216c0:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80216c2:	0212      	lsls	r2, r2, #8
 80216c4:	5cc3      	ldrb	r3, [r0, r3]
 80216c6:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 80216ca:	431a      	orrs	r2, r3
 80216cc:	b293      	uxth	r3, r2
 80216ce:	930c      	str	r3, [sp, #48]	@ 0x30
 80216d0:	2300      	movs	r3, #0
 80216d2:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 80216d6:	9308      	str	r3, [sp, #32]
 80216d8:	461a      	mov	r2, r3
 80216da:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80216de:	f8cd 8008 	str.w	r8, [sp, #8]
 80216e2:	930e      	str	r3, [sp, #56]	@ 0x38
 80216e4:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 80216e8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80216ea:	2d00      	cmp	r5, #0
 80216ec:	d07c      	beq.n	80217e8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 80216ee:	45ac      	cmp	ip, r5
 80216f0:	d26c      	bcs.n	80217cc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25c>
 80216f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80216f4:	eba5 050c 	sub.w	r5, r5, ip
 80216f8:	455b      	cmp	r3, fp
 80216fa:	b2ad      	uxth	r5, r5
 80216fc:	4608      	mov	r0, r1
 80216fe:	d802      	bhi.n	8021706 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x196>
 8021700:	e070      	b.n	80217e4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>
 8021702:	2b00      	cmp	r3, #0
 8021704:	d15c      	bne.n	80217c0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x250>
 8021706:	9b03      	ldr	r3, [sp, #12]
 8021708:	9a02      	ldr	r2, [sp, #8]
 802170a:	785b      	ldrb	r3, [r3, #1]
 802170c:	f1c2 0207 	rsb	r2, r2, #7
 8021710:	4093      	lsls	r3, r2
 8021712:	005b      	lsls	r3, r3, #1
 8021714:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 8021718:	9b03      	ldr	r3, [sp, #12]
 802171a:	9902      	ldr	r1, [sp, #8]
 802171c:	781b      	ldrb	r3, [r3, #0]
 802171e:	410b      	asrs	r3, r1
 8021720:	3101      	adds	r1, #1
 8021722:	b2c9      	uxtb	r1, r1
 8021724:	2908      	cmp	r1, #8
 8021726:	9102      	str	r1, [sp, #8]
 8021728:	9903      	ldr	r1, [sp, #12]
 802172a:	b2db      	uxtb	r3, r3
 802172c:	bf03      	ittte	eq
 802172e:	3102      	addeq	r1, #2
 8021730:	9103      	streq	r1, [sp, #12]
 8021732:	2100      	moveq	r1, #0
 8021734:	3101      	addne	r1, #1
 8021736:	bf14      	ite	ne
 8021738:	9103      	strne	r1, [sp, #12]
 802173a:	9102      	streq	r1, [sp, #8]
 802173c:	4313      	orrs	r3, r2
 802173e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8021740:	b29a      	uxth	r2, r3
 8021742:	4291      	cmp	r1, r2
 8021744:	d30a      	bcc.n	802175c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ec>
 8021746:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 802174a:	2301      	movs	r3, #1
 802174c:	9905      	ldr	r1, [sp, #20]
 802174e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8021752:	d30f      	bcc.n	8021774 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x204>
 8021754:	2100      	movs	r1, #0
 8021756:	4698      	mov	r8, r3
 8021758:	9100      	str	r1, [sp, #0]
 802175a:	e032      	b.n	80217c2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x252>
 802175c:	9b05      	ldr	r3, [sp, #20]
 802175e:	429a      	cmp	r2, r3
 8021760:	d318      	bcc.n	8021794 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x224>
 8021762:	f894 1804 	ldrb.w	r1, [r4, #2052]	@ 0x804
 8021766:	eb04 0308 	add.w	r3, r4, r8
 802176a:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 802176e:	f108 0301 	add.w	r3, r8, #1
 8021772:	b29b      	uxth	r3, r3
 8021774:	9905      	ldr	r1, [sp, #20]
 8021776:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 802177a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 802177e:	710e      	strb	r6, [r1, #4]
 8021780:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8021782:	80ce      	strh	r6, [r1, #6]
 8021784:	f108 0601 	add.w	r6, r8, #1
 8021788:	714e      	strb	r6, [r1, #5]
 802178a:	9905      	ldr	r1, [sp, #20]
 802178c:	3101      	adds	r1, #1
 802178e:	b289      	uxth	r1, r1
 8021790:	9105      	str	r1, [sp, #20]
 8021792:	e7df      	b.n	8021754 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e4>
 8021794:	4611      	mov	r1, r2
 8021796:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802179a:	795b      	ldrb	r3, [r3, #5]
 802179c:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 80217a0:	4426      	add	r6, r4
 80217a2:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 80217a4:	4437      	add	r7, r6
 80217a6:	2f00      	cmp	r7, #0
 80217a8:	dd06      	ble.n	80217b8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x248>
 80217aa:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80217ae:	790f      	ldrb	r7, [r1, #4]
 80217b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80217b4:	88c9      	ldrh	r1, [r1, #6]
 80217b6:	e7f4      	b.n	80217a2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x232>
 80217b8:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 80217bc:	b29b      	uxth	r3, r3
 80217be:	e7c5      	b.n	802174c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1dc>
 80217c0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80217c2:	920c      	str	r2, [sp, #48]	@ 0x30
 80217c4:	4601      	mov	r1, r0
 80217c6:	9a00      	ldr	r2, [sp, #0]
 80217c8:	469c      	mov	ip, r3
 80217ca:	e78e      	b.n	80216ea <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17a>
 80217cc:	1957      	adds	r7, r2, r5
 80217ce:	ebac 0305 	sub.w	r3, ip, r5
 80217d2:	b2ba      	uxth	r2, r7
 80217d4:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 80217d8:	b29b      	uxth	r3, r3
 80217da:	9200      	str	r2, [sp, #0]
 80217dc:	2500      	movs	r5, #0
 80217de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80217e0:	455a      	cmp	r2, fp
 80217e2:	d88e      	bhi.n	8021702 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x192>
 80217e4:	4601      	mov	r1, r0
 80217e6:	e749      	b.n	802167c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x10c>
 80217e8:	458c      	cmp	ip, r1
 80217ea:	bf2c      	ite	cs
 80217ec:	4628      	movcs	r0, r5
 80217ee:	462b      	movcc	r3, r5
 80217f0:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80217f2:	bf27      	ittee	cs
 80217f4:	ebac 0301 	subcs.w	r3, ip, r1
 80217f8:	9109      	strcs	r1, [sp, #36]	@ 0x24
 80217fa:	eba1 000c 	subcc.w	r0, r1, ip
 80217fe:	f8cd c024 	strcc.w	ip, [sp, #36]	@ 0x24
 8021802:	bf2c      	ite	cs
 8021804:	b29b      	uxthcs	r3, r3
 8021806:	b280      	uxthcc	r0, r0
 8021808:	2dff      	cmp	r5, #255	@ 0xff
 802180a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 802180c:	eb02 0705 	add.w	r7, r2, r5
 8021810:	b2bd      	uxth	r5, r7
 8021812:	9500      	str	r5, [sp, #0]
 8021814:	d12e      	bne.n	8021874 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>
 8021816:	465e      	mov	r6, fp
 8021818:	9d00      	ldr	r5, [sp, #0]
 802181a:	42aa      	cmp	r2, r5
 802181c:	f040 8083 	bne.w	8021926 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3b6>
 8021820:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021822:	458c      	cmp	ip, r1
 8021824:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 8021828:	d3d8      	bcc.n	80217dc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26c>
 802182a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802182c:	9904      	ldr	r1, [sp, #16]
 802182e:	8812      	ldrh	r2, [r2, #0]
 8021830:	1a52      	subs	r2, r2, r1
 8021832:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 8021836:	9a08      	ldr	r2, [sp, #32]
 8021838:	9916      	ldr	r1, [sp, #88]	@ 0x58
 802183a:	3201      	adds	r2, #1
 802183c:	428a      	cmp	r2, r1
 802183e:	9208      	str	r2, [sp, #32]
 8021840:	f040 8091 	bne.w	8021966 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f6>
 8021844:	f8bd 5070 	ldrh.w	r5, [sp, #112]	@ 0x70
 8021848:	f8bd c068 	ldrh.w	ip, [sp, #104]	@ 0x68
 802184c:	9b04      	ldr	r3, [sp, #16]
 802184e:	eba5 050c 	sub.w	r5, r5, ip
 8021852:	b2ad      	uxth	r5, r5
 8021854:	2d00      	cmp	r5, #0
 8021856:	bf0c      	ite	eq
 8021858:	4619      	moveq	r1, r3
 802185a:	2100      	movne	r1, #0
 802185c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802185e:	b289      	uxth	r1, r1
 8021860:	3301      	adds	r3, #1
 8021862:	930d      	str	r3, [sp, #52]	@ 0x34
 8021864:	e701      	b.n	802166a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xfa>
 8021866:	bf00      	nop
 8021868:	2005ba7c 	.word	0x2005ba7c
 802186c:	2005ba76 	.word	0x2005ba76
 8021870:	fffff7fb 	.word	0xfffff7fb
 8021874:	46d9      	mov	r9, fp
 8021876:	9d00      	ldr	r5, [sp, #0]
 8021878:	42aa      	cmp	r2, r5
 802187a:	d0d1      	beq.n	8021820 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b0>
 802187c:	1c55      	adds	r5, r2, #1
 802187e:	4422      	add	r2, r4
 8021880:	f892 e804 	ldrb.w	lr, [r2, #2052]	@ 0x804
 8021884:	9a06      	ldr	r2, [sp, #24]
 8021886:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 802188a:	4472      	add	r2, lr
 802188c:	9212      	str	r2, [sp, #72]	@ 0x48
 802188e:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8021890:	f8b9 2000 	ldrh.w	r2, [r9]
 8021894:	f897 a002 	ldrb.w	sl, [r7, #2]
 8021898:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 802189a:	1216      	asrs	r6, r2, #8
 802189c:	fb1a fa07 	smulbb	sl, sl, r7
 80218a0:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 80218a4:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 80218a6:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 80218aa:	fb06 a607 	mla	r6, r6, r7, sl
 80218ae:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 80218b0:	9517      	str	r5, [sp, #92]	@ 0x5c
 80218b2:	f897 a001 	ldrb.w	sl, [r7, #1]
 80218b6:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 80218b8:	10d5      	asrs	r5, r2, #3
 80218ba:	fb1a fa07 	smulbb	sl, sl, r7
 80218be:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 80218c2:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 80218c4:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 80218c8:	fb05 a507 	mla	r5, r5, r7, sl
 80218cc:	9f06      	ldr	r7, [sp, #24]
 80218ce:	00d2      	lsls	r2, r2, #3
 80218d0:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80218d4:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 80218d6:	b2d2      	uxtb	r2, r2
 80218d8:	fb1e fe07 	smulbb	lr, lr, r7
 80218dc:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 80218de:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80218e2:	fb02 e207 	mla	r2, r2, r7, lr
 80218e6:	b2b6      	uxth	r6, r6
 80218e8:	b292      	uxth	r2, r2
 80218ea:	b2ad      	uxth	r5, r5
 80218ec:	f106 0a01 	add.w	sl, r6, #1
 80218f0:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 80218f4:	f102 0e01 	add.w	lr, r2, #1
 80218f8:	f105 0a01 	add.w	sl, r5, #1
 80218fc:	eb0e 2e12 	add.w	lr, lr, r2, lsr #8
 8021900:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8021904:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 8021908:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 802190c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8021910:	ea4e 0606 	orr.w	r6, lr, r6
 8021914:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8021918:	ea46 060a 	orr.w	r6, r6, sl
 802191c:	f829 6b02 	strh.w	r6, [r9], #2
 8021920:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 8021924:	e7a7      	b.n	8021876 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x306>
 8021926:	f102 0e01 	add.w	lr, r2, #1
 802192a:	4422      	add	r2, r4
 802192c:	f892 5804 	ldrb.w	r5, [r2, #2052]	@ 0x804
 8021930:	9a06      	ldr	r2, [sp, #24]
 8021932:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021936:	eb02 0a05 	add.w	sl, r2, r5
 802193a:	f89a 9002 	ldrb.w	r9, [sl, #2]
 802193e:	4a13      	ldr	r2, [pc, #76]	@ (802198c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x41c>)
 8021940:	9f06      	ldr	r7, [sp, #24]
 8021942:	ea02 2909 	and.w	r9, r2, r9, lsl #8
 8021946:	f89a 2001 	ldrb.w	r2, [sl, #1]
 802194a:	00d2      	lsls	r2, r2, #3
 802194c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8021950:	ea49 0202 	orr.w	r2, r9, r2
 8021954:	f817 9005 	ldrb.w	r9, [r7, r5]
 8021958:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 802195c:	f826 2b02 	strh.w	r2, [r6], #2
 8021960:	fa1f f28e 	uxth.w	r2, lr
 8021964:	e758      	b.n	8021818 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a8>
 8021966:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 802196a:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 802196e:	1a2d      	subs	r5, r5, r0
 8021970:	b2ad      	uxth	r5, r5
 8021972:	2d00      	cmp	r5, #0
 8021974:	bf18      	it	ne
 8021976:	2000      	movne	r0, #0
 8021978:	e731      	b.n	80217de <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26e>
 802197a:	4b05      	ldr	r3, [pc, #20]	@ (8021990 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x420>)
 802197c:	6818      	ldr	r0, [r3, #0]
 802197e:	6803      	ldr	r3, [r0, #0]
 8021980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021982:	4798      	blx	r3
 8021984:	b01f      	add	sp, #124	@ 0x7c
 8021986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802198a:	bf00      	nop
 802198c:	fffff800 	.word	0xfffff800
 8021990:	2005ba7c 	.word	0x2005ba7c

08021994 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8021994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021998:	469b      	mov	fp, r3
 802199a:	4616      	mov	r6, r2
 802199c:	b091      	sub	sp, #68	@ 0x44
 802199e:	f9b3 2000 	ldrsh.w	r2, [r3]
 80219a2:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	@ 0x6c
 80219a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80219aa:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	@ 0x70
 80219ae:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 80219b2:	4604      	mov	r4, r0
 80219b4:	460d      	mov	r5, r1
 80219b6:	4640      	mov	r0, r8
 80219b8:	4659      	mov	r1, fp
 80219ba:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 80219be:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 80219c2:	f8ad 902c 	strh.w	r9, [sp, #44]	@ 0x2c
 80219c6:	f8ad 702e 	strh.w	r7, [sp, #46]	@ 0x2e
 80219ca:	f7f2 fbb1 	bl	8014130 <_ZN8touchgfx4RectaNERKS0_>
 80219ce:	4631      	mov	r1, r6
 80219d0:	4640      	mov	r0, r8
 80219d2:	f7f2 fbad 	bl	8014130 <_ZN8touchgfx4RectaNERKS0_>
 80219d6:	4b74      	ldr	r3, [pc, #464]	@ (8021ba8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 80219d8:	8818      	ldrh	r0, [r3, #0]
 80219da:	4b74      	ldr	r3, [pc, #464]	@ (8021bac <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 80219dc:	b202      	sxth	r2, r0
 80219de:	8819      	ldrh	r1, [r3, #0]
 80219e0:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 80219e4:	b20e      	sxth	r6, r1
 80219e6:	2b00      	cmp	r3, #0
 80219e8:	da07      	bge.n	80219fa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 80219ea:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 80219ee:	4463      	add	r3, ip
 80219f0:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 80219f4:	2300      	movs	r3, #0
 80219f6:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 80219fa:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 80219fe:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 8021a02:	1ad2      	subs	r2, r2, r3
 8021a04:	4594      	cmp	ip, r2
 8021a06:	bfc4      	itt	gt
 8021a08:	1ac2      	subgt	r2, r0, r3
 8021a0a:	f8ad 202c 	strhgt.w	r2, [sp, #44]	@ 0x2c
 8021a0e:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8021a12:	2a00      	cmp	r2, #0
 8021a14:	da07      	bge.n	8021a26 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 8021a16:	f8bd c02e 	ldrh.w	ip, [sp, #46]	@ 0x2e
 8021a1a:	4462      	add	r2, ip
 8021a1c:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 8021a20:	2200      	movs	r2, #0
 8021a22:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8021a26:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	@ 0x2a
 8021a2a:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 8021a2e:	eba6 060a 	sub.w	r6, r6, sl
 8021a32:	42b2      	cmp	r2, r6
 8021a34:	bfc4      	itt	gt
 8021a36:	eba1 020a 	subgt.w	r2, r1, sl
 8021a3a:	f8ad 202e 	strhgt.w	r2, [sp, #46]	@ 0x2e
 8021a3e:	4a5c      	ldr	r2, [pc, #368]	@ (8021bb0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 8021a40:	7812      	ldrb	r2, [r2, #0]
 8021a42:	b9a2      	cbnz	r2, 8021a6e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 8021a44:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 8021a48:	4286      	cmp	r6, r0
 8021a4a:	4640      	mov	r0, r8
 8021a4c:	9303      	str	r3, [sp, #12]
 8021a4e:	bf14      	ite	ne
 8021a50:	2600      	movne	r6, #0
 8021a52:	2601      	moveq	r6, #1
 8021a54:	f7f2 fbaf 	bl	80141b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8021a58:	9b03      	ldr	r3, [sp, #12]
 8021a5a:	b160      	cbz	r0, 8021a76 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 8021a5c:	2300      	movs	r3, #0
 8021a5e:	8023      	strh	r3, [r4, #0]
 8021a60:	8063      	strh	r3, [r4, #2]
 8021a62:	80a3      	strh	r3, [r4, #4]
 8021a64:	4620      	mov	r0, r4
 8021a66:	80e3      	strh	r3, [r4, #6]
 8021a68:	b011      	add	sp, #68	@ 0x44
 8021a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021a6e:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 8021a72:	428e      	cmp	r6, r1
 8021a74:	e7e9      	b.n	8021a4a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 8021a76:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8021a7a:	a90e      	add	r1, sp, #56	@ 0x38
 8021a7c:	9205      	str	r2, [sp, #20]
 8021a7e:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 8021a82:	900e      	str	r0, [sp, #56]	@ 0x38
 8021a84:	9206      	str	r2, [sp, #24]
 8021a86:	f8bb 2000 	ldrh.w	r2, [fp]
 8021a8a:	a80c      	add	r0, sp, #48	@ 0x30
 8021a8c:	1a9b      	subs	r3, r3, r2
 8021a8e:	b21b      	sxth	r3, r3
 8021a90:	9303      	str	r3, [sp, #12]
 8021a92:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8021a96:	f8ad 903c 	strh.w	r9, [sp, #60]	@ 0x3c
 8021a9a:	ebaa 0a03 	sub.w	sl, sl, r3
 8021a9e:	fa0f f38a 	sxth.w	r3, sl
 8021aa2:	9304      	str	r3, [sp, #16]
 8021aa4:	9b03      	ldr	r3, [sp, #12]
 8021aa6:	f8ad 703e 	strh.w	r7, [sp, #62]	@ 0x3e
 8021aaa:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8021aae:	9b04      	ldr	r3, [sp, #16]
 8021ab0:	f8df b104 	ldr.w	fp, [pc, #260]	@ 8021bb8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8021ab4:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8021ab8:	9b05      	ldr	r3, [sp, #20]
 8021aba:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8021abe:	9b06      	ldr	r3, [sp, #24]
 8021ac0:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8021ac4:	f7f7 fcf2 	bl	80194ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021ac8:	4640      	mov	r0, r8
 8021aca:	f7f7 fcc7 	bl	801945c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021ace:	a80e      	add	r0, sp, #56	@ 0x38
 8021ad0:	f7f7 fcc4 	bl	801945c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021ad4:	4b37      	ldr	r3, [pc, #220]	@ (8021bb4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8021ad6:	4628      	mov	r0, r5
 8021ad8:	881b      	ldrh	r3, [r3, #0]
 8021ada:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	@ 0x3c
 8021ade:	9307      	str	r3, [sp, #28]
 8021ae0:	682b      	ldr	r3, [r5, #0]
 8021ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021ae4:	4798      	blx	r3
 8021ae6:	f8bd 5032 	ldrh.w	r5, [sp, #50]	@ 0x32
 8021aea:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8021aee:	4681      	mov	r9, r0
 8021af0:	fb1a 3305 	smlabb	r3, sl, r5, r3
 8021af4:	f8db 0000 	ldr.w	r0, [fp]
 8021af8:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8021afa:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8021afe:	6803      	ldr	r3, [r0, #0]
 8021b00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8021b02:	4798      	blx	r3
 8021b04:	4607      	mov	r7, r0
 8021b06:	f8db 0000 	ldr.w	r0, [fp]
 8021b0a:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 8021b0e:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8021b12:	6803      	ldr	r3, [r0, #0]
 8021b14:	9109      	str	r1, [sp, #36]	@ 0x24
 8021b16:	9208      	str	r2, [sp, #32]
 8021b18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8021b1a:	4798      	blx	r3
 8021b1c:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8021b20:	f010 0f01 	tst.w	r0, #1
 8021b24:	d012      	beq.n	8021b4c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 8021b26:	f8db 0000 	ldr.w	r0, [fp]
 8021b2a:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 8021b2e:	6803      	ldr	r3, [r0, #0]
 8021b30:	9200      	str	r2, [sp, #0]
 8021b32:	6f1e      	ldr	r6, [r3, #112]	@ 0x70
 8021b34:	e898 0006 	ldmia.w	r8, {r1, r2}
 8021b38:	462b      	mov	r3, r5
 8021b3a:	47b0      	blx	r6
 8021b3c:	9b03      	ldr	r3, [sp, #12]
 8021b3e:	8023      	strh	r3, [r4, #0]
 8021b40:	9b04      	ldr	r3, [sp, #16]
 8021b42:	8063      	strh	r3, [r4, #2]
 8021b44:	9b05      	ldr	r3, [sp, #20]
 8021b46:	80a3      	strh	r3, [r4, #4]
 8021b48:	9b06      	ldr	r3, [sp, #24]
 8021b4a:	e78b      	b.n	8021a64 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 8021b4c:	fb09 f202 	mul.w	r2, r9, r2
 8021b50:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8021b54:	440f      	add	r7, r1
 8021b56:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	@ 0x36
 8021b5a:	b166      	cbz	r6, 8021b76 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8021b5c:	9a07      	ldr	r2, [sp, #28]
 8021b5e:	4592      	cmp	sl, r2
 8021b60:	d109      	bne.n	8021b76 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8021b62:	f8db 0000 	ldr.w	r0, [fp]
 8021b66:	fb09 f303 	mul.w	r3, r9, r3
 8021b6a:	6802      	ldr	r2, [r0, #0]
 8021b6c:	4629      	mov	r1, r5
 8021b6e:	6b96      	ldr	r6, [r2, #56]	@ 0x38
 8021b70:	463a      	mov	r2, r7
 8021b72:	47b0      	blx	r6
 8021b74:	e7e2      	b.n	8021b3c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8021b76:	fb0a f303 	mul.w	r3, sl, r3
 8021b7a:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 8021bb8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8021b7e:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 8021b82:	ea4f 064a 	mov.w	r6, sl, lsl #1
 8021b86:	4545      	cmp	r5, r8
 8021b88:	d2d8      	bcs.n	8021b3c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8021b8a:	f8db 0000 	ldr.w	r0, [fp]
 8021b8e:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8021b92:	6802      	ldr	r2, [r0, #0]
 8021b94:	4629      	mov	r1, r5
 8021b96:	f8d2 a038 	ldr.w	sl, [r2, #56]	@ 0x38
 8021b9a:	005b      	lsls	r3, r3, #1
 8021b9c:	463a      	mov	r2, r7
 8021b9e:	47d0      	blx	sl
 8021ba0:	444f      	add	r7, r9
 8021ba2:	4435      	add	r5, r6
 8021ba4:	e7ef      	b.n	8021b86 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 8021ba6:	bf00      	nop
 8021ba8:	2005ba70 	.word	0x2005ba70
 8021bac:	2005ba72 	.word	0x2005ba72
 8021bb0:	2005ba74 	.word	0x2005ba74
 8021bb4:	2005ba76 	.word	0x2005ba76
 8021bb8:	2005ba7c 	.word	0x2005ba7c

08021bbc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8021bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021bbe:	4606      	mov	r6, r0
 8021bc0:	b087      	sub	sp, #28
 8021bc2:	460c      	mov	r4, r1
 8021bc4:	4617      	mov	r7, r2
 8021bc6:	461d      	mov	r5, r3
 8021bc8:	b333      	cbz	r3, 8021c18 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8021bca:	4608      	mov	r0, r1
 8021bcc:	f7f2 faf3 	bl	80141b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8021bd0:	bb10      	cbnz	r0, 8021c18 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8021bd2:	6820      	ldr	r0, [r4, #0]
 8021bd4:	6861      	ldr	r1, [r4, #4]
 8021bd6:	ab04      	add	r3, sp, #16
 8021bd8:	4c1b      	ldr	r4, [pc, #108]	@ (8021c48 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 8021bda:	c303      	stmia	r3!, {r0, r1}
 8021bdc:	a804      	add	r0, sp, #16
 8021bde:	f7f7 fc3d 	bl	801945c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021be2:	6820      	ldr	r0, [r4, #0]
 8021be4:	6803      	ldr	r3, [r0, #0]
 8021be6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8021be8:	4798      	blx	r3
 8021bea:	2dff      	cmp	r5, #255	@ 0xff
 8021bec:	d016      	beq.n	8021c1c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 8021bee:	f010 0f08 	tst.w	r0, #8
 8021bf2:	6820      	ldr	r0, [r4, #0]
 8021bf4:	d015      	beq.n	8021c22 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8021bf6:	2400      	movs	r4, #0
 8021bf8:	6801      	ldr	r1, [r0, #0]
 8021bfa:	e9cd 5402 	strd	r5, r4, [sp, #8]
 8021bfe:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8021c02:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8021c06:	9401      	str	r4, [sp, #4]
 8021c08:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8021c0c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8021c10:	9400      	str	r4, [sp, #0]
 8021c12:	6e4c      	ldr	r4, [r1, #100]	@ 0x64
 8021c14:	4639      	mov	r1, r7
 8021c16:	47a0      	blx	r4
 8021c18:	b007      	add	sp, #28
 8021c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021c1c:	f010 0f02 	tst.w	r0, #2
 8021c20:	e7e7      	b.n	8021bf2 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 8021c22:	6803      	ldr	r3, [r0, #0]
 8021c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021c26:	4798      	blx	r3
 8021c28:	4b08      	ldr	r3, [pc, #32]	@ (8021c4c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8021c2a:	4601      	mov	r1, r0
 8021c2c:	881a      	ldrh	r2, [r3, #0]
 8021c2e:	e9cd 7500 	strd	r7, r5, [sp]
 8021c32:	6833      	ldr	r3, [r6, #0]
 8021c34:	4630      	mov	r0, r6
 8021c36:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8021c38:	ab04      	add	r3, sp, #16
 8021c3a:	47a8      	blx	r5
 8021c3c:	6820      	ldr	r0, [r4, #0]
 8021c3e:	6803      	ldr	r3, [r0, #0]
 8021c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021c42:	4798      	blx	r3
 8021c44:	e7e8      	b.n	8021c18 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8021c46:	bf00      	nop
 8021c48:	2005ba7c 	.word	0x2005ba7c
 8021c4c:	2005ba76 	.word	0x2005ba76

08021c50 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8021c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021c54:	f89d 7024 	ldrb.w	r7, [sp, #36]	@ 0x24
 8021c58:	4688      	mov	r8, r1
 8021c5a:	4614      	mov	r4, r2
 8021c5c:	461d      	mov	r5, r3
 8021c5e:	9e08      	ldr	r6, [sp, #32]
 8021c60:	2f00      	cmp	r7, #0
 8021c62:	f000 80a9 	beq.w	8021db8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8021c66:	4618      	mov	r0, r3
 8021c68:	f7f2 faa5 	bl	80141b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8021c6c:	2800      	cmp	r0, #0
 8021c6e:	f040 80a3 	bne.w	8021db8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8021c72:	f9b5 1000 	ldrsh.w	r1, [r5]
 8021c76:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8021c7a:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8021c7e:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 8021c82:	fb04 1303 	mla	r3, r4, r3, r1
 8021c86:	4365      	muls	r5, r4
 8021c88:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 8021c8c:	2fff      	cmp	r7, #255	@ 0xff
 8021c8e:	eba4 0200 	sub.w	r2, r4, r0
 8021c92:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 8021c96:	ea4f 2816 	mov.w	r8, r6, lsr #8
 8021c9a:	d04a      	beq.n	8021d32 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 8021c9c:	b2bc      	uxth	r4, r7
 8021c9e:	f1c7 0cff 	rsb	ip, r7, #255	@ 0xff
 8021ca2:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8021ca6:	fa5f f788 	uxtb.w	r7, r8
 8021caa:	b2f3      	uxtb	r3, r6
 8021cac:	fb0e fe04 	mul.w	lr, lr, r4
 8021cb0:	4367      	muls	r7, r4
 8021cb2:	4363      	muls	r3, r4
 8021cb4:	0040      	lsls	r0, r0, #1
 8021cb6:	ea4f 0842 	mov.w	r8, r2, lsl #1
 8021cba:	fa1f fc8c 	uxth.w	ip, ip
 8021cbe:	42a9      	cmp	r1, r5
 8021cc0:	d27a      	bcs.n	8021db8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8021cc2:	eb01 0900 	add.w	r9, r1, r0
 8021cc6:	4549      	cmp	r1, r9
 8021cc8:	d231      	bcs.n	8021d2e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xde>
 8021cca:	880a      	ldrh	r2, [r1, #0]
 8021ccc:	1214      	asrs	r4, r2, #8
 8021cce:	10d6      	asrs	r6, r2, #3
 8021cd0:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8021cd4:	00d2      	lsls	r2, r2, #3
 8021cd6:	b2d2      	uxtb	r2, r2
 8021cd8:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8021cdc:	fb14 f40c 	smulbb	r4, r4, ip
 8021ce0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8021ce4:	fb12 f20c 	smulbb	r2, r2, ip
 8021ce8:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8021cec:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8021cf0:	4474      	add	r4, lr
 8021cf2:	fb16 f60c 	smulbb	r6, r6, ip
 8021cf6:	b2a4      	uxth	r4, r4
 8021cf8:	441a      	add	r2, r3
 8021cfa:	b292      	uxth	r2, r2
 8021cfc:	f104 0a01 	add.w	sl, r4, #1
 8021d00:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8021d04:	f102 0a01 	add.w	sl, r2, #1
 8021d08:	443e      	add	r6, r7
 8021d0a:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 8021d0e:	b2b6      	uxth	r6, r6
 8021d10:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 8021d14:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8021d18:	4322      	orrs	r2, r4
 8021d1a:	1c74      	adds	r4, r6, #1
 8021d1c:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8021d20:	0976      	lsrs	r6, r6, #5
 8021d22:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8021d26:	4332      	orrs	r2, r6
 8021d28:	f821 2b02 	strh.w	r2, [r1], #2
 8021d2c:	e7cb      	b.n	8021cc6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x76>
 8021d2e:	4441      	add	r1, r8
 8021d30:	e7c5      	b.n	8021cbe <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6e>
 8021d32:	4f22      	ldr	r7, [pc, #136]	@ (8021dbc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>)
 8021d34:	0973      	lsrs	r3, r6, #5
 8021d36:	ea08 0707 	and.w	r7, r8, r7
 8021d3a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8021d3e:	433b      	orrs	r3, r7
 8021d40:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8021d44:	4333      	orrs	r3, r6
 8021d46:	07e7      	lsls	r7, r4, #31
 8021d48:	b29b      	uxth	r3, r3
 8021d4a:	d50b      	bpl.n	8021d64 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 8021d4c:	0040      	lsls	r0, r0, #1
 8021d4e:	0052      	lsls	r2, r2, #1
 8021d50:	42a9      	cmp	r1, r5
 8021d52:	d231      	bcs.n	8021db8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8021d54:	180c      	adds	r4, r1, r0
 8021d56:	42a1      	cmp	r1, r4
 8021d58:	d202      	bcs.n	8021d60 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x110>
 8021d5a:	f821 3b02 	strh.w	r3, [r1], #2
 8021d5e:	e7fa      	b.n	8021d56 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x106>
 8021d60:	4411      	add	r1, r2
 8021d62:	e7f5      	b.n	8021d50 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x100>
 8021d64:	078e      	lsls	r6, r1, #30
 8021d66:	d008      	beq.n	8021d7a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 8021d68:	460a      	mov	r2, r1
 8021d6a:	0066      	lsls	r6, r4, #1
 8021d6c:	42aa      	cmp	r2, r5
 8021d6e:	d202      	bcs.n	8021d76 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x126>
 8021d70:	8013      	strh	r3, [r2, #0]
 8021d72:	4432      	add	r2, r6
 8021d74:	e7fa      	b.n	8021d6c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x11c>
 8021d76:	3102      	adds	r1, #2
 8021d78:	3801      	subs	r0, #1
 8021d7a:	07c2      	lsls	r2, r0, #31
 8021d7c:	d50b      	bpl.n	8021d96 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 8021d7e:	f100 4200 	add.w	r2, r0, #2147483648	@ 0x80000000
 8021d82:	3a01      	subs	r2, #1
 8021d84:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8021d88:	0066      	lsls	r6, r4, #1
 8021d8a:	42aa      	cmp	r2, r5
 8021d8c:	d202      	bcs.n	8021d94 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 8021d8e:	8013      	strh	r3, [r2, #0]
 8021d90:	4432      	add	r2, r6
 8021d92:	e7fa      	b.n	8021d8a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13a>
 8021d94:	3801      	subs	r0, #1
 8021d96:	b178      	cbz	r0, 8021db8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8021d98:	1040      	asrs	r0, r0, #1
 8021d9a:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 8021d9e:	0080      	lsls	r0, r0, #2
 8021da0:	0064      	lsls	r4, r4, #1
 8021da2:	42a9      	cmp	r1, r5
 8021da4:	d208      	bcs.n	8021db8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8021da6:	460a      	mov	r2, r1
 8021da8:	180e      	adds	r6, r1, r0
 8021daa:	42b2      	cmp	r2, r6
 8021dac:	d202      	bcs.n	8021db4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x164>
 8021dae:	f842 3b04 	str.w	r3, [r2], #4
 8021db2:	e7fa      	b.n	8021daa <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15a>
 8021db4:	4421      	add	r1, r4
 8021db6:	e7f4      	b.n	8021da2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x152>
 8021db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021dbc:	00fff800 	.word	0x00fff800

08021dc0 <_ZN8touchgfx8LCD16bppC1Ev>:
 8021dc0:	2200      	movs	r2, #0
 8021dc2:	4912      	ldr	r1, [pc, #72]	@ (8021e0c <_ZN8touchgfx8LCD16bppC1Ev+0x4c>)
 8021dc4:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8021dc8:	6001      	str	r1, [r0, #0]
 8021dca:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8021dce:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8021dd2:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8021dd6:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 8021dda:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 8021dde:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 8021de2:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 8021de6:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 8021dea:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 8021dee:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 8021df2:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 8021df6:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 8021dfa:	e9c0 221b 	strd	r2, r2, [r0, #108]	@ 0x6c
 8021dfe:	e9c0 221d 	strd	r2, r2, [r0, #116]	@ 0x74
 8021e02:	e9c0 221f 	strd	r2, r2, [r0, #124]	@ 0x7c
 8021e06:	e9c0 2221 	strd	r2, r2, [r0, #132]	@ 0x84
 8021e0a:	4770      	bx	lr
 8021e0c:	0802fec0 	.word	0x0802fec0

08021e10 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8021e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e14:	460d      	mov	r5, r1
 8021e16:	4604      	mov	r4, r0
 8021e18:	4699      	mov	r9, r3
 8021e1a:	b08d      	sub	sp, #52	@ 0x34
 8021e1c:	6808      	ldr	r0, [r1, #0]
 8021e1e:	6849      	ldr	r1, [r1, #4]
 8021e20:	ab08      	add	r3, sp, #32
 8021e22:	c303      	stmia	r3!, {r0, r1}
 8021e24:	6810      	ldr	r0, [r2, #0]
 8021e26:	6851      	ldr	r1, [r2, #4]
 8021e28:	ab0a      	add	r3, sp, #40	@ 0x28
 8021e2a:	c303      	stmia	r3!, {r0, r1}
 8021e2c:	a808      	add	r0, sp, #32
 8021e2e:	f7f7 fb15 	bl	801945c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021e32:	4629      	mov	r1, r5
 8021e34:	a80a      	add	r0, sp, #40	@ 0x28
 8021e36:	f7f7 fb39 	bl	80194ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021e3a:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 8021e3e:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	@ 0x2a
 8021e42:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 8021e46:	4d63      	ldr	r5, [pc, #396]	@ (8021fd4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8021e48:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021e4c:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8021e50:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8021e54:	6828      	ldr	r0, [r5, #0]
 8021e56:	440a      	add	r2, r1
 8021e58:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8021e5c:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 8021e60:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	@ 0x2c
 8021e64:	4413      	add	r3, r2
 8021e66:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8021e6a:	6803      	ldr	r3, [r0, #0]
 8021e6c:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 8021e70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8021e72:	4798      	blx	r3
 8021e74:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8021e78:	d119      	bne.n	8021eae <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 8021e7a:	f010 0f20 	tst.w	r0, #32
 8021e7e:	6828      	ldr	r0, [r5, #0]
 8021e80:	d018      	beq.n	8021eb4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 8021e82:	2500      	movs	r5, #0
 8021e84:	6801      	ldr	r1, [r0, #0]
 8021e86:	e9cd 9503 	strd	r9, r5, [sp, #12]
 8021e8a:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 8021e8e:	b2b6      	uxth	r6, r6
 8021e90:	9502      	str	r5, [sp, #8]
 8021e92:	fa1f f588 	uxth.w	r5, r8
 8021e96:	9601      	str	r6, [sp, #4]
 8021e98:	9500      	str	r5, [sp, #0]
 8021e9a:	6d4d      	ldr	r5, [r1, #84]	@ 0x54
 8021e9c:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8021ea0:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 8021ea4:	4621      	mov	r1, r4
 8021ea6:	47a8      	blx	r5
 8021ea8:	b00d      	add	sp, #52	@ 0x34
 8021eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021eae:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8021eb2:	e7e4      	b.n	8021e7e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8021eb4:	6803      	ldr	r3, [r0, #0]
 8021eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021eb8:	4798      	blx	r3
 8021eba:	4947      	ldr	r1, [pc, #284]	@ (8021fd8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 8021ebc:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8021ec0:	468a      	mov	sl, r1
 8021ec2:	880b      	ldrh	r3, [r1, #0]
 8021ec4:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	@ 0x28
 8021ec8:	fb03 5202 	mla	r2, r3, r2, r5
 8021ecc:	4373      	muls	r3, r6
 8021ece:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8021ed2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8021ed6:	9307      	str	r3, [sp, #28]
 8021ed8:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8021edc:	9306      	str	r3, [sp, #24]
 8021ede:	9b07      	ldr	r3, [sp, #28]
 8021ee0:	4298      	cmp	r0, r3
 8021ee2:	d270      	bcs.n	8021fc6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 8021ee4:	4621      	mov	r1, r4
 8021ee6:	9b06      	ldr	r3, [sp, #24]
 8021ee8:	eb00 0b03 	add.w	fp, r0, r3
 8021eec:	4558      	cmp	r0, fp
 8021eee:	d25d      	bcs.n	8021fac <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 8021ef0:	f851 4b04 	ldr.w	r4, [r1], #4
 8021ef4:	0e23      	lsrs	r3, r4, #24
 8021ef6:	d014      	beq.n	8021f22 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8021ef8:	2bff      	cmp	r3, #255	@ 0xff
 8021efa:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8021efe:	d112      	bne.n	8021f26 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8021f00:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8021f04:	d10f      	bne.n	8021f26 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8021f06:	0963      	lsrs	r3, r4, #5
 8021f08:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 8021f0c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8021f10:	f02c 0c07 	bic.w	ip, ip, #7
 8021f14:	ea43 0c0c 	orr.w	ip, r3, ip
 8021f18:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8021f1c:	ea4c 0404 	orr.w	r4, ip, r4
 8021f20:	8004      	strh	r4, [r0, #0]
 8021f22:	3002      	adds	r0, #2
 8021f24:	e7e2      	b.n	8021eec <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 8021f26:	fb09 f303 	mul.w	r3, r9, r3
 8021f2a:	1c5a      	adds	r2, r3, #1
 8021f2c:	eb02 2223 	add.w	r2, r2, r3, asr #8
 8021f30:	1212      	asrs	r2, r2, #8
 8021f32:	b293      	uxth	r3, r2
 8021f34:	43d2      	mvns	r2, r2
 8021f36:	8807      	ldrh	r7, [r0, #0]
 8021f38:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8021f3c:	fb1e fe03 	smulbb	lr, lr, r3
 8021f40:	123e      	asrs	r6, r7, #8
 8021f42:	fa5f fc8c 	uxtb.w	ip, ip
 8021f46:	b2e4      	uxtb	r4, r4
 8021f48:	fb1c fc03 	smulbb	ip, ip, r3
 8021f4c:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8021f50:	fb14 f403 	smulbb	r4, r4, r3
 8021f54:	b2d2      	uxtb	r2, r2
 8021f56:	10fd      	asrs	r5, r7, #3
 8021f58:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8021f5c:	00ff      	lsls	r7, r7, #3
 8021f5e:	fb06 e602 	mla	r6, r6, r2, lr
 8021f62:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8021f66:	b2ff      	uxtb	r7, r7
 8021f68:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8021f6c:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 8021f70:	fb05 c502 	mla	r5, r5, r2, ip
 8021f74:	fb07 4702 	mla	r7, r7, r2, r4
 8021f78:	b2b6      	uxth	r6, r6
 8021f7a:	f106 0e01 	add.w	lr, r6, #1
 8021f7e:	b2ad      	uxth	r5, r5
 8021f80:	b2bf      	uxth	r7, r7
 8021f82:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8021f86:	f406 4e78 	and.w	lr, r6, #63488	@ 0xf800
 8021f8a:	f105 0c01 	add.w	ip, r5, #1
 8021f8e:	1c7e      	adds	r6, r7, #1
 8021f90:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8021f94:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8021f98:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8021f9c:	096d      	lsrs	r5, r5, #5
 8021f9e:	ea46 060e 	orr.w	r6, r6, lr
 8021fa2:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8021fa6:	432e      	orrs	r6, r5
 8021fa8:	8006      	strh	r6, [r0, #0]
 8021faa:	e7ba      	b.n	8021f22 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8021fac:	f8ba 3000 	ldrh.w	r3, [sl]
 8021fb0:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	@ 0x24
 8021fb4:	eba3 0308 	sub.w	r3, r3, r8
 8021fb8:	eba4 0408 	sub.w	r4, r4, r8
 8021fbc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021fc0:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8021fc4:	e78b      	b.n	8021ede <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 8021fc6:	4b03      	ldr	r3, [pc, #12]	@ (8021fd4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8021fc8:	6818      	ldr	r0, [r3, #0]
 8021fca:	6803      	ldr	r3, [r0, #0]
 8021fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021fce:	4798      	blx	r3
 8021fd0:	e76a      	b.n	8021ea8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 8021fd2:	bf00      	nop
 8021fd4:	2005ba7c 	.word	0x2005ba7c
 8021fd8:	2005ba76 	.word	0x2005ba76

08021fdc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 8021fdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021fe0:	b085      	sub	sp, #20
 8021fe2:	466d      	mov	r5, sp
 8021fe4:	4616      	mov	r6, r2
 8021fe6:	460c      	mov	r4, r1
 8021fe8:	6810      	ldr	r0, [r2, #0]
 8021fea:	6851      	ldr	r1, [r2, #4]
 8021fec:	c503      	stmia	r5!, {r0, r1}
 8021fee:	6818      	ldr	r0, [r3, #0]
 8021ff0:	6859      	ldr	r1, [r3, #4]
 8021ff2:	c503      	stmia	r5!, {r0, r1}
 8021ff4:	4668      	mov	r0, sp
 8021ff6:	f7f7 fa31 	bl	801945c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021ffa:	4631      	mov	r1, r6
 8021ffc:	a802      	add	r0, sp, #8
 8021ffe:	f7f7 fa55 	bl	80194ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022002:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8022006:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 802200a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 802200e:	4d28      	ldr	r5, [pc, #160]	@ (80220b0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 8022010:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022014:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8022018:	f8bd 1000 	ldrh.w	r1, [sp]
 802201c:	6828      	ldr	r0, [r5, #0]
 802201e:	440a      	add	r2, r1
 8022020:	f8ad 2008 	strh.w	r2, [sp, #8]
 8022024:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8022028:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 802202c:	4413      	add	r3, r2
 802202e:	f8ad 300a 	strh.w	r3, [sp, #10]
 8022032:	6803      	ldr	r3, [r0, #0]
 8022034:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 8022038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802203a:	4798      	blx	r3
 802203c:	4e1d      	ldr	r6, [pc, #116]	@ (80220b4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 802203e:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8022042:	8833      	ldrh	r3, [r6, #0]
 8022044:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8022048:	f8df e06c 	ldr.w	lr, [pc, #108]	@ 80220b8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 802204c:	fb03 1202 	mla	r2, r3, r2, r1
 8022050:	fb08 f303 	mul.w	r3, r8, r3
 8022054:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8022058:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 802205c:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 8022060:	4298      	cmp	r0, r3
 8022062:	d21d      	bcs.n	80220a0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 8022064:	eb00 080c 	add.w	r8, r0, ip
 8022068:	4540      	cmp	r0, r8
 802206a:	d20f      	bcs.n	802208c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 802206c:	f854 1b04 	ldr.w	r1, [r4], #4
 8022070:	ea4f 1951 	mov.w	r9, r1, lsr #5
 8022074:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 8022078:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 802207c:	ea42 0209 	orr.w	r2, r2, r9
 8022080:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8022084:	430a      	orrs	r2, r1
 8022086:	f820 2b02 	strh.w	r2, [r0], #2
 802208a:	e7ed      	b.n	8022068 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 802208c:	8832      	ldrh	r2, [r6, #0]
 802208e:	1bd2      	subs	r2, r2, r7
 8022090:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8022094:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8022098:	1bd2      	subs	r2, r2, r7
 802209a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 802209e:	e7df      	b.n	8022060 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 80220a0:	6828      	ldr	r0, [r5, #0]
 80220a2:	6803      	ldr	r3, [r0, #0]
 80220a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80220a6:	4798      	blx	r3
 80220a8:	b005      	add	sp, #20
 80220aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80220ae:	bf00      	nop
 80220b0:	2005ba7c 	.word	0x2005ba7c
 80220b4:	2005ba76 	.word	0x2005ba76
 80220b8:	fffff800 	.word	0xfffff800

080220bc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 80220bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80220c0:	460e      	mov	r6, r1
 80220c2:	4604      	mov	r4, r0
 80220c4:	461d      	mov	r5, r3
 80220c6:	b08e      	sub	sp, #56	@ 0x38
 80220c8:	6808      	ldr	r0, [r1, #0]
 80220ca:	6849      	ldr	r1, [r1, #4]
 80220cc:	ab0a      	add	r3, sp, #40	@ 0x28
 80220ce:	c303      	stmia	r3!, {r0, r1}
 80220d0:	6810      	ldr	r0, [r2, #0]
 80220d2:	6851      	ldr	r1, [r2, #4]
 80220d4:	ab0c      	add	r3, sp, #48	@ 0x30
 80220d6:	c303      	stmia	r3!, {r0, r1}
 80220d8:	a80a      	add	r0, sp, #40	@ 0x28
 80220da:	f7f7 f9bf 	bl	801945c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80220de:	4631      	mov	r1, r6
 80220e0:	a80c      	add	r0, sp, #48	@ 0x30
 80220e2:	f7f7 f9e3 	bl	80194ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80220e6:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 80220ea:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 80220ee:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 80220f2:	f8df 81b0 	ldr.w	r8, [pc, #432]	@ 80222a4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 80220f6:	fb11 2103 	smlabb	r1, r1, r3, r2
 80220fa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80220fe:	440c      	add	r4, r1
 8022100:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 8022104:	f8d8 0000 	ldr.w	r0, [r8]
 8022108:	440a      	add	r2, r1
 802210a:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 802210e:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8022112:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 8022116:	4413      	add	r3, r2
 8022118:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 802211c:	6803      	ldr	r3, [r0, #0]
 802211e:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 8022122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8022124:	4798      	blx	r3
 8022126:	2dff      	cmp	r5, #255	@ 0xff
 8022128:	f8df 917c 	ldr.w	r9, [pc, #380]	@ 80222a8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 802212c:	d124      	bne.n	8022178 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 802212e:	f010 0f01 	tst.w	r0, #1
 8022132:	f8d8 0000 	ldr.w	r0, [r8]
 8022136:	d022      	beq.n	802217e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 8022138:	2100      	movs	r1, #0
 802213a:	f04f 0e01 	mov.w	lr, #1
 802213e:	f8d0 c000 	ldr.w	ip, [r0]
 8022142:	e9cd 1107 	strd	r1, r1, [sp, #28]
 8022146:	f8cd e018 	str.w	lr, [sp, #24]
 802214a:	f8b9 e000 	ldrh.w	lr, [r9]
 802214e:	b2b6      	uxth	r6, r6
 8022150:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8022154:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8022158:	b2bf      	uxth	r7, r7
 802215a:	9102      	str	r1, [sp, #8]
 802215c:	9503      	str	r5, [sp, #12]
 802215e:	9601      	str	r6, [sp, #4]
 8022160:	9700      	str	r7, [sp, #0]
 8022162:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8022166:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 802216a:	f8dc 5044 	ldr.w	r5, [ip, #68]	@ 0x44
 802216e:	4621      	mov	r1, r4
 8022170:	47a8      	blx	r5
 8022172:	b00e      	add	sp, #56	@ 0x38
 8022174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022178:	f010 0f04 	tst.w	r0, #4
 802217c:	e7d9      	b.n	8022132 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 802217e:	6803      	ldr	r3, [r0, #0]
 8022180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022182:	4798      	blx	r3
 8022184:	f8b9 3000 	ldrh.w	r3, [r9]
 8022188:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 802218c:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 8022190:	435e      	muls	r6, r3
 8022192:	fb03 1202 	mla	r2, r3, r2, r1
 8022196:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 802219a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 802219e:	ebac 0c07 	sub.w	ip, ip, r7
 80221a2:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 80221a6:	2dff      	cmp	r5, #255	@ 0xff
 80221a8:	eba3 0707 	sub.w	r7, r3, r7
 80221ac:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80221b0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80221b4:	ea4f 0747 	mov.w	r7, r7, lsl #1
 80221b8:	d049      	beq.n	802224e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 80221ba:	43eb      	mvns	r3, r5
 80221bc:	fa1f f985 	uxth.w	r9, r5
 80221c0:	b2db      	uxtb	r3, r3
 80221c2:	42b0      	cmp	r0, r6
 80221c4:	d266      	bcs.n	8022294 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 80221c6:	eb00 0a0e 	add.w	sl, r0, lr
 80221ca:	4550      	cmp	r0, sl
 80221cc:	4621      	mov	r1, r4
 80221ce:	f104 0403 	add.w	r4, r4, #3
 80221d2:	d25b      	bcs.n	802228c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 80221d4:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 80221d8:	8802      	ldrh	r2, [r0, #0]
 80221da:	fb11 f109 	smulbb	r1, r1, r9
 80221de:	ea4f 2822 	mov.w	r8, r2, asr #8
 80221e2:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 80221e6:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 80221ea:	fb08 1803 	mla	r8, r8, r3, r1
 80221ee:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 80221f2:	10d5      	asrs	r5, r2, #3
 80221f4:	fb11 f109 	smulbb	r1, r1, r9
 80221f8:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 80221fc:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8022200:	fb05 1503 	mla	r5, r5, r3, r1
 8022204:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8022208:	00d2      	lsls	r2, r2, #3
 802220a:	fb11 f109 	smulbb	r1, r1, r9
 802220e:	b2d2      	uxtb	r2, r2
 8022210:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8022214:	fb02 1203 	mla	r2, r2, r3, r1
 8022218:	fa1f f888 	uxth.w	r8, r8
 802221c:	b292      	uxth	r2, r2
 802221e:	f108 0101 	add.w	r1, r8, #1
 8022222:	b2ad      	uxth	r5, r5
 8022224:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8022228:	1c51      	adds	r1, r2, #1
 802222a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802222e:	1c69      	adds	r1, r5, #1
 8022230:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8022234:	f408 4878 	and.w	r8, r8, #63488	@ 0xf800
 8022238:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802223c:	096d      	lsrs	r5, r5, #5
 802223e:	ea42 0208 	orr.w	r2, r2, r8
 8022242:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8022246:	432a      	orrs	r2, r5
 8022248:	f820 2b02 	strh.w	r2, [r0], #2
 802224c:	e7bd      	b.n	80221ca <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 802224e:	4a14      	ldr	r2, [pc, #80]	@ (80222a0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 8022250:	42b0      	cmp	r0, r6
 8022252:	d21f      	bcs.n	8022294 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8022254:	eb00 050e 	add.w	r5, r0, lr
 8022258:	42a8      	cmp	r0, r5
 802225a:	4621      	mov	r1, r4
 802225c:	f104 0403 	add.w	r4, r4, #3
 8022260:	d210      	bcs.n	8022284 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 8022262:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 8022266:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 802226a:	00db      	lsls	r3, r3, #3
 802226c:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 8022270:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8022274:	430b      	orrs	r3, r1
 8022276:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 802227a:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 802227e:	f820 3b02 	strh.w	r3, [r0], #2
 8022282:	e7e9      	b.n	8022258 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 8022284:	4438      	add	r0, r7
 8022286:	eb01 040c 	add.w	r4, r1, ip
 802228a:	e7e1      	b.n	8022250 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 802228c:	4438      	add	r0, r7
 802228e:	eb01 040c 	add.w	r4, r1, ip
 8022292:	e796      	b.n	80221c2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 8022294:	4b03      	ldr	r3, [pc, #12]	@ (80222a4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 8022296:	6818      	ldr	r0, [r3, #0]
 8022298:	6803      	ldr	r3, [r0, #0]
 802229a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802229c:	4798      	blx	r3
 802229e:	e768      	b.n	8022172 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 80222a0:	fffff800 	.word	0xfffff800
 80222a4:	2005ba7c 	.word	0x2005ba7c
 80222a8:	2005ba76 	.word	0x2005ba76

080222ac <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 80222ac:	b4f0      	push	{r4, r5, r6, r7}
 80222ae:	4616      	mov	r6, r2
 80222b0:	2e01      	cmp	r6, #1
 80222b2:	461c      	mov	r4, r3
 80222b4:	460d      	mov	r5, r1
 80222b6:	9a04      	ldr	r2, [sp, #16]
 80222b8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80222bc:	f89d 7018 	ldrb.w	r7, [sp, #24]
 80222c0:	d012      	beq.n	80222e8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 80222c2:	d303      	bcc.n	80222cc <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 80222c4:	2e02      	cmp	r6, #2
 80222c6:	d00a      	beq.n	80222de <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 80222c8:	bcf0      	pop	{r4, r5, r6, r7}
 80222ca:	4770      	bx	lr
 80222cc:	6805      	ldr	r5, [r0, #0]
 80222ce:	e9cd 3704 	strd	r3, r7, [sp, #16]
 80222d2:	68ed      	ldr	r5, [r5, #12]
 80222d4:	4613      	mov	r3, r2
 80222d6:	46ac      	mov	ip, r5
 80222d8:	4622      	mov	r2, r4
 80222da:	bcf0      	pop	{r4, r5, r6, r7}
 80222dc:	4760      	bx	ip
 80222de:	4621      	mov	r1, r4
 80222e0:	4628      	mov	r0, r5
 80222e2:	bcf0      	pop	{r4, r5, r6, r7}
 80222e4:	f7ff bd94 	b.w	8021e10 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80222e8:	4621      	mov	r1, r4
 80222ea:	4628      	mov	r0, r5
 80222ec:	bcf0      	pop	{r4, r5, r6, r7}
 80222ee:	f7ff bee5 	b.w	80220bc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

080222f4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 80222f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80222f8:	4616      	mov	r6, r2
 80222fa:	4681      	mov	r9, r0
 80222fc:	b093      	sub	sp, #76	@ 0x4c
 80222fe:	6810      	ldr	r0, [r2, #0]
 8022300:	4688      	mov	r8, r1
 8022302:	6851      	ldr	r1, [r2, #4]
 8022304:	ac0e      	add	r4, sp, #56	@ 0x38
 8022306:	c403      	stmia	r4!, {r0, r1}
 8022308:	6818      	ldr	r0, [r3, #0]
 802230a:	6859      	ldr	r1, [r3, #4]
 802230c:	ac10      	add	r4, sp, #64	@ 0x40
 802230e:	c403      	stmia	r4!, {r0, r1}
 8022310:	a80e      	add	r0, sp, #56	@ 0x38
 8022312:	f89d a070 	ldrb.w	sl, [sp, #112]	@ 0x70
 8022316:	f7f7 f8a1 	bl	801945c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802231a:	4631      	mov	r1, r6
 802231c:	a810      	add	r0, sp, #64	@ 0x40
 802231e:	f7f7 f8c5 	bl	80194ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022322:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 8022326:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 802232a:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 802232e:	4e62      	ldr	r6, [pc, #392]	@ (80224b8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8022330:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022334:	4489      	add	r9, r1
 8022336:	f8bd 1038 	ldrh.w	r1, [sp, #56]	@ 0x38
 802233a:	6830      	ldr	r0, [r6, #0]
 802233c:	440a      	add	r2, r1
 802233e:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8022342:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8022346:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	@ 0x44
 802234a:	4413      	add	r3, r2
 802234c:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 8022350:	6803      	ldr	r3, [r0, #0]
 8022352:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 8022356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8022358:	4798      	blx	r3
 802235a:	f010 0f80 	tst.w	r0, #128	@ 0x80
 802235e:	4f57      	ldr	r7, [pc, #348]	@ (80224bc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8022360:	6830      	ldr	r0, [r6, #0]
 8022362:	d01d      	beq.n	80223a0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 8022364:	2200      	movs	r2, #0
 8022366:	6801      	ldr	r1, [r0, #0]
 8022368:	e9cd 2208 	strd	r2, r2, [sp, #32]
 802236c:	220b      	movs	r2, #11
 802236e:	9207      	str	r2, [sp, #28]
 8022370:	883a      	ldrh	r2, [r7, #0]
 8022372:	b2a4      	uxth	r4, r4
 8022374:	9206      	str	r2, [sp, #24]
 8022376:	2201      	movs	r2, #1
 8022378:	e9cd a204 	strd	sl, r2, [sp, #16]
 802237c:	f8bd 203c 	ldrh.w	r2, [sp, #60]	@ 0x3c
 8022380:	b2ad      	uxth	r5, r5
 8022382:	9203      	str	r2, [sp, #12]
 8022384:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8022388:	9502      	str	r5, [sp, #8]
 802238a:	9200      	str	r2, [sp, #0]
 802238c:	9401      	str	r4, [sp, #4]
 802238e:	6c0c      	ldr	r4, [r1, #64]	@ 0x40
 8022390:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8022394:	4642      	mov	r2, r8
 8022396:	4649      	mov	r1, r9
 8022398:	47a0      	blx	r4
 802239a:	b013      	add	sp, #76	@ 0x4c
 802239c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80223a0:	6803      	ldr	r3, [r0, #0]
 80223a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80223a4:	4798      	blx	r3
 80223a6:	f04f 0e04 	mov.w	lr, #4
 80223aa:	883b      	ldrh	r3, [r7, #0]
 80223ac:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 80223b0:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	@ 0x40
 80223b4:	435d      	muls	r5, r3
 80223b6:	fb03 1202 	mla	r2, r3, r2, r1
 80223ba:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80223be:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 80223c2:	920c      	str	r2, [sp, #48]	@ 0x30
 80223c4:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 80223c8:	1b12      	subs	r2, r2, r4
 80223ca:	920d      	str	r2, [sp, #52]	@ 0x34
 80223cc:	0062      	lsls	r2, r4, #1
 80223ce:	1b1c      	subs	r4, r3, r4
 80223d0:	0063      	lsls	r3, r4, #1
 80223d2:	920a      	str	r2, [sp, #40]	@ 0x28
 80223d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80223d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80223d8:	4298      	cmp	r0, r3
 80223da:	d266      	bcs.n	80224aa <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 80223dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80223de:	eb00 0b03 	add.w	fp, r0, r3
 80223e2:	4558      	cmp	r0, fp
 80223e4:	d25c      	bcs.n	80224a0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 80223e6:	f819 3b01 	ldrb.w	r3, [r9], #1
 80223ea:	fb1e e303 	smlabb	r3, lr, r3, lr
 80223ee:	f858 2003 	ldr.w	r2, [r8, r3]
 80223f2:	0e11      	lsrs	r1, r2, #24
 80223f4:	d012      	beq.n	802241c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 80223f6:	29ff      	cmp	r1, #255	@ 0xff
 80223f8:	ea4f 2712 	mov.w	r7, r2, lsr #8
 80223fc:	d110      	bne.n	8022420 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 80223fe:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8022402:	d10d      	bne.n	8022420 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8022404:	0953      	lsrs	r3, r2, #5
 8022406:	f427 67ff 	bic.w	r7, r7, #2040	@ 0x7f8
 802240a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802240e:	f027 0707 	bic.w	r7, r7, #7
 8022412:	431f      	orrs	r7, r3
 8022414:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8022418:	433a      	orrs	r2, r7
 802241a:	8002      	strh	r2, [r0, #0]
 802241c:	3002      	adds	r0, #2
 802241e:	e7e0      	b.n	80223e2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 8022420:	fb0a f101 	mul.w	r1, sl, r1
 8022424:	1c4b      	adds	r3, r1, #1
 8022426:	eb03 2321 	add.w	r3, r3, r1, asr #8
 802242a:	121b      	asrs	r3, r3, #8
 802242c:	b299      	uxth	r1, r3
 802242e:	43db      	mvns	r3, r3
 8022430:	8806      	ldrh	r6, [r0, #0]
 8022432:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8022436:	b2d2      	uxtb	r2, r2
 8022438:	fb1c fc01 	smulbb	ip, ip, r1
 802243c:	fb12 f201 	smulbb	r2, r2, r1
 8022440:	1235      	asrs	r5, r6, #8
 8022442:	10f4      	asrs	r4, r6, #3
 8022444:	00f6      	lsls	r6, r6, #3
 8022446:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 802244a:	b2f6      	uxtb	r6, r6
 802244c:	b2ff      	uxtb	r7, r7
 802244e:	b2db      	uxtb	r3, r3
 8022450:	fb17 f701 	smulbb	r7, r7, r1
 8022454:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8022458:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 802245c:	fb05 c503 	mla	r5, r5, r3, ip
 8022460:	fb06 2203 	mla	r2, r6, r3, r2
 8022464:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 8022468:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 802246c:	fb04 7403 	mla	r4, r4, r3, r7
 8022470:	b2ad      	uxth	r5, r5
 8022472:	b292      	uxth	r2, r2
 8022474:	f105 0c01 	add.w	ip, r5, #1
 8022478:	1c57      	adds	r7, r2, #1
 802247a:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802247e:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8022482:	b2a4      	uxth	r4, r4
 8022484:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8022488:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 802248c:	433d      	orrs	r5, r7
 802248e:	1c67      	adds	r7, r4, #1
 8022490:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 8022494:	0964      	lsrs	r4, r4, #5
 8022496:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 802249a:	4325      	orrs	r5, r4
 802249c:	8005      	strh	r5, [r0, #0]
 802249e:	e7bd      	b.n	802241c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 80224a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80224a2:	4418      	add	r0, r3
 80224a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80224a6:	4499      	add	r9, r3
 80224a8:	e795      	b.n	80223d6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 80224aa:	4b03      	ldr	r3, [pc, #12]	@ (80224b8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 80224ac:	6818      	ldr	r0, [r3, #0]
 80224ae:	6803      	ldr	r3, [r0, #0]
 80224b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80224b2:	4798      	blx	r3
 80224b4:	e771      	b.n	802239a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 80224b6:	bf00      	nop
 80224b8:	2005ba7c 	.word	0x2005ba7c
 80224bc:	2005ba76 	.word	0x2005ba76

080224c0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 80224c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80224c4:	b087      	sub	sp, #28
 80224c6:	f89d 6040 	ldrb.w	r6, [sp, #64]	@ 0x40
 80224ca:	4680      	mov	r8, r0
 80224cc:	460d      	mov	r5, r1
 80224ce:	4614      	mov	r4, r2
 80224d0:	2e00      	cmp	r6, #0
 80224d2:	f000 80b9 	beq.w	8022648 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 80224d6:	6810      	ldr	r0, [r2, #0]
 80224d8:	6851      	ldr	r1, [r2, #4]
 80224da:	af02      	add	r7, sp, #8
 80224dc:	c703      	stmia	r7!, {r0, r1}
 80224de:	6818      	ldr	r0, [r3, #0]
 80224e0:	6859      	ldr	r1, [r3, #4]
 80224e2:	af04      	add	r7, sp, #16
 80224e4:	c703      	stmia	r7!, {r0, r1}
 80224e6:	a802      	add	r0, sp, #8
 80224e8:	f7f6 ffb8 	bl	801945c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80224ec:	4621      	mov	r1, r4
 80224ee:	a804      	add	r0, sp, #16
 80224f0:	f7f6 ffdc 	bl	80194ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80224f4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80224f8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80224fc:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8022500:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 8022504:	fb14 2103 	smlabb	r1, r4, r3, r2
 8022508:	eb08 0401 	add.w	r4, r8, r1
 802250c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8022510:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8022514:	440a      	add	r2, r1
 8022516:	f8ad 2010 	strh.w	r2, [sp, #16]
 802251a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 802251e:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 8022522:	4413      	add	r3, r2
 8022524:	f8ad 3012 	strh.w	r3, [sp, #18]
 8022528:	4b49      	ldr	r3, [pc, #292]	@ (8022650 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 802252a:	6818      	ldr	r0, [r3, #0]
 802252c:	6803      	ldr	r3, [r0, #0]
 802252e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022530:	4798      	blx	r3
 8022532:	4b48      	ldr	r3, [pc, #288]	@ (8022654 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 8022534:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8022538:	881a      	ldrh	r2, [r3, #0]
 802253a:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 802253e:	2eff      	cmp	r6, #255	@ 0xff
 8022540:	fb02 c101 	mla	r1, r2, r1, ip
 8022544:	fb02 f207 	mul.w	r2, r2, r7
 8022548:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 802254c:	f105 0104 	add.w	r1, r5, #4
 8022550:	461d      	mov	r5, r3
 8022552:	d05a      	beq.n	802260a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 8022554:	f1c6 0eff 	rsb	lr, r6, #255	@ 0xff
 8022558:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 802255c:	b2b6      	uxth	r6, r6
 802255e:	fa1f fe8e 	uxth.w	lr, lr
 8022562:	9301      	str	r3, [sp, #4]
 8022564:	4282      	cmp	r2, r0
 8022566:	d96a      	bls.n	802263e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 8022568:	eb00 0b0a 	add.w	fp, r0, sl
 802256c:	4583      	cmp	fp, r0
 802256e:	d940      	bls.n	80225f2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 8022570:	8805      	ldrh	r5, [r0, #0]
 8022572:	f814 3b01 	ldrb.w	r3, [r4], #1
 8022576:	122f      	asrs	r7, r5, #8
 8022578:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 802257c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8022580:	fb17 f70e 	smulbb	r7, r7, lr
 8022584:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8022588:	00ed      	lsls	r5, r5, #3
 802258a:	b2ed      	uxtb	r5, r5
 802258c:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8022590:	fb15 f50e 	smulbb	r5, r5, lr
 8022594:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8022598:	fb0c 7c06 	mla	ip, ip, r6, r7
 802259c:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 80225a0:	10df      	asrs	r7, r3, #3
 80225a2:	00db      	lsls	r3, r3, #3
 80225a4:	fb19 f90e 	smulbb	r9, r9, lr
 80225a8:	b2db      	uxtb	r3, r3
 80225aa:	fb03 5306 	mla	r3, r3, r6, r5
 80225ae:	fa1f fc8c 	uxth.w	ip, ip
 80225b2:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 80225b6:	fb07 9706 	mla	r7, r7, r6, r9
 80225ba:	f10c 0901 	add.w	r9, ip, #1
 80225be:	b29b      	uxth	r3, r3
 80225c0:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 80225c4:	f40c 4978 	and.w	r9, ip, #63488	@ 0xf800
 80225c8:	f103 0c01 	add.w	ip, r3, #1
 80225cc:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80225d0:	b2bf      	uxth	r7, r7
 80225d2:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80225d6:	ea4c 0c09 	orr.w	ip, ip, r9
 80225da:	f107 0901 	add.w	r9, r7, #1
 80225de:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 80225e2:	097f      	lsrs	r7, r7, #5
 80225e4:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 80225e8:	ea4c 0c07 	orr.w	ip, ip, r7
 80225ec:	f820 cb02 	strh.w	ip, [r0], #2
 80225f0:	e7bc      	b.n	802256c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 80225f2:	9b01      	ldr	r3, [sp, #4]
 80225f4:	881b      	ldrh	r3, [r3, #0]
 80225f6:	eba3 0308 	sub.w	r3, r3, r8
 80225fa:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80225fe:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8022602:	eba3 0308 	sub.w	r3, r3, r8
 8022606:	441c      	add	r4, r3
 8022608:	e7ac      	b.n	8022564 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 802260a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 802260e:	4282      	cmp	r2, r0
 8022610:	d915      	bls.n	802263e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 8022612:	eb00 060a 	add.w	r6, r0, sl
 8022616:	4286      	cmp	r6, r0
 8022618:	d906      	bls.n	8022628 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 802261a:	f814 3b01 	ldrb.w	r3, [r4], #1
 802261e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8022622:	f820 3b02 	strh.w	r3, [r0], #2
 8022626:	e7f6      	b.n	8022616 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 8022628:	882b      	ldrh	r3, [r5, #0]
 802262a:	eba3 0308 	sub.w	r3, r3, r8
 802262e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022632:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8022636:	eba3 0308 	sub.w	r3, r3, r8
 802263a:	441c      	add	r4, r3
 802263c:	e7e7      	b.n	802260e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 802263e:	4b04      	ldr	r3, [pc, #16]	@ (8022650 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8022640:	6818      	ldr	r0, [r3, #0]
 8022642:	6803      	ldr	r3, [r0, #0]
 8022644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022646:	4798      	blx	r3
 8022648:	b007      	add	sp, #28
 802264a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802264e:	bf00      	nop
 8022650:	2005ba7c 	.word	0x2005ba7c
 8022654:	2005ba76 	.word	0x2005ba76

08022658 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8022658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802265c:	b091      	sub	sp, #68	@ 0x44
 802265e:	f89d 5068 	ldrb.w	r5, [sp, #104]	@ 0x68
 8022662:	4680      	mov	r8, r0
 8022664:	460f      	mov	r7, r1
 8022666:	4614      	mov	r4, r2
 8022668:	2d00      	cmp	r5, #0
 802266a:	d051      	beq.n	8022710 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 802266c:	6810      	ldr	r0, [r2, #0]
 802266e:	6851      	ldr	r1, [r2, #4]
 8022670:	ae0c      	add	r6, sp, #48	@ 0x30
 8022672:	c603      	stmia	r6!, {r0, r1}
 8022674:	6818      	ldr	r0, [r3, #0]
 8022676:	6859      	ldr	r1, [r3, #4]
 8022678:	ae0e      	add	r6, sp, #56	@ 0x38
 802267a:	c603      	stmia	r6!, {r0, r1}
 802267c:	a80c      	add	r0, sp, #48	@ 0x30
 802267e:	f7f6 feed 	bl	801945c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022682:	4621      	mov	r1, r4
 8022684:	a80e      	add	r0, sp, #56	@ 0x38
 8022686:	f7f6 ff11 	bl	80194ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802268a:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 802268e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8022692:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8022696:	f8df 91dc 	ldr.w	r9, [pc, #476]	@ 8022874 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 802269a:	fb11 2103 	smlabb	r1, r1, r3, r2
 802269e:	eb08 0401 	add.w	r4, r8, r1
 80226a2:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 80226a6:	f8d9 0000 	ldr.w	r0, [r9]
 80226aa:	440a      	add	r2, r1
 80226ac:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 80226b0:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 80226b4:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 80226b8:	4413      	add	r3, r2
 80226ba:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 80226be:	6803      	ldr	r3, [r0, #0]
 80226c0:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	@ 0x3e
 80226c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80226c6:	4798      	blx	r3
 80226c8:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80226cc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8022878 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 80226d0:	f8d9 0000 	ldr.w	r0, [r9]
 80226d4:	d01f      	beq.n	8022716 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 80226d6:	2200      	movs	r2, #0
 80226d8:	6801      	ldr	r1, [r0, #0]
 80226da:	e9cd 2208 	strd	r2, r2, [sp, #32]
 80226de:	220b      	movs	r2, #11
 80226e0:	9207      	str	r2, [sp, #28]
 80226e2:	f8b8 2000 	ldrh.w	r2, [r8]
 80226e6:	b2b6      	uxth	r6, r6
 80226e8:	9206      	str	r2, [sp, #24]
 80226ea:	2201      	movs	r2, #1
 80226ec:	e9cd 5204 	strd	r5, r2, [sp, #16]
 80226f0:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 80226f4:	9601      	str	r6, [sp, #4]
 80226f6:	9203      	str	r2, [sp, #12]
 80226f8:	fa1f f28a 	uxth.w	r2, sl
 80226fc:	9202      	str	r2, [sp, #8]
 80226fe:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8022702:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8022706:	9200      	str	r2, [sp, #0]
 8022708:	6c0d      	ldr	r5, [r1, #64]	@ 0x40
 802270a:	463a      	mov	r2, r7
 802270c:	4621      	mov	r1, r4
 802270e:	47a8      	blx	r5
 8022710:	b011      	add	sp, #68	@ 0x44
 8022712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022716:	6803      	ldr	r3, [r0, #0]
 8022718:	ea4f 0946 	mov.w	r9, r6, lsl #1
 802271c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802271e:	4798      	blx	r3
 8022720:	f8b8 2000 	ldrh.w	r2, [r8]
 8022724:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8022728:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 802272c:	2dff      	cmp	r5, #255	@ 0xff
 802272e:	fb02 1303 	mla	r3, r2, r3, r1
 8022732:	fb0a fa02 	mul.w	sl, sl, r2
 8022736:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802273a:	d062      	beq.n	8022802 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 802273c:	ea6f 0c05 	mvn.w	ip, r5
 8022740:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 8022744:	930a      	str	r3, [sp, #40]	@ 0x28
 8022746:	b2ad      	uxth	r5, r5
 8022748:	fa5f fc8c 	uxtb.w	ip, ip
 802274c:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 8022750:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022752:	4298      	cmp	r0, r3
 8022754:	f080 8085 	bcs.w	8022862 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8022758:	eb00 0b09 	add.w	fp, r0, r9
 802275c:	4558      	cmp	r0, fp
 802275e:	d246      	bcs.n	80227ee <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 8022760:	2303      	movs	r3, #3
 8022762:	2204      	movs	r2, #4
 8022764:	f814 eb01 	ldrb.w	lr, [r4], #1
 8022768:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 802276c:	eb07 0a0e 	add.w	sl, r7, lr
 8022770:	f89a 8002 	ldrb.w	r8, [sl, #2]
 8022774:	8803      	ldrh	r3, [r0, #0]
 8022776:	fb18 f805 	smulbb	r8, r8, r5
 802277a:	1219      	asrs	r1, r3, #8
 802277c:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8022780:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8022784:	fb01 810c 	mla	r1, r1, ip, r8
 8022788:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802278c:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8022790:	fb1e fe05 	smulbb	lr, lr, r5
 8022794:	fb18 f805 	smulbb	r8, r8, r5
 8022798:	10da      	asrs	r2, r3, #3
 802279a:	00db      	lsls	r3, r3, #3
 802279c:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 80227a0:	b2db      	uxtb	r3, r3
 80227a2:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 80227a6:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 80227aa:	fb02 820c 	mla	r2, r2, ip, r8
 80227ae:	fb03 e30c 	mla	r3, r3, ip, lr
 80227b2:	b289      	uxth	r1, r1
 80227b4:	b292      	uxth	r2, r2
 80227b6:	b29b      	uxth	r3, r3
 80227b8:	f101 0801 	add.w	r8, r1, #1
 80227bc:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80227c0:	f103 0e01 	add.w	lr, r3, #1
 80227c4:	f102 0801 	add.w	r8, r2, #1
 80227c8:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 80227cc:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 80227d0:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 80227d4:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 80227d8:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80227dc:	ea4e 0101 	orr.w	r1, lr, r1
 80227e0:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 80227e4:	ea41 0108 	orr.w	r1, r1, r8
 80227e8:	f820 1b02 	strh.w	r1, [r0], #2
 80227ec:	e7b6      	b.n	802275c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 80227ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80227f0:	881b      	ldrh	r3, [r3, #0]
 80227f2:	1b9b      	subs	r3, r3, r6
 80227f4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80227f8:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 80227fc:	1b9b      	subs	r3, r3, r6
 80227fe:	441c      	add	r4, r3
 8022800:	e7a6      	b.n	8022750 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 8022802:	2203      	movs	r2, #3
 8022804:	2504      	movs	r5, #4
 8022806:	491a      	ldr	r1, [pc, #104]	@ (8022870 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 8022808:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 802280c:	4550      	cmp	r0, sl
 802280e:	d228      	bcs.n	8022862 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8022810:	eb00 0c09 	add.w	ip, r0, r9
 8022814:	4560      	cmp	r0, ip
 8022816:	4623      	mov	r3, r4
 8022818:	d219      	bcs.n	802284e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 802281a:	f893 e000 	ldrb.w	lr, [r3]
 802281e:	3401      	adds	r4, #1
 8022820:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 8022824:	eb07 0b0e 	add.w	fp, r7, lr
 8022828:	f89b 3002 	ldrb.w	r3, [fp, #2]
 802282c:	f89b b001 	ldrb.w	fp, [fp, #1]
 8022830:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8022834:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8022838:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 802283c:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 8022840:	ea43 030b 	orr.w	r3, r3, fp
 8022844:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 8022848:	f820 3b02 	strh.w	r3, [r0], #2
 802284c:	e7e2      	b.n	8022814 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 802284e:	f8b8 3000 	ldrh.w	r3, [r8]
 8022852:	1b9b      	subs	r3, r3, r6
 8022854:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022858:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 802285c:	1b9b      	subs	r3, r3, r6
 802285e:	441c      	add	r4, r3
 8022860:	e7d4      	b.n	802280c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 8022862:	4b04      	ldr	r3, [pc, #16]	@ (8022874 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 8022864:	6818      	ldr	r0, [r3, #0]
 8022866:	6803      	ldr	r3, [r0, #0]
 8022868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802286a:	4798      	blx	r3
 802286c:	e750      	b.n	8022710 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 802286e:	bf00      	nop
 8022870:	fffff800 	.word	0xfffff800
 8022874:	2005ba7c 	.word	0x2005ba7c
 8022878:	2005ba76 	.word	0x2005ba76

0802287c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 802287c:	b4f0      	push	{r4, r5, r6, r7}
 802287e:	460c      	mov	r4, r1
 8022880:	4611      	mov	r1, r2
 8022882:	780f      	ldrb	r7, [r1, #0]
 8022884:	461a      	mov	r2, r3
 8022886:	2f01      	cmp	r7, #1
 8022888:	9b04      	ldr	r3, [sp, #16]
 802288a:	f89d 5014 	ldrb.w	r5, [sp, #20]
 802288e:	784e      	ldrb	r6, [r1, #1]
 8022890:	d038      	beq.n	8022904 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x88>
 8022892:	d31f      	bcc.n	80228d4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x58>
 8022894:	2f02      	cmp	r7, #2
 8022896:	d14d      	bne.n	8022934 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8022898:	2e03      	cmp	r6, #3
 802289a:	d84b      	bhi.n	8022934 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 802289c:	e8df f006 	tbb	[pc, r6]
 80228a0:	17140702 	.word	0x17140702
 80228a4:	9504      	str	r5, [sp, #16]
 80228a6:	4620      	mov	r0, r4
 80228a8:	bcf0      	pop	{r4, r5, r6, r7}
 80228aa:	f7ff be09 	b.w	80224c0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 80228ae:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 80228b0:	2800      	cmp	r0, #0
 80228b2:	d03f      	beq.n	8022934 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80228b4:	6806      	ldr	r6, [r0, #0]
 80228b6:	e9cd 3504 	strd	r3, r5, [sp, #16]
 80228ba:	68b5      	ldr	r5, [r6, #8]
 80228bc:	4613      	mov	r3, r2
 80228be:	46ac      	mov	ip, r5
 80228c0:	460a      	mov	r2, r1
 80228c2:	4621      	mov	r1, r4
 80228c4:	bcf0      	pop	{r4, r5, r6, r7}
 80228c6:	4760      	bx	ip
 80228c8:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 80228cc:	e7f0      	b.n	80228b0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 80228ce:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 80228d2:	e7ed      	b.n	80228b0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 80228d4:	2e03      	cmp	r6, #3
 80228d6:	d82d      	bhi.n	8022934 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80228d8:	e8df f006 	tbb	[pc, r6]
 80228dc:	110e0702 	.word	0x110e0702
 80228e0:	9504      	str	r5, [sp, #16]
 80228e2:	4620      	mov	r0, r4
 80228e4:	bcf0      	pop	{r4, r5, r6, r7}
 80228e6:	f7ff bd05 	b.w	80222f4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 80228ea:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 80228ec:	b310      	cbz	r0, 8022934 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80228ee:	6806      	ldr	r6, [r0, #0]
 80228f0:	e9cd 3504 	strd	r3, r5, [sp, #16]
 80228f4:	68f5      	ldr	r5, [r6, #12]
 80228f6:	e7e1      	b.n	80228bc <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 80228f8:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 80228fc:	e7f6      	b.n	80228ec <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 80228fe:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 8022902:	e7f3      	b.n	80228ec <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 8022904:	2e03      	cmp	r6, #3
 8022906:	d815      	bhi.n	8022934 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8022908:	e8df f006 	tbb	[pc, r6]
 802290c:	110e0702 	.word	0x110e0702
 8022910:	9504      	str	r5, [sp, #16]
 8022912:	4620      	mov	r0, r4
 8022914:	bcf0      	pop	{r4, r5, r6, r7}
 8022916:	f7ff be9f 	b.w	8022658 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 802291a:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 802291c:	b150      	cbz	r0, 8022934 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 802291e:	6806      	ldr	r6, [r0, #0]
 8022920:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8022924:	6935      	ldr	r5, [r6, #16]
 8022926:	e7c9      	b.n	80228bc <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 8022928:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 802292c:	e7f6      	b.n	802291c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 802292e:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 8022932:	e7f3      	b.n	802291c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 8022934:	bcf0      	pop	{r4, r5, r6, r7}
 8022936:	4770      	bx	lr

08022938 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8022938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802293c:	4617      	mov	r7, r2
 802293e:	4604      	mov	r4, r0
 8022940:	460e      	mov	r6, r1
 8022942:	b087      	sub	sp, #28
 8022944:	6810      	ldr	r0, [r2, #0]
 8022946:	6851      	ldr	r1, [r2, #4]
 8022948:	ad02      	add	r5, sp, #8
 802294a:	c503      	stmia	r5!, {r0, r1}
 802294c:	6818      	ldr	r0, [r3, #0]
 802294e:	6859      	ldr	r1, [r3, #4]
 8022950:	ad04      	add	r5, sp, #16
 8022952:	c503      	stmia	r5!, {r0, r1}
 8022954:	a802      	add	r0, sp, #8
 8022956:	f89d a040 	ldrb.w	sl, [sp, #64]	@ 0x40
 802295a:	f7f6 fd7f 	bl	801945c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802295e:	4639      	mov	r1, r7
 8022960:	a804      	add	r0, sp, #16
 8022962:	f7f6 fda3 	bl	80194ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022966:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802296a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802296e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8022972:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8022976:	fb11 2103 	smlabb	r1, r1, r3, r2
 802297a:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 802297e:	440e      	add	r6, r1
 8022980:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8022984:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 8022988:	440a      	add	r2, r1
 802298a:	f8ad 2010 	strh.w	r2, [sp, #16]
 802298e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8022992:	f8df 91ec 	ldr.w	r9, [pc, #492]	@ 8022b80 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 8022996:	4413      	add	r3, r2
 8022998:	f8ad 3012 	strh.w	r3, [sp, #18]
 802299c:	4b77      	ldr	r3, [pc, #476]	@ (8022b7c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 802299e:	6818      	ldr	r0, [r3, #0]
 80229a0:	6803      	ldr	r3, [r0, #0]
 80229a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80229a4:	4798      	blx	r3
 80229a6:	f8b9 b000 	ldrh.w	fp, [r9]
 80229aa:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80229ae:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80229b2:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 80229b6:	fb0b 2303 	mla	r3, fp, r3, r2
 80229ba:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80229be:	ea4f 0348 	mov.w	r3, r8, lsl #1
 80229c2:	fb05 f50b 	mul.w	r5, r5, fp
 80229c6:	9300      	str	r3, [sp, #0]
 80229c8:	d069      	beq.n	8022a9e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 80229ca:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 80229ce:	4558      	cmp	r0, fp
 80229d0:	f080 80cc 	bcs.w	8022b6c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 80229d4:	4631      	mov	r1, r6
 80229d6:	9b00      	ldr	r3, [sp, #0]
 80229d8:	18c3      	adds	r3, r0, r3
 80229da:	9301      	str	r3, [sp, #4]
 80229dc:	9b01      	ldr	r3, [sp, #4]
 80229de:	4298      	cmp	r0, r3
 80229e0:	d24f      	bcs.n	8022a82 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 80229e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80229e6:	2a00      	cmp	r2, #0
 80229e8:	d048      	beq.n	8022a7c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 80229ea:	fb0a f202 	mul.w	r2, sl, r2
 80229ee:	1c53      	adds	r3, r2, #1
 80229f0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80229f4:	121b      	asrs	r3, r3, #8
 80229f6:	d041      	beq.n	8022a7c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 80229f8:	b29e      	uxth	r6, r3
 80229fa:	43db      	mvns	r3, r3
 80229fc:	8802      	ldrh	r2, [r0, #0]
 80229fe:	b2db      	uxtb	r3, r3
 8022a00:	1215      	asrs	r5, r2, #8
 8022a02:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8022a06:	f8b4 c000 	ldrh.w	ip, [r4]
 8022a0a:	fb15 f503 	smulbb	r5, r5, r3
 8022a0e:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 8022a12:	00d2      	lsls	r2, r2, #3
 8022a14:	b2d2      	uxtb	r2, r2
 8022a16:	ea4f 272c 	mov.w	r7, ip, asr #8
 8022a1a:	fb12 f203 	smulbb	r2, r2, r3
 8022a1e:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8022a22:	fb07 5706 	mla	r7, r7, r6, r5
 8022a26:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8022a2a:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8022a2e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8022a32:	fb1e fe03 	smulbb	lr, lr, r3
 8022a36:	fa5f fc8c 	uxtb.w	ip, ip
 8022a3a:	fb0c 2c06 	mla	ip, ip, r6, r2
 8022a3e:	b2bf      	uxth	r7, r7
 8022a40:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8022a44:	fb05 e506 	mla	r5, r5, r6, lr
 8022a48:	f107 0e01 	add.w	lr, r7, #1
 8022a4c:	fa1f fc8c 	uxth.w	ip, ip
 8022a50:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8022a54:	f407 4e78 	and.w	lr, r7, #63488	@ 0xf800
 8022a58:	f10c 0701 	add.w	r7, ip, #1
 8022a5c:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8022a60:	b2ad      	uxth	r5, r5
 8022a62:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8022a66:	ea47 070e 	orr.w	r7, r7, lr
 8022a6a:	f105 0e01 	add.w	lr, r5, #1
 8022a6e:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 8022a72:	096d      	lsrs	r5, r5, #5
 8022a74:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8022a78:	432f      	orrs	r7, r5
 8022a7a:	8007      	strh	r7, [r0, #0]
 8022a7c:	3002      	adds	r0, #2
 8022a7e:	3402      	adds	r4, #2
 8022a80:	e7ac      	b.n	80229dc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 8022a82:	f8b9 3000 	ldrh.w	r3, [r9]
 8022a86:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8022a8a:	eba3 0308 	sub.w	r3, r3, r8
 8022a8e:	eba6 0608 	sub.w	r6, r6, r8
 8022a92:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8022a96:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022a9a:	440e      	add	r6, r1
 8022a9c:	e797      	b.n	80229ce <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 8022a9e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8022aa2:	42a8      	cmp	r0, r5
 8022aa4:	d262      	bcs.n	8022b6c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8022aa6:	4631      	mov	r1, r6
 8022aa8:	9b00      	ldr	r3, [sp, #0]
 8022aaa:	eb00 0b03 	add.w	fp, r0, r3
 8022aae:	4558      	cmp	r0, fp
 8022ab0:	d24e      	bcs.n	8022b50 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 8022ab2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022ab6:	b12b      	cbz	r3, 8022ac4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8022ab8:	2bff      	cmp	r3, #255	@ 0xff
 8022aba:	f8b4 e000 	ldrh.w	lr, [r4]
 8022abe:	d104      	bne.n	8022aca <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 8022ac0:	f8a0 e000 	strh.w	lr, [r0]
 8022ac4:	3002      	adds	r0, #2
 8022ac6:	3402      	adds	r4, #2
 8022ac8:	e7f1      	b.n	8022aae <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 8022aca:	b29f      	uxth	r7, r3
 8022acc:	43db      	mvns	r3, r3
 8022ace:	8802      	ldrh	r2, [r0, #0]
 8022ad0:	b2db      	uxtb	r3, r3
 8022ad2:	1216      	asrs	r6, r2, #8
 8022ad4:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8022ad8:	fb16 f603 	smulbb	r6, r6, r3
 8022adc:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8022ae0:	00d2      	lsls	r2, r2, #3
 8022ae2:	b2d2      	uxtb	r2, r2
 8022ae4:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 8022ae8:	fb1a fa03 	smulbb	sl, sl, r3
 8022aec:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8022af0:	fb12 f303 	smulbb	r3, r2, r3
 8022af4:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8022af8:	fb0c 6c07 	mla	ip, ip, r7, r6
 8022afc:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8022b00:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8022b04:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8022b08:	fa5f fe8e 	uxtb.w	lr, lr
 8022b0c:	fb06 a607 	mla	r6, r6, r7, sl
 8022b10:	fb0e 3307 	mla	r3, lr, r7, r3
 8022b14:	fa1f fc8c 	uxth.w	ip, ip
 8022b18:	f10c 0201 	add.w	r2, ip, #1
 8022b1c:	b2b6      	uxth	r6, r6
 8022b1e:	b29b      	uxth	r3, r3
 8022b20:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8022b24:	f40c 4278 	and.w	r2, ip, #63488	@ 0xf800
 8022b28:	f106 0a01 	add.w	sl, r6, #1
 8022b2c:	f103 0c01 	add.w	ip, r3, #1
 8022b30:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8022b34:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8022b38:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8022b3c:	0976      	lsrs	r6, r6, #5
 8022b3e:	ea4c 0c02 	orr.w	ip, ip, r2
 8022b42:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8022b46:	ea4c 0c06 	orr.w	ip, ip, r6
 8022b4a:	f8a0 c000 	strh.w	ip, [r0]
 8022b4e:	e7b9      	b.n	8022ac4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8022b50:	f8b9 3000 	ldrh.w	r3, [r9]
 8022b54:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8022b58:	eba3 0308 	sub.w	r3, r3, r8
 8022b5c:	eba6 0608 	sub.w	r6, r6, r8
 8022b60:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8022b64:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022b68:	440e      	add	r6, r1
 8022b6a:	e79a      	b.n	8022aa2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 8022b6c:	4b03      	ldr	r3, [pc, #12]	@ (8022b7c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8022b6e:	6818      	ldr	r0, [r3, #0]
 8022b70:	6803      	ldr	r3, [r0, #0]
 8022b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022b74:	4798      	blx	r3
 8022b76:	b007      	add	sp, #28
 8022b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022b7c:	2005ba7c 	.word	0x2005ba7c
 8022b80:	2005ba76 	.word	0x2005ba76

08022b84 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8022b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b88:	b089      	sub	sp, #36	@ 0x24
 8022b8a:	f89d 604c 	ldrb.w	r6, [sp, #76]	@ 0x4c
 8022b8e:	4607      	mov	r7, r0
 8022b90:	4688      	mov	r8, r1
 8022b92:	4692      	mov	sl, r2
 8022b94:	4699      	mov	r9, r3
 8022b96:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8022b98:	2e00      	cmp	r6, #0
 8022b9a:	d048      	beq.n	8022c2e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8022b9c:	4608      	mov	r0, r1
 8022b9e:	f7fa f823 	bl	801cbe8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8022ba2:	4605      	mov	r5, r0
 8022ba4:	4640      	mov	r0, r8
 8022ba6:	f7fa f853 	bl	801cc50 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8022baa:	f8ad 000e 	strh.w	r0, [sp, #14]
 8022bae:	4640      	mov	r0, r8
 8022bb0:	f8ad a008 	strh.w	sl, [sp, #8]
 8022bb4:	f8ad 500c 	strh.w	r5, [sp, #12]
 8022bb8:	f8ad 900a 	strh.w	r9, [sp, #10]
 8022bbc:	f7fa f906 	bl	801cdcc <_ZNK8touchgfx6Bitmap7getDataEv>
 8022bc0:	4605      	mov	r5, r0
 8022bc2:	4640      	mov	r0, r8
 8022bc4:	f7fa f932 	bl	801ce2c <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8022bc8:	4682      	mov	sl, r0
 8022bca:	4640      	mov	r0, r8
 8022bcc:	f7fa f982 	bl	801ced4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8022bd0:	2810      	cmp	r0, #16
 8022bd2:	d82c      	bhi.n	8022c2e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8022bd4:	e8df f010 	tbh	[pc, r0, lsl #1]
 8022bd8:	00ba00ca 	.word	0x00ba00ca
 8022bdc:	002b0011 	.word	0x002b0011
 8022be0:	002b002b 	.word	0x002b002b
 8022be4:	002b002b 	.word	0x002b002b
 8022be8:	002b002b 	.word	0x002b002b
 8022bec:	00c1002b 	.word	0x00c1002b
 8022bf0:	002b002b 	.word	0x002b002b
 8022bf4:	002b0180 	.word	0x002b0180
 8022bf8:	0173      	.short	0x0173
 8022bfa:	4bbc      	ldr	r3, [pc, #752]	@ (8022eec <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x368>)
 8022bfc:	6818      	ldr	r0, [r3, #0]
 8022bfe:	6803      	ldr	r3, [r0, #0]
 8022c00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8022c02:	4798      	blx	r3
 8022c04:	2eff      	cmp	r6, #255	@ 0xff
 8022c06:	d101      	bne.n	8022c0c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 8022c08:	0683      	lsls	r3, r0, #26
 8022c0a:	d506      	bpl.n	8022c1a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x96>
 8022c0c:	4633      	mov	r3, r6
 8022c0e:	4622      	mov	r2, r4
 8022c10:	a902      	add	r1, sp, #8
 8022c12:	4628      	mov	r0, r5
 8022c14:	f7ff f8fc 	bl	8021e10 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022c18:	e009      	b.n	8022c2e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8022c1a:	4640      	mov	r0, r8
 8022c1c:	f7fa f89e 	bl	801cd5c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8022c20:	b940      	cbnz	r0, 8022c34 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb0>
 8022c22:	4623      	mov	r3, r4
 8022c24:	aa02      	add	r2, sp, #8
 8022c26:	4629      	mov	r1, r5
 8022c28:	4638      	mov	r0, r7
 8022c2a:	f7ff f9d7 	bl	8021fdc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8022c2e:	b009      	add	sp, #36	@ 0x24
 8022c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022c34:	f10d 0918 	add.w	r9, sp, #24
 8022c38:	4641      	mov	r1, r8
 8022c3a:	4648      	mov	r0, r9
 8022c3c:	f10d 0810 	add.w	r8, sp, #16
 8022c40:	f7fa f83a 	bl	801ccb8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8022c44:	e899 0003 	ldmia.w	r9, {r0, r1}
 8022c48:	e888 0003 	stmia.w	r8, {r0, r1}
 8022c4c:	4640      	mov	r0, r8
 8022c4e:	4621      	mov	r1, r4
 8022c50:	f7f1 fa6e 	bl	8014130 <_ZN8touchgfx4RectaNERKS0_>
 8022c54:	4640      	mov	r0, r8
 8022c56:	f7f1 faae 	bl	80141b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8022c5a:	2800      	cmp	r0, #0
 8022c5c:	d1d6      	bne.n	8022c0c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 8022c5e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022c62:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8022c66:	4293      	cmp	r3, r2
 8022c68:	dd12      	ble.n	8022c90 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x10c>
 8022c6a:	f9b4 0000 	ldrsh.w	r0, [r4]
 8022c6e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8022c72:	1a9b      	subs	r3, r3, r2
 8022c74:	f8ad 0018 	strh.w	r0, [sp, #24]
 8022c78:	f8ad 201a 	strh.w	r2, [sp, #26]
 8022c7c:	f8ad 101c 	strh.w	r1, [sp, #28]
 8022c80:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022c84:	464a      	mov	r2, r9
 8022c86:	4633      	mov	r3, r6
 8022c88:	a902      	add	r1, sp, #8
 8022c8a:	4628      	mov	r0, r5
 8022c8c:	f7ff f8c0 	bl	8021e10 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022c90:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8022c94:	f9b4 2000 	ldrsh.w	r2, [r4]
 8022c98:	4293      	cmp	r3, r2
 8022c9a:	dd12      	ble.n	8022cc2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x13e>
 8022c9c:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8022ca0:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8022ca4:	1a9b      	subs	r3, r3, r2
 8022ca6:	f8ad 2018 	strh.w	r2, [sp, #24]
 8022caa:	f8ad 001a 	strh.w	r0, [sp, #26]
 8022cae:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022cb2:	f8ad 101e 	strh.w	r1, [sp, #30]
 8022cb6:	23ff      	movs	r3, #255	@ 0xff
 8022cb8:	464a      	mov	r2, r9
 8022cba:	a902      	add	r1, sp, #8
 8022cbc:	4628      	mov	r0, r5
 8022cbe:	f7ff f8a7 	bl	8021e10 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022cc2:	4643      	mov	r3, r8
 8022cc4:	aa02      	add	r2, sp, #8
 8022cc6:	4629      	mov	r1, r5
 8022cc8:	4638      	mov	r0, r7
 8022cca:	f7ff f987 	bl	8021fdc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8022cce:	88a2      	ldrh	r2, [r4, #4]
 8022cd0:	8823      	ldrh	r3, [r4, #0]
 8022cd2:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8022cd6:	4413      	add	r3, r2
 8022cd8:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8022cdc:	b29b      	uxth	r3, r3
 8022cde:	440a      	add	r2, r1
 8022ce0:	b292      	uxth	r2, r2
 8022ce2:	b211      	sxth	r1, r2
 8022ce4:	b218      	sxth	r0, r3
 8022ce6:	4288      	cmp	r0, r1
 8022ce8:	dd12      	ble.n	8022d10 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x18c>
 8022cea:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8022cee:	1a9b      	subs	r3, r3, r2
 8022cf0:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8022cf4:	f8ad 1018 	strh.w	r1, [sp, #24]
 8022cf8:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022cfc:	f8ad 001e 	strh.w	r0, [sp, #30]
 8022d00:	23ff      	movs	r3, #255	@ 0xff
 8022d02:	464a      	mov	r2, r9
 8022d04:	a902      	add	r1, sp, #8
 8022d06:	4628      	mov	r0, r5
 8022d08:	f8ad 601a 	strh.w	r6, [sp, #26]
 8022d0c:	f7ff f880 	bl	8021e10 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022d10:	88e2      	ldrh	r2, [r4, #6]
 8022d12:	8863      	ldrh	r3, [r4, #2]
 8022d14:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8022d18:	4413      	add	r3, r2
 8022d1a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8022d1e:	b29b      	uxth	r3, r3
 8022d20:	440a      	add	r2, r1
 8022d22:	b292      	uxth	r2, r2
 8022d24:	b211      	sxth	r1, r2
 8022d26:	b218      	sxth	r0, r3
 8022d28:	4288      	cmp	r0, r1
 8022d2a:	dd80      	ble.n	8022c2e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8022d2c:	f9b4 6000 	ldrsh.w	r6, [r4]
 8022d30:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8022d34:	1a9b      	subs	r3, r3, r2
 8022d36:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022d3a:	f8ad 6018 	strh.w	r6, [sp, #24]
 8022d3e:	f8ad 101a 	strh.w	r1, [sp, #26]
 8022d42:	f8ad 001c 	strh.w	r0, [sp, #28]
 8022d46:	23ff      	movs	r3, #255	@ 0xff
 8022d48:	464a      	mov	r2, r9
 8022d4a:	e761      	b.n	8022c10 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 8022d4c:	4633      	mov	r3, r6
 8022d4e:	4622      	mov	r2, r4
 8022d50:	a902      	add	r1, sp, #8
 8022d52:	4628      	mov	r0, r5
 8022d54:	f7ff f9b2 	bl	80220bc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8022d58:	e769      	b.n	8022c2e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8022d5a:	e9cd 4600 	strd	r4, r6, [sp]
 8022d5e:	ab02      	add	r3, sp, #8
 8022d60:	4652      	mov	r2, sl
 8022d62:	4629      	mov	r1, r5
 8022d64:	4638      	mov	r0, r7
 8022d66:	f7ff fd89 	bl	802287c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8022d6a:	e760      	b.n	8022c2e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8022d6c:	4640      	mov	r0, r8
 8022d6e:	f7f9 fff5 	bl	801cd5c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8022d72:	b948      	cbnz	r0, 8022d88 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x204>
 8022d74:	683b      	ldr	r3, [r7, #0]
 8022d76:	e9cd 6000 	strd	r6, r0, [sp]
 8022d7a:	aa02      	add	r2, sp, #8
 8022d7c:	68de      	ldr	r6, [r3, #12]
 8022d7e:	4629      	mov	r1, r5
 8022d80:	4623      	mov	r3, r4
 8022d82:	4638      	mov	r0, r7
 8022d84:	47b0      	blx	r6
 8022d86:	e752      	b.n	8022c2e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8022d88:	f10d 0918 	add.w	r9, sp, #24
 8022d8c:	4641      	mov	r1, r8
 8022d8e:	4648      	mov	r0, r9
 8022d90:	f10d 0810 	add.w	r8, sp, #16
 8022d94:	f7f9 ff90 	bl	801ccb8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8022d98:	e899 0003 	ldmia.w	r9, {r0, r1}
 8022d9c:	e888 0003 	stmia.w	r8, {r0, r1}
 8022da0:	4640      	mov	r0, r8
 8022da2:	4621      	mov	r1, r4
 8022da4:	f7f1 f9c4 	bl	8014130 <_ZN8touchgfx4RectaNERKS0_>
 8022da8:	4640      	mov	r0, r8
 8022daa:	f7f1 fa04 	bl	80141b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8022dae:	b138      	cbz	r0, 8022dc0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x23c>
 8022db0:	4623      	mov	r3, r4
 8022db2:	9600      	str	r6, [sp, #0]
 8022db4:	aa02      	add	r2, sp, #8
 8022db6:	4651      	mov	r1, sl
 8022db8:	4628      	mov	r0, r5
 8022dba:	f7ff fdbd 	bl	8022938 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8022dbe:	e736      	b.n	8022c2e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8022dc0:	683b      	ldr	r3, [r7, #0]
 8022dc2:	e9cd 6000 	strd	r6, r0, [sp]
 8022dc6:	aa02      	add	r2, sp, #8
 8022dc8:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8022dcc:	4629      	mov	r1, r5
 8022dce:	4643      	mov	r3, r8
 8022dd0:	4638      	mov	r0, r7
 8022dd2:	47d8      	blx	fp
 8022dd4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022dd8:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8022ddc:	4293      	cmp	r3, r2
 8022dde:	dd13      	ble.n	8022e08 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x284>
 8022de0:	f9b4 0000 	ldrsh.w	r0, [r4]
 8022de4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8022de8:	1a9b      	subs	r3, r3, r2
 8022dea:	f8ad 0018 	strh.w	r0, [sp, #24]
 8022dee:	f8ad 201a 	strh.w	r2, [sp, #26]
 8022df2:	f8ad 101c 	strh.w	r1, [sp, #28]
 8022df6:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022dfa:	9600      	str	r6, [sp, #0]
 8022dfc:	464b      	mov	r3, r9
 8022dfe:	aa02      	add	r2, sp, #8
 8022e00:	4651      	mov	r1, sl
 8022e02:	4628      	mov	r0, r5
 8022e04:	f7ff fd98 	bl	8022938 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8022e08:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8022e0c:	f9b4 2000 	ldrsh.w	r2, [r4]
 8022e10:	4293      	cmp	r3, r2
 8022e12:	dd13      	ble.n	8022e3c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2b8>
 8022e14:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8022e18:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8022e1c:	1a9b      	subs	r3, r3, r2
 8022e1e:	f8ad 2018 	strh.w	r2, [sp, #24]
 8022e22:	f8ad 001a 	strh.w	r0, [sp, #26]
 8022e26:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022e2a:	f8ad 101e 	strh.w	r1, [sp, #30]
 8022e2e:	9600      	str	r6, [sp, #0]
 8022e30:	464b      	mov	r3, r9
 8022e32:	aa02      	add	r2, sp, #8
 8022e34:	4651      	mov	r1, sl
 8022e36:	4628      	mov	r0, r5
 8022e38:	f7ff fd7e 	bl	8022938 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8022e3c:	88a2      	ldrh	r2, [r4, #4]
 8022e3e:	8823      	ldrh	r3, [r4, #0]
 8022e40:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8022e44:	4413      	add	r3, r2
 8022e46:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8022e4a:	b29b      	uxth	r3, r3
 8022e4c:	440a      	add	r2, r1
 8022e4e:	b292      	uxth	r2, r2
 8022e50:	b211      	sxth	r1, r2
 8022e52:	b218      	sxth	r0, r3
 8022e54:	4288      	cmp	r0, r1
 8022e56:	dd13      	ble.n	8022e80 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2fc>
 8022e58:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8022e5c:	1a9b      	subs	r3, r3, r2
 8022e5e:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 8022e62:	f8ad 1018 	strh.w	r1, [sp, #24]
 8022e66:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022e6a:	f8ad 001e 	strh.w	r0, [sp, #30]
 8022e6e:	9600      	str	r6, [sp, #0]
 8022e70:	464b      	mov	r3, r9
 8022e72:	aa02      	add	r2, sp, #8
 8022e74:	4651      	mov	r1, sl
 8022e76:	4628      	mov	r0, r5
 8022e78:	f8ad 701a 	strh.w	r7, [sp, #26]
 8022e7c:	f7ff fd5c 	bl	8022938 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8022e80:	88e2      	ldrh	r2, [r4, #6]
 8022e82:	8863      	ldrh	r3, [r4, #2]
 8022e84:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8022e88:	4413      	add	r3, r2
 8022e8a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8022e8e:	b29b      	uxth	r3, r3
 8022e90:	440a      	add	r2, r1
 8022e92:	b292      	uxth	r2, r2
 8022e94:	b211      	sxth	r1, r2
 8022e96:	b218      	sxth	r0, r3
 8022e98:	4288      	cmp	r0, r1
 8022e9a:	f77f aec8 	ble.w	8022c2e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8022e9e:	f9b4 7000 	ldrsh.w	r7, [r4]
 8022ea2:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8022ea6:	1a9b      	subs	r3, r3, r2
 8022ea8:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022eac:	f8ad 7018 	strh.w	r7, [sp, #24]
 8022eb0:	f8ad 101a 	strh.w	r1, [sp, #26]
 8022eb4:	f8ad 001c 	strh.w	r0, [sp, #28]
 8022eb8:	9600      	str	r6, [sp, #0]
 8022eba:	464b      	mov	r3, r9
 8022ebc:	e77a      	b.n	8022db4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x230>
 8022ebe:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8022ec2:	2800      	cmp	r0, #0
 8022ec4:	f43f aeb3 	beq.w	8022c2e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8022ec8:	6803      	ldr	r3, [r0, #0]
 8022eca:	9600      	str	r6, [sp, #0]
 8022ecc:	68de      	ldr	r6, [r3, #12]
 8022ece:	4623      	mov	r3, r4
 8022ed0:	aa02      	add	r2, sp, #8
 8022ed2:	4629      	mov	r1, r5
 8022ed4:	47b0      	blx	r6
 8022ed6:	e6aa      	b.n	8022c2e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8022ed8:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8022edc:	2800      	cmp	r0, #0
 8022ede:	f43f aea6 	beq.w	8022c2e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8022ee2:	6803      	ldr	r3, [r0, #0]
 8022ee4:	9600      	str	r6, [sp, #0]
 8022ee6:	689e      	ldr	r6, [r3, #8]
 8022ee8:	e7f1      	b.n	8022ece <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x34a>
 8022eea:	bf00      	nop
 8022eec:	2005ba7c 	.word	0x2005ba7c

08022ef0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8022ef0:	b180      	cbz	r0, 8022f14 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 8022ef2:	2903      	cmp	r1, #3
 8022ef4:	d81c      	bhi.n	8022f30 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8022ef6:	e8df f001 	tbb	[pc, r1]
 8022efa:	1d02      	.short	0x1d02
 8022efc:	1f08      	.short	0x1f08
 8022efe:	4b10      	ldr	r3, [pc, #64]	@ (8022f40 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8022f00:	8818      	ldrh	r0, [r3, #0]
 8022f02:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8022f06:	4240      	negs	r0, r0
 8022f08:	4770      	bx	lr
 8022f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8022f40 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8022f0c:	8818      	ldrh	r0, [r3, #0]
 8022f0e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8022f12:	4770      	bx	lr
 8022f14:	2903      	cmp	r1, #3
 8022f16:	d80b      	bhi.n	8022f30 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8022f18:	a301      	add	r3, pc, #4	@ (adr r3, 8022f20 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 8022f1a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8022f1e:	bf00      	nop
 8022f20:	08022f35 	.word	0x08022f35
 8022f24:	08022f0b 	.word	0x08022f0b
 8022f28:	08022f39 	.word	0x08022f39
 8022f2c:	08022eff 	.word	0x08022eff
 8022f30:	2000      	movs	r0, #0
 8022f32:	4770      	bx	lr
 8022f34:	2001      	movs	r0, #1
 8022f36:	4770      	bx	lr
 8022f38:	f04f 30ff 	mov.w	r0, #4294967295
 8022f3c:	4770      	bx	lr
 8022f3e:	bf00      	nop
 8022f40:	2005ba76 	.word	0x2005ba76

08022f44 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8022f44:	b180      	cbz	r0, 8022f68 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 8022f46:	2903      	cmp	r1, #3
 8022f48:	d81c      	bhi.n	8022f84 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8022f4a:	e8df f001 	tbb	[pc, r1]
 8022f4e:	021d      	.short	0x021d
 8022f50:	071f      	.short	0x071f
 8022f52:	4b10      	ldr	r3, [pc, #64]	@ (8022f94 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8022f54:	8818      	ldrh	r0, [r3, #0]
 8022f56:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8022f5a:	4770      	bx	lr
 8022f5c:	4b0d      	ldr	r3, [pc, #52]	@ (8022f94 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8022f5e:	8818      	ldrh	r0, [r3, #0]
 8022f60:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8022f64:	4240      	negs	r0, r0
 8022f66:	4770      	bx	lr
 8022f68:	2903      	cmp	r1, #3
 8022f6a:	d80b      	bhi.n	8022f84 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8022f6c:	a301      	add	r3, pc, #4	@ (adr r3, 8022f74 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 8022f6e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8022f72:	bf00      	nop
 8022f74:	08022f53 	.word	0x08022f53
 8022f78:	08022f8d 	.word	0x08022f8d
 8022f7c:	08022f5d 	.word	0x08022f5d
 8022f80:	08022f89 	.word	0x08022f89
 8022f84:	2000      	movs	r0, #0
 8022f86:	4770      	bx	lr
 8022f88:	2001      	movs	r0, #1
 8022f8a:	4770      	bx	lr
 8022f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8022f90:	4770      	bx	lr
 8022f92:	bf00      	nop
 8022f94:	2005ba76 	.word	0x2005ba76

08022f98 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8022f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f9c:	b099      	sub	sp, #100	@ 0x64
 8022f9e:	910d      	str	r1, [sp, #52]	@ 0x34
 8022fa0:	a914      	add	r1, sp, #80	@ 0x50
 8022fa2:	e881 000c 	stmia.w	r1, {r2, r3}
 8022fa6:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	@ 0x98
 8022faa:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	@ 0x8c
 8022fae:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	@ 0x88
 8022fb2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022fb4:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8022fb8:	f8bd 5090 	ldrh.w	r5, [sp, #144]	@ 0x90
 8022fbc:	9310      	str	r3, [sp, #64]	@ 0x40
 8022fbe:	f89d 30ac 	ldrb.w	r3, [sp, #172]	@ 0xac
 8022fc2:	f8bd 6094 	ldrh.w	r6, [sp, #148]	@ 0x94
 8022fc6:	9308      	str	r3, [sp, #32]
 8022fc8:	f89d 30b0 	ldrb.w	r3, [sp, #176]	@ 0xb0
 8022fcc:	9f28      	ldr	r7, [sp, #160]	@ 0xa0
 8022fce:	9309      	str	r3, [sp, #36]	@ 0x24
 8022fd0:	7b4b      	ldrb	r3, [r1, #13]
 8022fd2:	f8dd 90a8 	ldr.w	r9, [sp, #168]	@ 0xa8
 8022fd6:	ea4f 1843 	mov.w	r8, r3, lsl #5
 8022fda:	f408 7080 	and.w	r0, r8, #256	@ 0x100
 8022fde:	f891 8006 	ldrb.w	r8, [r1, #6]
 8022fe2:	f89d a0b4 	ldrb.w	sl, [sp, #180]	@ 0xb4
 8022fe6:	ea58 0800 	orrs.w	r8, r8, r0
 8022fea:	f000 81cc 	beq.w	8023386 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ee>
 8022fee:	011b      	lsls	r3, r3, #4
 8022ff0:	79c8      	ldrb	r0, [r1, #7]
 8022ff2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8022ff6:	4303      	orrs	r3, r0
 8022ff8:	930c      	str	r3, [sp, #48]	@ 0x30
 8022ffa:	f000 81c4 	beq.w	8023386 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ee>
 8022ffe:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8023002:	b29b      	uxth	r3, r3
 8023004:	2d00      	cmp	r5, #0
 8023006:	f000 812a 	beq.w	802325e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c6>
 802300a:	1aed      	subs	r5, r5, r3
 802300c:	b2ad      	uxth	r5, r5
 802300e:	0429      	lsls	r1, r5, #16
 8023010:	d502      	bpl.n	8023018 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x80>
 8023012:	1b64      	subs	r4, r4, r5
 8023014:	2500      	movs	r5, #0
 8023016:	b224      	sxth	r4, r4
 8023018:	f9b2 0000 	ldrsh.w	r0, [r2]
 802301c:	8891      	ldrh	r1, [r2, #4]
 802301e:	4284      	cmp	r4, r0
 8023020:	b283      	uxth	r3, r0
 8023022:	bfbf      	itttt	lt
 8023024:	18ed      	addlt	r5, r5, r3
 8023026:	1b2c      	sublt	r4, r5, r4
 8023028:	b2a5      	uxthlt	r5, r4
 802302a:	4604      	movlt	r4, r0
 802302c:	440b      	add	r3, r1
 802302e:	b21b      	sxth	r3, r3
 8023030:	930a      	str	r3, [sp, #40]	@ 0x28
 8023032:	88d3      	ldrh	r3, [r2, #6]
 8023034:	8852      	ldrh	r2, [r2, #2]
 8023036:	4621      	mov	r1, r4
 8023038:	4413      	add	r3, r2
 802303a:	b21b      	sxth	r3, r3
 802303c:	930f      	str	r3, [sp, #60]	@ 0x3c
 802303e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023040:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8023042:	930e      	str	r3, [sp, #56]	@ 0x38
 8023044:	4bb2      	ldr	r3, [pc, #712]	@ (8023310 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>)
 8023046:	a814      	add	r0, sp, #80	@ 0x50
 8023048:	f893 b000 	ldrb.w	fp, [r3]
 802304c:	4653      	mov	r3, sl
 802304e:	f7f6 f879 	bl	8019144 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8023052:	4621      	mov	r1, r4
 8023054:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
 8023058:	4653      	mov	r3, sl
 802305a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802305c:	a814      	add	r0, sp, #80	@ 0x50
 802305e:	f7f6 f88e 	bl	801917e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8023062:	a918      	add	r1, sp, #96	@ 0x60
 8023064:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8023068:	a817      	add	r0, sp, #92	@ 0x5c
 802306a:	f7f6 f9b5 	bl	80193d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 802306e:	f1ba 0f00 	cmp.w	sl, #0
 8023072:	f040 80f7 	bne.w	8023264 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 8023076:	f1bb 0f01 	cmp.w	fp, #1
 802307a:	f040 80fb 	bne.w	8023274 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2dc>
 802307e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023080:	2b00      	cmp	r3, #0
 8023082:	f040 81a8 	bne.w	80233d6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x43e>
 8023086:	fa1f f288 	uxth.w	r2, r8
 802308a:	b905      	cbnz	r5, 802308e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf6>
 802308c:	b15e      	cbz	r6, 80230a6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 802308e:	4631      	mov	r1, r6
 8023090:	fb06 5302 	mla	r3, r6, r2, r5
 8023094:	9808      	ldr	r0, [sp, #32]
 8023096:	4343      	muls	r3, r0
 8023098:	f003 0607 	and.w	r6, r3, #7
 802309c:	eb07 07d3 	add.w	r7, r7, r3, lsr #3
 80230a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80230a2:	1a5b      	subs	r3, r3, r1
 80230a4:	930e      	str	r3, [sp, #56]	@ 0x38
 80230a6:	f10b 31ff 	add.w	r1, fp, #4294967295
 80230aa:	424b      	negs	r3, r1
 80230ac:	414b      	adcs	r3, r1
 80230ae:	4618      	mov	r0, r3
 80230b0:	4651      	mov	r1, sl
 80230b2:	930c      	str	r3, [sp, #48]	@ 0x30
 80230b4:	f7ff ff1c 	bl	8022ef0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 80230b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80230ba:	4683      	mov	fp, r0
 80230bc:	4618      	mov	r0, r3
 80230be:	f7ff ff41 	bl	8022f44 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 80230c2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80230c4:	4603      	mov	r3, r0
 80230c6:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80230c8:	eba1 0a00 	sub.w	sl, r1, r0
 80230cc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80230ce:	458a      	cmp	sl, r1
 80230d0:	bfa8      	it	ge
 80230d2:	468a      	movge	sl, r1
 80230d4:	f1ba 0f00 	cmp.w	sl, #0
 80230d8:	f340 8155 	ble.w	8023386 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ee>
 80230dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80230de:	1b64      	subs	r4, r4, r5
 80230e0:	1b0c      	subs	r4, r1, r4
 80230e2:	4544      	cmp	r4, r8
 80230e4:	bfd4      	ite	le
 80230e6:	ebc5 0504 	rsble	r5, r5, r4
 80230ea:	ebc5 0508 	rsbgt	r5, r5, r8
 80230ee:	2d00      	cmp	r5, #0
 80230f0:	f340 8149 	ble.w	8023386 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ee>
 80230f4:	9908      	ldr	r1, [sp, #32]
 80230f6:	1b52      	subs	r2, r2, r5
 80230f8:	434a      	muls	r2, r1
 80230fa:	920e      	str	r2, [sp, #56]	@ 0x38
 80230fc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80230fe:	2a00      	cmp	r2, #0
 8023100:	f040 8175 	bne.w	80233ee <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x456>
 8023104:	4a83      	ldr	r2, [pc, #524]	@ (8023314 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 8023106:	930a      	str	r3, [sp, #40]	@ 0x28
 8023108:	6810      	ldr	r0, [r2, #0]
 802310a:	6802      	ldr	r2, [r0, #0]
 802310c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 802310e:	4790      	blx	r2
 8023110:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023112:	2201      	movs	r2, #1
 8023114:	9908      	ldr	r1, [sp, #32]
 8023116:	408a      	lsls	r2, r1
 8023118:	3a01      	subs	r2, #1
 802311a:	497f      	ldr	r1, [pc, #508]	@ (8023318 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 802311c:	b2d2      	uxtb	r2, r2
 802311e:	880c      	ldrh	r4, [r1, #0]
 8023120:	920c      	str	r2, [sp, #48]	@ 0x30
 8023122:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	@ 0x5c
 8023126:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	@ 0x5e
 802312a:	fb04 1202 	mla	r2, r4, r2, r1
 802312e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8023132:	ea4f 2419 	mov.w	r4, r9, lsr #8
 8023136:	920a      	str	r2, [sp, #40]	@ 0x28
 8023138:	f3c9 4207 	ubfx	r2, r9, #16, #8
 802313c:	9212      	str	r2, [sp, #72]	@ 0x48
 802313e:	b2e2      	uxtb	r2, r4
 8023140:	9211      	str	r2, [sp, #68]	@ 0x44
 8023142:	fa5f f289 	uxtb.w	r2, r9
 8023146:	9210      	str	r2, [sp, #64]	@ 0x40
 8023148:	4a74      	ldr	r2, [pc, #464]	@ (802331c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 802314a:	ea4f 1159 	mov.w	r1, r9, lsr #5
 802314e:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8023152:	4022      	ands	r2, r4
 8023154:	430a      	orrs	r2, r1
 8023156:	ea4f 014b 	mov.w	r1, fp, lsl #1
 802315a:	fb05 3b1b 	mls	fp, r5, fp, r3
 802315e:	460b      	mov	r3, r1
 8023160:	f3c9 09c4 	ubfx	r9, r9, #3, #5
 8023164:	ea42 0209 	orr.w	r2, r2, r9
 8023168:	436b      	muls	r3, r5
 802316a:	b292      	uxth	r2, r2
 802316c:	920f      	str	r2, [sp, #60]	@ 0x3c
 802316e:	783a      	ldrb	r2, [r7, #0]
 8023170:	eb03 034b 	add.w	r3, r3, fp, lsl #1
 8023174:	4132      	asrs	r2, r6
 8023176:	b2d2      	uxtb	r2, r2
 8023178:	910b      	str	r1, [sp, #44]	@ 0x2c
 802317a:	9313      	str	r3, [sp, #76]	@ 0x4c
 802317c:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8023180:	f0c0 8149 	bcc.w	8023416 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x47e>
 8023184:	46a9      	mov	r9, r5
 8023186:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 802318a:	f119 39ff 	adds.w	r9, r9, #4294967295
 802318e:	f0c0 8132 	bcc.w	80233f6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x45e>
 8023192:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023194:	4013      	ands	r3, r2
 8023196:	d054      	beq.n	8023242 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2aa>
 8023198:	20ff      	movs	r0, #255	@ 0xff
 802319a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802319c:	fb90 f1f1 	sdiv	r1, r0, r1
 80231a0:	434b      	muls	r3, r1
 80231a2:	2bfe      	cmp	r3, #254	@ 0xfe
 80231a4:	dd03      	ble.n	80231ae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x216>
 80231a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80231a8:	4281      	cmp	r1, r0
 80231aa:	f000 8122 	beq.w	80233f2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x45a>
 80231ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80231b0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80231b2:	fb11 f303 	smulbb	r3, r1, r3
 80231b6:	b29b      	uxth	r3, r3
 80231b8:	1c59      	adds	r1, r3, #1
 80231ba:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80231be:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80231c2:	fa1f fe83 	uxth.w	lr, r3
 80231c6:	43db      	mvns	r3, r3
 80231c8:	f8b8 4000 	ldrh.w	r4, [r8]
 80231cc:	fb10 fb0e 	smulbb	fp, r0, lr
 80231d0:	1221      	asrs	r1, r4, #8
 80231d2:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80231d4:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80231d8:	b2db      	uxtb	r3, r3
 80231da:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 80231de:	fb01 b103 	mla	r1, r1, r3, fp
 80231e2:	fb10 fb0e 	smulbb	fp, r0, lr
 80231e6:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80231e8:	ea4f 0ce4 	mov.w	ip, r4, asr #3
 80231ec:	fb10 fe0e 	smulbb	lr, r0, lr
 80231f0:	00e4      	lsls	r4, r4, #3
 80231f2:	b2e4      	uxtb	r4, r4
 80231f4:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 80231f8:	fb04 e403 	mla	r4, r4, r3, lr
 80231fc:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 8023200:	ea4c 1c9c 	orr.w	ip, ip, ip, lsr #6
 8023204:	fb0c bc03 	mla	ip, ip, r3, fp
 8023208:	b289      	uxth	r1, r1
 802320a:	b2a4      	uxth	r4, r4
 802320c:	1c4b      	adds	r3, r1, #1
 802320e:	f104 0b01 	add.w	fp, r4, #1
 8023212:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8023216:	eb0b 2b14 	add.w	fp, fp, r4, lsr #8
 802321a:	fa1f fc8c 	uxth.w	ip, ip
 802321e:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 8023222:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 8023226:	ea4b 0101 	orr.w	r1, fp, r1
 802322a:	f10c 0b01 	add.w	fp, ip, #1
 802322e:	eb0b 2b1c 	add.w	fp, fp, ip, lsr #8
 8023232:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8023236:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 802323a:	ea41 010b 	orr.w	r1, r1, fp
 802323e:	f8a8 1000 	strh.w	r1, [r8]
 8023242:	9b08      	ldr	r3, [sp, #32]
 8023244:	441e      	add	r6, r3
 8023246:	b2b6      	uxth	r6, r6
 8023248:	2e07      	cmp	r6, #7
 802324a:	bf98      	it	ls
 802324c:	411a      	asrls	r2, r3
 802324e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023250:	bf89      	itett	hi
 8023252:	787a      	ldrbhi	r2, [r7, #1]
 8023254:	b2d2      	uxtbls	r2, r2
 8023256:	3701      	addhi	r7, #1
 8023258:	2600      	movhi	r6, #0
 802325a:	4498      	add	r8, r3
 802325c:	e795      	b.n	802318a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f2>
 802325e:	441c      	add	r4, r3
 8023260:	b224      	sxth	r4, r4
 8023262:	e6d9      	b.n	8023018 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x80>
 8023264:	f1ba 0f01 	cmp.w	sl, #1
 8023268:	f47f af09 	bne.w	802307e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xe6>
 802326c:	f1bb 0f01 	cmp.w	fp, #1
 8023270:	f47f af05 	bne.w	802307e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xe6>
 8023274:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023276:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8023278:	1a99      	subs	r1, r3, r2
 802327a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802327c:	1b9b      	subs	r3, r3, r6
 802327e:	4299      	cmp	r1, r3
 8023280:	bfa8      	it	ge
 8023282:	4619      	movge	r1, r3
 8023284:	2900      	cmp	r1, #0
 8023286:	9112      	str	r1, [sp, #72]	@ 0x48
 8023288:	dd7d      	ble.n	8023386 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ee>
 802328a:	4a22      	ldr	r2, [pc, #136]	@ (8023314 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 802328c:	6810      	ldr	r0, [r2, #0]
 802328e:	9211      	str	r2, [sp, #68]	@ 0x44
 8023290:	6803      	ldr	r3, [r0, #0]
 8023292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8023294:	4798      	blx	r3
 8023296:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 802329a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 802329c:	d006      	beq.n	80232ac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x314>
 802329e:	9b08      	ldr	r3, [sp, #32]
 80232a0:	2b04      	cmp	r3, #4
 80232a2:	d133      	bne.n	802330c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 80232a4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80232a6:	3300      	adds	r3, #0
 80232a8:	bf18      	it	ne
 80232aa:	2301      	movne	r3, #1
 80232ac:	0582      	lsls	r2, r0, #22
 80232ae:	fa1f fc88 	uxth.w	ip, r8
 80232b2:	f140 80b9 	bpl.w	8023428 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x490>
 80232b6:	9808      	ldr	r0, [sp, #32]
 80232b8:	2808      	cmp	r0, #8
 80232ba:	f040 80b5 	bne.w	8023428 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x490>
 80232be:	2b00      	cmp	r3, #0
 80232c0:	d064      	beq.n	802338c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f4>
 80232c2:	f10c 0c01 	add.w	ip, ip, #1
 80232c6:	f02c 0301 	bic.w	r3, ip, #1
 80232ca:	b29b      	uxth	r3, r3
 80232cc:	bb45      	cbnz	r5, 8023320 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>
 80232ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80232d0:	eb08 0004 	add.w	r0, r8, r4
 80232d4:	4290      	cmp	r0, r2
 80232d6:	dc23      	bgt.n	8023320 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>
 80232d8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80232da:	f8bd e05e 	ldrh.w	lr, [sp, #94]	@ 0x5e
 80232de:	6810      	ldr	r0, [r2, #0]
 80232e0:	b289      	uxth	r1, r1
 80232e2:	6804      	ldr	r4, [r0, #0]
 80232e4:	9506      	str	r5, [sp, #24]
 80232e6:	f44f 7580 	mov.w	r5, #256	@ 0x100
 80232ea:	e9cd 3100 	strd	r3, r1, [sp]
 80232ee:	9302      	str	r3, [sp, #8]
 80232f0:	4673      	mov	r3, lr
 80232f2:	9505      	str	r5, [sp, #20]
 80232f4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80232f6:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80232fa:	e9cd 9503 	strd	r9, r5, [sp, #12]
 80232fe:	fb06 710c 	mla	r1, r6, ip, r7
 8023302:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 8023306:	6da4      	ldr	r4, [r4, #88]	@ 0x58
 8023308:	47a0      	blx	r4
 802330a:	e03c      	b.n	8023386 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ee>
 802330c:	2300      	movs	r3, #0
 802330e:	e7cd      	b.n	80232ac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x314>
 8023310:	2005ba74 	.word	0x2005ba74
 8023314:	2005ba7c 	.word	0x2005ba7c
 8023318:	2005ba76 	.word	0x2005ba76
 802331c:	00fff800 	.word	0x00fff800
 8023320:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023322:	eba4 0e05 	sub.w	lr, r4, r5
 8023326:	eba2 0e0e 	sub.w	lr, r2, lr
 802332a:	45c6      	cmp	lr, r8
 802332c:	bfd4      	ite	le
 802332e:	ebc5 0e0e 	rsble	lr, r5, lr
 8023332:	ebc5 0e08 	rsbgt	lr, r5, r8
 8023336:	f1be 0f00 	cmp.w	lr, #0
 802333a:	d024      	beq.n	8023386 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ee>
 802333c:	07e8      	lsls	r0, r5, #31
 802333e:	f53f ae9e 	bmi.w	802307e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xe6>
 8023342:	f01e 0001 	ands.w	r0, lr, #1
 8023346:	f47f ae9a 	bne.w	802307e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xe6>
 802334a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802334c:	086d      	lsrs	r5, r5, #1
 802334e:	6814      	ldr	r4, [r2, #0]
 8023350:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8023354:	fb06 560c 	mla	r6, r6, ip, r5
 8023358:	6825      	ldr	r5, [r4, #0]
 802335a:	9006      	str	r0, [sp, #24]
 802335c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8023360:	9005      	str	r0, [sp, #20]
 8023362:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8023364:	9302      	str	r3, [sp, #8]
 8023366:	e9cd 9003 	strd	r9, r0, [sp, #12]
 802336a:	b289      	uxth	r1, r1
 802336c:	fa1f f38e 	uxth.w	r3, lr
 8023370:	f8bd 805e 	ldrh.w	r8, [sp, #94]	@ 0x5e
 8023374:	9101      	str	r1, [sp, #4]
 8023376:	9300      	str	r3, [sp, #0]
 8023378:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 802337c:	6dad      	ldr	r5, [r5, #88]	@ 0x58
 802337e:	4643      	mov	r3, r8
 8023380:	19b9      	adds	r1, r7, r6
 8023382:	4620      	mov	r0, r4
 8023384:	47a8      	blx	r5
 8023386:	b019      	add	sp, #100	@ 0x64
 8023388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802338c:	4a28      	ldr	r2, [pc, #160]	@ (8023430 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x498>)
 802338e:	1b64      	subs	r4, r4, r5
 8023390:	6810      	ldr	r0, [r2, #0]
 8023392:	fb06 5608 	mla	r6, r6, r8, r5
 8023396:	f8d0 a000 	ldr.w	sl, [r0]
 802339a:	9306      	str	r3, [sp, #24]
 802339c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80233a0:	9305      	str	r3, [sp, #20]
 80233a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80233a4:	b289      	uxth	r1, r1
 80233a6:	e9cd 9303 	strd	r9, r3, [sp, #12]
 80233aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80233ac:	f8bd e05e 	ldrh.w	lr, [sp, #94]	@ 0x5e
 80233b0:	1b1c      	subs	r4, r3, r4
 80233b2:	4544      	cmp	r4, r8
 80233b4:	bfd4      	ite	le
 80233b6:	ebc5 0504 	rsble	r5, r5, r4
 80233ba:	ebc5 0508 	rsbgt	r5, r5, r8
 80233be:	b2ad      	uxth	r5, r5
 80233c0:	9101      	str	r1, [sp, #4]
 80233c2:	f8cd c008 	str.w	ip, [sp, #8]
 80233c6:	9500      	str	r5, [sp, #0]
 80233c8:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 80233cc:	f8da 4058 	ldr.w	r4, [sl, #88]	@ 0x58
 80233d0:	4673      	mov	r3, lr
 80233d2:	19b9      	adds	r1, r7, r6
 80233d4:	e798      	b.n	8023308 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x370>
 80233d6:	2208      	movs	r2, #8
 80233d8:	9b08      	ldr	r3, [sp, #32]
 80233da:	fb92 f3f3 	sdiv	r3, r2, r3
 80233de:	1e5a      	subs	r2, r3, #1
 80233e0:	4442      	add	r2, r8
 80233e2:	fb92 f2f3 	sdiv	r2, r2, r3
 80233e6:	fb12 f203 	smulbb	r2, r2, r3
 80233ea:	b292      	uxth	r2, r2
 80233ec:	e64d      	b.n	802308a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 80233ee:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80233f0:	e68f      	b.n	8023112 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x17a>
 80233f2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80233f4:	e723      	b.n	802323e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a6>
 80233f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80233f8:	b143      	cbz	r3, 802340c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x474>
 80233fa:	441e      	add	r6, r3
 80233fc:	b2b6      	uxth	r6, r6
 80233fe:	eb07 07d6 	add.w	r7, r7, r6, lsr #3
 8023402:	783a      	ldrb	r2, [r7, #0]
 8023404:	f006 0607 	and.w	r6, r6, #7
 8023408:	4132      	asrs	r2, r6
 802340a:	b2d2      	uxtb	r2, r2
 802340c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802340e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023410:	4419      	add	r1, r3
 8023412:	910a      	str	r1, [sp, #40]	@ 0x28
 8023414:	e6b2      	b.n	802317c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e4>
 8023416:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023418:	2b00      	cmp	r3, #0
 802341a:	d1b4      	bne.n	8023386 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ee>
 802341c:	4b04      	ldr	r3, [pc, #16]	@ (8023430 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x498>)
 802341e:	6818      	ldr	r0, [r3, #0]
 8023420:	6803      	ldr	r3, [r0, #0]
 8023422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8023424:	4798      	blx	r3
 8023426:	e7ae      	b.n	8023386 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ee>
 8023428:	2b00      	cmp	r3, #0
 802342a:	f47f af4a 	bne.w	80232c2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x32a>
 802342e:	e626      	b.n	802307e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xe6>
 8023430:	2005ba7c 	.word	0x2005ba7c

08023434 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 8023434:	b538      	push	{r3, r4, r5, lr}
 8023436:	4605      	mov	r5, r0
 8023438:	4c13      	ldr	r4, [pc, #76]	@ (8023488 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x54>)
 802343a:	e8d4 3f8f 	ldab	r3, [r4]
 802343e:	07da      	lsls	r2, r3, #31
 8023440:	d40b      	bmi.n	802345a <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x26>
 8023442:	4620      	mov	r0, r4
 8023444:	f008 fc23 	bl	802bc8e <__cxa_guard_acquire>
 8023448:	b138      	cbz	r0, 802345a <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x26>
 802344a:	4620      	mov	r0, r4
 802344c:	f008 fc2b 	bl	802bca6 <__cxa_guard_release>
 8023450:	4a0e      	ldr	r2, [pc, #56]	@ (802348c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 8023452:	490f      	ldr	r1, [pc, #60]	@ (8023490 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8023454:	480f      	ldr	r0, [pc, #60]	@ (8023494 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 8023456:	f008 fc13 	bl	802bc80 <__aeabi_atexit>
 802345a:	4c0f      	ldr	r4, [pc, #60]	@ (8023498 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 802345c:	e8d4 3f8f 	ldab	r3, [r4]
 8023460:	07db      	lsls	r3, r3, #31
 8023462:	d40b      	bmi.n	802347c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x48>
 8023464:	4620      	mov	r0, r4
 8023466:	f008 fc12 	bl	802bc8e <__cxa_guard_acquire>
 802346a:	b138      	cbz	r0, 802347c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x48>
 802346c:	4620      	mov	r0, r4
 802346e:	f008 fc1a 	bl	802bca6 <__cxa_guard_release>
 8023472:	4a06      	ldr	r2, [pc, #24]	@ (802348c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 8023474:	4909      	ldr	r1, [pc, #36]	@ (802349c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 8023476:	480a      	ldr	r0, [pc, #40]	@ (80234a0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 8023478:	f008 fc02 	bl	802bc80 <__aeabi_atexit>
 802347c:	4b05      	ldr	r3, [pc, #20]	@ (8023494 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 802347e:	616b      	str	r3, [r5, #20]
 8023480:	4b07      	ldr	r3, [pc, #28]	@ (80234a0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 8023482:	61ab      	str	r3, [r5, #24]
 8023484:	bd38      	pop	{r3, r4, r5, pc}
 8023486:	bf00      	nop
 8023488:	2005bb60 	.word	0x2005bb60
 802348c:	20000000 	.word	0x20000000
 8023490:	0801f54b 	.word	0x0801f54b
 8023494:	20000068 	.word	0x20000068
 8023498:	2005bb64 	.word	0x2005bb64
 802349c:	0801f549 	.word	0x0801f549
 80234a0:	2000006c 	.word	0x2000006c

080234a4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 80234a4:	b538      	push	{r3, r4, r5, lr}
 80234a6:	4605      	mov	r5, r0
 80234a8:	4c13      	ldr	r4, [pc, #76]	@ (80234f8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x54>)
 80234aa:	e8d4 3f8f 	ldab	r3, [r4]
 80234ae:	07da      	lsls	r2, r3, #31
 80234b0:	d40b      	bmi.n	80234ca <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x26>
 80234b2:	4620      	mov	r0, r4
 80234b4:	f008 fbeb 	bl	802bc8e <__cxa_guard_acquire>
 80234b8:	b138      	cbz	r0, 80234ca <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x26>
 80234ba:	4620      	mov	r0, r4
 80234bc:	f008 fbf3 	bl	802bca6 <__cxa_guard_release>
 80234c0:	4a0e      	ldr	r2, [pc, #56]	@ (80234fc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 80234c2:	490f      	ldr	r1, [pc, #60]	@ (8023500 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 80234c4:	480f      	ldr	r0, [pc, #60]	@ (8023504 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 80234c6:	f008 fbdb 	bl	802bc80 <__aeabi_atexit>
 80234ca:	4c0f      	ldr	r4, [pc, #60]	@ (8023508 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 80234cc:	e8d4 3f8f 	ldab	r3, [r4]
 80234d0:	07db      	lsls	r3, r3, #31
 80234d2:	d40b      	bmi.n	80234ec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x48>
 80234d4:	4620      	mov	r0, r4
 80234d6:	f008 fbda 	bl	802bc8e <__cxa_guard_acquire>
 80234da:	b138      	cbz	r0, 80234ec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x48>
 80234dc:	4620      	mov	r0, r4
 80234de:	f008 fbe2 	bl	802bca6 <__cxa_guard_release>
 80234e2:	4a06      	ldr	r2, [pc, #24]	@ (80234fc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 80234e4:	4909      	ldr	r1, [pc, #36]	@ (802350c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 80234e6:	480a      	ldr	r0, [pc, #40]	@ (8023510 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 80234e8:	f008 fbca 	bl	802bc80 <__aeabi_atexit>
 80234ec:	4b05      	ldr	r3, [pc, #20]	@ (8023504 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 80234ee:	60eb      	str	r3, [r5, #12]
 80234f0:	4b07      	ldr	r3, [pc, #28]	@ (8023510 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 80234f2:	612b      	str	r3, [r5, #16]
 80234f4:	bd38      	pop	{r3, r4, r5, pc}
 80234f6:	bf00      	nop
 80234f8:	2005bb38 	.word	0x2005bb38
 80234fc:	20000000 	.word	0x20000000
 8023500:	0801f54f 	.word	0x0801f54f
 8023504:	20000040 	.word	0x20000040
 8023508:	2005bb3c 	.word	0x2005bb3c
 802350c:	0801f54d 	.word	0x0801f54d
 8023510:	20000044 	.word	0x20000044

08023514 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 8023514:	b510      	push	{r4, lr}
 8023516:	4604      	mov	r4, r0
 8023518:	f7ff ff8c 	bl	8023434 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 802351c:	4620      	mov	r0, r4
 802351e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023522:	f7ff bfbf 	b.w	80234a4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

08023528 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8023528:	b538      	push	{r3, r4, r5, lr}
 802352a:	4605      	mov	r5, r0
 802352c:	4c13      	ldr	r4, [pc, #76]	@ (802357c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x54>)
 802352e:	e8d4 3f8f 	ldab	r3, [r4]
 8023532:	07da      	lsls	r2, r3, #31
 8023534:	d40b      	bmi.n	802354e <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x26>
 8023536:	4620      	mov	r0, r4
 8023538:	f008 fba9 	bl	802bc8e <__cxa_guard_acquire>
 802353c:	b138      	cbz	r0, 802354e <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x26>
 802353e:	4620      	mov	r0, r4
 8023540:	f008 fbb1 	bl	802bca6 <__cxa_guard_release>
 8023544:	4a0e      	ldr	r2, [pc, #56]	@ (8023580 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8023546:	490f      	ldr	r1, [pc, #60]	@ (8023584 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8023548:	480f      	ldr	r0, [pc, #60]	@ (8023588 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 802354a:	f008 fb99 	bl	802bc80 <__aeabi_atexit>
 802354e:	4c0f      	ldr	r4, [pc, #60]	@ (802358c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8023550:	e8d4 3f8f 	ldab	r3, [r4]
 8023554:	07db      	lsls	r3, r3, #31
 8023556:	d40b      	bmi.n	8023570 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x48>
 8023558:	4620      	mov	r0, r4
 802355a:	f008 fb98 	bl	802bc8e <__cxa_guard_acquire>
 802355e:	b138      	cbz	r0, 8023570 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x48>
 8023560:	4620      	mov	r0, r4
 8023562:	f008 fba0 	bl	802bca6 <__cxa_guard_release>
 8023566:	4a06      	ldr	r2, [pc, #24]	@ (8023580 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8023568:	4909      	ldr	r1, [pc, #36]	@ (8023590 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 802356a:	480a      	ldr	r0, [pc, #40]	@ (8023594 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 802356c:	f008 fb88 	bl	802bc80 <__aeabi_atexit>
 8023570:	4b05      	ldr	r3, [pc, #20]	@ (8023588 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8023572:	626b      	str	r3, [r5, #36]	@ 0x24
 8023574:	4b07      	ldr	r3, [pc, #28]	@ (8023594 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8023576:	62ab      	str	r3, [r5, #40]	@ 0x28
 8023578:	bd38      	pop	{r3, r4, r5, pc}
 802357a:	bf00      	nop
 802357c:	2005bb68 	.word	0x2005bb68
 8023580:	20000000 	.word	0x20000000
 8023584:	0801f543 	.word	0x0801f543
 8023588:	20000070 	.word	0x20000070
 802358c:	2005bb6c 	.word	0x2005bb6c
 8023590:	0801f541 	.word	0x0801f541
 8023594:	20000074 	.word	0x20000074

08023598 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8023598:	b538      	push	{r3, r4, r5, lr}
 802359a:	4605      	mov	r5, r0
 802359c:	4c13      	ldr	r4, [pc, #76]	@ (80235ec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x54>)
 802359e:	e8d4 3f8f 	ldab	r3, [r4]
 80235a2:	07da      	lsls	r2, r3, #31
 80235a4:	d40b      	bmi.n	80235be <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x26>
 80235a6:	4620      	mov	r0, r4
 80235a8:	f008 fb71 	bl	802bc8e <__cxa_guard_acquire>
 80235ac:	b138      	cbz	r0, 80235be <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x26>
 80235ae:	4620      	mov	r0, r4
 80235b0:	f008 fb79 	bl	802bca6 <__cxa_guard_release>
 80235b4:	4a0e      	ldr	r2, [pc, #56]	@ (80235f0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 80235b6:	490f      	ldr	r1, [pc, #60]	@ (80235f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80235b8:	480f      	ldr	r0, [pc, #60]	@ (80235f8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 80235ba:	f008 fb61 	bl	802bc80 <__aeabi_atexit>
 80235be:	4c0f      	ldr	r4, [pc, #60]	@ (80235fc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80235c0:	e8d4 3f8f 	ldab	r3, [r4]
 80235c4:	07db      	lsls	r3, r3, #31
 80235c6:	d40b      	bmi.n	80235e0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x48>
 80235c8:	4620      	mov	r0, r4
 80235ca:	f008 fb60 	bl	802bc8e <__cxa_guard_acquire>
 80235ce:	b138      	cbz	r0, 80235e0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x48>
 80235d0:	4620      	mov	r0, r4
 80235d2:	f008 fb68 	bl	802bca6 <__cxa_guard_release>
 80235d6:	4a06      	ldr	r2, [pc, #24]	@ (80235f0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 80235d8:	4909      	ldr	r1, [pc, #36]	@ (8023600 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 80235da:	480a      	ldr	r0, [pc, #40]	@ (8023604 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 80235dc:	f008 fb50 	bl	802bc80 <__aeabi_atexit>
 80235e0:	4b05      	ldr	r3, [pc, #20]	@ (80235f8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 80235e2:	61eb      	str	r3, [r5, #28]
 80235e4:	4b07      	ldr	r3, [pc, #28]	@ (8023604 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 80235e6:	622b      	str	r3, [r5, #32]
 80235e8:	bd38      	pop	{r3, r4, r5, pc}
 80235ea:	bf00      	nop
 80235ec:	2005bb40 	.word	0x2005bb40
 80235f0:	20000000 	.word	0x20000000
 80235f4:	0801f547 	.word	0x0801f547
 80235f8:	20000048 	.word	0x20000048
 80235fc:	2005bb44 	.word	0x2005bb44
 8023600:	0801f545 	.word	0x0801f545
 8023604:	2000004c 	.word	0x2000004c

08023608 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 8023608:	b510      	push	{r4, lr}
 802360a:	4604      	mov	r4, r0
 802360c:	f7ff ff8c 	bl	8023528 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8023610:	4620      	mov	r0, r4
 8023612:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023616:	f7ff bfbf 	b.w	8023598 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0802361c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 802361c:	b538      	push	{r3, r4, r5, lr}
 802361e:	4605      	mov	r5, r0
 8023620:	4c13      	ldr	r4, [pc, #76]	@ (8023670 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x54>)
 8023622:	e8d4 3f8f 	ldab	r3, [r4]
 8023626:	07da      	lsls	r2, r3, #31
 8023628:	d40b      	bmi.n	8023642 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x26>
 802362a:	4620      	mov	r0, r4
 802362c:	f008 fb2f 	bl	802bc8e <__cxa_guard_acquire>
 8023630:	b138      	cbz	r0, 8023642 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x26>
 8023632:	4620      	mov	r0, r4
 8023634:	f008 fb37 	bl	802bca6 <__cxa_guard_release>
 8023638:	4a0e      	ldr	r2, [pc, #56]	@ (8023674 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 802363a:	490f      	ldr	r1, [pc, #60]	@ (8023678 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 802363c:	480f      	ldr	r0, [pc, #60]	@ (802367c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 802363e:	f008 fb1f 	bl	802bc80 <__aeabi_atexit>
 8023642:	4c0f      	ldr	r4, [pc, #60]	@ (8023680 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8023644:	e8d4 3f8f 	ldab	r3, [r4]
 8023648:	07db      	lsls	r3, r3, #31
 802364a:	d40b      	bmi.n	8023664 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x48>
 802364c:	4620      	mov	r0, r4
 802364e:	f008 fb1e 	bl	802bc8e <__cxa_guard_acquire>
 8023652:	b138      	cbz	r0, 8023664 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x48>
 8023654:	4620      	mov	r0, r4
 8023656:	f008 fb26 	bl	802bca6 <__cxa_guard_release>
 802365a:	4a06      	ldr	r2, [pc, #24]	@ (8023674 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 802365c:	4909      	ldr	r1, [pc, #36]	@ (8023684 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 802365e:	480a      	ldr	r0, [pc, #40]	@ (8023688 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8023660:	f008 fb0e 	bl	802bc80 <__aeabi_atexit>
 8023664:	4b05      	ldr	r3, [pc, #20]	@ (802367c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8023666:	636b      	str	r3, [r5, #52]	@ 0x34
 8023668:	4b07      	ldr	r3, [pc, #28]	@ (8023688 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 802366a:	63ab      	str	r3, [r5, #56]	@ 0x38
 802366c:	bd38      	pop	{r3, r4, r5, pc}
 802366e:	bf00      	nop
 8023670:	2005bb78 	.word	0x2005bb78
 8023674:	20000000 	.word	0x20000000
 8023678:	0801f53b 	.word	0x0801f53b
 802367c:	20000080 	.word	0x20000080
 8023680:	2005bb7c 	.word	0x2005bb7c
 8023684:	0801f539 	.word	0x0801f539
 8023688:	20000084 	.word	0x20000084

0802368c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 802368c:	b538      	push	{r3, r4, r5, lr}
 802368e:	4605      	mov	r5, r0
 8023690:	4c13      	ldr	r4, [pc, #76]	@ (80236e0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x54>)
 8023692:	e8d4 3f8f 	ldab	r3, [r4]
 8023696:	07da      	lsls	r2, r3, #31
 8023698:	d40b      	bmi.n	80236b2 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x26>
 802369a:	4620      	mov	r0, r4
 802369c:	f008 faf7 	bl	802bc8e <__cxa_guard_acquire>
 80236a0:	b138      	cbz	r0, 80236b2 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x26>
 80236a2:	4620      	mov	r0, r4
 80236a4:	f008 faff 	bl	802bca6 <__cxa_guard_release>
 80236a8:	4a0e      	ldr	r2, [pc, #56]	@ (80236e4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 80236aa:	490f      	ldr	r1, [pc, #60]	@ (80236e8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80236ac:	480f      	ldr	r0, [pc, #60]	@ (80236ec <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 80236ae:	f008 fae7 	bl	802bc80 <__aeabi_atexit>
 80236b2:	4c0f      	ldr	r4, [pc, #60]	@ (80236f0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80236b4:	e8d4 3f8f 	ldab	r3, [r4]
 80236b8:	07db      	lsls	r3, r3, #31
 80236ba:	d40b      	bmi.n	80236d4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x48>
 80236bc:	4620      	mov	r0, r4
 80236be:	f008 fae6 	bl	802bc8e <__cxa_guard_acquire>
 80236c2:	b138      	cbz	r0, 80236d4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x48>
 80236c4:	4620      	mov	r0, r4
 80236c6:	f008 faee 	bl	802bca6 <__cxa_guard_release>
 80236ca:	4a06      	ldr	r2, [pc, #24]	@ (80236e4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 80236cc:	4909      	ldr	r1, [pc, #36]	@ (80236f4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 80236ce:	480a      	ldr	r0, [pc, #40]	@ (80236f8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 80236d0:	f008 fad6 	bl	802bc80 <__aeabi_atexit>
 80236d4:	4b05      	ldr	r3, [pc, #20]	@ (80236ec <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 80236d6:	62eb      	str	r3, [r5, #44]	@ 0x2c
 80236d8:	4b07      	ldr	r3, [pc, #28]	@ (80236f8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 80236da:	632b      	str	r3, [r5, #48]	@ 0x30
 80236dc:	bd38      	pop	{r3, r4, r5, pc}
 80236de:	bf00      	nop
 80236e0:	2005bb48 	.word	0x2005bb48
 80236e4:	20000000 	.word	0x20000000
 80236e8:	0801f53f 	.word	0x0801f53f
 80236ec:	20000050 	.word	0x20000050
 80236f0:	2005bb4c 	.word	0x2005bb4c
 80236f4:	0801f53d 	.word	0x0801f53d
 80236f8:	20000054 	.word	0x20000054

080236fc <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 80236fc:	b510      	push	{r4, lr}
 80236fe:	4604      	mov	r4, r0
 8023700:	f7ff ff8c 	bl	802361c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8023704:	4620      	mov	r0, r4
 8023706:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802370a:	f7ff bfbf 	b.w	802368c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08023710 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 8023710:	b538      	push	{r3, r4, r5, lr}
 8023712:	4605      	mov	r5, r0
 8023714:	4c13      	ldr	r4, [pc, #76]	@ (8023764 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x54>)
 8023716:	e8d4 3f8f 	ldab	r3, [r4]
 802371a:	07da      	lsls	r2, r3, #31
 802371c:	d40b      	bmi.n	8023736 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x26>
 802371e:	4620      	mov	r0, r4
 8023720:	f008 fab5 	bl	802bc8e <__cxa_guard_acquire>
 8023724:	b138      	cbz	r0, 8023736 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x26>
 8023726:	4620      	mov	r0, r4
 8023728:	f008 fabd 	bl	802bca6 <__cxa_guard_release>
 802372c:	4a0e      	ldr	r2, [pc, #56]	@ (8023768 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 802372e:	490f      	ldr	r1, [pc, #60]	@ (802376c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8023730:	480f      	ldr	r0, [pc, #60]	@ (8023770 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 8023732:	f008 faa5 	bl	802bc80 <__aeabi_atexit>
 8023736:	4c0f      	ldr	r4, [pc, #60]	@ (8023774 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8023738:	e8d4 3f8f 	ldab	r3, [r4]
 802373c:	07db      	lsls	r3, r3, #31
 802373e:	d40b      	bmi.n	8023758 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x48>
 8023740:	4620      	mov	r0, r4
 8023742:	f008 faa4 	bl	802bc8e <__cxa_guard_acquire>
 8023746:	b138      	cbz	r0, 8023758 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x48>
 8023748:	4620      	mov	r0, r4
 802374a:	f008 faac 	bl	802bca6 <__cxa_guard_release>
 802374e:	4a06      	ldr	r2, [pc, #24]	@ (8023768 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 8023750:	4909      	ldr	r1, [pc, #36]	@ (8023778 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 8023752:	480a      	ldr	r0, [pc, #40]	@ (802377c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 8023754:	f008 fa94 	bl	802bc80 <__aeabi_atexit>
 8023758:	4b05      	ldr	r3, [pc, #20]	@ (8023770 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 802375a:	656b      	str	r3, [r5, #84]	@ 0x54
 802375c:	4b07      	ldr	r3, [pc, #28]	@ (802377c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 802375e:	65ab      	str	r3, [r5, #88]	@ 0x58
 8023760:	bd38      	pop	{r3, r4, r5, pc}
 8023762:	bf00      	nop
 8023764:	2005bb80 	.word	0x2005bb80
 8023768:	20000000 	.word	0x20000000
 802376c:	0801f52b 	.word	0x0801f52b
 8023770:	20000088 	.word	0x20000088
 8023774:	2005bb84 	.word	0x2005bb84
 8023778:	0801f529 	.word	0x0801f529
 802377c:	2000008c 	.word	0x2000008c

08023780 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 8023780:	b538      	push	{r3, r4, r5, lr}
 8023782:	4605      	mov	r5, r0
 8023784:	4c13      	ldr	r4, [pc, #76]	@ (80237d4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x54>)
 8023786:	e8d4 3f8f 	ldab	r3, [r4]
 802378a:	07da      	lsls	r2, r3, #31
 802378c:	d40b      	bmi.n	80237a6 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x26>
 802378e:	4620      	mov	r0, r4
 8023790:	f008 fa7d 	bl	802bc8e <__cxa_guard_acquire>
 8023794:	b138      	cbz	r0, 80237a6 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x26>
 8023796:	4620      	mov	r0, r4
 8023798:	f008 fa85 	bl	802bca6 <__cxa_guard_release>
 802379c:	4a0e      	ldr	r2, [pc, #56]	@ (80237d8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 802379e:	490f      	ldr	r1, [pc, #60]	@ (80237dc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 80237a0:	480f      	ldr	r0, [pc, #60]	@ (80237e0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 80237a2:	f008 fa6d 	bl	802bc80 <__aeabi_atexit>
 80237a6:	4c0f      	ldr	r4, [pc, #60]	@ (80237e4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 80237a8:	e8d4 3f8f 	ldab	r3, [r4]
 80237ac:	07db      	lsls	r3, r3, #31
 80237ae:	d40b      	bmi.n	80237c8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x48>
 80237b0:	4620      	mov	r0, r4
 80237b2:	f008 fa6c 	bl	802bc8e <__cxa_guard_acquire>
 80237b6:	b138      	cbz	r0, 80237c8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x48>
 80237b8:	4620      	mov	r0, r4
 80237ba:	f008 fa74 	bl	802bca6 <__cxa_guard_release>
 80237be:	4a06      	ldr	r2, [pc, #24]	@ (80237d8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 80237c0:	4909      	ldr	r1, [pc, #36]	@ (80237e8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 80237c2:	480a      	ldr	r0, [pc, #40]	@ (80237ec <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 80237c4:	f008 fa5c 	bl	802bc80 <__aeabi_atexit>
 80237c8:	4b05      	ldr	r3, [pc, #20]	@ (80237e0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 80237ca:	64eb      	str	r3, [r5, #76]	@ 0x4c
 80237cc:	4b07      	ldr	r3, [pc, #28]	@ (80237ec <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 80237ce:	652b      	str	r3, [r5, #80]	@ 0x50
 80237d0:	bd38      	pop	{r3, r4, r5, pc}
 80237d2:	bf00      	nop
 80237d4:	2005bb88 	.word	0x2005bb88
 80237d8:	20000000 	.word	0x20000000
 80237dc:	0801f52f 	.word	0x0801f52f
 80237e0:	20000090 	.word	0x20000090
 80237e4:	2005bb8c 	.word	0x2005bb8c
 80237e8:	0801f52d 	.word	0x0801f52d
 80237ec:	20000094 	.word	0x20000094

080237f0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 80237f0:	b538      	push	{r3, r4, r5, lr}
 80237f2:	4605      	mov	r5, r0
 80237f4:	4c13      	ldr	r4, [pc, #76]	@ (8023844 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x54>)
 80237f6:	e8d4 3f8f 	ldab	r3, [r4]
 80237fa:	07da      	lsls	r2, r3, #31
 80237fc:	d40b      	bmi.n	8023816 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x26>
 80237fe:	4620      	mov	r0, r4
 8023800:	f008 fa45 	bl	802bc8e <__cxa_guard_acquire>
 8023804:	b138      	cbz	r0, 8023816 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x26>
 8023806:	4620      	mov	r0, r4
 8023808:	f008 fa4d 	bl	802bca6 <__cxa_guard_release>
 802380c:	4a0e      	ldr	r2, [pc, #56]	@ (8023848 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 802380e:	490f      	ldr	r1, [pc, #60]	@ (802384c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8023810:	480f      	ldr	r0, [pc, #60]	@ (8023850 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 8023812:	f008 fa35 	bl	802bc80 <__aeabi_atexit>
 8023816:	4c0f      	ldr	r4, [pc, #60]	@ (8023854 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8023818:	e8d4 3f8f 	ldab	r3, [r4]
 802381c:	07db      	lsls	r3, r3, #31
 802381e:	d40b      	bmi.n	8023838 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x48>
 8023820:	4620      	mov	r0, r4
 8023822:	f008 fa34 	bl	802bc8e <__cxa_guard_acquire>
 8023826:	b138      	cbz	r0, 8023838 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x48>
 8023828:	4620      	mov	r0, r4
 802382a:	f008 fa3c 	bl	802bca6 <__cxa_guard_release>
 802382e:	4a06      	ldr	r2, [pc, #24]	@ (8023848 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 8023830:	4909      	ldr	r1, [pc, #36]	@ (8023858 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 8023832:	480a      	ldr	r0, [pc, #40]	@ (802385c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 8023834:	f008 fa24 	bl	802bc80 <__aeabi_atexit>
 8023838:	4b05      	ldr	r3, [pc, #20]	@ (8023850 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 802383a:	646b      	str	r3, [r5, #68]	@ 0x44
 802383c:	4b07      	ldr	r3, [pc, #28]	@ (802385c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 802383e:	64ab      	str	r3, [r5, #72]	@ 0x48
 8023840:	bd38      	pop	{r3, r4, r5, pc}
 8023842:	bf00      	nop
 8023844:	2005bb50 	.word	0x2005bb50
 8023848:	20000000 	.word	0x20000000
 802384c:	0801f533 	.word	0x0801f533
 8023850:	20000058 	.word	0x20000058
 8023854:	2005bb54 	.word	0x2005bb54
 8023858:	0801f531 	.word	0x0801f531
 802385c:	2000005c 	.word	0x2000005c

08023860 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 8023860:	b538      	push	{r3, r4, r5, lr}
 8023862:	4605      	mov	r5, r0
 8023864:	4c13      	ldr	r4, [pc, #76]	@ (80238b4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x54>)
 8023866:	e8d4 3f8f 	ldab	r3, [r4]
 802386a:	07da      	lsls	r2, r3, #31
 802386c:	d40b      	bmi.n	8023886 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x26>
 802386e:	4620      	mov	r0, r4
 8023870:	f008 fa0d 	bl	802bc8e <__cxa_guard_acquire>
 8023874:	b138      	cbz	r0, 8023886 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x26>
 8023876:	4620      	mov	r0, r4
 8023878:	f008 fa15 	bl	802bca6 <__cxa_guard_release>
 802387c:	4a0e      	ldr	r2, [pc, #56]	@ (80238b8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 802387e:	490f      	ldr	r1, [pc, #60]	@ (80238bc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8023880:	480f      	ldr	r0, [pc, #60]	@ (80238c0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 8023882:	f008 f9fd 	bl	802bc80 <__aeabi_atexit>
 8023886:	4c0f      	ldr	r4, [pc, #60]	@ (80238c4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8023888:	e8d4 3f8f 	ldab	r3, [r4]
 802388c:	07db      	lsls	r3, r3, #31
 802388e:	d40b      	bmi.n	80238a8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x48>
 8023890:	4620      	mov	r0, r4
 8023892:	f008 f9fc 	bl	802bc8e <__cxa_guard_acquire>
 8023896:	b138      	cbz	r0, 80238a8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x48>
 8023898:	4620      	mov	r0, r4
 802389a:	f008 fa04 	bl	802bca6 <__cxa_guard_release>
 802389e:	4a06      	ldr	r2, [pc, #24]	@ (80238b8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 80238a0:	4909      	ldr	r1, [pc, #36]	@ (80238c8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 80238a2:	480a      	ldr	r0, [pc, #40]	@ (80238cc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 80238a4:	f008 f9ec 	bl	802bc80 <__aeabi_atexit>
 80238a8:	4b05      	ldr	r3, [pc, #20]	@ (80238c0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 80238aa:	63eb      	str	r3, [r5, #60]	@ 0x3c
 80238ac:	4b07      	ldr	r3, [pc, #28]	@ (80238cc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 80238ae:	642b      	str	r3, [r5, #64]	@ 0x40
 80238b0:	bd38      	pop	{r3, r4, r5, pc}
 80238b2:	bf00      	nop
 80238b4:	2005bb70 	.word	0x2005bb70
 80238b8:	20000000 	.word	0x20000000
 80238bc:	0801f537 	.word	0x0801f537
 80238c0:	20000078 	.word	0x20000078
 80238c4:	2005bb74 	.word	0x2005bb74
 80238c8:	0801f535 	.word	0x0801f535
 80238cc:	2000007c 	.word	0x2000007c

080238d0 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 80238d0:	b510      	push	{r4, lr}
 80238d2:	4604      	mov	r4, r0
 80238d4:	f7ff ff1c 	bl	8023710 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 80238d8:	4620      	mov	r0, r4
 80238da:	f7ff ff89 	bl	80237f0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 80238de:	4620      	mov	r0, r4
 80238e0:	f7ff ff4e 	bl	8023780 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 80238e4:	4620      	mov	r0, r4
 80238e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80238ea:	f7ff bfb9 	b.w	8023860 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

080238f0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 80238f0:	b538      	push	{r3, r4, r5, lr}
 80238f2:	4605      	mov	r5, r0
 80238f4:	4c13      	ldr	r4, [pc, #76]	@ (8023944 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x54>)
 80238f6:	e8d4 3f8f 	ldab	r3, [r4]
 80238fa:	07da      	lsls	r2, r3, #31
 80238fc:	d40b      	bmi.n	8023916 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x26>
 80238fe:	4620      	mov	r0, r4
 8023900:	f008 f9c5 	bl	802bc8e <__cxa_guard_acquire>
 8023904:	b138      	cbz	r0, 8023916 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x26>
 8023906:	4620      	mov	r0, r4
 8023908:	f008 f9cd 	bl	802bca6 <__cxa_guard_release>
 802390c:	4a0e      	ldr	r2, [pc, #56]	@ (8023948 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 802390e:	490f      	ldr	r1, [pc, #60]	@ (802394c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8023910:	480f      	ldr	r0, [pc, #60]	@ (8023950 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8023912:	f008 f9b5 	bl	802bc80 <__aeabi_atexit>
 8023916:	4c0f      	ldr	r4, [pc, #60]	@ (8023954 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8023918:	e8d4 3f8f 	ldab	r3, [r4]
 802391c:	07db      	lsls	r3, r3, #31
 802391e:	d40b      	bmi.n	8023938 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x48>
 8023920:	4620      	mov	r0, r4
 8023922:	f008 f9b4 	bl	802bc8e <__cxa_guard_acquire>
 8023926:	b138      	cbz	r0, 8023938 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x48>
 8023928:	4620      	mov	r0, r4
 802392a:	f008 f9bc 	bl	802bca6 <__cxa_guard_release>
 802392e:	4a06      	ldr	r2, [pc, #24]	@ (8023948 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8023930:	4909      	ldr	r1, [pc, #36]	@ (8023958 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8023932:	480a      	ldr	r0, [pc, #40]	@ (802395c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8023934:	f008 f9a4 	bl	802bc80 <__aeabi_atexit>
 8023938:	4b05      	ldr	r3, [pc, #20]	@ (8023950 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 802393a:	666b      	str	r3, [r5, #100]	@ 0x64
 802393c:	4b07      	ldr	r3, [pc, #28]	@ (802395c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 802393e:	66ab      	str	r3, [r5, #104]	@ 0x68
 8023940:	bd38      	pop	{r3, r4, r5, pc}
 8023942:	bf00      	nop
 8023944:	2005bb58 	.word	0x2005bb58
 8023948:	20000000 	.word	0x20000000
 802394c:	0801f523 	.word	0x0801f523
 8023950:	20000060 	.word	0x20000060
 8023954:	2005bb5c 	.word	0x2005bb5c
 8023958:	0801f521 	.word	0x0801f521
 802395c:	20000064 	.word	0x20000064

08023960 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8023960:	b538      	push	{r3, r4, r5, lr}
 8023962:	4605      	mov	r5, r0
 8023964:	4c13      	ldr	r4, [pc, #76]	@ (80239b4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x54>)
 8023966:	e8d4 3f8f 	ldab	r3, [r4]
 802396a:	07da      	lsls	r2, r3, #31
 802396c:	d40b      	bmi.n	8023986 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x26>
 802396e:	4620      	mov	r0, r4
 8023970:	f008 f98d 	bl	802bc8e <__cxa_guard_acquire>
 8023974:	b138      	cbz	r0, 8023986 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x26>
 8023976:	4620      	mov	r0, r4
 8023978:	f008 f995 	bl	802bca6 <__cxa_guard_release>
 802397c:	4a0e      	ldr	r2, [pc, #56]	@ (80239b8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 802397e:	490f      	ldr	r1, [pc, #60]	@ (80239bc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8023980:	480f      	ldr	r0, [pc, #60]	@ (80239c0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8023982:	f008 f97d 	bl	802bc80 <__aeabi_atexit>
 8023986:	4c0f      	ldr	r4, [pc, #60]	@ (80239c4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8023988:	e8d4 3f8f 	ldab	r3, [r4]
 802398c:	07db      	lsls	r3, r3, #31
 802398e:	d40b      	bmi.n	80239a8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x48>
 8023990:	4620      	mov	r0, r4
 8023992:	f008 f97c 	bl	802bc8e <__cxa_guard_acquire>
 8023996:	b138      	cbz	r0, 80239a8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x48>
 8023998:	4620      	mov	r0, r4
 802399a:	f008 f984 	bl	802bca6 <__cxa_guard_release>
 802399e:	4a06      	ldr	r2, [pc, #24]	@ (80239b8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 80239a0:	4909      	ldr	r1, [pc, #36]	@ (80239c8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 80239a2:	480a      	ldr	r0, [pc, #40]	@ (80239cc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 80239a4:	f008 f96c 	bl	802bc80 <__aeabi_atexit>
 80239a8:	4b05      	ldr	r3, [pc, #20]	@ (80239c0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 80239aa:	65eb      	str	r3, [r5, #92]	@ 0x5c
 80239ac:	4b07      	ldr	r3, [pc, #28]	@ (80239cc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 80239ae:	662b      	str	r3, [r5, #96]	@ 0x60
 80239b0:	bd38      	pop	{r3, r4, r5, pc}
 80239b2:	bf00      	nop
 80239b4:	2005bb30 	.word	0x2005bb30
 80239b8:	20000000 	.word	0x20000000
 80239bc:	0801f527 	.word	0x0801f527
 80239c0:	20000038 	.word	0x20000038
 80239c4:	2005bb34 	.word	0x2005bb34
 80239c8:	0801f525 	.word	0x0801f525
 80239cc:	2000003c 	.word	0x2000003c

080239d0 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 80239d0:	b510      	push	{r4, lr}
 80239d2:	4604      	mov	r4, r0
 80239d4:	f7ff ff8c 	bl	80238f0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 80239d8:	4620      	mov	r0, r4
 80239da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80239de:	f7ff bfbf 	b.w	8023960 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

080239e4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 80239e4:	b538      	push	{r3, r4, r5, lr}
 80239e6:	4605      	mov	r5, r0
 80239e8:	4c13      	ldr	r4, [pc, #76]	@ (8023a38 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x54>)
 80239ea:	e8d4 3f8f 	ldab	r3, [r4]
 80239ee:	07da      	lsls	r2, r3, #31
 80239f0:	d40b      	bmi.n	8023a0a <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x26>
 80239f2:	4620      	mov	r0, r4
 80239f4:	f008 f94b 	bl	802bc8e <__cxa_guard_acquire>
 80239f8:	b138      	cbz	r0, 8023a0a <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x26>
 80239fa:	4620      	mov	r0, r4
 80239fc:	f008 f953 	bl	802bca6 <__cxa_guard_release>
 8023a00:	4a0e      	ldr	r2, [pc, #56]	@ (8023a3c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8023a02:	490f      	ldr	r1, [pc, #60]	@ (8023a40 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8023a04:	480f      	ldr	r0, [pc, #60]	@ (8023a44 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8023a06:	f008 f93b 	bl	802bc80 <__aeabi_atexit>
 8023a0a:	4c0f      	ldr	r4, [pc, #60]	@ (8023a48 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8023a0c:	e8d4 3f8f 	ldab	r3, [r4]
 8023a10:	07db      	lsls	r3, r3, #31
 8023a12:	d40b      	bmi.n	8023a2c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x48>
 8023a14:	4620      	mov	r0, r4
 8023a16:	f008 f93a 	bl	802bc8e <__cxa_guard_acquire>
 8023a1a:	b138      	cbz	r0, 8023a2c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x48>
 8023a1c:	4620      	mov	r0, r4
 8023a1e:	f008 f942 	bl	802bca6 <__cxa_guard_release>
 8023a22:	4a06      	ldr	r2, [pc, #24]	@ (8023a3c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8023a24:	4909      	ldr	r1, [pc, #36]	@ (8023a4c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8023a26:	480a      	ldr	r0, [pc, #40]	@ (8023a50 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8023a28:	f008 f92a 	bl	802bc80 <__aeabi_atexit>
 8023a2c:	4b05      	ldr	r3, [pc, #20]	@ (8023a44 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8023a2e:	676b      	str	r3, [r5, #116]	@ 0x74
 8023a30:	4b07      	ldr	r3, [pc, #28]	@ (8023a50 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8023a32:	67ab      	str	r3, [r5, #120]	@ 0x78
 8023a34:	bd38      	pop	{r3, r4, r5, pc}
 8023a36:	bf00      	nop
 8023a38:	2005bb28 	.word	0x2005bb28
 8023a3c:	20000000 	.word	0x20000000
 8023a40:	0801f51b 	.word	0x0801f51b
 8023a44:	20000030 	.word	0x20000030
 8023a48:	2005bb2c 	.word	0x2005bb2c
 8023a4c:	0801f519 	.word	0x0801f519
 8023a50:	20000034 	.word	0x20000034

08023a54 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 8023a54:	b538      	push	{r3, r4, r5, lr}
 8023a56:	4605      	mov	r5, r0
 8023a58:	4c13      	ldr	r4, [pc, #76]	@ (8023aa8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x54>)
 8023a5a:	e8d4 3f8f 	ldab	r3, [r4]
 8023a5e:	07da      	lsls	r2, r3, #31
 8023a60:	d40b      	bmi.n	8023a7a <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x26>
 8023a62:	4620      	mov	r0, r4
 8023a64:	f008 f913 	bl	802bc8e <__cxa_guard_acquire>
 8023a68:	b138      	cbz	r0, 8023a7a <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x26>
 8023a6a:	4620      	mov	r0, r4
 8023a6c:	f008 f91b 	bl	802bca6 <__cxa_guard_release>
 8023a70:	4a0e      	ldr	r2, [pc, #56]	@ (8023aac <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8023a72:	490f      	ldr	r1, [pc, #60]	@ (8023ab0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8023a74:	480f      	ldr	r0, [pc, #60]	@ (8023ab4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8023a76:	f008 f903 	bl	802bc80 <__aeabi_atexit>
 8023a7a:	4c0f      	ldr	r4, [pc, #60]	@ (8023ab8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8023a7c:	e8d4 3f8f 	ldab	r3, [r4]
 8023a80:	07db      	lsls	r3, r3, #31
 8023a82:	d40b      	bmi.n	8023a9c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x48>
 8023a84:	4620      	mov	r0, r4
 8023a86:	f008 f902 	bl	802bc8e <__cxa_guard_acquire>
 8023a8a:	b138      	cbz	r0, 8023a9c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x48>
 8023a8c:	4620      	mov	r0, r4
 8023a8e:	f008 f90a 	bl	802bca6 <__cxa_guard_release>
 8023a92:	4a06      	ldr	r2, [pc, #24]	@ (8023aac <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8023a94:	4909      	ldr	r1, [pc, #36]	@ (8023abc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8023a96:	480a      	ldr	r0, [pc, #40]	@ (8023ac0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8023a98:	f008 f8f2 	bl	802bc80 <__aeabi_atexit>
 8023a9c:	4b05      	ldr	r3, [pc, #20]	@ (8023ab4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8023a9e:	66eb      	str	r3, [r5, #108]	@ 0x6c
 8023aa0:	4b07      	ldr	r3, [pc, #28]	@ (8023ac0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8023aa2:	672b      	str	r3, [r5, #112]	@ 0x70
 8023aa4:	bd38      	pop	{r3, r4, r5, pc}
 8023aa6:	bf00      	nop
 8023aa8:	2005bb20 	.word	0x2005bb20
 8023aac:	20000000 	.word	0x20000000
 8023ab0:	0801f51f 	.word	0x0801f51f
 8023ab4:	20000028 	.word	0x20000028
 8023ab8:	2005bb24 	.word	0x2005bb24
 8023abc:	0801f51d 	.word	0x0801f51d
 8023ac0:	2000002c 	.word	0x2000002c

08023ac4 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 8023ac4:	b510      	push	{r4, lr}
 8023ac6:	4604      	mov	r4, r0
 8023ac8:	f7ff ff8c 	bl	80239e4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8023acc:	4620      	mov	r0, r4
 8023ace:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023ad2:	f7ff bfbf 	b.w	8023a54 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

08023ad6 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 8023ad6:	b510      	push	{r4, lr}
 8023ad8:	4604      	mov	r4, r0
 8023ada:	f7ff fff3 	bl	8023ac4 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 8023ade:	4620      	mov	r0, r4
 8023ae0:	f7ff ff76 	bl	80239d0 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 8023ae4:	4620      	mov	r0, r4
 8023ae6:	f7ff fe09 	bl	80236fc <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 8023aea:	4620      	mov	r0, r4
 8023aec:	f7ff fd12 	bl	8023514 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 8023af0:	4620      	mov	r0, r4
 8023af2:	f7ff fd89 	bl	8023608 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 8023af6:	4620      	mov	r0, r4
 8023af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023afc:	f7ff bee8 	b.w	80238d0 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

08023b00 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>:
 8023b00:	b538      	push	{r3, r4, r5, lr}
 8023b02:	4605      	mov	r5, r0
 8023b04:	4c09      	ldr	r4, [pc, #36]	@ (8023b2c <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x2c>)
 8023b06:	e8d4 3f8f 	ldab	r3, [r4]
 8023b0a:	07db      	lsls	r3, r3, #31
 8023b0c:	d40b      	bmi.n	8023b26 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x26>
 8023b0e:	4620      	mov	r0, r4
 8023b10:	f008 f8bd 	bl	802bc8e <__cxa_guard_acquire>
 8023b14:	b138      	cbz	r0, 8023b26 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x26>
 8023b16:	4620      	mov	r0, r4
 8023b18:	f008 f8c5 	bl	802bca6 <__cxa_guard_release>
 8023b1c:	4a04      	ldr	r2, [pc, #16]	@ (8023b30 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x30>)
 8023b1e:	4905      	ldr	r1, [pc, #20]	@ (8023b34 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x34>)
 8023b20:	4805      	ldr	r0, [pc, #20]	@ (8023b38 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x38>)
 8023b22:	f008 f8ad 	bl	802bc80 <__aeabi_atexit>
 8023b26:	4b04      	ldr	r3, [pc, #16]	@ (8023b38 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x38>)
 8023b28:	67eb      	str	r3, [r5, #124]	@ 0x7c
 8023b2a:	bd38      	pop	{r3, r4, r5, pc}
 8023b2c:	2005bb14 	.word	0x2005bb14
 8023b30:	20000000 	.word	0x20000000
 8023b34:	0801f517 	.word	0x0801f517
 8023b38:	20000020 	.word	0x20000020

08023b3c <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>:
 8023b3c:	b538      	push	{r3, r4, r5, lr}
 8023b3e:	4605      	mov	r5, r0
 8023b40:	4c0a      	ldr	r4, [pc, #40]	@ (8023b6c <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x30>)
 8023b42:	e8d4 3f8f 	ldab	r3, [r4]
 8023b46:	07db      	lsls	r3, r3, #31
 8023b48:	d40b      	bmi.n	8023b62 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x26>
 8023b4a:	4620      	mov	r0, r4
 8023b4c:	f008 f89f 	bl	802bc8e <__cxa_guard_acquire>
 8023b50:	b138      	cbz	r0, 8023b62 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x26>
 8023b52:	4620      	mov	r0, r4
 8023b54:	f008 f8a7 	bl	802bca6 <__cxa_guard_release>
 8023b58:	4a05      	ldr	r2, [pc, #20]	@ (8023b70 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x34>)
 8023b5a:	4906      	ldr	r1, [pc, #24]	@ (8023b74 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x38>)
 8023b5c:	4806      	ldr	r0, [pc, #24]	@ (8023b78 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x3c>)
 8023b5e:	f008 f88f 	bl	802bc80 <__aeabi_atexit>
 8023b62:	4b05      	ldr	r3, [pc, #20]	@ (8023b78 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x3c>)
 8023b64:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
 8023b68:	bd38      	pop	{r3, r4, r5, pc}
 8023b6a:	bf00      	nop
 8023b6c:	2005bb18 	.word	0x2005bb18
 8023b70:	20000000 	.word	0x20000000
 8023b74:	0801f515 	.word	0x0801f515
 8023b78:	20000024 	.word	0x20000024

08023b7c <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>:
 8023b7c:	b570      	push	{r4, r5, r6, lr}
 8023b7e:	4606      	mov	r6, r0
 8023b80:	4d0b      	ldr	r5, [pc, #44]	@ (8023bb0 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x34>)
 8023b82:	e8d5 3f8f 	ldab	r3, [r5]
 8023b86:	f013 0f01 	tst.w	r3, #1
 8023b8a:	4c0a      	ldr	r4, [pc, #40]	@ (8023bb4 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x38>)
 8023b8c:	d10d      	bne.n	8023baa <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x2e>
 8023b8e:	4628      	mov	r0, r5
 8023b90:	f008 f87d 	bl	802bc8e <__cxa_guard_acquire>
 8023b94:	b148      	cbz	r0, 8023baa <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x2e>
 8023b96:	4b08      	ldr	r3, [pc, #32]	@ (8023bb8 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 8023b98:	4628      	mov	r0, r5
 8023b9a:	6023      	str	r3, [r4, #0]
 8023b9c:	f008 f883 	bl	802bca6 <__cxa_guard_release>
 8023ba0:	4a06      	ldr	r2, [pc, #24]	@ (8023bbc <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x40>)
 8023ba2:	4907      	ldr	r1, [pc, #28]	@ (8023bc0 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x44>)
 8023ba4:	4620      	mov	r0, r4
 8023ba6:	f008 f86b 	bl	802bc80 <__aeabi_atexit>
 8023baa:	f8c6 4084 	str.w	r4, [r6, #132]	@ 0x84
 8023bae:	bd70      	pop	{r4, r5, r6, pc}
 8023bb0:	2005bb1c 	.word	0x2005bb1c
 8023bb4:	2005bc94 	.word	0x2005bc94
 8023bb8:	0802fc5c 	.word	0x0802fc5c
 8023bbc:	20000000 	.word	0x20000000
 8023bc0:	0801f513 	.word	0x0801f513

08023bc4 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>:
 8023bc4:	b510      	push	{r4, lr}
 8023bc6:	4604      	mov	r4, r0
 8023bc8:	f7ff ff9a 	bl	8023b00 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>
 8023bcc:	4620      	mov	r0, r4
 8023bce:	f7ff ffb5 	bl	8023b3c <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>
 8023bd2:	4620      	mov	r0, r4
 8023bd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023bd8:	f7ff bfd0 	b.w	8023b7c <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>

08023bdc <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv>:
 8023bdc:	b570      	push	{r4, r5, r6, lr}
 8023bde:	4606      	mov	r6, r0
 8023be0:	4d0b      	ldr	r5, [pc, #44]	@ (8023c10 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x34>)
 8023be2:	e8d5 3f8f 	ldab	r3, [r5]
 8023be6:	f013 0f01 	tst.w	r3, #1
 8023bea:	4c0a      	ldr	r4, [pc, #40]	@ (8023c14 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x38>)
 8023bec:	d10d      	bne.n	8023c0a <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x2e>
 8023bee:	4628      	mov	r0, r5
 8023bf0:	f008 f84d 	bl	802bc8e <__cxa_guard_acquire>
 8023bf4:	b148      	cbz	r0, 8023c0a <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x2e>
 8023bf6:	4b08      	ldr	r3, [pc, #32]	@ (8023c18 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x3c>)
 8023bf8:	4628      	mov	r0, r5
 8023bfa:	6023      	str	r3, [r4, #0]
 8023bfc:	f008 f853 	bl	802bca6 <__cxa_guard_release>
 8023c00:	4a06      	ldr	r2, [pc, #24]	@ (8023c1c <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x40>)
 8023c02:	4907      	ldr	r1, [pc, #28]	@ (8023c20 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x44>)
 8023c04:	4620      	mov	r0, r4
 8023c06:	f008 f83b 	bl	802bc80 <__aeabi_atexit>
 8023c0a:	f8c6 4088 	str.w	r4, [r6, #136]	@ 0x88
 8023c0e:	bd70      	pop	{r4, r5, r6, pc}
 8023c10:	2005bb10 	.word	0x2005bb10
 8023c14:	2005bb90 	.word	0x2005bb90
 8023c18:	0802fc78 	.word	0x0802fc78
 8023c1c:	20000000 	.word	0x20000000
 8023c20:	0801f511 	.word	0x0801f511

08023c24 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 8023c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c28:	f9bd e024 	ldrsh.w	lr, [sp, #36]	@ 0x24
 8023c2c:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	@ 0x2c
 8023c30:	fb05 4c0e 	mla	ip, r5, lr, r4
 8023c34:	2d00      	cmp	r5, #0
 8023c36:	f9bd b028 	ldrsh.w	fp, [sp, #40]	@ 0x28
 8023c3a:	f89d 9034 	ldrb.w	r9, [sp, #52]	@ 0x34
 8023c3e:	f89d 7038 	ldrb.w	r7, [sp, #56]	@ 0x38
 8023c42:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
 8023c46:	eb02 0a0c 	add.w	sl, r2, ip
 8023c4a:	8808      	ldrh	r0, [r1, #0]
 8023c4c:	f2c0 80b0 	blt.w	8023db0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 8023c50:	45ab      	cmp	fp, r5
 8023c52:	f340 80ad 	ble.w	8023db0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 8023c56:	2c00      	cmp	r4, #0
 8023c58:	f2c0 80a8 	blt.w	8023dac <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 8023c5c:	45a6      	cmp	lr, r4
 8023c5e:	f340 80a5 	ble.w	8023dac <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 8023c62:	f812 200c 	ldrb.w	r2, [r2, ip]
 8023c66:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 8023c6a:	1c62      	adds	r2, r4, #1
 8023c6c:	f100 80a3 	bmi.w	8023db6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8023c70:	4596      	cmp	lr, r2
 8023c72:	f340 80a0 	ble.w	8023db6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8023c76:	f1b9 0f00 	cmp.w	r9, #0
 8023c7a:	f000 809c 	beq.w	8023db6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8023c7e:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8023c82:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 8023c86:	3501      	adds	r5, #1
 8023c88:	f100 8099 	bmi.w	8023dbe <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8023c8c:	45ab      	cmp	fp, r5
 8023c8e:	f340 8096 	ble.w	8023dbe <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8023c92:	2f00      	cmp	r7, #0
 8023c94:	f000 8093 	beq.w	8023dbe <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8023c98:	2c00      	cmp	r4, #0
 8023c9a:	f2c0 808e 	blt.w	8023dba <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 8023c9e:	45a6      	cmp	lr, r4
 8023ca0:	f340 808b 	ble.w	8023dba <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 8023ca4:	f81a 200e 	ldrb.w	r2, [sl, lr]
 8023ca8:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 8023cac:	3401      	adds	r4, #1
 8023cae:	f100 8089 	bmi.w	8023dc4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8023cb2:	45a6      	cmp	lr, r4
 8023cb4:	f340 8086 	ble.w	8023dc4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8023cb8:	f1b9 0f00 	cmp.w	r9, #0
 8023cbc:	f000 8082 	beq.w	8023dc4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8023cc0:	44d6      	add	lr, sl
 8023cc2:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8023cc6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8023cca:	fb19 fe07 	smulbb	lr, r9, r7
 8023cce:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8023cd2:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8023cd6:	f428 68fc 	bic.w	r8, r8, #2016	@ 0x7e0
 8023cda:	ea44 0808 	orr.w	r8, r4, r8
 8023cde:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8023ce2:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8023ce6:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8023cea:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8023cee:	ea44 0c0c 	orr.w	ip, r4, ip
 8023cf2:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8023cf6:	fb04 f40c 	mul.w	r4, r4, ip
 8023cfa:	f1c7 0210 	rsb	r2, r7, #16
 8023cfe:	eba2 0209 	sub.w	r2, r2, r9
 8023d02:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8023d06:	fb02 4808 	mla	r8, r2, r8, r4
 8023d0a:	b2b4      	uxth	r4, r6
 8023d0c:	43f6      	mvns	r6, r6
 8023d0e:	041a      	lsls	r2, r3, #16
 8023d10:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8023d14:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8023d18:	4313      	orrs	r3, r2
 8023d1a:	fb0e 8303 	mla	r3, lr, r3, r8
 8023d1e:	042a      	lsls	r2, r5, #16
 8023d20:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8023d24:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8023d28:	432a      	orrs	r2, r5
 8023d2a:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8023d2e:	fb07 3202 	mla	r2, r7, r2, r3
 8023d32:	0d53      	lsrs	r3, r2, #21
 8023d34:	0952      	lsrs	r2, r2, #5
 8023d36:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8023d3a:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8023d3e:	431a      	orrs	r2, r3
 8023d40:	b293      	uxth	r3, r2
 8023d42:	1202      	asrs	r2, r0, #8
 8023d44:	b2f6      	uxtb	r6, r6
 8023d46:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8023d4a:	fb12 f206 	smulbb	r2, r2, r6
 8023d4e:	10c7      	asrs	r7, r0, #3
 8023d50:	00c0      	lsls	r0, r0, #3
 8023d52:	b2c0      	uxtb	r0, r0
 8023d54:	121d      	asrs	r5, r3, #8
 8023d56:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8023d5a:	fb10 f006 	smulbb	r0, r0, r6
 8023d5e:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8023d62:	fb17 f706 	smulbb	r7, r7, r6
 8023d66:	fb05 2504 	mla	r5, r5, r4, r2
 8023d6a:	10da      	asrs	r2, r3, #3
 8023d6c:	00db      	lsls	r3, r3, #3
 8023d6e:	b2db      	uxtb	r3, r3
 8023d70:	fb03 0004 	mla	r0, r3, r4, r0
 8023d74:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8023d78:	fb02 7204 	mla	r2, r2, r4, r7
 8023d7c:	b2ad      	uxth	r5, r5
 8023d7e:	b280      	uxth	r0, r0
 8023d80:	1c6b      	adds	r3, r5, #1
 8023d82:	b292      	uxth	r2, r2
 8023d84:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8023d88:	1c43      	adds	r3, r0, #1
 8023d8a:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8023d8e:	1c50      	adds	r0, r2, #1
 8023d90:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8023d94:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8023d98:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023d9c:	0952      	lsrs	r2, r2, #5
 8023d9e:	432b      	orrs	r3, r5
 8023da0:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8023da4:	4313      	orrs	r3, r2
 8023da6:	800b      	strh	r3, [r1, #0]
 8023da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023dac:	4680      	mov	r8, r0
 8023dae:	e75c      	b.n	8023c6a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 8023db0:	4684      	mov	ip, r0
 8023db2:	4680      	mov	r8, r0
 8023db4:	e767      	b.n	8023c86 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 8023db6:	4684      	mov	ip, r0
 8023db8:	e765      	b.n	8023c86 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 8023dba:	4605      	mov	r5, r0
 8023dbc:	e776      	b.n	8023cac <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 8023dbe:	4603      	mov	r3, r0
 8023dc0:	4605      	mov	r5, r0
 8023dc2:	e782      	b.n	8023cca <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8023dc4:	4603      	mov	r3, r0
 8023dc6:	e780      	b.n	8023cca <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

08023dc8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023dcc:	b099      	sub	sp, #100	@ 0x64
 8023dce:	9215      	str	r2, [sp, #84]	@ 0x54
 8023dd0:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8023dd2:	9016      	str	r0, [sp, #88]	@ 0x58
 8023dd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8023dd6:	6850      	ldr	r0, [r2, #4]
 8023dd8:	f89d 30ac 	ldrb.w	r3, [sp, #172]	@ 0xac
 8023ddc:	910c      	str	r1, [sp, #48]	@ 0x30
 8023dde:	930d      	str	r3, [sp, #52]	@ 0x34
 8023de0:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
 8023de4:	fb00 1303 	mla	r3, r0, r3, r1
 8023de8:	e9dd a523 	ldrd	sl, r5, [sp, #140]	@ 0x8c
 8023dec:	6812      	ldr	r2, [r2, #0]
 8023dee:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 8023df2:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8023df4:	681b      	ldr	r3, [r3, #0]
 8023df6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023df8:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8023dfa:	685e      	ldr	r6, [r3, #4]
 8023dfc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023dfe:	3604      	adds	r6, #4
 8023e00:	43db      	mvns	r3, r3
 8023e02:	b2db      	uxtb	r3, r3
 8023e04:	930a      	str	r3, [sp, #40]	@ 0x28
 8023e06:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023e08:	2b00      	cmp	r3, #0
 8023e0a:	dc03      	bgt.n	8023e14 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8023e0c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8023e0e:	2b00      	cmp	r3, #0
 8023e10:	f340 8225 	ble.w	802425e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8023e14:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8023e16:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023e1a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023e1e:	1e48      	subs	r0, r1, #1
 8023e20:	1e57      	subs	r7, r2, #1
 8023e22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023e24:	2b00      	cmp	r3, #0
 8023e26:	f340 80e3 	ble.w	8023ff0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8023e2a:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 8023e2e:	ea4f 4325 	mov.w	r3, r5, asr #16
 8023e32:	d406      	bmi.n	8023e42 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8023e34:	4584      	cmp	ip, r0
 8023e36:	da04      	bge.n	8023e42 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8023e38:	2b00      	cmp	r3, #0
 8023e3a:	db02      	blt.n	8023e42 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8023e3c:	42bb      	cmp	r3, r7
 8023e3e:	f2c0 80d8 	blt.w	8023ff2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8023e42:	f11c 0c01 	adds.w	ip, ip, #1
 8023e46:	f100 80c9 	bmi.w	8023fdc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8023e4a:	4561      	cmp	r1, ip
 8023e4c:	f2c0 80c6 	blt.w	8023fdc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8023e50:	3301      	adds	r3, #1
 8023e52:	f100 80c3 	bmi.w	8023fdc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8023e56:	429a      	cmp	r2, r3
 8023e58:	f2c0 80c0 	blt.w	8023fdc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8023e5c:	4647      	mov	r7, r8
 8023e5e:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8023e62:	f1bb 0f00 	cmp.w	fp, #0
 8023e66:	f340 80e3 	ble.w	8024030 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8023e6a:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8023e6c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8023e6e:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8023e72:	ea5f 422a 	movs.w	r2, sl, asr #16
 8023e76:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8023e7a:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8023e7e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8023e82:	689b      	ldr	r3, [r3, #8]
 8023e84:	f100 8121 	bmi.w	80240ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8023e88:	f103 39ff 	add.w	r9, r3, #4294967295
 8023e8c:	454a      	cmp	r2, r9
 8023e8e:	f280 811c 	bge.w	80240ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8023e92:	f1bc 0f00 	cmp.w	ip, #0
 8023e96:	f2c0 8118 	blt.w	80240ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8023e9a:	f10e 39ff 	add.w	r9, lr, #4294967295
 8023e9e:	45cc      	cmp	ip, r9
 8023ea0:	f280 8113 	bge.w	80240ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8023ea4:	b21b      	sxth	r3, r3
 8023ea6:	fb0c 2203 	mla	r2, ip, r3, r2
 8023eaa:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023eac:	eb04 0902 	add.w	r9, r4, r2
 8023eb0:	5ca2      	ldrb	r2, [r4, r2]
 8023eb2:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 8023eb6:	2800      	cmp	r0, #0
 8023eb8:	f000 80fe 	beq.w	80240b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8023ebc:	f899 2001 	ldrb.w	r2, [r9, #1]
 8023ec0:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8023ec4:	9211      	str	r2, [sp, #68]	@ 0x44
 8023ec6:	b151      	cbz	r1, 8023ede <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8023ec8:	eb09 0203 	add.w	r2, r9, r3
 8023ecc:	f819 3003 	ldrb.w	r3, [r9, r3]
 8023ed0:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8023ed4:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023ed6:	7853      	ldrb	r3, [r2, #1]
 8023ed8:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8023edc:	9312      	str	r3, [sp, #72]	@ 0x48
 8023ede:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023ee0:	fb10 f201 	smulbb	r2, r0, r1
 8023ee4:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8023ee8:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8023eec:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8023ef0:	ea4c 0c03 	orr.w	ip, ip, r3
 8023ef4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8023ef6:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8023ef8:	041b      	lsls	r3, r3, #16
 8023efa:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 8023efe:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8023f02:	10d2      	asrs	r2, r2, #3
 8023f04:	4323      	orrs	r3, r4
 8023f06:	4353      	muls	r3, r2
 8023f08:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 8023f0c:	fb09 330c 	mla	r3, r9, ip, r3
 8023f10:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8023f14:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8023f18:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8023f1c:	ea4c 0e0e 	orr.w	lr, ip, lr
 8023f20:	f1c1 0c10 	rsb	ip, r1, #16
 8023f24:	ebac 0c00 	sub.w	ip, ip, r0
 8023f28:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8023f2c:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8023f30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023f32:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8023f36:	0418      	lsls	r0, r3, #16
 8023f38:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8023f3c:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8023f40:	4318      	orrs	r0, r3
 8023f42:	fb02 c200 	mla	r2, r2, r0, ip
 8023f46:	8838      	ldrh	r0, [r7, #0]
 8023f48:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8023f4a:	0d53      	lsrs	r3, r2, #21
 8023f4c:	1201      	asrs	r1, r0, #8
 8023f4e:	0952      	lsrs	r2, r2, #5
 8023f50:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8023f54:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8023f58:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8023f5c:	431a      	orrs	r2, r3
 8023f5e:	fb11 f104 	smulbb	r1, r1, r4
 8023f62:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8023f66:	00c0      	lsls	r0, r0, #3
 8023f68:	b292      	uxth	r2, r2
 8023f6a:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8023f6e:	b2c0      	uxtb	r0, r0
 8023f70:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 8023f74:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8023f78:	fb1e fe04 	smulbb	lr, lr, r4
 8023f7c:	fb10 f004 	smulbb	r0, r0, r4
 8023f80:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8023f84:	fb0c 1c03 	mla	ip, ip, r3, r1
 8023f88:	10d1      	asrs	r1, r2, #3
 8023f8a:	00d2      	lsls	r2, r2, #3
 8023f8c:	b2d2      	uxtb	r2, r2
 8023f8e:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8023f92:	fb01 e103 	mla	r1, r1, r3, lr
 8023f96:	fb02 0303 	mla	r3, r2, r3, r0
 8023f9a:	fa1f fc8c 	uxth.w	ip, ip
 8023f9e:	b29a      	uxth	r2, r3
 8023fa0:	f10c 0301 	add.w	r3, ip, #1
 8023fa4:	b289      	uxth	r1, r1
 8023fa6:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8023faa:	1c53      	adds	r3, r2, #1
 8023fac:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023fb0:	1c4a      	adds	r2, r1, #1
 8023fb2:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8023fb6:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8023fba:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023fbe:	0949      	lsrs	r1, r1, #5
 8023fc0:	ea43 030c 	orr.w	r3, r3, ip
 8023fc4:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8023fc8:	430b      	orrs	r3, r1
 8023fca:	803b      	strh	r3, [r7, #0]
 8023fcc:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8023fce:	3702      	adds	r7, #2
 8023fd0:	449a      	add	sl, r3
 8023fd2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8023fd4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023fd8:	441d      	add	r5, r3
 8023fda:	e742      	b.n	8023e62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8023fdc:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8023fde:	f108 0802 	add.w	r8, r8, #2
 8023fe2:	449a      	add	sl, r3
 8023fe4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8023fe6:	441d      	add	r5, r3
 8023fe8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023fea:	3b01      	subs	r3, #1
 8023fec:	9309      	str	r3, [sp, #36]	@ 0x24
 8023fee:	e718      	b.n	8023e22 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8023ff0:	d023      	beq.n	802403a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8023ff2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023ff4:	9825      	ldr	r0, [sp, #148]	@ 0x94
 8023ff6:	3b01      	subs	r3, #1
 8023ff8:	fb00 a003 	mla	r0, r0, r3, sl
 8023ffc:	1400      	asrs	r0, r0, #16
 8023ffe:	f53f af2d 	bmi.w	8023e5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8024002:	3901      	subs	r1, #1
 8024004:	4288      	cmp	r0, r1
 8024006:	f6bf af29 	bge.w	8023e5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802400a:	9926      	ldr	r1, [sp, #152]	@ 0x98
 802400c:	fb01 5303 	mla	r3, r1, r3, r5
 8024010:	141b      	asrs	r3, r3, #16
 8024012:	f53f af23 	bmi.w	8023e5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8024016:	3a01      	subs	r2, #1
 8024018:	4293      	cmp	r3, r2
 802401a:	f6bf af1f 	bge.w	8023e5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802401e:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 8024022:	f8bd 9034 	ldrh.w	r9, [sp, #52]	@ 0x34
 8024026:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
 802402a:	f1be 0f00 	cmp.w	lr, #0
 802402e:	dc6c      	bgt.n	802410a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8024030:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024032:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024036:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 802403a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802403c:	2b00      	cmp	r3, #0
 802403e:	f340 810e 	ble.w	802425e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8024042:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8024046:	ee30 0a04 	vadd.f32	s0, s0, s8
 802404a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802404e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024052:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024056:	eef0 6a62 	vmov.f32	s13, s5
 802405a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802405e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024062:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024066:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802406a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802406e:	ee16 aa90 	vmov	sl, s13
 8024072:	eef0 6a43 	vmov.f32	s13, s6
 8024076:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802407a:	ee12 2a90 	vmov	r2, s5
 802407e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024082:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8024084:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024088:	fb92 f3f3 	sdiv	r3, r2, r3
 802408c:	ee13 2a10 	vmov	r2, s6
 8024090:	9325      	str	r3, [sp, #148]	@ 0x94
 8024092:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8024094:	ee16 5a90 	vmov	r5, s13
 8024098:	fb92 f3f3 	sdiv	r3, r2, r3
 802409c:	9326      	str	r3, [sp, #152]	@ 0x98
 802409e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80240a0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80240a2:	3b01      	subs	r3, #1
 80240a4:	930c      	str	r3, [sp, #48]	@ 0x30
 80240a6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80240a8:	bf08      	it	eq
 80240aa:	4613      	moveq	r3, r2
 80240ac:	eeb0 3a67 	vmov.f32	s6, s15
 80240b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80240b2:	eef0 2a47 	vmov.f32	s5, s14
 80240b6:	e6a6      	b.n	8023e06 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80240b8:	2900      	cmp	r1, #0
 80240ba:	f43f af10 	beq.w	8023ede <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 80240be:	f819 3003 	ldrb.w	r3, [r9, r3]
 80240c2:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80240c6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80240c8:	e709      	b.n	8023ede <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 80240ca:	f112 0901 	adds.w	r9, r2, #1
 80240ce:	f53f af7d 	bmi.w	8023fcc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 80240d2:	454b      	cmp	r3, r9
 80240d4:	f6ff af7a 	blt.w	8023fcc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 80240d8:	f11c 0901 	adds.w	r9, ip, #1
 80240dc:	f53f af76 	bmi.w	8023fcc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 80240e0:	45ce      	cmp	lr, r9
 80240e2:	f6ff af73 	blt.w	8023fcc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 80240e6:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80240e8:	9202      	str	r2, [sp, #8]
 80240ea:	b21b      	sxth	r3, r3
 80240ec:	fa0f f28e 	sxth.w	r2, lr
 80240f0:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80240f4:	e9cd c003 	strd	ip, r0, [sp, #12]
 80240f8:	9201      	str	r2, [sp, #4]
 80240fa:	9300      	str	r3, [sp, #0]
 80240fc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80240fe:	4633      	mov	r3, r6
 8024100:	4639      	mov	r1, r7
 8024102:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8024104:	f7ff fd8e 	bl	8023c24 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 8024108:	e760      	b.n	8023fcc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802410a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802410c:	ea4f 422a 	mov.w	r2, sl, asr #16
 8024110:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8024114:	1429      	asrs	r1, r5, #16
 8024116:	fb03 2101 	mla	r1, r3, r1, r2
 802411a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802411c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802411e:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 8024122:	440a      	add	r2, r1
 8024124:	5c61      	ldrb	r1, [r4, r1]
 8024126:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802412a:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 802412e:	f1bc 0f00 	cmp.w	ip, #0
 8024132:	f000 808c 	beq.w	802424e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 8024136:	7857      	ldrb	r7, [r2, #1]
 8024138:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 802413c:	9413      	str	r4, [sp, #76]	@ 0x4c
 802413e:	b140      	cbz	r0, 8024152 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8024140:	18d7      	adds	r7, r2, r3
 8024142:	5cd3      	ldrb	r3, [r2, r3]
 8024144:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024148:	9310      	str	r3, [sp, #64]	@ 0x40
 802414a:	787b      	ldrb	r3, [r7, #1]
 802414c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024150:	9314      	str	r3, [sp, #80]	@ 0x50
 8024152:	fb1c f200 	smulbb	r2, ip, r0
 8024156:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024158:	10d2      	asrs	r2, r2, #3
 802415a:	041f      	lsls	r7, r3, #16
 802415c:	f007 67fc 	and.w	r7, r7, #132120576	@ 0x7e00000
 8024160:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8024164:	431f      	orrs	r7, r3
 8024166:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 802416a:	9317      	str	r3, [sp, #92]	@ 0x5c
 802416c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802416e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8024170:	041b      	lsls	r3, r3, #16
 8024172:	f424 6bfc 	bic.w	fp, r4, #2016	@ 0x7e0
 8024176:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 802417a:	ea43 030b 	orr.w	r3, r3, fp
 802417e:	4353      	muls	r3, r2
 8024180:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8024182:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8024186:	fb04 3707 	mla	r7, r4, r7, r3
 802418a:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 802418e:	f00b 63fc 	and.w	r3, fp, #132120576	@ 0x7e00000
 8024192:	ea43 0b01 	orr.w	fp, r3, r1
 8024196:	f1c0 0110 	rsb	r1, r0, #16
 802419a:	eba1 0c0c 	sub.w	ip, r1, ip
 802419e:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 80241a2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80241a4:	fb0c 770b 	mla	r7, ip, fp, r7
 80241a8:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80241ac:	f423 6bfc 	bic.w	fp, r3, #2016	@ 0x7e0
 80241b0:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 80241b4:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 80241b8:	ea4c 0c0b 	orr.w	ip, ip, fp
 80241bc:	fb02 770c 	mla	r7, r2, ip, r7
 80241c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80241c2:	0d79      	lsrs	r1, r7, #21
 80241c4:	8812      	ldrh	r2, [r2, #0]
 80241c6:	097f      	lsrs	r7, r7, #5
 80241c8:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80241cc:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 80241d0:	430f      	orrs	r7, r1
 80241d2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80241d4:	1211      	asrs	r1, r2, #8
 80241d6:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80241da:	b2bb      	uxth	r3, r7
 80241dc:	fb11 f104 	smulbb	r1, r1, r4
 80241e0:	10d7      	asrs	r7, r2, #3
 80241e2:	00d2      	lsls	r2, r2, #3
 80241e4:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 80241e8:	b2d2      	uxtb	r2, r2
 80241ea:	1218      	asrs	r0, r3, #8
 80241ec:	fb17 f704 	smulbb	r7, r7, r4
 80241f0:	fb12 f204 	smulbb	r2, r2, r4
 80241f4:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 80241f8:	fb00 1009 	mla	r0, r0, r9, r1
 80241fc:	10d9      	asrs	r1, r3, #3
 80241fe:	00db      	lsls	r3, r3, #3
 8024200:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8024204:	b2db      	uxtb	r3, r3
 8024206:	fb01 7109 	mla	r1, r1, r9, r7
 802420a:	fb03 2309 	mla	r3, r3, r9, r2
 802420e:	b280      	uxth	r0, r0
 8024210:	b29b      	uxth	r3, r3
 8024212:	b289      	uxth	r1, r1
 8024214:	1c42      	adds	r2, r0, #1
 8024216:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802421a:	1c4f      	adds	r7, r1, #1
 802421c:	1c5a      	adds	r2, r3, #1
 802421e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8024222:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8024226:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 802422a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802422e:	0949      	lsrs	r1, r1, #5
 8024230:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024232:	4310      	orrs	r0, r2
 8024234:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8024238:	4308      	orrs	r0, r1
 802423a:	f823 0b02 	strh.w	r0, [r3], #2
 802423e:	930e      	str	r3, [sp, #56]	@ 0x38
 8024240:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8024242:	f10e 3eff 	add.w	lr, lr, #4294967295
 8024246:	449a      	add	sl, r3
 8024248:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802424a:	441d      	add	r5, r3
 802424c:	e6ed      	b.n	802402a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 802424e:	2800      	cmp	r0, #0
 8024250:	f43f af7f 	beq.w	8024152 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8024254:	5cd3      	ldrb	r3, [r2, r3]
 8024256:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802425a:	9310      	str	r3, [sp, #64]	@ 0x40
 802425c:	e779      	b.n	8024152 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 802425e:	b019      	add	sp, #100	@ 0x64
 8024260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024264 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8024264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024268:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 802426c:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	@ 0x28
 8024270:	fb08 470e 	mla	r7, r8, lr, r4
 8024274:	f1b8 0f00 	cmp.w	r8, #0
 8024278:	f9bd a024 	ldrsh.w	sl, [sp, #36]	@ 0x24
 802427c:	f89d 5030 	ldrb.w	r5, [sp, #48]	@ 0x30
 8024280:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
 8024284:	eb02 0907 	add.w	r9, r2, r7
 8024288:	8808      	ldrh	r0, [r1, #0]
 802428a:	db67      	blt.n	802435c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 802428c:	45c2      	cmp	sl, r8
 802428e:	dd65      	ble.n	802435c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 8024290:	2c00      	cmp	r4, #0
 8024292:	db61      	blt.n	8024358 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 8024294:	45a6      	cmp	lr, r4
 8024296:	dd5f      	ble.n	8024358 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 8024298:	5dd2      	ldrb	r2, [r2, r7]
 802429a:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 802429e:	1c62      	adds	r2, r4, #1
 80242a0:	d45f      	bmi.n	8024362 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 80242a2:	4596      	cmp	lr, r2
 80242a4:	dd5d      	ble.n	8024362 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 80242a6:	2d00      	cmp	r5, #0
 80242a8:	d05b      	beq.n	8024362 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 80242aa:	f899 2001 	ldrb.w	r2, [r9, #1]
 80242ae:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 80242b2:	f118 0801 	adds.w	r8, r8, #1
 80242b6:	d458      	bmi.n	802436a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 80242b8:	45c2      	cmp	sl, r8
 80242ba:	dd56      	ble.n	802436a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 80242bc:	2e00      	cmp	r6, #0
 80242be:	d054      	beq.n	802436a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 80242c0:	2c00      	cmp	r4, #0
 80242c2:	db50      	blt.n	8024366 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 80242c4:	45a6      	cmp	lr, r4
 80242c6:	dd4e      	ble.n	8024366 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 80242c8:	f819 200e 	ldrb.w	r2, [r9, lr]
 80242cc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80242d0:	3401      	adds	r4, #1
 80242d2:	d407      	bmi.n	80242e4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 80242d4:	45a6      	cmp	lr, r4
 80242d6:	dd05      	ble.n	80242e4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 80242d8:	b125      	cbz	r5, 80242e4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 80242da:	44ce      	add	lr, r9
 80242dc:	f89e 0001 	ldrb.w	r0, [lr, #1]
 80242e0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80242e4:	fb15 f406 	smulbb	r4, r5, r6
 80242e8:	ea4f 430c 	mov.w	r3, ip, lsl #16
 80242ec:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 80242f0:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 80242f4:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 80242f8:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 80242fc:	ea43 0c0c 	orr.w	ip, r3, ip
 8024300:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 8024304:	f1c6 0310 	rsb	r3, r6, #16
 8024308:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 802430c:	1b5b      	subs	r3, r3, r5
 802430e:	ea4e 0707 	orr.w	r7, lr, r7
 8024312:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 8024316:	437d      	muls	r5, r7
 8024318:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 802431c:	fb03 5c0c 	mla	ip, r3, ip, r5
 8024320:	0403      	lsls	r3, r0, #16
 8024322:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8024326:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802432a:	4318      	orrs	r0, r3
 802432c:	fb04 c000 	mla	r0, r4, r0, ip
 8024330:	0413      	lsls	r3, r2, #16
 8024332:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8024336:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 802433a:	4313      	orrs	r3, r2
 802433c:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8024340:	fb06 0003 	mla	r0, r6, r3, r0
 8024344:	0d43      	lsrs	r3, r0, #21
 8024346:	0940      	lsrs	r0, r0, #5
 8024348:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802434c:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8024350:	4318      	orrs	r0, r3
 8024352:	8008      	strh	r0, [r1, #0]
 8024354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024358:	4684      	mov	ip, r0
 802435a:	e7a0      	b.n	802429e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 802435c:	4607      	mov	r7, r0
 802435e:	4684      	mov	ip, r0
 8024360:	e7a7      	b.n	80242b2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 8024362:	4607      	mov	r7, r0
 8024364:	e7a5      	b.n	80242b2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 8024366:	4602      	mov	r2, r0
 8024368:	e7b2      	b.n	80242d0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 802436a:	4602      	mov	r2, r0
 802436c:	e7ba      	b.n	80242e4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

0802436e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802436e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8024372:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024376:	b093      	sub	sp, #76	@ 0x4c
 8024378:	920f      	str	r2, [sp, #60]	@ 0x3c
 802437a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 802437c:	9010      	str	r0, [sp, #64]	@ 0x40
 802437e:	6850      	ldr	r0, [r2, #4]
 8024380:	9108      	str	r1, [sp, #32]
 8024382:	9306      	str	r3, [sp, #24]
 8024384:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 8024388:	fb00 1303 	mla	r3, r0, r3, r1
 802438c:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 8024390:	6812      	ldr	r2, [r2, #0]
 8024392:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8024396:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024398:	681b      	ldr	r3, [r3, #0]
 802439a:	9307      	str	r3, [sp, #28]
 802439c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802439e:	685f      	ldr	r7, [r3, #4]
 80243a0:	3704      	adds	r7, #4
 80243a2:	9b08      	ldr	r3, [sp, #32]
 80243a4:	2b00      	cmp	r3, #0
 80243a6:	dc03      	bgt.n	80243b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 80243a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80243aa:	2b00      	cmp	r3, #0
 80243ac:	f340 81b2 	ble.w	8024714 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 80243b0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80243b2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80243b6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80243ba:	1e48      	subs	r0, r1, #1
 80243bc:	f102 3cff 	add.w	ip, r2, #4294967295
 80243c0:	9b06      	ldr	r3, [sp, #24]
 80243c2:	2b00      	cmp	r3, #0
 80243c4:	f340 80a9 	ble.w	802451a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80243c8:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80243cc:	ea4f 4326 	mov.w	r3, r6, asr #16
 80243d0:	d406      	bmi.n	80243e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80243d2:	4586      	cmp	lr, r0
 80243d4:	da04      	bge.n	80243e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80243d6:	2b00      	cmp	r3, #0
 80243d8:	db02      	blt.n	80243e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80243da:	4563      	cmp	r3, ip
 80243dc:	f2c0 809e 	blt.w	802451c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 80243e0:	f11e 0e01 	adds.w	lr, lr, #1
 80243e4:	f100 808f 	bmi.w	8024506 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80243e8:	4571      	cmp	r1, lr
 80243ea:	f2c0 808c 	blt.w	8024506 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80243ee:	3301      	adds	r3, #1
 80243f0:	f100 8089 	bmi.w	8024506 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80243f4:	429a      	cmp	r2, r3
 80243f6:	f2c0 8086 	blt.w	8024506 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80243fa:	46c8      	mov	r8, r9
 80243fc:	f8dd b018 	ldr.w	fp, [sp, #24]
 8024400:	f1bb 0f00 	cmp.w	fp, #0
 8024404:	f340 80a6 	ble.w	8024554 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8024408:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 802440a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802440c:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8024410:	1422      	asrs	r2, r4, #16
 8024412:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8024416:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802441a:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802441e:	689b      	ldr	r3, [r3, #8]
 8024420:	f100 80e3 	bmi.w	80245ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8024424:	f103 3aff 	add.w	sl, r3, #4294967295
 8024428:	4552      	cmp	r2, sl
 802442a:	f280 80de 	bge.w	80245ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 802442e:	f1bc 0f00 	cmp.w	ip, #0
 8024432:	f2c0 80da 	blt.w	80245ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8024436:	f10e 3aff 	add.w	sl, lr, #4294967295
 802443a:	45d4      	cmp	ip, sl
 802443c:	f280 80d5 	bge.w	80245ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8024440:	b21b      	sxth	r3, r3
 8024442:	fb0c 2203 	mla	r2, ip, r3, r2
 8024446:	9d07      	ldr	r5, [sp, #28]
 8024448:	eb05 0a02 	add.w	sl, r5, r2
 802444c:	5caa      	ldrb	r2, [r5, r2]
 802444e:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 8024452:	2800      	cmp	r0, #0
 8024454:	f000 80c0 	beq.w	80245d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8024458:	f89a 2001 	ldrb.w	r2, [sl, #1]
 802445c:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8024460:	920b      	str	r2, [sp, #44]	@ 0x2c
 8024462:	b151      	cbz	r1, 802447a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8024464:	eb0a 0203 	add.w	r2, sl, r3
 8024468:	f81a 3003 	ldrb.w	r3, [sl, r3]
 802446c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8024470:	9309      	str	r3, [sp, #36]	@ 0x24
 8024472:	7853      	ldrb	r3, [r2, #1]
 8024474:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8024478:	930c      	str	r3, [sp, #48]	@ 0x30
 802447a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802447c:	fb10 f201 	smulbb	r2, r0, r1
 8024480:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8024484:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8024488:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 802448c:	ea4c 0c03 	orr.w	ip, ip, r3
 8024490:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024492:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8024494:	041b      	lsls	r3, r3, #16
 8024496:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 802449a:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 802449e:	10d2      	asrs	r2, r2, #3
 80244a0:	432b      	orrs	r3, r5
 80244a2:	4353      	muls	r3, r2
 80244a4:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 80244a8:	fb0a 330c 	mla	r3, sl, ip, r3
 80244ac:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 80244b0:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 80244b4:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 80244b8:	ea4c 0e0e 	orr.w	lr, ip, lr
 80244bc:	f1c1 0c10 	rsb	ip, r1, #16
 80244c0:	ebac 0c00 	sub.w	ip, ip, r0
 80244c4:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 80244c8:	fb0c 3c0e 	mla	ip, ip, lr, r3
 80244cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80244ce:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 80244d2:	0418      	lsls	r0, r3, #16
 80244d4:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 80244d8:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 80244dc:	4318      	orrs	r0, r3
 80244de:	fb02 c200 	mla	r2, r2, r0, ip
 80244e2:	0d53      	lsrs	r3, r2, #21
 80244e4:	0952      	lsrs	r2, r2, #5
 80244e6:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80244ea:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80244ee:	431a      	orrs	r2, r3
 80244f0:	f8a8 2000 	strh.w	r2, [r8]
 80244f4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80244f6:	f108 0802 	add.w	r8, r8, #2
 80244fa:	441c      	add	r4, r3
 80244fc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80244fe:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024502:	441e      	add	r6, r3
 8024504:	e77c      	b.n	8024400 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024506:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024508:	f109 0902 	add.w	r9, r9, #2
 802450c:	441c      	add	r4, r3
 802450e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024510:	441e      	add	r6, r3
 8024512:	9b06      	ldr	r3, [sp, #24]
 8024514:	3b01      	subs	r3, #1
 8024516:	9306      	str	r3, [sp, #24]
 8024518:	e752      	b.n	80243c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802451a:	d020      	beq.n	802455e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 802451c:	9b06      	ldr	r3, [sp, #24]
 802451e:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8024520:	3b01      	subs	r3, #1
 8024522:	fb00 4003 	mla	r0, r0, r3, r4
 8024526:	1400      	asrs	r0, r0, #16
 8024528:	f53f af67 	bmi.w	80243fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802452c:	3901      	subs	r1, #1
 802452e:	4288      	cmp	r0, r1
 8024530:	f6bf af63 	bge.w	80243fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8024534:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8024536:	fb01 6303 	mla	r3, r1, r3, r6
 802453a:	141b      	asrs	r3, r3, #16
 802453c:	f53f af5d 	bmi.w	80243fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8024540:	3a01      	subs	r2, #1
 8024542:	4293      	cmp	r3, r2
 8024544:	f6bf af59 	bge.w	80243fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8024548:	46ca      	mov	sl, r9
 802454a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 802454e:	f1b8 0f00 	cmp.w	r8, #0
 8024552:	dc67      	bgt.n	8024624 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8024554:	9b06      	ldr	r3, [sp, #24]
 8024556:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802455a:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802455e:	9b08      	ldr	r3, [sp, #32]
 8024560:	2b00      	cmp	r3, #0
 8024562:	f340 80d7 	ble.w	8024714 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8024566:	ee30 0a04 	vadd.f32	s0, s0, s8
 802456a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802456e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8024572:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024576:	eeb0 6a62 	vmov.f32	s12, s5
 802457a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802457e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024582:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024586:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802458a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802458e:	ee16 4a10 	vmov	r4, s12
 8024592:	eeb0 6a43 	vmov.f32	s12, s6
 8024596:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802459a:	ee12 2a90 	vmov	r2, s5
 802459e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80245a2:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80245a4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80245a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80245ac:	ee13 2a10 	vmov	r2, s6
 80245b0:	931f      	str	r3, [sp, #124]	@ 0x7c
 80245b2:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80245b4:	ee16 6a10 	vmov	r6, s12
 80245b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80245bc:	9320      	str	r3, [sp, #128]	@ 0x80
 80245be:	9b08      	ldr	r3, [sp, #32]
 80245c0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80245c2:	3b01      	subs	r3, #1
 80245c4:	9308      	str	r3, [sp, #32]
 80245c6:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80245c8:	bf08      	it	eq
 80245ca:	4613      	moveq	r3, r2
 80245cc:	eeb0 3a67 	vmov.f32	s6, s15
 80245d0:	9306      	str	r3, [sp, #24]
 80245d2:	eef0 2a47 	vmov.f32	s5, s14
 80245d6:	e6e4      	b.n	80243a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80245d8:	2900      	cmp	r1, #0
 80245da:	f43f af4e 	beq.w	802447a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 80245de:	f81a 3003 	ldrb.w	r3, [sl, r3]
 80245e2:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80245e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80245e8:	e747      	b.n	802447a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 80245ea:	f112 0a01 	adds.w	sl, r2, #1
 80245ee:	d481      	bmi.n	80244f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80245f0:	4553      	cmp	r3, sl
 80245f2:	f6ff af7f 	blt.w	80244f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80245f6:	f11c 0a01 	adds.w	sl, ip, #1
 80245fa:	f53f af7b 	bmi.w	80244f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80245fe:	45d6      	cmp	lr, sl
 8024600:	f6ff af78 	blt.w	80244f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8024604:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 8024608:	b21b      	sxth	r3, r3
 802460a:	fa0f f28e 	sxth.w	r2, lr
 802460e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8024612:	9201      	str	r2, [sp, #4]
 8024614:	9300      	str	r3, [sp, #0]
 8024616:	9a07      	ldr	r2, [sp, #28]
 8024618:	463b      	mov	r3, r7
 802461a:	4641      	mov	r1, r8
 802461c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802461e:	f7ff fe21 	bl	8024264 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8024622:	e767      	b.n	80244f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8024624:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024626:	1422      	asrs	r2, r4, #16
 8024628:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 802462c:	1431      	asrs	r1, r6, #16
 802462e:	fb03 2101 	mla	r1, r3, r1, r2
 8024632:	9d07      	ldr	r5, [sp, #28]
 8024634:	9a07      	ldr	r2, [sp, #28]
 8024636:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 802463a:	440a      	add	r2, r1
 802463c:	5c69      	ldrb	r1, [r5, r1]
 802463e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8024642:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 8024646:	f1be 0f00 	cmp.w	lr, #0
 802464a:	d05c      	beq.n	8024706 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 802464c:	f892 c001 	ldrb.w	ip, [r2, #1]
 8024650:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 8024654:	950d      	str	r5, [sp, #52]	@ 0x34
 8024656:	b150      	cbz	r0, 802466e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8024658:	eb02 0c03 	add.w	ip, r2, r3
 802465c:	5cd3      	ldrb	r3, [r2, r3]
 802465e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8024662:	930a      	str	r3, [sp, #40]	@ 0x28
 8024664:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8024668:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802466c:	930e      	str	r3, [sp, #56]	@ 0x38
 802466e:	fb1e f200 	smulbb	r2, lr, r0
 8024672:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024674:	10d2      	asrs	r2, r2, #3
 8024676:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802467a:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 802467e:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8024682:	ea4c 0c03 	orr.w	ip, ip, r3
 8024686:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 802468a:	9311      	str	r3, [sp, #68]	@ 0x44
 802468c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802468e:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8024690:	041b      	lsls	r3, r3, #16
 8024692:	f425 6bfc 	bic.w	fp, r5, #2016	@ 0x7e0
 8024696:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 802469a:	ea43 030b 	orr.w	r3, r3, fp
 802469e:	4353      	muls	r3, r2
 80246a0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80246a2:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80246a6:	fb05 3c0c 	mla	ip, r5, ip, r3
 80246aa:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 80246ae:	f00b 63fc 	and.w	r3, fp, #132120576	@ 0x7e00000
 80246b2:	ea43 0b01 	orr.w	fp, r3, r1
 80246b6:	f1c0 0110 	rsb	r1, r0, #16
 80246ba:	eba1 0e0e 	sub.w	lr, r1, lr
 80246be:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 80246c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80246c4:	fb0e cc0b 	mla	ip, lr, fp, ip
 80246c8:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 80246cc:	f423 6efc 	bic.w	lr, r3, #2016	@ 0x7e0
 80246d0:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80246d4:	ea4b 0e0e 	orr.w	lr, fp, lr
 80246d8:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 80246dc:	fb02 cc0e 	mla	ip, r2, lr, ip
 80246e0:	ea4f 535c 	mov.w	r3, ip, lsr #21
 80246e4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80246e8:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80246ec:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 80246f0:	ea43 0c0c 	orr.w	ip, r3, ip
 80246f4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80246f6:	f82a cb02 	strh.w	ip, [sl], #2
 80246fa:	441c      	add	r4, r3
 80246fc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80246fe:	f108 38ff 	add.w	r8, r8, #4294967295
 8024702:	441e      	add	r6, r3
 8024704:	e723      	b.n	802454e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8024706:	2800      	cmp	r0, #0
 8024708:	d0b1      	beq.n	802466e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 802470a:	5cd3      	ldrb	r3, [r2, r3]
 802470c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8024710:	930a      	str	r3, [sp, #40]	@ 0x28
 8024712:	e7ac      	b.n	802466e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8024714:	b013      	add	sp, #76	@ 0x4c
 8024716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802471a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 802471a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802471e:	880d      	ldrh	r5, [r1, #0]
 8024720:	b087      	sub	sp, #28
 8024722:	10ef      	asrs	r7, r5, #3
 8024724:	ea4f 2a25 	mov.w	sl, r5, asr #8
 8024728:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 802472c:	00ed      	lsls	r5, r5, #3
 802472e:	9701      	str	r7, [sp, #4]
 8024730:	b2ed      	uxtb	r5, r5
 8024732:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	@ 0x40
 8024736:	9502      	str	r5, [sp, #8]
 8024738:	9d01      	ldr	r5, [sp, #4]
 802473a:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 802473e:	fb06 0709 	mla	r7, r6, r9, r0
 8024742:	9103      	str	r1, [sp, #12]
 8024744:	f00a 0af8 	and.w	sl, sl, #248	@ 0xf8
 8024748:	022d      	lsls	r5, r5, #8
 802474a:	9902      	ldr	r1, [sp, #8]
 802474c:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8024750:	430d      	orrs	r5, r1
 8024752:	2e00      	cmp	r6, #0
 8024754:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 8024758:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 802475c:	f89d e054 	ldrb.w	lr, [sp, #84]	@ 0x54
 8024760:	f89d 8058 	ldrb.w	r8, [sp, #88]	@ 0x58
 8024764:	eb02 0c07 	add.w	ip, r2, r7
 8024768:	9505      	str	r5, [sp, #20]
 802476a:	f2c0 80b6 	blt.w	80248da <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 802476e:	45b3      	cmp	fp, r6
 8024770:	f340 80b3 	ble.w	80248da <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 8024774:	2800      	cmp	r0, #0
 8024776:	f2c0 80ae 	blt.w	80248d6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 802477a:	4581      	cmp	r9, r0
 802477c:	f340 80ab 	ble.w	80248d6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 8024780:	5dd7      	ldrb	r7, [r2, r7]
 8024782:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8024786:	441f      	add	r7, r3
 8024788:	1c42      	adds	r2, r0, #1
 802478a:	f100 80a9 	bmi.w	80248e0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 802478e:	4591      	cmp	r9, r2
 8024790:	f340 80a6 	ble.w	80248e0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 8024794:	2c00      	cmp	r4, #0
 8024796:	f000 80a3 	beq.w	80248e0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 802479a:	f89c 5001 	ldrb.w	r5, [ip, #1]
 802479e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80247a2:	441d      	add	r5, r3
 80247a4:	3601      	adds	r6, #1
 80247a6:	f100 809f 	bmi.w	80248e8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 80247aa:	45b3      	cmp	fp, r6
 80247ac:	f340 809c 	ble.w	80248e8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 80247b0:	f1be 0f00 	cmp.w	lr, #0
 80247b4:	f000 8098 	beq.w	80248e8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 80247b8:	2800      	cmp	r0, #0
 80247ba:	f2c0 8093 	blt.w	80248e4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 80247be:	4581      	cmp	r9, r0
 80247c0:	f340 8090 	ble.w	80248e4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 80247c4:	f81c 6009 	ldrb.w	r6, [ip, r9]
 80247c8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80247cc:	441e      	add	r6, r3
 80247ce:	3001      	adds	r0, #1
 80247d0:	f100 808d 	bmi.w	80248ee <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 80247d4:	4581      	cmp	r9, r0
 80247d6:	f340 808a 	ble.w	80248ee <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 80247da:	2c00      	cmp	r4, #0
 80247dc:	f000 8087 	beq.w	80248ee <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 80247e0:	44e1      	add	r9, ip
 80247e2:	f899 2001 	ldrb.w	r2, [r9, #1]
 80247e6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80247ea:	4413      	add	r3, r2
 80247ec:	b2a4      	uxth	r4, r4
 80247ee:	fa1f fe8e 	uxth.w	lr, lr
 80247f2:	fb04 fb0e 	mul.w	fp, r4, lr
 80247f6:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 80247fa:	fa1f f08e 	uxth.w	r0, lr
 80247fe:	fa1f fe88 	uxth.w	lr, r8
 8024802:	ea6f 0808 	mvn.w	r8, r8
 8024806:	0124      	lsls	r4, r4, #4
 8024808:	f5c4 7980 	rsb	r9, r4, #256	@ 0x100
 802480c:	eba4 040b 	sub.w	r4, r4, fp
 8024810:	b2a2      	uxth	r2, r4
 8024812:	78ac      	ldrb	r4, [r5, #2]
 8024814:	f897 c002 	ldrb.w	ip, [r7, #2]
 8024818:	4354      	muls	r4, r2
 802481a:	eba9 0900 	sub.w	r9, r9, r0
 802481e:	fa1f f989 	uxth.w	r9, r9
 8024822:	fb09 440c 	mla	r4, r9, ip, r4
 8024826:	f896 c002 	ldrb.w	ip, [r6, #2]
 802482a:	fa5f f888 	uxtb.w	r8, r8
 802482e:	fb00 440c 	mla	r4, r0, ip, r4
 8024832:	f893 c002 	ldrb.w	ip, [r3, #2]
 8024836:	fb1a fa08 	smulbb	sl, sl, r8
 802483a:	fb0b 4c0c 	mla	ip, fp, ip, r4
 802483e:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8024842:	fb0c ac0e 	mla	ip, ip, lr, sl
 8024846:	f895 a001 	ldrb.w	sl, [r5, #1]
 802484a:	782d      	ldrb	r5, [r5, #0]
 802484c:	fb02 fa0a 	mul.w	sl, r2, sl
 8024850:	436a      	muls	r2, r5
 8024852:	787c      	ldrb	r4, [r7, #1]
 8024854:	783f      	ldrb	r7, [r7, #0]
 8024856:	fb09 aa04 	mla	sl, r9, r4, sl
 802485a:	fb09 2207 	mla	r2, r9, r7, r2
 802485e:	7874      	ldrb	r4, [r6, #1]
 8024860:	7835      	ldrb	r5, [r6, #0]
 8024862:	fb00 aa04 	mla	sl, r0, r4, sl
 8024866:	fb00 2005 	mla	r0, r0, r5, r2
 802486a:	785c      	ldrb	r4, [r3, #1]
 802486c:	781b      	ldrb	r3, [r3, #0]
 802486e:	fb0b a404 	mla	r4, fp, r4, sl
 8024872:	9901      	ldr	r1, [sp, #4]
 8024874:	fb0b 0b03 	mla	fp, fp, r3, r0
 8024878:	9b02      	ldr	r3, [sp, #8]
 802487a:	fb11 fa08 	smulbb	sl, r1, r8
 802487e:	fb13 f808 	smulbb	r8, r3, r8
 8024882:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8024886:	f3c4 2407 	ubfx	r4, r4, #8, #8
 802488a:	fb04 a40e 	mla	r4, r4, lr, sl
 802488e:	fb0b 8e0e 	mla	lr, fp, lr, r8
 8024892:	fa1f fc8c 	uxth.w	ip, ip
 8024896:	f10c 0301 	add.w	r3, ip, #1
 802489a:	fa1f fe8e 	uxth.w	lr, lr
 802489e:	b2a4      	uxth	r4, r4
 80248a0:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80248a4:	f40c 4378 	and.w	r3, ip, #63488	@ 0xf800
 80248a8:	f104 0a01 	add.w	sl, r4, #1
 80248ac:	f10e 0c01 	add.w	ip, lr, #1
 80248b0:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80248b4:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 80248b8:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80248bc:	0964      	lsrs	r4, r4, #5
 80248be:	ea4c 0c03 	orr.w	ip, ip, r3
 80248c2:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 80248c6:	9b03      	ldr	r3, [sp, #12]
 80248c8:	ea4c 0c04 	orr.w	ip, ip, r4
 80248cc:	f8a3 c000 	strh.w	ip, [r3]
 80248d0:	b007      	add	sp, #28
 80248d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80248d6:	af05      	add	r7, sp, #20
 80248d8:	e756      	b.n	8024788 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 80248da:	ad05      	add	r5, sp, #20
 80248dc:	462f      	mov	r7, r5
 80248de:	e761      	b.n	80247a4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 80248e0:	ad05      	add	r5, sp, #20
 80248e2:	e75f      	b.n	80247a4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 80248e4:	ae05      	add	r6, sp, #20
 80248e6:	e772      	b.n	80247ce <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 80248e8:	ab05      	add	r3, sp, #20
 80248ea:	461e      	mov	r6, r3
 80248ec:	e77e      	b.n	80247ec <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 80248ee:	ab05      	add	r3, sp, #20
 80248f0:	e77c      	b.n	80247ec <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

080248f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80248f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80248f6:	b095      	sub	sp, #84	@ 0x54
 80248f8:	9212      	str	r2, [sp, #72]	@ 0x48
 80248fa:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80248fc:	9013      	str	r0, [sp, #76]	@ 0x4c
 80248fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8024900:	6850      	ldr	r0, [r2, #4]
 8024902:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 8024906:	910e      	str	r1, [sp, #56]	@ 0x38
 8024908:	930f      	str	r3, [sp, #60]	@ 0x3c
 802490a:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	@ 0x90
 802490e:	fb00 1303 	mla	r3, r0, r3, r1
 8024912:	6812      	ldr	r2, [r2, #0]
 8024914:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024918:	930a      	str	r3, [sp, #40]	@ 0x28
 802491a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802491c:	681b      	ldr	r3, [r3, #0]
 802491e:	930d      	str	r3, [sp, #52]	@ 0x34
 8024920:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8024922:	685c      	ldr	r4, [r3, #4]
 8024924:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024926:	3404      	adds	r4, #4
 8024928:	43db      	mvns	r3, r3
 802492a:	b2db      	uxtb	r3, r3
 802492c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802492e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024930:	2b00      	cmp	r3, #0
 8024932:	dc03      	bgt.n	802493c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8024934:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8024936:	2b00      	cmp	r3, #0
 8024938:	f340 8255 	ble.w	8024de6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 802493c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802493e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024942:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024946:	1e48      	subs	r0, r1, #1
 8024948:	1e55      	subs	r5, r2, #1
 802494a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802494c:	2b00      	cmp	r3, #0
 802494e:	f340 80f9 	ble.w	8024b44 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8024952:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 8024954:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024956:	1436      	asrs	r6, r6, #16
 8024958:	ea4f 4323 	mov.w	r3, r3, asr #16
 802495c:	d406      	bmi.n	802496c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 802495e:	4286      	cmp	r6, r0
 8024960:	da04      	bge.n	802496c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8024962:	2b00      	cmp	r3, #0
 8024964:	db02      	blt.n	802496c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8024966:	42ab      	cmp	r3, r5
 8024968:	f2c0 80ed 	blt.w	8024b46 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 802496c:	3601      	adds	r6, #1
 802496e:	f100 80da 	bmi.w	8024b26 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8024972:	42b1      	cmp	r1, r6
 8024974:	f2c0 80d7 	blt.w	8024b26 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8024978:	3301      	adds	r3, #1
 802497a:	f100 80d4 	bmi.w	8024b26 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 802497e:	429a      	cmp	r2, r3
 8024980:	f2c0 80d1 	blt.w	8024b26 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8024984:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024986:	9311      	str	r3, [sp, #68]	@ 0x44
 8024988:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802498a:	930c      	str	r3, [sp, #48]	@ 0x30
 802498c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802498e:	2b00      	cmp	r3, #0
 8024990:	f340 80fa 	ble.w	8024b88 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8024994:	9826      	ldr	r0, [sp, #152]	@ 0x98
 8024996:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024998:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802499a:	68c6      	ldr	r6, [r0, #12]
 802499c:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 802499e:	141d      	asrs	r5, r3, #16
 80249a0:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80249a4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80249a6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80249a8:	1400      	asrs	r0, r0, #16
 80249aa:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80249ae:	6892      	ldr	r2, [r2, #8]
 80249b0:	f100 813e 	bmi.w	8024c30 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80249b4:	1e57      	subs	r7, r2, #1
 80249b6:	42b8      	cmp	r0, r7
 80249b8:	f280 813a 	bge.w	8024c30 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80249bc:	2d00      	cmp	r5, #0
 80249be:	f2c0 8137 	blt.w	8024c30 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80249c2:	1e77      	subs	r7, r6, #1
 80249c4:	42bd      	cmp	r5, r7
 80249c6:	f280 8133 	bge.w	8024c30 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80249ca:	b212      	sxth	r2, r2
 80249cc:	fb05 0002 	mla	r0, r5, r2, r0
 80249d0:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80249d2:	f815 a000 	ldrb.w	sl, [r5, r0]
 80249d6:	182e      	adds	r6, r5, r0
 80249d8:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 80249dc:	eb04 050a 	add.w	r5, r4, sl
 80249e0:	2b00      	cmp	r3, #0
 80249e2:	f000 8117 	beq.w	8024c14 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80249e6:	f896 c001 	ldrb.w	ip, [r6, #1]
 80249ea:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80249ee:	44a4      	add	ip, r4
 80249f0:	2900      	cmp	r1, #0
 80249f2:	f000 8117 	beq.w	8024c24 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80249f6:	18b0      	adds	r0, r6, r2
 80249f8:	7840      	ldrb	r0, [r0, #1]
 80249fa:	5cb2      	ldrb	r2, [r6, r2]
 80249fc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024a00:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024a04:	4422      	add	r2, r4
 8024a06:	4420      	add	r0, r4
 8024a08:	b29b      	uxth	r3, r3
 8024a0a:	b289      	uxth	r1, r1
 8024a0c:	fb03 f901 	mul.w	r9, r3, r1
 8024a10:	011b      	lsls	r3, r3, #4
 8024a12:	f89c 7002 	ldrb.w	r7, [ip, #2]
 8024a16:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 8024a1a:	eba3 0309 	sub.w	r3, r3, r9
 8024a1e:	b29b      	uxth	r3, r3
 8024a20:	435f      	muls	r7, r3
 8024a22:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8024a26:	b289      	uxth	r1, r1
 8024a28:	f895 b002 	ldrb.w	fp, [r5, #2]
 8024a2c:	eba8 0801 	sub.w	r8, r8, r1
 8024a30:	fa1f f888 	uxth.w	r8, r8
 8024a34:	fb08 770b 	mla	r7, r8, fp, r7
 8024a38:	f892 b002 	ldrb.w	fp, [r2, #2]
 8024a3c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8024a3e:	fb01 770b 	mla	r7, r1, fp, r7
 8024a42:	f8b6 e000 	ldrh.w	lr, [r6]
 8024a46:	f890 b002 	ldrb.w	fp, [r0, #2]
 8024a4a:	9310      	str	r3, [sp, #64]	@ 0x40
 8024a4c:	fb09 770b 	mla	r7, r9, fp, r7
 8024a50:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024a52:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 8024a56:	f00b 0bf8 	and.w	fp, fp, #248	@ 0xf8
 8024a5a:	fb1b fb03 	smulbb	fp, fp, r3
 8024a5e:	f8bd 603c 	ldrh.w	r6, [sp, #60]	@ 0x3c
 8024a62:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8024a66:	fb07 b706 	mla	r7, r7, r6, fp
 8024a6a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024a6c:	f895 b001 	ldrb.w	fp, [r5, #1]
 8024a70:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8024a74:	f89c c000 	ldrb.w	ip, [ip]
 8024a78:	435d      	muls	r5, r3
 8024a7a:	fb08 550b 	mla	r5, r8, fp, r5
 8024a7e:	f892 b001 	ldrb.w	fp, [r2, #1]
 8024a82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024a84:	fb01 550b 	mla	r5, r1, fp, r5
 8024a88:	f890 b001 	ldrb.w	fp, [r0, #1]
 8024a8c:	f814 a00a 	ldrb.w	sl, [r4, sl]
 8024a90:	fb09 550b 	mla	r5, r9, fp, r5
 8024a94:	ea4f 0bee 	mov.w	fp, lr, asr #3
 8024a98:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 8024a9c:	fb1b fb03 	smulbb	fp, fp, r3
 8024aa0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024aa2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8024aa6:	fb03 f30c 	mul.w	r3, r3, ip
 8024aaa:	fb08 330a 	mla	r3, r8, sl, r3
 8024aae:	f892 c000 	ldrb.w	ip, [r2]
 8024ab2:	fa5f fe8e 	uxtb.w	lr, lr
 8024ab6:	fb01 330c 	mla	r3, r1, ip, r3
 8024aba:	f890 c000 	ldrb.w	ip, [r0]
 8024abe:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8024ac2:	fb09 3c0c 	mla	ip, r9, ip, r3
 8024ac6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024ac8:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8024acc:	fb1e fe03 	smulbb	lr, lr, r3
 8024ad0:	fb05 b506 	mla	r5, r5, r6, fp
 8024ad4:	fb0c e606 	mla	r6, ip, r6, lr
 8024ad8:	b2bf      	uxth	r7, r7
 8024ada:	1c7b      	adds	r3, r7, #1
 8024adc:	b2ad      	uxth	r5, r5
 8024ade:	b2b6      	uxth	r6, r6
 8024ae0:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8024ae4:	f407 4378 	and.w	r3, r7, #63488	@ 0xf800
 8024ae8:	f105 0b01 	add.w	fp, r5, #1
 8024aec:	1c77      	adds	r7, r6, #1
 8024aee:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8024af2:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8024af6:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8024afa:	096d      	lsrs	r5, r5, #5
 8024afc:	431f      	orrs	r7, r3
 8024afe:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8024b02:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024b04:	433d      	orrs	r5, r7
 8024b06:	801d      	strh	r5, [r3, #0]
 8024b08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024b0a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8024b0c:	3302      	adds	r3, #2
 8024b0e:	930c      	str	r3, [sp, #48]	@ 0x30
 8024b10:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024b12:	4413      	add	r3, r2
 8024b14:	931f      	str	r3, [sp, #124]	@ 0x7c
 8024b16:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8024b18:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024b1a:	4413      	add	r3, r2
 8024b1c:	9320      	str	r3, [sp, #128]	@ 0x80
 8024b1e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024b20:	3b01      	subs	r3, #1
 8024b22:	9311      	str	r3, [sp, #68]	@ 0x44
 8024b24:	e732      	b.n	802498c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8024b26:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024b28:	9e21      	ldr	r6, [sp, #132]	@ 0x84
 8024b2a:	4433      	add	r3, r6
 8024b2c:	931f      	str	r3, [sp, #124]	@ 0x7c
 8024b2e:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8024b30:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024b32:	4433      	add	r3, r6
 8024b34:	9320      	str	r3, [sp, #128]	@ 0x80
 8024b36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024b38:	3b01      	subs	r3, #1
 8024b3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8024b3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024b3e:	3302      	adds	r3, #2
 8024b40:	930a      	str	r3, [sp, #40]	@ 0x28
 8024b42:	e702      	b.n	802494a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8024b44:	d027      	beq.n	8024b96 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8024b46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024b48:	9821      	ldr	r0, [sp, #132]	@ 0x84
 8024b4a:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
 8024b4c:	3b01      	subs	r3, #1
 8024b4e:	fb00 5003 	mla	r0, r0, r3, r5
 8024b52:	1400      	asrs	r0, r0, #16
 8024b54:	f53f af16 	bmi.w	8024984 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024b58:	3901      	subs	r1, #1
 8024b5a:	4288      	cmp	r0, r1
 8024b5c:	f6bf af12 	bge.w	8024984 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024b60:	9922      	ldr	r1, [sp, #136]	@ 0x88
 8024b62:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8024b64:	fb01 0303 	mla	r3, r1, r3, r0
 8024b68:	141b      	asrs	r3, r3, #16
 8024b6a:	f53f af0b 	bmi.w	8024984 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024b6e:	3a01      	subs	r2, #1
 8024b70:	4293      	cmp	r3, r2
 8024b72:	f6bf af07 	bge.w	8024984 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024b76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024b78:	f8bd a03c 	ldrh.w	sl, [sp, #60]	@ 0x3c
 8024b7c:	9311      	str	r3, [sp, #68]	@ 0x44
 8024b7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024b80:	930c      	str	r3, [sp, #48]	@ 0x30
 8024b82:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024b84:	2b00      	cmp	r3, #0
 8024b86:	dc70      	bgt.n	8024c6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 8024b88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024b8a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024b8c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8024b90:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024b94:	930a      	str	r3, [sp, #40]	@ 0x28
 8024b96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024b98:	2b00      	cmp	r3, #0
 8024b9a:	f340 8124 	ble.w	8024de6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 8024b9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8024ba2:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024ba6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024baa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024bae:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024bb2:	eef0 6a62 	vmov.f32	s13, s5
 8024bb6:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024bba:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024bbe:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024bc2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024bc6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024bca:	edcd 6a1f 	vstr	s13, [sp, #124]	@ 0x7c
 8024bce:	eef0 6a43 	vmov.f32	s13, s6
 8024bd2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024bd6:	ee12 2a90 	vmov	r2, s5
 8024bda:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024bde:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8024be0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024be4:	fb92 f3f3 	sdiv	r3, r2, r3
 8024be8:	ee13 2a10 	vmov	r2, s6
 8024bec:	9321      	str	r3, [sp, #132]	@ 0x84
 8024bee:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8024bf0:	edcd 6a20 	vstr	s13, [sp, #128]	@ 0x80
 8024bf4:	fb92 f3f3 	sdiv	r3, r2, r3
 8024bf8:	9322      	str	r3, [sp, #136]	@ 0x88
 8024bfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024bfc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8024bfe:	3b01      	subs	r3, #1
 8024c00:	930e      	str	r3, [sp, #56]	@ 0x38
 8024c02:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8024c04:	bf08      	it	eq
 8024c06:	4613      	moveq	r3, r2
 8024c08:	eeb0 3a67 	vmov.f32	s6, s15
 8024c0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8024c0e:	eef0 2a47 	vmov.f32	s5, s14
 8024c12:	e68c      	b.n	802492e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8024c14:	b149      	cbz	r1, 8024c2a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 8024c16:	4628      	mov	r0, r5
 8024c18:	5cb2      	ldrb	r2, [r6, r2]
 8024c1a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024c1e:	4422      	add	r2, r4
 8024c20:	46ac      	mov	ip, r5
 8024c22:	e6f1      	b.n	8024a08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8024c24:	4628      	mov	r0, r5
 8024c26:	462a      	mov	r2, r5
 8024c28:	e6ee      	b.n	8024a08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8024c2a:	4628      	mov	r0, r5
 8024c2c:	462a      	mov	r2, r5
 8024c2e:	e7f7      	b.n	8024c20 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8024c30:	1c47      	adds	r7, r0, #1
 8024c32:	f53f af69 	bmi.w	8024b08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8024c36:	42ba      	cmp	r2, r7
 8024c38:	f6ff af66 	blt.w	8024b08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8024c3c:	1c6f      	adds	r7, r5, #1
 8024c3e:	f53f af63 	bmi.w	8024b08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8024c42:	42be      	cmp	r6, r7
 8024c44:	f6ff af60 	blt.w	8024b08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8024c48:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8024c4a:	b236      	sxth	r6, r6
 8024c4c:	b212      	sxth	r2, r2
 8024c4e:	e9cd 1705 	strd	r1, r7, [sp, #20]
 8024c52:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8024c56:	9002      	str	r0, [sp, #8]
 8024c58:	9200      	str	r2, [sp, #0]
 8024c5a:	9601      	str	r6, [sp, #4]
 8024c5c:	4623      	mov	r3, r4
 8024c5e:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	@ 0x30
 8024c62:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8024c64:	f7ff fd59 	bl	802471a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 8024c68:	e74e      	b.n	8024b08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8024c6a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8024c6c:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8024c6e:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8024c72:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8024c74:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
 8024c76:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8024c7a:	142d      	asrs	r5, r5, #16
 8024c7c:	1400      	asrs	r0, r0, #16
 8024c7e:	fb02 5000 	mla	r0, r2, r0, r5
 8024c82:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8024c84:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024c86:	f815 9000 	ldrb.w	r9, [r5, r0]
 8024c8a:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8024c8e:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8024c92:	182e      	adds	r6, r5, r0
 8024c94:	eb04 0509 	add.w	r5, r4, r9
 8024c98:	2b00      	cmp	r3, #0
 8024c9a:	f000 8096 	beq.w	8024dca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8024c9e:	7877      	ldrb	r7, [r6, #1]
 8024ca0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8024ca4:	4427      	add	r7, r4
 8024ca6:	2900      	cmp	r1, #0
 8024ca8:	f000 8097 	beq.w	8024dda <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 8024cac:	18b0      	adds	r0, r6, r2
 8024cae:	7840      	ldrb	r0, [r0, #1]
 8024cb0:	5cb2      	ldrb	r2, [r6, r2]
 8024cb2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024cb6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024cba:	4422      	add	r2, r4
 8024cbc:	4420      	add	r0, r4
 8024cbe:	b29b      	uxth	r3, r3
 8024cc0:	b289      	uxth	r1, r1
 8024cc2:	fb03 f801 	mul.w	r8, r3, r1
 8024cc6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8024cc8:	011b      	lsls	r3, r3, #4
 8024cca:	f8b6 c000 	ldrh.w	ip, [r6]
 8024cce:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8024cd2:	78be      	ldrb	r6, [r7, #2]
 8024cd4:	eba3 0308 	sub.w	r3, r3, r8
 8024cd8:	b29b      	uxth	r3, r3
 8024cda:	435e      	muls	r6, r3
 8024cdc:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8024ce0:	b289      	uxth	r1, r1
 8024ce2:	f895 b002 	ldrb.w	fp, [r5, #2]
 8024ce6:	ebae 0e01 	sub.w	lr, lr, r1
 8024cea:	fa1f fe8e 	uxth.w	lr, lr
 8024cee:	fb0e 660b 	mla	r6, lr, fp, r6
 8024cf2:	f892 b002 	ldrb.w	fp, [r2, #2]
 8024cf6:	9310      	str	r3, [sp, #64]	@ 0x40
 8024cf8:	fb01 660b 	mla	r6, r1, fp, r6
 8024cfc:	f890 b002 	ldrb.w	fp, [r0, #2]
 8024d00:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024d02:	fb08 660b 	mla	r6, r8, fp, r6
 8024d06:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 8024d0a:	f00b 0bf8 	and.w	fp, fp, #248	@ 0xf8
 8024d0e:	fb1b fb03 	smulbb	fp, fp, r3
 8024d12:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8024d16:	fb06 b60a 	mla	r6, r6, sl, fp
 8024d1a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024d1c:	f895 b001 	ldrb.w	fp, [r5, #1]
 8024d20:	787d      	ldrb	r5, [r7, #1]
 8024d22:	783f      	ldrb	r7, [r7, #0]
 8024d24:	435d      	muls	r5, r3
 8024d26:	fb0e 550b 	mla	r5, lr, fp, r5
 8024d2a:	f892 b001 	ldrb.w	fp, [r2, #1]
 8024d2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024d30:	fb01 550b 	mla	r5, r1, fp, r5
 8024d34:	f890 b001 	ldrb.w	fp, [r0, #1]
 8024d38:	f814 9009 	ldrb.w	r9, [r4, r9]
 8024d3c:	fb08 550b 	mla	r5, r8, fp, r5
 8024d40:	ea4f 0bec 	mov.w	fp, ip, asr #3
 8024d44:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 8024d48:	fb1b fb03 	smulbb	fp, fp, r3
 8024d4c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024d4e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8024d52:	437b      	muls	r3, r7
 8024d54:	fb0e 3309 	mla	r3, lr, r9, r3
 8024d58:	7817      	ldrb	r7, [r2, #0]
 8024d5a:	fa5f fc8c 	uxtb.w	ip, ip
 8024d5e:	fb01 3307 	mla	r3, r1, r7, r3
 8024d62:	7807      	ldrb	r7, [r0, #0]
 8024d64:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8024d68:	fb08 3707 	mla	r7, r8, r7, r3
 8024d6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024d6e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8024d72:	fb1c fc03 	smulbb	ip, ip, r3
 8024d76:	fb05 b50a 	mla	r5, r5, sl, fp
 8024d7a:	fb07 c70a 	mla	r7, r7, sl, ip
 8024d7e:	b2b6      	uxth	r6, r6
 8024d80:	b2ad      	uxth	r5, r5
 8024d82:	b2bf      	uxth	r7, r7
 8024d84:	1c73      	adds	r3, r6, #1
 8024d86:	1c7a      	adds	r2, r7, #1
 8024d88:	f105 0b01 	add.w	fp, r5, #1
 8024d8c:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8024d90:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8024d94:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8024d98:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8024d9c:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 8024da0:	096d      	lsrs	r5, r5, #5
 8024da2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024da4:	4316      	orrs	r6, r2
 8024da6:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8024daa:	432e      	orrs	r6, r5
 8024dac:	f823 6b02 	strh.w	r6, [r3], #2
 8024db0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8024db2:	930c      	str	r3, [sp, #48]	@ 0x30
 8024db4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024db6:	4413      	add	r3, r2
 8024db8:	931f      	str	r3, [sp, #124]	@ 0x7c
 8024dba:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8024dbc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024dbe:	4413      	add	r3, r2
 8024dc0:	9320      	str	r3, [sp, #128]	@ 0x80
 8024dc2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024dc4:	3b01      	subs	r3, #1
 8024dc6:	9311      	str	r3, [sp, #68]	@ 0x44
 8024dc8:	e6db      	b.n	8024b82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 8024dca:	b149      	cbz	r1, 8024de0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 8024dcc:	4628      	mov	r0, r5
 8024dce:	5cb2      	ldrb	r2, [r6, r2]
 8024dd0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024dd4:	4422      	add	r2, r4
 8024dd6:	462f      	mov	r7, r5
 8024dd8:	e771      	b.n	8024cbe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8024dda:	4628      	mov	r0, r5
 8024ddc:	462a      	mov	r2, r5
 8024dde:	e76e      	b.n	8024cbe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8024de0:	4628      	mov	r0, r5
 8024de2:	462a      	mov	r2, r5
 8024de4:	e7f7      	b.n	8024dd6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8024de6:	b015      	add	sp, #84	@ 0x54
 8024de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024dec <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 8024dec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024df0:	880f      	ldrh	r7, [r1, #0]
 8024df2:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 8024df6:	023c      	lsls	r4, r7, #8
 8024df8:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	@ 0x38
 8024dfc:	f404 0b78 	and.w	fp, r4, #16252928	@ 0xf80000
 8024e00:	fb05 ca0e 	mla	sl, r5, lr, ip
 8024e04:	017c      	lsls	r4, r7, #5
 8024e06:	f404 447c 	and.w	r4, r4, #64512	@ 0xfc00
 8024e0a:	00ff      	lsls	r7, r7, #3
 8024e0c:	ea4b 0404 	orr.w	r4, fp, r4
 8024e10:	b2ff      	uxtb	r7, r7
 8024e12:	4327      	orrs	r7, r4
 8024e14:	2d00      	cmp	r5, #0
 8024e16:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8024e1a:	f89d 0040 	ldrb.w	r0, [sp, #64]	@ 0x40
 8024e1e:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 8024e22:	eb02 080a 	add.w	r8, r2, sl
 8024e26:	9701      	str	r7, [sp, #4]
 8024e28:	db7e      	blt.n	8024f28 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 8024e2a:	45a9      	cmp	r9, r5
 8024e2c:	dd7c      	ble.n	8024f28 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 8024e2e:	f1bc 0f00 	cmp.w	ip, #0
 8024e32:	db77      	blt.n	8024f24 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8024e34:	45e6      	cmp	lr, ip
 8024e36:	dd75      	ble.n	8024f24 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8024e38:	f812 700a 	ldrb.w	r7, [r2, sl]
 8024e3c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8024e40:	441f      	add	r7, r3
 8024e42:	f11c 0201 	adds.w	r2, ip, #1
 8024e46:	d472      	bmi.n	8024f2e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8024e48:	4596      	cmp	lr, r2
 8024e4a:	dd70      	ble.n	8024f2e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8024e4c:	2800      	cmp	r0, #0
 8024e4e:	d06e      	beq.n	8024f2e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8024e50:	f898 4001 	ldrb.w	r4, [r8, #1]
 8024e54:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024e58:	441c      	add	r4, r3
 8024e5a:	3501      	adds	r5, #1
 8024e5c:	d46b      	bmi.n	8024f36 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8024e5e:	45a9      	cmp	r9, r5
 8024e60:	dd69      	ble.n	8024f36 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8024e62:	2e00      	cmp	r6, #0
 8024e64:	d067      	beq.n	8024f36 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8024e66:	f1bc 0f00 	cmp.w	ip, #0
 8024e6a:	db62      	blt.n	8024f32 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8024e6c:	45e6      	cmp	lr, ip
 8024e6e:	dd60      	ble.n	8024f32 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8024e70:	f818 500e 	ldrb.w	r5, [r8, lr]
 8024e74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8024e78:	441d      	add	r5, r3
 8024e7a:	f11c 0201 	adds.w	r2, ip, #1
 8024e7e:	d45d      	bmi.n	8024f3c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8024e80:	4596      	cmp	lr, r2
 8024e82:	dd5b      	ble.n	8024f3c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8024e84:	2800      	cmp	r0, #0
 8024e86:	d059      	beq.n	8024f3c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8024e88:	44c6      	add	lr, r8
 8024e8a:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8024e8e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024e92:	4413      	add	r3, r2
 8024e94:	b280      	uxth	r0, r0
 8024e96:	b2b2      	uxth	r2, r6
 8024e98:	fb00 f602 	mul.w	r6, r0, r2
 8024e9c:	0100      	lsls	r0, r0, #4
 8024e9e:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8024ea2:	f5c0 7880 	rsb	r8, r0, #256	@ 0x100
 8024ea6:	1b80      	subs	r0, r0, r6
 8024ea8:	fa1f fc82 	uxth.w	ip, r2
 8024eac:	b282      	uxth	r2, r0
 8024eae:	78a0      	ldrb	r0, [r4, #2]
 8024eb0:	f897 e002 	ldrb.w	lr, [r7, #2]
 8024eb4:	4350      	muls	r0, r2
 8024eb6:	eba8 080c 	sub.w	r8, r8, ip
 8024eba:	fa1f f888 	uxth.w	r8, r8
 8024ebe:	fb08 0e0e 	mla	lr, r8, lr, r0
 8024ec2:	78a8      	ldrb	r0, [r5, #2]
 8024ec4:	f897 9000 	ldrb.w	r9, [r7]
 8024ec8:	fb0c e000 	mla	r0, ip, r0, lr
 8024ecc:	f893 e002 	ldrb.w	lr, [r3, #2]
 8024ed0:	787f      	ldrb	r7, [r7, #1]
 8024ed2:	fb06 0e0e 	mla	lr, r6, lr, r0
 8024ed6:	f40e 4078 	and.w	r0, lr, #63488	@ 0xf800
 8024eda:	f894 e000 	ldrb.w	lr, [r4]
 8024ede:	fb02 fe0e 	mul.w	lr, r2, lr
 8024ee2:	fb08 e909 	mla	r9, r8, r9, lr
 8024ee6:	f895 e000 	ldrb.w	lr, [r5]
 8024eea:	fb0c 990e 	mla	r9, ip, lr, r9
 8024eee:	f893 e000 	ldrb.w	lr, [r3]
 8024ef2:	785b      	ldrb	r3, [r3, #1]
 8024ef4:	fb06 9e0e 	mla	lr, r6, lr, r9
 8024ef8:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8024efc:	ea4e 0e00 	orr.w	lr, lr, r0
 8024f00:	7860      	ldrb	r0, [r4, #1]
 8024f02:	4350      	muls	r0, r2
 8024f04:	fb08 0007 	mla	r0, r8, r7, r0
 8024f08:	786a      	ldrb	r2, [r5, #1]
 8024f0a:	fb0c 0202 	mla	r2, ip, r2, r0
 8024f0e:	fb06 2303 	mla	r3, r6, r3, r2
 8024f12:	095b      	lsrs	r3, r3, #5
 8024f14:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8024f18:	ea4e 0303 	orr.w	r3, lr, r3
 8024f1c:	800b      	strh	r3, [r1, #0]
 8024f1e:	b003      	add	sp, #12
 8024f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024f24:	af01      	add	r7, sp, #4
 8024f26:	e78c      	b.n	8024e42 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 8024f28:	ac01      	add	r4, sp, #4
 8024f2a:	4627      	mov	r7, r4
 8024f2c:	e795      	b.n	8024e5a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8024f2e:	ac01      	add	r4, sp, #4
 8024f30:	e793      	b.n	8024e5a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8024f32:	ad01      	add	r5, sp, #4
 8024f34:	e7a1      	b.n	8024e7a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 8024f36:	ab01      	add	r3, sp, #4
 8024f38:	461d      	mov	r5, r3
 8024f3a:	e7ab      	b.n	8024e94 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 8024f3c:	ab01      	add	r3, sp, #4
 8024f3e:	e7a9      	b.n	8024e94 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

08024f40 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024f44:	b08f      	sub	sp, #60	@ 0x3c
 8024f46:	920c      	str	r2, [sp, #48]	@ 0x30
 8024f48:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8024f4a:	900d      	str	r0, [sp, #52]	@ 0x34
 8024f4c:	6850      	ldr	r0, [r2, #4]
 8024f4e:	910a      	str	r1, [sp, #40]	@ 0x28
 8024f50:	9306      	str	r3, [sp, #24]
 8024f52:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	@ 0x78
 8024f56:	fb00 1303 	mla	r3, r0, r3, r1
 8024f5a:	e9dd b519 	ldrd	fp, r5, [sp, #100]	@ 0x64
 8024f5e:	6812      	ldr	r2, [r2, #0]
 8024f60:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024f64:	9307      	str	r3, [sp, #28]
 8024f66:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024f68:	681b      	ldr	r3, [r3, #0]
 8024f6a:	9308      	str	r3, [sp, #32]
 8024f6c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024f6e:	685c      	ldr	r4, [r3, #4]
 8024f70:	3404      	adds	r4, #4
 8024f72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024f74:	2b00      	cmp	r3, #0
 8024f76:	dc03      	bgt.n	8024f80 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8024f78:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024f7a:	2b00      	cmp	r3, #0
 8024f7c:	f340 81d6 	ble.w	802532c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 8024f80:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024f82:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024f86:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024f8a:	1e48      	subs	r0, r1, #1
 8024f8c:	1e56      	subs	r6, r2, #1
 8024f8e:	9b06      	ldr	r3, [sp, #24]
 8024f90:	2b00      	cmp	r3, #0
 8024f92:	f340 80b7 	ble.w	8025104 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 8024f96:	ea5f 472b 	movs.w	r7, fp, asr #16
 8024f9a:	ea4f 4325 	mov.w	r3, r5, asr #16
 8024f9e:	d406      	bmi.n	8024fae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8024fa0:	4287      	cmp	r7, r0
 8024fa2:	da04      	bge.n	8024fae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8024fa4:	2b00      	cmp	r3, #0
 8024fa6:	db02      	blt.n	8024fae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8024fa8:	42b3      	cmp	r3, r6
 8024faa:	f2c0 80ac 	blt.w	8025106 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8024fae:	3701      	adds	r7, #1
 8024fb0:	f100 809d 	bmi.w	80250ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8024fb4:	42b9      	cmp	r1, r7
 8024fb6:	f2c0 809a 	blt.w	80250ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8024fba:	3301      	adds	r3, #1
 8024fbc:	f100 8097 	bmi.w	80250ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8024fc0:	429a      	cmp	r2, r3
 8024fc2:	f2c0 8094 	blt.w	80250ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8024fc6:	9b06      	ldr	r3, [sp, #24]
 8024fc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024fca:	9b07      	ldr	r3, [sp, #28]
 8024fcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8024fce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024fd0:	2b00      	cmp	r3, #0
 8024fd2:	f340 80b5 	ble.w	8025140 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8024fd6:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8024fd8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8024fda:	68c7      	ldr	r7, [r0, #12]
 8024fdc:	ea5f 402b 	movs.w	r0, fp, asr #16
 8024fe0:	ea4f 4625 	mov.w	r6, r5, asr #16
 8024fe4:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8024fe8:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8024fec:	6892      	ldr	r2, [r2, #8]
 8024fee:	f100 80fb 	bmi.w	80251e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8024ff2:	f102 3cff 	add.w	ip, r2, #4294967295
 8024ff6:	4560      	cmp	r0, ip
 8024ff8:	f280 80f6 	bge.w	80251e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8024ffc:	2e00      	cmp	r6, #0
 8024ffe:	f2c0 80f3 	blt.w	80251e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8025002:	f107 3cff 	add.w	ip, r7, #4294967295
 8025006:	4566      	cmp	r6, ip
 8025008:	f280 80ee 	bge.w	80251e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 802500c:	b212      	sxth	r2, r2
 802500e:	fb06 0002 	mla	r0, r6, r2, r0
 8025012:	9e08      	ldr	r6, [sp, #32]
 8025014:	1837      	adds	r7, r6, r0
 8025016:	5c30      	ldrb	r0, [r6, r0]
 8025018:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 802501c:	eb04 0c08 	add.w	ip, r4, r8
 8025020:	2b00      	cmp	r3, #0
 8025022:	f000 80d3 	beq.w	80251cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8025026:	787e      	ldrb	r6, [r7, #1]
 8025028:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802502c:	4426      	add	r6, r4
 802502e:	2900      	cmp	r1, #0
 8025030:	f000 80d4 	beq.w	80251dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 8025034:	18b8      	adds	r0, r7, r2
 8025036:	7840      	ldrb	r0, [r0, #1]
 8025038:	5cba      	ldrb	r2, [r7, r2]
 802503a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802503e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025042:	4422      	add	r2, r4
 8025044:	4420      	add	r0, r4
 8025046:	b29b      	uxth	r3, r3
 8025048:	b289      	uxth	r1, r1
 802504a:	fb03 f901 	mul.w	r9, r3, r1
 802504e:	011b      	lsls	r3, r3, #4
 8025050:	78b7      	ldrb	r7, [r6, #2]
 8025052:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8025056:	eba3 0309 	sub.w	r3, r3, r9
 802505a:	b29b      	uxth	r3, r3
 802505c:	435f      	muls	r7, r3
 802505e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8025062:	b289      	uxth	r1, r1
 8025064:	f89c a002 	ldrb.w	sl, [ip, #2]
 8025068:	ebae 0e01 	sub.w	lr, lr, r1
 802506c:	fa1f fe8e 	uxth.w	lr, lr
 8025070:	fb0e 770a 	mla	r7, lr, sl, r7
 8025074:	f892 a002 	ldrb.w	sl, [r2, #2]
 8025078:	f89c c001 	ldrb.w	ip, [ip, #1]
 802507c:	fb01 770a 	mla	r7, r1, sl, r7
 8025080:	f890 a002 	ldrb.w	sl, [r0, #2]
 8025084:	fb09 7a0a 	mla	sl, r9, sl, r7
 8025088:	f814 7008 	ldrb.w	r7, [r4, r8]
 802508c:	f896 8000 	ldrb.w	r8, [r6]
 8025090:	7876      	ldrb	r6, [r6, #1]
 8025092:	fb03 f808 	mul.w	r8, r3, r8
 8025096:	fb0e 8807 	mla	r8, lr, r7, r8
 802509a:	7817      	ldrb	r7, [r2, #0]
 802509c:	4373      	muls	r3, r6
 802509e:	fb01 8807 	mla	r8, r1, r7, r8
 80250a2:	7807      	ldrb	r7, [r0, #0]
 80250a4:	fb0e 330c 	mla	r3, lr, ip, r3
 80250a8:	fb09 8707 	mla	r7, r9, r7, r8
 80250ac:	f40a 4a78 	and.w	sl, sl, #63488	@ 0xf800
 80250b0:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80250b4:	ea47 070a 	orr.w	r7, r7, sl
 80250b8:	f892 a001 	ldrb.w	sl, [r2, #1]
 80250bc:	fb01 310a 	mla	r1, r1, sl, r3
 80250c0:	f890 a001 	ldrb.w	sl, [r0, #1]
 80250c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80250c6:	fb09 1a0a 	mla	sl, r9, sl, r1
 80250ca:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80250ce:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 80250d2:	ea47 070a 	orr.w	r7, r7, sl
 80250d6:	801f      	strh	r7, [r3, #0]
 80250d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80250da:	3302      	adds	r3, #2
 80250dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80250de:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80250e0:	449b      	add	fp, r3
 80250e2:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80250e4:	441d      	add	r5, r3
 80250e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80250e8:	3b01      	subs	r3, #1
 80250ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80250ec:	e76f      	b.n	8024fce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80250ee:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80250f0:	449b      	add	fp, r3
 80250f2:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80250f4:	441d      	add	r5, r3
 80250f6:	9b06      	ldr	r3, [sp, #24]
 80250f8:	3b01      	subs	r3, #1
 80250fa:	9306      	str	r3, [sp, #24]
 80250fc:	9b07      	ldr	r3, [sp, #28]
 80250fe:	3302      	adds	r3, #2
 8025100:	9307      	str	r3, [sp, #28]
 8025102:	e744      	b.n	8024f8e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8025104:	d023      	beq.n	802514e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8025106:	9b06      	ldr	r3, [sp, #24]
 8025108:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 802510a:	3b01      	subs	r3, #1
 802510c:	fb00 b003 	mla	r0, r0, r3, fp
 8025110:	1400      	asrs	r0, r0, #16
 8025112:	f53f af58 	bmi.w	8024fc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8025116:	3901      	subs	r1, #1
 8025118:	4288      	cmp	r0, r1
 802511a:	f6bf af54 	bge.w	8024fc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802511e:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8025120:	fb01 5303 	mla	r3, r1, r3, r5
 8025124:	141b      	asrs	r3, r3, #16
 8025126:	f53f af4e 	bmi.w	8024fc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802512a:	3a01      	subs	r2, #1
 802512c:	4293      	cmp	r3, r2
 802512e:	f6bf af4a 	bge.w	8024fc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8025132:	9b06      	ldr	r3, [sp, #24]
 8025134:	9309      	str	r3, [sp, #36]	@ 0x24
 8025136:	9b07      	ldr	r3, [sp, #28]
 8025138:	930b      	str	r3, [sp, #44]	@ 0x2c
 802513a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802513c:	2b00      	cmp	r3, #0
 802513e:	dc70      	bgt.n	8025222 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 8025140:	9b06      	ldr	r3, [sp, #24]
 8025142:	9a07      	ldr	r2, [sp, #28]
 8025144:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8025148:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802514c:	9307      	str	r3, [sp, #28]
 802514e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025150:	2b00      	cmp	r3, #0
 8025152:	f340 80eb 	ble.w	802532c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 8025156:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802515a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802515e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025162:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025166:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802516a:	eef0 6a62 	vmov.f32	s13, s5
 802516e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025172:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025176:	ee61 7a27 	vmul.f32	s15, s2, s15
 802517a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802517e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025182:	ee16 ba90 	vmov	fp, s13
 8025186:	eef0 6a43 	vmov.f32	s13, s6
 802518a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802518e:	ee12 2a90 	vmov	r2, s5
 8025192:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025196:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8025198:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802519c:	fb92 f3f3 	sdiv	r3, r2, r3
 80251a0:	ee13 2a10 	vmov	r2, s6
 80251a4:	931b      	str	r3, [sp, #108]	@ 0x6c
 80251a6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80251a8:	ee16 5a90 	vmov	r5, s13
 80251ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80251b0:	931c      	str	r3, [sp, #112]	@ 0x70
 80251b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80251b4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80251b6:	3b01      	subs	r3, #1
 80251b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80251ba:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80251bc:	bf08      	it	eq
 80251be:	4613      	moveq	r3, r2
 80251c0:	eeb0 3a67 	vmov.f32	s6, s15
 80251c4:	9306      	str	r3, [sp, #24]
 80251c6:	eef0 2a47 	vmov.f32	s5, s14
 80251ca:	e6d2      	b.n	8024f72 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 80251cc:	b149      	cbz	r1, 80251e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 80251ce:	4660      	mov	r0, ip
 80251d0:	5cba      	ldrb	r2, [r7, r2]
 80251d2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80251d6:	4422      	add	r2, r4
 80251d8:	4666      	mov	r6, ip
 80251da:	e734      	b.n	8025046 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 80251dc:	4660      	mov	r0, ip
 80251de:	4662      	mov	r2, ip
 80251e0:	e731      	b.n	8025046 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 80251e2:	4660      	mov	r0, ip
 80251e4:	4662      	mov	r2, ip
 80251e6:	e7f7      	b.n	80251d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 80251e8:	f110 0c01 	adds.w	ip, r0, #1
 80251ec:	f53f af74 	bmi.w	80250d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80251f0:	4562      	cmp	r2, ip
 80251f2:	f6ff af71 	blt.w	80250d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80251f6:	f116 0c01 	adds.w	ip, r6, #1
 80251fa:	f53f af6d 	bmi.w	80250d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80251fe:	4567      	cmp	r7, ip
 8025200:	f6ff af6a 	blt.w	80250d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8025204:	b23f      	sxth	r7, r7
 8025206:	b212      	sxth	r2, r2
 8025208:	e9cd 3104 	strd	r3, r1, [sp, #16]
 802520c:	e9cd 0602 	strd	r0, r6, [sp, #8]
 8025210:	9200      	str	r2, [sp, #0]
 8025212:	9701      	str	r7, [sp, #4]
 8025214:	4623      	mov	r3, r4
 8025216:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 802521a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802521c:	f7ff fde6 	bl	8024dec <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 8025220:	e75a      	b.n	80250d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8025222:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8025224:	ea4f 462b 	mov.w	r6, fp, asr #16
 8025228:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 802522c:	1428      	asrs	r0, r5, #16
 802522e:	fb02 6000 	mla	r0, r2, r0, r6
 8025232:	9e08      	ldr	r6, [sp, #32]
 8025234:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8025238:	f816 8000 	ldrb.w	r8, [r6, r0]
 802523c:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8025240:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8025244:	1837      	adds	r7, r6, r0
 8025246:	eb04 0c08 	add.w	ip, r4, r8
 802524a:	2b00      	cmp	r3, #0
 802524c:	d060      	beq.n	8025310 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d0>
 802524e:	787e      	ldrb	r6, [r7, #1]
 8025250:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8025254:	4426      	add	r6, r4
 8025256:	2900      	cmp	r1, #0
 8025258:	d062      	beq.n	8025320 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e0>
 802525a:	18b8      	adds	r0, r7, r2
 802525c:	7840      	ldrb	r0, [r0, #1]
 802525e:	5cba      	ldrb	r2, [r7, r2]
 8025260:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025264:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025268:	4422      	add	r2, r4
 802526a:	4420      	add	r0, r4
 802526c:	b29b      	uxth	r3, r3
 802526e:	b289      	uxth	r1, r1
 8025270:	fb03 f901 	mul.w	r9, r3, r1
 8025274:	011b      	lsls	r3, r3, #4
 8025276:	78b7      	ldrb	r7, [r6, #2]
 8025278:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 802527c:	eba3 0309 	sub.w	r3, r3, r9
 8025280:	b29b      	uxth	r3, r3
 8025282:	435f      	muls	r7, r3
 8025284:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8025288:	b289      	uxth	r1, r1
 802528a:	f89c a002 	ldrb.w	sl, [ip, #2]
 802528e:	ebae 0e01 	sub.w	lr, lr, r1
 8025292:	fa1f fe8e 	uxth.w	lr, lr
 8025296:	fb0e 770a 	mla	r7, lr, sl, r7
 802529a:	f892 a002 	ldrb.w	sl, [r2, #2]
 802529e:	f89c c001 	ldrb.w	ip, [ip, #1]
 80252a2:	fb01 770a 	mla	r7, r1, sl, r7
 80252a6:	f890 a002 	ldrb.w	sl, [r0, #2]
 80252aa:	fb09 7a0a 	mla	sl, r9, sl, r7
 80252ae:	f814 7008 	ldrb.w	r7, [r4, r8]
 80252b2:	f896 8000 	ldrb.w	r8, [r6]
 80252b6:	7876      	ldrb	r6, [r6, #1]
 80252b8:	fb03 f808 	mul.w	r8, r3, r8
 80252bc:	fb0e 8807 	mla	r8, lr, r7, r8
 80252c0:	7817      	ldrb	r7, [r2, #0]
 80252c2:	4373      	muls	r3, r6
 80252c4:	fb01 8807 	mla	r8, r1, r7, r8
 80252c8:	7807      	ldrb	r7, [r0, #0]
 80252ca:	fb0e 330c 	mla	r3, lr, ip, r3
 80252ce:	fb09 8707 	mla	r7, r9, r7, r8
 80252d2:	7856      	ldrb	r6, [r2, #1]
 80252d4:	f40a 4a78 	and.w	sl, sl, #63488	@ 0xf800
 80252d8:	fb01 3306 	mla	r3, r1, r6, r3
 80252dc:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80252e0:	ea47 070a 	orr.w	r7, r7, sl
 80252e4:	f890 a001 	ldrb.w	sl, [r0, #1]
 80252e8:	fb09 3a0a 	mla	sl, r9, sl, r3
 80252ec:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80252f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80252f2:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 80252f6:	ea47 070a 	orr.w	r7, r7, sl
 80252fa:	f823 7b02 	strh.w	r7, [r3], #2
 80252fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025300:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8025302:	449b      	add	fp, r3
 8025304:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8025306:	441d      	add	r5, r3
 8025308:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802530a:	3b01      	subs	r3, #1
 802530c:	9309      	str	r3, [sp, #36]	@ 0x24
 802530e:	e714      	b.n	802513a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8025310:	b149      	cbz	r1, 8025326 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8025312:	4660      	mov	r0, ip
 8025314:	5cba      	ldrb	r2, [r7, r2]
 8025316:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802531a:	4422      	add	r2, r4
 802531c:	4666      	mov	r6, ip
 802531e:	e7a5      	b.n	802526c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8025320:	4660      	mov	r0, ip
 8025322:	4662      	mov	r2, ip
 8025324:	e7a2      	b.n	802526c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8025326:	4660      	mov	r0, ip
 8025328:	4662      	mov	r2, ip
 802532a:	e7f7      	b.n	802531c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3dc>
 802532c:	b00f      	add	sp, #60	@ 0x3c
 802532e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025332 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 8025332:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025336:	b085      	sub	sp, #20
 8025338:	f9bd c038 	ldrsh.w	ip, [sp, #56]	@ 0x38
 802533c:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	@ 0x40
 8025340:	9102      	str	r1, [sp, #8]
 8025342:	fb04 710c 	mla	r1, r4, ip, r7
 8025346:	2c00      	cmp	r4, #0
 8025348:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 802534c:	f89d 6048 	ldrb.w	r6, [sp, #72]	@ 0x48
 8025350:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 8025354:	eb02 0e01 	add.w	lr, r2, r1
 8025358:	f2c0 8122 	blt.w	80255a0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 802535c:	45a0      	cmp	r8, r4
 802535e:	f340 811f 	ble.w	80255a0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 8025362:	2f00      	cmp	r7, #0
 8025364:	f2c0 811a 	blt.w	802559c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 8025368:	45bc      	cmp	ip, r7
 802536a:	f340 8117 	ble.w	802559c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 802536e:	5c52      	ldrb	r2, [r2, r1]
 8025370:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8025374:	1c7a      	adds	r2, r7, #1
 8025376:	f100 8116 	bmi.w	80255a6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 802537a:	4594      	cmp	ip, r2
 802537c:	f340 8113 	ble.w	80255a6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 8025380:	2e00      	cmp	r6, #0
 8025382:	f000 8112 	beq.w	80255aa <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 8025386:	f89e 2001 	ldrb.w	r2, [lr, #1]
 802538a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802538e:	3401      	adds	r4, #1
 8025390:	f100 810f 	bmi.w	80255b2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 8025394:	45a0      	cmp	r8, r4
 8025396:	f340 810c 	ble.w	80255b2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 802539a:	2800      	cmp	r0, #0
 802539c:	f000 810c 	beq.w	80255b8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 80253a0:	2f00      	cmp	r7, #0
 80253a2:	f2c0 8104 	blt.w	80255ae <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 80253a6:	45bc      	cmp	ip, r7
 80253a8:	f340 8101 	ble.w	80255ae <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 80253ac:	f81e 200c 	ldrb.w	r2, [lr, ip]
 80253b0:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80253b4:	3701      	adds	r7, #1
 80253b6:	f100 8102 	bmi.w	80255be <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 80253ba:	45bc      	cmp	ip, r7
 80253bc:	f340 80ff 	ble.w	80255be <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 80253c0:	2e00      	cmp	r6, #0
 80253c2:	f000 80fe 	beq.w	80255c2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 80253c6:	44f4      	add	ip, lr
 80253c8:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80253cc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80253d0:	b2b6      	uxth	r6, r6
 80253d2:	b280      	uxth	r0, r0
 80253d4:	fb00 fe06 	mul.w	lr, r0, r6
 80253d8:	0136      	lsls	r6, r6, #4
 80253da:	eba6 070e 	sub.w	r7, r6, lr
 80253de:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 80253e2:	b2bf      	uxth	r7, r7
 80253e4:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 80253e8:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 80253ec:	fb0a f607 	mul.w	r6, sl, r7
 80253f0:	b280      	uxth	r0, r0
 80253f2:	1a1b      	subs	r3, r3, r0
 80253f4:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 80253f8:	b29b      	uxth	r3, r3
 80253fa:	fb0b 6603 	mla	r6, fp, r3, r6
 80253fe:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8025402:	fb00 6609 	mla	r6, r0, r9, r6
 8025406:	ea4f 6812 	mov.w	r8, r2, lsr #24
 802540a:	fb0e 6608 	mla	r6, lr, r8, r6
 802540e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8025412:	9600      	str	r6, [sp, #0]
 8025414:	2e00      	cmp	r6, #0
 8025416:	f000 80be 	beq.w	8025596 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 802541a:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802541e:	fb0b fc0c 	mul.w	ip, fp, ip
 8025422:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8025426:	fb0b f505 	mul.w	r5, fp, r5
 802542a:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 802542e:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 8025432:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8025436:	44dc      	add	ip, fp
 8025438:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802543c:	9501      	str	r5, [sp, #4]
 802543e:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
 8025442:	9503      	str	r5, [sp, #12]
 8025444:	9d01      	ldr	r5, [sp, #4]
 8025446:	9e02      	ldr	r6, [sp, #8]
 8025448:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 802544c:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8025450:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 8025454:	fb0a fc0c 	mul.w	ip, sl, ip
 8025458:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 802545c:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8025460:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8025464:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8025468:	4465      	add	r5, ip
 802546a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802546e:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 8025472:	fb09 fc0c 	mul.w	ip, r9, ip
 8025476:	fb09 f904 	mul.w	r9, r9, r4
 802547a:	f509 7480 	add.w	r4, r9, #256	@ 0x100
 802547e:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8025482:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
 8025486:	fb08 f404 	mul.w	r4, r8, r4
 802548a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802548e:	fb08 f802 	mul.w	r8, r8, r2
 8025492:	0a2d      	lsrs	r5, r5, #8
 8025494:	0a22      	lsrs	r2, r4, #8
 8025496:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 802549a:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802549e:	437d      	muls	r5, r7
 80254a0:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 80254a4:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 80254a8:	4414      	add	r4, r2
 80254aa:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 80254ae:	fb0a fa01 	mul.w	sl, sl, r1
 80254b2:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80254b6:	9a03      	ldr	r2, [sp, #12]
 80254b8:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
 80254bc:	fb02 5503 	mla	r5, r2, r3, r5
 80254c0:	0a24      	lsrs	r4, r4, #8
 80254c2:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 80254c6:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 80254ca:	ea4f 211c 	mov.w	r1, ip, lsr #8
 80254ce:	fb04 540e 	mla	r4, r4, lr, r5
 80254d2:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 80254d6:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80254da:	4461      	add	r1, ip
 80254dc:	0a09      	lsrs	r1, r1, #8
 80254de:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 80254e2:	fb01 4100 	mla	r1, r1, r0, r4
 80254e6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80254ea:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80254ee:	fb07 f70a 	mul.w	r7, r7, sl
 80254f2:	0a09      	lsrs	r1, r1, #8
 80254f4:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
 80254f8:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
 80254fc:	fb03 7101 	mla	r1, r3, r1, r7
 8025500:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8025504:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8025508:	fb0e 1e08 	mla	lr, lr, r8, r1
 802550c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025510:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 8025514:	fb00 e101 	mla	r1, r0, r1, lr
 8025518:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 802551c:	9a00      	ldr	r2, [sp, #0]
 802551e:	b287      	uxth	r7, r0
 8025520:	437a      	muls	r2, r7
 8025522:	1c53      	adds	r3, r2, #1
 8025524:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025528:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 802552c:	0a09      	lsrs	r1, r1, #8
 802552e:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8025532:	4321      	orrs	r1, r4
 8025534:	0c0a      	lsrs	r2, r1, #16
 8025536:	8836      	ldrh	r6, [r6, #0]
 8025538:	fb12 f207 	smulbb	r2, r2, r7
 802553c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8025540:	b2c8      	uxtb	r0, r1
 8025542:	1235      	asrs	r5, r6, #8
 8025544:	fb14 f407 	smulbb	r4, r4, r7
 8025548:	fb10 f007 	smulbb	r0, r0, r7
 802554c:	b2db      	uxtb	r3, r3
 802554e:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8025552:	fb05 2503 	mla	r5, r5, r3, r2
 8025556:	10f2      	asrs	r2, r6, #3
 8025558:	00f6      	lsls	r6, r6, #3
 802555a:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 802555e:	b2f6      	uxtb	r6, r6
 8025560:	fb02 4203 	mla	r2, r2, r3, r4
 8025564:	fb06 0303 	mla	r3, r6, r3, r0
 8025568:	b2ad      	uxth	r5, r5
 802556a:	b299      	uxth	r1, r3
 802556c:	b294      	uxth	r4, r2
 802556e:	1c6b      	adds	r3, r5, #1
 8025570:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8025574:	1c62      	adds	r2, r4, #1
 8025576:	1c4b      	adds	r3, r1, #1
 8025578:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802557c:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8025580:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8025584:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8025588:	0952      	lsrs	r2, r2, #5
 802558a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802558e:	432b      	orrs	r3, r5
 8025590:	4313      	orrs	r3, r2
 8025592:	9a02      	ldr	r2, [sp, #8]
 8025594:	8013      	strh	r3, [r2, #0]
 8025596:	b005      	add	sp, #20
 8025598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802559c:	2500      	movs	r5, #0
 802559e:	e6e9      	b.n	8025374 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 80255a0:	2100      	movs	r1, #0
 80255a2:	460d      	mov	r5, r1
 80255a4:	e6f3      	b.n	802538e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 80255a6:	2100      	movs	r1, #0
 80255a8:	e6f1      	b.n	802538e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 80255aa:	4631      	mov	r1, r6
 80255ac:	e6ef      	b.n	802538e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 80255ae:	2400      	movs	r4, #0
 80255b0:	e700      	b.n	80253b4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 80255b2:	2200      	movs	r2, #0
 80255b4:	4614      	mov	r4, r2
 80255b6:	e70b      	b.n	80253d0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 80255b8:	4602      	mov	r2, r0
 80255ba:	4604      	mov	r4, r0
 80255bc:	e708      	b.n	80253d0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 80255be:	2200      	movs	r2, #0
 80255c0:	e706      	b.n	80253d0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 80255c2:	4632      	mov	r2, r6
 80255c4:	e704      	b.n	80253d0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

080255c6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80255c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80255ca:	b09f      	sub	sp, #124	@ 0x7c
 80255cc:	921b      	str	r2, [sp, #108]	@ 0x6c
 80255ce:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 80255d0:	901d      	str	r0, [sp, #116]	@ 0x74
 80255d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80255d4:	6850      	ldr	r0, [r2, #4]
 80255d6:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 80255da:	9119      	str	r1, [sp, #100]	@ 0x64
 80255dc:	931c      	str	r3, [sp, #112]	@ 0x70
 80255de:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 80255e2:	fb00 1303 	mla	r3, r0, r3, r1
 80255e6:	6812      	ldr	r2, [r2, #0]
 80255e8:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 80255ea:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80255ee:	930c      	str	r3, [sp, #48]	@ 0x30
 80255f0:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80255f2:	681b      	ldr	r3, [r3, #0]
 80255f4:	9312      	str	r3, [sp, #72]	@ 0x48
 80255f6:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80255f8:	685e      	ldr	r6, [r3, #4]
 80255fa:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 80255fe:	3604      	adds	r6, #4
 8025600:	930d      	str	r3, [sp, #52]	@ 0x34
 8025602:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8025604:	2b00      	cmp	r3, #0
 8025606:	dc03      	bgt.n	8025610 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8025608:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802560a:	2b00      	cmp	r3, #0
 802560c:	f340 8387 	ble.w	8025d1e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 8025610:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8025612:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025616:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802561a:	1e48      	subs	r0, r1, #1
 802561c:	1e57      	subs	r7, r2, #1
 802561e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025620:	2b00      	cmp	r3, #0
 8025622:	f340 8194 	ble.w	802594e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 8025626:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8025628:	142b      	asrs	r3, r5, #16
 802562a:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802562e:	d406      	bmi.n	802563e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8025630:	4584      	cmp	ip, r0
 8025632:	da04      	bge.n	802563e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8025634:	2b00      	cmp	r3, #0
 8025636:	db02      	blt.n	802563e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8025638:	42bb      	cmp	r3, r7
 802563a:	f2c0 8189 	blt.w	8025950 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 802563e:	f11c 0c01 	adds.w	ip, ip, #1
 8025642:	f100 8177 	bmi.w	8025934 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8025646:	4561      	cmp	r1, ip
 8025648:	f2c0 8174 	blt.w	8025934 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802564c:	3301      	adds	r3, #1
 802564e:	f100 8171 	bmi.w	8025934 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8025652:	429a      	cmp	r2, r3
 8025654:	f2c0 816e 	blt.w	8025934 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8025658:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802565a:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 802565c:	931a      	str	r3, [sp, #104]	@ 0x68
 802565e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8025660:	2b00      	cmp	r3, #0
 8025662:	f340 8193 	ble.w	802598c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8025666:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8025668:	ea4f 4c25 	mov.w	ip, r5, asr #16
 802566c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025670:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8025672:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8025676:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 802567a:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 802567c:	141b      	asrs	r3, r3, #16
 802567e:	f100 81d6 	bmi.w	8025a2e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8025682:	f100 38ff 	add.w	r8, r0, #4294967295
 8025686:	4543      	cmp	r3, r8
 8025688:	f280 81d1 	bge.w	8025a2e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 802568c:	f1bc 0f00 	cmp.w	ip, #0
 8025690:	f2c0 81cd 	blt.w	8025a2e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8025694:	f10e 38ff 	add.w	r8, lr, #4294967295
 8025698:	45c4      	cmp	ip, r8
 802569a:	f280 81c8 	bge.w	8025a2e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 802569e:	b200      	sxth	r0, r0
 80256a0:	fb0c 3300 	mla	r3, ip, r0, r3
 80256a4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80256a6:	eb04 0803 	add.w	r8, r4, r3
 80256aa:	5ce3      	ldrb	r3, [r4, r3]
 80256ac:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80256b0:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80256b4:	2a00      	cmp	r2, #0
 80256b6:	f000 81af 	beq.w	8025a18 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80256ba:	f898 c001 	ldrb.w	ip, [r8, #1]
 80256be:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80256c2:	940e      	str	r4, [sp, #56]	@ 0x38
 80256c4:	0e24      	lsrs	r4, r4, #24
 80256c6:	9415      	str	r4, [sp, #84]	@ 0x54
 80256c8:	b179      	cbz	r1, 80256ea <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 80256ca:	eb08 0c00 	add.w	ip, r8, r0
 80256ce:	f818 0000 	ldrb.w	r0, [r8, r0]
 80256d2:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80256d6:	900a      	str	r0, [sp, #40]	@ 0x28
 80256d8:	0e00      	lsrs	r0, r0, #24
 80256da:	9013      	str	r0, [sp, #76]	@ 0x4c
 80256dc:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80256e0:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80256e4:	900f      	str	r0, [sp, #60]	@ 0x3c
 80256e6:	0e00      	lsrs	r0, r0, #24
 80256e8:	9016      	str	r0, [sp, #88]	@ 0x58
 80256ea:	b292      	uxth	r2, r2
 80256ec:	b289      	uxth	r1, r1
 80256ee:	fb02 f901 	mul.w	r9, r2, r1
 80256f2:	0112      	lsls	r2, r2, #4
 80256f4:	eba2 0809 	sub.w	r8, r2, r9
 80256f8:	9815      	ldr	r0, [sp, #84]	@ 0x54
 80256fa:	fa1f f888 	uxth.w	r8, r8
 80256fe:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8025702:	fb08 f000 	mul.w	r0, r8, r0
 8025706:	b289      	uxth	r1, r1
 8025708:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 802570c:	1a52      	subs	r2, r2, r1
 802570e:	b292      	uxth	r2, r2
 8025710:	fb02 000e 	mla	r0, r2, lr, r0
 8025714:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8025716:	fb01 0004 	mla	r0, r1, r4, r0
 802571a:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 802571c:	fb09 0004 	mla	r0, r9, r4, r0
 8025720:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8025724:	2800      	cmp	r0, #0
 8025726:	f000 80fa 	beq.w	802591e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802572a:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 802572e:	d01b      	beq.n	8025768 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8025730:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8025734:	fb0e fa0a 	mul.w	sl, lr, sl
 8025738:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802573c:	fb0e fe03 	mul.w	lr, lr, r3
 8025740:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8025744:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025748:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802574c:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8025750:	4453      	add	r3, sl
 8025752:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8025756:	0a1b      	lsrs	r3, r3, #8
 8025758:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802575c:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025760:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8025764:	ea43 030c 	orr.w	r3, r3, ip
 8025768:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 802576a:	2cff      	cmp	r4, #255	@ 0xff
 802576c:	d021      	beq.n	80257b2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 802576e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8025770:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8025774:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8025776:	fb04 fb0b 	mul.w	fp, r4, fp
 802577a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802577c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025780:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025784:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8025786:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802578a:	fb04 fa0a 	mul.w	sl, r4, sl
 802578e:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8025792:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8025796:	44de      	add	lr, fp
 8025798:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802579c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80257a0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80257a4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80257a8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80257ac:	ea4e 040a 	orr.w	r4, lr, sl
 80257b0:	940e      	str	r4, [sp, #56]	@ 0x38
 80257b2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80257b4:	2cff      	cmp	r4, #255	@ 0xff
 80257b6:	d021      	beq.n	80257fc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 80257b8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80257ba:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80257be:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80257c0:	fb04 fb0b 	mul.w	fp, r4, fp
 80257c4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80257c6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80257ca:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80257ce:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80257d0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80257d4:	fb04 fa0a 	mul.w	sl, r4, sl
 80257d8:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80257dc:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80257e0:	44de      	add	lr, fp
 80257e2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80257e6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80257ea:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80257ee:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80257f2:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80257f6:	ea4e 040a 	orr.w	r4, lr, sl
 80257fa:	940a      	str	r4, [sp, #40]	@ 0x28
 80257fc:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80257fe:	2cff      	cmp	r4, #255	@ 0xff
 8025800:	d021      	beq.n	8025846 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 8025802:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8025804:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8025808:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 802580a:	fb04 fb0b 	mul.w	fp, r4, fp
 802580e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8025810:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025814:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025818:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 802581a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802581e:	fb04 fa0a 	mul.w	sl, r4, sl
 8025822:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8025826:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802582a:	44de      	add	lr, fp
 802582c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025830:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025834:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025838:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802583c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025840:	ea4e 040a 	orr.w	r4, lr, sl
 8025844:	940f      	str	r4, [sp, #60]	@ 0x3c
 8025846:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8025848:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 802584c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8025850:	fb08 fc0c 	mul.w	ip, r8, ip
 8025854:	fb02 cc0e 	mla	ip, r2, lr, ip
 8025858:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802585a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802585e:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8025862:	fb01 cc0e 	mla	ip, r1, lr, ip
 8025866:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8025868:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 802586c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802586e:	fb09 cc0e 	mla	ip, r9, lr, ip
 8025872:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8025876:	fb08 f80e 	mul.w	r8, r8, lr
 802587a:	fb02 8303 	mla	r3, r2, r3, r8
 802587e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025880:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025884:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8025888:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802588a:	fb01 330a 	mla	r3, r1, sl, r3
 802588e:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 8025892:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025894:	fb09 3901 	mla	r9, r9, r1, r3
 8025898:	4342      	muls	r2, r0
 802589a:	1c50      	adds	r0, r2, #1
 802589c:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80258a0:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80258a4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80258a8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80258ac:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 80258b0:	ea4c 0c09 	orr.w	ip, ip, r9
 80258b4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80258b6:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80258ba:	883b      	ldrh	r3, [r7, #0]
 80258bc:	fb12 f204 	smulbb	r2, r2, r4
 80258c0:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 80258c4:	fa5f fc8c 	uxtb.w	ip, ip
 80258c8:	1219      	asrs	r1, r3, #8
 80258ca:	fb1c fc04 	smulbb	ip, ip, r4
 80258ce:	b2c0      	uxtb	r0, r0
 80258d0:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80258d4:	fb01 2100 	mla	r1, r1, r0, r2
 80258d8:	10da      	asrs	r2, r3, #3
 80258da:	00db      	lsls	r3, r3, #3
 80258dc:	fb1e fe04 	smulbb	lr, lr, r4
 80258e0:	b2db      	uxtb	r3, r3
 80258e2:	fb03 c300 	mla	r3, r3, r0, ip
 80258e6:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 80258ea:	b289      	uxth	r1, r1
 80258ec:	fb02 e200 	mla	r2, r2, r0, lr
 80258f0:	fa1f fc83 	uxth.w	ip, r3
 80258f4:	1c4b      	adds	r3, r1, #1
 80258f6:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80258fa:	f10c 0301 	add.w	r3, ip, #1
 80258fe:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8025902:	b292      	uxth	r2, r2
 8025904:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 8025908:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802590c:	430b      	orrs	r3, r1
 802590e:	1c51      	adds	r1, r2, #1
 8025910:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8025914:	0952      	lsrs	r2, r2, #5
 8025916:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802591a:	4313      	orrs	r3, r2
 802591c:	803b      	strh	r3, [r7, #0]
 802591e:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8025920:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8025922:	3702      	adds	r7, #2
 8025924:	441a      	add	r2, r3
 8025926:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025928:	9229      	str	r2, [sp, #164]	@ 0xa4
 802592a:	441d      	add	r5, r3
 802592c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 802592e:	3b01      	subs	r3, #1
 8025930:	931a      	str	r3, [sp, #104]	@ 0x68
 8025932:	e694      	b.n	802565e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8025934:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8025936:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8025938:	441c      	add	r4, r3
 802593a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802593c:	9429      	str	r4, [sp, #164]	@ 0xa4
 802593e:	441d      	add	r5, r3
 8025940:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025942:	3b01      	subs	r3, #1
 8025944:	9309      	str	r3, [sp, #36]	@ 0x24
 8025946:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025948:	3302      	adds	r3, #2
 802594a:	930c      	str	r3, [sp, #48]	@ 0x30
 802594c:	e667      	b.n	802561e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802594e:	d024      	beq.n	802599a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 8025950:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025952:	982b      	ldr	r0, [sp, #172]	@ 0xac
 8025954:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8025956:	3b01      	subs	r3, #1
 8025958:	fb00 4003 	mla	r0, r0, r3, r4
 802595c:	1400      	asrs	r0, r0, #16
 802595e:	f53f ae7b 	bmi.w	8025658 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025962:	3901      	subs	r1, #1
 8025964:	4288      	cmp	r0, r1
 8025966:	f6bf ae77 	bge.w	8025658 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802596a:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 802596c:	fb01 5303 	mla	r3, r1, r3, r5
 8025970:	141b      	asrs	r3, r3, #16
 8025972:	f53f ae71 	bmi.w	8025658 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025976:	3a01      	subs	r2, #1
 8025978:	4293      	cmp	r3, r2
 802597a:	f6bf ae6d 	bge.w	8025658 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802597e:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8025982:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 8025986:	f1bb 0f00 	cmp.w	fp, #0
 802598a:	dc70      	bgt.n	8025a6e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 802598c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802598e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025992:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025994:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8025998:	930c      	str	r3, [sp, #48]	@ 0x30
 802599a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802599c:	2b00      	cmp	r3, #0
 802599e:	f340 81be 	ble.w	8025d1e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 80259a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80259a6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80259aa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80259ae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80259b2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80259b6:	eef0 6a62 	vmov.f32	s13, s5
 80259ba:	ee31 1a05 	vadd.f32	s2, s2, s10
 80259be:	ee77 2a62 	vsub.f32	s5, s14, s5
 80259c2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80259c6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80259ca:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80259ce:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 80259d2:	eef0 6a43 	vmov.f32	s13, s6
 80259d6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80259da:	ee12 2a90 	vmov	r2, s5
 80259de:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80259e2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80259e4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80259e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80259ec:	ee13 2a10 	vmov	r2, s6
 80259f0:	932b      	str	r3, [sp, #172]	@ 0xac
 80259f2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80259f4:	ee16 5a90 	vmov	r5, s13
 80259f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80259fc:	932c      	str	r3, [sp, #176]	@ 0xb0
 80259fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8025a00:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8025a02:	3b01      	subs	r3, #1
 8025a04:	9319      	str	r3, [sp, #100]	@ 0x64
 8025a06:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8025a08:	bf08      	it	eq
 8025a0a:	4613      	moveq	r3, r2
 8025a0c:	eeb0 3a67 	vmov.f32	s6, s15
 8025a10:	9309      	str	r3, [sp, #36]	@ 0x24
 8025a12:	eef0 2a47 	vmov.f32	s5, s14
 8025a16:	e5f4      	b.n	8025602 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8025a18:	2900      	cmp	r1, #0
 8025a1a:	f43f ae66 	beq.w	80256ea <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8025a1e:	f818 0000 	ldrb.w	r0, [r8, r0]
 8025a22:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8025a26:	900a      	str	r0, [sp, #40]	@ 0x28
 8025a28:	0e00      	lsrs	r0, r0, #24
 8025a2a:	9013      	str	r0, [sp, #76]	@ 0x4c
 8025a2c:	e65d      	b.n	80256ea <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8025a2e:	f113 0801 	adds.w	r8, r3, #1
 8025a32:	f53f af74 	bmi.w	802591e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8025a36:	4540      	cmp	r0, r8
 8025a38:	f6ff af71 	blt.w	802591e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8025a3c:	f11c 0801 	adds.w	r8, ip, #1
 8025a40:	f53f af6d 	bmi.w	802591e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8025a44:	45c6      	cmp	lr, r8
 8025a46:	f6ff af6a 	blt.w	802591e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8025a4a:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8025a4c:	9302      	str	r3, [sp, #8]
 8025a4e:	b200      	sxth	r0, r0
 8025a50:	fa0f f38e 	sxth.w	r3, lr
 8025a54:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8025a58:	e9cd c203 	strd	ip, r2, [sp, #12]
 8025a5c:	9301      	str	r3, [sp, #4]
 8025a5e:	9000      	str	r0, [sp, #0]
 8025a60:	4633      	mov	r3, r6
 8025a62:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8025a64:	4639      	mov	r1, r7
 8025a66:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8025a68:	f7ff fc63 	bl	8025332 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 8025a6c:	e757      	b.n	802591e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8025a6e:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8025a70:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8025a72:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025a76:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8025a78:	1427      	asrs	r7, r4, #16
 8025a7a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025a7e:	142b      	asrs	r3, r5, #16
 8025a80:	fb01 7303 	mla	r3, r1, r3, r7
 8025a84:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8025a86:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8025a8a:	18e7      	adds	r7, r4, r3
 8025a8c:	5ce3      	ldrb	r3, [r4, r3]
 8025a8e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025a92:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8025a96:	2a00      	cmp	r2, #0
 8025a98:	f000 8137 	beq.w	8025d0a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 8025a9c:	f897 e001 	ldrb.w	lr, [r7, #1]
 8025aa0:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8025aa4:	9410      	str	r4, [sp, #64]	@ 0x40
 8025aa6:	0e24      	lsrs	r4, r4, #24
 8025aa8:	9417      	str	r4, [sp, #92]	@ 0x5c
 8025aaa:	b170      	cbz	r0, 8025aca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8025aac:	eb07 0e01 	add.w	lr, r7, r1
 8025ab0:	5c79      	ldrb	r1, [r7, r1]
 8025ab2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025ab6:	910b      	str	r1, [sp, #44]	@ 0x2c
 8025ab8:	0e09      	lsrs	r1, r1, #24
 8025aba:	9114      	str	r1, [sp, #80]	@ 0x50
 8025abc:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8025ac0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025ac4:	9111      	str	r1, [sp, #68]	@ 0x44
 8025ac6:	0e09      	lsrs	r1, r1, #24
 8025ac8:	9118      	str	r1, [sp, #96]	@ 0x60
 8025aca:	b292      	uxth	r2, r2
 8025acc:	b280      	uxth	r0, r0
 8025ace:	fb02 f800 	mul.w	r8, r2, r0
 8025ad2:	0112      	lsls	r2, r2, #4
 8025ad4:	eba2 0e08 	sub.w	lr, r2, r8
 8025ad8:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8025ada:	fa1f fe8e 	uxth.w	lr, lr
 8025ade:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8025ae2:	fb0e f101 	mul.w	r1, lr, r1
 8025ae6:	b280      	uxth	r0, r0
 8025ae8:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8025aec:	1a12      	subs	r2, r2, r0
 8025aee:	b292      	uxth	r2, r2
 8025af0:	fb02 110c 	mla	r1, r2, ip, r1
 8025af4:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025af6:	fb00 1104 	mla	r1, r0, r4, r1
 8025afa:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8025afc:	fb08 1104 	mla	r1, r8, r4, r1
 8025b00:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8025b04:	2900      	cmp	r1, #0
 8025b06:	f000 80f5 	beq.w	8025cf4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 8025b0a:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8025b0e:	d019      	beq.n	8025b44 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 8025b10:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8025b14:	fb0c fa0a 	mul.w	sl, ip, sl
 8025b18:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8025b1c:	fb0c fc03 	mul.w	ip, ip, r3
 8025b20:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8025b24:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025b28:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8025b2c:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8025b30:	4453      	add	r3, sl
 8025b32:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8025b36:	0a1b      	lsrs	r3, r3, #8
 8025b38:	0a3f      	lsrs	r7, r7, #8
 8025b3a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025b3e:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8025b42:	433b      	orrs	r3, r7
 8025b44:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8025b46:	2cff      	cmp	r4, #255	@ 0xff
 8025b48:	d020      	beq.n	8025b8c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 8025b4a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8025b4c:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8025b50:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8025b52:	4367      	muls	r7, r4
 8025b54:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8025b56:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025b5a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025b5e:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8025b60:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8025b64:	fb04 fa0a 	mul.w	sl, r4, sl
 8025b68:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025b6c:	44bc      	add	ip, r7
 8025b6e:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8025b72:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025b76:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025b7a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025b7e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025b82:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025b86:	ea4c 040a 	orr.w	r4, ip, sl
 8025b8a:	9410      	str	r4, [sp, #64]	@ 0x40
 8025b8c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025b8e:	2cff      	cmp	r4, #255	@ 0xff
 8025b90:	d020      	beq.n	8025bd4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 8025b92:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025b94:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8025b98:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025b9a:	4367      	muls	r7, r4
 8025b9c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025b9e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025ba2:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025ba6:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025ba8:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8025bac:	fb04 fa0a 	mul.w	sl, r4, sl
 8025bb0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025bb4:	44bc      	add	ip, r7
 8025bb6:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8025bba:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025bbe:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025bc2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025bc6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025bca:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025bce:	ea4c 040a 	orr.w	r4, ip, sl
 8025bd2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8025bd4:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8025bd6:	2cff      	cmp	r4, #255	@ 0xff
 8025bd8:	d020      	beq.n	8025c1c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 8025bda:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8025bdc:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8025be0:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8025be2:	4367      	muls	r7, r4
 8025be4:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8025be6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025bea:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025bee:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8025bf0:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8025bf4:	fb04 fa0a 	mul.w	sl, r4, sl
 8025bf8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025bfc:	44bc      	add	ip, r7
 8025bfe:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8025c02:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025c06:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025c0a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025c0e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025c12:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025c16:	ea4c 040a 	orr.w	r4, ip, sl
 8025c1a:	9411      	str	r4, [sp, #68]	@ 0x44
 8025c1c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8025c1e:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8025c22:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8025c26:	fb0e f707 	mul.w	r7, lr, r7
 8025c2a:	fb02 770c 	mla	r7, r2, ip, r7
 8025c2e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025c30:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8025c34:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8025c38:	fb00 770c 	mla	r7, r0, ip, r7
 8025c3c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8025c3e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8025c42:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8025c44:	fb08 770c 	mla	r7, r8, ip, r7
 8025c48:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 8025c4c:	fb0e fe0c 	mul.w	lr, lr, ip
 8025c50:	fb02 e303 	mla	r3, r2, r3, lr
 8025c54:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8025c56:	0a3f      	lsrs	r7, r7, #8
 8025c58:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8025c5c:	fb00 330a 	mla	r3, r0, sl, r3
 8025c60:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8025c62:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8025c66:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 8025c6a:	fb08 3c0c 	mla	ip, r8, ip, r3
 8025c6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025c70:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025c74:	434b      	muls	r3, r1
 8025c76:	1c59      	adds	r1, r3, #1
 8025c78:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8025c7c:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8025c80:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8025c84:	ea47 070c 	orr.w	r7, r7, ip
 8025c88:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8025c8a:	0c3b      	lsrs	r3, r7, #16
 8025c8c:	f8b9 0000 	ldrh.w	r0, [r9]
 8025c90:	fb13 f304 	smulbb	r3, r3, r4
 8025c94:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8025c98:	b2ff      	uxtb	r7, r7
 8025c9a:	1202      	asrs	r2, r0, #8
 8025c9c:	fb17 f704 	smulbb	r7, r7, r4
 8025ca0:	b2c9      	uxtb	r1, r1
 8025ca2:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8025ca6:	fb02 3201 	mla	r2, r2, r1, r3
 8025caa:	10c3      	asrs	r3, r0, #3
 8025cac:	00c0      	lsls	r0, r0, #3
 8025cae:	fb1c fc04 	smulbb	ip, ip, r4
 8025cb2:	b2c0      	uxtb	r0, r0
 8025cb4:	fb00 7001 	mla	r0, r0, r1, r7
 8025cb8:	b292      	uxth	r2, r2
 8025cba:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8025cbe:	fb03 c301 	mla	r3, r3, r1, ip
 8025cc2:	f102 0c01 	add.w	ip, r2, #1
 8025cc6:	b280      	uxth	r0, r0
 8025cc8:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8025ccc:	f402 4c78 	and.w	ip, r2, #63488	@ 0xf800
 8025cd0:	1c42      	adds	r2, r0, #1
 8025cd2:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8025cd6:	b29b      	uxth	r3, r3
 8025cd8:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8025cdc:	ea42 020c 	orr.w	r2, r2, ip
 8025ce0:	f103 0c01 	add.w	ip, r3, #1
 8025ce4:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8025ce8:	095b      	lsrs	r3, r3, #5
 8025cea:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8025cee:	431a      	orrs	r2, r3
 8025cf0:	f8a9 2000 	strh.w	r2, [r9]
 8025cf4:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8025cf6:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8025cf8:	f109 0902 	add.w	r9, r9, #2
 8025cfc:	441a      	add	r2, r3
 8025cfe:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025d00:	9229      	str	r2, [sp, #164]	@ 0xa4
 8025d02:	441d      	add	r5, r3
 8025d04:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025d08:	e63d      	b.n	8025986 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8025d0a:	2800      	cmp	r0, #0
 8025d0c:	f43f aedd 	beq.w	8025aca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8025d10:	5c79      	ldrb	r1, [r7, r1]
 8025d12:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025d16:	910b      	str	r1, [sp, #44]	@ 0x2c
 8025d18:	0e09      	lsrs	r1, r1, #24
 8025d1a:	9114      	str	r1, [sp, #80]	@ 0x50
 8025d1c:	e6d5      	b.n	8025aca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8025d1e:	b01f      	add	sp, #124	@ 0x7c
 8025d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025d24 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8025d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025d28:	b089      	sub	sp, #36	@ 0x24
 8025d2a:	9101      	str	r1, [sp, #4]
 8025d2c:	9801      	ldr	r0, [sp, #4]
 8025d2e:	f9bd c048 	ldrsh.w	ip, [sp, #72]	@ 0x48
 8025d32:	8800      	ldrh	r0, [r0, #0]
 8025d34:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	@ 0x50
 8025d38:	1206      	asrs	r6, r0, #8
 8025d3a:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8025d3e:	9602      	str	r6, [sp, #8]
 8025d40:	10c6      	asrs	r6, r0, #3
 8025d42:	00c0      	lsls	r0, r0, #3
 8025d44:	b2c0      	uxtb	r0, r0
 8025d46:	9004      	str	r0, [sp, #16]
 8025d48:	fb07 100c 	mla	r0, r7, ip, r1
 8025d4c:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8025d50:	2f00      	cmp	r7, #0
 8025d52:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	@ 0x4c
 8025d56:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8025d5a:	f89d 405c 	ldrb.w	r4, [sp, #92]	@ 0x5c
 8025d5e:	9603      	str	r6, [sp, #12]
 8025d60:	eb02 0e00 	add.w	lr, r2, r0
 8025d64:	f2c0 810a 	blt.w	8025f7c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8025d68:	45b8      	cmp	r8, r7
 8025d6a:	f340 8107 	ble.w	8025f7c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8025d6e:	2900      	cmp	r1, #0
 8025d70:	f2c0 8102 	blt.w	8025f78 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8025d74:	458c      	cmp	ip, r1
 8025d76:	f340 80ff 	ble.w	8025f78 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8025d7a:	5c12      	ldrb	r2, [r2, r0]
 8025d7c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8025d80:	1c4a      	adds	r2, r1, #1
 8025d82:	f100 80fe 	bmi.w	8025f82 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8025d86:	4594      	cmp	ip, r2
 8025d88:	f340 80fb 	ble.w	8025f82 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8025d8c:	2d00      	cmp	r5, #0
 8025d8e:	f000 80fa 	beq.w	8025f86 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 8025d92:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8025d96:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8025d9a:	3701      	adds	r7, #1
 8025d9c:	f100 80f7 	bmi.w	8025f8e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8025da0:	45b8      	cmp	r8, r7
 8025da2:	f340 80f4 	ble.w	8025f8e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8025da6:	2c00      	cmp	r4, #0
 8025da8:	f000 80f4 	beq.w	8025f94 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 8025dac:	2900      	cmp	r1, #0
 8025dae:	eb0e 020c 	add.w	r2, lr, ip
 8025db2:	f2c0 80ea 	blt.w	8025f8a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8025db6:	458c      	cmp	ip, r1
 8025db8:	f340 80e7 	ble.w	8025f8a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8025dbc:	f81e 700c 	ldrb.w	r7, [lr, ip]
 8025dc0:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8025dc4:	3101      	adds	r1, #1
 8025dc6:	f100 80e8 	bmi.w	8025f9a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8025dca:	458c      	cmp	ip, r1
 8025dcc:	f340 80e5 	ble.w	8025f9a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8025dd0:	2d00      	cmp	r5, #0
 8025dd2:	f000 80e4 	beq.w	8025f9e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 8025dd6:	7852      	ldrb	r2, [r2, #1]
 8025dd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8025ddc:	0e0b      	lsrs	r3, r1, #24
 8025dde:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8025de2:	9300      	str	r3, [sp, #0]
 8025de4:	b2a4      	uxth	r4, r4
 8025de6:	b2ab      	uxth	r3, r5
 8025de8:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 8025dec:	fb03 f904 	mul.w	r9, r3, r4
 8025df0:	fb0a f505 	mul.w	r5, sl, r5
 8025df4:	011b      	lsls	r3, r3, #4
 8025df6:	eba3 0e09 	sub.w	lr, r3, r9
 8025dfa:	f5c3 7280 	rsb	r2, r3, #256	@ 0x100
 8025dfe:	f400 437f 	and.w	r3, r0, #65280	@ 0xff00
 8025e02:	0a28      	lsrs	r0, r5, #8
 8025e04:	fb0a f303 	mul.w	r3, sl, r3
 8025e08:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8025e0c:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 8025e10:	4405      	add	r5, r0
 8025e12:	0a2d      	lsrs	r5, r5, #8
 8025e14:	f005 10ff 	and.w	r0, r5, #16711935	@ 0xff00ff
 8025e18:	9005      	str	r0, [sp, #20]
 8025e1a:	f503 7080 	add.w	r0, r3, #256	@ 0x100
 8025e1e:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8025e22:	0a1b      	lsrs	r3, r3, #8
 8025e24:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8025e28:	9306      	str	r3, [sp, #24]
 8025e2a:	f006 13ff 	and.w	r3, r6, #16711935	@ 0xff00ff
 8025e2e:	fb0b f303 	mul.w	r3, fp, r3
 8025e32:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8025e36:	ea4f 6817 	mov.w	r8, r7, lsr #24
 8025e3a:	fb0b f606 	mul.w	r6, fp, r6
 8025e3e:	f007 1cff 	and.w	ip, r7, #16711935	@ 0xff00ff
 8025e42:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8025e46:	fb08 f707 	mul.w	r7, r8, r7
 8025e4a:	0a1d      	lsrs	r5, r3, #8
 8025e4c:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8025e50:	f103 1301 	add.w	r3, r3, #65537	@ 0x10001
 8025e54:	441d      	add	r5, r3
 8025e56:	f506 7380 	add.w	r3, r6, #256	@ 0x100
 8025e5a:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8025e5e:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8025e62:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8025e66:	fb08 fc0c 	mul.w	ip, r8, ip
 8025e6a:	0a1b      	lsrs	r3, r3, #8
 8025e6c:	9307      	str	r3, [sp, #28]
 8025e6e:	f001 17ff 	and.w	r7, r1, #16711935	@ 0xff00ff
 8025e72:	0e0b      	lsrs	r3, r1, #24
 8025e74:	0a2d      	lsrs	r5, r5, #8
 8025e76:	fa1f fe8e 	uxth.w	lr, lr
 8025e7a:	435f      	muls	r7, r3
 8025e7c:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8025e80:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 8025e84:	fb05 f50e 	mul.w	r5, r5, lr
 8025e88:	b2a4      	uxth	r4, r4
 8025e8a:	ea4f 201c 	mov.w	r0, ip, lsr #8
 8025e8e:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8025e92:	4359      	muls	r1, r3
 8025e94:	1b12      	subs	r2, r2, r4
 8025e96:	9b05      	ldr	r3, [sp, #20]
 8025e98:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8025e9c:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8025ea0:	b292      	uxth	r2, r2
 8025ea2:	4460      	add	r0, ip
 8025ea4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025ea8:	fb03 5502 	mla	r5, r3, r2, r5
 8025eac:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8025eb0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025eb4:	44bc      	add	ip, r7
 8025eb6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025eba:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025ebe:	0a36      	lsrs	r6, r6, #8
 8025ec0:	fb0c 5509 	mla	r5, ip, r9, r5
 8025ec4:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8025ec8:	fb0e f606 	mul.w	r6, lr, r6
 8025ecc:	9b06      	ldr	r3, [sp, #24]
 8025ece:	0a00      	lsrs	r0, r0, #8
 8025ed0:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8025ed4:	fb00 5504 	mla	r5, r0, r4, r5
 8025ed8:	f403 407f 	and.w	r0, r3, #65280	@ 0xff00
 8025edc:	fb02 6000 	mla	r0, r2, r0, r6
 8025ee0:	f501 7780 	add.w	r7, r1, #256	@ 0x100
 8025ee4:	fb0e fe0b 	mul.w	lr, lr, fp
 8025ee8:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8025eec:	0a09      	lsrs	r1, r1, #8
 8025eee:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8025ef2:	fb09 0001 	mla	r0, r9, r1, r0
 8025ef6:	fb02 e20a 	mla	r2, r2, sl, lr
 8025efa:	9b07      	ldr	r3, [sp, #28]
 8025efc:	0a2d      	lsrs	r5, r5, #8
 8025efe:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8025f02:	fb04 0003 	mla	r0, r4, r3, r0
 8025f06:	fb04 2408 	mla	r4, r4, r8, r2
 8025f0a:	9b00      	ldr	r3, [sp, #0]
 8025f0c:	9a04      	ldr	r2, [sp, #16]
 8025f0e:	fb09 4903 	mla	r9, r9, r3, r4
 8025f12:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8025f16:	9b02      	ldr	r3, [sp, #8]
 8025f18:	fa5f f989 	uxtb.w	r9, r9
 8025f1c:	fb03 f109 	mul.w	r1, r3, r9
 8025f20:	9b03      	ldr	r3, [sp, #12]
 8025f22:	0a00      	lsrs	r0, r0, #8
 8025f24:	fb03 f309 	mul.w	r3, r3, r9
 8025f28:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8025f2c:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8025f30:	4305      	orrs	r5, r0
 8025f32:	fb02 f909 	mul.w	r9, r2, r9
 8025f36:	1c58      	adds	r0, r3, #1
 8025f38:	1c4a      	adds	r2, r1, #1
 8025f3a:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8025f3e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8025f42:	0a2b      	lsrs	r3, r5, #8
 8025f44:	0c2a      	lsrs	r2, r5, #16
 8025f46:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8025f4a:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8025f4e:	00db      	lsls	r3, r3, #3
 8025f50:	0212      	lsls	r2, r2, #8
 8025f52:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 8025f56:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8025f5a:	4313      	orrs	r3, r2
 8025f5c:	f109 0201 	add.w	r2, r9, #1
 8025f60:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8025f64:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 8025f68:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8025f6c:	431d      	orrs	r5, r3
 8025f6e:	9b01      	ldr	r3, [sp, #4]
 8025f70:	801d      	strh	r5, [r3, #0]
 8025f72:	b009      	add	sp, #36	@ 0x24
 8025f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025f78:	2000      	movs	r0, #0
 8025f7a:	e701      	b.n	8025d80 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 8025f7c:	2600      	movs	r6, #0
 8025f7e:	4630      	mov	r0, r6
 8025f80:	e70b      	b.n	8025d9a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8025f82:	2600      	movs	r6, #0
 8025f84:	e709      	b.n	8025d9a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8025f86:	462e      	mov	r6, r5
 8025f88:	e707      	b.n	8025d9a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8025f8a:	2700      	movs	r7, #0
 8025f8c:	e71a      	b.n	8025dc4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 8025f8e:	2100      	movs	r1, #0
 8025f90:	460f      	mov	r7, r1
 8025f92:	e723      	b.n	8025ddc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8025f94:	4621      	mov	r1, r4
 8025f96:	4627      	mov	r7, r4
 8025f98:	e720      	b.n	8025ddc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8025f9a:	2100      	movs	r1, #0
 8025f9c:	e71e      	b.n	8025ddc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8025f9e:	4629      	mov	r1, r5
 8025fa0:	e71c      	b.n	8025ddc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
	...

08025fa4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025fa8:	b09b      	sub	sp, #108	@ 0x6c
 8025faa:	9218      	str	r2, [sp, #96]	@ 0x60
 8025fac:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8025fae:	9019      	str	r0, [sp, #100]	@ 0x64
 8025fb0:	6850      	ldr	r0, [r2, #4]
 8025fb2:	9116      	str	r1, [sp, #88]	@ 0x58
 8025fb4:	9307      	str	r3, [sp, #28]
 8025fb6:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 8025fba:	fb00 1303 	mla	r3, r0, r3, r1
 8025fbe:	6812      	ldr	r2, [r2, #0]
 8025fc0:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 8025fc2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025fc6:	930a      	str	r3, [sp, #40]	@ 0x28
 8025fc8:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025fca:	681b      	ldr	r3, [r3, #0]
 8025fcc:	930f      	str	r3, [sp, #60]	@ 0x3c
 8025fce:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025fd0:	685e      	ldr	r6, [r3, #4]
 8025fd2:	3604      	adds	r6, #4
 8025fd4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8025fd6:	2b00      	cmp	r3, #0
 8025fd8:	dc03      	bgt.n	8025fe2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8025fda:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8025fdc:	2b00      	cmp	r3, #0
 8025fde:	f340 8373 	ble.w	80266c8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 8025fe2:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025fe4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025fe8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025fec:	1e48      	subs	r0, r1, #1
 8025fee:	1e57      	subs	r7, r2, #1
 8025ff0:	9b07      	ldr	r3, [sp, #28]
 8025ff2:	2b00      	cmp	r3, #0
 8025ff4:	f340 818f 	ble.w	8026316 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8025ff8:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8025ffa:	142b      	asrs	r3, r5, #16
 8025ffc:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8026000:	d406      	bmi.n	8026010 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8026002:	4584      	cmp	ip, r0
 8026004:	da04      	bge.n	8026010 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8026006:	2b00      	cmp	r3, #0
 8026008:	db02      	blt.n	8026010 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802600a:	42bb      	cmp	r3, r7
 802600c:	f2c0 8184 	blt.w	8026318 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8026010:	f11c 0c01 	adds.w	ip, ip, #1
 8026014:	f100 8172 	bmi.w	80262fc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8026018:	4561      	cmp	r1, ip
 802601a:	f2c0 816f 	blt.w	80262fc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802601e:	3301      	adds	r3, #1
 8026020:	f100 816c 	bmi.w	80262fc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8026024:	429a      	cmp	r2, r3
 8026026:	f2c0 8169 	blt.w	80262fc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802602a:	9b07      	ldr	r3, [sp, #28]
 802602c:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 802602e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8026030:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8026032:	2b00      	cmp	r3, #0
 8026034:	f340 818e 	ble.w	8026354 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 8026038:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802603a:	ea4f 4c25 	mov.w	ip, r5, asr #16
 802603e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026042:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8026044:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8026048:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 802604c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802604e:	141b      	asrs	r3, r3, #16
 8026050:	f100 81d1 	bmi.w	80263f6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8026054:	f101 38ff 	add.w	r8, r1, #4294967295
 8026058:	4543      	cmp	r3, r8
 802605a:	f280 81cc 	bge.w	80263f6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802605e:	f1bc 0f00 	cmp.w	ip, #0
 8026062:	f2c0 81c8 	blt.w	80263f6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8026066:	f10e 38ff 	add.w	r8, lr, #4294967295
 802606a:	45c4      	cmp	ip, r8
 802606c:	f280 81c3 	bge.w	80263f6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8026070:	b209      	sxth	r1, r1
 8026072:	fb0c 3301 	mla	r3, ip, r1, r3
 8026076:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8026078:	eb04 0803 	add.w	r8, r4, r3
 802607c:	5ce3      	ldrb	r3, [r4, r3]
 802607e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8026082:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8026086:	2a00      	cmp	r2, #0
 8026088:	f000 81aa 	beq.w	80263e0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 802608c:	f898 c001 	ldrb.w	ip, [r8, #1]
 8026090:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8026094:	940b      	str	r4, [sp, #44]	@ 0x2c
 8026096:	0e24      	lsrs	r4, r4, #24
 8026098:	9412      	str	r4, [sp, #72]	@ 0x48
 802609a:	b178      	cbz	r0, 80260bc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 802609c:	eb08 0c01 	add.w	ip, r8, r1
 80260a0:	f818 1001 	ldrb.w	r1, [r8, r1]
 80260a4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80260a8:	9108      	str	r1, [sp, #32]
 80260aa:	0e09      	lsrs	r1, r1, #24
 80260ac:	9110      	str	r1, [sp, #64]	@ 0x40
 80260ae:	f89c 1001 	ldrb.w	r1, [ip, #1]
 80260b2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80260b6:	910c      	str	r1, [sp, #48]	@ 0x30
 80260b8:	0e09      	lsrs	r1, r1, #24
 80260ba:	9113      	str	r1, [sp, #76]	@ 0x4c
 80260bc:	b292      	uxth	r2, r2
 80260be:	b280      	uxth	r0, r0
 80260c0:	fb02 f900 	mul.w	r9, r2, r0
 80260c4:	0112      	lsls	r2, r2, #4
 80260c6:	eba2 0809 	sub.w	r8, r2, r9
 80260ca:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80260cc:	fa1f f888 	uxth.w	r8, r8
 80260d0:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80260d4:	fb08 f101 	mul.w	r1, r8, r1
 80260d8:	b280      	uxth	r0, r0
 80260da:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 80260de:	1a12      	subs	r2, r2, r0
 80260e0:	b292      	uxth	r2, r2
 80260e2:	fb02 110e 	mla	r1, r2, lr, r1
 80260e6:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80260e8:	fb00 1104 	mla	r1, r0, r4, r1
 80260ec:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80260ee:	fb09 1104 	mla	r1, r9, r4, r1
 80260f2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80260f6:	2900      	cmp	r1, #0
 80260f8:	f000 80f5 	beq.w	80262e6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80260fc:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8026100:	d01b      	beq.n	802613a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8026102:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8026106:	fb0e fa0a 	mul.w	sl, lr, sl
 802610a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802610e:	fb0e fe03 	mul.w	lr, lr, r3
 8026112:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8026116:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802611a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802611e:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8026122:	4453      	add	r3, sl
 8026124:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8026128:	0a1b      	lsrs	r3, r3, #8
 802612a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802612e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8026132:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8026136:	ea43 030c 	orr.w	r3, r3, ip
 802613a:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802613c:	2cff      	cmp	r4, #255	@ 0xff
 802613e:	d021      	beq.n	8026184 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8026140:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8026142:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8026146:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8026148:	fb04 fb0b 	mul.w	fp, r4, fp
 802614c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802614e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026152:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8026156:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8026158:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802615c:	fb04 fa0a 	mul.w	sl, r4, sl
 8026160:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8026164:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8026168:	44de      	add	lr, fp
 802616a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802616e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026172:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026176:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802617a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802617e:	ea4e 040a 	orr.w	r4, lr, sl
 8026182:	940b      	str	r4, [sp, #44]	@ 0x2c
 8026184:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8026186:	2cff      	cmp	r4, #255	@ 0xff
 8026188:	d021      	beq.n	80261ce <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 802618a:	9c08      	ldr	r4, [sp, #32]
 802618c:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8026190:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8026192:	fb04 fb0b 	mul.w	fp, r4, fp
 8026196:	9c08      	ldr	r4, [sp, #32]
 8026198:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802619c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80261a0:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80261a2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80261a6:	fb04 fa0a 	mul.w	sl, r4, sl
 80261aa:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80261ae:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80261b2:	44de      	add	lr, fp
 80261b4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80261b8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80261bc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80261c0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80261c4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80261c8:	ea4e 040a 	orr.w	r4, lr, sl
 80261cc:	9408      	str	r4, [sp, #32]
 80261ce:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80261d0:	2cff      	cmp	r4, #255	@ 0xff
 80261d2:	d021      	beq.n	8026218 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 80261d4:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80261d6:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80261da:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80261dc:	fb04 fb0b 	mul.w	fp, r4, fp
 80261e0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80261e2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80261e6:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80261ea:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80261ec:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80261f0:	fb04 fa0a 	mul.w	sl, r4, sl
 80261f4:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80261f8:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80261fc:	44de      	add	lr, fp
 80261fe:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026202:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026206:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802620a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802620e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026212:	ea4e 040a 	orr.w	r4, lr, sl
 8026216:	940c      	str	r4, [sp, #48]	@ 0x30
 8026218:	43c9      	mvns	r1, r1
 802621a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802621c:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 8026220:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8026224:	fb08 fc0c 	mul.w	ip, r8, ip
 8026228:	fb02 cc0e 	mla	ip, r2, lr, ip
 802622c:	9c08      	ldr	r4, [sp, #32]
 802622e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8026232:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8026236:	fb00 cc0e 	mla	ip, r0, lr, ip
 802623a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802623c:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8026240:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8026242:	fb09 cc0e 	mla	ip, r9, lr, ip
 8026246:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 802624a:	fb08 f80e 	mul.w	r8, r8, lr
 802624e:	fb02 8303 	mla	r3, r2, r3, r8
 8026252:	9a08      	ldr	r2, [sp, #32]
 8026254:	f8b7 8000 	ldrh.w	r8, [r7]
 8026258:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 802625c:	fb00 330a 	mla	r3, r0, sl, r3
 8026260:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8026262:	fa5f fe81 	uxtb.w	lr, r1
 8026266:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 802626a:	fb09 3900 	mla	r9, r9, r0, r3
 802626e:	ea4f 2228 	mov.w	r2, r8, asr #8
 8026272:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8026276:	fb02 f20e 	mul.w	r2, r2, lr
 802627a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802627e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026282:	ea4f 00e8 	mov.w	r0, r8, asr #3
 8026286:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802628a:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 802628e:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8026292:	ea4c 0c09 	orr.w	ip, ip, r9
 8026296:	fb00 f00e 	mul.w	r0, r0, lr
 802629a:	1c53      	adds	r3, r2, #1
 802629c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80262a0:	ea4f 431c 	mov.w	r3, ip, lsr #16
 80262a4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80262a8:	4a62      	ldr	r2, [pc, #392]	@ (8026434 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 80262aa:	b2db      	uxtb	r3, r3
 80262ac:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80262b0:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 80262b4:	b2c9      	uxtb	r1, r1
 80262b6:	1c43      	adds	r3, r0, #1
 80262b8:	fb01 f10e 	mul.w	r1, r1, lr
 80262bc:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80262c0:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80262c4:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80262c8:	00db      	lsls	r3, r3, #3
 80262ca:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80262ce:	4313      	orrs	r3, r2
 80262d0:	1c4a      	adds	r2, r1, #1
 80262d2:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80262d6:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 80262da:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 80262de:	ea4c 0c03 	orr.w	ip, ip, r3
 80262e2:	f8a7 c000 	strh.w	ip, [r7]
 80262e6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80262e8:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 80262ea:	3702      	adds	r7, #2
 80262ec:	441a      	add	r2, r3
 80262ee:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80262f0:	9225      	str	r2, [sp, #148]	@ 0x94
 80262f2:	441d      	add	r5, r3
 80262f4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80262f6:	3b01      	subs	r3, #1
 80262f8:	9317      	str	r3, [sp, #92]	@ 0x5c
 80262fa:	e699      	b.n	8026030 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80262fc:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80262fe:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8026300:	441c      	add	r4, r3
 8026302:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8026304:	9425      	str	r4, [sp, #148]	@ 0x94
 8026306:	441d      	add	r5, r3
 8026308:	9b07      	ldr	r3, [sp, #28]
 802630a:	3b01      	subs	r3, #1
 802630c:	9307      	str	r3, [sp, #28]
 802630e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026310:	3302      	adds	r3, #2
 8026312:	930a      	str	r3, [sp, #40]	@ 0x28
 8026314:	e66c      	b.n	8025ff0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8026316:	d024      	beq.n	8026362 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 8026318:	9b07      	ldr	r3, [sp, #28]
 802631a:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 802631c:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 802631e:	3b01      	subs	r3, #1
 8026320:	fb00 4003 	mla	r0, r0, r3, r4
 8026324:	1400      	asrs	r0, r0, #16
 8026326:	f53f ae80 	bmi.w	802602a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802632a:	3901      	subs	r1, #1
 802632c:	4288      	cmp	r0, r1
 802632e:	f6bf ae7c 	bge.w	802602a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8026332:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8026334:	fb01 5303 	mla	r3, r1, r3, r5
 8026338:	141b      	asrs	r3, r3, #16
 802633a:	f53f ae76 	bmi.w	802602a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802633e:	3a01      	subs	r2, #1
 8026340:	4293      	cmp	r3, r2
 8026342:	f6bf ae72 	bge.w	802602a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8026346:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802634a:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 802634e:	f1bb 0f00 	cmp.w	fp, #0
 8026352:	dc71      	bgt.n	8026438 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8026354:	9b07      	ldr	r3, [sp, #28]
 8026356:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802635a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802635c:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8026360:	930a      	str	r3, [sp, #40]	@ 0x28
 8026362:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8026364:	2b00      	cmp	r3, #0
 8026366:	f340 81af 	ble.w	80266c8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 802636a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802636e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026372:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026376:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802637a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802637e:	eef0 6a62 	vmov.f32	s13, s5
 8026382:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026386:	ee77 2a62 	vsub.f32	s5, s14, s5
 802638a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802638e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026392:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026396:	edcd 6a25 	vstr	s13, [sp, #148]	@ 0x94
 802639a:	eef0 6a43 	vmov.f32	s13, s6
 802639e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80263a2:	ee12 2a90 	vmov	r2, s5
 80263a6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80263aa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80263ac:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80263b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80263b4:	ee13 2a10 	vmov	r2, s6
 80263b8:	9327      	str	r3, [sp, #156]	@ 0x9c
 80263ba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80263bc:	ee16 5a90 	vmov	r5, s13
 80263c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80263c4:	9328      	str	r3, [sp, #160]	@ 0xa0
 80263c6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80263c8:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80263ca:	3b01      	subs	r3, #1
 80263cc:	9316      	str	r3, [sp, #88]	@ 0x58
 80263ce:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80263d0:	bf08      	it	eq
 80263d2:	4613      	moveq	r3, r2
 80263d4:	eeb0 3a67 	vmov.f32	s6, s15
 80263d8:	9307      	str	r3, [sp, #28]
 80263da:	eef0 2a47 	vmov.f32	s5, s14
 80263de:	e5f9      	b.n	8025fd4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 80263e0:	2800      	cmp	r0, #0
 80263e2:	f43f ae6b 	beq.w	80260bc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 80263e6:	f818 1001 	ldrb.w	r1, [r8, r1]
 80263ea:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80263ee:	9108      	str	r1, [sp, #32]
 80263f0:	0e09      	lsrs	r1, r1, #24
 80263f2:	9110      	str	r1, [sp, #64]	@ 0x40
 80263f4:	e662      	b.n	80260bc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 80263f6:	f113 0801 	adds.w	r8, r3, #1
 80263fa:	f53f af74 	bmi.w	80262e6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80263fe:	4541      	cmp	r1, r8
 8026400:	f6ff af71 	blt.w	80262e6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8026404:	f11c 0801 	adds.w	r8, ip, #1
 8026408:	f53f af6d 	bmi.w	80262e6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802640c:	45c6      	cmp	lr, r8
 802640e:	f6ff af6a 	blt.w	80262e6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8026412:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8026416:	b209      	sxth	r1, r1
 8026418:	fa0f f38e 	sxth.w	r3, lr
 802641c:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8026420:	9301      	str	r3, [sp, #4]
 8026422:	9100      	str	r1, [sp, #0]
 8026424:	4633      	mov	r3, r6
 8026426:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8026428:	4639      	mov	r1, r7
 802642a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 802642c:	f7ff fc7a 	bl	8025d24 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 8026430:	e759      	b.n	80262e6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8026432:	bf00      	nop
 8026434:	fffff800 	.word	0xfffff800
 8026438:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802643a:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 802643c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026440:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8026442:	1427      	asrs	r7, r4, #16
 8026444:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026448:	142b      	asrs	r3, r5, #16
 802644a:	fb01 7303 	mla	r3, r1, r3, r7
 802644e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8026450:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8026454:	18e7      	adds	r7, r4, r3
 8026456:	5ce3      	ldrb	r3, [r4, r3]
 8026458:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802645c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8026460:	2a00      	cmp	r2, #0
 8026462:	f000 8127 	beq.w	80266b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 8026466:	f897 e001 	ldrb.w	lr, [r7, #1]
 802646a:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 802646e:	940d      	str	r4, [sp, #52]	@ 0x34
 8026470:	0e24      	lsrs	r4, r4, #24
 8026472:	9414      	str	r4, [sp, #80]	@ 0x50
 8026474:	b170      	cbz	r0, 8026494 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8026476:	eb07 0e01 	add.w	lr, r7, r1
 802647a:	5c79      	ldrb	r1, [r7, r1]
 802647c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026480:	9109      	str	r1, [sp, #36]	@ 0x24
 8026482:	0e09      	lsrs	r1, r1, #24
 8026484:	9111      	str	r1, [sp, #68]	@ 0x44
 8026486:	f89e 1001 	ldrb.w	r1, [lr, #1]
 802648a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802648e:	910e      	str	r1, [sp, #56]	@ 0x38
 8026490:	0e09      	lsrs	r1, r1, #24
 8026492:	9115      	str	r1, [sp, #84]	@ 0x54
 8026494:	b292      	uxth	r2, r2
 8026496:	b280      	uxth	r0, r0
 8026498:	fb02 f800 	mul.w	r8, r2, r0
 802649c:	0112      	lsls	r2, r2, #4
 802649e:	eba2 0e08 	sub.w	lr, r2, r8
 80264a2:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 80264a6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80264a8:	fa1f fe8e 	uxth.w	lr, lr
 80264ac:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80264b0:	fb0e f202 	mul.w	r2, lr, r2
 80264b4:	b280      	uxth	r0, r0
 80264b6:	1a09      	subs	r1, r1, r0
 80264b8:	b289      	uxth	r1, r1
 80264ba:	fb01 220c 	mla	r2, r1, ip, r2
 80264be:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80264c0:	fb00 2204 	mla	r2, r0, r4, r2
 80264c4:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80264c6:	fb08 2204 	mla	r2, r8, r4, r2
 80264ca:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80264ce:	2a00      	cmp	r2, #0
 80264d0:	f000 80e5 	beq.w	802669e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 80264d4:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 80264d8:	d019      	beq.n	802650e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 80264da:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80264de:	fb0c fa0a 	mul.w	sl, ip, sl
 80264e2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80264e6:	fb0c fc03 	mul.w	ip, ip, r3
 80264ea:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80264ee:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80264f2:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80264f6:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 80264fa:	4453      	add	r3, sl
 80264fc:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8026500:	0a1b      	lsrs	r3, r3, #8
 8026502:	0a3f      	lsrs	r7, r7, #8
 8026504:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8026508:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 802650c:	433b      	orrs	r3, r7
 802650e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8026510:	2cff      	cmp	r4, #255	@ 0xff
 8026512:	d020      	beq.n	8026556 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 8026514:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026516:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802651a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802651c:	4367      	muls	r7, r4
 802651e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026520:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026524:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8026528:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802652a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802652e:	fb04 fa0a 	mul.w	sl, r4, sl
 8026532:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026536:	44bc      	add	ip, r7
 8026538:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802653c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026540:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026544:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026548:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802654c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026550:	ea4c 040a 	orr.w	r4, ip, sl
 8026554:	940d      	str	r4, [sp, #52]	@ 0x34
 8026556:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8026558:	2cff      	cmp	r4, #255	@ 0xff
 802655a:	d020      	beq.n	802659e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 802655c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 802655e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8026562:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8026564:	4367      	muls	r7, r4
 8026566:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8026568:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802656c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8026570:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8026572:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8026576:	fb04 fa0a 	mul.w	sl, r4, sl
 802657a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802657e:	44bc      	add	ip, r7
 8026580:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8026584:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026588:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802658c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026590:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026594:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026598:	ea4c 040a 	orr.w	r4, ip, sl
 802659c:	9409      	str	r4, [sp, #36]	@ 0x24
 802659e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80265a0:	2cff      	cmp	r4, #255	@ 0xff
 80265a2:	d020      	beq.n	80265e6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 80265a4:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80265a6:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80265aa:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80265ac:	4367      	muls	r7, r4
 80265ae:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80265b0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80265b4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80265b8:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80265ba:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80265be:	fb04 fa0a 	mul.w	sl, r4, sl
 80265c2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80265c6:	44bc      	add	ip, r7
 80265c8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80265cc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80265d0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80265d4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80265d8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80265dc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80265e0:	ea4c 040a 	orr.w	r4, ip, sl
 80265e4:	940e      	str	r4, [sp, #56]	@ 0x38
 80265e6:	43d2      	mvns	r2, r2
 80265e8:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80265ea:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 80265ee:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80265f2:	fb0e f707 	mul.w	r7, lr, r7
 80265f6:	fb01 770c 	mla	r7, r1, ip, r7
 80265fa:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80265fc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8026600:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8026604:	fb00 770c 	mla	r7, r0, ip, r7
 8026608:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802660a:	b2d2      	uxtb	r2, r2
 802660c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8026610:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026612:	fb08 770c 	mla	r7, r8, ip, r7
 8026616:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 802661a:	fb0e fe0c 	mul.w	lr, lr, ip
 802661e:	fb01 e303 	mla	r3, r1, r3, lr
 8026622:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8026624:	0a3f      	lsrs	r7, r7, #8
 8026626:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 802662a:	fb00 330a 	mla	r3, r0, sl, r3
 802662e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8026630:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8026634:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 8026638:	fb08 3c0c 	mla	ip, r8, ip, r3
 802663c:	f8b9 3000 	ldrh.w	r3, [r9]
 8026640:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026644:	1218      	asrs	r0, r3, #8
 8026646:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802664a:	4350      	muls	r0, r2
 802664c:	10d9      	asrs	r1, r3, #3
 802664e:	00db      	lsls	r3, r3, #3
 8026650:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8026654:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8026658:	b2db      	uxtb	r3, r3
 802665a:	ea47 070c 	orr.w	r7, r7, ip
 802665e:	4351      	muls	r1, r2
 8026660:	4353      	muls	r3, r2
 8026662:	1c42      	adds	r2, r0, #1
 8026664:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8026668:	0c3a      	lsrs	r2, r7, #16
 802666a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802666e:	4a18      	ldr	r2, [pc, #96]	@ (80266d0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 8026670:	b2c0      	uxtb	r0, r0
 8026672:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 8026676:	1c4a      	adds	r2, r1, #1
 8026678:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802667c:	0a3a      	lsrs	r2, r7, #8
 802667e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8026682:	00c9      	lsls	r1, r1, #3
 8026684:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8026688:	4301      	orrs	r1, r0
 802668a:	1c58      	adds	r0, r3, #1
 802668c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8026690:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8026694:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 8026698:	4308      	orrs	r0, r1
 802669a:	f8a9 0000 	strh.w	r0, [r9]
 802669e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80266a0:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 80266a2:	f109 0902 	add.w	r9, r9, #2
 80266a6:	441a      	add	r2, r3
 80266a8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80266aa:	9225      	str	r2, [sp, #148]	@ 0x94
 80266ac:	441d      	add	r5, r3
 80266ae:	f10b 3bff 	add.w	fp, fp, #4294967295
 80266b2:	e64c      	b.n	802634e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 80266b4:	2800      	cmp	r0, #0
 80266b6:	f43f aeed 	beq.w	8026494 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 80266ba:	5c79      	ldrb	r1, [r7, r1]
 80266bc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80266c0:	9109      	str	r1, [sp, #36]	@ 0x24
 80266c2:	0e09      	lsrs	r1, r1, #24
 80266c4:	9111      	str	r1, [sp, #68]	@ 0x44
 80266c6:	e6e5      	b.n	8026494 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 80266c8:	b01b      	add	sp, #108	@ 0x6c
 80266ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80266ce:	bf00      	nop
 80266d0:	fffff800 	.word	0xfffff800

080266d4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 80266d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80266d8:	b085      	sub	sp, #20
 80266da:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	@ 0x38
 80266de:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 80266e2:	fb00 7406 	mla	r4, r0, r6, r7
 80266e6:	2800      	cmp	r0, #0
 80266e8:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 80266ec:	9103      	str	r1, [sp, #12]
 80266ee:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	@ 0x3c
 80266f2:	f89d 1048 	ldrb.w	r1, [sp, #72]	@ 0x48
 80266f6:	f89d e04c 	ldrb.w	lr, [sp, #76]	@ 0x4c
 80266fa:	9501      	str	r5, [sp, #4]
 80266fc:	eb03 0904 	add.w	r9, r3, r4
 8026700:	f2c0 8150 	blt.w	80269a4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 8026704:	4583      	cmp	fp, r0
 8026706:	f340 814d 	ble.w	80269a4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 802670a:	2f00      	cmp	r7, #0
 802670c:	f2c0 8146 	blt.w	802699c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8026710:	42be      	cmp	r6, r7
 8026712:	f340 8143 	ble.w	802699c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8026716:	f813 c004 	ldrb.w	ip, [r3, r4]
 802671a:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 802671e:	f64f 041f 	movw	r4, #63519	@ 0xf81f
 8026722:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8026726:	f423 65fc 	bic.w	r5, r3, #2016	@ 0x7e0
 802672a:	4355      	muls	r5, r2
 802672c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8026730:	fb0c f203 	mul.w	r2, ip, r3
 8026734:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8026738:	f605 0501 	addw	r5, r5, #2049	@ 0x801
 802673c:	441d      	add	r5, r3
 802673e:	f102 0320 	add.w	r3, r2, #32
 8026742:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026746:	0a1b      	lsrs	r3, r3, #8
 8026748:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 802674c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8026750:	431c      	orrs	r4, r3
 8026752:	1c7b      	adds	r3, r7, #1
 8026754:	f100 812b 	bmi.w	80269ae <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8026758:	429e      	cmp	r6, r3
 802675a:	f340 8128 	ble.w	80269ae <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 802675e:	2900      	cmp	r1, #0
 8026760:	f000 8128 	beq.w	80269b4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 8026764:	9a01      	ldr	r2, [sp, #4]
 8026766:	f899 3001 	ldrb.w	r3, [r9, #1]
 802676a:	8855      	ldrh	r5, [r2, #2]
 802676c:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8026770:	f425 62fc 	bic.w	r2, r5, #2016	@ 0x7e0
 8026774:	fb08 f802 	mul.w	r8, r8, r2
 8026778:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 802677c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8026780:	435d      	muls	r5, r3
 8026782:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8026786:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 802678a:	44d0      	add	r8, sl
 802678c:	f105 0a20 	add.w	sl, r5, #32
 8026790:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8026794:	0a2d      	lsrs	r5, r5, #8
 8026796:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 802679a:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 802679e:	432a      	orrs	r2, r5
 80267a0:	3001      	adds	r0, #1
 80267a2:	f100 810d 	bmi.w	80269c0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 80267a6:	4583      	cmp	fp, r0
 80267a8:	f340 810a 	ble.w	80269c0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 80267ac:	f1be 0f00 	cmp.w	lr, #0
 80267b0:	f000 810b 	beq.w	80269ca <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 80267b4:	2f00      	cmp	r7, #0
 80267b6:	f2c0 8100 	blt.w	80269ba <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 80267ba:	42be      	cmp	r6, r7
 80267bc:	f340 80fd 	ble.w	80269ba <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 80267c0:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
 80267c4:	9801      	ldr	r0, [sp, #4]
 80267c6:	f819 5006 	ldrb.w	r5, [r9, r6]
 80267ca:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 80267ce:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80267d2:	f428 60fc 	bic.w	r0, r8, #2016	@ 0x7e0
 80267d6:	fb0a fa00 	mul.w	sl, sl, r0
 80267da:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 80267de:	fb05 f808 	mul.w	r8, r5, r8
 80267e2:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 80267e6:	f60a 0a01 	addw	sl, sl, #2049	@ 0x801
 80267ea:	4482      	add	sl, r0
 80267ec:	f108 0020 	add.w	r0, r8, #32
 80267f0:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80267f4:	0a00      	lsrs	r0, r0, #8
 80267f6:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 80267fa:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80267fe:	ea4b 0b00 	orr.w	fp, fp, r0
 8026802:	3701      	adds	r7, #1
 8026804:	f100 80e6 	bmi.w	80269d4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 8026808:	42be      	cmp	r6, r7
 802680a:	f340 80e3 	ble.w	80269d4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 802680e:	2900      	cmp	r1, #0
 8026810:	f000 80e3 	beq.w	80269da <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 8026814:	9801      	ldr	r0, [sp, #4]
 8026816:	3601      	adds	r6, #1
 8026818:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 802681c:	f819 7006 	ldrb.w	r7, [r9, r6]
 8026820:	f420 66fc 	bic.w	r6, r0, #2016	@ 0x7e0
 8026824:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8026828:	fb07 f800 	mul.w	r8, r7, r0
 802682c:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8026830:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8026834:	fb09 f906 	mul.w	r9, r9, r6
 8026838:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 802683c:	f609 0901 	addw	r9, r9, #2049	@ 0x801
 8026840:	44d1      	add	r9, sl
 8026842:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 8026846:	f108 0020 	add.w	r0, r8, #32
 802684a:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 802684e:	0a00      	lsrs	r0, r0, #8
 8026850:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8026854:	4330      	orrs	r0, r6
 8026856:	b28e      	uxth	r6, r1
 8026858:	fa1f f98e 	uxth.w	r9, lr
 802685c:	fb06 f809 	mul.w	r8, r6, r9
 8026860:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8026864:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8026868:	0136      	lsls	r6, r6, #4
 802686a:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 802686e:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 8026872:	9601      	str	r6, [sp, #4]
 8026874:	ea4a 0404 	orr.w	r4, sl, r4
 8026878:	fa1f f689 	uxth.w	r6, r9
 802687c:	9602      	str	r6, [sp, #8]
 802687e:	4626      	mov	r6, r4
 8026880:	fb11 f90e 	smulbb	r9, r1, lr
 8026884:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8026888:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 802688c:	f1ce 0410 	rsb	r4, lr, #16
 8026890:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8026894:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8026898:	1a64      	subs	r4, r4, r1
 802689a:	ea4a 0202 	orr.w	r2, sl, r2
 802689e:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 80268a2:	434a      	muls	r2, r1
 80268a4:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 80268a8:	fb04 2406 	mla	r4, r4, r6, r2
 80268ac:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80268b0:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80268b4:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80268b8:	ea4a 0000 	orr.w	r0, sl, r0
 80268bc:	fb09 4200 	mla	r2, r9, r0, r4
 80268c0:	ea4f 440b 	mov.w	r4, fp, lsl #16
 80268c4:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 80268c8:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 80268cc:	ea44 0b0b 	orr.w	fp, r4, fp
 80268d0:	9c01      	ldr	r4, [sp, #4]
 80268d2:	9e02      	ldr	r6, [sp, #8]
 80268d4:	f5c4 7480 	rsb	r4, r4, #256	@ 0x100
 80268d8:	1ba4      	subs	r4, r4, r6
 80268da:	9e01      	ldr	r6, [sp, #4]
 80268dc:	b2a4      	uxth	r4, r4
 80268de:	eba6 0608 	sub.w	r6, r6, r8
 80268e2:	b2b6      	uxth	r6, r6
 80268e4:	4373      	muls	r3, r6
 80268e6:	fb0c 3304 	mla	r3, ip, r4, r3
 80268ea:	9c02      	ldr	r4, [sp, #8]
 80268ec:	9903      	ldr	r1, [sp, #12]
 80268ee:	fb04 3505 	mla	r5, r4, r5, r3
 80268f2:	fb08 5707 	mla	r7, r8, r7, r5
 80268f6:	8808      	ldrh	r0, [r1, #0]
 80268f8:	f89d 1050 	ldrb.w	r1, [sp, #80]	@ 0x50
 80268fc:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8026900:	b289      	uxth	r1, r1
 8026902:	434f      	muls	r7, r1
 8026904:	1c7b      	adds	r3, r7, #1
 8026906:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 802690a:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 802690e:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8026912:	fb0e 2e0b 	mla	lr, lr, fp, r2
 8026916:	1203      	asrs	r3, r0, #8
 8026918:	ea4f 525e 	mov.w	r2, lr, lsr #21
 802691c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8026920:	b2ff      	uxtb	r7, r7
 8026922:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8026926:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 802692a:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 802692e:	fb13 f307 	smulbb	r3, r3, r7
 8026932:	ea42 0e0e 	orr.w	lr, r2, lr
 8026936:	fa1f f28e 	uxth.w	r2, lr
 802693a:	1215      	asrs	r5, r2, #8
 802693c:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8026940:	fb05 3501 	mla	r5, r5, r1, r3
 8026944:	10c3      	asrs	r3, r0, #3
 8026946:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 802694a:	fb13 f307 	smulbb	r3, r3, r7
 802694e:	10d4      	asrs	r4, r2, #3
 8026950:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 8026954:	fb04 3401 	mla	r4, r4, r1, r3
 8026958:	00c3      	lsls	r3, r0, #3
 802695a:	b2db      	uxtb	r3, r3
 802695c:	fb13 f307 	smulbb	r3, r3, r7
 8026960:	00d2      	lsls	r2, r2, #3
 8026962:	b2d2      	uxtb	r2, r2
 8026964:	fb02 3101 	mla	r1, r2, r1, r3
 8026968:	b2ad      	uxth	r5, r5
 802696a:	b289      	uxth	r1, r1
 802696c:	b2a4      	uxth	r4, r4
 802696e:	1c6b      	adds	r3, r5, #1
 8026970:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8026974:	1c62      	adds	r2, r4, #1
 8026976:	1c4b      	adds	r3, r1, #1
 8026978:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802697c:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8026980:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8026984:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026988:	0964      	lsrs	r4, r4, #5
 802698a:	432b      	orrs	r3, r5
 802698c:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8026990:	9a03      	ldr	r2, [sp, #12]
 8026992:	4323      	orrs	r3, r4
 8026994:	8013      	strh	r3, [r2, #0]
 8026996:	b005      	add	sp, #20
 8026998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802699c:	f04f 0c00 	mov.w	ip, #0
 80269a0:	4664      	mov	r4, ip
 80269a2:	e6d6      	b.n	8026752 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 80269a4:	2300      	movs	r3, #0
 80269a6:	469c      	mov	ip, r3
 80269a8:	461a      	mov	r2, r3
 80269aa:	461c      	mov	r4, r3
 80269ac:	e6f8      	b.n	80267a0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 80269ae:	2300      	movs	r3, #0
 80269b0:	461a      	mov	r2, r3
 80269b2:	e6f5      	b.n	80267a0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 80269b4:	460b      	mov	r3, r1
 80269b6:	460a      	mov	r2, r1
 80269b8:	e6f2      	b.n	80267a0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 80269ba:	2500      	movs	r5, #0
 80269bc:	46ab      	mov	fp, r5
 80269be:	e720      	b.n	8026802 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 80269c0:	2700      	movs	r7, #0
 80269c2:	463d      	mov	r5, r7
 80269c4:	4638      	mov	r0, r7
 80269c6:	46bb      	mov	fp, r7
 80269c8:	e745      	b.n	8026856 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 80269ca:	4677      	mov	r7, lr
 80269cc:	4675      	mov	r5, lr
 80269ce:	4670      	mov	r0, lr
 80269d0:	46f3      	mov	fp, lr
 80269d2:	e740      	b.n	8026856 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 80269d4:	2700      	movs	r7, #0
 80269d6:	4638      	mov	r0, r7
 80269d8:	e73d      	b.n	8026856 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 80269da:	460f      	mov	r7, r1
 80269dc:	4608      	mov	r0, r1
 80269de:	e73a      	b.n	8026856 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

080269e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80269e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80269e4:	b097      	sub	sp, #92	@ 0x5c
 80269e6:	9214      	str	r2, [sp, #80]	@ 0x50
 80269e8:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 80269ea:	9015      	str	r0, [sp, #84]	@ 0x54
 80269ec:	9308      	str	r3, [sp, #32]
 80269ee:	6850      	ldr	r0, [r2, #4]
 80269f0:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 80269f4:	9111      	str	r1, [sp, #68]	@ 0x44
 80269f6:	9312      	str	r3, [sp, #72]	@ 0x48
 80269f8:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 80269fc:	fb00 1303 	mla	r3, r0, r3, r1
 8026a00:	6812      	ldr	r2, [r2, #0]
 8026a02:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8026a06:	9309      	str	r3, [sp, #36]	@ 0x24
 8026a08:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8026a0a:	681b      	ldr	r3, [r3, #0]
 8026a0c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8026a0e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8026a10:	685b      	ldr	r3, [r3, #4]
 8026a12:	930c      	str	r3, [sp, #48]	@ 0x30
 8026a14:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8026a18:	930a      	str	r3, [sp, #40]	@ 0x28
 8026a1a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026a1c:	2b00      	cmp	r3, #0
 8026a1e:	dc03      	bgt.n	8026a28 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8026a20:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8026a22:	2b00      	cmp	r3, #0
 8026a24:	f340 83cb 	ble.w	80271be <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 8026a28:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8026a2a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026a2e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026a32:	1e48      	subs	r0, r1, #1
 8026a34:	1e55      	subs	r5, r2, #1
 8026a36:	9b08      	ldr	r3, [sp, #32]
 8026a38:	2b00      	cmp	r3, #0
 8026a3a:	f340 81a3 	ble.w	8026d84 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 8026a3e:	9e21      	ldr	r6, [sp, #132]	@ 0x84
 8026a40:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8026a42:	1436      	asrs	r6, r6, #16
 8026a44:	ea4f 4323 	mov.w	r3, r3, asr #16
 8026a48:	d406      	bmi.n	8026a58 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8026a4a:	4286      	cmp	r6, r0
 8026a4c:	da04      	bge.n	8026a58 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8026a4e:	2b00      	cmp	r3, #0
 8026a50:	db02      	blt.n	8026a58 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8026a52:	42ab      	cmp	r3, r5
 8026a54:	f2c0 8197 	blt.w	8026d86 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8026a58:	3601      	adds	r6, #1
 8026a5a:	f100 8184 	bmi.w	8026d66 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8026a5e:	42b1      	cmp	r1, r6
 8026a60:	f2c0 8181 	blt.w	8026d66 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8026a64:	3301      	adds	r3, #1
 8026a66:	f100 817e 	bmi.w	8026d66 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8026a6a:	429a      	cmp	r2, r3
 8026a6c:	f2c0 817b 	blt.w	8026d66 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8026a70:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 8026a74:	9b08      	ldr	r3, [sp, #32]
 8026a76:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8026a78:	9313      	str	r3, [sp, #76]	@ 0x4c
 8026a7a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8026a7c:	2b00      	cmp	r3, #0
 8026a7e:	f340 81a4 	ble.w	8026dca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8026a82:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8026a84:	9d21      	ldr	r5, [sp, #132]	@ 0x84
 8026a86:	1418      	asrs	r0, r3, #16
 8026a88:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8026a8a:	142d      	asrs	r5, r5, #16
 8026a8c:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8026a90:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8026a92:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8026a96:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8026a98:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8026a9c:	f100 81f8 	bmi.w	8026e90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8026aa0:	f102 3eff 	add.w	lr, r2, #4294967295
 8026aa4:	4575      	cmp	r5, lr
 8026aa6:	f280 81f3 	bge.w	8026e90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8026aaa:	2800      	cmp	r0, #0
 8026aac:	f2c0 81f0 	blt.w	8026e90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8026ab0:	f103 3eff 	add.w	lr, r3, #4294967295
 8026ab4:	4570      	cmp	r0, lr
 8026ab6:	f280 81eb 	bge.w	8026e90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8026aba:	b212      	sxth	r2, r2
 8026abc:	fb00 5002 	mla	r0, r0, r2, r5
 8026ac0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026ac2:	fa1f fe81 	uxth.w	lr, r1
 8026ac6:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8026aca:	eb03 0a00 	add.w	sl, r3, r0
 8026ace:	f813 9000 	ldrb.w	r9, [r3, r0]
 8026ad2:	f5c5 7380 	rsb	r3, r5, #256	@ 0x100
 8026ad6:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8026ada:	b29b      	uxth	r3, r3
 8026adc:	f1bc 0f00 	cmp.w	ip, #0
 8026ae0:	f000 81b9 	beq.w	8026e56 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8026ae4:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8026ae8:	eb0a 0b02 	add.w	fp, sl, r2
 8026aec:	fa1f fa8c 	uxth.w	sl, ip
 8026af0:	fb0a fe0e 	mul.w	lr, sl, lr
 8026af4:	eba5 050e 	sub.w	r5, r5, lr
 8026af8:	b2ad      	uxth	r5, r5
 8026afa:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8026afe:	fb08 f505 	mul.w	r5, r8, r5
 8026b02:	fa1f fa8a 	uxth.w	sl, sl
 8026b06:	eba3 030a 	sub.w	r3, r3, sl
 8026b0a:	b29b      	uxth	r3, r3
 8026b0c:	940d      	str	r4, [sp, #52]	@ 0x34
 8026b0e:	fb09 5303 	mla	r3, r9, r3, r5
 8026b12:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8026b16:	940e      	str	r4, [sp, #56]	@ 0x38
 8026b18:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026b1a:	fb0a 3304 	mla	r3, sl, r4, r3
 8026b1e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8026b20:	fb0e 3304 	mla	r3, lr, r4, r3
 8026b24:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026b28:	2b00      	cmp	r3, #0
 8026b2a:	f000 810f 	beq.w	8026d4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8026b2e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8026b30:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8026b34:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8026b38:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8026b3c:	f000 8190 	beq.w	8026e60 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8026b40:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 8026b44:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8026b48:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8026b4c:	fb09 f000 	mul.w	r0, r9, r0
 8026b50:	fb0a fe0e 	mul.w	lr, sl, lr
 8026b54:	f100 0b20 	add.w	fp, r0, #32
 8026b58:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8026b5c:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8026b60:	44ce      	add	lr, r9
 8026b62:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8026b66:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026b6a:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8026b6e:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8026b72:	ea4e 0909 	orr.w	r9, lr, r9
 8026b76:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8026b7a:	8868      	ldrh	r0, [r5, #2]
 8026b7c:	d019      	beq.n	8026bb2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8026b7e:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 8026b82:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8026b86:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8026b8a:	fb08 f800 	mul.w	r8, r8, r0
 8026b8e:	fb0a fe0e 	mul.w	lr, sl, lr
 8026b92:	f108 0b20 	add.w	fp, r8, #32
 8026b96:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8026b9a:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8026b9e:	4486      	add	lr, r0
 8026ba0:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8026ba4:	0a00      	lsrs	r0, r0, #8
 8026ba6:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8026baa:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8026bae:	ea4e 0000 	orr.w	r0, lr, r0
 8026bb2:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8026bb6:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8026bba:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 8026bbe:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8026bc2:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8026bc6:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8026bca:	ea4e 0909 	orr.w	r9, lr, r9
 8026bce:	ea4a 0000 	orr.w	r0, sl, r0
 8026bd2:	f1bc 0f00 	cmp.w	ip, #0
 8026bd6:	f000 8145 	beq.w	8026e64 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 8026bda:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 8026bde:	3a01      	subs	r2, #1
 8026be0:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026be2:	0052      	lsls	r2, r2, #1
 8026be4:	3202      	adds	r2, #2
 8026be6:	2cff      	cmp	r4, #255	@ 0xff
 8026be8:	eb05 0e02 	add.w	lr, r5, r2
 8026bec:	5aaa      	ldrh	r2, [r5, r2]
 8026bee:	d018      	beq.n	8026c22 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8026bf0:	f422 65fc 	bic.w	r5, r2, #2016	@ 0x7e0
 8026bf4:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8026bf8:	fb04 fa02 	mul.w	sl, r4, r2
 8026bfc:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026c00:	fb08 f805 	mul.w	r8, r8, r5
 8026c04:	f10a 0520 	add.w	r5, sl, #32
 8026c08:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8026c0c:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8026c10:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8026c14:	4442      	add	r2, r8
 8026c16:	0a2d      	lsrs	r5, r5, #8
 8026c18:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8026c1c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8026c20:	432a      	orrs	r2, r5
 8026c22:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8026c24:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8026c28:	2cff      	cmp	r4, #255	@ 0xff
 8026c2a:	d01a      	beq.n	8026c62 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8026c2c:	f425 6efc 	bic.w	lr, r5, #2016	@ 0x7e0
 8026c30:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8026c34:	fb04 fa05 	mul.w	sl, r4, r5
 8026c38:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026c3c:	fb08 f80e 	mul.w	r8, r8, lr
 8026c40:	f10a 0e20 	add.w	lr, sl, #32
 8026c44:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8026c48:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8026c4c:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8026c50:	4445      	add	r5, r8
 8026c52:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026c56:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8026c5a:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 8026c5e:	ea45 050e 	orr.w	r5, r5, lr
 8026c62:	fb1c fe01 	smulbb	lr, ip, r1
 8026c66:	f1cc 0810 	rsb	r8, ip, #16
 8026c6a:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8026c6e:	eba8 0801 	sub.w	r8, r8, r1
 8026c72:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8026c76:	4341      	muls	r1, r0
 8026c78:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8026c7c:	fb09 1108 	mla	r1, r9, r8, r1
 8026c80:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8026c84:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8026c88:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8026c8c:	ea4a 0202 	orr.w	r2, sl, r2
 8026c90:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8026c94:	fb0c 1102 	mla	r1, ip, r2, r1
 8026c98:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8026c9c:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8026ca0:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8026ca4:	ea4b 0505 	orr.w	r5, fp, r5
 8026ca8:	fb0e 1e05 	mla	lr, lr, r5, r1
 8026cac:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8026cb0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8026cb4:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8026cb8:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8026cbc:	ea42 0e0e 	orr.w	lr, r2, lr
 8026cc0:	fa1f f28e 	uxth.w	r2, lr
 8026cc4:	2bff      	cmp	r3, #255	@ 0xff
 8026cc6:	d103      	bne.n	8026cd0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8026cc8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8026cca:	29ff      	cmp	r1, #255	@ 0xff
 8026ccc:	f000 80de 	beq.w	8026e8c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 8026cd0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8026cd2:	8838      	ldrh	r0, [r7, #0]
 8026cd4:	434b      	muls	r3, r1
 8026cd6:	f103 0c01 	add.w	ip, r3, #1
 8026cda:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 8026cde:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8026ce2:	fa5f fc83 	uxtb.w	ip, r3
 8026ce6:	1203      	asrs	r3, r0, #8
 8026ce8:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8026cec:	fb13 f30c 	smulbb	r3, r3, ip
 8026cf0:	1215      	asrs	r5, r2, #8
 8026cf2:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8026cf6:	fb05 3501 	mla	r5, r5, r1, r3
 8026cfa:	10c3      	asrs	r3, r0, #3
 8026cfc:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8026d00:	fb13 f30c 	smulbb	r3, r3, ip
 8026d04:	10d1      	asrs	r1, r2, #3
 8026d06:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8026d08:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8026d0c:	fb01 3104 	mla	r1, r1, r4, r3
 8026d10:	00c3      	lsls	r3, r0, #3
 8026d12:	b2db      	uxtb	r3, r3
 8026d14:	fb13 f30c 	smulbb	r3, r3, ip
 8026d18:	00d2      	lsls	r2, r2, #3
 8026d1a:	b2d2      	uxtb	r2, r2
 8026d1c:	fb02 3304 	mla	r3, r2, r4, r3
 8026d20:	b2ad      	uxth	r5, r5
 8026d22:	b29a      	uxth	r2, r3
 8026d24:	1c6b      	adds	r3, r5, #1
 8026d26:	b289      	uxth	r1, r1
 8026d28:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8026d2c:	1c53      	adds	r3, r2, #1
 8026d2e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026d32:	1c4a      	adds	r2, r1, #1
 8026d34:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8026d38:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8026d3c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026d40:	0949      	lsrs	r1, r1, #5
 8026d42:	432b      	orrs	r3, r5
 8026d44:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8026d48:	430b      	orrs	r3, r1
 8026d4a:	803b      	strh	r3, [r7, #0]
 8026d4c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8026d4e:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8026d50:	3702      	adds	r7, #2
 8026d52:	4413      	add	r3, r2
 8026d54:	9321      	str	r3, [sp, #132]	@ 0x84
 8026d56:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8026d58:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8026d5a:	441a      	add	r2, r3
 8026d5c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8026d5e:	9222      	str	r2, [sp, #136]	@ 0x88
 8026d60:	3b01      	subs	r3, #1
 8026d62:	9313      	str	r3, [sp, #76]	@ 0x4c
 8026d64:	e689      	b.n	8026a7a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8026d66:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8026d68:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8026d6a:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 8026d6c:	4433      	add	r3, r6
 8026d6e:	9321      	str	r3, [sp, #132]	@ 0x84
 8026d70:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8026d72:	441c      	add	r4, r3
 8026d74:	9b08      	ldr	r3, [sp, #32]
 8026d76:	9422      	str	r4, [sp, #136]	@ 0x88
 8026d78:	3b01      	subs	r3, #1
 8026d7a:	9308      	str	r3, [sp, #32]
 8026d7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026d7e:	3302      	adds	r3, #2
 8026d80:	9309      	str	r3, [sp, #36]	@ 0x24
 8026d82:	e658      	b.n	8026a36 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8026d84:	d028      	beq.n	8026dd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8026d86:	9b08      	ldr	r3, [sp, #32]
 8026d88:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8026d8a:	9d21      	ldr	r5, [sp, #132]	@ 0x84
 8026d8c:	3b01      	subs	r3, #1
 8026d8e:	fb00 5003 	mla	r0, r0, r3, r5
 8026d92:	1400      	asrs	r0, r0, #16
 8026d94:	f53f ae6c 	bmi.w	8026a70 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026d98:	3901      	subs	r1, #1
 8026d9a:	4288      	cmp	r0, r1
 8026d9c:	f6bf ae68 	bge.w	8026a70 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026da0:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8026da2:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8026da4:	fb01 0303 	mla	r3, r1, r3, r0
 8026da8:	141b      	asrs	r3, r3, #16
 8026daa:	f53f ae61 	bmi.w	8026a70 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026dae:	3a01      	subs	r2, #1
 8026db0:	4293      	cmp	r3, r2
 8026db2:	f6bf ae5d 	bge.w	8026a70 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026db6:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 8026dba:	9b08      	ldr	r3, [sp, #32]
 8026dbc:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 8026dc0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8026dc2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8026dc4:	2b00      	cmp	r3, #0
 8026dc6:	f300 8082 	bgt.w	8026ece <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 8026dca:	9b08      	ldr	r3, [sp, #32]
 8026dcc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026dd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026dd2:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8026dd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8026dd8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026dda:	2b00      	cmp	r3, #0
 8026ddc:	f340 81ef 	ble.w	80271be <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 8026de0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8026de4:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026de8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026dec:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026df0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026df4:	eef0 6a62 	vmov.f32	s13, s5
 8026df8:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026dfc:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026e00:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026e04:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026e08:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026e0c:	edcd 6a21 	vstr	s13, [sp, #132]	@ 0x84
 8026e10:	eef0 6a43 	vmov.f32	s13, s6
 8026e14:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026e18:	ee12 2a90 	vmov	r2, s5
 8026e1c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026e20:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8026e22:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026e26:	fb92 f3f3 	sdiv	r3, r2, r3
 8026e2a:	ee13 2a10 	vmov	r2, s6
 8026e2e:	9323      	str	r3, [sp, #140]	@ 0x8c
 8026e30:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8026e32:	edcd 6a22 	vstr	s13, [sp, #136]	@ 0x88
 8026e36:	fb92 f3f3 	sdiv	r3, r2, r3
 8026e3a:	9324      	str	r3, [sp, #144]	@ 0x90
 8026e3c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026e3e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8026e40:	3b01      	subs	r3, #1
 8026e42:	9311      	str	r3, [sp, #68]	@ 0x44
 8026e44:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8026e46:	bf08      	it	eq
 8026e48:	4613      	moveq	r3, r2
 8026e4a:	eeb0 3a67 	vmov.f32	s6, s15
 8026e4e:	9308      	str	r3, [sp, #32]
 8026e50:	eef0 2a47 	vmov.f32	s5, s14
 8026e54:	e5e1      	b.n	8026a1a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8026e56:	fb08 f505 	mul.w	r5, r8, r5
 8026e5a:	fb09 5303 	mla	r3, r9, r3, r5
 8026e5e:	e661      	b.n	8026b24 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 8026e60:	4681      	mov	r9, r0
 8026e62:	e688      	b.n	8026b76 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8026e64:	f1c1 0210 	rsb	r2, r1, #16
 8026e68:	4341      	muls	r1, r0
 8026e6a:	fb09 1902 	mla	r9, r9, r2, r1
 8026e6e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8026e72:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8026e76:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8026e7a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8026e7e:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8026e82:	ea42 0909 	orr.w	r9, r2, r9
 8026e86:	fa1f f289 	uxth.w	r2, r9
 8026e8a:	e71b      	b.n	8026cc4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8026e8c:	803a      	strh	r2, [r7, #0]
 8026e8e:	e75d      	b.n	8026d4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8026e90:	f115 0e01 	adds.w	lr, r5, #1
 8026e94:	f53f af5a 	bmi.w	8026d4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8026e98:	4572      	cmp	r2, lr
 8026e9a:	f6ff af57 	blt.w	8026d4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8026e9e:	f110 0e01 	adds.w	lr, r0, #1
 8026ea2:	f53f af53 	bmi.w	8026d4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8026ea6:	4573      	cmp	r3, lr
 8026ea8:	f6ff af50 	blt.w	8026d4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8026eac:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8026eae:	b21b      	sxth	r3, r3
 8026eb0:	b212      	sxth	r2, r2
 8026eb2:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8026eb6:	9301      	str	r3, [sp, #4]
 8026eb8:	9200      	str	r2, [sp, #0]
 8026eba:	e9cd c405 	strd	ip, r4, [sp, #20]
 8026ebe:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 8026ec2:	9502      	str	r5, [sp, #8]
 8026ec4:	4639      	mov	r1, r7
 8026ec6:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8026ec8:	f7ff fc04 	bl	80266d4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8026ecc:	e73e      	b.n	8026d4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8026ece:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8026ed0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026ed4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8026ed6:	fa1f fc82 	uxth.w	ip, r2
 8026eda:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8026ede:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8026ee0:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8026ee4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026ee8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8026eea:	141f      	asrs	r7, r3, #16
 8026eec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8026eee:	141b      	asrs	r3, r3, #16
 8026ef0:	fb01 3707 	mla	r7, r1, r7, r3
 8026ef4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026ef6:	eb03 0a07 	add.w	sl, r3, r7
 8026efa:	f813 9007 	ldrb.w	r9, [r3, r7]
 8026efe:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 8026f02:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8026f06:	b29b      	uxth	r3, r3
 8026f08:	2d00      	cmp	r5, #0
 8026f0a:	f000 813d 	beq.w	8027188 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 8026f0e:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8026f12:	eb0a 0b01 	add.w	fp, sl, r1
 8026f16:	fa1f fa85 	uxth.w	sl, r5
 8026f1a:	fb0a fc0c 	mul.w	ip, sl, ip
 8026f1e:	eba0 000c 	sub.w	r0, r0, ip
 8026f22:	b280      	uxth	r0, r0
 8026f24:	fb08 f000 	mul.w	r0, r8, r0
 8026f28:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8026f2c:	fa1f fa8a 	uxth.w	sl, sl
 8026f30:	eba3 030a 	sub.w	r3, r3, sl
 8026f34:	b29b      	uxth	r3, r3
 8026f36:	fb09 0303 	mla	r3, r9, r3, r0
 8026f3a:	940f      	str	r4, [sp, #60]	@ 0x3c
 8026f3c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8026f3e:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8026f42:	fb0a 3300 	mla	r3, sl, r0, r3
 8026f46:	fb0c 3304 	mla	r3, ip, r4, r3
 8026f4a:	9410      	str	r4, [sp, #64]	@ 0x40
 8026f4c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026f50:	2b00      	cmp	r3, #0
 8026f52:	f000 810b 	beq.w	802716c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 8026f56:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8026f58:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8026f5a:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8026f5e:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8026f62:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8026f66:	f000 8114 	beq.w	8027192 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b2>
 8026f6a:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 8026f6e:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8026f72:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8026f76:	fb09 f707 	mul.w	r7, r9, r7
 8026f7a:	fb0a fc0c 	mul.w	ip, sl, ip
 8026f7e:	f107 0b20 	add.w	fp, r7, #32
 8026f82:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8026f86:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 8026f8a:	44cc      	add	ip, r9
 8026f8c:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8026f90:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026f94:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8026f98:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8026f9c:	ea4c 0909 	orr.w	r9, ip, r9
 8026fa0:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8026fa4:	8847      	ldrh	r7, [r0, #2]
 8026fa6:	d019      	beq.n	8026fdc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fc>
 8026fa8:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 8026fac:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8026fb0:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8026fb4:	fb08 f807 	mul.w	r8, r8, r7
 8026fb8:	fb0a fc0c 	mul.w	ip, sl, ip
 8026fbc:	f108 0b20 	add.w	fp, r8, #32
 8026fc0:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8026fc4:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 8026fc8:	44bc      	add	ip, r7
 8026fca:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8026fce:	0a3f      	lsrs	r7, r7, #8
 8026fd0:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8026fd4:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8026fd8:	ea4c 0707 	orr.w	r7, ip, r7
 8026fdc:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8026fe0:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8026fe4:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8026fe8:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8026fec:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8026ff0:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 8026ff4:	ea4c 0909 	orr.w	r9, ip, r9
 8026ff8:	ea4a 0707 	orr.w	r7, sl, r7
 8026ffc:	2d00      	cmp	r5, #0
 8026ffe:	f000 80ca 	beq.w	8027196 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 8027002:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8027006:	3901      	subs	r1, #1
 8027008:	0049      	lsls	r1, r1, #1
 802700a:	3102      	adds	r1, #2
 802700c:	eb00 0c01 	add.w	ip, r0, r1
 8027010:	5a41      	ldrh	r1, [r0, r1]
 8027012:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8027014:	28ff      	cmp	r0, #255	@ 0xff
 8027016:	d019      	beq.n	802704c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66c>
 8027018:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 802701a:	f421 60fc 	bic.w	r0, r1, #2016	@ 0x7e0
 802701e:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8027022:	fb04 fa01 	mul.w	sl, r4, r1
 8027026:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802702a:	fb08 f800 	mul.w	r8, r8, r0
 802702e:	f10a 0020 	add.w	r0, sl, #32
 8027032:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8027036:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 802703a:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 802703e:	4441      	add	r1, r8
 8027040:	0a00      	lsrs	r0, r0, #8
 8027042:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8027046:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802704a:	4301      	orrs	r1, r0
 802704c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802704e:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8027052:	2cff      	cmp	r4, #255	@ 0xff
 8027054:	d01a      	beq.n	802708c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ac>
 8027056:	f420 6cfc 	bic.w	ip, r0, #2016	@ 0x7e0
 802705a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802705e:	fb04 fa00 	mul.w	sl, r4, r0
 8027062:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027066:	fb08 f80c 	mul.w	r8, r8, ip
 802706a:	f10a 0c20 	add.w	ip, sl, #32
 802706e:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8027072:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8027076:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 802707a:	4440      	add	r0, r8
 802707c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027080:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8027084:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8027088:	ea40 000c 	orr.w	r0, r0, ip
 802708c:	fb15 fc02 	smulbb	ip, r5, r2
 8027090:	f1c5 0810 	rsb	r8, r5, #16
 8027094:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8027098:	eba8 0802 	sub.w	r8, r8, r2
 802709c:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 80270a0:	437a      	muls	r2, r7
 80270a2:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 80270a6:	fb09 2208 	mla	r2, r9, r8, r2
 80270aa:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80270ae:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80270b2:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 80270b6:	ea4a 0101 	orr.w	r1, sl, r1
 80270ba:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 80270be:	fb05 2201 	mla	r2, r5, r1, r2
 80270c2:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80270c6:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80270ca:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80270ce:	ea4b 0000 	orr.w	r0, fp, r0
 80270d2:	fb0c 2200 	mla	r2, ip, r0, r2
 80270d6:	0d57      	lsrs	r7, r2, #21
 80270d8:	0952      	lsrs	r2, r2, #5
 80270da:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 80270de:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80270e2:	433a      	orrs	r2, r7
 80270e4:	2bff      	cmp	r3, #255	@ 0xff
 80270e6:	b292      	uxth	r2, r2
 80270e8:	d102      	bne.n	80270f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 80270ea:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80270ec:	29ff      	cmp	r1, #255	@ 0xff
 80270ee:	d063      	beq.n	80271b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>
 80270f0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80270f2:	f8be 1000 	ldrh.w	r1, [lr]
 80270f6:	4343      	muls	r3, r0
 80270f8:	1c58      	adds	r0, r3, #1
 80270fa:	eb00 2323 	add.w	r3, r0, r3, asr #8
 80270fe:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8027102:	1208      	asrs	r0, r1, #8
 8027104:	b2db      	uxtb	r3, r3
 8027106:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802710a:	fb10 f003 	smulbb	r0, r0, r3
 802710e:	10cf      	asrs	r7, r1, #3
 8027110:	00c9      	lsls	r1, r1, #3
 8027112:	b2c9      	uxtb	r1, r1
 8027114:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8027116:	1215      	asrs	r5, r2, #8
 8027118:	fb11 f103 	smulbb	r1, r1, r3
 802711c:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8027120:	fb05 0504 	mla	r5, r5, r4, r0
 8027124:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8027128:	10d0      	asrs	r0, r2, #3
 802712a:	00d2      	lsls	r2, r2, #3
 802712c:	fb17 f703 	smulbb	r7, r7, r3
 8027130:	b2d2      	uxtb	r2, r2
 8027132:	fb02 1204 	mla	r2, r2, r4, r1
 8027136:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802713a:	fb00 7004 	mla	r0, r0, r4, r7
 802713e:	b2ad      	uxth	r5, r5
 8027140:	b292      	uxth	r2, r2
 8027142:	1c6b      	adds	r3, r5, #1
 8027144:	1c57      	adds	r7, r2, #1
 8027146:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802714a:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 802714e:	b280      	uxth	r0, r0
 8027150:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8027154:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8027158:	433d      	orrs	r5, r7
 802715a:	1c47      	adds	r7, r0, #1
 802715c:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8027160:	097f      	lsrs	r7, r7, #5
 8027162:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8027166:	433d      	orrs	r5, r7
 8027168:	f8ae 5000 	strh.w	r5, [lr]
 802716c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 802716e:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8027170:	f10e 0e02 	add.w	lr, lr, #2
 8027174:	4413      	add	r3, r2
 8027176:	9321      	str	r3, [sp, #132]	@ 0x84
 8027178:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 802717a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802717c:	441a      	add	r2, r3
 802717e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8027180:	9222      	str	r2, [sp, #136]	@ 0x88
 8027182:	3b01      	subs	r3, #1
 8027184:	9313      	str	r3, [sp, #76]	@ 0x4c
 8027186:	e61c      	b.n	8026dc2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 8027188:	fb08 f000 	mul.w	r0, r8, r0
 802718c:	fb09 0303 	mla	r3, r9, r3, r0
 8027190:	e6dc      	b.n	8026f4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56c>
 8027192:	46b9      	mov	r9, r7
 8027194:	e704      	b.n	8026fa0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c0>
 8027196:	f1c2 0110 	rsb	r1, r2, #16
 802719a:	437a      	muls	r2, r7
 802719c:	fb09 2901 	mla	r9, r9, r1, r2
 80271a0:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80271a4:	ea4f 5059 	mov.w	r0, r9, lsr #21
 80271a8:	ea4f 1259 	mov.w	r2, r9, lsr #5
 80271ac:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80271b0:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80271b4:	4302      	orrs	r2, r0
 80271b6:	e795      	b.n	80270e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 80271b8:	f8ae 2000 	strh.w	r2, [lr]
 80271bc:	e7d6      	b.n	802716c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 80271be:	b017      	add	sp, #92	@ 0x5c
 80271c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080271c4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 80271c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80271c8:	b085      	sub	sp, #20
 80271ca:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	@ 0x38
 80271ce:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 80271d2:	fb00 7406 	mla	r4, r0, r6, r7
 80271d6:	2800      	cmp	r0, #0
 80271d8:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 80271dc:	9103      	str	r1, [sp, #12]
 80271de:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	@ 0x3c
 80271e2:	f89d 1048 	ldrb.w	r1, [sp, #72]	@ 0x48
 80271e6:	f89d e04c 	ldrb.w	lr, [sp, #76]	@ 0x4c
 80271ea:	9501      	str	r5, [sp, #4]
 80271ec:	eb02 0904 	add.w	r9, r2, r4
 80271f0:	f2c0 8141 	blt.w	8027476 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 80271f4:	4583      	cmp	fp, r0
 80271f6:	f340 813e 	ble.w	8027476 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 80271fa:	2f00      	cmp	r7, #0
 80271fc:	f2c0 8137 	blt.w	802746e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 8027200:	42be      	cmp	r6, r7
 8027202:	f340 8134 	ble.w	802746e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 8027206:	f812 c004 	ldrb.w	ip, [r2, r4]
 802720a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 802720e:	f64f 041f 	movw	r4, #63519	@ 0xf81f
 8027212:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8027216:	f423 65fc 	bic.w	r5, r3, #2016	@ 0x7e0
 802721a:	4355      	muls	r5, r2
 802721c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8027220:	fb0c f203 	mul.w	r2, ip, r3
 8027224:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8027228:	f605 0501 	addw	r5, r5, #2049	@ 0x801
 802722c:	441d      	add	r5, r3
 802722e:	f102 0320 	add.w	r3, r2, #32
 8027232:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027236:	0a1b      	lsrs	r3, r3, #8
 8027238:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 802723c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8027240:	431c      	orrs	r4, r3
 8027242:	1c7b      	adds	r3, r7, #1
 8027244:	f100 811c 	bmi.w	8027480 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8027248:	429e      	cmp	r6, r3
 802724a:	f340 8119 	ble.w	8027480 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 802724e:	2900      	cmp	r1, #0
 8027250:	f000 8119 	beq.w	8027486 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 8027254:	9a01      	ldr	r2, [sp, #4]
 8027256:	f899 3001 	ldrb.w	r3, [r9, #1]
 802725a:	8855      	ldrh	r5, [r2, #2]
 802725c:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8027260:	f425 62fc 	bic.w	r2, r5, #2016	@ 0x7e0
 8027264:	fb08 f802 	mul.w	r8, r8, r2
 8027268:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 802726c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8027270:	435d      	muls	r5, r3
 8027272:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8027276:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 802727a:	44d0      	add	r8, sl
 802727c:	f105 0a20 	add.w	sl, r5, #32
 8027280:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8027284:	0a2d      	lsrs	r5, r5, #8
 8027286:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 802728a:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 802728e:	432a      	orrs	r2, r5
 8027290:	3001      	adds	r0, #1
 8027292:	f100 80fe 	bmi.w	8027492 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8027296:	4583      	cmp	fp, r0
 8027298:	f340 80fb 	ble.w	8027492 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 802729c:	f1be 0f00 	cmp.w	lr, #0
 80272a0:	f000 80fc 	beq.w	802749c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 80272a4:	2f00      	cmp	r7, #0
 80272a6:	f2c0 80f1 	blt.w	802748c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 80272aa:	42be      	cmp	r6, r7
 80272ac:	f340 80ee 	ble.w	802748c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 80272b0:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
 80272b4:	9801      	ldr	r0, [sp, #4]
 80272b6:	f819 5006 	ldrb.w	r5, [r9, r6]
 80272ba:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 80272be:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80272c2:	f428 60fc 	bic.w	r0, r8, #2016	@ 0x7e0
 80272c6:	fb0a fa00 	mul.w	sl, sl, r0
 80272ca:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 80272ce:	fb05 f808 	mul.w	r8, r5, r8
 80272d2:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 80272d6:	f60a 0a01 	addw	sl, sl, #2049	@ 0x801
 80272da:	4482      	add	sl, r0
 80272dc:	f108 0020 	add.w	r0, r8, #32
 80272e0:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80272e4:	0a00      	lsrs	r0, r0, #8
 80272e6:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 80272ea:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80272ee:	ea4b 0b00 	orr.w	fp, fp, r0
 80272f2:	3701      	adds	r7, #1
 80272f4:	f100 80d7 	bmi.w	80274a6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 80272f8:	42be      	cmp	r6, r7
 80272fa:	f340 80d4 	ble.w	80274a6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 80272fe:	2900      	cmp	r1, #0
 8027300:	f000 80d4 	beq.w	80274ac <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 8027304:	9801      	ldr	r0, [sp, #4]
 8027306:	3601      	adds	r6, #1
 8027308:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 802730c:	f819 7006 	ldrb.w	r7, [r9, r6]
 8027310:	f420 66fc 	bic.w	r6, r0, #2016	@ 0x7e0
 8027314:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027318:	fb07 f800 	mul.w	r8, r7, r0
 802731c:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8027320:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8027324:	fb09 f906 	mul.w	r9, r9, r6
 8027328:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 802732c:	f609 0901 	addw	r9, r9, #2049	@ 0x801
 8027330:	44d1      	add	r9, sl
 8027332:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 8027336:	f108 0020 	add.w	r0, r8, #32
 802733a:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 802733e:	0a00      	lsrs	r0, r0, #8
 8027340:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027344:	4330      	orrs	r0, r6
 8027346:	b28e      	uxth	r6, r1
 8027348:	fa1f f98e 	uxth.w	r9, lr
 802734c:	fb06 f809 	mul.w	r8, r6, r9
 8027350:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8027354:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8027358:	0136      	lsls	r6, r6, #4
 802735a:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 802735e:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 8027362:	9601      	str	r6, [sp, #4]
 8027364:	ea4a 0404 	orr.w	r4, sl, r4
 8027368:	fa1f f689 	uxth.w	r6, r9
 802736c:	9602      	str	r6, [sp, #8]
 802736e:	4626      	mov	r6, r4
 8027370:	fb11 f90e 	smulbb	r9, r1, lr
 8027374:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8027378:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 802737c:	f1ce 0410 	rsb	r4, lr, #16
 8027380:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027384:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8027388:	1a64      	subs	r4, r4, r1
 802738a:	ea4a 0202 	orr.w	r2, sl, r2
 802738e:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 8027392:	434a      	muls	r2, r1
 8027394:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8027398:	fb04 2406 	mla	r4, r4, r6, r2
 802739c:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80273a0:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80273a4:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80273a8:	ea4a 0000 	orr.w	r0, sl, r0
 80273ac:	fb09 4200 	mla	r2, r9, r0, r4
 80273b0:	ea4f 440b 	mov.w	r4, fp, lsl #16
 80273b4:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 80273b8:	9801      	ldr	r0, [sp, #4]
 80273ba:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 80273be:	ea44 0b0b 	orr.w	fp, r4, fp
 80273c2:	9c02      	ldr	r4, [sp, #8]
 80273c4:	f5c0 7080 	rsb	r0, r0, #256	@ 0x100
 80273c8:	1b00      	subs	r0, r0, r4
 80273ca:	9c01      	ldr	r4, [sp, #4]
 80273cc:	b280      	uxth	r0, r0
 80273ce:	eba4 0608 	sub.w	r6, r4, r8
 80273d2:	b2b6      	uxth	r6, r6
 80273d4:	4373      	muls	r3, r6
 80273d6:	fb0c 3300 	mla	r3, ip, r0, r3
 80273da:	9802      	ldr	r0, [sp, #8]
 80273dc:	9903      	ldr	r1, [sp, #12]
 80273de:	fb00 3505 	mla	r5, r0, r5, r3
 80273e2:	fb08 5707 	mla	r7, r8, r7, r5
 80273e6:	ea6f 2727 	mvn.w	r7, r7, asr #8
 80273ea:	8809      	ldrh	r1, [r1, #0]
 80273ec:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 80273f0:	fb0e 2e0b 	mla	lr, lr, fp, r2
 80273f4:	120b      	asrs	r3, r1, #8
 80273f6:	b2ff      	uxtb	r7, r7
 80273f8:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 80273fc:	437b      	muls	r3, r7
 80273fe:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8027402:	10c8      	asrs	r0, r1, #3
 8027404:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8027408:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802740c:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8027410:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8027414:	00c9      	lsls	r1, r1, #3
 8027416:	4378      	muls	r0, r7
 8027418:	ea42 0e0e 	orr.w	lr, r2, lr
 802741c:	b2c9      	uxtb	r1, r1
 802741e:	fa1f f28e 	uxth.w	r2, lr
 8027422:	434f      	muls	r7, r1
 8027424:	1c59      	adds	r1, r3, #1
 8027426:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802742a:	1213      	asrs	r3, r2, #8
 802742c:	f023 0307 	bic.w	r3, r3, #7
 8027430:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8027434:	1c41      	adds	r1, r0, #1
 8027436:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802743a:	10d1      	asrs	r1, r2, #3
 802743c:	f021 0103 	bic.w	r1, r1, #3
 8027440:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8027444:	021b      	lsls	r3, r3, #8
 8027446:	00c9      	lsls	r1, r1, #3
 8027448:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802744c:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 8027450:	430b      	orrs	r3, r1
 8027452:	1c79      	adds	r1, r7, #1
 8027454:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8027458:	00d2      	lsls	r2, r2, #3
 802745a:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 802745e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8027462:	431a      	orrs	r2, r3
 8027464:	9b03      	ldr	r3, [sp, #12]
 8027466:	801a      	strh	r2, [r3, #0]
 8027468:	b005      	add	sp, #20
 802746a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802746e:	f04f 0c00 	mov.w	ip, #0
 8027472:	4664      	mov	r4, ip
 8027474:	e6e5      	b.n	8027242 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 8027476:	2300      	movs	r3, #0
 8027478:	469c      	mov	ip, r3
 802747a:	461a      	mov	r2, r3
 802747c:	461c      	mov	r4, r3
 802747e:	e707      	b.n	8027290 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8027480:	2300      	movs	r3, #0
 8027482:	461a      	mov	r2, r3
 8027484:	e704      	b.n	8027290 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8027486:	460b      	mov	r3, r1
 8027488:	460a      	mov	r2, r1
 802748a:	e701      	b.n	8027290 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 802748c:	2500      	movs	r5, #0
 802748e:	46ab      	mov	fp, r5
 8027490:	e72f      	b.n	80272f2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 8027492:	2700      	movs	r7, #0
 8027494:	463d      	mov	r5, r7
 8027496:	4638      	mov	r0, r7
 8027498:	46bb      	mov	fp, r7
 802749a:	e754      	b.n	8027346 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 802749c:	4677      	mov	r7, lr
 802749e:	4675      	mov	r5, lr
 80274a0:	4670      	mov	r0, lr
 80274a2:	46f3      	mov	fp, lr
 80274a4:	e74f      	b.n	8027346 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 80274a6:	2700      	movs	r7, #0
 80274a8:	4638      	mov	r0, r7
 80274aa:	e74c      	b.n	8027346 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 80274ac:	460f      	mov	r7, r1
 80274ae:	4608      	mov	r0, r1
 80274b0:	e749      	b.n	8027346 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

080274b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80274b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80274b8:	b093      	sub	sp, #76	@ 0x4c
 80274ba:	9210      	str	r2, [sp, #64]	@ 0x40
 80274bc:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80274be:	9011      	str	r0, [sp, #68]	@ 0x44
 80274c0:	6850      	ldr	r0, [r2, #4]
 80274c2:	910e      	str	r1, [sp, #56]	@ 0x38
 80274c4:	9306      	str	r3, [sp, #24]
 80274c6:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 80274ca:	fb00 1303 	mla	r3, r0, r3, r1
 80274ce:	6812      	ldr	r2, [r2, #0]
 80274d0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80274d4:	9307      	str	r3, [sp, #28]
 80274d6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80274d8:	681b      	ldr	r3, [r3, #0]
 80274da:	9308      	str	r3, [sp, #32]
 80274dc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80274de:	685b      	ldr	r3, [r3, #4]
 80274e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80274e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80274e4:	2b00      	cmp	r3, #0
 80274e6:	dc03      	bgt.n	80274f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80274e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80274ea:	2b00      	cmp	r3, #0
 80274ec:	f340 83b4 	ble.w	8027c58 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 80274f0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80274f2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80274f6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80274fa:	1e48      	subs	r0, r1, #1
 80274fc:	1e55      	subs	r5, r2, #1
 80274fe:	9b06      	ldr	r3, [sp, #24]
 8027500:	2b00      	cmp	r3, #0
 8027502:	f340 8163 	ble.w	80277cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8027506:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 8027508:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802750a:	1436      	asrs	r6, r6, #16
 802750c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8027510:	d406      	bmi.n	8027520 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8027512:	4286      	cmp	r6, r0
 8027514:	da04      	bge.n	8027520 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8027516:	2b00      	cmp	r3, #0
 8027518:	db02      	blt.n	8027520 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802751a:	42ab      	cmp	r3, r5
 802751c:	f2c0 8157 	blt.w	80277ce <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8027520:	3601      	adds	r6, #1
 8027522:	f100 8144 	bmi.w	80277ae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8027526:	42b1      	cmp	r1, r6
 8027528:	f2c0 8141 	blt.w	80277ae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 802752c:	3301      	adds	r3, #1
 802752e:	f100 813e 	bmi.w	80277ae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8027532:	429a      	cmp	r2, r3
 8027534:	f2c0 813b 	blt.w	80277ae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8027538:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 802753c:	9b06      	ldr	r3, [sp, #24]
 802753e:	9f07      	ldr	r7, [sp, #28]
 8027540:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027542:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027544:	2b00      	cmp	r3, #0
 8027546:	f340 8164 	ble.w	8027812 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 802754a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802754c:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 802754e:	1418      	asrs	r0, r3, #16
 8027550:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8027552:	142d      	asrs	r5, r5, #16
 8027554:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8027558:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802755a:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 802755e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027560:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8027564:	f100 81ee 	bmi.w	8027944 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8027568:	f102 3eff 	add.w	lr, r2, #4294967295
 802756c:	4575      	cmp	r5, lr
 802756e:	f280 81e9 	bge.w	8027944 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8027572:	2800      	cmp	r0, #0
 8027574:	f2c0 81e6 	blt.w	8027944 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8027578:	f103 3eff 	add.w	lr, r3, #4294967295
 802757c:	4570      	cmp	r0, lr
 802757e:	f280 81e1 	bge.w	8027944 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8027582:	b212      	sxth	r2, r2
 8027584:	fb00 5002 	mla	r0, r0, r2, r5
 8027588:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802758a:	fa1f fe81 	uxth.w	lr, r1
 802758e:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8027592:	eb03 0a00 	add.w	sl, r3, r0
 8027596:	f813 9000 	ldrb.w	r9, [r3, r0]
 802759a:	f5c5 7380 	rsb	r3, r5, #256	@ 0x100
 802759e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80275a2:	b29b      	uxth	r3, r3
 80275a4:	f1bc 0f00 	cmp.w	ip, #0
 80275a8:	f000 8179 	beq.w	802789e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 80275ac:	f81a 4002 	ldrb.w	r4, [sl, r2]
 80275b0:	eb0a 0b02 	add.w	fp, sl, r2
 80275b4:	fa1f fa8c 	uxth.w	sl, ip
 80275b8:	fb0a fe0e 	mul.w	lr, sl, lr
 80275bc:	eba5 050e 	sub.w	r5, r5, lr
 80275c0:	b2ad      	uxth	r5, r5
 80275c2:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 80275c6:	fb08 f505 	mul.w	r5, r8, r5
 80275ca:	fa1f fa8a 	uxth.w	sl, sl
 80275ce:	eba3 030a 	sub.w	r3, r3, sl
 80275d2:	b29b      	uxth	r3, r3
 80275d4:	940a      	str	r4, [sp, #40]	@ 0x28
 80275d6:	fb09 5303 	mla	r3, r9, r3, r5
 80275da:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80275de:	940b      	str	r4, [sp, #44]	@ 0x2c
 80275e0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80275e2:	fb0a 3304 	mla	r3, sl, r4, r3
 80275e6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80275e8:	fb0e 3304 	mla	r3, lr, r4, r3
 80275ec:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80275f0:	2b00      	cmp	r3, #0
 80275f2:	f000 80cf 	beq.w	8027794 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 80275f6:	9c08      	ldr	r4, [sp, #32]
 80275f8:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80275fc:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8027600:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8027604:	f000 8150 	beq.w	80278a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8027608:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 802760c:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8027610:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027614:	fb09 f000 	mul.w	r0, r9, r0
 8027618:	fb0a fe0e 	mul.w	lr, sl, lr
 802761c:	f100 0b20 	add.w	fp, r0, #32
 8027620:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8027624:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8027628:	44ce      	add	lr, r9
 802762a:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 802762e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027632:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8027636:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 802763a:	ea4e 0909 	orr.w	r9, lr, r9
 802763e:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8027642:	8868      	ldrh	r0, [r5, #2]
 8027644:	d019      	beq.n	802767a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8027646:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 802764a:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802764e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027652:	fb08 f800 	mul.w	r8, r8, r0
 8027656:	fb0a fe0e 	mul.w	lr, sl, lr
 802765a:	f108 0b20 	add.w	fp, r8, #32
 802765e:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8027662:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8027666:	4486      	add	lr, r0
 8027668:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 802766c:	0a00      	lsrs	r0, r0, #8
 802766e:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8027672:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027676:	ea4e 0000 	orr.w	r0, lr, r0
 802767a:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 802767e:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8027682:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 8027686:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 802768a:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 802768e:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8027692:	ea4e 0909 	orr.w	r9, lr, r9
 8027696:	ea4a 0000 	orr.w	r0, sl, r0
 802769a:	f1bc 0f00 	cmp.w	ip, #0
 802769e:	f000 8105 	beq.w	80278ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 80276a2:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 80276a6:	3a01      	subs	r2, #1
 80276a8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80276aa:	0052      	lsls	r2, r2, #1
 80276ac:	3202      	adds	r2, #2
 80276ae:	2cff      	cmp	r4, #255	@ 0xff
 80276b0:	eb05 0e02 	add.w	lr, r5, r2
 80276b4:	5aaa      	ldrh	r2, [r5, r2]
 80276b6:	d018      	beq.n	80276ea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 80276b8:	f422 65fc 	bic.w	r5, r2, #2016	@ 0x7e0
 80276bc:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80276c0:	fb04 fa02 	mul.w	sl, r4, r2
 80276c4:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80276c8:	fb08 f805 	mul.w	r8, r8, r5
 80276cc:	f10a 0520 	add.w	r5, sl, #32
 80276d0:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 80276d4:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 80276d8:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 80276dc:	4442      	add	r2, r8
 80276de:	0a2d      	lsrs	r5, r5, #8
 80276e0:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 80276e4:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80276e8:	432a      	orrs	r2, r5
 80276ea:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80276ec:	f8be 5002 	ldrh.w	r5, [lr, #2]
 80276f0:	2cff      	cmp	r4, #255	@ 0xff
 80276f2:	d01a      	beq.n	802772a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80276f4:	f425 6efc 	bic.w	lr, r5, #2016	@ 0x7e0
 80276f8:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80276fc:	fb04 fa05 	mul.w	sl, r4, r5
 8027700:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027704:	fb08 f80e 	mul.w	r8, r8, lr
 8027708:	f10a 0e20 	add.w	lr, sl, #32
 802770c:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8027710:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8027714:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8027718:	4445      	add	r5, r8
 802771a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802771e:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8027722:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 8027726:	ea45 050e 	orr.w	r5, r5, lr
 802772a:	fb1c fe01 	smulbb	lr, ip, r1
 802772e:	f1cc 0810 	rsb	r8, ip, #16
 8027732:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8027736:	eba8 0801 	sub.w	r8, r8, r1
 802773a:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 802773e:	4341      	muls	r1, r0
 8027740:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8027744:	fb09 1108 	mla	r1, r9, r8, r1
 8027748:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 802774c:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027750:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8027754:	ea4a 0202 	orr.w	r2, sl, r2
 8027758:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 802775c:	fb0c 1102 	mla	r1, ip, r2, r1
 8027760:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8027764:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8027768:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 802776c:	ea4b 0505 	orr.w	r5, fp, r5
 8027770:	fb0e 1e05 	mla	lr, lr, r5, r1
 8027774:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8027778:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 802777c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8027780:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8027784:	ea42 0e0e 	orr.w	lr, r2, lr
 8027788:	fa1f f28e 	uxth.w	r2, lr
 802778c:	2bff      	cmp	r3, #255	@ 0xff
 802778e:	f040 80a1 	bne.w	80278d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8027792:	803a      	strh	r2, [r7, #0]
 8027794:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8027796:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8027798:	3702      	adds	r7, #2
 802779a:	4413      	add	r3, r2
 802779c:	931d      	str	r3, [sp, #116]	@ 0x74
 802779e:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80277a0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80277a2:	441a      	add	r2, r3
 80277a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80277a6:	921e      	str	r2, [sp, #120]	@ 0x78
 80277a8:	3b01      	subs	r3, #1
 80277aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80277ac:	e6c9      	b.n	8027542 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80277ae:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80277b0:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 80277b2:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
 80277b4:	4433      	add	r3, r6
 80277b6:	931d      	str	r3, [sp, #116]	@ 0x74
 80277b8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80277ba:	441c      	add	r4, r3
 80277bc:	9b06      	ldr	r3, [sp, #24]
 80277be:	941e      	str	r4, [sp, #120]	@ 0x78
 80277c0:	3b01      	subs	r3, #1
 80277c2:	9306      	str	r3, [sp, #24]
 80277c4:	9b07      	ldr	r3, [sp, #28]
 80277c6:	3302      	adds	r3, #2
 80277c8:	9307      	str	r3, [sp, #28]
 80277ca:	e698      	b.n	80274fe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80277cc:	d028      	beq.n	8027820 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80277ce:	9b06      	ldr	r3, [sp, #24]
 80277d0:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 80277d2:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 80277d4:	3b01      	subs	r3, #1
 80277d6:	fb00 5003 	mla	r0, r0, r3, r5
 80277da:	1400      	asrs	r0, r0, #16
 80277dc:	f53f aeac 	bmi.w	8027538 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80277e0:	3901      	subs	r1, #1
 80277e2:	4288      	cmp	r0, r1
 80277e4:	f6bf aea8 	bge.w	8027538 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80277e8:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80277ea:	981e      	ldr	r0, [sp, #120]	@ 0x78
 80277ec:	fb01 0303 	mla	r3, r1, r3, r0
 80277f0:	141b      	asrs	r3, r3, #16
 80277f2:	f53f aea1 	bmi.w	8027538 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80277f6:	3a01      	subs	r2, #1
 80277f8:	4293      	cmp	r3, r2
 80277fa:	f6bf ae9d 	bge.w	8027538 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80277fe:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 8027802:	9b06      	ldr	r3, [sp, #24]
 8027804:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8027808:	930f      	str	r3, [sp, #60]	@ 0x3c
 802780a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802780c:	2b00      	cmp	r3, #0
 802780e:	f300 80b6 	bgt.w	802797e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ca>
 8027812:	9b06      	ldr	r3, [sp, #24]
 8027814:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8027818:	9b07      	ldr	r3, [sp, #28]
 802781a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802781e:	9307      	str	r3, [sp, #28]
 8027820:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027822:	2b00      	cmp	r3, #0
 8027824:	f340 8218 	ble.w	8027c58 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 8027828:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802782c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027830:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027834:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027838:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802783c:	eef0 6a62 	vmov.f32	s13, s5
 8027840:	ee31 1a05 	vadd.f32	s2, s2, s10
 8027844:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027848:	ee61 7a27 	vmul.f32	s15, s2, s15
 802784c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027850:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027854:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 8027858:	eef0 6a43 	vmov.f32	s13, s6
 802785c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027860:	ee12 2a90 	vmov	r2, s5
 8027864:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8027868:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802786a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802786e:	fb92 f3f3 	sdiv	r3, r2, r3
 8027872:	ee13 2a10 	vmov	r2, s6
 8027876:	931f      	str	r3, [sp, #124]	@ 0x7c
 8027878:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802787a:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 802787e:	fb92 f3f3 	sdiv	r3, r2, r3
 8027882:	9320      	str	r3, [sp, #128]	@ 0x80
 8027884:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027886:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8027888:	3b01      	subs	r3, #1
 802788a:	930e      	str	r3, [sp, #56]	@ 0x38
 802788c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802788e:	bf08      	it	eq
 8027890:	4613      	moveq	r3, r2
 8027892:	eeb0 3a67 	vmov.f32	s6, s15
 8027896:	9306      	str	r3, [sp, #24]
 8027898:	eef0 2a47 	vmov.f32	s5, s14
 802789c:	e621      	b.n	80274e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 802789e:	fb08 f505 	mul.w	r5, r8, r5
 80278a2:	fb09 5303 	mla	r3, r9, r3, r5
 80278a6:	e6a1      	b.n	80275ec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80278a8:	4681      	mov	r9, r0
 80278aa:	e6c8      	b.n	802763e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80278ac:	f1c1 0210 	rsb	r2, r1, #16
 80278b0:	4341      	muls	r1, r0
 80278b2:	fb09 1902 	mla	r9, r9, r2, r1
 80278b6:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80278ba:	ea4f 5259 	mov.w	r2, r9, lsr #21
 80278be:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80278c2:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80278c6:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 80278ca:	ea42 0909 	orr.w	r9, r2, r9
 80278ce:	fa1f f289 	uxth.w	r2, r9
 80278d2:	e75b      	b.n	802778c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80278d4:	43db      	mvns	r3, r3
 80278d6:	f8b7 c000 	ldrh.w	ip, [r7]
 80278da:	fa5f fe83 	uxtb.w	lr, r3
 80278de:	ea4f 202c 	mov.w	r0, ip, asr #8
 80278e2:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 80278e6:	fb00 f00e 	mul.w	r0, r0, lr
 80278ea:	ea4f 05ec 	mov.w	r5, ip, asr #3
 80278ee:	1c41      	adds	r1, r0, #1
 80278f0:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 80278f4:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80278f8:	fb05 f50e 	mul.w	r5, r5, lr
 80278fc:	1211      	asrs	r1, r2, #8
 80278fe:	f021 0107 	bic.w	r1, r1, #7
 8027902:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8027906:	48d6      	ldr	r0, [pc, #856]	@ (8027c60 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 8027908:	b2c9      	uxtb	r1, r1
 802790a:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 802790e:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8027912:	1c69      	adds	r1, r5, #1
 8027914:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8027918:	b2db      	uxtb	r3, r3
 802791a:	10d1      	asrs	r1, r2, #3
 802791c:	fb03 f30e 	mul.w	r3, r3, lr
 8027920:	f021 0103 	bic.w	r1, r1, #3
 8027924:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8027928:	00c9      	lsls	r1, r1, #3
 802792a:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802792e:	4301      	orrs	r1, r0
 8027930:	1c58      	adds	r0, r3, #1
 8027932:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8027936:	00d2      	lsls	r2, r2, #3
 8027938:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802793c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8027940:	430a      	orrs	r2, r1
 8027942:	e726      	b.n	8027792 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2de>
 8027944:	f115 0e01 	adds.w	lr, r5, #1
 8027948:	f53f af24 	bmi.w	8027794 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 802794c:	4572      	cmp	r2, lr
 802794e:	f6ff af21 	blt.w	8027794 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8027952:	f110 0e01 	adds.w	lr, r0, #1
 8027956:	f53f af1d 	bmi.w	8027794 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 802795a:	4573      	cmp	r3, lr
 802795c:	f6ff af1a 	blt.w	8027794 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8027960:	b21b      	sxth	r3, r3
 8027962:	b212      	sxth	r2, r2
 8027964:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8027968:	e9cd 5002 	strd	r5, r0, [sp, #8]
 802796c:	9301      	str	r3, [sp, #4]
 802796e:	9200      	str	r2, [sp, #0]
 8027970:	4639      	mov	r1, r7
 8027972:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8027976:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8027978:	f7ff fc24 	bl	80271c4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 802797c:	e70a      	b.n	8027794 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 802797e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8027980:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8027984:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8027986:	fa1f fc82 	uxth.w	ip, r2
 802798a:	f3c3 3503 	ubfx	r5, r3, #12, #4
 802798e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027990:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8027994:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027998:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802799a:	141f      	asrs	r7, r3, #16
 802799c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802799e:	141b      	asrs	r3, r3, #16
 80279a0:	fb01 3707 	mla	r7, r1, r7, r3
 80279a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80279a6:	eb03 0a07 	add.w	sl, r3, r7
 80279aa:	f813 9007 	ldrb.w	r9, [r3, r7]
 80279ae:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 80279b2:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80279b6:	b29b      	uxth	r3, r3
 80279b8:	2d00      	cmp	r5, #0
 80279ba:	f000 80fe 	beq.w	8027bba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 80279be:	f81a 4001 	ldrb.w	r4, [sl, r1]
 80279c2:	eb0a 0b01 	add.w	fp, sl, r1
 80279c6:	fa1f fa85 	uxth.w	sl, r5
 80279ca:	fb0a fc0c 	mul.w	ip, sl, ip
 80279ce:	eba0 000c 	sub.w	r0, r0, ip
 80279d2:	b280      	uxth	r0, r0
 80279d4:	fb08 f000 	mul.w	r0, r8, r0
 80279d8:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 80279dc:	fa1f fa8a 	uxth.w	sl, sl
 80279e0:	eba3 030a 	sub.w	r3, r3, sl
 80279e4:	b29b      	uxth	r3, r3
 80279e6:	fb09 0303 	mla	r3, r9, r3, r0
 80279ea:	940c      	str	r4, [sp, #48]	@ 0x30
 80279ec:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80279ee:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80279f2:	fb0a 3300 	mla	r3, sl, r0, r3
 80279f6:	fb0c 3304 	mla	r3, ip, r4, r3
 80279fa:	940d      	str	r4, [sp, #52]	@ 0x34
 80279fc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027a00:	2b00      	cmp	r3, #0
 8027a02:	f000 80cc 	beq.w	8027b9e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 8027a06:	9808      	ldr	r0, [sp, #32]
 8027a08:	9c08      	ldr	r4, [sp, #32]
 8027a0a:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8027a0e:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8027a12:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8027a16:	f000 80d5 	beq.w	8027bc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 8027a1a:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 8027a1e:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8027a22:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8027a26:	fb09 f707 	mul.w	r7, r9, r7
 8027a2a:	fb0a fc0c 	mul.w	ip, sl, ip
 8027a2e:	f107 0b20 	add.w	fp, r7, #32
 8027a32:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8027a36:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 8027a3a:	44cc      	add	ip, r9
 8027a3c:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8027a40:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027a44:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8027a48:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8027a4c:	ea4c 0909 	orr.w	r9, ip, r9
 8027a50:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8027a54:	8847      	ldrh	r7, [r0, #2]
 8027a56:	d019      	beq.n	8027a8c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d8>
 8027a58:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 8027a5c:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8027a60:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8027a64:	fb08 f807 	mul.w	r8, r8, r7
 8027a68:	fb0a fc0c 	mul.w	ip, sl, ip
 8027a6c:	f108 0b20 	add.w	fp, r8, #32
 8027a70:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8027a74:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 8027a78:	44bc      	add	ip, r7
 8027a7a:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8027a7e:	0a3f      	lsrs	r7, r7, #8
 8027a80:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8027a84:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8027a88:	ea4c 0707 	orr.w	r7, ip, r7
 8027a8c:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8027a90:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8027a94:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8027a98:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8027a9c:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027aa0:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 8027aa4:	ea4c 0909 	orr.w	r9, ip, r9
 8027aa8:	ea4a 0707 	orr.w	r7, sl, r7
 8027aac:	2d00      	cmp	r5, #0
 8027aae:	f000 808b 	beq.w	8027bc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 8027ab2:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8027ab6:	3901      	subs	r1, #1
 8027ab8:	0049      	lsls	r1, r1, #1
 8027aba:	3102      	adds	r1, #2
 8027abc:	eb00 0c01 	add.w	ip, r0, r1
 8027ac0:	5a41      	ldrh	r1, [r0, r1]
 8027ac2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8027ac4:	28ff      	cmp	r0, #255	@ 0xff
 8027ac6:	d019      	beq.n	8027afc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x648>
 8027ac8:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8027aca:	f421 60fc 	bic.w	r0, r1, #2016	@ 0x7e0
 8027ace:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8027ad2:	fb04 fa01 	mul.w	sl, r4, r1
 8027ad6:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027ada:	fb08 f800 	mul.w	r8, r8, r0
 8027ade:	f10a 0020 	add.w	r0, sl, #32
 8027ae2:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8027ae6:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8027aea:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8027aee:	4441      	add	r1, r8
 8027af0:	0a00      	lsrs	r0, r0, #8
 8027af2:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8027af6:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027afa:	4301      	orrs	r1, r0
 8027afc:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8027afe:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8027b02:	2cff      	cmp	r4, #255	@ 0xff
 8027b04:	d01a      	beq.n	8027b3c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x688>
 8027b06:	f420 6cfc 	bic.w	ip, r0, #2016	@ 0x7e0
 8027b0a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027b0e:	fb04 fa00 	mul.w	sl, r4, r0
 8027b12:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027b16:	fb08 f80c 	mul.w	r8, r8, ip
 8027b1a:	f10a 0c20 	add.w	ip, sl, #32
 8027b1e:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8027b22:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8027b26:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8027b2a:	4440      	add	r0, r8
 8027b2c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027b30:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8027b34:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8027b38:	ea40 000c 	orr.w	r0, r0, ip
 8027b3c:	fb15 fc02 	smulbb	ip, r5, r2
 8027b40:	f1c5 0810 	rsb	r8, r5, #16
 8027b44:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8027b48:	eba8 0802 	sub.w	r8, r8, r2
 8027b4c:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8027b50:	437a      	muls	r2, r7
 8027b52:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8027b56:	fb09 2208 	mla	r2, r9, r8, r2
 8027b5a:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8027b5e:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027b62:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8027b66:	ea4a 0101 	orr.w	r1, sl, r1
 8027b6a:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8027b6e:	fb05 2201 	mla	r2, r5, r1, r2
 8027b72:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8027b76:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8027b7a:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8027b7e:	ea4b 0000 	orr.w	r0, fp, r0
 8027b82:	fb0c 2200 	mla	r2, ip, r0, r2
 8027b86:	0d57      	lsrs	r7, r2, #21
 8027b88:	0952      	lsrs	r2, r2, #5
 8027b8a:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8027b8e:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8027b92:	433a      	orrs	r2, r7
 8027b94:	2bff      	cmp	r3, #255	@ 0xff
 8027b96:	b292      	uxth	r2, r2
 8027b98:	d127      	bne.n	8027bea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 8027b9a:	f8ae 2000 	strh.w	r2, [lr]
 8027b9e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8027ba0:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8027ba2:	f10e 0e02 	add.w	lr, lr, #2
 8027ba6:	4413      	add	r3, r2
 8027ba8:	931d      	str	r3, [sp, #116]	@ 0x74
 8027baa:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8027bac:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027bae:	441a      	add	r2, r3
 8027bb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027bb2:	921e      	str	r2, [sp, #120]	@ 0x78
 8027bb4:	3b01      	subs	r3, #1
 8027bb6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027bb8:	e627      	b.n	802780a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8027bba:	fb08 f000 	mul.w	r0, r8, r0
 8027bbe:	fb09 0303 	mla	r3, r9, r3, r0
 8027bc2:	e71b      	b.n	80279fc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x548>
 8027bc4:	46b9      	mov	r9, r7
 8027bc6:	e743      	b.n	8027a50 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59c>
 8027bc8:	f1c2 0110 	rsb	r1, r2, #16
 8027bcc:	437a      	muls	r2, r7
 8027bce:	fb09 2901 	mla	r9, r9, r1, r2
 8027bd2:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8027bd6:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8027bda:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8027bde:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027be2:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8027be6:	4302      	orrs	r2, r0
 8027be8:	e7d4      	b.n	8027b94 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 8027bea:	43db      	mvns	r3, r3
 8027bec:	f8be 7000 	ldrh.w	r7, [lr]
 8027bf0:	fa5f fc83 	uxtb.w	ip, r3
 8027bf4:	1238      	asrs	r0, r7, #8
 8027bf6:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8027bfa:	fb00 f00c 	mul.w	r0, r0, ip
 8027bfe:	10fd      	asrs	r5, r7, #3
 8027c00:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8027c04:	fb05 f10c 	mul.w	r1, r5, ip
 8027c08:	1c45      	adds	r5, r0, #1
 8027c0a:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8027c0e:	1215      	asrs	r5, r2, #8
 8027c10:	f025 0507 	bic.w	r5, r5, #7
 8027c14:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8027c18:	00fb      	lsls	r3, r7, #3
 8027c1a:	1c4d      	adds	r5, r1, #1
 8027c1c:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8027c20:	b2db      	uxtb	r3, r3
 8027c22:	10d1      	asrs	r1, r2, #3
 8027c24:	fb03 f30c 	mul.w	r3, r3, ip
 8027c28:	f021 0103 	bic.w	r1, r1, #3
 8027c2c:	4c0c      	ldr	r4, [pc, #48]	@ (8027c60 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 8027c2e:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8027c32:	b2c0      	uxtb	r0, r0
 8027c34:	00c9      	lsls	r1, r1, #3
 8027c36:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8027c3a:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 8027c3e:	4308      	orrs	r0, r1
 8027c40:	1c59      	adds	r1, r3, #1
 8027c42:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8027c46:	00d2      	lsls	r2, r2, #3
 8027c48:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027c4c:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8027c50:	4318      	orrs	r0, r3
 8027c52:	f8ae 0000 	strh.w	r0, [lr]
 8027c56:	e7a2      	b.n	8027b9e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 8027c58:	b013      	add	sp, #76	@ 0x4c
 8027c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027c5e:	bf00      	nop
 8027c60:	fffff800 	.word	0xfffff800

08027c64 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8027c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027c68:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	@ 0x24
 8027c6c:	fb05 4c03 	mla	ip, r5, r3, r4
 8027c70:	2d00      	cmp	r5, #0
 8027c72:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 8027c76:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 8027c7a:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 8027c7e:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
 8027c82:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 8027c86:	8808      	ldrh	r0, [r1, #0]
 8027c88:	f2c0 80a7 	blt.w	8027dda <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8027c8c:	45aa      	cmp	sl, r5
 8027c8e:	f340 80a4 	ble.w	8027dda <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8027c92:	2c00      	cmp	r4, #0
 8027c94:	f2c0 809f 	blt.w	8027dd6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8027c98:	42a3      	cmp	r3, r4
 8027c9a:	f340 809c 	ble.w	8027dd6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8027c9e:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 8027ca2:	1c62      	adds	r2, r4, #1
 8027ca4:	f100 809c 	bmi.w	8027de0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8027ca8:	4293      	cmp	r3, r2
 8027caa:	f340 8099 	ble.w	8027de0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8027cae:	f1b9 0f00 	cmp.w	r9, #0
 8027cb2:	f000 8095 	beq.w	8027de0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8027cb6:	f8be c002 	ldrh.w	ip, [lr, #2]
 8027cba:	3501      	adds	r5, #1
 8027cbc:	f100 8094 	bmi.w	8027de8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8027cc0:	45aa      	cmp	sl, r5
 8027cc2:	f340 8091 	ble.w	8027de8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8027cc6:	2f00      	cmp	r7, #0
 8027cc8:	f000 808e 	beq.w	8027de8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8027ccc:	2c00      	cmp	r4, #0
 8027cce:	f2c0 8089 	blt.w	8027de4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8027cd2:	42a3      	cmp	r3, r4
 8027cd4:	f340 8086 	ble.w	8027de4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8027cd8:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 8027cdc:	3401      	adds	r4, #1
 8027cde:	f100 8086 	bmi.w	8027dee <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8027ce2:	42a3      	cmp	r3, r4
 8027ce4:	f340 8083 	ble.w	8027dee <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8027ce8:	f1b9 0f00 	cmp.w	r9, #0
 8027cec:	d07f      	beq.n	8027dee <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8027cee:	3301      	adds	r3, #1
 8027cf0:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 8027cf4:	fb19 fe07 	smulbb	lr, r9, r7
 8027cf8:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8027cfc:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8027d00:	f428 68fc 	bic.w	r8, r8, #2016	@ 0x7e0
 8027d04:	ea44 0808 	orr.w	r8, r4, r8
 8027d08:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8027d0c:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8027d10:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8027d14:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8027d18:	ea44 0c0c 	orr.w	ip, r4, ip
 8027d1c:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8027d20:	fb04 f40c 	mul.w	r4, r4, ip
 8027d24:	f1c7 0210 	rsb	r2, r7, #16
 8027d28:	eba2 0209 	sub.w	r2, r2, r9
 8027d2c:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8027d30:	fb02 4808 	mla	r8, r2, r8, r4
 8027d34:	b2b4      	uxth	r4, r6
 8027d36:	43f6      	mvns	r6, r6
 8027d38:	041a      	lsls	r2, r3, #16
 8027d3a:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8027d3e:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8027d42:	4313      	orrs	r3, r2
 8027d44:	fb0e 8303 	mla	r3, lr, r3, r8
 8027d48:	042a      	lsls	r2, r5, #16
 8027d4a:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8027d4e:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8027d52:	432a      	orrs	r2, r5
 8027d54:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8027d58:	fb07 3202 	mla	r2, r7, r2, r3
 8027d5c:	0d53      	lsrs	r3, r2, #21
 8027d5e:	0952      	lsrs	r2, r2, #5
 8027d60:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8027d64:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8027d68:	431a      	orrs	r2, r3
 8027d6a:	b293      	uxth	r3, r2
 8027d6c:	1202      	asrs	r2, r0, #8
 8027d6e:	b2f6      	uxtb	r6, r6
 8027d70:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8027d74:	fb12 f206 	smulbb	r2, r2, r6
 8027d78:	10c7      	asrs	r7, r0, #3
 8027d7a:	00c0      	lsls	r0, r0, #3
 8027d7c:	b2c0      	uxtb	r0, r0
 8027d7e:	121d      	asrs	r5, r3, #8
 8027d80:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8027d84:	fb10 f006 	smulbb	r0, r0, r6
 8027d88:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8027d8c:	fb17 f706 	smulbb	r7, r7, r6
 8027d90:	fb05 2504 	mla	r5, r5, r4, r2
 8027d94:	10da      	asrs	r2, r3, #3
 8027d96:	00db      	lsls	r3, r3, #3
 8027d98:	b2db      	uxtb	r3, r3
 8027d9a:	fb03 0004 	mla	r0, r3, r4, r0
 8027d9e:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8027da2:	fb02 7204 	mla	r2, r2, r4, r7
 8027da6:	b2ad      	uxth	r5, r5
 8027da8:	b280      	uxth	r0, r0
 8027daa:	1c6b      	adds	r3, r5, #1
 8027dac:	b292      	uxth	r2, r2
 8027dae:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8027db2:	1c43      	adds	r3, r0, #1
 8027db4:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8027db8:	1c50      	adds	r0, r2, #1
 8027dba:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8027dbe:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8027dc2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027dc6:	0952      	lsrs	r2, r2, #5
 8027dc8:	432b      	orrs	r3, r5
 8027dca:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8027dce:	4313      	orrs	r3, r2
 8027dd0:	800b      	strh	r3, [r1, #0]
 8027dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027dd6:	4680      	mov	r8, r0
 8027dd8:	e763      	b.n	8027ca2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 8027dda:	4684      	mov	ip, r0
 8027ddc:	4680      	mov	r8, r0
 8027dde:	e76c      	b.n	8027cba <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8027de0:	4684      	mov	ip, r0
 8027de2:	e76a      	b.n	8027cba <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8027de4:	4605      	mov	r5, r0
 8027de6:	e779      	b.n	8027cdc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 8027de8:	4603      	mov	r3, r0
 8027dea:	4605      	mov	r5, r0
 8027dec:	e782      	b.n	8027cf4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 8027dee:	4603      	mov	r3, r0
 8027df0:	e780      	b.n	8027cf4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

08027df2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027df2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027df6:	b093      	sub	sp, #76	@ 0x4c
 8027df8:	461d      	mov	r5, r3
 8027dfa:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 8027dfe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8027e00:	910a      	str	r1, [sp, #40]	@ 0x28
 8027e02:	9210      	str	r2, [sp, #64]	@ 0x40
 8027e04:	6859      	ldr	r1, [r3, #4]
 8027e06:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
 8027e0a:	681b      	ldr	r3, [r3, #0]
 8027e0c:	920b      	str	r2, [sp, #44]	@ 0x2c
 8027e0e:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	@ 0x88
 8027e12:	fb01 2707 	mla	r7, r1, r7, r2
 8027e16:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8027e1a:	9307      	str	r3, [sp, #28]
 8027e1c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027e1e:	9011      	str	r0, [sp, #68]	@ 0x44
 8027e20:	681b      	ldr	r3, [r3, #0]
 8027e22:	9309      	str	r3, [sp, #36]	@ 0x24
 8027e24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8027e26:	43db      	mvns	r3, r3
 8027e28:	b2db      	uxtb	r3, r3
 8027e2a:	9308      	str	r3, [sp, #32]
 8027e2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027e2e:	2b00      	cmp	r3, #0
 8027e30:	dc03      	bgt.n	8027e3a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8027e32:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8027e34:	2b00      	cmp	r3, #0
 8027e36:	f340 8203 	ble.w	8028240 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8027e3a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027e3c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027e40:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027e44:	1e48      	subs	r0, r1, #1
 8027e46:	f102 3cff 	add.w	ip, r2, #4294967295
 8027e4a:	2d00      	cmp	r5, #0
 8027e4c:	f340 80da 	ble.w	8028004 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8027e50:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8027e54:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027e58:	d406      	bmi.n	8027e68 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8027e5a:	4586      	cmp	lr, r0
 8027e5c:	da04      	bge.n	8027e68 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8027e5e:	2b00      	cmp	r3, #0
 8027e60:	db02      	blt.n	8027e68 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8027e62:	4563      	cmp	r3, ip
 8027e64:	f2c0 80cf 	blt.w	8028006 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8027e68:	f11e 0e01 	adds.w	lr, lr, #1
 8027e6c:	f100 80c1 	bmi.w	8027ff2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8027e70:	4571      	cmp	r1, lr
 8027e72:	f2c0 80be 	blt.w	8027ff2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8027e76:	3301      	adds	r3, #1
 8027e78:	f100 80bb 	bmi.w	8027ff2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8027e7c:	429a      	cmp	r2, r3
 8027e7e:	f2c0 80b8 	blt.w	8027ff2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8027e82:	46a9      	mov	r9, r5
 8027e84:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8027e88:	f1b9 0f00 	cmp.w	r9, #0
 8027e8c:	f340 80d8 	ble.w	8028040 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8027e90:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027e92:	1421      	asrs	r1, r4, #16
 8027e94:	ea4f 4026 	mov.w	r0, r6, asr #16
 8027e98:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027e9c:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8027ea0:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8027ea4:	f100 8111 	bmi.w	80280ca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8027ea8:	f10e 3aff 	add.w	sl, lr, #4294967295
 8027eac:	4551      	cmp	r1, sl
 8027eae:	f280 810c 	bge.w	80280ca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8027eb2:	2800      	cmp	r0, #0
 8027eb4:	f2c0 8109 	blt.w	80280ca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8027eb8:	f103 3aff 	add.w	sl, r3, #4294967295
 8027ebc:	4550      	cmp	r0, sl
 8027ebe:	f280 8104 	bge.w	80280ca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8027ec2:	fa0f f38e 	sxth.w	r3, lr
 8027ec6:	fb00 1103 	mla	r1, r0, r3, r1
 8027eca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8027ecc:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8027ed0:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8027ed4:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8027ed8:	f1bc 0f00 	cmp.w	ip, #0
 8027edc:	d007      	beq.n	8027eee <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 8027ede:	005b      	lsls	r3, r3, #1
 8027ee0:	eb0a 0003 	add.w	r0, sl, r3
 8027ee4:	f83a 3003 	ldrh.w	r3, [sl, r3]
 8027ee8:	930c      	str	r3, [sp, #48]	@ 0x30
 8027eea:	8843      	ldrh	r3, [r0, #2]
 8027eec:	930d      	str	r3, [sp, #52]	@ 0x34
 8027eee:	fb12 f30c 	smulbb	r3, r2, ip
 8027ef2:	ea4f 400e 	mov.w	r0, lr, lsl #16
 8027ef6:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8027efa:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8027efe:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8027f02:	10db      	asrs	r3, r3, #3
 8027f04:	ea40 000e 	orr.w	r0, r0, lr
 8027f08:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027f0c:	f1cc 0e10 	rsb	lr, ip, #16
 8027f10:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8027f14:	ebae 0e02 	sub.w	lr, lr, r2
 8027f18:	ea4a 0101 	orr.w	r1, sl, r1
 8027f1c:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8027f20:	4351      	muls	r1, r2
 8027f22:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8027f26:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8027f28:	fb0e 1e00 	mla	lr, lr, r0, r1
 8027f2c:	0410      	lsls	r0, r2, #16
 8027f2e:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8027f32:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8027f36:	4310      	orrs	r0, r2
 8027f38:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8027f3a:	fb03 e000 	mla	r0, r3, r0, lr
 8027f3e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8027f40:	0412      	lsls	r2, r2, #16
 8027f42:	f421 6efc 	bic.w	lr, r1, #2016	@ 0x7e0
 8027f46:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8027f4a:	ea42 020e 	orr.w	r2, r2, lr
 8027f4e:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8027f52:	fb03 0302 	mla	r3, r3, r2, r0
 8027f56:	f8b8 0000 	ldrh.w	r0, [r8]
 8027f5a:	9f08      	ldr	r7, [sp, #32]
 8027f5c:	0d5a      	lsrs	r2, r3, #21
 8027f5e:	1201      	asrs	r1, r0, #8
 8027f60:	095b      	lsrs	r3, r3, #5
 8027f62:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8027f66:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8027f6a:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8027f6e:	4313      	orrs	r3, r2
 8027f70:	fb11 f107 	smulbb	r1, r1, r7
 8027f74:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8027f78:	00c0      	lsls	r0, r0, #3
 8027f7a:	b29b      	uxth	r3, r3
 8027f7c:	b2c0      	uxtb	r0, r0
 8027f7e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8027f82:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8027f86:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8027f8a:	fb10 f007 	smulbb	r0, r0, r7
 8027f8e:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8027f92:	fb1e fe07 	smulbb	lr, lr, r7
 8027f96:	fb0c 1c02 	mla	ip, ip, r2, r1
 8027f9a:	10d9      	asrs	r1, r3, #3
 8027f9c:	00db      	lsls	r3, r3, #3
 8027f9e:	b2db      	uxtb	r3, r3
 8027fa0:	fb03 0302 	mla	r3, r3, r2, r0
 8027fa4:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8027fa8:	fb01 e102 	mla	r1, r1, r2, lr
 8027fac:	fa1f fc8c 	uxth.w	ip, ip
 8027fb0:	b29a      	uxth	r2, r3
 8027fb2:	f10c 0301 	add.w	r3, ip, #1
 8027fb6:	b289      	uxth	r1, r1
 8027fb8:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8027fbc:	1c53      	adds	r3, r2, #1
 8027fbe:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027fc2:	1c4a      	adds	r2, r1, #1
 8027fc4:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8027fc8:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8027fcc:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027fd0:	0949      	lsrs	r1, r1, #5
 8027fd2:	ea43 030c 	orr.w	r3, r3, ip
 8027fd6:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8027fda:	430b      	orrs	r3, r1
 8027fdc:	f8a8 3000 	strh.w	r3, [r8]
 8027fe0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8027fe2:	f108 0802 	add.w	r8, r8, #2
 8027fe6:	441c      	add	r4, r3
 8027fe8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027fea:	f109 39ff 	add.w	r9, r9, #4294967295
 8027fee:	441e      	add	r6, r3
 8027ff0:	e74a      	b.n	8027e88 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8027ff2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8027ff4:	3d01      	subs	r5, #1
 8027ff6:	441c      	add	r4, r3
 8027ff8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027ffa:	441e      	add	r6, r3
 8027ffc:	9b07      	ldr	r3, [sp, #28]
 8027ffe:	3302      	adds	r3, #2
 8028000:	9307      	str	r3, [sp, #28]
 8028002:	e722      	b.n	8027e4a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8028004:	d022      	beq.n	802804c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8028006:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8028008:	1e6b      	subs	r3, r5, #1
 802800a:	fb00 4003 	mla	r0, r0, r3, r4
 802800e:	1400      	asrs	r0, r0, #16
 8028010:	f53f af37 	bmi.w	8027e82 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8028014:	3901      	subs	r1, #1
 8028016:	4288      	cmp	r0, r1
 8028018:	f6bf af33 	bge.w	8027e82 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802801c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 802801e:	fb01 6303 	mla	r3, r1, r3, r6
 8028022:	141b      	asrs	r3, r3, #16
 8028024:	f53f af2d 	bmi.w	8027e82 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8028028:	3a01      	subs	r2, #1
 802802a:	4293      	cmp	r3, r2
 802802c:	f6bf af29 	bge.w	8027e82 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8028030:	46a8      	mov	r8, r5
 8028032:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8028036:	f8bd a02c 	ldrh.w	sl, [sp, #44]	@ 0x2c
 802803a:	f1b8 0f00 	cmp.w	r8, #0
 802803e:	dc5e      	bgt.n	80280fe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8028040:	9b07      	ldr	r3, [sp, #28]
 8028042:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8028046:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802804a:	9307      	str	r3, [sp, #28]
 802804c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802804e:	2b00      	cmp	r3, #0
 8028050:	f340 80f6 	ble.w	8028240 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8028054:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8028058:	ee30 0a04 	vadd.f32	s0, s0, s8
 802805c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8028060:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8028064:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8028068:	eef0 6a62 	vmov.f32	s13, s5
 802806c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8028070:	ee77 2a62 	vsub.f32	s5, s14, s5
 8028074:	ee61 7a27 	vmul.f32	s15, s2, s15
 8028078:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802807c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8028080:	ee16 4a90 	vmov	r4, s13
 8028084:	eef0 6a43 	vmov.f32	s13, s6
 8028088:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802808c:	ee12 2a90 	vmov	r2, s5
 8028090:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8028094:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8028096:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802809a:	fb92 f3f3 	sdiv	r3, r2, r3
 802809e:	ee13 2a10 	vmov	r2, s6
 80280a2:	931f      	str	r3, [sp, #124]	@ 0x7c
 80280a4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80280a6:	ee16 6a90 	vmov	r6, s13
 80280aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80280ae:	9320      	str	r3, [sp, #128]	@ 0x80
 80280b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80280b2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80280b4:	3b01      	subs	r3, #1
 80280b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80280b8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80280ba:	bf0c      	ite	eq
 80280bc:	4615      	moveq	r5, r2
 80280be:	461d      	movne	r5, r3
 80280c0:	eeb0 3a67 	vmov.f32	s6, s15
 80280c4:	eef0 2a47 	vmov.f32	s5, s14
 80280c8:	e6b0      	b.n	8027e2c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80280ca:	f111 0a01 	adds.w	sl, r1, #1
 80280ce:	d487      	bmi.n	8027fe0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80280d0:	45d6      	cmp	lr, sl
 80280d2:	db85      	blt.n	8027fe0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80280d4:	f110 0a01 	adds.w	sl, r0, #1
 80280d8:	d482      	bmi.n	8027fe0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80280da:	4553      	cmp	r3, sl
 80280dc:	db80      	blt.n	8027fe0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80280de:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80280e0:	b21b      	sxth	r3, r3
 80280e2:	e9cd 0202 	strd	r0, r2, [sp, #8]
 80280e6:	9101      	str	r1, [sp, #4]
 80280e8:	9300      	str	r3, [sp, #0]
 80280ea:	e9cd c704 	strd	ip, r7, [sp, #16]
 80280ee:	fa0f f38e 	sxth.w	r3, lr
 80280f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80280f4:	4641      	mov	r1, r8
 80280f6:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80280f8:	f7ff fdb4 	bl	8027c64 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 80280fc:	e770      	b.n	8027fe0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80280fe:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028100:	1430      	asrs	r0, r6, #16
 8028102:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028106:	1423      	asrs	r3, r4, #16
 8028108:	fb01 3000 	mla	r0, r1, r0, r3
 802810c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802810e:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8028110:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8028114:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8028118:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 802811c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028120:	8858      	ldrh	r0, [r3, #2]
 8028122:	f1be 0f00 	cmp.w	lr, #0
 8028126:	d00b      	beq.n	8028140 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8028128:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 802812c:	3901      	subs	r1, #1
 802812e:	0049      	lsls	r1, r1, #1
 8028130:	3102      	adds	r1, #2
 8028132:	eb03 0b01 	add.w	fp, r3, r1
 8028136:	5a5b      	ldrh	r3, [r3, r1]
 8028138:	930e      	str	r3, [sp, #56]	@ 0x38
 802813a:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 802813e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8028140:	fb12 f30e 	smulbb	r3, r2, lr
 8028144:	ea4f 410c 	mov.w	r1, ip, lsl #16
 8028148:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 802814c:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8028150:	f001 61fc 	and.w	r1, r1, #132120576	@ 0x7e00000
 8028154:	10db      	asrs	r3, r3, #3
 8028156:	ea41 010c 	orr.w	r1, r1, ip
 802815a:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 802815e:	f1ce 0c10 	rsb	ip, lr, #16
 8028162:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8028166:	ebac 0c02 	sub.w	ip, ip, r2
 802816a:	ea4b 0000 	orr.w	r0, fp, r0
 802816e:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8028172:	4350      	muls	r0, r2
 8028174:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8028178:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802817a:	fb0c 0c01 	mla	ip, ip, r1, r0
 802817e:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8028182:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8028186:	f422 61fc 	bic.w	r1, r2, #2016	@ 0x7e0
 802818a:	ea4b 0101 	orr.w	r1, fp, r1
 802818e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8028190:	fb03 c101 	mla	r1, r3, r1, ip
 8028194:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8028196:	0412      	lsls	r2, r2, #16
 8028198:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802819c:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 80281a0:	4302      	orrs	r2, r0
 80281a2:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 80281a6:	fb03 1202 	mla	r2, r3, r2, r1
 80281aa:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 80281ae:	0952      	lsrs	r2, r2, #5
 80281b0:	f422 63fc 	bic.w	r3, r2, #2016	@ 0x7e0
 80281b4:	f8b9 2000 	ldrh.w	r2, [r9]
 80281b8:	9f08      	ldr	r7, [sp, #32]
 80281ba:	1211      	asrs	r1, r2, #8
 80281bc:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 80281c0:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80281c4:	fb11 f107 	smulbb	r1, r1, r7
 80281c8:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 80281cc:	ea4b 0303 	orr.w	r3, fp, r3
 80281d0:	00d2      	lsls	r2, r2, #3
 80281d2:	b29b      	uxth	r3, r3
 80281d4:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 80281d8:	b2d2      	uxtb	r2, r2
 80281da:	1218      	asrs	r0, r3, #8
 80281dc:	fb1c fc07 	smulbb	ip, ip, r7
 80281e0:	fb12 f207 	smulbb	r2, r2, r7
 80281e4:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 80281e8:	fb00 100a 	mla	r0, r0, sl, r1
 80281ec:	10d9      	asrs	r1, r3, #3
 80281ee:	00db      	lsls	r3, r3, #3
 80281f0:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 80281f4:	b2db      	uxtb	r3, r3
 80281f6:	fb01 c10a 	mla	r1, r1, sl, ip
 80281fa:	fb03 230a 	mla	r3, r3, sl, r2
 80281fe:	b280      	uxth	r0, r0
 8028200:	b29b      	uxth	r3, r3
 8028202:	b289      	uxth	r1, r1
 8028204:	1c42      	adds	r2, r0, #1
 8028206:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802820a:	f101 0c01 	add.w	ip, r1, #1
 802820e:	1c5a      	adds	r2, r3, #1
 8028210:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8028214:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8028218:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802821a:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 802821e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8028222:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8028226:	4310      	orrs	r0, r2
 8028228:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 802822c:	441c      	add	r4, r3
 802822e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028230:	ea40 000c 	orr.w	r0, r0, ip
 8028234:	f829 0b02 	strh.w	r0, [r9], #2
 8028238:	441e      	add	r6, r3
 802823a:	f108 38ff 	add.w	r8, r8, #4294967295
 802823e:	e6fc      	b.n	802803a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8028240:	b013      	add	sp, #76	@ 0x4c
 8028242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08028246 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 8028246:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802824a:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 802824e:	fb0e 4703 	mla	r7, lr, r3, r4
 8028252:	f1be 0f00 	cmp.w	lr, #0
 8028256:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 802825a:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 802825e:	f89d 602c 	ldrb.w	r6, [sp, #44]	@ 0x2c
 8028262:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 8028266:	8808      	ldrh	r0, [r1, #0]
 8028268:	db60      	blt.n	802832c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 802826a:	45f1      	cmp	r9, lr
 802826c:	dd5e      	ble.n	802832c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 802826e:	2c00      	cmp	r4, #0
 8028270:	db5a      	blt.n	8028328 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8028272:	42a3      	cmp	r3, r4
 8028274:	dd58      	ble.n	8028328 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8028276:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 802827a:	1c62      	adds	r2, r4, #1
 802827c:	d459      	bmi.n	8028332 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 802827e:	4293      	cmp	r3, r2
 8028280:	dd57      	ble.n	8028332 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8028282:	2d00      	cmp	r5, #0
 8028284:	d055      	beq.n	8028332 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8028286:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 802828a:	f11e 0e01 	adds.w	lr, lr, #1
 802828e:	d454      	bmi.n	802833a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8028290:	45f1      	cmp	r9, lr
 8028292:	dd52      	ble.n	802833a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8028294:	2e00      	cmp	r6, #0
 8028296:	d050      	beq.n	802833a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8028298:	2c00      	cmp	r4, #0
 802829a:	db4c      	blt.n	8028336 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 802829c:	42a3      	cmp	r3, r4
 802829e:	dd4a      	ble.n	8028336 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 80282a0:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 80282a4:	3401      	adds	r4, #1
 80282a6:	d405      	bmi.n	80282b4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 80282a8:	42a3      	cmp	r3, r4
 80282aa:	dd03      	ble.n	80282b4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 80282ac:	b115      	cbz	r5, 80282b4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 80282ae:	3301      	adds	r3, #1
 80282b0:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 80282b4:	fb15 f406 	smulbb	r4, r5, r6
 80282b8:	ea4f 430c 	mov.w	r3, ip, lsl #16
 80282bc:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 80282c0:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 80282c4:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 80282c8:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 80282cc:	ea43 0c0c 	orr.w	ip, r3, ip
 80282d0:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 80282d4:	f1c6 0310 	rsb	r3, r6, #16
 80282d8:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 80282dc:	1b5b      	subs	r3, r3, r5
 80282de:	ea4e 0707 	orr.w	r7, lr, r7
 80282e2:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 80282e6:	437d      	muls	r5, r7
 80282e8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80282ec:	fb03 5c0c 	mla	ip, r3, ip, r5
 80282f0:	0403      	lsls	r3, r0, #16
 80282f2:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 80282f6:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80282fa:	4318      	orrs	r0, r3
 80282fc:	fb04 c000 	mla	r0, r4, r0, ip
 8028300:	0413      	lsls	r3, r2, #16
 8028302:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8028306:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 802830a:	4313      	orrs	r3, r2
 802830c:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8028310:	fb06 0003 	mla	r0, r6, r3, r0
 8028314:	0d43      	lsrs	r3, r0, #21
 8028316:	0940      	lsrs	r0, r0, #5
 8028318:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802831c:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8028320:	4318      	orrs	r0, r3
 8028322:	8008      	strh	r0, [r1, #0]
 8028324:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8028328:	4684      	mov	ip, r0
 802832a:	e7a6      	b.n	802827a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 802832c:	4607      	mov	r7, r0
 802832e:	4684      	mov	ip, r0
 8028330:	e7ab      	b.n	802828a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 8028332:	4607      	mov	r7, r0
 8028334:	e7a9      	b.n	802828a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 8028336:	4602      	mov	r2, r0
 8028338:	e7b4      	b.n	80282a4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 802833a:	4602      	mov	r2, r0
 802833c:	e7ba      	b.n	80282b4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

0802833e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802833e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028342:	b08f      	sub	sp, #60	@ 0x3c
 8028344:	461d      	mov	r5, r3
 8028346:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	@ 0x64
 802834a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802834c:	9107      	str	r1, [sp, #28]
 802834e:	6859      	ldr	r1, [r3, #4]
 8028350:	920c      	str	r2, [sp, #48]	@ 0x30
 8028352:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	@ 0x78
 8028356:	fb01 2707 	mla	r7, r1, r7, r2
 802835a:	681b      	ldr	r3, [r3, #0]
 802835c:	900d      	str	r0, [sp, #52]	@ 0x34
 802835e:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8028362:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028364:	f8d3 8000 	ldr.w	r8, [r3]
 8028368:	9b07      	ldr	r3, [sp, #28]
 802836a:	2b00      	cmp	r3, #0
 802836c:	dc03      	bgt.n	8028376 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 802836e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8028370:	2b00      	cmp	r3, #0
 8028372:	f340 8181 	ble.w	8028678 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8028376:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028378:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802837c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028380:	1e48      	subs	r0, r1, #1
 8028382:	f102 3cff 	add.w	ip, r2, #4294967295
 8028386:	2d00      	cmp	r5, #0
 8028388:	f340 809b 	ble.w	80284c2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 802838c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8028390:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028394:	d406      	bmi.n	80283a4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8028396:	4586      	cmp	lr, r0
 8028398:	da04      	bge.n	80283a4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802839a:	2b00      	cmp	r3, #0
 802839c:	db02      	blt.n	80283a4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802839e:	4563      	cmp	r3, ip
 80283a0:	f2c0 8090 	blt.w	80284c4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80283a4:	f11e 0e01 	adds.w	lr, lr, #1
 80283a8:	f100 8084 	bmi.w	80284b4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80283ac:	4571      	cmp	r1, lr
 80283ae:	f2c0 8081 	blt.w	80284b4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80283b2:	3301      	adds	r3, #1
 80283b4:	d47e      	bmi.n	80284b4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80283b6:	429a      	cmp	r2, r3
 80283b8:	db7c      	blt.n	80284b4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80283ba:	46aa      	mov	sl, r5
 80283bc:	46b9      	mov	r9, r7
 80283be:	f1ba 0f00 	cmp.w	sl, #0
 80283c2:	f340 8099 	ble.w	80284f8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80283c6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80283c8:	1421      	asrs	r1, r4, #16
 80283ca:	ea4f 4026 	mov.w	r0, r6, asr #16
 80283ce:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80283d2:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80283d6:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 80283da:	f100 80d0 	bmi.w	802857e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80283de:	f10e 3bff 	add.w	fp, lr, #4294967295
 80283e2:	4559      	cmp	r1, fp
 80283e4:	f280 80cb 	bge.w	802857e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80283e8:	2800      	cmp	r0, #0
 80283ea:	f2c0 80c8 	blt.w	802857e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80283ee:	f103 3bff 	add.w	fp, r3, #4294967295
 80283f2:	4558      	cmp	r0, fp
 80283f4:	f280 80c3 	bge.w	802857e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80283f8:	fa0f fe8e 	sxth.w	lr, lr
 80283fc:	fb00 110e 	mla	r1, r0, lr, r1
 8028400:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8028404:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 8028408:	8841      	ldrh	r1, [r0, #2]
 802840a:	f1bc 0f00 	cmp.w	ip, #0
 802840e:	d00b      	beq.n	8028428 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 8028410:	f10e 4300 	add.w	r3, lr, #2147483648	@ 0x80000000
 8028414:	3b01      	subs	r3, #1
 8028416:	005b      	lsls	r3, r3, #1
 8028418:	3302      	adds	r3, #2
 802841a:	eb00 0e03 	add.w	lr, r0, r3
 802841e:	5ac3      	ldrh	r3, [r0, r3]
 8028420:	9308      	str	r3, [sp, #32]
 8028422:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8028426:	9309      	str	r3, [sp, #36]	@ 0x24
 8028428:	fb12 f30c 	smulbb	r3, r2, ip
 802842c:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8028430:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8028434:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 8028438:	ea40 000b 	orr.w	r0, r0, fp
 802843c:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8028440:	10db      	asrs	r3, r3, #3
 8028442:	f1cc 0e10 	rsb	lr, ip, #16
 8028446:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 802844a:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 802844e:	ebae 0e02 	sub.w	lr, lr, r2
 8028452:	ea4b 0101 	orr.w	r1, fp, r1
 8028456:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802845a:	4351      	muls	r1, r2
 802845c:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8028460:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8028462:	fb0e 1e00 	mla	lr, lr, r0, r1
 8028466:	0410      	lsls	r0, r2, #16
 8028468:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 802846c:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8028470:	4310      	orrs	r0, r2
 8028472:	9a08      	ldr	r2, [sp, #32]
 8028474:	fb03 e000 	mla	r0, r3, r0, lr
 8028478:	9908      	ldr	r1, [sp, #32]
 802847a:	0412      	lsls	r2, r2, #16
 802847c:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8028480:	f421 6efc 	bic.w	lr, r1, #2016	@ 0x7e0
 8028484:	ea42 020e 	orr.w	r2, r2, lr
 8028488:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 802848c:	fb03 0302 	mla	r3, r3, r2, r0
 8028490:	0d5a      	lsrs	r2, r3, #21
 8028492:	095b      	lsrs	r3, r3, #5
 8028494:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8028498:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 802849c:	4313      	orrs	r3, r2
 802849e:	f8a9 3000 	strh.w	r3, [r9]
 80284a2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80284a4:	f109 0902 	add.w	r9, r9, #2
 80284a8:	441c      	add	r4, r3
 80284aa:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80284ac:	f10a 3aff 	add.w	sl, sl, #4294967295
 80284b0:	441e      	add	r6, r3
 80284b2:	e784      	b.n	80283be <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80284b4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80284b6:	3d01      	subs	r5, #1
 80284b8:	441c      	add	r4, r3
 80284ba:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80284bc:	3702      	adds	r7, #2
 80284be:	441e      	add	r6, r3
 80284c0:	e761      	b.n	8028386 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80284c2:	d01d      	beq.n	8028500 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80284c4:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 80284c6:	1e6b      	subs	r3, r5, #1
 80284c8:	fb00 4003 	mla	r0, r0, r3, r4
 80284cc:	1400      	asrs	r0, r0, #16
 80284ce:	f53f af74 	bmi.w	80283ba <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80284d2:	3901      	subs	r1, #1
 80284d4:	4288      	cmp	r0, r1
 80284d6:	f6bf af70 	bge.w	80283ba <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80284da:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80284dc:	fb01 6303 	mla	r3, r1, r3, r6
 80284e0:	141b      	asrs	r3, r3, #16
 80284e2:	f53f af6a 	bmi.w	80283ba <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80284e6:	3a01      	subs	r2, #1
 80284e8:	4293      	cmp	r3, r2
 80284ea:	f6bf af66 	bge.w	80283ba <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80284ee:	46a9      	mov	r9, r5
 80284f0:	46ba      	mov	sl, r7
 80284f2:	f1b9 0f00 	cmp.w	r9, #0
 80284f6:	dc5a      	bgt.n	80285ae <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x270>
 80284f8:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80284fc:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8028500:	9b07      	ldr	r3, [sp, #28]
 8028502:	2b00      	cmp	r3, #0
 8028504:	f340 80b8 	ble.w	8028678 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8028508:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802850c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8028510:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8028514:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8028518:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802851c:	eef0 6a62 	vmov.f32	s13, s5
 8028520:	ee31 1a05 	vadd.f32	s2, s2, s10
 8028524:	ee77 2a62 	vsub.f32	s5, s14, s5
 8028528:	ee61 7a27 	vmul.f32	s15, s2, s15
 802852c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028530:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8028534:	ee16 4a90 	vmov	r4, s13
 8028538:	eef0 6a43 	vmov.f32	s13, s6
 802853c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8028540:	ee12 2a90 	vmov	r2, s5
 8028544:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8028548:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802854a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802854e:	fb92 f3f3 	sdiv	r3, r2, r3
 8028552:	ee13 2a10 	vmov	r2, s6
 8028556:	931b      	str	r3, [sp, #108]	@ 0x6c
 8028558:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802855a:	ee16 6a90 	vmov	r6, s13
 802855e:	fb92 f3f3 	sdiv	r3, r2, r3
 8028562:	931c      	str	r3, [sp, #112]	@ 0x70
 8028564:	9b07      	ldr	r3, [sp, #28]
 8028566:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8028568:	3b01      	subs	r3, #1
 802856a:	9307      	str	r3, [sp, #28]
 802856c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802856e:	bf0c      	ite	eq
 8028570:	4615      	moveq	r5, r2
 8028572:	461d      	movne	r5, r3
 8028574:	eeb0 3a67 	vmov.f32	s6, s15
 8028578:	eef0 2a47 	vmov.f32	s5, s14
 802857c:	e6f4      	b.n	8028368 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 802857e:	f111 0b01 	adds.w	fp, r1, #1
 8028582:	d48e      	bmi.n	80284a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8028584:	45de      	cmp	lr, fp
 8028586:	db8c      	blt.n	80284a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8028588:	f110 0b01 	adds.w	fp, r0, #1
 802858c:	d489      	bmi.n	80284a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802858e:	455b      	cmp	r3, fp
 8028590:	db87      	blt.n	80284a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8028592:	b21b      	sxth	r3, r3
 8028594:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8028598:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 802859c:	9300      	str	r3, [sp, #0]
 802859e:	4642      	mov	r2, r8
 80285a0:	fa0f f38e 	sxth.w	r3, lr
 80285a4:	4649      	mov	r1, r9
 80285a6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80285a8:	f7ff fe4d 	bl	8028246 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 80285ac:	e779      	b.n	80284a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80285ae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80285b0:	1420      	asrs	r0, r4, #16
 80285b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80285b6:	1431      	asrs	r1, r6, #16
 80285b8:	fb03 0101 	mla	r1, r3, r1, r0
 80285bc:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 80285c0:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 80285c4:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 80285c8:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80285cc:	8841      	ldrh	r1, [r0, #2]
 80285ce:	f1be 0f00 	cmp.w	lr, #0
 80285d2:	d00b      	beq.n	80285ec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 80285d4:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80285d8:	3b01      	subs	r3, #1
 80285da:	005b      	lsls	r3, r3, #1
 80285dc:	3302      	adds	r3, #2
 80285de:	eb00 0b03 	add.w	fp, r0, r3
 80285e2:	5ac3      	ldrh	r3, [r0, r3]
 80285e4:	930a      	str	r3, [sp, #40]	@ 0x28
 80285e6:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80285ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80285ec:	fb12 f30e 	smulbb	r3, r2, lr
 80285f0:	ea4f 400c 	mov.w	r0, ip, lsl #16
 80285f4:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80285f8:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 80285fc:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8028600:	10db      	asrs	r3, r3, #3
 8028602:	ea40 000c 	orr.w	r0, r0, ip
 8028606:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 802860a:	f1ce 0c10 	rsb	ip, lr, #16
 802860e:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8028612:	ebac 0c02 	sub.w	ip, ip, r2
 8028616:	ea4b 0101 	orr.w	r1, fp, r1
 802861a:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802861e:	4351      	muls	r1, r2
 8028620:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8028624:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8028626:	fb0c 1c00 	mla	ip, ip, r0, r1
 802862a:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 802862e:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8028632:	f422 60fc 	bic.w	r0, r2, #2016	@ 0x7e0
 8028636:	ea4b 0000 	orr.w	r0, fp, r0
 802863a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802863c:	fb03 c000 	mla	r0, r3, r0, ip
 8028640:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8028642:	0412      	lsls	r2, r2, #16
 8028644:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8028648:	f421 6bfc 	bic.w	fp, r1, #2016	@ 0x7e0
 802864c:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8028650:	ea42 0b0b 	orr.w	fp, r2, fp
 8028654:	fb03 000b 	mla	r0, r3, fp, r0
 8028658:	0d43      	lsrs	r3, r0, #21
 802865a:	0940      	lsrs	r0, r0, #5
 802865c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8028660:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8028664:	4318      	orrs	r0, r3
 8028666:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8028668:	f82a 0b02 	strh.w	r0, [sl], #2
 802866c:	441c      	add	r4, r3
 802866e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8028670:	f109 39ff 	add.w	r9, r9, #4294967295
 8028674:	441e      	add	r6, r3
 8028676:	e73c      	b.n	80284f2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8028678:	b00f      	add	sp, #60	@ 0x3c
 802867a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802867e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 802867e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028682:	b085      	sub	sp, #20
 8028684:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	@ 0x3c
 8028688:	9102      	str	r1, [sp, #8]
 802868a:	fb04 7103 	mla	r1, r4, r3, r7
 802868e:	2c00      	cmp	r4, #0
 8028690:	f9bd e038 	ldrsh.w	lr, [sp, #56]	@ 0x38
 8028694:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 8028698:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
 802869c:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 80286a0:	f2c0 811b 	blt.w	80288da <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 80286a4:	45a6      	cmp	lr, r4
 80286a6:	f340 8118 	ble.w	80288da <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 80286aa:	2f00      	cmp	r7, #0
 80286ac:	f2c0 8113 	blt.w	80288d6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 80286b0:	42bb      	cmp	r3, r7
 80286b2:	f340 8110 	ble.w	80288d6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 80286b6:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 80286ba:	1c7a      	adds	r2, r7, #1
 80286bc:	f100 8110 	bmi.w	80288e0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 80286c0:	4293      	cmp	r3, r2
 80286c2:	f340 810d 	ble.w	80288e0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 80286c6:	2e00      	cmp	r6, #0
 80286c8:	f000 810c 	beq.w	80288e4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 80286cc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80286d0:	3401      	adds	r4, #1
 80286d2:	f100 810b 	bmi.w	80288ec <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 80286d6:	45a6      	cmp	lr, r4
 80286d8:	f340 8108 	ble.w	80288ec <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 80286dc:	2800      	cmp	r0, #0
 80286de:	f000 8108 	beq.w	80288f2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 80286e2:	2f00      	cmp	r7, #0
 80286e4:	f2c0 8100 	blt.w	80288e8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 80286e8:	42bb      	cmp	r3, r7
 80286ea:	f340 80fd 	ble.w	80288e8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 80286ee:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 80286f2:	3701      	adds	r7, #1
 80286f4:	f100 8100 	bmi.w	80288f8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 80286f8:	42bb      	cmp	r3, r7
 80286fa:	f340 80fd 	ble.w	80288f8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 80286fe:	2e00      	cmp	r6, #0
 8028700:	f000 80fc 	beq.w	80288fc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 8028704:	3301      	adds	r3, #1
 8028706:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 802870a:	b2b6      	uxth	r6, r6
 802870c:	b280      	uxth	r0, r0
 802870e:	fb00 fe06 	mul.w	lr, r0, r6
 8028712:	0136      	lsls	r6, r6, #4
 8028714:	eba6 070e 	sub.w	r7, r6, lr
 8028718:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 802871c:	b2bf      	uxth	r7, r7
 802871e:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 8028722:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8028726:	fb0a f607 	mul.w	r6, sl, r7
 802872a:	b280      	uxth	r0, r0
 802872c:	1a1b      	subs	r3, r3, r0
 802872e:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8028732:	b29b      	uxth	r3, r3
 8028734:	fb0b 6603 	mla	r6, fp, r3, r6
 8028738:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802873c:	fb00 6609 	mla	r6, r0, r9, r6
 8028740:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8028744:	fb0e 6608 	mla	r6, lr, r8, r6
 8028748:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802874c:	9600      	str	r6, [sp, #0]
 802874e:	2e00      	cmp	r6, #0
 8028750:	f000 80be 	beq.w	80288d0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 8028754:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8028758:	fb0b fc0c 	mul.w	ip, fp, ip
 802875c:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8028760:	fb0b f505 	mul.w	r5, fp, r5
 8028764:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8028768:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 802876c:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8028770:	44dc      	add	ip, fp
 8028772:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028776:	9501      	str	r5, [sp, #4]
 8028778:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
 802877c:	9503      	str	r5, [sp, #12]
 802877e:	9d01      	ldr	r5, [sp, #4]
 8028780:	9e02      	ldr	r6, [sp, #8]
 8028782:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 8028786:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802878a:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 802878e:	fb0a fc0c 	mul.w	ip, sl, ip
 8028792:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8028796:	ea4f 251c 	mov.w	r5, ip, lsr #8
 802879a:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 802879e:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80287a2:	4465      	add	r5, ip
 80287a4:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80287a8:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 80287ac:	fb09 fc0c 	mul.w	ip, r9, ip
 80287b0:	fb09 f904 	mul.w	r9, r9, r4
 80287b4:	f509 7480 	add.w	r4, r9, #256	@ 0x100
 80287b8:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 80287bc:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
 80287c0:	fb08 f404 	mul.w	r4, r8, r4
 80287c4:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80287c8:	fb08 f802 	mul.w	r8, r8, r2
 80287cc:	0a2d      	lsrs	r5, r5, #8
 80287ce:	0a22      	lsrs	r2, r4, #8
 80287d0:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 80287d4:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80287d8:	437d      	muls	r5, r7
 80287da:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 80287de:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 80287e2:	4414      	add	r4, r2
 80287e4:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 80287e8:	fb0a fa01 	mul.w	sl, sl, r1
 80287ec:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80287f0:	9a03      	ldr	r2, [sp, #12]
 80287f2:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
 80287f6:	fb02 5503 	mla	r5, r2, r3, r5
 80287fa:	0a24      	lsrs	r4, r4, #8
 80287fc:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8028800:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8028804:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8028808:	fb04 540e 	mla	r4, r4, lr, r5
 802880c:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8028810:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8028814:	4461      	add	r1, ip
 8028816:	0a09      	lsrs	r1, r1, #8
 8028818:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 802881c:	fb01 4100 	mla	r1, r1, r0, r4
 8028820:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028824:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8028828:	fb07 f70a 	mul.w	r7, r7, sl
 802882c:	0a09      	lsrs	r1, r1, #8
 802882e:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
 8028832:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
 8028836:	fb03 7101 	mla	r1, r3, r1, r7
 802883a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802883e:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8028842:	fb0e 1e08 	mla	lr, lr, r8, r1
 8028846:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802884a:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 802884e:	fb00 e101 	mla	r1, r0, r1, lr
 8028852:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 8028856:	9a00      	ldr	r2, [sp, #0]
 8028858:	b287      	uxth	r7, r0
 802885a:	437a      	muls	r2, r7
 802885c:	1c53      	adds	r3, r2, #1
 802885e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8028862:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8028866:	0a09      	lsrs	r1, r1, #8
 8028868:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 802886c:	4321      	orrs	r1, r4
 802886e:	0c0a      	lsrs	r2, r1, #16
 8028870:	8836      	ldrh	r6, [r6, #0]
 8028872:	fb12 f207 	smulbb	r2, r2, r7
 8028876:	f3c1 2407 	ubfx	r4, r1, #8, #8
 802887a:	b2c8      	uxtb	r0, r1
 802887c:	1235      	asrs	r5, r6, #8
 802887e:	fb14 f407 	smulbb	r4, r4, r7
 8028882:	fb10 f007 	smulbb	r0, r0, r7
 8028886:	b2db      	uxtb	r3, r3
 8028888:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 802888c:	fb05 2503 	mla	r5, r5, r3, r2
 8028890:	10f2      	asrs	r2, r6, #3
 8028892:	00f6      	lsls	r6, r6, #3
 8028894:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8028898:	b2f6      	uxtb	r6, r6
 802889a:	fb02 4203 	mla	r2, r2, r3, r4
 802889e:	fb06 0303 	mla	r3, r6, r3, r0
 80288a2:	b2ad      	uxth	r5, r5
 80288a4:	b299      	uxth	r1, r3
 80288a6:	b294      	uxth	r4, r2
 80288a8:	1c6b      	adds	r3, r5, #1
 80288aa:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80288ae:	1c62      	adds	r2, r4, #1
 80288b0:	1c4b      	adds	r3, r1, #1
 80288b2:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80288b6:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80288ba:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 80288be:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80288c2:	0952      	lsrs	r2, r2, #5
 80288c4:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80288c8:	432b      	orrs	r3, r5
 80288ca:	4313      	orrs	r3, r2
 80288cc:	9a02      	ldr	r2, [sp, #8]
 80288ce:	8013      	strh	r3, [r2, #0]
 80288d0:	b005      	add	sp, #20
 80288d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80288d6:	2500      	movs	r5, #0
 80288d8:	e6ef      	b.n	80286ba <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 80288da:	2100      	movs	r1, #0
 80288dc:	460d      	mov	r5, r1
 80288de:	e6f7      	b.n	80286d0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 80288e0:	2100      	movs	r1, #0
 80288e2:	e6f5      	b.n	80286d0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 80288e4:	4631      	mov	r1, r6
 80288e6:	e6f3      	b.n	80286d0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 80288e8:	2400      	movs	r4, #0
 80288ea:	e702      	b.n	80286f2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 80288ec:	2200      	movs	r2, #0
 80288ee:	4614      	mov	r4, r2
 80288f0:	e70b      	b.n	802870a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 80288f2:	4602      	mov	r2, r0
 80288f4:	4604      	mov	r4, r0
 80288f6:	e708      	b.n	802870a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 80288f8:	2200      	movs	r2, #0
 80288fa:	e706      	b.n	802870a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 80288fc:	4632      	mov	r2, r6
 80288fe:	e704      	b.n	802870a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

08028900 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028904:	b09d      	sub	sp, #116	@ 0x74
 8028906:	9219      	str	r2, [sp, #100]	@ 0x64
 8028908:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 802890a:	901b      	str	r0, [sp, #108]	@ 0x6c
 802890c:	9307      	str	r3, [sp, #28]
 802890e:	6850      	ldr	r0, [r2, #4]
 8028910:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 8028914:	9117      	str	r1, [sp, #92]	@ 0x5c
 8028916:	931a      	str	r3, [sp, #104]	@ 0x68
 8028918:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 802891c:	fb00 1303 	mla	r3, r0, r3, r1
 8028920:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	@ 0x9c
 8028924:	6812      	ldr	r2, [r2, #0]
 8028926:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802892a:	930a      	str	r3, [sp, #40]	@ 0x28
 802892c:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 802892e:	681b      	ldr	r3, [r3, #0]
 8028930:	9310      	str	r3, [sp, #64]	@ 0x40
 8028932:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 8028936:	930b      	str	r3, [sp, #44]	@ 0x2c
 8028938:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802893a:	2b00      	cmp	r3, #0
 802893c:	dc03      	bgt.n	8028946 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 802893e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8028940:	2b00      	cmp	r3, #0
 8028942:	f340 8375 	ble.w	8029030 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8028946:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8028948:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802894c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028950:	1e48      	subs	r0, r1, #1
 8028952:	1e57      	subs	r7, r2, #1
 8028954:	9b07      	ldr	r3, [sp, #28]
 8028956:	2b00      	cmp	r3, #0
 8028958:	f340 818e 	ble.w	8028c78 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 802895c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8028960:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028964:	d406      	bmi.n	8028974 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8028966:	4584      	cmp	ip, r0
 8028968:	da04      	bge.n	8028974 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802896a:	2b00      	cmp	r3, #0
 802896c:	db02      	blt.n	8028974 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802896e:	42bb      	cmp	r3, r7
 8028970:	f2c0 8183 	blt.w	8028c7a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8028974:	f11c 0c01 	adds.w	ip, ip, #1
 8028978:	f100 8173 	bmi.w	8028c62 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802897c:	4561      	cmp	r1, ip
 802897e:	f2c0 8170 	blt.w	8028c62 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8028982:	3301      	adds	r3, #1
 8028984:	f100 816d 	bmi.w	8028c62 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8028988:	429a      	cmp	r2, r3
 802898a:	f2c0 816a 	blt.w	8028c62 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802898e:	9b07      	ldr	r3, [sp, #28]
 8028990:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8028992:	9318      	str	r3, [sp, #96]	@ 0x60
 8028994:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8028996:	2b00      	cmp	r3, #0
 8028998:	f340 818c 	ble.w	8028cb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 802899c:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
 802899e:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80289a0:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80289a4:	1422      	asrs	r2, r4, #16
 80289a6:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80289aa:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80289ae:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80289b2:	689b      	ldr	r3, [r3, #8]
 80289b4:	f100 81cd 	bmi.w	8028d52 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80289b8:	f103 38ff 	add.w	r8, r3, #4294967295
 80289bc:	4542      	cmp	r2, r8
 80289be:	f280 81c8 	bge.w	8028d52 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80289c2:	f1bc 0f00 	cmp.w	ip, #0
 80289c6:	f2c0 81c4 	blt.w	8028d52 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80289ca:	f10e 38ff 	add.w	r8, lr, #4294967295
 80289ce:	45c4      	cmp	ip, r8
 80289d0:	f280 81bf 	bge.w	8028d52 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80289d4:	b21b      	sxth	r3, r3
 80289d6:	fb0c 2203 	mla	r2, ip, r3, r2
 80289da:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80289dc:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 80289e0:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80289e4:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80289e8:	2800      	cmp	r0, #0
 80289ea:	f000 81a9 	beq.w	8028d40 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 80289ee:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80289f2:	950c      	str	r5, [sp, #48]	@ 0x30
 80289f4:	0e2d      	lsrs	r5, r5, #24
 80289f6:	9513      	str	r5, [sp, #76]	@ 0x4c
 80289f8:	b181      	cbz	r1, 8028a1c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80289fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80289fe:	3b01      	subs	r3, #1
 8028a00:	009b      	lsls	r3, r3, #2
 8028a02:	3304      	adds	r3, #4
 8028a04:	eb08 0c03 	add.w	ip, r8, r3
 8028a08:	f858 3003 	ldr.w	r3, [r8, r3]
 8028a0c:	9308      	str	r3, [sp, #32]
 8028a0e:	0e1b      	lsrs	r3, r3, #24
 8028a10:	9311      	str	r3, [sp, #68]	@ 0x44
 8028a12:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8028a16:	930d      	str	r3, [sp, #52]	@ 0x34
 8028a18:	0e1b      	lsrs	r3, r3, #24
 8028a1a:	9314      	str	r3, [sp, #80]	@ 0x50
 8028a1c:	b280      	uxth	r0, r0
 8028a1e:	b289      	uxth	r1, r1
 8028a20:	fb00 f901 	mul.w	r9, r0, r1
 8028a24:	0100      	lsls	r0, r0, #4
 8028a26:	eba0 0809 	sub.w	r8, r0, r9
 8028a2a:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 8028a2e:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8028a30:	fa1f f888 	uxth.w	r8, r8
 8028a34:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8028a38:	fb08 f000 	mul.w	r0, r8, r0
 8028a3c:	b289      	uxth	r1, r1
 8028a3e:	1a5b      	subs	r3, r3, r1
 8028a40:	b29b      	uxth	r3, r3
 8028a42:	fb03 000e 	mla	r0, r3, lr, r0
 8028a46:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8028a48:	fb01 0005 	mla	r0, r1, r5, r0
 8028a4c:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8028a4e:	fb09 0005 	mla	r0, r9, r5, r0
 8028a52:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8028a56:	2800      	cmp	r0, #0
 8028a58:	f000 80fa 	beq.w	8028c50 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8028a5c:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8028a60:	d01b      	beq.n	8028a9a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8028a62:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 8028a66:	fb0e fa0a 	mul.w	sl, lr, sl
 8028a6a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8028a6e:	fb0e fe02 	mul.w	lr, lr, r2
 8028a72:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8028a76:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8028a7a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8028a7e:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8028a82:	4452      	add	r2, sl
 8028a84:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8028a88:	0a12      	lsrs	r2, r2, #8
 8028a8a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028a8e:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8028a92:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8028a96:	ea42 020c 	orr.w	r2, r2, ip
 8028a9a:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8028a9c:	2dff      	cmp	r5, #255	@ 0xff
 8028a9e:	d021      	beq.n	8028ae4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 8028aa0:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8028aa2:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8028aa6:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8028aa8:	fb05 fb0b 	mul.w	fp, r5, fp
 8028aac:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8028aae:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028ab2:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8028ab6:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8028ab8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8028abc:	fb05 fa0a 	mul.w	sl, r5, sl
 8028ac0:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8028ac4:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8028ac8:	44de      	add	lr, fp
 8028aca:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028ace:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028ad2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028ad6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8028ada:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8028ade:	ea4e 050a 	orr.w	r5, lr, sl
 8028ae2:	950c      	str	r5, [sp, #48]	@ 0x30
 8028ae4:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8028ae6:	2dff      	cmp	r5, #255	@ 0xff
 8028ae8:	d021      	beq.n	8028b2e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8028aea:	9d08      	ldr	r5, [sp, #32]
 8028aec:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8028af0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8028af2:	fb05 fb0b 	mul.w	fp, r5, fp
 8028af6:	9d08      	ldr	r5, [sp, #32]
 8028af8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028afc:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8028b00:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8028b02:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8028b06:	fb05 fa0a 	mul.w	sl, r5, sl
 8028b0a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8028b0e:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8028b12:	44de      	add	lr, fp
 8028b14:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028b18:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028b1c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028b20:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8028b24:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8028b28:	ea4e 050a 	orr.w	r5, lr, sl
 8028b2c:	9508      	str	r5, [sp, #32]
 8028b2e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8028b30:	2dff      	cmp	r5, #255	@ 0xff
 8028b32:	d021      	beq.n	8028b78 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8028b34:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8028b36:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8028b3a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8028b3c:	fb05 fb0b 	mul.w	fp, r5, fp
 8028b40:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8028b42:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028b46:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8028b4a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8028b4c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8028b50:	fb05 fa0a 	mul.w	sl, r5, sl
 8028b54:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8028b58:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8028b5c:	44de      	add	lr, fp
 8028b5e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028b62:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028b66:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028b6a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8028b6e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8028b72:	ea4e 050a 	orr.w	r5, lr, sl
 8028b76:	950d      	str	r5, [sp, #52]	@ 0x34
 8028b78:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8028b7a:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 8028b7e:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8028b82:	fb08 fc0c 	mul.w	ip, r8, ip
 8028b86:	fb03 cc0e 	mla	ip, r3, lr, ip
 8028b8a:	9d08      	ldr	r5, [sp, #32]
 8028b8c:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8028b90:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8028b94:	fb01 cc0e 	mla	ip, r1, lr, ip
 8028b98:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8028b9a:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8028b9e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8028ba0:	fb09 cc0e 	mla	ip, r9, lr, ip
 8028ba4:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8028ba8:	fb08 f80e 	mul.w	r8, r8, lr
 8028bac:	fb03 8202 	mla	r2, r3, r2, r8
 8028bb0:	9b08      	ldr	r3, [sp, #32]
 8028bb2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028bb6:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 8028bba:	fb01 220a 	mla	r2, r1, sl, r2
 8028bbe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8028bc0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8028bc4:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 8028bc8:	fb09 2901 	mla	r9, r9, r1, r2
 8028bcc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8028bce:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028bd2:	4342      	muls	r2, r0
 8028bd4:	1c50      	adds	r0, r2, #1
 8028bd6:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8028bda:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8028bde:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8028be2:	ea4c 0c09 	orr.w	ip, ip, r9
 8028be6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8028be8:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8028bec:	883b      	ldrh	r3, [r7, #0]
 8028bee:	fb12 f205 	smulbb	r2, r2, r5
 8028bf2:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8028bf6:	fa5f fc8c 	uxtb.w	ip, ip
 8028bfa:	1219      	asrs	r1, r3, #8
 8028bfc:	fb1c fc05 	smulbb	ip, ip, r5
 8028c00:	b2c0      	uxtb	r0, r0
 8028c02:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8028c06:	fb01 2100 	mla	r1, r1, r0, r2
 8028c0a:	10da      	asrs	r2, r3, #3
 8028c0c:	00db      	lsls	r3, r3, #3
 8028c0e:	fb1e fe05 	smulbb	lr, lr, r5
 8028c12:	b2db      	uxtb	r3, r3
 8028c14:	fb03 c300 	mla	r3, r3, r0, ip
 8028c18:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8028c1c:	b289      	uxth	r1, r1
 8028c1e:	fb02 e200 	mla	r2, r2, r0, lr
 8028c22:	fa1f fc83 	uxth.w	ip, r3
 8028c26:	1c4b      	adds	r3, r1, #1
 8028c28:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8028c2c:	f10c 0301 	add.w	r3, ip, #1
 8028c30:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8028c34:	b292      	uxth	r2, r2
 8028c36:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 8028c3a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028c3e:	430b      	orrs	r3, r1
 8028c40:	1c51      	adds	r1, r2, #1
 8028c42:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8028c46:	0952      	lsrs	r2, r2, #5
 8028c48:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8028c4c:	4313      	orrs	r3, r2
 8028c4e:	803b      	strh	r3, [r7, #0]
 8028c50:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8028c52:	3702      	adds	r7, #2
 8028c54:	441c      	add	r4, r3
 8028c56:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8028c58:	441e      	add	r6, r3
 8028c5a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8028c5c:	3b01      	subs	r3, #1
 8028c5e:	9318      	str	r3, [sp, #96]	@ 0x60
 8028c60:	e698      	b.n	8028994 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8028c62:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8028c64:	441c      	add	r4, r3
 8028c66:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8028c68:	441e      	add	r6, r3
 8028c6a:	9b07      	ldr	r3, [sp, #28]
 8028c6c:	3b01      	subs	r3, #1
 8028c6e:	9307      	str	r3, [sp, #28]
 8028c70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028c72:	3302      	adds	r3, #2
 8028c74:	930a      	str	r3, [sp, #40]	@ 0x28
 8028c76:	e66d      	b.n	8028954 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8028c78:	d023      	beq.n	8028cc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8028c7a:	9b07      	ldr	r3, [sp, #28]
 8028c7c:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 8028c7e:	3b01      	subs	r3, #1
 8028c80:	fb00 4003 	mla	r0, r0, r3, r4
 8028c84:	1400      	asrs	r0, r0, #16
 8028c86:	f53f ae82 	bmi.w	802898e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028c8a:	3901      	subs	r1, #1
 8028c8c:	4288      	cmp	r0, r1
 8028c8e:	f6bf ae7e 	bge.w	802898e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028c92:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8028c94:	fb01 6303 	mla	r3, r1, r3, r6
 8028c98:	141b      	asrs	r3, r3, #16
 8028c9a:	f53f ae78 	bmi.w	802898e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028c9e:	3a01      	subs	r2, #1
 8028ca0:	4293      	cmp	r3, r2
 8028ca2:	f6bf ae74 	bge.w	802898e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028ca6:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8028caa:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8028cae:	f1bb 0f00 	cmp.w	fp, #0
 8028cb2:	dc6c      	bgt.n	8028d8e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8028cb4:	9b07      	ldr	r3, [sp, #28]
 8028cb6:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8028cba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028cbc:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8028cc0:	930a      	str	r3, [sp, #40]	@ 0x28
 8028cc2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8028cc4:	2b00      	cmp	r3, #0
 8028cc6:	f340 81b3 	ble.w	8029030 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8028cca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8028cce:	ee30 0a04 	vadd.f32	s0, s0, s8
 8028cd2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8028cd6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8028cda:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8028cde:	eef0 6a62 	vmov.f32	s13, s5
 8028ce2:	ee31 1a05 	vadd.f32	s2, s2, s10
 8028ce6:	ee77 2a62 	vsub.f32	s5, s14, s5
 8028cea:	ee61 7a27 	vmul.f32	s15, s2, s15
 8028cee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028cf2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8028cf6:	ee16 4a90 	vmov	r4, s13
 8028cfa:	eef0 6a43 	vmov.f32	s13, s6
 8028cfe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8028d02:	ee12 2a90 	vmov	r2, s5
 8028d06:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8028d0a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8028d0c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028d10:	fb92 f3f3 	sdiv	r3, r2, r3
 8028d14:	ee13 2a10 	vmov	r2, s6
 8028d18:	9329      	str	r3, [sp, #164]	@ 0xa4
 8028d1a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8028d1c:	ee16 6a90 	vmov	r6, s13
 8028d20:	fb92 f3f3 	sdiv	r3, r2, r3
 8028d24:	932a      	str	r3, [sp, #168]	@ 0xa8
 8028d26:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8028d28:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8028d2a:	3b01      	subs	r3, #1
 8028d2c:	9317      	str	r3, [sp, #92]	@ 0x5c
 8028d2e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8028d30:	bf08      	it	eq
 8028d32:	4613      	moveq	r3, r2
 8028d34:	eeb0 3a67 	vmov.f32	s6, s15
 8028d38:	9307      	str	r3, [sp, #28]
 8028d3a:	eef0 2a47 	vmov.f32	s5, s14
 8028d3e:	e5fb      	b.n	8028938 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8028d40:	2900      	cmp	r1, #0
 8028d42:	f43f ae6b 	beq.w	8028a1c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8028d46:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8028d4a:	9308      	str	r3, [sp, #32]
 8028d4c:	0e1b      	lsrs	r3, r3, #24
 8028d4e:	9311      	str	r3, [sp, #68]	@ 0x44
 8028d50:	e664      	b.n	8028a1c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8028d52:	f112 0801 	adds.w	r8, r2, #1
 8028d56:	f53f af7b 	bmi.w	8028c50 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8028d5a:	4543      	cmp	r3, r8
 8028d5c:	f6ff af78 	blt.w	8028c50 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8028d60:	f11c 0801 	adds.w	r8, ip, #1
 8028d64:	f53f af74 	bmi.w	8028c50 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8028d68:	45c6      	cmp	lr, r8
 8028d6a:	f6ff af71 	blt.w	8028c50 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8028d6e:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8028d70:	9201      	str	r2, [sp, #4]
 8028d72:	fa0f f28e 	sxth.w	r2, lr
 8028d76:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8028d7a:	e9cd c002 	strd	ip, r0, [sp, #8]
 8028d7e:	9200      	str	r2, [sp, #0]
 8028d80:	b21b      	sxth	r3, r3
 8028d82:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8028d84:	4639      	mov	r1, r7
 8028d86:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8028d88:	f7ff fc79 	bl	802867e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 8028d8c:	e760      	b.n	8028c50 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8028d8e:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8028d90:	1427      	asrs	r7, r4, #16
 8028d92:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028d96:	1433      	asrs	r3, r6, #16
 8028d98:	fb01 7303 	mla	r3, r1, r3, r7
 8028d9c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8028d9e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028da2:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8028da6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8028daa:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8028dae:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8028db2:	2a00      	cmp	r2, #0
 8028db4:	f000 8133 	beq.w	802901e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 8028db8:	687d      	ldr	r5, [r7, #4]
 8028dba:	950e      	str	r5, [sp, #56]	@ 0x38
 8028dbc:	0e2d      	lsrs	r5, r5, #24
 8028dbe:	9515      	str	r5, [sp, #84]	@ 0x54
 8028dc0:	b178      	cbz	r0, 8028de2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8028dc2:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8028dc6:	3901      	subs	r1, #1
 8028dc8:	0089      	lsls	r1, r1, #2
 8028dca:	3104      	adds	r1, #4
 8028dcc:	eb07 0e01 	add.w	lr, r7, r1
 8028dd0:	5879      	ldr	r1, [r7, r1]
 8028dd2:	9109      	str	r1, [sp, #36]	@ 0x24
 8028dd4:	0e09      	lsrs	r1, r1, #24
 8028dd6:	9112      	str	r1, [sp, #72]	@ 0x48
 8028dd8:	f8de 1004 	ldr.w	r1, [lr, #4]
 8028ddc:	910f      	str	r1, [sp, #60]	@ 0x3c
 8028dde:	0e09      	lsrs	r1, r1, #24
 8028de0:	9116      	str	r1, [sp, #88]	@ 0x58
 8028de2:	b292      	uxth	r2, r2
 8028de4:	b280      	uxth	r0, r0
 8028de6:	fb02 f800 	mul.w	r8, r2, r0
 8028dea:	0112      	lsls	r2, r2, #4
 8028dec:	eba2 0e08 	sub.w	lr, r2, r8
 8028df0:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8028df2:	fa1f fe8e 	uxth.w	lr, lr
 8028df6:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8028dfa:	fb0e f101 	mul.w	r1, lr, r1
 8028dfe:	b280      	uxth	r0, r0
 8028e00:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8028e04:	1a12      	subs	r2, r2, r0
 8028e06:	b292      	uxth	r2, r2
 8028e08:	fb02 110c 	mla	r1, r2, ip, r1
 8028e0c:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8028e0e:	fb00 1105 	mla	r1, r0, r5, r1
 8028e12:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8028e14:	fb08 1105 	mla	r1, r8, r5, r1
 8028e18:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8028e1c:	2900      	cmp	r1, #0
 8028e1e:	f000 80f5 	beq.w	802900c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 8028e22:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8028e26:	d019      	beq.n	8028e5c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 8028e28:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8028e2c:	fb0c fa0a 	mul.w	sl, ip, sl
 8028e30:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8028e34:	fb0c fc03 	mul.w	ip, ip, r3
 8028e38:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8028e3c:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8028e40:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8028e44:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8028e48:	4453      	add	r3, sl
 8028e4a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8028e4e:	0a1b      	lsrs	r3, r3, #8
 8028e50:	0a3f      	lsrs	r7, r7, #8
 8028e52:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8028e56:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8028e5a:	433b      	orrs	r3, r7
 8028e5c:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8028e5e:	2dff      	cmp	r5, #255	@ 0xff
 8028e60:	d020      	beq.n	8028ea4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 8028e62:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8028e64:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8028e68:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8028e6a:	436f      	muls	r7, r5
 8028e6c:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8028e6e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028e72:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8028e76:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8028e78:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8028e7c:	fb05 fa0a 	mul.w	sl, r5, sl
 8028e80:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8028e84:	44bc      	add	ip, r7
 8028e86:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8028e8a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028e8e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028e92:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028e96:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8028e9a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8028e9e:	ea4c 050a 	orr.w	r5, ip, sl
 8028ea2:	950e      	str	r5, [sp, #56]	@ 0x38
 8028ea4:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8028ea6:	2dff      	cmp	r5, #255	@ 0xff
 8028ea8:	d020      	beq.n	8028eec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 8028eaa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8028eac:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8028eb0:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8028eb2:	436f      	muls	r7, r5
 8028eb4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8028eb6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028eba:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8028ebe:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8028ec0:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8028ec4:	fb05 fa0a 	mul.w	sl, r5, sl
 8028ec8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8028ecc:	44bc      	add	ip, r7
 8028ece:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8028ed2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028ed6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028eda:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028ede:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8028ee2:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8028ee6:	ea4c 050a 	orr.w	r5, ip, sl
 8028eea:	9509      	str	r5, [sp, #36]	@ 0x24
 8028eec:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8028eee:	2dff      	cmp	r5, #255	@ 0xff
 8028ef0:	d020      	beq.n	8028f34 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 8028ef2:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8028ef4:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8028ef8:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8028efa:	436f      	muls	r7, r5
 8028efc:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8028efe:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028f02:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8028f06:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8028f08:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8028f0c:	fb05 fa0a 	mul.w	sl, r5, sl
 8028f10:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8028f14:	44bc      	add	ip, r7
 8028f16:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8028f1a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028f1e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028f22:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028f26:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8028f2a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8028f2e:	ea4c 050a 	orr.w	r5, ip, sl
 8028f32:	950f      	str	r5, [sp, #60]	@ 0x3c
 8028f34:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8028f36:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8028f3a:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8028f3e:	fb0e f707 	mul.w	r7, lr, r7
 8028f42:	fb02 770c 	mla	r7, r2, ip, r7
 8028f46:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8028f48:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8028f4c:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8028f50:	fb00 770c 	mla	r7, r0, ip, r7
 8028f54:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8028f56:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8028f5a:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8028f5c:	fb08 770c 	mla	r7, r8, ip, r7
 8028f60:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 8028f64:	fb0e fe0c 	mul.w	lr, lr, ip
 8028f68:	fb02 e303 	mla	r3, r2, r3, lr
 8028f6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8028f6e:	0a3f      	lsrs	r7, r7, #8
 8028f70:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8028f74:	fb00 330a 	mla	r3, r0, sl, r3
 8028f78:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8028f7a:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8028f7e:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 8028f82:	fb08 3c0c 	mla	ip, r8, ip, r3
 8028f86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8028f88:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028f8c:	4359      	muls	r1, r3
 8028f8e:	1c4b      	adds	r3, r1, #1
 8028f90:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8028f94:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8028f98:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8028f9c:	ea47 070c 	orr.w	r7, r7, ip
 8028fa0:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8028fa2:	0c3b      	lsrs	r3, r7, #16
 8028fa4:	f8b9 0000 	ldrh.w	r0, [r9]
 8028fa8:	fb13 f305 	smulbb	r3, r3, r5
 8028fac:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8028fb0:	b2ff      	uxtb	r7, r7
 8028fb2:	1202      	asrs	r2, r0, #8
 8028fb4:	fb17 f705 	smulbb	r7, r7, r5
 8028fb8:	b2c9      	uxtb	r1, r1
 8028fba:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8028fbe:	fb02 3201 	mla	r2, r2, r1, r3
 8028fc2:	10c3      	asrs	r3, r0, #3
 8028fc4:	00c0      	lsls	r0, r0, #3
 8028fc6:	fb1c fc05 	smulbb	ip, ip, r5
 8028fca:	b2c0      	uxtb	r0, r0
 8028fcc:	fb00 7001 	mla	r0, r0, r1, r7
 8028fd0:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8028fd4:	fb03 c301 	mla	r3, r3, r1, ip
 8028fd8:	b292      	uxth	r2, r2
 8028fda:	b280      	uxth	r0, r0
 8028fdc:	1c51      	adds	r1, r2, #1
 8028fde:	f100 0c01 	add.w	ip, r0, #1
 8028fe2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8028fe6:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8028fea:	b29b      	uxth	r3, r3
 8028fec:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8028ff0:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 8028ff4:	ea4c 0202 	orr.w	r2, ip, r2
 8028ff8:	f103 0c01 	add.w	ip, r3, #1
 8028ffc:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8029000:	095b      	lsrs	r3, r3, #5
 8029002:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8029006:	431a      	orrs	r2, r3
 8029008:	f8a9 2000 	strh.w	r2, [r9]
 802900c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 802900e:	f109 0902 	add.w	r9, r9, #2
 8029012:	441c      	add	r4, r3
 8029014:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8029016:	f10b 3bff 	add.w	fp, fp, #4294967295
 802901a:	441e      	add	r6, r3
 802901c:	e647      	b.n	8028cae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 802901e:	2800      	cmp	r0, #0
 8029020:	f43f aedf 	beq.w	8028de2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8029024:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8029028:	9109      	str	r1, [sp, #36]	@ 0x24
 802902a:	0e09      	lsrs	r1, r1, #24
 802902c:	9112      	str	r1, [sp, #72]	@ 0x48
 802902e:	e6d8      	b.n	8028de2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8029030:	b01d      	add	sp, #116	@ 0x74
 8029032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08029036 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8029036:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802903a:	b085      	sub	sp, #20
 802903c:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	@ 0x3c
 8029040:	9102      	str	r1, [sp, #8]
 8029042:	fb04 7103 	mla	r1, r4, r3, r7
 8029046:	2c00      	cmp	r4, #0
 8029048:	f9bd e038 	ldrsh.w	lr, [sp, #56]	@ 0x38
 802904c:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 8029050:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
 8029054:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8029058:	f2c0 810c 	blt.w	8029274 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 802905c:	45a6      	cmp	lr, r4
 802905e:	f340 8109 	ble.w	8029274 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8029062:	2f00      	cmp	r7, #0
 8029064:	f2c0 8104 	blt.w	8029270 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8029068:	42bb      	cmp	r3, r7
 802906a:	f340 8101 	ble.w	8029270 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 802906e:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8029072:	1c7a      	adds	r2, r7, #1
 8029074:	f100 8101 	bmi.w	802927a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8029078:	4293      	cmp	r3, r2
 802907a:	f340 80fe 	ble.w	802927a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 802907e:	2e00      	cmp	r6, #0
 8029080:	f000 80fd 	beq.w	802927e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 8029084:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8029088:	3401      	adds	r4, #1
 802908a:	f100 80fc 	bmi.w	8029286 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 802908e:	45a6      	cmp	lr, r4
 8029090:	f340 80f9 	ble.w	8029286 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8029094:	2800      	cmp	r0, #0
 8029096:	f000 80f9 	beq.w	802928c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 802909a:	2f00      	cmp	r7, #0
 802909c:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 80290a0:	f2c0 80ef 	blt.w	8029282 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 80290a4:	42bb      	cmp	r3, r7
 80290a6:	f340 80ec 	ble.w	8029282 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 80290aa:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 80290ae:	3701      	adds	r7, #1
 80290b0:	f100 80ef 	bmi.w	8029292 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 80290b4:	42bb      	cmp	r3, r7
 80290b6:	f340 80ec 	ble.w	8029292 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 80290ba:	2e00      	cmp	r6, #0
 80290bc:	f000 80eb 	beq.w	8029296 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 80290c0:	6852      	ldr	r2, [r2, #4]
 80290c2:	b2b6      	uxth	r6, r6
 80290c4:	b280      	uxth	r0, r0
 80290c6:	fb00 fe06 	mul.w	lr, r0, r6
 80290ca:	0136      	lsls	r6, r6, #4
 80290cc:	eba6 070e 	sub.w	r7, r6, lr
 80290d0:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 80290d4:	b2bf      	uxth	r7, r7
 80290d6:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 80290da:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 80290de:	fb07 f60a 	mul.w	r6, r7, sl
 80290e2:	b280      	uxth	r0, r0
 80290e4:	1a1b      	subs	r3, r3, r0
 80290e6:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 80290ea:	b29b      	uxth	r3, r3
 80290ec:	fb0b 6603 	mla	r6, fp, r3, r6
 80290f0:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80290f4:	fb00 6609 	mla	r6, r0, r9, r6
 80290f8:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80290fc:	fb0e 6608 	mla	r6, lr, r8, r6
 8029100:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8029104:	9600      	str	r6, [sp, #0]
 8029106:	2e00      	cmp	r6, #0
 8029108:	f000 80af 	beq.w	802926a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 802910c:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8029110:	fb0b fc0c 	mul.w	ip, fp, ip
 8029114:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8029118:	fb0b f505 	mul.w	r5, fp, r5
 802911c:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8029120:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 8029124:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8029128:	44dc      	add	ip, fp
 802912a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802912e:	9501      	str	r5, [sp, #4]
 8029130:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
 8029134:	9503      	str	r5, [sp, #12]
 8029136:	9d01      	ldr	r5, [sp, #4]
 8029138:	9e02      	ldr	r6, [sp, #8]
 802913a:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 802913e:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8029142:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 8029146:	fb0a fc0c 	mul.w	ip, sl, ip
 802914a:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 802914e:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8029152:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8029156:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802915a:	4465      	add	r5, ip
 802915c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8029160:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 8029164:	fb09 fc0c 	mul.w	ip, r9, ip
 8029168:	fb09 f904 	mul.w	r9, r9, r4
 802916c:	f509 7480 	add.w	r4, r9, #256	@ 0x100
 8029170:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8029174:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
 8029178:	fb08 f404 	mul.w	r4, r8, r4
 802917c:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8029180:	fb08 f802 	mul.w	r8, r8, r2
 8029184:	0a2d      	lsrs	r5, r5, #8
 8029186:	0a22      	lsrs	r2, r4, #8
 8029188:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 802918c:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8029190:	437d      	muls	r5, r7
 8029192:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 8029196:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 802919a:	4414      	add	r4, r2
 802919c:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 80291a0:	fb0a fa01 	mul.w	sl, sl, r1
 80291a4:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80291a8:	9a03      	ldr	r2, [sp, #12]
 80291aa:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
 80291ae:	fb02 5503 	mla	r5, r2, r3, r5
 80291b2:	0a24      	lsrs	r4, r4, #8
 80291b4:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 80291b8:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 80291bc:	ea4f 211c 	mov.w	r1, ip, lsr #8
 80291c0:	fb04 540e 	mla	r4, r4, lr, r5
 80291c4:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 80291c8:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80291cc:	4461      	add	r1, ip
 80291ce:	0a09      	lsrs	r1, r1, #8
 80291d0:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 80291d4:	fb01 4100 	mla	r1, r1, r0, r4
 80291d8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80291dc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80291e0:	fb07 f70a 	mul.w	r7, r7, sl
 80291e4:	0a09      	lsrs	r1, r1, #8
 80291e6:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
 80291ea:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
 80291ee:	fb03 7101 	mla	r1, r3, r1, r7
 80291f2:	9b00      	ldr	r3, [sp, #0]
 80291f4:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80291f8:	43da      	mvns	r2, r3
 80291fa:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 80291fe:	fb0e 1e08 	mla	lr, lr, r8, r1
 8029202:	8836      	ldrh	r6, [r6, #0]
 8029204:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8029208:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 802920c:	fb00 e101 	mla	r1, r0, r1, lr
 8029210:	1233      	asrs	r3, r6, #8
 8029212:	b2d2      	uxtb	r2, r2
 8029214:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8029218:	4353      	muls	r3, r2
 802921a:	10f0      	asrs	r0, r6, #3
 802921c:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8029220:	4350      	muls	r0, r2
 8029222:	0a09      	lsrs	r1, r1, #8
 8029224:	00f6      	lsls	r6, r6, #3
 8029226:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 802922a:	b2f6      	uxtb	r6, r6
 802922c:	4321      	orrs	r1, r4
 802922e:	4356      	muls	r6, r2
 8029230:	1c5a      	adds	r2, r3, #1
 8029232:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8029236:	0c0b      	lsrs	r3, r1, #16
 8029238:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802923c:	1c42      	adds	r2, r0, #1
 802923e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8029242:	0a0a      	lsrs	r2, r1, #8
 8029244:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8029248:	021b      	lsls	r3, r3, #8
 802924a:	00d2      	lsls	r2, r2, #3
 802924c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8029250:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 8029254:	4313      	orrs	r3, r2
 8029256:	1c72      	adds	r2, r6, #1
 8029258:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 802925c:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 8029260:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8029264:	4319      	orrs	r1, r3
 8029266:	9b02      	ldr	r3, [sp, #8]
 8029268:	8019      	strh	r1, [r3, #0]
 802926a:	b005      	add	sp, #20
 802926c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029270:	2500      	movs	r5, #0
 8029272:	e6fe      	b.n	8029072 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 8029274:	2100      	movs	r1, #0
 8029276:	460d      	mov	r5, r1
 8029278:	e706      	b.n	8029088 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 802927a:	2100      	movs	r1, #0
 802927c:	e704      	b.n	8029088 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 802927e:	4631      	mov	r1, r6
 8029280:	e702      	b.n	8029088 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8029282:	2400      	movs	r4, #0
 8029284:	e713      	b.n	80290ae <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 8029286:	2200      	movs	r2, #0
 8029288:	4614      	mov	r4, r2
 802928a:	e71a      	b.n	80290c2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 802928c:	4602      	mov	r2, r0
 802928e:	4604      	mov	r4, r0
 8029290:	e717      	b.n	80290c2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8029292:	2200      	movs	r2, #0
 8029294:	e715      	b.n	80290c2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8029296:	4632      	mov	r2, r6
 8029298:	e713      	b.n	80290c2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
	...

0802929c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802929c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80292a0:	b09b      	sub	sp, #108	@ 0x6c
 80292a2:	9218      	str	r2, [sp, #96]	@ 0x60
 80292a4:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 80292a6:	9019      	str	r0, [sp, #100]	@ 0x64
 80292a8:	6850      	ldr	r0, [r2, #4]
 80292aa:	9116      	str	r1, [sp, #88]	@ 0x58
 80292ac:	9307      	str	r3, [sp, #28]
 80292ae:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 80292b2:	fb00 1303 	mla	r3, r0, r3, r1
 80292b6:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	@ 0x94
 80292ba:	6812      	ldr	r2, [r2, #0]
 80292bc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80292c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80292c2:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80292c4:	681b      	ldr	r3, [r3, #0]
 80292c6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80292c8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80292ca:	2b00      	cmp	r3, #0
 80292cc:	dc03      	bgt.n	80292d6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80292ce:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80292d0:	2b00      	cmp	r3, #0
 80292d2:	f340 8387 	ble.w	80299e4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 80292d6:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80292d8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80292dc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80292e0:	1e48      	subs	r0, r1, #1
 80292e2:	1e57      	subs	r7, r2, #1
 80292e4:	9b07      	ldr	r3, [sp, #28]
 80292e6:	2b00      	cmp	r3, #0
 80292e8:	f340 8166 	ble.w	80295b8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 80292ec:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80292f0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80292f4:	d406      	bmi.n	8029304 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80292f6:	4584      	cmp	ip, r0
 80292f8:	da04      	bge.n	8029304 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80292fa:	2b00      	cmp	r3, #0
 80292fc:	db02      	blt.n	8029304 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80292fe:	42bb      	cmp	r3, r7
 8029300:	f2c0 815b 	blt.w	80295ba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8029304:	f11c 0c01 	adds.w	ip, ip, #1
 8029308:	f100 814b 	bmi.w	80295a2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802930c:	4561      	cmp	r1, ip
 802930e:	f2c0 8148 	blt.w	80295a2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8029312:	3301      	adds	r3, #1
 8029314:	f100 8145 	bmi.w	80295a2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8029318:	429a      	cmp	r2, r3
 802931a:	f2c0 8142 	blt.w	80295a2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802931e:	9b07      	ldr	r3, [sp, #28]
 8029320:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8029322:	9317      	str	r3, [sp, #92]	@ 0x5c
 8029324:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8029326:	2b00      	cmp	r3, #0
 8029328:	f340 8165 	ble.w	80295f6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 802932c:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 802932e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8029330:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8029334:	1422      	asrs	r2, r4, #16
 8029336:	ea4f 4c26 	mov.w	ip, r6, asr #16
 802933a:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802933e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8029342:	689b      	ldr	r3, [r3, #8]
 8029344:	f100 81d5 	bmi.w	80296f2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8029348:	f103 38ff 	add.w	r8, r3, #4294967295
 802934c:	4542      	cmp	r2, r8
 802934e:	f280 81d0 	bge.w	80296f2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8029352:	f1bc 0f00 	cmp.w	ip, #0
 8029356:	f2c0 81cc 	blt.w	80296f2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802935a:	f10e 38ff 	add.w	r8, lr, #4294967295
 802935e:	45c4      	cmp	ip, r8
 8029360:	f280 81c7 	bge.w	80296f2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8029364:	b21b      	sxth	r3, r3
 8029366:	fb0c 2203 	mla	r2, ip, r3, r2
 802936a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 802936c:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8029370:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8029374:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8029378:	2900      	cmp	r1, #0
 802937a:	f000 8182 	beq.w	8029682 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 802937e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8029382:	950b      	str	r5, [sp, #44]	@ 0x2c
 8029384:	0e2d      	lsrs	r5, r5, #24
 8029386:	9512      	str	r5, [sp, #72]	@ 0x48
 8029388:	b180      	cbz	r0, 80293ac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 802938a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 802938e:	3b01      	subs	r3, #1
 8029390:	009b      	lsls	r3, r3, #2
 8029392:	3304      	adds	r3, #4
 8029394:	eb08 0c03 	add.w	ip, r8, r3
 8029398:	f858 3003 	ldr.w	r3, [r8, r3]
 802939c:	9308      	str	r3, [sp, #32]
 802939e:	0e1b      	lsrs	r3, r3, #24
 80293a0:	9310      	str	r3, [sp, #64]	@ 0x40
 80293a2:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80293a6:	930c      	str	r3, [sp, #48]	@ 0x30
 80293a8:	0e1b      	lsrs	r3, r3, #24
 80293aa:	9313      	str	r3, [sp, #76]	@ 0x4c
 80293ac:	b289      	uxth	r1, r1
 80293ae:	b280      	uxth	r0, r0
 80293b0:	fb01 f900 	mul.w	r9, r1, r0
 80293b4:	0109      	lsls	r1, r1, #4
 80293b6:	eba1 0809 	sub.w	r8, r1, r9
 80293ba:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80293bc:	fa1f f888 	uxth.w	r8, r8
 80293c0:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80293c4:	fb08 f303 	mul.w	r3, r8, r3
 80293c8:	b280      	uxth	r0, r0
 80293ca:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80293ce:	1a09      	subs	r1, r1, r0
 80293d0:	b289      	uxth	r1, r1
 80293d2:	fb01 330e 	mla	r3, r1, lr, r3
 80293d6:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80293d8:	fb00 3305 	mla	r3, r0, r5, r3
 80293dc:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80293de:	fb09 3305 	mla	r3, r9, r5, r3
 80293e2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80293e6:	2b00      	cmp	r3, #0
 80293e8:	f000 80d2 	beq.w	8029590 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80293ec:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80293f0:	d01b      	beq.n	802942a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 80293f2:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 80293f6:	fb0e fa0a 	mul.w	sl, lr, sl
 80293fa:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80293fe:	fb0e fe02 	mul.w	lr, lr, r2
 8029402:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8029406:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802940a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802940e:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8029412:	4452      	add	r2, sl
 8029414:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8029418:	0a12      	lsrs	r2, r2, #8
 802941a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802941e:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8029422:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8029426:	ea42 020c 	orr.w	r2, r2, ip
 802942a:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 802942c:	2dff      	cmp	r5, #255	@ 0xff
 802942e:	d021      	beq.n	8029474 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8029430:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8029432:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8029436:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8029438:	fb05 fb0b 	mul.w	fp, r5, fp
 802943c:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802943e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8029442:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8029446:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8029448:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802944c:	fb05 fa0a 	mul.w	sl, r5, sl
 8029450:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8029454:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8029458:	44de      	add	lr, fp
 802945a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802945e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029462:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029466:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802946a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802946e:	ea4e 050a 	orr.w	r5, lr, sl
 8029472:	950b      	str	r5, [sp, #44]	@ 0x2c
 8029474:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8029476:	2dff      	cmp	r5, #255	@ 0xff
 8029478:	d021      	beq.n	80294be <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 802947a:	9d08      	ldr	r5, [sp, #32]
 802947c:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8029480:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8029482:	fb05 fb0b 	mul.w	fp, r5, fp
 8029486:	9d08      	ldr	r5, [sp, #32]
 8029488:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 802948c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 802948e:	fb05 fa0e 	mul.w	sl, r5, lr
 8029492:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8029496:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802949a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802949e:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80294a2:	44de      	add	lr, fp
 80294a4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80294a8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80294ac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80294b0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80294b4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80294b8:	ea4e 050a 	orr.w	r5, lr, sl
 80294bc:	9508      	str	r5, [sp, #32]
 80294be:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80294c0:	2dff      	cmp	r5, #255	@ 0xff
 80294c2:	d021      	beq.n	8029508 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 80294c4:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80294c6:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 80294ca:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80294cc:	fb05 fb0b 	mul.w	fp, r5, fp
 80294d0:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80294d2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80294d6:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 80294da:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80294dc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80294e0:	fb05 fa0a 	mul.w	sl, r5, sl
 80294e4:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80294e8:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80294ec:	44de      	add	lr, fp
 80294ee:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80294f2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80294f6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80294fa:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80294fe:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8029502:	ea4e 050a 	orr.w	r5, lr, sl
 8029506:	950c      	str	r5, [sp, #48]	@ 0x30
 8029508:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802950a:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 802950e:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8029512:	fb08 fc0c 	mul.w	ip, r8, ip
 8029516:	fb01 cc0e 	mla	ip, r1, lr, ip
 802951a:	9d08      	ldr	r5, [sp, #32]
 802951c:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8029520:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8029524:	fb00 cc0e 	mla	ip, r0, lr, ip
 8029528:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 802952a:	2bff      	cmp	r3, #255	@ 0xff
 802952c:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8029530:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8029532:	fb09 cc0e 	mla	ip, r9, lr, ip
 8029536:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 802953a:	fb08 f80e 	mul.w	r8, r8, lr
 802953e:	fb01 8202 	mla	r2, r1, r2, r8
 8029542:	9908      	ldr	r1, [sp, #32]
 8029544:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029548:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 802954c:	fb00 220a 	mla	r2, r0, sl, r2
 8029550:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8029552:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029556:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 802955a:	fb09 2900 	mla	r9, r9, r0, r2
 802955e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8029562:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8029566:	ea4c 0c09 	orr.w	ip, ip, r9
 802956a:	ea4f 221c 	mov.w	r2, ip, lsr #8
 802956e:	f040 8091 	bne.w	8029694 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8029572:	ea4f 135c 	mov.w	r3, ip, lsr #5
 8029576:	f422 62ff 	bic.w	r2, r2, #2040	@ 0x7f8
 802957a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802957e:	f022 0207 	bic.w	r2, r2, #7
 8029582:	431a      	orrs	r2, r3
 8029584:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8029588:	ea4c 0c02 	orr.w	ip, ip, r2
 802958c:	f8a7 c000 	strh.w	ip, [r7]
 8029590:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8029592:	3702      	adds	r7, #2
 8029594:	441c      	add	r4, r3
 8029596:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8029598:	441e      	add	r6, r3
 802959a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802959c:	3b01      	subs	r3, #1
 802959e:	9317      	str	r3, [sp, #92]	@ 0x5c
 80295a0:	e6c0      	b.n	8029324 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 80295a2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80295a4:	441c      	add	r4, r3
 80295a6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80295a8:	441e      	add	r6, r3
 80295aa:	9b07      	ldr	r3, [sp, #28]
 80295ac:	3b01      	subs	r3, #1
 80295ae:	9307      	str	r3, [sp, #28]
 80295b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80295b2:	3302      	adds	r3, #2
 80295b4:	930a      	str	r3, [sp, #40]	@ 0x28
 80295b6:	e695      	b.n	80292e4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80295b8:	d024      	beq.n	8029604 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80295ba:	9b07      	ldr	r3, [sp, #28]
 80295bc:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 80295be:	3b01      	subs	r3, #1
 80295c0:	fb00 4003 	mla	r0, r0, r3, r4
 80295c4:	1400      	asrs	r0, r0, #16
 80295c6:	f53f aeaa 	bmi.w	802931e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80295ca:	3901      	subs	r1, #1
 80295cc:	4288      	cmp	r0, r1
 80295ce:	f6bf aea6 	bge.w	802931e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80295d2:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 80295d4:	fb01 6303 	mla	r3, r1, r3, r6
 80295d8:	141b      	asrs	r3, r3, #16
 80295da:	f53f aea0 	bmi.w	802931e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80295de:	3a01      	subs	r2, #1
 80295e0:	4293      	cmp	r3, r2
 80295e2:	f6bf ae9c 	bge.w	802931e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80295e6:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80295ea:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 80295ee:	f1bb 0f00 	cmp.w	fp, #0
 80295f2:	f300 809a 	bgt.w	802972a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 80295f6:	9b07      	ldr	r3, [sp, #28]
 80295f8:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80295fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80295fe:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8029602:	930a      	str	r3, [sp, #40]	@ 0x28
 8029604:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8029606:	2b00      	cmp	r3, #0
 8029608:	f340 81ec 	ble.w	80299e4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 802960c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8029610:	ee30 0a04 	vadd.f32	s0, s0, s8
 8029614:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8029618:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802961c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8029620:	eef0 6a62 	vmov.f32	s13, s5
 8029624:	ee31 1a05 	vadd.f32	s2, s2, s10
 8029628:	ee77 2a62 	vsub.f32	s5, s14, s5
 802962c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8029630:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029634:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8029638:	ee16 4a90 	vmov	r4, s13
 802963c:	eef0 6a43 	vmov.f32	s13, s6
 8029640:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8029644:	ee12 2a90 	vmov	r2, s5
 8029648:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802964c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802964e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029652:	fb92 f3f3 	sdiv	r3, r2, r3
 8029656:	ee13 2a10 	vmov	r2, s6
 802965a:	9327      	str	r3, [sp, #156]	@ 0x9c
 802965c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802965e:	ee16 6a90 	vmov	r6, s13
 8029662:	fb92 f3f3 	sdiv	r3, r2, r3
 8029666:	9328      	str	r3, [sp, #160]	@ 0xa0
 8029668:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802966a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802966c:	3b01      	subs	r3, #1
 802966e:	9316      	str	r3, [sp, #88]	@ 0x58
 8029670:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8029672:	bf08      	it	eq
 8029674:	4613      	moveq	r3, r2
 8029676:	eeb0 3a67 	vmov.f32	s6, s15
 802967a:	9307      	str	r3, [sp, #28]
 802967c:	eef0 2a47 	vmov.f32	s5, s14
 8029680:	e622      	b.n	80292c8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 8029682:	2800      	cmp	r0, #0
 8029684:	f43f ae92 	beq.w	80293ac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8029688:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 802968c:	9308      	str	r3, [sp, #32]
 802968e:	0e1b      	lsrs	r3, r3, #24
 8029690:	9310      	str	r3, [sp, #64]	@ 0x40
 8029692:	e68b      	b.n	80293ac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8029694:	43db      	mvns	r3, r3
 8029696:	8839      	ldrh	r1, [r7, #0]
 8029698:	fa5f f883 	uxtb.w	r8, r3
 802969c:	ea4f 2e21 	mov.w	lr, r1, asr #8
 80296a0:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 80296a4:	fb0e fe08 	mul.w	lr, lr, r8
 80296a8:	10c8      	asrs	r0, r1, #3
 80296aa:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80296ae:	fb00 f008 	mul.w	r0, r0, r8
 80296b2:	00cb      	lsls	r3, r1, #3
 80296b4:	f10e 0101 	add.w	r1, lr, #1
 80296b8:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 80296bc:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80296c0:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 80296c4:	b2db      	uxtb	r3, r3
 80296c6:	f100 0e01 	add.w	lr, r0, #1
 80296ca:	fb03 f308 	mul.w	r3, r3, r8
 80296ce:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 80296d2:	4dc6      	ldr	r5, [pc, #792]	@ (80299ec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 80296d4:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80296d8:	b2c9      	uxtb	r1, r1
 80296da:	00d2      	lsls	r2, r2, #3
 80296dc:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 80296e0:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80296e4:	430a      	orrs	r2, r1
 80296e6:	1c59      	adds	r1, r3, #1
 80296e8:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80296ec:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80296f0:	e748      	b.n	8029584 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 80296f2:	f112 0801 	adds.w	r8, r2, #1
 80296f6:	f53f af4b 	bmi.w	8029590 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80296fa:	4543      	cmp	r3, r8
 80296fc:	f6ff af48 	blt.w	8029590 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8029700:	f11c 0801 	adds.w	r8, ip, #1
 8029704:	f53f af44 	bmi.w	8029590 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8029708:	45c6      	cmp	lr, r8
 802970a:	f6ff af41 	blt.w	8029590 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802970e:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8029712:	fa0f f28e 	sxth.w	r2, lr
 8029716:	e9cd 1003 	strd	r1, r0, [sp, #12]
 802971a:	9200      	str	r2, [sp, #0]
 802971c:	b21b      	sxth	r3, r3
 802971e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8029720:	4639      	mov	r1, r7
 8029722:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8029724:	f7ff fc87 	bl	8029036 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8029728:	e732      	b.n	8029590 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802972a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802972c:	1421      	asrs	r1, r4, #16
 802972e:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 8029732:	1433      	asrs	r3, r6, #16
 8029734:	fb07 1303 	mla	r3, r7, r3, r1
 8029738:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 802973a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802973c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8029740:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8029744:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8029748:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802974c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8029750:	2a00      	cmp	r2, #0
 8029752:	f000 8108 	beq.w	8029966 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 8029756:	684d      	ldr	r5, [r1, #4]
 8029758:	950d      	str	r5, [sp, #52]	@ 0x34
 802975a:	0e2d      	lsrs	r5, r5, #24
 802975c:	9514      	str	r5, [sp, #80]	@ 0x50
 802975e:	b178      	cbz	r0, 8029780 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8029760:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8029764:	3f01      	subs	r7, #1
 8029766:	00bf      	lsls	r7, r7, #2
 8029768:	3704      	adds	r7, #4
 802976a:	eb01 0e07 	add.w	lr, r1, r7
 802976e:	59c9      	ldr	r1, [r1, r7]
 8029770:	9109      	str	r1, [sp, #36]	@ 0x24
 8029772:	0e09      	lsrs	r1, r1, #24
 8029774:	9111      	str	r1, [sp, #68]	@ 0x44
 8029776:	f8de 1004 	ldr.w	r1, [lr, #4]
 802977a:	910e      	str	r1, [sp, #56]	@ 0x38
 802977c:	0e09      	lsrs	r1, r1, #24
 802977e:	9115      	str	r1, [sp, #84]	@ 0x54
 8029780:	b292      	uxth	r2, r2
 8029782:	b280      	uxth	r0, r0
 8029784:	fb02 f900 	mul.w	r9, r2, r0
 8029788:	0112      	lsls	r2, r2, #4
 802978a:	eba2 0e09 	sub.w	lr, r2, r9
 802978e:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 8029792:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8029794:	fa1f fe8e 	uxth.w	lr, lr
 8029798:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802979c:	fb0e f202 	mul.w	r2, lr, r2
 80297a0:	b280      	uxth	r0, r0
 80297a2:	1a09      	subs	r1, r1, r0
 80297a4:	b289      	uxth	r1, r1
 80297a6:	fb01 220c 	mla	r2, r1, ip, r2
 80297aa:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80297ac:	fb00 2205 	mla	r2, r0, r5, r2
 80297b0:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 80297b2:	fb09 2205 	mla	r2, r9, r5, r2
 80297b6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80297ba:	2a00      	cmp	r2, #0
 80297bc:	f000 80ca 	beq.w	8029954 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 80297c0:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 80297c4:	d019      	beq.n	80297fa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 80297c6:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80297ca:	fb0c fa0a 	mul.w	sl, ip, sl
 80297ce:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80297d2:	fb0c fc03 	mul.w	ip, ip, r3
 80297d6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80297da:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80297de:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80297e2:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 80297e6:	4453      	add	r3, sl
 80297e8:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80297ec:	0a1b      	lsrs	r3, r3, #8
 80297ee:	0a3f      	lsrs	r7, r7, #8
 80297f0:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80297f4:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 80297f8:	433b      	orrs	r3, r7
 80297fa:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80297fc:	2dff      	cmp	r5, #255	@ 0xff
 80297fe:	d020      	beq.n	8029842 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 8029800:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8029802:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8029806:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8029808:	436f      	muls	r7, r5
 802980a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 802980c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029810:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8029814:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8029816:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802981a:	fb05 fa0a 	mul.w	sl, r5, sl
 802981e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029822:	44bc      	add	ip, r7
 8029824:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8029828:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802982c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029830:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029834:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029838:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802983c:	ea4c 050a 	orr.w	r5, ip, sl
 8029840:	950d      	str	r5, [sp, #52]	@ 0x34
 8029842:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8029844:	2dff      	cmp	r5, #255	@ 0xff
 8029846:	d020      	beq.n	802988a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 8029848:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 802984a:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 802984e:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8029850:	436f      	muls	r7, r5
 8029852:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8029854:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 8029858:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802985a:	fb05 fa0c 	mul.w	sl, r5, ip
 802985e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029862:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029866:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802986a:	44bc      	add	ip, r7
 802986c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8029870:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029874:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029878:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802987c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029880:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8029884:	ea4c 050a 	orr.w	r5, ip, sl
 8029888:	9509      	str	r5, [sp, #36]	@ 0x24
 802988a:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 802988c:	2dff      	cmp	r5, #255	@ 0xff
 802988e:	d020      	beq.n	80298d2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 8029890:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8029892:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8029896:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8029898:	436f      	muls	r7, r5
 802989a:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802989c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80298a0:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 80298a4:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 80298a6:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80298aa:	fb05 fa0a 	mul.w	sl, r5, sl
 80298ae:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80298b2:	44bc      	add	ip, r7
 80298b4:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80298b8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80298bc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80298c0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80298c4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80298c8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80298cc:	ea4c 050a 	orr.w	r5, ip, sl
 80298d0:	950e      	str	r5, [sp, #56]	@ 0x38
 80298d2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80298d4:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 80298d8:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 80298dc:	fb0e f707 	mul.w	r7, lr, r7
 80298e0:	fb01 770c 	mla	r7, r1, ip, r7
 80298e4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80298e6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80298ea:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 80298ee:	fb00 770c 	mla	r7, r0, ip, r7
 80298f2:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80298f4:	2aff      	cmp	r2, #255	@ 0xff
 80298f6:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 80298fa:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80298fc:	fb09 770c 	mla	r7, r9, ip, r7
 8029900:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 8029904:	fb0e fe0c 	mul.w	lr, lr, ip
 8029908:	fb01 e303 	mla	r3, r1, r3, lr
 802990c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802990e:	ea4f 2717 	mov.w	r7, r7, lsr #8
 8029912:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8029916:	fb00 330a 	mla	r3, r0, sl, r3
 802991a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802991c:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8029920:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 8029924:	fb09 3c0c 	mla	ip, r9, ip, r3
 8029928:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802992c:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8029930:	ea47 070c 	orr.w	r7, r7, ip
 8029934:	ea4f 2317 	mov.w	r3, r7, lsr #8
 8029938:	d11e      	bne.n	8029978 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 802993a:	097a      	lsrs	r2, r7, #5
 802993c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8029940:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8029944:	f023 0307 	bic.w	r3, r3, #7
 8029948:	4313      	orrs	r3, r2
 802994a:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 802994e:	431f      	orrs	r7, r3
 8029950:	f8a8 7000 	strh.w	r7, [r8]
 8029954:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8029956:	f108 0802 	add.w	r8, r8, #2
 802995a:	441c      	add	r4, r3
 802995c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802995e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8029962:	441e      	add	r6, r3
 8029964:	e643      	b.n	80295ee <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8029966:	2800      	cmp	r0, #0
 8029968:	f43f af0a 	beq.w	8029780 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802996c:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8029970:	9109      	str	r1, [sp, #36]	@ 0x24
 8029972:	0e09      	lsrs	r1, r1, #24
 8029974:	9111      	str	r1, [sp, #68]	@ 0x44
 8029976:	e703      	b.n	8029780 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8029978:	43d2      	mvns	r2, r2
 802997a:	f8b8 1000 	ldrh.w	r1, [r8]
 802997e:	fa5f fe82 	uxtb.w	lr, r2
 8029982:	ea4f 2c21 	mov.w	ip, r1, asr #8
 8029986:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 802998a:	fb0c fc0e 	mul.w	ip, ip, lr
 802998e:	10c8      	asrs	r0, r1, #3
 8029990:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8029994:	fb00 f00e 	mul.w	r0, r0, lr
 8029998:	00ca      	lsls	r2, r1, #3
 802999a:	f10c 0101 	add.w	r1, ip, #1
 802999e:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80299a2:	b2d2      	uxtb	r2, r2
 80299a4:	0c39      	lsrs	r1, r7, #16
 80299a6:	fb02 f20e 	mul.w	r2, r2, lr
 80299aa:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80299ae:	490f      	ldr	r1, [pc, #60]	@ (80299ec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 80299b0:	fa5f fc8c 	uxtb.w	ip, ip
 80299b4:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 80299b8:	1c41      	adds	r1, r0, #1
 80299ba:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80299be:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80299c2:	1c51      	adds	r1, r2, #1
 80299c4:	00c0      	lsls	r0, r0, #3
 80299c6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80299ca:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80299ce:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80299d2:	ea4c 0c00 	orr.w	ip, ip, r0
 80299d6:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 80299da:	ea47 0c0c 	orr.w	ip, r7, ip
 80299de:	f8a8 c000 	strh.w	ip, [r8]
 80299e2:	e7b7      	b.n	8029954 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 80299e4:	b01b      	add	sp, #108	@ 0x6c
 80299e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80299ea:	bf00      	nop
 80299ec:	fffff800 	.word	0xfffff800

080299f0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 80299f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80299f4:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	@ 0x28
 80299f8:	2d00      	cmp	r5, #0
 80299fa:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 80299fe:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8029a02:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 8029a06:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
 8029a0a:	fb05 0e03 	mla	lr, r5, r3, r0
 8029a0e:	f2c0 808c 	blt.w	8029b2a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8029a12:	45a9      	cmp	r9, r5
 8029a14:	f340 8089 	ble.w	8029b2a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8029a18:	2800      	cmp	r0, #0
 8029a1a:	f2c0 8084 	blt.w	8029b26 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8029a1e:	4580      	cmp	r8, r0
 8029a20:	f340 8081 	ble.w	8029b26 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8029a24:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8029a28:	5d16      	ldrb	r6, [r2, r4]
 8029a2a:	f01e 0f01 	tst.w	lr, #1
 8029a2e:	bf0c      	ite	eq
 8029a30:	f006 060f 	andeq.w	r6, r6, #15
 8029a34:	1136      	asrne	r6, r6, #4
 8029a36:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8029a3a:	b2f6      	uxtb	r6, r6
 8029a3c:	1c44      	adds	r4, r0, #1
 8029a3e:	d477      	bmi.n	8029b30 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8029a40:	45a0      	cmp	r8, r4
 8029a42:	dd75      	ble.n	8029b30 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8029a44:	2f00      	cmp	r7, #0
 8029a46:	d075      	beq.n	8029b34 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 8029a48:	f10e 0a01 	add.w	sl, lr, #1
 8029a4c:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8029a50:	5d14      	ldrb	r4, [r2, r4]
 8029a52:	f01a 0f01 	tst.w	sl, #1
 8029a56:	bf0c      	ite	eq
 8029a58:	f004 040f 	andeq.w	r4, r4, #15
 8029a5c:	1124      	asrne	r4, r4, #4
 8029a5e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8029a62:	b2e4      	uxtb	r4, r4
 8029a64:	3501      	adds	r5, #1
 8029a66:	d469      	bmi.n	8029b3c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8029a68:	45a9      	cmp	r9, r5
 8029a6a:	dd67      	ble.n	8029b3c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8029a6c:	f1bc 0f00 	cmp.w	ip, #0
 8029a70:	d067      	beq.n	8029b42 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 8029a72:	2800      	cmp	r0, #0
 8029a74:	db60      	blt.n	8029b38 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8029a76:	4580      	cmp	r8, r0
 8029a78:	dd5e      	ble.n	8029b38 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8029a7a:	eb03 090e 	add.w	r9, r3, lr
 8029a7e:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8029a82:	5d55      	ldrb	r5, [r2, r5]
 8029a84:	f019 0f01 	tst.w	r9, #1
 8029a88:	bf0c      	ite	eq
 8029a8a:	f005 050f 	andeq.w	r5, r5, #15
 8029a8e:	112d      	asrne	r5, r5, #4
 8029a90:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8029a94:	b2ed      	uxtb	r5, r5
 8029a96:	3001      	adds	r0, #1
 8029a98:	d456      	bmi.n	8029b48 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8029a9a:	4580      	cmp	r8, r0
 8029a9c:	dd54      	ble.n	8029b48 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8029a9e:	2f00      	cmp	r7, #0
 8029aa0:	d054      	beq.n	8029b4c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 8029aa2:	3301      	adds	r3, #1
 8029aa4:	449e      	add	lr, r3
 8029aa6:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8029aaa:	5cd0      	ldrb	r0, [r2, r3]
 8029aac:	f01e 0f01 	tst.w	lr, #1
 8029ab0:	bf0c      	ite	eq
 8029ab2:	f000 000f 	andeq.w	r0, r0, #15
 8029ab6:	1100      	asrne	r0, r0, #4
 8029ab8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8029abc:	b2c3      	uxtb	r3, r0
 8029abe:	b2ba      	uxth	r2, r7
 8029ac0:	fa1f fc8c 	uxth.w	ip, ip
 8029ac4:	fb02 f00c 	mul.w	r0, r2, ip
 8029ac8:	0112      	lsls	r2, r2, #4
 8029aca:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 8029ace:	1a12      	subs	r2, r2, r0
 8029ad0:	b292      	uxth	r2, r2
 8029ad2:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8029ad6:	4362      	muls	r2, r4
 8029ad8:	fa1f fc8c 	uxth.w	ip, ip
 8029adc:	eba7 070c 	sub.w	r7, r7, ip
 8029ae0:	b2bf      	uxth	r7, r7
 8029ae2:	fb06 2207 	mla	r2, r6, r7, r2
 8029ae6:	fb0c 2505 	mla	r5, ip, r5, r2
 8029aea:	fb00 5303 	mla	r3, r0, r3, r5
 8029aee:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029af2:	b1b3      	cbz	r3, 8029b22 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8029af4:	f89d 2038 	ldrb.w	r2, [sp, #56]	@ 0x38
 8029af8:	435a      	muls	r2, r3
 8029afa:	1c53      	adds	r3, r2, #1
 8029afc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8029b00:	4a2d      	ldr	r2, [pc, #180]	@ (8029bb8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 8029b02:	121b      	asrs	r3, r3, #8
 8029b04:	6812      	ldr	r2, [r2, #0]
 8029b06:	2bff      	cmp	r3, #255	@ 0xff
 8029b08:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8029b0c:	d120      	bne.n	8029b50 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 8029b0e:	4b2b      	ldr	r3, [pc, #172]	@ (8029bbc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 8029b10:	0950      	lsrs	r0, r2, #5
 8029b12:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8029b16:	4033      	ands	r3, r6
 8029b18:	4318      	orrs	r0, r3
 8029b1a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8029b1e:	4302      	orrs	r2, r0
 8029b20:	800a      	strh	r2, [r1, #0]
 8029b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029b26:	2600      	movs	r6, #0
 8029b28:	e788      	b.n	8029a3c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 8029b2a:	2400      	movs	r4, #0
 8029b2c:	4626      	mov	r6, r4
 8029b2e:	e799      	b.n	8029a64 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8029b30:	2400      	movs	r4, #0
 8029b32:	e797      	b.n	8029a64 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8029b34:	463c      	mov	r4, r7
 8029b36:	e795      	b.n	8029a64 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8029b38:	2500      	movs	r5, #0
 8029b3a:	e7ac      	b.n	8029a96 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 8029b3c:	2300      	movs	r3, #0
 8029b3e:	461d      	mov	r5, r3
 8029b40:	e7bd      	b.n	8029abe <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8029b42:	4663      	mov	r3, ip
 8029b44:	4665      	mov	r5, ip
 8029b46:	e7ba      	b.n	8029abe <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8029b48:	2300      	movs	r3, #0
 8029b4a:	e7b8      	b.n	8029abe <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8029b4c:	463b      	mov	r3, r7
 8029b4e:	e7b6      	b.n	8029abe <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8029b50:	b29f      	uxth	r7, r3
 8029b52:	43db      	mvns	r3, r3
 8029b54:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8029b58:	880d      	ldrh	r5, [r1, #0]
 8029b5a:	fb10 f007 	smulbb	r0, r0, r7
 8029b5e:	b2f6      	uxtb	r6, r6
 8029b60:	b2d2      	uxtb	r2, r2
 8029b62:	122c      	asrs	r4, r5, #8
 8029b64:	fb12 f207 	smulbb	r2, r2, r7
 8029b68:	fb16 f607 	smulbb	r6, r6, r7
 8029b6c:	b2db      	uxtb	r3, r3
 8029b6e:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8029b72:	fb04 0403 	mla	r4, r4, r3, r0
 8029b76:	10e8      	asrs	r0, r5, #3
 8029b78:	00ed      	lsls	r5, r5, #3
 8029b7a:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8029b7e:	b2ed      	uxtb	r5, r5
 8029b80:	fb00 6603 	mla	r6, r0, r3, r6
 8029b84:	fb05 2303 	mla	r3, r5, r3, r2
 8029b88:	b2a4      	uxth	r4, r4
 8029b8a:	b29a      	uxth	r2, r3
 8029b8c:	1c63      	adds	r3, r4, #1
 8029b8e:	b2b0      	uxth	r0, r6
 8029b90:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8029b94:	1c53      	adds	r3, r2, #1
 8029b96:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8029b9a:	1c42      	adds	r2, r0, #1
 8029b9c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8029ba0:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 8029ba4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8029ba8:	0940      	lsrs	r0, r0, #5
 8029baa:	4323      	orrs	r3, r4
 8029bac:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8029bb0:	4303      	orrs	r3, r0
 8029bb2:	800b      	strh	r3, [r1, #0]
 8029bb4:	e7b5      	b.n	8029b22 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8029bb6:	bf00      	nop
 8029bb8:	2005ba8c 	.word	0x2005ba8c
 8029bbc:	00fff800 	.word	0x00fff800

08029bc0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8029bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029bc4:	b097      	sub	sp, #92	@ 0x5c
 8029bc6:	9214      	str	r2, [sp, #80]	@ 0x50
 8029bc8:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8029bca:	9015      	str	r0, [sp, #84]	@ 0x54
 8029bcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8029bce:	6850      	ldr	r0, [r2, #4]
 8029bd0:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8029bd4:	910d      	str	r1, [sp, #52]	@ 0x34
 8029bd6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8029bd8:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 8029bdc:	fb00 1303 	mla	r3, r0, r3, r1
 8029be0:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	@ 0x84
 8029be4:	6812      	ldr	r2, [r2, #0]
 8029be6:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8029bea:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8029bec:	689b      	ldr	r3, [r3, #8]
 8029bee:	3301      	adds	r3, #1
 8029bf0:	f023 0301 	bic.w	r3, r3, #1
 8029bf4:	930a      	str	r3, [sp, #40]	@ 0x28
 8029bf6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8029bf8:	681f      	ldr	r7, [r3, #0]
 8029bfa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8029bfc:	2b00      	cmp	r3, #0
 8029bfe:	dc03      	bgt.n	8029c08 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8029c00:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8029c02:	2b00      	cmp	r3, #0
 8029c04:	f340 8287 	ble.w	802a116 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8029c08:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8029c0a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029c0e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8029c12:	1e48      	subs	r0, r1, #1
 8029c14:	f102 3cff 	add.w	ip, r2, #4294967295
 8029c18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029c1a:	2b00      	cmp	r3, #0
 8029c1c:	f340 80c3 	ble.w	8029da6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8029c20:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8029c24:	ea4f 4326 	mov.w	r3, r6, asr #16
 8029c28:	d406      	bmi.n	8029c38 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8029c2a:	4586      	cmp	lr, r0
 8029c2c:	da04      	bge.n	8029c38 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8029c2e:	2b00      	cmp	r3, #0
 8029c30:	db02      	blt.n	8029c38 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8029c32:	4563      	cmp	r3, ip
 8029c34:	f2c0 80b8 	blt.w	8029da8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8029c38:	f11e 0e01 	adds.w	lr, lr, #1
 8029c3c:	f100 80a9 	bmi.w	8029d92 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8029c40:	4571      	cmp	r1, lr
 8029c42:	f2c0 80a6 	blt.w	8029d92 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8029c46:	3301      	adds	r3, #1
 8029c48:	f100 80a3 	bmi.w	8029d92 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8029c4c:	429a      	cmp	r2, r3
 8029c4e:	f2c0 80a0 	blt.w	8029d92 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8029c52:	46c8      	mov	r8, r9
 8029c54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029c56:	f9bd a028 	ldrsh.w	sl, [sp, #40]	@ 0x28
 8029c5a:	930e      	str	r3, [sp, #56]	@ 0x38
 8029c5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8029c5e:	2b00      	cmp	r3, #0
 8029c60:	f340 80c2 	ble.w	8029de8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8029c64:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8029c66:	1430      	asrs	r0, r6, #16
 8029c68:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8029c6c:	1423      	asrs	r3, r4, #16
 8029c6e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8029c72:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8029c76:	f100 814d 	bmi.w	8029f14 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8029c7a:	f10c 3bff 	add.w	fp, ip, #4294967295
 8029c7e:	455b      	cmp	r3, fp
 8029c80:	f280 8148 	bge.w	8029f14 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8029c84:	2800      	cmp	r0, #0
 8029c86:	f2c0 8145 	blt.w	8029f14 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8029c8a:	f10e 3bff 	add.w	fp, lr, #4294967295
 8029c8e:	4558      	cmp	r0, fp
 8029c90:	f280 8140 	bge.w	8029f14 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8029c94:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8029c96:	fb00 3305 	mla	r3, r0, r5, r3
 8029c9a:	0858      	lsrs	r0, r3, #1
 8029c9c:	f817 c000 	ldrb.w	ip, [r7, r0]
 8029ca0:	07dd      	lsls	r5, r3, #31
 8029ca2:	bf54      	ite	pl
 8029ca4:	f00c 0c0f 	andpl.w	ip, ip, #15
 8029ca8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8029cac:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8029cb0:	fa5f fc8c 	uxtb.w	ip, ip
 8029cb4:	2a00      	cmp	r2, #0
 8029cb6:	f000 80db 	beq.w	8029e70 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8029cba:	1c58      	adds	r0, r3, #1
 8029cbc:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8029cc0:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8029cc4:	07c0      	lsls	r0, r0, #31
 8029cc6:	bf54      	ite	pl
 8029cc8:	f00e 0e0f 	andpl.w	lr, lr, #15
 8029ccc:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8029cd0:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8029cd4:	fa5f f08e 	uxtb.w	r0, lr
 8029cd8:	9010      	str	r0, [sp, #64]	@ 0x40
 8029cda:	b1c9      	cbz	r1, 8029d10 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8029cdc:	4453      	add	r3, sl
 8029cde:	0858      	lsrs	r0, r3, #1
 8029ce0:	5c38      	ldrb	r0, [r7, r0]
 8029ce2:	07dd      	lsls	r5, r3, #31
 8029ce4:	bf54      	ite	pl
 8029ce6:	f000 000f 	andpl.w	r0, r0, #15
 8029cea:	1100      	asrmi	r0, r0, #4
 8029cec:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8029cf0:	3301      	adds	r3, #1
 8029cf2:	b2c0      	uxtb	r0, r0
 8029cf4:	900b      	str	r0, [sp, #44]	@ 0x2c
 8029cf6:	0858      	lsrs	r0, r3, #1
 8029cf8:	f817 e000 	ldrb.w	lr, [r7, r0]
 8029cfc:	07dd      	lsls	r5, r3, #31
 8029cfe:	bf54      	ite	pl
 8029d00:	f00e 030f 	andpl.w	r3, lr, #15
 8029d04:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8029d08:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8029d0c:	b2db      	uxtb	r3, r3
 8029d0e:	9311      	str	r3, [sp, #68]	@ 0x44
 8029d10:	b292      	uxth	r2, r2
 8029d12:	b289      	uxth	r1, r1
 8029d14:	fb02 f301 	mul.w	r3, r2, r1
 8029d18:	0112      	lsls	r2, r2, #4
 8029d1a:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 8029d1e:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8029d20:	1ad2      	subs	r2, r2, r3
 8029d22:	b292      	uxth	r2, r2
 8029d24:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8029d28:	436a      	muls	r2, r5
 8029d2a:	b289      	uxth	r1, r1
 8029d2c:	1a40      	subs	r0, r0, r1
 8029d2e:	b280      	uxth	r0, r0
 8029d30:	fb0c 2c00 	mla	ip, ip, r0, r2
 8029d34:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8029d36:	fb01 c102 	mla	r1, r1, r2, ip
 8029d3a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8029d3c:	fb03 1302 	mla	r3, r3, r2, r1
 8029d40:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029d44:	b1db      	cbz	r3, 8029d7e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8029d46:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8029d48:	4353      	muls	r3, r2
 8029d4a:	1c5a      	adds	r2, r3, #1
 8029d4c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8029d50:	4ac6      	ldr	r2, [pc, #792]	@ (802a06c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 8029d52:	121b      	asrs	r3, r3, #8
 8029d54:	6812      	ldr	r2, [r2, #0]
 8029d56:	2bff      	cmp	r3, #255	@ 0xff
 8029d58:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8029d5c:	f040 8099 	bne.w	8029e92 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 8029d60:	0953      	lsrs	r3, r2, #5
 8029d62:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 8029d66:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8029d6a:	f02c 0c07 	bic.w	ip, ip, #7
 8029d6e:	ea43 0c0c 	orr.w	ip, r3, ip
 8029d72:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8029d76:	ea4c 0202 	orr.w	r2, ip, r2
 8029d7a:	f8a8 2000 	strh.w	r2, [r8]
 8029d7e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8029d80:	f108 0802 	add.w	r8, r8, #2
 8029d84:	441c      	add	r4, r3
 8029d86:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8029d88:	441e      	add	r6, r3
 8029d8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8029d8c:	3b01      	subs	r3, #1
 8029d8e:	930e      	str	r3, [sp, #56]	@ 0x38
 8029d90:	e764      	b.n	8029c5c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8029d92:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8029d94:	f109 0902 	add.w	r9, r9, #2
 8029d98:	441c      	add	r4, r3
 8029d9a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8029d9c:	441e      	add	r6, r3
 8029d9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029da0:	3b01      	subs	r3, #1
 8029da2:	9309      	str	r3, [sp, #36]	@ 0x24
 8029da4:	e738      	b.n	8029c18 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8029da6:	d024      	beq.n	8029df2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8029da8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029daa:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8029dac:	3b01      	subs	r3, #1
 8029dae:	fb00 4003 	mla	r0, r0, r3, r4
 8029db2:	1400      	asrs	r0, r0, #16
 8029db4:	f53f af4d 	bmi.w	8029c52 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8029db8:	3901      	subs	r1, #1
 8029dba:	4288      	cmp	r0, r1
 8029dbc:	f6bf af49 	bge.w	8029c52 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8029dc0:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8029dc2:	fb01 6303 	mla	r3, r1, r3, r6
 8029dc6:	141b      	asrs	r3, r3, #16
 8029dc8:	f53f af43 	bmi.w	8029c52 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8029dcc:	3a01      	subs	r2, #1
 8029dce:	4293      	cmp	r3, r2
 8029dd0:	f6bf af3f 	bge.w	8029c52 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8029dd4:	46c8      	mov	r8, r9
 8029dd6:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 8029dda:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8029dde:	930e      	str	r3, [sp, #56]	@ 0x38
 8029de0:	f1bb 0f00 	cmp.w	fp, #0
 8029de4:	f300 80b7 	bgt.w	8029f56 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x396>
 8029de8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029dea:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8029dee:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8029df2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8029df4:	2b00      	cmp	r3, #0
 8029df6:	f340 818e 	ble.w	802a116 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8029dfa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8029dfe:	ee30 0a04 	vadd.f32	s0, s0, s8
 8029e02:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8029e06:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8029e0a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8029e0e:	eef0 6a62 	vmov.f32	s13, s5
 8029e12:	ee31 1a05 	vadd.f32	s2, s2, s10
 8029e16:	ee77 2a62 	vsub.f32	s5, s14, s5
 8029e1a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8029e1e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029e22:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8029e26:	ee16 4a90 	vmov	r4, s13
 8029e2a:	eef0 6a43 	vmov.f32	s13, s6
 8029e2e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8029e32:	ee12 2a90 	vmov	r2, s5
 8029e36:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8029e3a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8029e3c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029e40:	fb92 f3f3 	sdiv	r3, r2, r3
 8029e44:	ee13 2a10 	vmov	r2, s6
 8029e48:	9323      	str	r3, [sp, #140]	@ 0x8c
 8029e4a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8029e4c:	ee16 6a90 	vmov	r6, s13
 8029e50:	fb92 f3f3 	sdiv	r3, r2, r3
 8029e54:	9324      	str	r3, [sp, #144]	@ 0x90
 8029e56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8029e58:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8029e5a:	3b01      	subs	r3, #1
 8029e5c:	930d      	str	r3, [sp, #52]	@ 0x34
 8029e5e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8029e60:	bf08      	it	eq
 8029e62:	4613      	moveq	r3, r2
 8029e64:	eeb0 3a67 	vmov.f32	s6, s15
 8029e68:	9309      	str	r3, [sp, #36]	@ 0x24
 8029e6a:	eef0 2a47 	vmov.f32	s5, s14
 8029e6e:	e6c4      	b.n	8029bfa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8029e70:	2900      	cmp	r1, #0
 8029e72:	f43f af4d 	beq.w	8029d10 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8029e76:	eb0a 0003 	add.w	r0, sl, r3
 8029e7a:	0843      	lsrs	r3, r0, #1
 8029e7c:	5cfb      	ldrb	r3, [r7, r3]
 8029e7e:	07c0      	lsls	r0, r0, #31
 8029e80:	bf54      	ite	pl
 8029e82:	f003 030f 	andpl.w	r3, r3, #15
 8029e86:	111b      	asrmi	r3, r3, #4
 8029e88:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8029e8c:	b2db      	uxtb	r3, r3
 8029e8e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8029e90:	e73e      	b.n	8029d10 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8029e92:	fa1f fb83 	uxth.w	fp, r3
 8029e96:	43db      	mvns	r3, r3
 8029e98:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8029e9c:	f8b8 e000 	ldrh.w	lr, [r8]
 8029ea0:	fb11 f10b 	smulbb	r1, r1, fp
 8029ea4:	fa5f fc8c 	uxtb.w	ip, ip
 8029ea8:	b2d2      	uxtb	r2, r2
 8029eaa:	ea4f 202e 	mov.w	r0, lr, asr #8
 8029eae:	fb1c fc0b 	smulbb	ip, ip, fp
 8029eb2:	fb12 fb0b 	smulbb	fp, r2, fp
 8029eb6:	b2db      	uxtb	r3, r3
 8029eb8:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8029ebc:	fb00 1003 	mla	r0, r0, r3, r1
 8029ec0:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8029ec4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8029ec8:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8029ecc:	fa5f fe8e 	uxtb.w	lr, lr
 8029ed0:	fb01 cc03 	mla	ip, r1, r3, ip
 8029ed4:	fb0e bb03 	mla	fp, lr, r3, fp
 8029ed8:	b280      	uxth	r0, r0
 8029eda:	1c43      	adds	r3, r0, #1
 8029edc:	fa1f fc8c 	uxth.w	ip, ip
 8029ee0:	fa1f fb8b 	uxth.w	fp, fp
 8029ee4:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8029ee8:	f400 4378 	and.w	r3, r0, #63488	@ 0xf800
 8029eec:	f10c 0101 	add.w	r1, ip, #1
 8029ef0:	f10b 0001 	add.w	r0, fp, #1
 8029ef4:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8029ef8:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8029efc:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8029f00:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8029f04:	4318      	orrs	r0, r3
 8029f06:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8029f0a:	ea40 000c 	orr.w	r0, r0, ip
 8029f0e:	f8a8 0000 	strh.w	r0, [r8]
 8029f12:	e734      	b.n	8029d7e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8029f14:	f113 0b01 	adds.w	fp, r3, #1
 8029f18:	f53f af31 	bmi.w	8029d7e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8029f1c:	45dc      	cmp	ip, fp
 8029f1e:	f6ff af2e 	blt.w	8029d7e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8029f22:	f110 0b01 	adds.w	fp, r0, #1
 8029f26:	f53f af2a 	bmi.w	8029d7e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8029f2a:	45de      	cmp	lr, fp
 8029f2c:	f6ff af27 	blt.w	8029d7e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8029f30:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8029f32:	9302      	str	r3, [sp, #8]
 8029f34:	fa0f f38e 	sxth.w	r3, lr
 8029f38:	9301      	str	r3, [sp, #4]
 8029f3a:	fa0f f38c 	sxth.w	r3, ip
 8029f3e:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8029f42:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8029f46:	9300      	str	r3, [sp, #0]
 8029f48:	463a      	mov	r2, r7
 8029f4a:	4653      	mov	r3, sl
 8029f4c:	4641      	mov	r1, r8
 8029f4e:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8029f50:	f7ff fd4e 	bl	80299f0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 8029f54:	e713      	b.n	8029d7e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8029f56:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8029f58:	1422      	asrs	r2, r4, #16
 8029f5a:	1433      	asrs	r3, r6, #16
 8029f5c:	fb05 2303 	mla	r3, r5, r3, r2
 8029f60:	085a      	lsrs	r2, r3, #1
 8029f62:	5cba      	ldrb	r2, [r7, r2]
 8029f64:	07dd      	lsls	r5, r3, #31
 8029f66:	bf54      	ite	pl
 8029f68:	f002 020f 	andpl.w	r2, r2, #15
 8029f6c:	1112      	asrmi	r2, r2, #4
 8029f6e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8029f72:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8029f76:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8029f7a:	b2d2      	uxtb	r2, r2
 8029f7c:	2900      	cmp	r1, #0
 8029f7e:	d077      	beq.n	802a070 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8029f80:	f103 0e01 	add.w	lr, r3, #1
 8029f84:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8029f88:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8029f8c:	f01e 0f01 	tst.w	lr, #1
 8029f90:	bf0c      	ite	eq
 8029f92:	f00c 0c0f 	andeq.w	ip, ip, #15
 8029f96:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8029f9a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8029f9e:	fa5f f58c 	uxtb.w	r5, ip
 8029fa2:	9512      	str	r5, [sp, #72]	@ 0x48
 8029fa4:	b300      	cbz	r0, 8029fe8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 8029fa6:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8029fa8:	442b      	add	r3, r5
 8029faa:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8029fae:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8029fb2:	07dd      	lsls	r5, r3, #31
 8029fb4:	bf54      	ite	pl
 8029fb6:	f00c 0c0f 	andpl.w	ip, ip, #15
 8029fba:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8029fbe:	3301      	adds	r3, #1
 8029fc0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8029fc4:	fa5f f58c 	uxtb.w	r5, ip
 8029fc8:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8029fcc:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8029fd0:	950c      	str	r5, [sp, #48]	@ 0x30
 8029fd2:	07dd      	lsls	r5, r3, #31
 8029fd4:	bf54      	ite	pl
 8029fd6:	f00c 0c0f 	andpl.w	ip, ip, #15
 8029fda:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8029fde:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8029fe2:	fa5f f38c 	uxtb.w	r3, ip
 8029fe6:	9313      	str	r3, [sp, #76]	@ 0x4c
 8029fe8:	b289      	uxth	r1, r1
 8029fea:	b280      	uxth	r0, r0
 8029fec:	fb01 f300 	mul.w	r3, r1, r0
 8029ff0:	0109      	lsls	r1, r1, #4
 8029ff2:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 8029ff6:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8029ff8:	1ac9      	subs	r1, r1, r3
 8029ffa:	b289      	uxth	r1, r1
 8029ffc:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 802a000:	4369      	muls	r1, r5
 802a002:	b280      	uxth	r0, r0
 802a004:	ebac 0c00 	sub.w	ip, ip, r0
 802a008:	fa1f fc8c 	uxth.w	ip, ip
 802a00c:	fb02 120c 	mla	r2, r2, ip, r1
 802a010:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802a012:	fb00 2001 	mla	r0, r0, r1, r2
 802a016:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802a018:	fb03 0302 	mla	r3, r3, r2, r0
 802a01c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a020:	b1d3      	cbz	r3, 802a058 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 802a022:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802a024:	4353      	muls	r3, r2
 802a026:	1c5a      	adds	r2, r3, #1
 802a028:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802a02c:	4a0f      	ldr	r2, [pc, #60]	@ (802a06c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 802a02e:	121b      	asrs	r3, r3, #8
 802a030:	6812      	ldr	r2, [r2, #0]
 802a032:	2bff      	cmp	r3, #255	@ 0xff
 802a034:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 802a038:	d12e      	bne.n	802a098 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 802a03a:	0953      	lsrs	r3, r2, #5
 802a03c:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 802a040:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802a044:	f02c 0c07 	bic.w	ip, ip, #7
 802a048:	ea43 0c0c 	orr.w	ip, r3, ip
 802a04c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802a050:	ea4c 0202 	orr.w	r2, ip, r2
 802a054:	f8a8 2000 	strh.w	r2, [r8]
 802a058:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802a05a:	f108 0802 	add.w	r8, r8, #2
 802a05e:	441c      	add	r4, r3
 802a060:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a062:	f10b 3bff 	add.w	fp, fp, #4294967295
 802a066:	441e      	add	r6, r3
 802a068:	e6ba      	b.n	8029de0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 802a06a:	bf00      	nop
 802a06c:	2005ba8c 	.word	0x2005ba8c
 802a070:	2800      	cmp	r0, #0
 802a072:	d0b9      	beq.n	8029fe8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 802a074:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802a076:	442b      	add	r3, r5
 802a078:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802a07c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802a080:	07db      	lsls	r3, r3, #31
 802a082:	bf54      	ite	pl
 802a084:	f00c 0c0f 	andpl.w	ip, ip, #15
 802a088:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802a08c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802a090:	fa5f f38c 	uxtb.w	r3, ip
 802a094:	930c      	str	r3, [sp, #48]	@ 0x30
 802a096:	e7a7      	b.n	8029fe8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 802a098:	fa1f fa83 	uxth.w	sl, r3
 802a09c:	43db      	mvns	r3, r3
 802a09e:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802a0a2:	f8b8 e000 	ldrh.w	lr, [r8]
 802a0a6:	fb11 f10a 	smulbb	r1, r1, sl
 802a0aa:	b2d2      	uxtb	r2, r2
 802a0ac:	ea4f 202e 	mov.w	r0, lr, asr #8
 802a0b0:	fb12 f20a 	smulbb	r2, r2, sl
 802a0b4:	b2db      	uxtb	r3, r3
 802a0b6:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802a0ba:	fb00 1003 	mla	r0, r0, r3, r1
 802a0be:	fa5f fc8c 	uxtb.w	ip, ip
 802a0c2:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802a0c6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802a0ca:	fb1c fc0a 	smulbb	ip, ip, sl
 802a0ce:	fa5f fe8e 	uxtb.w	lr, lr
 802a0d2:	fb0e 2203 	mla	r2, lr, r3, r2
 802a0d6:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 802a0da:	fb01 cc03 	mla	ip, r1, r3, ip
 802a0de:	b280      	uxth	r0, r0
 802a0e0:	b292      	uxth	r2, r2
 802a0e2:	1c43      	adds	r3, r0, #1
 802a0e4:	1c51      	adds	r1, r2, #1
 802a0e6:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802a0ea:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 802a0ee:	fa1f fc8c 	uxth.w	ip, ip
 802a0f2:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802a0f6:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 802a0fa:	4308      	orrs	r0, r1
 802a0fc:	f10c 0101 	add.w	r1, ip, #1
 802a100:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802a104:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802a108:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 802a10c:	ea40 000c 	orr.w	r0, r0, ip
 802a110:	f8a8 0000 	strh.w	r0, [r8]
 802a114:	e7a0      	b.n	802a058 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 802a116:	b017      	add	sp, #92	@ 0x5c
 802a118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802a11c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 802a11c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a120:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	@ 0x28
 802a124:	2d00      	cmp	r5, #0
 802a126:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802a12a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 802a12e:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 802a132:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
 802a136:	fb05 0e03 	mla	lr, r5, r3, r0
 802a13a:	f2c0 80b0 	blt.w	802a29e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 802a13e:	45a9      	cmp	r9, r5
 802a140:	f340 80ad 	ble.w	802a29e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 802a144:	2800      	cmp	r0, #0
 802a146:	f2c0 80a8 	blt.w	802a29a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 802a14a:	4580      	cmp	r8, r0
 802a14c:	f340 80a5 	ble.w	802a29a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 802a150:	ea4f 045e 	mov.w	r4, lr, lsr #1
 802a154:	5d16      	ldrb	r6, [r2, r4]
 802a156:	f01e 0f01 	tst.w	lr, #1
 802a15a:	bf0c      	ite	eq
 802a15c:	f006 060f 	andeq.w	r6, r6, #15
 802a160:	1136      	asrne	r6, r6, #4
 802a162:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802a166:	b2f6      	uxtb	r6, r6
 802a168:	1c44      	adds	r4, r0, #1
 802a16a:	f100 809b 	bmi.w	802a2a4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 802a16e:	45a0      	cmp	r8, r4
 802a170:	f340 8098 	ble.w	802a2a4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 802a174:	2f00      	cmp	r7, #0
 802a176:	f000 8097 	beq.w	802a2a8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 802a17a:	f10e 0a01 	add.w	sl, lr, #1
 802a17e:	ea4f 045a 	mov.w	r4, sl, lsr #1
 802a182:	5d14      	ldrb	r4, [r2, r4]
 802a184:	f01a 0f01 	tst.w	sl, #1
 802a188:	bf0c      	ite	eq
 802a18a:	f004 040f 	andeq.w	r4, r4, #15
 802a18e:	1124      	asrne	r4, r4, #4
 802a190:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802a194:	b2e4      	uxtb	r4, r4
 802a196:	3501      	adds	r5, #1
 802a198:	f100 808a 	bmi.w	802a2b0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 802a19c:	45a9      	cmp	r9, r5
 802a19e:	f340 8087 	ble.w	802a2b0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 802a1a2:	f1bc 0f00 	cmp.w	ip, #0
 802a1a6:	f000 8086 	beq.w	802a2b6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 802a1aa:	2800      	cmp	r0, #0
 802a1ac:	db7e      	blt.n	802a2ac <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 802a1ae:	4580      	cmp	r8, r0
 802a1b0:	dd7c      	ble.n	802a2ac <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 802a1b2:	eb03 090e 	add.w	r9, r3, lr
 802a1b6:	ea4f 0559 	mov.w	r5, r9, lsr #1
 802a1ba:	5d55      	ldrb	r5, [r2, r5]
 802a1bc:	f019 0f01 	tst.w	r9, #1
 802a1c0:	bf0c      	ite	eq
 802a1c2:	f005 050f 	andeq.w	r5, r5, #15
 802a1c6:	112d      	asrne	r5, r5, #4
 802a1c8:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 802a1cc:	b2ed      	uxtb	r5, r5
 802a1ce:	3001      	adds	r0, #1
 802a1d0:	d474      	bmi.n	802a2bc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802a1d2:	4580      	cmp	r8, r0
 802a1d4:	dd72      	ble.n	802a2bc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802a1d6:	2f00      	cmp	r7, #0
 802a1d8:	d072      	beq.n	802a2c0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 802a1da:	3301      	adds	r3, #1
 802a1dc:	449e      	add	lr, r3
 802a1de:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802a1e2:	5cd0      	ldrb	r0, [r2, r3]
 802a1e4:	f01e 0f01 	tst.w	lr, #1
 802a1e8:	bf0c      	ite	eq
 802a1ea:	f000 000f 	andeq.w	r0, r0, #15
 802a1ee:	1100      	asrne	r0, r0, #4
 802a1f0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802a1f4:	b2c3      	uxtb	r3, r0
 802a1f6:	b2ba      	uxth	r2, r7
 802a1f8:	fa1f fc8c 	uxth.w	ip, ip
 802a1fc:	fb02 f00c 	mul.w	r0, r2, ip
 802a200:	0112      	lsls	r2, r2, #4
 802a202:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 802a206:	1a12      	subs	r2, r2, r0
 802a208:	b292      	uxth	r2, r2
 802a20a:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 802a20e:	4362      	muls	r2, r4
 802a210:	fa1f fc8c 	uxth.w	ip, ip
 802a214:	eba7 070c 	sub.w	r7, r7, ip
 802a218:	b2bf      	uxth	r7, r7
 802a21a:	fb06 2207 	mla	r2, r6, r7, r2
 802a21e:	fb0c 2505 	mla	r5, ip, r5, r2
 802a222:	fb00 5303 	mla	r3, r0, r3, r5
 802a226:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a22a:	b3a3      	cbz	r3, 802a296 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 802a22c:	4a25      	ldr	r2, [pc, #148]	@ (802a2c4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 802a22e:	880e      	ldrh	r6, [r1, #0]
 802a230:	6815      	ldr	r5, [r2, #0]
 802a232:	b29a      	uxth	r2, r3
 802a234:	43db      	mvns	r3, r3
 802a236:	f3c5 4007 	ubfx	r0, r5, #16, #8
 802a23a:	fb10 f002 	smulbb	r0, r0, r2
 802a23e:	f3c5 2707 	ubfx	r7, r5, #8, #8
 802a242:	b2ed      	uxtb	r5, r5
 802a244:	1234      	asrs	r4, r6, #8
 802a246:	fb17 f702 	smulbb	r7, r7, r2
 802a24a:	fb15 f202 	smulbb	r2, r5, r2
 802a24e:	b2db      	uxtb	r3, r3
 802a250:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 802a254:	fb04 0403 	mla	r4, r4, r3, r0
 802a258:	10f0      	asrs	r0, r6, #3
 802a25a:	00f6      	lsls	r6, r6, #3
 802a25c:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802a260:	b2f6      	uxtb	r6, r6
 802a262:	fb00 7003 	mla	r0, r0, r3, r7
 802a266:	fb06 2303 	mla	r3, r6, r3, r2
 802a26a:	b2a4      	uxth	r4, r4
 802a26c:	b29a      	uxth	r2, r3
 802a26e:	1c63      	adds	r3, r4, #1
 802a270:	b280      	uxth	r0, r0
 802a272:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802a276:	1c53      	adds	r3, r2, #1
 802a278:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802a27c:	1c42      	adds	r2, r0, #1
 802a27e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802a282:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 802a286:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802a28a:	0940      	lsrs	r0, r0, #5
 802a28c:	4323      	orrs	r3, r4
 802a28e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802a292:	4303      	orrs	r3, r0
 802a294:	800b      	strh	r3, [r1, #0]
 802a296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a29a:	2600      	movs	r6, #0
 802a29c:	e764      	b.n	802a168 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 802a29e:	2400      	movs	r4, #0
 802a2a0:	4626      	mov	r6, r4
 802a2a2:	e778      	b.n	802a196 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802a2a4:	2400      	movs	r4, #0
 802a2a6:	e776      	b.n	802a196 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802a2a8:	463c      	mov	r4, r7
 802a2aa:	e774      	b.n	802a196 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802a2ac:	2500      	movs	r5, #0
 802a2ae:	e78e      	b.n	802a1ce <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 802a2b0:	2300      	movs	r3, #0
 802a2b2:	461d      	mov	r5, r3
 802a2b4:	e79f      	b.n	802a1f6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802a2b6:	4663      	mov	r3, ip
 802a2b8:	4665      	mov	r5, ip
 802a2ba:	e79c      	b.n	802a1f6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802a2bc:	2300      	movs	r3, #0
 802a2be:	e79a      	b.n	802a1f6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802a2c0:	463b      	mov	r3, r7
 802a2c2:	e798      	b.n	802a1f6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802a2c4:	2005ba8c 	.word	0x2005ba8c

0802a2c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802a2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a2cc:	b093      	sub	sp, #76	@ 0x4c
 802a2ce:	920c      	str	r2, [sp, #48]	@ 0x30
 802a2d0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 802a2d2:	9011      	str	r0, [sp, #68]	@ 0x44
 802a2d4:	6850      	ldr	r0, [r2, #4]
 802a2d6:	9107      	str	r1, [sp, #28]
 802a2d8:	461d      	mov	r5, r3
 802a2da:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 802a2de:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 802a2e2:	fb00 1303 	mla	r3, r0, r3, r1
 802a2e6:	6812      	ldr	r2, [r2, #0]
 802a2e8:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802a2ec:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a2ee:	689b      	ldr	r3, [r3, #8]
 802a2f0:	3301      	adds	r3, #1
 802a2f2:	f023 0301 	bic.w	r3, r3, #1
 802a2f6:	9306      	str	r3, [sp, #24]
 802a2f8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a2fa:	681f      	ldr	r7, [r3, #0]
 802a2fc:	9b07      	ldr	r3, [sp, #28]
 802a2fe:	2b00      	cmp	r3, #0
 802a300:	dc03      	bgt.n	802a30a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 802a302:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a304:	2b00      	cmp	r3, #0
 802a306:	f340 8265 	ble.w	802a7d4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 802a30a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a30c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802a310:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802a314:	1e48      	subs	r0, r1, #1
 802a316:	f102 3cff 	add.w	ip, r2, #4294967295
 802a31a:	2d00      	cmp	r5, #0
 802a31c:	f340 80b7 	ble.w	802a48e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802a320:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802a324:	ea4f 4326 	mov.w	r3, r6, asr #16
 802a328:	d406      	bmi.n	802a338 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802a32a:	4586      	cmp	lr, r0
 802a32c:	da04      	bge.n	802a338 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802a32e:	2b00      	cmp	r3, #0
 802a330:	db02      	blt.n	802a338 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802a332:	4563      	cmp	r3, ip
 802a334:	f2c0 80ac 	blt.w	802a490 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802a338:	f11e 0e01 	adds.w	lr, lr, #1
 802a33c:	f100 809f 	bmi.w	802a47e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802a340:	4571      	cmp	r1, lr
 802a342:	f2c0 809c 	blt.w	802a47e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802a346:	3301      	adds	r3, #1
 802a348:	f100 8099 	bmi.w	802a47e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802a34c:	429a      	cmp	r2, r3
 802a34e:	f2c0 8096 	blt.w	802a47e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802a352:	46c8      	mov	r8, r9
 802a354:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 802a358:	9509      	str	r5, [sp, #36]	@ 0x24
 802a35a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a35c:	2b00      	cmp	r3, #0
 802a35e:	f340 80b5 	ble.w	802a4cc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802a362:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802a366:	9308      	str	r3, [sp, #32]
 802a368:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a36a:	1430      	asrs	r0, r6, #16
 802a36c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802a370:	1423      	asrs	r3, r4, #16
 802a372:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802a376:	f100 813e 	bmi.w	802a5f6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 802a37a:	f10c 3bff 	add.w	fp, ip, #4294967295
 802a37e:	455b      	cmp	r3, fp
 802a380:	f280 8139 	bge.w	802a5f6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 802a384:	2800      	cmp	r0, #0
 802a386:	f2c0 8136 	blt.w	802a5f6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 802a38a:	f10e 3bff 	add.w	fp, lr, #4294967295
 802a38e:	4558      	cmp	r0, fp
 802a390:	f280 8131 	bge.w	802a5f6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 802a394:	9a06      	ldr	r2, [sp, #24]
 802a396:	fb00 3302 	mla	r3, r0, r2, r3
 802a39a:	0858      	lsrs	r0, r3, #1
 802a39c:	f817 c000 	ldrb.w	ip, [r7, r0]
 802a3a0:	07da      	lsls	r2, r3, #31
 802a3a2:	bf54      	ite	pl
 802a3a4:	f00c 0c0f 	andpl.w	ip, ip, #15
 802a3a8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802a3ac:	9a08      	ldr	r2, [sp, #32]
 802a3ae:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802a3b2:	fa5f fc8c 	uxtb.w	ip, ip
 802a3b6:	2a00      	cmp	r2, #0
 802a3b8:	f000 80cb 	beq.w	802a552 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 802a3bc:	1c58      	adds	r0, r3, #1
 802a3be:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802a3c2:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802a3c6:	07c0      	lsls	r0, r0, #31
 802a3c8:	bf54      	ite	pl
 802a3ca:	f00e 0e0f 	andpl.w	lr, lr, #15
 802a3ce:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802a3d2:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802a3d6:	fa5f fe8e 	uxtb.w	lr, lr
 802a3da:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 802a3de:	b1b9      	cbz	r1, 802a410 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802a3e0:	4453      	add	r3, sl
 802a3e2:	0858      	lsrs	r0, r3, #1
 802a3e4:	5c38      	ldrb	r0, [r7, r0]
 802a3e6:	07da      	lsls	r2, r3, #31
 802a3e8:	bf54      	ite	pl
 802a3ea:	f000 000f 	andpl.w	r0, r0, #15
 802a3ee:	1100      	asrmi	r0, r0, #4
 802a3f0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802a3f4:	b2c0      	uxtb	r0, r0
 802a3f6:	900a      	str	r0, [sp, #40]	@ 0x28
 802a3f8:	1c58      	adds	r0, r3, #1
 802a3fa:	0843      	lsrs	r3, r0, #1
 802a3fc:	5cfb      	ldrb	r3, [r7, r3]
 802a3fe:	07c2      	lsls	r2, r0, #31
 802a400:	bf54      	ite	pl
 802a402:	f003 030f 	andpl.w	r3, r3, #15
 802a406:	111b      	asrmi	r3, r3, #4
 802a408:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802a40c:	b2db      	uxtb	r3, r3
 802a40e:	930e      	str	r3, [sp, #56]	@ 0x38
 802a410:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802a414:	b289      	uxth	r1, r1
 802a416:	fb02 f301 	mul.w	r3, r2, r1
 802a41a:	0112      	lsls	r2, r2, #4
 802a41c:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802a420:	b289      	uxth	r1, r1
 802a422:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 802a426:	1a40      	subs	r0, r0, r1
 802a428:	fa1f fe80 	uxth.w	lr, r0
 802a42c:	1ad2      	subs	r2, r2, r3
 802a42e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802a430:	b292      	uxth	r2, r2
 802a432:	4342      	muls	r2, r0
 802a434:	fb0c 2c0e 	mla	ip, ip, lr, r2
 802a438:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802a43a:	fb01 c102 	mla	r1, r1, r2, ip
 802a43e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802a440:	fb03 1302 	mla	r3, r3, r2, r1
 802a444:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a448:	2bff      	cmp	r3, #255	@ 0xff
 802a44a:	f040 8093 	bne.w	802a574 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 802a44e:	4bbe      	ldr	r3, [pc, #760]	@ (802a748 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>)
 802a450:	681a      	ldr	r2, [r3, #0]
 802a452:	4bbe      	ldr	r3, [pc, #760]	@ (802a74c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802a454:	0951      	lsrs	r1, r2, #5
 802a456:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802a45a:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802a45e:	430b      	orrs	r3, r1
 802a460:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802a464:	4313      	orrs	r3, r2
 802a466:	f8a8 3000 	strh.w	r3, [r8]
 802a46a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802a46c:	f108 0802 	add.w	r8, r8, #2
 802a470:	441c      	add	r4, r3
 802a472:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802a474:	441e      	add	r6, r3
 802a476:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a478:	3b01      	subs	r3, #1
 802a47a:	9309      	str	r3, [sp, #36]	@ 0x24
 802a47c:	e76d      	b.n	802a35a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802a47e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802a480:	3d01      	subs	r5, #1
 802a482:	441c      	add	r4, r3
 802a484:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802a486:	f109 0902 	add.w	r9, r9, #2
 802a48a:	441e      	add	r6, r3
 802a48c:	e745      	b.n	802a31a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802a48e:	d021      	beq.n	802a4d4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 802a490:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 802a492:	1e6b      	subs	r3, r5, #1
 802a494:	fb00 4003 	mla	r0, r0, r3, r4
 802a498:	1400      	asrs	r0, r0, #16
 802a49a:	f53f af5a 	bmi.w	802a352 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802a49e:	3901      	subs	r1, #1
 802a4a0:	4288      	cmp	r0, r1
 802a4a2:	f6bf af56 	bge.w	802a352 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802a4a6:	9920      	ldr	r1, [sp, #128]	@ 0x80
 802a4a8:	fb01 6303 	mla	r3, r1, r3, r6
 802a4ac:	141b      	asrs	r3, r3, #16
 802a4ae:	f53f af50 	bmi.w	802a352 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802a4b2:	3a01      	subs	r2, #1
 802a4b4:	4293      	cmp	r3, r2
 802a4b6:	f6bf af4c 	bge.w	802a352 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802a4ba:	46a8      	mov	r8, r5
 802a4bc:	46ce      	mov	lr, r9
 802a4be:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 802a4c2:	9308      	str	r3, [sp, #32]
 802a4c4:	f1b8 0f00 	cmp.w	r8, #0
 802a4c8:	f300 80b5 	bgt.w	802a636 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802a4cc:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802a4d0:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802a4d4:	9b07      	ldr	r3, [sp, #28]
 802a4d6:	2b00      	cmp	r3, #0
 802a4d8:	f340 817c 	ble.w	802a7d4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 802a4dc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802a4e0:	ee30 0a04 	vadd.f32	s0, s0, s8
 802a4e4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802a4e8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802a4ec:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802a4f0:	eef0 6a62 	vmov.f32	s13, s5
 802a4f4:	ee31 1a05 	vadd.f32	s2, s2, s10
 802a4f8:	ee77 2a62 	vsub.f32	s5, s14, s5
 802a4fc:	ee61 7a27 	vmul.f32	s15, s2, s15
 802a500:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a504:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802a508:	ee16 4a90 	vmov	r4, s13
 802a50c:	eef0 6a43 	vmov.f32	s13, s6
 802a510:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802a514:	ee12 2a90 	vmov	r2, s5
 802a518:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802a51c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802a51e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a522:	fb92 f3f3 	sdiv	r3, r2, r3
 802a526:	ee13 2a10 	vmov	r2, s6
 802a52a:	931f      	str	r3, [sp, #124]	@ 0x7c
 802a52c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802a52e:	ee16 6a90 	vmov	r6, s13
 802a532:	fb92 f3f3 	sdiv	r3, r2, r3
 802a536:	9320      	str	r3, [sp, #128]	@ 0x80
 802a538:	9b07      	ldr	r3, [sp, #28]
 802a53a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802a53c:	3b01      	subs	r3, #1
 802a53e:	9307      	str	r3, [sp, #28]
 802a540:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802a542:	bf0c      	ite	eq
 802a544:	4615      	moveq	r5, r2
 802a546:	461d      	movne	r5, r3
 802a548:	eeb0 3a67 	vmov.f32	s6, s15
 802a54c:	eef0 2a47 	vmov.f32	s5, s14
 802a550:	e6d4      	b.n	802a2fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 802a552:	2900      	cmp	r1, #0
 802a554:	f43f af5c 	beq.w	802a410 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802a558:	eb0a 0003 	add.w	r0, sl, r3
 802a55c:	0843      	lsrs	r3, r0, #1
 802a55e:	5cfb      	ldrb	r3, [r7, r3]
 802a560:	07c0      	lsls	r0, r0, #31
 802a562:	bf54      	ite	pl
 802a564:	f003 030f 	andpl.w	r3, r3, #15
 802a568:	111b      	asrmi	r3, r3, #4
 802a56a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802a56e:	b2db      	uxtb	r3, r3
 802a570:	930a      	str	r3, [sp, #40]	@ 0x28
 802a572:	e74d      	b.n	802a410 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802a574:	2b00      	cmp	r3, #0
 802a576:	f43f af78 	beq.w	802a46a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a57a:	fa1f fe83 	uxth.w	lr, r3
 802a57e:	43db      	mvns	r3, r3
 802a580:	4a71      	ldr	r2, [pc, #452]	@ (802a748 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>)
 802a582:	f8b8 c000 	ldrh.w	ip, [r8]
 802a586:	6810      	ldr	r0, [r2, #0]
 802a588:	ea4f 212c 	mov.w	r1, ip, asr #8
 802a58c:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802a590:	fb12 f20e 	smulbb	r2, r2, lr
 802a594:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802a598:	b2c0      	uxtb	r0, r0
 802a59a:	fb1b fb0e 	smulbb	fp, fp, lr
 802a59e:	fb10 fe0e 	smulbb	lr, r0, lr
 802a5a2:	b2db      	uxtb	r3, r3
 802a5a4:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 802a5a8:	fb01 2103 	mla	r1, r1, r3, r2
 802a5ac:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802a5b0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802a5b4:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 802a5b8:	fa5f fc8c 	uxtb.w	ip, ip
 802a5bc:	fb02 b203 	mla	r2, r2, r3, fp
 802a5c0:	fb0c e303 	mla	r3, ip, r3, lr
 802a5c4:	b289      	uxth	r1, r1
 802a5c6:	1c48      	adds	r0, r1, #1
 802a5c8:	b292      	uxth	r2, r2
 802a5ca:	b29b      	uxth	r3, r3
 802a5cc:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802a5d0:	f401 4078 	and.w	r0, r1, #63488	@ 0xf800
 802a5d4:	f102 0b01 	add.w	fp, r2, #1
 802a5d8:	1c59      	adds	r1, r3, #1
 802a5da:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802a5de:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802a5e2:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802a5e6:	0952      	lsrs	r2, r2, #5
 802a5e8:	4301      	orrs	r1, r0
 802a5ea:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802a5ee:	4311      	orrs	r1, r2
 802a5f0:	f8a8 1000 	strh.w	r1, [r8]
 802a5f4:	e739      	b.n	802a46a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a5f6:	f113 0b01 	adds.w	fp, r3, #1
 802a5fa:	f53f af36 	bmi.w	802a46a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a5fe:	45dc      	cmp	ip, fp
 802a600:	f6ff af33 	blt.w	802a46a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a604:	f110 0b01 	adds.w	fp, r0, #1
 802a608:	f53f af2f 	bmi.w	802a46a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a60c:	45de      	cmp	lr, fp
 802a60e:	f6ff af2c 	blt.w	802a46a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a612:	9a08      	ldr	r2, [sp, #32]
 802a614:	9302      	str	r3, [sp, #8]
 802a616:	fa0f f38e 	sxth.w	r3, lr
 802a61a:	9301      	str	r3, [sp, #4]
 802a61c:	fa0f f38c 	sxth.w	r3, ip
 802a620:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802a624:	9105      	str	r1, [sp, #20]
 802a626:	9300      	str	r3, [sp, #0]
 802a628:	463a      	mov	r2, r7
 802a62a:	4653      	mov	r3, sl
 802a62c:	4641      	mov	r1, r8
 802a62e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 802a630:	f7ff fd74 	bl	802a11c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 802a634:	e719      	b.n	802a46a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a636:	9906      	ldr	r1, [sp, #24]
 802a638:	1422      	asrs	r2, r4, #16
 802a63a:	1433      	asrs	r3, r6, #16
 802a63c:	fb01 2303 	mla	r3, r1, r3, r2
 802a640:	085a      	lsrs	r2, r3, #1
 802a642:	5cba      	ldrb	r2, [r7, r2]
 802a644:	07d9      	lsls	r1, r3, #31
 802a646:	bf54      	ite	pl
 802a648:	f002 020f 	andpl.w	r2, r2, #15
 802a64c:	1112      	asrmi	r2, r2, #4
 802a64e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802a652:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802a656:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802a65a:	b2d2      	uxtb	r2, r2
 802a65c:	2800      	cmp	r0, #0
 802a65e:	d062      	beq.n	802a726 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 802a660:	f103 0a01 	add.w	sl, r3, #1
 802a664:	ea4f 015a 	mov.w	r1, sl, lsr #1
 802a668:	5c79      	ldrb	r1, [r7, r1]
 802a66a:	f01a 0f01 	tst.w	sl, #1
 802a66e:	bf0c      	ite	eq
 802a670:	f001 010f 	andeq.w	r1, r1, #15
 802a674:	1109      	asrne	r1, r1, #4
 802a676:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802a67a:	b2c9      	uxtb	r1, r1
 802a67c:	910f      	str	r1, [sp, #60]	@ 0x3c
 802a67e:	f1bc 0f00 	cmp.w	ip, #0
 802a682:	d019      	beq.n	802a6b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 802a684:	9908      	ldr	r1, [sp, #32]
 802a686:	440b      	add	r3, r1
 802a688:	0859      	lsrs	r1, r3, #1
 802a68a:	5c79      	ldrb	r1, [r7, r1]
 802a68c:	f013 0f01 	tst.w	r3, #1
 802a690:	bf0c      	ite	eq
 802a692:	f001 010f 	andeq.w	r1, r1, #15
 802a696:	1109      	asrne	r1, r1, #4
 802a698:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802a69c:	b2c9      	uxtb	r1, r1
 802a69e:	3301      	adds	r3, #1
 802a6a0:	910b      	str	r1, [sp, #44]	@ 0x2c
 802a6a2:	0859      	lsrs	r1, r3, #1
 802a6a4:	5c79      	ldrb	r1, [r7, r1]
 802a6a6:	07db      	lsls	r3, r3, #31
 802a6a8:	bf54      	ite	pl
 802a6aa:	f001 010f 	andpl.w	r1, r1, #15
 802a6ae:	1109      	asrmi	r1, r1, #4
 802a6b0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802a6b4:	b2c9      	uxtb	r1, r1
 802a6b6:	9110      	str	r1, [sp, #64]	@ 0x40
 802a6b8:	b280      	uxth	r0, r0
 802a6ba:	fa1f fc8c 	uxth.w	ip, ip
 802a6be:	fb00 f30c 	mul.w	r3, r0, ip
 802a6c2:	0100      	lsls	r0, r0, #4
 802a6c4:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 802a6c8:	fa1f fc8c 	uxth.w	ip, ip
 802a6cc:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 802a6d0:	eba1 010c 	sub.w	r1, r1, ip
 802a6d4:	fa1f fa81 	uxth.w	sl, r1
 802a6d8:	1ac0      	subs	r0, r0, r3
 802a6da:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802a6dc:	b280      	uxth	r0, r0
 802a6de:	4348      	muls	r0, r1
 802a6e0:	fb02 020a 	mla	r2, r2, sl, r0
 802a6e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802a6e6:	fb0c 2c01 	mla	ip, ip, r1, r2
 802a6ea:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802a6ec:	fb03 c302 	mla	r3, r3, r2, ip
 802a6f0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a6f4:	2bff      	cmp	r3, #255	@ 0xff
 802a6f6:	d12b      	bne.n	802a750 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 802a6f8:	4b13      	ldr	r3, [pc, #76]	@ (802a748 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>)
 802a6fa:	681a      	ldr	r2, [r3, #0]
 802a6fc:	4b13      	ldr	r3, [pc, #76]	@ (802a74c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802a6fe:	0951      	lsrs	r1, r2, #5
 802a700:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802a704:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802a708:	430b      	orrs	r3, r1
 802a70a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802a70e:	4313      	orrs	r3, r2
 802a710:	f8ae 3000 	strh.w	r3, [lr]
 802a714:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802a716:	f10e 0e02 	add.w	lr, lr, #2
 802a71a:	441c      	add	r4, r3
 802a71c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802a71e:	f108 38ff 	add.w	r8, r8, #4294967295
 802a722:	441e      	add	r6, r3
 802a724:	e6ce      	b.n	802a4c4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 802a726:	f1bc 0f00 	cmp.w	ip, #0
 802a72a:	d0c5      	beq.n	802a6b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 802a72c:	9908      	ldr	r1, [sp, #32]
 802a72e:	440b      	add	r3, r1
 802a730:	0859      	lsrs	r1, r3, #1
 802a732:	5c79      	ldrb	r1, [r7, r1]
 802a734:	07db      	lsls	r3, r3, #31
 802a736:	bf54      	ite	pl
 802a738:	f001 010f 	andpl.w	r1, r1, #15
 802a73c:	1109      	asrmi	r1, r1, #4
 802a73e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802a742:	b2c9      	uxtb	r1, r1
 802a744:	910b      	str	r1, [sp, #44]	@ 0x2c
 802a746:	e7b7      	b.n	802a6b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 802a748:	2005ba8c 	.word	0x2005ba8c
 802a74c:	fffff800 	.word	0xfffff800
 802a750:	2b00      	cmp	r3, #0
 802a752:	d0df      	beq.n	802a714 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 802a754:	fa1f fa83 	uxth.w	sl, r3
 802a758:	43db      	mvns	r3, r3
 802a75a:	4a20      	ldr	r2, [pc, #128]	@ (802a7dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>)
 802a75c:	f8be c000 	ldrh.w	ip, [lr]
 802a760:	6810      	ldr	r0, [r2, #0]
 802a762:	ea4f 212c 	mov.w	r1, ip, asr #8
 802a766:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802a76a:	fb12 f20a 	smulbb	r2, r2, sl
 802a76e:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802a772:	b2c0      	uxtb	r0, r0
 802a774:	fb10 f00a 	smulbb	r0, r0, sl
 802a778:	b2db      	uxtb	r3, r3
 802a77a:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 802a77e:	fb01 2103 	mla	r1, r1, r3, r2
 802a782:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802a786:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802a78a:	fb1b fb0a 	smulbb	fp, fp, sl
 802a78e:	fa5f fc8c 	uxtb.w	ip, ip
 802a792:	fb0c 0003 	mla	r0, ip, r3, r0
 802a796:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 802a79a:	fb02 b203 	mla	r2, r2, r3, fp
 802a79e:	b289      	uxth	r1, r1
 802a7a0:	b280      	uxth	r0, r0
 802a7a2:	1c4b      	adds	r3, r1, #1
 802a7a4:	f100 0b01 	add.w	fp, r0, #1
 802a7a8:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802a7ac:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 802a7b0:	b292      	uxth	r2, r2
 802a7b2:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 802a7b6:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 802a7ba:	ea4b 0101 	orr.w	r1, fp, r1
 802a7be:	f102 0b01 	add.w	fp, r2, #1
 802a7c2:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802a7c6:	0952      	lsrs	r2, r2, #5
 802a7c8:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802a7cc:	4311      	orrs	r1, r2
 802a7ce:	f8ae 1000 	strh.w	r1, [lr]
 802a7d2:	e79f      	b.n	802a714 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 802a7d4:	b013      	add	sp, #76	@ 0x4c
 802a7d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a7da:	bf00      	nop
 802a7dc:	2005ba8c 	.word	0x2005ba8c

0802a7e0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>:
 802a7e0:	b570      	push	{r4, r5, r6, lr}
 802a7e2:	1208      	asrs	r0, r1, #8
 802a7e4:	b29e      	uxth	r6, r3
 802a7e6:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 802a7ea:	1213      	asrs	r3, r2, #8
 802a7ec:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802a7f0:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 802a7f4:	fb13 f305 	smulbb	r3, r3, r5
 802a7f8:	fb10 f006 	smulbb	r0, r0, r6
 802a7fc:	10cc      	asrs	r4, r1, #3
 802a7fe:	4418      	add	r0, r3
 802a800:	10d3      	asrs	r3, r2, #3
 802a802:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 802a806:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 802a80a:	fb13 f305 	smulbb	r3, r3, r5
 802a80e:	fb14 f406 	smulbb	r4, r4, r6
 802a812:	00c9      	lsls	r1, r1, #3
 802a814:	00d2      	lsls	r2, r2, #3
 802a816:	441c      	add	r4, r3
 802a818:	b2d2      	uxtb	r2, r2
 802a81a:	b2cb      	uxtb	r3, r1
 802a81c:	fb12 f205 	smulbb	r2, r2, r5
 802a820:	fb13 f306 	smulbb	r3, r3, r6
 802a824:	b280      	uxth	r0, r0
 802a826:	4413      	add	r3, r2
 802a828:	1c42      	adds	r2, r0, #1
 802a82a:	b29b      	uxth	r3, r3
 802a82c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802a830:	f400 4278 	and.w	r2, r0, #63488	@ 0xf800
 802a834:	1c58      	adds	r0, r3, #1
 802a836:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802a83a:	b2a4      	uxth	r4, r4
 802a83c:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802a840:	4310      	orrs	r0, r2
 802a842:	1c62      	adds	r2, r4, #1
 802a844:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 802a848:	0964      	lsrs	r4, r4, #5
 802a84a:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 802a84e:	4320      	orrs	r0, r4
 802a850:	bd70      	pop	{r4, r5, r6, pc}
	...

0802a854 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 802a854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a858:	b08f      	sub	sp, #60	@ 0x3c
 802a85a:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 802a85e:	461c      	mov	r4, r3
 802a860:	9004      	str	r0, [sp, #16]
 802a862:	460d      	mov	r5, r1
 802a864:	4616      	mov	r6, r2
 802a866:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802a868:	2f00      	cmp	r7, #0
 802a86a:	f000 80f5 	beq.w	802aa58 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x204>
 802a86e:	f04f 0802 	mov.w	r8, #2
 802a872:	6820      	ldr	r0, [r4, #0]
 802a874:	6861      	ldr	r1, [r4, #4]
 802a876:	aa0a      	add	r2, sp, #40	@ 0x28
 802a878:	c203      	stmia	r2!, {r0, r1}
 802a87a:	6818      	ldr	r0, [r3, #0]
 802a87c:	6859      	ldr	r1, [r3, #4]
 802a87e:	aa0c      	add	r2, sp, #48	@ 0x30
 802a880:	c203      	stmia	r2!, {r0, r1}
 802a882:	a80a      	add	r0, sp, #40	@ 0x28
 802a884:	f7ee fdea 	bl	801945c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802a888:	4621      	mov	r1, r4
 802a88a:	a80c      	add	r0, sp, #48	@ 0x30
 802a88c:	f7ee fe0e 	bl	80194ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802a890:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 802a894:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 802a898:	f002 0301 	and.w	r3, r2, #1
 802a89c:	9306      	str	r3, [sp, #24]
 802a89e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802a8a2:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 802a8a6:	f003 0101 	and.w	r1, r3, #1
 802a8aa:	9105      	str	r1, [sp, #20]
 802a8ac:	9805      	ldr	r0, [sp, #20]
 802a8ae:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 802a8b2:	4403      	add	r3, r0
 802a8b4:	fb01 2303 	mla	r3, r1, r3, r2
 802a8b8:	fb93 f3f8 	sdiv	r3, r3, r8
 802a8bc:	441d      	add	r5, r3
 802a8be:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 802a8c2:	3604      	adds	r6, #4
 802a8c4:	441a      	add	r2, r3
 802a8c6:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 802a8ca:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 802a8ce:	4419      	add	r1, r3
 802a8d0:	4b63      	ldr	r3, [pc, #396]	@ (802aa60 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 802a8d2:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 802a8d6:	6818      	ldr	r0, [r3, #0]
 802a8d8:	6803      	ldr	r3, [r0, #0]
 802a8da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802a8dc:	4798      	blx	r3
 802a8de:	4a61      	ldr	r2, [pc, #388]	@ (802aa64 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x210>)
 802a8e0:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 802a8e4:	8813      	ldrh	r3, [r2, #0]
 802a8e6:	f9bd a030 	ldrsh.w	sl, [sp, #48]	@ 0x30
 802a8ea:	2fff      	cmp	r7, #255	@ 0xff
 802a8ec:	fb03 a404 	mla	r4, r3, r4, sl
 802a8f0:	4611      	mov	r1, r2
 802a8f2:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802a8f6:	fb03 fb0b 	mul.w	fp, r3, fp
 802a8fa:	d06b      	beq.n	802a9d4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x180>
 802a8fc:	f1c7 03ff 	rsb	r3, r7, #255	@ 0xff
 802a900:	9303      	str	r3, [sp, #12]
 802a902:	eb04 034b 	add.w	r3, r4, fp, lsl #1
 802a906:	e9cd 3207 	strd	r3, r2, [sp, #28]
 802a90a:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 802a90e:	9b07      	ldr	r3, [sp, #28]
 802a910:	42a3      	cmp	r3, r4
 802a912:	f240 809c 	bls.w	802aa4e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fa>
 802a916:	9b06      	ldr	r3, [sp, #24]
 802a918:	2b00      	cmp	r3, #0
 802a91a:	d039      	beq.n	802a990 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13c>
 802a91c:	782b      	ldrb	r3, [r5, #0]
 802a91e:	8822      	ldrh	r2, [r4, #0]
 802a920:	f003 030f 	and.w	r3, r3, #15
 802a924:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 802a928:	9b03      	ldr	r3, [sp, #12]
 802a92a:	9804      	ldr	r0, [sp, #16]
 802a92c:	9300      	str	r3, [sp, #0]
 802a92e:	463b      	mov	r3, r7
 802a930:	f7ff ff56 	bl	802a7e0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 802a934:	f105 0801 	add.w	r8, r5, #1
 802a938:	f824 0b02 	strh.w	r0, [r4], #2
 802a93c:	f109 3bff 	add.w	fp, r9, #4294967295
 802a940:	f1bb 0f01 	cmp.w	fp, #1
 802a944:	46a2      	mov	sl, r4
 802a946:	f104 0404 	add.w	r4, r4, #4
 802a94a:	dd24      	ble.n	802a996 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x142>
 802a94c:	f898 3000 	ldrb.w	r3, [r8]
 802a950:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 802a954:	091b      	lsrs	r3, r3, #4
 802a956:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 802a95a:	9b03      	ldr	r3, [sp, #12]
 802a95c:	9804      	ldr	r0, [sp, #16]
 802a95e:	9300      	str	r3, [sp, #0]
 802a960:	463b      	mov	r3, r7
 802a962:	f7ff ff3d 	bl	802a7e0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 802a966:	f824 0c04 	strh.w	r0, [r4, #-4]
 802a96a:	f818 3b01 	ldrb.w	r3, [r8], #1
 802a96e:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 802a972:	f003 030f 	and.w	r3, r3, #15
 802a976:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 802a97a:	9b03      	ldr	r3, [sp, #12]
 802a97c:	9804      	ldr	r0, [sp, #16]
 802a97e:	9300      	str	r3, [sp, #0]
 802a980:	463b      	mov	r3, r7
 802a982:	f7ff ff2d 	bl	802a7e0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 802a986:	f1ab 0b02 	sub.w	fp, fp, #2
 802a98a:	f824 0c02 	strh.w	r0, [r4, #-2]
 802a98e:	e7d7      	b.n	802a940 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xec>
 802a990:	46a8      	mov	r8, r5
 802a992:	46cb      	mov	fp, r9
 802a994:	e7d4      	b.n	802a940 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xec>
 802a996:	d10e      	bne.n	802a9b6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x162>
 802a998:	f898 3000 	ldrb.w	r3, [r8]
 802a99c:	f8ba 2000 	ldrh.w	r2, [sl]
 802a9a0:	091b      	lsrs	r3, r3, #4
 802a9a2:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 802a9a6:	9b03      	ldr	r3, [sp, #12]
 802a9a8:	9804      	ldr	r0, [sp, #16]
 802a9aa:	9300      	str	r3, [sp, #0]
 802a9ac:	463b      	mov	r3, r7
 802a9ae:	f7ff ff17 	bl	802a7e0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 802a9b2:	f82a 0b02 	strh.w	r0, [sl], #2
 802a9b6:	9b08      	ldr	r3, [sp, #32]
 802a9b8:	9a05      	ldr	r2, [sp, #20]
 802a9ba:	881c      	ldrh	r4, [r3, #0]
 802a9bc:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802a9c0:	eba4 0409 	sub.w	r4, r4, r9
 802a9c4:	4413      	add	r3, r2
 802a9c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802a9c8:	eb0a 0444 	add.w	r4, sl, r4, lsl #1
 802a9cc:	fb93 f3f2 	sdiv	r3, r3, r2
 802a9d0:	441d      	add	r5, r3
 802a9d2:	e79c      	b.n	802a90e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xba>
 802a9d4:	eb04 0b4b 	add.w	fp, r4, fp, lsl #1
 802a9d8:	45a3      	cmp	fp, r4
 802a9da:	d938      	bls.n	802aa4e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fa>
 802a9dc:	9b06      	ldr	r3, [sp, #24]
 802a9de:	b1f3      	cbz	r3, 802aa1e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ca>
 802a9e0:	782b      	ldrb	r3, [r5, #0]
 802a9e2:	1c6a      	adds	r2, r5, #1
 802a9e4:	f003 030f 	and.w	r3, r3, #15
 802a9e8:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802a9ec:	f109 30ff 	add.w	r0, r9, #4294967295
 802a9f0:	8023      	strh	r3, [r4, #0]
 802a9f2:	3402      	adds	r4, #2
 802a9f4:	2801      	cmp	r0, #1
 802a9f6:	4623      	mov	r3, r4
 802a9f8:	f104 0404 	add.w	r4, r4, #4
 802a9fc:	dd12      	ble.n	802aa24 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1d0>
 802a9fe:	7813      	ldrb	r3, [r2, #0]
 802aa00:	3802      	subs	r0, #2
 802aa02:	091b      	lsrs	r3, r3, #4
 802aa04:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802aa08:	f824 3c04 	strh.w	r3, [r4, #-4]
 802aa0c:	f812 3b01 	ldrb.w	r3, [r2], #1
 802aa10:	f003 030f 	and.w	r3, r3, #15
 802aa14:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802aa18:	f824 3c02 	strh.w	r3, [r4, #-2]
 802aa1c:	e7ea      	b.n	802a9f4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a0>
 802aa1e:	462a      	mov	r2, r5
 802aa20:	4648      	mov	r0, r9
 802aa22:	e7e7      	b.n	802a9f4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a0>
 802aa24:	d106      	bne.n	802aa34 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e0>
 802aa26:	7812      	ldrb	r2, [r2, #0]
 802aa28:	3302      	adds	r3, #2
 802aa2a:	0912      	lsrs	r2, r2, #4
 802aa2c:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 802aa30:	f823 2c02 	strh.w	r2, [r3, #-2]
 802aa34:	880c      	ldrh	r4, [r1, #0]
 802aa36:	9a05      	ldr	r2, [sp, #20]
 802aa38:	eba4 0409 	sub.w	r4, r4, r9
 802aa3c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 802aa40:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802aa44:	4413      	add	r3, r2
 802aa46:	fb93 f3f8 	sdiv	r3, r3, r8
 802aa4a:	441d      	add	r5, r3
 802aa4c:	e7c4      	b.n	802a9d8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x184>
 802aa4e:	4b04      	ldr	r3, [pc, #16]	@ (802aa60 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 802aa50:	6818      	ldr	r0, [r3, #0]
 802aa52:	6803      	ldr	r3, [r0, #0]
 802aa54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802aa56:	4798      	blx	r3
 802aa58:	b00f      	add	sp, #60	@ 0x3c
 802aa5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802aa5e:	bf00      	nop
 802aa60:	2005ba7c 	.word	0x2005ba7c
 802aa64:	2005ba76 	.word	0x2005ba76

0802aa68 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>:
 802aa68:	b5f0      	push	{r4, r5, r6, r7, lr}
 802aa6a:	f89d 5014 	ldrb.w	r5, [sp, #20]
 802aa6e:	0a0f      	lsrs	r7, r1, #8
 802aa70:	2dff      	cmp	r5, #255	@ 0xff
 802aa72:	d10c      	bne.n	802aa8e <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 802aa74:	2bff      	cmp	r3, #255	@ 0xff
 802aa76:	d10a      	bne.n	802aa8e <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 802aa78:	4b25      	ldr	r3, [pc, #148]	@ (802ab10 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0xa8>)
 802aa7a:	0948      	lsrs	r0, r1, #5
 802aa7c:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802aa80:	403b      	ands	r3, r7
 802aa82:	4318      	orrs	r0, r3
 802aa84:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 802aa88:	4308      	orrs	r0, r1
 802aa8a:	b280      	uxth	r0, r0
 802aa8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802aa8e:	fb15 f503 	smulbb	r5, r5, r3
 802aa92:	b2ab      	uxth	r3, r5
 802aa94:	1c5d      	adds	r5, r3, #1
 802aa96:	eb05 2513 	add.w	r5, r5, r3, lsr #8
 802aa9a:	f3c5 2507 	ubfx	r5, r5, #8, #8
 802aa9e:	fa1f fc85 	uxth.w	ip, r5
 802aaa2:	43ed      	mvns	r5, r5
 802aaa4:	1214      	asrs	r4, r2, #8
 802aaa6:	10d6      	asrs	r6, r2, #3
 802aaa8:	00d0      	lsls	r0, r2, #3
 802aaaa:	f3c1 4207 	ubfx	r2, r1, #16, #8
 802aaae:	fb12 f20c 	smulbb	r2, r2, ip
 802aab2:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 802aab6:	b2eb      	uxtb	r3, r5
 802aab8:	b2c0      	uxtb	r0, r0
 802aaba:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 802aabe:	fb04 2403 	mla	r4, r4, r3, r2
 802aac2:	ea40 1250 	orr.w	r2, r0, r0, lsr #5
 802aac6:	b2c8      	uxtb	r0, r1
 802aac8:	b2fd      	uxtb	r5, r7
 802aaca:	fb10 f00c 	smulbb	r0, r0, ip
 802aace:	fb15 f50c 	smulbb	r5, r5, ip
 802aad2:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 802aad6:	fb02 0003 	mla	r0, r2, r3, r0
 802aada:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 802aade:	fb06 5503 	mla	r5, r6, r3, r5
 802aae2:	b2a4      	uxth	r4, r4
 802aae4:	b283      	uxth	r3, r0
 802aae6:	1c60      	adds	r0, r4, #1
 802aae8:	b2ad      	uxth	r5, r5
 802aaea:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 802aaee:	1c58      	adds	r0, r3, #1
 802aaf0:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802aaf4:	1c6b      	adds	r3, r5, #1
 802aaf6:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802aafa:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 802aafe:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802ab02:	096d      	lsrs	r5, r5, #5
 802ab04:	4320      	orrs	r0, r4
 802ab06:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 802ab0a:	4328      	orrs	r0, r5
 802ab0c:	e7be      	b.n	802aa8c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x24>
 802ab0e:	bf00      	nop
 802ab10:	00fff800 	.word	0x00fff800

0802ab14 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 802ab14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ab18:	461c      	mov	r4, r3
 802ab1a:	f04f 0a02 	mov.w	sl, #2
 802ab1e:	b08d      	sub	sp, #52	@ 0x34
 802ab20:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802ab22:	460d      	mov	r5, r1
 802ab24:	4680      	mov	r8, r0
 802ab26:	6861      	ldr	r1, [r4, #4]
 802ab28:	6820      	ldr	r0, [r4, #0]
 802ab2a:	4616      	mov	r6, r2
 802ab2c:	aa08      	add	r2, sp, #32
 802ab2e:	c203      	stmia	r2!, {r0, r1}
 802ab30:	6818      	ldr	r0, [r3, #0]
 802ab32:	6859      	ldr	r1, [r3, #4]
 802ab34:	aa0a      	add	r2, sp, #40	@ 0x28
 802ab36:	c203      	stmia	r2!, {r0, r1}
 802ab38:	a808      	add	r0, sp, #32
 802ab3a:	f89d 905c 	ldrb.w	r9, [sp, #92]	@ 0x5c
 802ab3e:	f7ee fc8d 	bl	801945c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802ab42:	4621      	mov	r1, r4
 802ab44:	a80a      	add	r0, sp, #40	@ 0x28
 802ab46:	f7ee fcb1 	bl	80194ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802ab4a:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 802ab4e:	f9bd 702e 	ldrsh.w	r7, [sp, #46]	@ 0x2e
 802ab52:	f002 0301 	and.w	r3, r2, #1
 802ab56:	9303      	str	r3, [sp, #12]
 802ab58:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 802ab5c:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	@ 0x2c
 802ab60:	f003 0101 	and.w	r1, r3, #1
 802ab64:	9102      	str	r1, [sp, #8]
 802ab66:	9802      	ldr	r0, [sp, #8]
 802ab68:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 802ab6c:	4403      	add	r3, r0
 802ab6e:	fb01 2303 	mla	r3, r1, r3, r2
 802ab72:	fb93 f3fa 	sdiv	r3, r3, sl
 802ab76:	441d      	add	r5, r3
 802ab78:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802ab7c:	3604      	adds	r6, #4
 802ab7e:	441a      	add	r2, r3
 802ab80:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 802ab84:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 802ab88:	4a3e      	ldr	r2, [pc, #248]	@ (802ac84 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x170>)
 802ab8a:	4419      	add	r1, r3
 802ab8c:	6810      	ldr	r0, [r2, #0]
 802ab8e:	f8ad 102a 	strh.w	r1, [sp, #42]	@ 0x2a
 802ab92:	6803      	ldr	r3, [r0, #0]
 802ab94:	9205      	str	r2, [sp, #20]
 802ab96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802ab98:	4798      	blx	r3
 802ab9a:	4b3b      	ldr	r3, [pc, #236]	@ (802ac88 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x174>)
 802ab9c:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	@ 0x2a
 802aba0:	8819      	ldrh	r1, [r3, #0]
 802aba2:	f9bd c028 	ldrsh.w	ip, [sp, #40]	@ 0x28
 802aba6:	434f      	muls	r7, r1
 802aba8:	fb01 c404 	mla	r4, r1, r4, ip
 802abac:	e9cd 3a06 	strd	r3, sl, [sp, #24]
 802abb0:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802abb4:	eb04 0247 	add.w	r2, r4, r7, lsl #1
 802abb8:	9204      	str	r2, [sp, #16]
 802abba:	9b04      	ldr	r3, [sp, #16]
 802abbc:	429c      	cmp	r4, r3
 802abbe:	d258      	bcs.n	802ac72 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x15e>
 802abc0:	9b03      	ldr	r3, [sp, #12]
 802abc2:	2b00      	cmp	r3, #0
 802abc4:	d034      	beq.n	802ac30 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 802abc6:	782b      	ldrb	r3, [r5, #0]
 802abc8:	1c6f      	adds	r7, r5, #1
 802abca:	f003 030f 	and.w	r3, r3, #15
 802abce:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802abd2:	0e0b      	lsrs	r3, r1, #24
 802abd4:	d006      	beq.n	802abe4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd0>
 802abd6:	8822      	ldrh	r2, [r4, #0]
 802abd8:	4640      	mov	r0, r8
 802abda:	9300      	str	r3, [sp, #0]
 802abdc:	464b      	mov	r3, r9
 802abde:	f7ff ff43 	bl	802aa68 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 802abe2:	8020      	strh	r0, [r4, #0]
 802abe4:	3402      	adds	r4, #2
 802abe6:	f10b 3aff 	add.w	sl, fp, #4294967295
 802abea:	f1ba 0f01 	cmp.w	sl, #1
 802abee:	dd22      	ble.n	802ac36 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 802abf0:	783b      	ldrb	r3, [r7, #0]
 802abf2:	091b      	lsrs	r3, r3, #4
 802abf4:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802abf8:	0e0b      	lsrs	r3, r1, #24
 802abfa:	d006      	beq.n	802ac0a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf6>
 802abfc:	8822      	ldrh	r2, [r4, #0]
 802abfe:	4640      	mov	r0, r8
 802ac00:	9300      	str	r3, [sp, #0]
 802ac02:	464b      	mov	r3, r9
 802ac04:	f7ff ff30 	bl	802aa68 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 802ac08:	8020      	strh	r0, [r4, #0]
 802ac0a:	f817 3b01 	ldrb.w	r3, [r7], #1
 802ac0e:	f003 030f 	and.w	r3, r3, #15
 802ac12:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802ac16:	0e0b      	lsrs	r3, r1, #24
 802ac18:	d006      	beq.n	802ac28 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x114>
 802ac1a:	8862      	ldrh	r2, [r4, #2]
 802ac1c:	4640      	mov	r0, r8
 802ac1e:	9300      	str	r3, [sp, #0]
 802ac20:	464b      	mov	r3, r9
 802ac22:	f7ff ff21 	bl	802aa68 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 802ac26:	8060      	strh	r0, [r4, #2]
 802ac28:	3404      	adds	r4, #4
 802ac2a:	f1aa 0a02 	sub.w	sl, sl, #2
 802ac2e:	e7dc      	b.n	802abea <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 802ac30:	462f      	mov	r7, r5
 802ac32:	46da      	mov	sl, fp
 802ac34:	e7d9      	b.n	802abea <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 802ac36:	d10d      	bne.n	802ac54 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x140>
 802ac38:	783b      	ldrb	r3, [r7, #0]
 802ac3a:	091b      	lsrs	r3, r3, #4
 802ac3c:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802ac40:	0e0b      	lsrs	r3, r1, #24
 802ac42:	d006      	beq.n	802ac52 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 802ac44:	8822      	ldrh	r2, [r4, #0]
 802ac46:	4640      	mov	r0, r8
 802ac48:	9300      	str	r3, [sp, #0]
 802ac4a:	464b      	mov	r3, r9
 802ac4c:	f7ff ff0c 	bl	802aa68 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 802ac50:	8020      	strh	r0, [r4, #0]
 802ac52:	3402      	adds	r4, #2
 802ac54:	9b06      	ldr	r3, [sp, #24]
 802ac56:	9a02      	ldr	r2, [sp, #8]
 802ac58:	881b      	ldrh	r3, [r3, #0]
 802ac5a:	eba3 030b 	sub.w	r3, r3, fp
 802ac5e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802ac62:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 802ac66:	4413      	add	r3, r2
 802ac68:	9a07      	ldr	r2, [sp, #28]
 802ac6a:	fb93 f3f2 	sdiv	r3, r3, r2
 802ac6e:	441d      	add	r5, r3
 802ac70:	e7a3      	b.n	802abba <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa6>
 802ac72:	9b05      	ldr	r3, [sp, #20]
 802ac74:	6818      	ldr	r0, [r3, #0]
 802ac76:	6803      	ldr	r3, [r0, #0]
 802ac78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802ac7a:	4798      	blx	r3
 802ac7c:	b00d      	add	sp, #52	@ 0x34
 802ac7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ac82:	bf00      	nop
 802ac84:	2005ba7c 	.word	0x2005ba7c
 802ac88:	2005ba76 	.word	0x2005ba76

0802ac8c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>:
 802ac8c:	b570      	push	{r4, r5, r6, lr}
 802ac8e:	788d      	ldrb	r5, [r1, #2]
 802ac90:	1214      	asrs	r4, r2, #8
 802ac92:	fb15 f503 	smulbb	r5, r5, r3
 802ac96:	f89d 6010 	ldrb.w	r6, [sp, #16]
 802ac9a:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 802ac9e:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 802aca2:	fb04 5506 	mla	r5, r4, r6, r5
 802aca6:	784c      	ldrb	r4, [r1, #1]
 802aca8:	7809      	ldrb	r1, [r1, #0]
 802acaa:	fb14 f403 	smulbb	r4, r4, r3
 802acae:	fb11 f303 	smulbb	r3, r1, r3
 802acb2:	10d0      	asrs	r0, r2, #3
 802acb4:	00d2      	lsls	r2, r2, #3
 802acb6:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802acba:	b2d2      	uxtb	r2, r2
 802acbc:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 802acc0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 802acc4:	fb00 4406 	mla	r4, r0, r6, r4
 802acc8:	fb02 3306 	mla	r3, r2, r6, r3
 802accc:	b2ad      	uxth	r5, r5
 802acce:	b29b      	uxth	r3, r3
 802acd0:	b2a4      	uxth	r4, r4
 802acd2:	1c68      	adds	r0, r5, #1
 802acd4:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 802acd8:	1c62      	adds	r2, r4, #1
 802acda:	1c58      	adds	r0, r3, #1
 802acdc:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802ace0:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 802ace4:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 802ace8:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802acec:	0964      	lsrs	r4, r4, #5
 802acee:	4328      	orrs	r0, r5
 802acf0:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 802acf4:	4320      	orrs	r0, r4
 802acf6:	bd70      	pop	{r4, r5, r6, pc}

0802acf8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 802acf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802acfc:	b08f      	sub	sp, #60	@ 0x3c
 802acfe:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 802ad02:	461c      	mov	r4, r3
 802ad04:	4682      	mov	sl, r0
 802ad06:	460e      	mov	r6, r1
 802ad08:	4615      	mov	r5, r2
 802ad0a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802ad0c:	2f00      	cmp	r7, #0
 802ad0e:	f000 8141 	beq.w	802af94 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x29c>
 802ad12:	f04f 0802 	mov.w	r8, #2
 802ad16:	6820      	ldr	r0, [r4, #0]
 802ad18:	6861      	ldr	r1, [r4, #4]
 802ad1a:	aa0a      	add	r2, sp, #40	@ 0x28
 802ad1c:	c203      	stmia	r2!, {r0, r1}
 802ad1e:	6818      	ldr	r0, [r3, #0]
 802ad20:	6859      	ldr	r1, [r3, #4]
 802ad22:	aa0c      	add	r2, sp, #48	@ 0x30
 802ad24:	c203      	stmia	r2!, {r0, r1}
 802ad26:	a80a      	add	r0, sp, #40	@ 0x28
 802ad28:	f7ee fb98 	bl	801945c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802ad2c:	4621      	mov	r1, r4
 802ad2e:	a80c      	add	r0, sp, #48	@ 0x30
 802ad30:	f7ee fbbc 	bl	80194ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802ad34:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 802ad38:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 802ad3c:	f002 0301 	and.w	r3, r2, #1
 802ad40:	9306      	str	r3, [sp, #24]
 802ad42:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802ad46:	3504      	adds	r5, #4
 802ad48:	f003 0101 	and.w	r1, r3, #1
 802ad4c:	9105      	str	r1, [sp, #20]
 802ad4e:	9805      	ldr	r0, [sp, #20]
 802ad50:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 802ad54:	4403      	add	r3, r0
 802ad56:	fb01 2303 	mla	r3, r1, r3, r2
 802ad5a:	fb93 f3f8 	sdiv	r3, r3, r8
 802ad5e:	441e      	add	r6, r3
 802ad60:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 802ad64:	441a      	add	r2, r3
 802ad66:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 802ad6a:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 802ad6e:	4419      	add	r1, r3
 802ad70:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 802ad74:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 802ad78:	9303      	str	r3, [sp, #12]
 802ad7a:	4b88      	ldr	r3, [pc, #544]	@ (802af9c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 802ad7c:	6818      	ldr	r0, [r3, #0]
 802ad7e:	6803      	ldr	r3, [r0, #0]
 802ad80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802ad82:	4798      	blx	r3
 802ad84:	4a86      	ldr	r2, [pc, #536]	@ (802afa0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a8>)
 802ad86:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 802ad8a:	8813      	ldrh	r3, [r2, #0]
 802ad8c:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	@ 0x30
 802ad90:	2fff      	cmp	r7, #255	@ 0xff
 802ad92:	fb03 9404 	mla	r4, r3, r4, r9
 802ad96:	4694      	mov	ip, r2
 802ad98:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802ad9c:	fb03 f30b 	mul.w	r3, r3, fp
 802ada0:	d071      	beq.n	802ae86 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x18e>
 802ada2:	43f9      	mvns	r1, r7
 802ada4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 802ada8:	e9cd 3207 	strd	r3, r2, [sp, #28]
 802adac:	b2c9      	uxtb	r1, r1
 802adae:	9104      	str	r1, [sp, #16]
 802adb0:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 802adb4:	9b07      	ldr	r3, [sp, #28]
 802adb6:	42a3      	cmp	r3, r4
 802adb8:	f240 80e7 	bls.w	802af8a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x292>
 802adbc:	9b06      	ldr	r3, [sp, #24]
 802adbe:	2b00      	cmp	r3, #0
 802adc0:	d03d      	beq.n	802ae3e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x146>
 802adc2:	7831      	ldrb	r1, [r6, #0]
 802adc4:	9b04      	ldr	r3, [sp, #16]
 802adc6:	f001 010f 	and.w	r1, r1, #15
 802adca:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802adce:	8822      	ldrh	r2, [r4, #0]
 802add0:	4429      	add	r1, r5
 802add2:	9300      	str	r3, [sp, #0]
 802add4:	4650      	mov	r0, sl
 802add6:	463b      	mov	r3, r7
 802add8:	f7ff ff58 	bl	802ac8c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 802addc:	9b03      	ldr	r3, [sp, #12]
 802adde:	f106 0801 	add.w	r8, r6, #1
 802ade2:	f824 0b02 	strh.w	r0, [r4], #2
 802ade6:	f103 3bff 	add.w	fp, r3, #4294967295
 802adea:	f1bb 0f01 	cmp.w	fp, #1
 802adee:	46a1      	mov	r9, r4
 802adf0:	f104 0404 	add.w	r4, r4, #4
 802adf4:	dd27      	ble.n	802ae46 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x14e>
 802adf6:	f898 1000 	ldrb.w	r1, [r8]
 802adfa:	9b04      	ldr	r3, [sp, #16]
 802adfc:	0909      	lsrs	r1, r1, #4
 802adfe:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802ae02:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 802ae06:	4429      	add	r1, r5
 802ae08:	9300      	str	r3, [sp, #0]
 802ae0a:	4650      	mov	r0, sl
 802ae0c:	463b      	mov	r3, r7
 802ae0e:	f7ff ff3d 	bl	802ac8c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 802ae12:	f824 0c04 	strh.w	r0, [r4, #-4]
 802ae16:	f818 1b01 	ldrb.w	r1, [r8], #1
 802ae1a:	9b04      	ldr	r3, [sp, #16]
 802ae1c:	f001 010f 	and.w	r1, r1, #15
 802ae20:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802ae24:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 802ae28:	4429      	add	r1, r5
 802ae2a:	9300      	str	r3, [sp, #0]
 802ae2c:	4650      	mov	r0, sl
 802ae2e:	463b      	mov	r3, r7
 802ae30:	f7ff ff2c 	bl	802ac8c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 802ae34:	f1ab 0b02 	sub.w	fp, fp, #2
 802ae38:	f824 0c02 	strh.w	r0, [r4, #-2]
 802ae3c:	e7d5      	b.n	802adea <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf2>
 802ae3e:	46b0      	mov	r8, r6
 802ae40:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802ae44:	e7d1      	b.n	802adea <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf2>
 802ae46:	d10f      	bne.n	802ae68 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x170>
 802ae48:	f898 1000 	ldrb.w	r1, [r8]
 802ae4c:	9b04      	ldr	r3, [sp, #16]
 802ae4e:	0909      	lsrs	r1, r1, #4
 802ae50:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802ae54:	f8b9 2000 	ldrh.w	r2, [r9]
 802ae58:	4429      	add	r1, r5
 802ae5a:	9300      	str	r3, [sp, #0]
 802ae5c:	4650      	mov	r0, sl
 802ae5e:	463b      	mov	r3, r7
 802ae60:	f7ff ff14 	bl	802ac8c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 802ae64:	f829 0b02 	strh.w	r0, [r9], #2
 802ae68:	9b08      	ldr	r3, [sp, #32]
 802ae6a:	9a05      	ldr	r2, [sp, #20]
 802ae6c:	881c      	ldrh	r4, [r3, #0]
 802ae6e:	9b03      	ldr	r3, [sp, #12]
 802ae70:	1ae4      	subs	r4, r4, r3
 802ae72:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802ae76:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 802ae7a:	4413      	add	r3, r2
 802ae7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802ae7e:	fb93 f3f2 	sdiv	r3, r3, r2
 802ae82:	441e      	add	r6, r3
 802ae84:	e796      	b.n	802adb4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xbc>
 802ae86:	4f47      	ldr	r7, [pc, #284]	@ (802afa4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ac>)
 802ae88:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 802ae8c:	42a3      	cmp	r3, r4
 802ae8e:	d97c      	bls.n	802af8a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x292>
 802ae90:	9a06      	ldr	r2, [sp, #24]
 802ae92:	2a00      	cmp	r2, #0
 802ae94:	d054      	beq.n	802af40 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x248>
 802ae96:	7830      	ldrb	r0, [r6, #0]
 802ae98:	1c71      	adds	r1, r6, #1
 802ae9a:	f000 000f 	and.w	r0, r0, #15
 802ae9e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802aea2:	eb05 0e00 	add.w	lr, r5, r0
 802aea6:	f89e 2002 	ldrb.w	r2, [lr, #2]
 802aeaa:	f89e e001 	ldrb.w	lr, [lr, #1]
 802aeae:	5c28      	ldrb	r0, [r5, r0]
 802aeb0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802aeb4:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 802aeb8:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 802aebc:	ea42 020e 	orr.w	r2, r2, lr
 802aec0:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
 802aec4:	f824 2b02 	strh.w	r2, [r4], #2
 802aec8:	9a03      	ldr	r2, [sp, #12]
 802aeca:	f102 3eff 	add.w	lr, r2, #4294967295
 802aece:	f1be 0f01 	cmp.w	lr, #1
 802aed2:	4620      	mov	r0, r4
 802aed4:	f104 0404 	add.w	r4, r4, #4
 802aed8:	dd36      	ble.n	802af48 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x250>
 802aeda:	7808      	ldrb	r0, [r1, #0]
 802aedc:	f1ae 0e02 	sub.w	lr, lr, #2
 802aee0:	0900      	lsrs	r0, r0, #4
 802aee2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802aee6:	eb05 0a00 	add.w	sl, r5, r0
 802aeea:	f89a 2001 	ldrb.w	r2, [sl, #1]
 802aeee:	f89a 9002 	ldrb.w	r9, [sl, #2]
 802aef2:	00d2      	lsls	r2, r2, #3
 802aef4:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 802aef8:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802aefc:	ea49 0202 	orr.w	r2, r9, r2
 802af00:	f815 9000 	ldrb.w	r9, [r5, r0]
 802af04:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 802af08:	f824 2c04 	strh.w	r2, [r4, #-4]
 802af0c:	f811 0b01 	ldrb.w	r0, [r1], #1
 802af10:	f000 000f 	and.w	r0, r0, #15
 802af14:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802af18:	eb05 0a00 	add.w	sl, r5, r0
 802af1c:	f89a 2001 	ldrb.w	r2, [sl, #1]
 802af20:	f89a 9002 	ldrb.w	r9, [sl, #2]
 802af24:	00d2      	lsls	r2, r2, #3
 802af26:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 802af2a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802af2e:	ea49 0202 	orr.w	r2, r9, r2
 802af32:	f815 9000 	ldrb.w	r9, [r5, r0]
 802af36:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 802af3a:	f824 2c02 	strh.w	r2, [r4, #-2]
 802af3e:	e7c6      	b.n	802aece <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d6>
 802af40:	4631      	mov	r1, r6
 802af42:	f8dd e00c 	ldr.w	lr, [sp, #12]
 802af46:	e7c2      	b.n	802aece <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d6>
 802af48:	d111      	bne.n	802af6e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x276>
 802af4a:	7809      	ldrb	r1, [r1, #0]
 802af4c:	0909      	lsrs	r1, r1, #4
 802af4e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802af52:	186c      	adds	r4, r5, r1
 802af54:	78a2      	ldrb	r2, [r4, #2]
 802af56:	7864      	ldrb	r4, [r4, #1]
 802af58:	5c69      	ldrb	r1, [r5, r1]
 802af5a:	00e4      	lsls	r4, r4, #3
 802af5c:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 802af60:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 802af64:	4322      	orrs	r2, r4
 802af66:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
 802af6a:	f820 2b02 	strh.w	r2, [r0], #2
 802af6e:	9a03      	ldr	r2, [sp, #12]
 802af70:	f8bc 4000 	ldrh.w	r4, [ip]
 802af74:	9905      	ldr	r1, [sp, #20]
 802af76:	1aa4      	subs	r4, r4, r2
 802af78:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 802af7c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802af80:	440a      	add	r2, r1
 802af82:	fb92 f2f8 	sdiv	r2, r2, r8
 802af86:	4416      	add	r6, r2
 802af88:	e780      	b.n	802ae8c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x194>
 802af8a:	4b04      	ldr	r3, [pc, #16]	@ (802af9c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 802af8c:	6818      	ldr	r0, [r3, #0]
 802af8e:	6803      	ldr	r3, [r0, #0]
 802af90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802af92:	4798      	blx	r3
 802af94:	b00f      	add	sp, #60	@ 0x3c
 802af96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802af9a:	bf00      	nop
 802af9c:	2005ba7c 	.word	0x2005ba7c
 802afa0:	2005ba76 	.word	0x2005ba76
 802afa4:	fffff800 	.word	0xfffff800

0802afa8 <CRC_Lock>:
 802afa8:	b530      	push	{r4, r5, lr}
 802afaa:	4a2d      	ldr	r2, [pc, #180]	@ (802b060 <CRC_Lock+0xb8>)
 802afac:	f24c 2540 	movw	r5, #49728	@ 0xc240
 802afb0:	6813      	ldr	r3, [r2, #0]
 802afb2:	f023 0301 	bic.w	r3, r3, #1
 802afb6:	6013      	str	r3, [r2, #0]
 802afb8:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 802afbc:	4b29      	ldr	r3, [pc, #164]	@ (802b064 <CRC_Lock+0xbc>)
 802afbe:	681c      	ldr	r4, [r3, #0]
 802afc0:	4014      	ands	r4, r2
 802afc2:	42ac      	cmp	r4, r5
 802afc4:	d005      	beq.n	802afd2 <CRC_Lock+0x2a>
 802afc6:	f24c 2570 	movw	r5, #49776	@ 0xc270
 802afca:	681c      	ldr	r4, [r3, #0]
 802afcc:	4014      	ands	r4, r2
 802afce:	42ac      	cmp	r4, r5
 802afd0:	d125      	bne.n	802b01e <CRC_Lock+0x76>
 802afd2:	4b25      	ldr	r3, [pc, #148]	@ (802b068 <CRC_Lock+0xc0>)
 802afd4:	681b      	ldr	r3, [r3, #0]
 802afd6:	2b00      	cmp	r3, #0
 802afd8:	d139      	bne.n	802b04e <CRC_Lock+0xa6>
 802afda:	4b24      	ldr	r3, [pc, #144]	@ (802b06c <CRC_Lock+0xc4>)
 802afdc:	681a      	ldr	r2, [r3, #0]
 802afde:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802afe2:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 802afe6:	d00d      	beq.n	802b004 <CRC_Lock+0x5c>
 802afe8:	f240 4483 	movw	r4, #1155	@ 0x483
 802afec:	681a      	ldr	r2, [r3, #0]
 802afee:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802aff2:	42a2      	cmp	r2, r4
 802aff4:	d006      	beq.n	802b004 <CRC_Lock+0x5c>
 802aff6:	f240 4285 	movw	r2, #1157	@ 0x485
 802affa:	681b      	ldr	r3, [r3, #0]
 802affc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802b000:	4293      	cmp	r3, r2
 802b002:	d124      	bne.n	802b04e <CRC_Lock+0xa6>
 802b004:	2201      	movs	r2, #1
 802b006:	4b1a      	ldr	r3, [pc, #104]	@ (802b070 <CRC_Lock+0xc8>)
 802b008:	601a      	str	r2, [r3, #0]
 802b00a:	681a      	ldr	r2, [r3, #0]
 802b00c:	2a00      	cmp	r2, #0
 802b00e:	d1fc      	bne.n	802b00a <CRC_Lock+0x62>
 802b010:	4b18      	ldr	r3, [pc, #96]	@ (802b074 <CRC_Lock+0xcc>)
 802b012:	6018      	str	r0, [r3, #0]
 802b014:	6818      	ldr	r0, [r3, #0]
 802b016:	1a43      	subs	r3, r0, r1
 802b018:	4258      	negs	r0, r3
 802b01a:	4158      	adcs	r0, r3
 802b01c:	e00e      	b.n	802b03c <CRC_Lock+0x94>
 802b01e:	681b      	ldr	r3, [r3, #0]
 802b020:	4013      	ands	r3, r2
 802b022:	f24d 2220 	movw	r2, #53792	@ 0xd220
 802b026:	4293      	cmp	r3, r2
 802b028:	d111      	bne.n	802b04e <CRC_Lock+0xa6>
 802b02a:	f240 4286 	movw	r2, #1158	@ 0x486
 802b02e:	4b12      	ldr	r3, [pc, #72]	@ (802b078 <CRC_Lock+0xd0>)
 802b030:	681b      	ldr	r3, [r3, #0]
 802b032:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802b036:	4293      	cmp	r3, r2
 802b038:	d001      	beq.n	802b03e <CRC_Lock+0x96>
 802b03a:	2000      	movs	r0, #0
 802b03c:	bd30      	pop	{r4, r5, pc}
 802b03e:	2201      	movs	r2, #1
 802b040:	4b0e      	ldr	r3, [pc, #56]	@ (802b07c <CRC_Lock+0xd4>)
 802b042:	601a      	str	r2, [r3, #0]
 802b044:	681a      	ldr	r2, [r3, #0]
 802b046:	2a00      	cmp	r2, #0
 802b048:	d1fc      	bne.n	802b044 <CRC_Lock+0x9c>
 802b04a:	4b0d      	ldr	r3, [pc, #52]	@ (802b080 <CRC_Lock+0xd8>)
 802b04c:	e7e1      	b.n	802b012 <CRC_Lock+0x6a>
 802b04e:	2201      	movs	r2, #1
 802b050:	4b0c      	ldr	r3, [pc, #48]	@ (802b084 <CRC_Lock+0xdc>)
 802b052:	601a      	str	r2, [r3, #0]
 802b054:	681a      	ldr	r2, [r3, #0]
 802b056:	2a00      	cmp	r2, #0
 802b058:	d1fc      	bne.n	802b054 <CRC_Lock+0xac>
 802b05a:	4b0b      	ldr	r3, [pc, #44]	@ (802b088 <CRC_Lock+0xe0>)
 802b05c:	e7d9      	b.n	802b012 <CRC_Lock+0x6a>
 802b05e:	bf00      	nop
 802b060:	e0002000 	.word	0xe0002000
 802b064:	e000ed00 	.word	0xe000ed00
 802b068:	e0042000 	.word	0xe0042000
 802b06c:	5c001000 	.word	0x5c001000
 802b070:	58024c08 	.word	0x58024c08
 802b074:	58024c00 	.word	0x58024c00
 802b078:	46008ff0 	.word	0x46008ff0
 802b07c:	46024c08 	.word	0x46024c08
 802b080:	46024c00 	.word	0x46024c00
 802b084:	40023008 	.word	0x40023008
 802b088:	40023000 	.word	0x40023000

0802b08c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 802b08c:	6101      	str	r1, [r0, #16]
 802b08e:	4770      	bx	lr

0802b090 <_ZN8touchgfx8Gestures4tickEv>:
 802b090:	7b83      	ldrb	r3, [r0, #14]
 802b092:	b14b      	cbz	r3, 802b0a8 <_ZN8touchgfx8Gestures4tickEv+0x18>
 802b094:	8903      	ldrh	r3, [r0, #8]
 802b096:	3301      	adds	r3, #1
 802b098:	b29b      	uxth	r3, r3
 802b09a:	2b07      	cmp	r3, #7
 802b09c:	8103      	strh	r3, [r0, #8]
 802b09e:	bf81      	itttt	hi
 802b0a0:	2300      	movhi	r3, #0
 802b0a2:	8143      	strhhi	r3, [r0, #10]
 802b0a4:	8183      	strhhi	r3, [r0, #12]
 802b0a6:	7383      	strbhi	r3, [r0, #14]
 802b0a8:	4770      	bx	lr
	...

0802b0ac <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 802b0ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802b0b0:	4698      	mov	r8, r3
 802b0b2:	4604      	mov	r4, r0
 802b0b4:	8883      	ldrh	r3, [r0, #4]
 802b0b6:	460e      	mov	r6, r1
 802b0b8:	88c1      	ldrh	r1, [r0, #6]
 802b0ba:	2000      	movs	r0, #0
 802b0bc:	f8ad 3006 	strh.w	r3, [sp, #6]
 802b0c0:	eba8 0303 	sub.w	r3, r8, r3
 802b0c4:	b21b      	sxth	r3, r3
 802b0c6:	4617      	mov	r7, r2
 802b0c8:	4a17      	ldr	r2, [pc, #92]	@ (802b128 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 802b0ca:	2b00      	cmp	r3, #0
 802b0cc:	bfb8      	it	lt
 802b0ce:	425b      	neglt	r3, r3
 802b0d0:	9200      	str	r2, [sp, #0]
 802b0d2:	8aa2      	ldrh	r2, [r4, #20]
 802b0d4:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 802b0d8:	b21b      	sxth	r3, r3
 802b0da:	4293      	cmp	r3, r2
 802b0dc:	f88d 0004 	strb.w	r0, [sp, #4]
 802b0e0:	f8ad 1008 	strh.w	r1, [sp, #8]
 802b0e4:	f8ad 800a 	strh.w	r8, [sp, #10]
 802b0e8:	f8ad 500c 	strh.w	r5, [sp, #12]
 802b0ec:	dc07      	bgt.n	802b0fe <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 802b0ee:	1a69      	subs	r1, r5, r1
 802b0f0:	b209      	sxth	r1, r1
 802b0f2:	2900      	cmp	r1, #0
 802b0f4:	bfb8      	it	lt
 802b0f6:	4249      	neglt	r1, r1
 802b0f8:	b209      	sxth	r1, r1
 802b0fa:	428a      	cmp	r2, r1
 802b0fc:	da10      	bge.n	802b120 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 802b0fe:	6920      	ldr	r0, [r4, #16]
 802b100:	4669      	mov	r1, sp
 802b102:	6803      	ldr	r3, [r0, #0]
 802b104:	eba8 0606 	sub.w	r6, r8, r6
 802b108:	685b      	ldr	r3, [r3, #4]
 802b10a:	4798      	blx	r3
 802b10c:	2300      	movs	r3, #0
 802b10e:	2001      	movs	r0, #1
 802b110:	1bef      	subs	r7, r5, r7
 802b112:	8123      	strh	r3, [r4, #8]
 802b114:	8166      	strh	r6, [r4, #10]
 802b116:	81a7      	strh	r7, [r4, #12]
 802b118:	f8a4 8004 	strh.w	r8, [r4, #4]
 802b11c:	80e5      	strh	r5, [r4, #6]
 802b11e:	73a0      	strb	r0, [r4, #14]
 802b120:	b004      	add	sp, #16
 802b122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b126:	bf00      	nop
 802b128:	0802fbc8 	.word	0x0802fbc8

0802b12c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802b12c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802b12e:	461e      	mov	r6, r3
 802b130:	1e4b      	subs	r3, r1, #1
 802b132:	2b01      	cmp	r3, #1
 802b134:	b085      	sub	sp, #20
 802b136:	4604      	mov	r4, r0
 802b138:	460d      	mov	r5, r1
 802b13a:	4617      	mov	r7, r2
 802b13c:	d84b      	bhi.n	802b1d6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802b13e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802b142:	1cd3      	adds	r3, r2, #3
 802b144:	b29b      	uxth	r3, r3
 802b146:	2b06      	cmp	r3, #6
 802b148:	d916      	bls.n	802b178 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802b14a:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 802b1ec <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802b14e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802b152:	f8cd c004 	str.w	ip, [sp, #4]
 802b156:	f04f 0c00 	mov.w	ip, #0
 802b15a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802b15e:	6900      	ldr	r0, [r0, #16]
 802b160:	f8ad 100c 	strh.w	r1, [sp, #12]
 802b164:	f88d c008 	strb.w	ip, [sp, #8]
 802b168:	f8ad 200a 	strh.w	r2, [sp, #10]
 802b16c:	f8ad 300e 	strh.w	r3, [sp, #14]
 802b170:	6803      	ldr	r3, [r0, #0]
 802b172:	a901      	add	r1, sp, #4
 802b174:	689b      	ldr	r3, [r3, #8]
 802b176:	4798      	blx	r3
 802b178:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802b17c:	1cd3      	adds	r3, r2, #3
 802b17e:	b29b      	uxth	r3, r3
 802b180:	2b06      	cmp	r3, #6
 802b182:	d916      	bls.n	802b1b2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802b184:	f8df c064 	ldr.w	ip, [pc, #100]	@ 802b1ec <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802b188:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802b18c:	f8cd c004 	str.w	ip, [sp, #4]
 802b190:	f04f 0c01 	mov.w	ip, #1
 802b194:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802b198:	6920      	ldr	r0, [r4, #16]
 802b19a:	f8ad 100c 	strh.w	r1, [sp, #12]
 802b19e:	f88d c008 	strb.w	ip, [sp, #8]
 802b1a2:	f8ad 200a 	strh.w	r2, [sp, #10]
 802b1a6:	f8ad 300e 	strh.w	r3, [sp, #14]
 802b1aa:	6803      	ldr	r3, [r0, #0]
 802b1ac:	a901      	add	r1, sp, #4
 802b1ae:	689b      	ldr	r3, [r3, #8]
 802b1b0:	4798      	blx	r3
 802b1b2:	4b0d      	ldr	r3, [pc, #52]	@ (802b1e8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 802b1b4:	6920      	ldr	r0, [r4, #16]
 802b1b6:	9301      	str	r3, [sp, #4]
 802b1b8:	2300      	movs	r3, #0
 802b1ba:	f88d 5008 	strb.w	r5, [sp, #8]
 802b1be:	f8ad 700a 	strh.w	r7, [sp, #10]
 802b1c2:	f8ad 600c 	strh.w	r6, [sp, #12]
 802b1c6:	f8ad 300e 	strh.w	r3, [sp, #14]
 802b1ca:	6803      	ldr	r3, [r0, #0]
 802b1cc:	a901      	add	r1, sp, #4
 802b1ce:	681b      	ldr	r3, [r3, #0]
 802b1d0:	4798      	blx	r3
 802b1d2:	b005      	add	sp, #20
 802b1d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802b1d6:	2900      	cmp	r1, #0
 802b1d8:	d1eb      	bne.n	802b1b2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802b1da:	80a2      	strh	r2, [r4, #4]
 802b1dc:	80c6      	strh	r6, [r0, #6]
 802b1de:	60a1      	str	r1, [r4, #8]
 802b1e0:	81a1      	strh	r1, [r4, #12]
 802b1e2:	73a1      	strb	r1, [r4, #14]
 802b1e4:	e7e5      	b.n	802b1b2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802b1e6:	bf00      	nop
 802b1e8:	0802fbb4 	.word	0x0802fbb4
 802b1ec:	0802fbdc 	.word	0x0802fbdc

0802b1f0 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>:
 802b1f0:	10c9      	asrs	r1, r1, #3
 802b1f2:	2900      	cmp	r1, #0
 802b1f4:	bfb8      	it	lt
 802b1f6:	4249      	neglt	r1, r1
 802b1f8:	2801      	cmp	r0, #1
 802b1fa:	d108      	bne.n	802b20e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 802b1fc:	f3c1 0008 	ubfx	r0, r1, #0, #9
 802b200:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 802b204:	4601      	mov	r1, r0
 802b206:	dd02      	ble.n	802b20e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 802b208:	f5c0 7000 	rsb	r0, r0, #512	@ 0x200
 802b20c:	4770      	bx	lr
 802b20e:	29ff      	cmp	r1, #255	@ 0xff
 802b210:	bfa8      	it	ge
 802b212:	21ff      	movge	r1, #255	@ 0xff
 802b214:	4608      	mov	r0, r1
 802b216:	4770      	bx	lr

0802b218 <_ZN8touchgfx10Rasterizer6lineToEii>:
 802b218:	b410      	push	{r4}
 802b21a:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 802b21e:	429c      	cmp	r4, r3
 802b220:	d803      	bhi.n	802b22a <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 802b222:	f85d 4b04 	ldr.w	r4, [sp], #4
 802b226:	f7ed b8cb 	b.w	80183c0 <_ZN8touchgfx7Outline6lineToEii>
 802b22a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802b22e:	4770      	bx	lr

0802b230 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 802b230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b234:	b08b      	sub	sp, #44	@ 0x2c
 802b236:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802b23a:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 802b23e:	4606      	mov	r6, r0
 802b240:	9308      	str	r3, [sp, #32]
 802b242:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 802b246:	468a      	mov	sl, r1
 802b248:	9309      	str	r3, [sp, #36]	@ 0x24
 802b24a:	f7ed fa25 	bl	8018698 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 802b24e:	68b5      	ldr	r5, [r6, #8]
 802b250:	4604      	mov	r4, r0
 802b252:	2d00      	cmp	r5, #0
 802b254:	d044      	beq.n	802b2e0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802b256:	6873      	ldr	r3, [r6, #4]
 802b258:	42ab      	cmp	r3, r5
 802b25a:	d33d      	bcc.n	802b2d8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 802b25c:	f04f 0800 	mov.w	r8, #0
 802b260:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 802b264:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	@ 0x34
 802b268:	eb02 0b03 	add.w	fp, r2, r3
 802b26c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 802b270:	fb02 1203 	mla	r2, r2, r3, r1
 802b274:	9205      	str	r2, [sp, #20]
 802b276:	1e6a      	subs	r2, r5, #1
 802b278:	9204      	str	r2, [sp, #16]
 802b27a:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 802b27e:	f9b4 7000 	ldrsh.w	r7, [r4]
 802b282:	454b      	cmp	r3, r9
 802b284:	463a      	mov	r2, r7
 802b286:	d008      	beq.n	802b29a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 802b288:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	@ 0x34
 802b28c:	eb03 0b09 	add.w	fp, r3, r9
 802b290:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 802b294:	fb03 1309 	mla	r3, r3, r9, r1
 802b298:	9305      	str	r3, [sp, #20]
 802b29a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 802b29e:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 802b2a2:	4498      	add	r8, r3
 802b2a4:	9b04      	ldr	r3, [sp, #16]
 802b2a6:	3b01      	subs	r3, #1
 802b2a8:	9304      	str	r3, [sp, #16]
 802b2aa:	9b04      	ldr	r3, [sp, #16]
 802b2ac:	3301      	adds	r3, #1
 802b2ae:	d015      	beq.n	802b2dc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 802b2b0:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 802b2b4:	42bb      	cmp	r3, r7
 802b2b6:	d117      	bne.n	802b2e8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 802b2b8:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 802b2bc:	9b04      	ldr	r3, [sp, #16]
 802b2be:	4548      	cmp	r0, r9
 802b2c0:	f103 33ff 	add.w	r3, r3, #4294967295
 802b2c4:	d17d      	bne.n	802b3c2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 802b2c6:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 802b2ca:	4401      	add	r1, r0
 802b2cc:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 802b2d0:	4480      	add	r8, r0
 802b2d2:	e7e9      	b.n	802b2a8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 802b2d4:	461f      	mov	r7, r3
 802b2d6:	e042      	b.n	802b35e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 802b2d8:	2000      	movs	r0, #0
 802b2da:	e002      	b.n	802b2e2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 802b2dc:	2900      	cmp	r1, #0
 802b2de:	d16d      	bne.n	802b3bc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 802b2e0:	2001      	movs	r0, #1
 802b2e2:	b00b      	add	sp, #44	@ 0x2c
 802b2e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b2e8:	b379      	cbz	r1, 802b34a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 802b2ea:	2f00      	cmp	r7, #0
 802b2ec:	db29      	blt.n	802b342 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802b2ee:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 802b2f2:	42bb      	cmp	r3, r7
 802b2f4:	dd25      	ble.n	802b342 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802b2f6:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 802b2fa:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 802b2fe:	f7ff ff77 	bl	802b1f0 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 802b302:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b304:	fb10 f003 	smulbb	r0, r0, r3
 802b308:	b280      	uxth	r0, r0
 802b30a:	1c41      	adds	r1, r0, #1
 802b30c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802b310:	1209      	asrs	r1, r1, #8
 802b312:	f011 0fff 	tst.w	r1, #255	@ 0xff
 802b316:	d014      	beq.n	802b342 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802b318:	b2c9      	uxtb	r1, r1
 802b31a:	9102      	str	r1, [sp, #8]
 802b31c:	2101      	movs	r1, #1
 802b31e:	9808      	ldr	r0, [sp, #32]
 802b320:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 802b322:	b2ba      	uxth	r2, r7
 802b324:	4413      	add	r3, r2
 802b326:	9101      	str	r1, [sp, #4]
 802b328:	4402      	add	r2, r0
 802b32a:	fa0f f18b 	sxth.w	r1, fp
 802b32e:	f8da 0000 	ldr.w	r0, [sl]
 802b332:	9100      	str	r1, [sp, #0]
 802b334:	6941      	ldr	r1, [r0, #20]
 802b336:	b21b      	sxth	r3, r3
 802b338:	460d      	mov	r5, r1
 802b33a:	b212      	sxth	r2, r2
 802b33c:	9905      	ldr	r1, [sp, #20]
 802b33e:	4650      	mov	r0, sl
 802b340:	47a8      	blx	r5
 802b342:	9b04      	ldr	r3, [sp, #16]
 802b344:	1c7a      	adds	r2, r7, #1
 802b346:	3301      	adds	r3, #1
 802b348:	d0ca      	beq.n	802b2e0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802b34a:	f9b4 7000 	ldrsh.w	r7, [r4]
 802b34e:	1abb      	subs	r3, r7, r2
 802b350:	2b00      	cmp	r3, #0
 802b352:	dd31      	ble.n	802b3b8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802b354:	2a00      	cmp	r2, #0
 802b356:	dabd      	bge.n	802b2d4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 802b358:	2f00      	cmp	r7, #0
 802b35a:	dd2d      	ble.n	802b3b8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802b35c:	2200      	movs	r2, #0
 802b35e:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 802b362:	19d1      	adds	r1, r2, r7
 802b364:	4299      	cmp	r1, r3
 802b366:	db02      	blt.n	802b36e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 802b368:	1a9f      	subs	r7, r3, r2
 802b36a:	2f00      	cmp	r7, #0
 802b36c:	dd24      	ble.n	802b3b8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802b36e:	ea4f 1188 	mov.w	r1, r8, lsl #6
 802b372:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 802b376:	f7ff ff3b 	bl	802b1f0 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 802b37a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b37c:	fb10 f003 	smulbb	r0, r0, r3
 802b380:	b280      	uxth	r0, r0
 802b382:	1c41      	adds	r1, r0, #1
 802b384:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802b388:	1209      	asrs	r1, r1, #8
 802b38a:	f011 0fff 	tst.w	r1, #255	@ 0xff
 802b38e:	d013      	beq.n	802b3b8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802b390:	9808      	ldr	r0, [sp, #32]
 802b392:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 802b394:	b292      	uxth	r2, r2
 802b396:	b2c9      	uxtb	r1, r1
 802b398:	4413      	add	r3, r2
 802b39a:	9102      	str	r1, [sp, #8]
 802b39c:	4402      	add	r2, r0
 802b39e:	b23f      	sxth	r7, r7
 802b3a0:	f8da 0000 	ldr.w	r0, [sl]
 802b3a4:	fa0f f18b 	sxth.w	r1, fp
 802b3a8:	9100      	str	r1, [sp, #0]
 802b3aa:	9701      	str	r7, [sp, #4]
 802b3ac:	6947      	ldr	r7, [r0, #20]
 802b3ae:	b21b      	sxth	r3, r3
 802b3b0:	b212      	sxth	r2, r2
 802b3b2:	9905      	ldr	r1, [sp, #20]
 802b3b4:	4650      	mov	r0, sl
 802b3b6:	47b8      	blx	r7
 802b3b8:	464b      	mov	r3, r9
 802b3ba:	e75e      	b.n	802b27a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 802b3bc:	2f00      	cmp	r7, #0
 802b3be:	da96      	bge.n	802b2ee <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 802b3c0:	e78e      	b.n	802b2e0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802b3c2:	2900      	cmp	r1, #0
 802b3c4:	d0f8      	beq.n	802b3b8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802b3c6:	e790      	b.n	802b2ea <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

0802b3c8 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>:
 802b3c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 802b3cc:	2500      	movs	r5, #0
 802b3ce:	461e      	mov	r6, r3
 802b3d0:	4b35      	ldr	r3, [pc, #212]	@ (802b4a8 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h+0xe0>)
 802b3d2:	4604      	mov	r4, r0
 802b3d4:	e9c0 3100 	strd	r3, r1, [r0]
 802b3d8:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 802b3dc:	f100 0814 	add.w	r8, r0, #20
 802b3e0:	8103      	strh	r3, [r0, #8]
 802b3e2:	f89d 3020 	ldrb.w	r3, [sp, #32]
 802b3e6:	8185      	strh	r5, [r0, #12]
 802b3e8:	7283      	strb	r3, [r0, #10]
 802b3ea:	81c5      	strh	r5, [r0, #14]
 802b3ec:	8205      	strh	r5, [r0, #16]
 802b3ee:	8245      	strh	r5, [r0, #18]
 802b3f0:	4640      	mov	r0, r8
 802b3f2:	4617      	mov	r7, r2
 802b3f4:	f7ec fb1c 	bl	8017a30 <_ZN8touchgfx7OutlineC1Ev>
 802b3f8:	466b      	mov	r3, sp
 802b3fa:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
 802b3fe:	e9c4 5515 	strd	r5, r5, [r4, #84]	@ 0x54
 802b402:	e9c4 5518 	strd	r5, r5, [r4, #96]	@ 0x60
 802b406:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
 802b40a:	f884 5044 	strb.w	r5, [r4, #68]	@ 0x44
 802b40e:	f8a4 5046 	strh.w	r5, [r4, #70]	@ 0x46
 802b412:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
 802b416:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 802b41a:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
 802b41e:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
 802b422:	f8a4 5068 	strh.w	r5, [r4, #104]	@ 0x68
 802b426:	6830      	ldr	r0, [r6, #0]
 802b428:	6871      	ldr	r1, [r6, #4]
 802b42a:	8872      	ldrh	r2, [r6, #2]
 802b42c:	c303      	stmia	r3!, {r0, r1}
 802b42e:	887b      	ldrh	r3, [r7, #2]
 802b430:	8835      	ldrh	r5, [r6, #0]
 802b432:	4413      	add	r3, r2
 802b434:	883a      	ldrh	r2, [r7, #0]
 802b436:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 802b43a:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 802b43e:	442a      	add	r2, r5
 802b440:	81a2      	strh	r2, [r4, #12]
 802b442:	81e3      	strh	r3, [r4, #14]
 802b444:	8220      	strh	r0, [r4, #16]
 802b446:	8261      	strh	r1, [r4, #18]
 802b448:	4668      	mov	r0, sp
 802b44a:	4639      	mov	r1, r7
 802b44c:	f7ee f82e 	bl	80194ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802b450:	f104 000c 	add.w	r0, r4, #12
 802b454:	f7ee f802 	bl	801945c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802b458:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 802b45c:	f8bd 2000 	ldrh.w	r2, [sp]
 802b460:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 802b464:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 802b468:	4640      	mov	r0, r8
 802b46a:	f7ec fac5 	bl	80179f8 <_ZN8touchgfx7Outline5resetEv>
 802b46e:	4620      	mov	r0, r4
 802b470:	f9bd 3000 	ldrsh.w	r3, [sp]
 802b474:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 802b478:	015b      	lsls	r3, r3, #5
 802b47a:	64e3      	str	r3, [r4, #76]	@ 0x4c
 802b47c:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 802b480:	015b      	lsls	r3, r3, #5
 802b482:	6523      	str	r3, [r4, #80]	@ 0x50
 802b484:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 802b488:	015b      	lsls	r3, r3, #5
 802b48a:	6563      	str	r3, [r4, #84]	@ 0x54
 802b48c:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 802b490:	015b      	lsls	r3, r3, #5
 802b492:	65a3      	str	r3, [r4, #88]	@ 0x58
 802b494:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 802b498:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 802b49c:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 802b4a0:	b002      	add	sp, #8
 802b4a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b4a6:	bf00      	nop
 802b4a8:	0802ff18 	.word	0x0802ff18

0802b4ac <_ZN8touchgfx6Canvas5closeEv>:
 802b4ac:	b538      	push	{r3, r4, r5, lr}
 802b4ae:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 802b4b2:	4604      	mov	r4, r0
 802b4b4:	b193      	cbz	r3, 802b4dc <_ZN8touchgfx6Canvas5closeEv+0x30>
 802b4b6:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 802b4ba:	f890 2069 	ldrb.w	r2, [r0, #105]	@ 0x69
 802b4be:	4213      	tst	r3, r2
 802b4c0:	d10c      	bne.n	802b4dc <_ZN8touchgfx6Canvas5closeEv+0x30>
 802b4c2:	f100 0514 	add.w	r5, r0, #20
 802b4c6:	b123      	cbz	r3, 802b4d2 <_ZN8touchgfx6Canvas5closeEv+0x26>
 802b4c8:	e9d0 1218 	ldrd	r1, r2, [r0, #96]	@ 0x60
 802b4cc:	4628      	mov	r0, r5
 802b4ce:	f7ff fea3 	bl	802b218 <_ZN8touchgfx10Rasterizer6lineToEii>
 802b4d2:	e9d4 121b 	ldrd	r1, r2, [r4, #108]	@ 0x6c
 802b4d6:	4628      	mov	r0, r5
 802b4d8:	f7ff fe9e 	bl	802b218 <_ZN8touchgfx10Rasterizer6lineToEii>
 802b4dc:	2300      	movs	r3, #0
 802b4de:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 802b4e2:	e9d4 0306 	ldrd	r0, r3, [r4, #24]
 802b4e6:	4298      	cmp	r0, r3
 802b4e8:	bf34      	ite	cc
 802b4ea:	2000      	movcc	r0, #0
 802b4ec:	2001      	movcs	r0, #1
 802b4ee:	bd38      	pop	{r3, r4, r5, pc}

0802b4f0 <_ZN8touchgfx6Canvas6renderEh>:
 802b4f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 802b4f4:	7a85      	ldrb	r5, [r0, #10]
 802b4f6:	4604      	mov	r4, r0
 802b4f8:	4369      	muls	r1, r5
 802b4fa:	1c4d      	adds	r5, r1, #1
 802b4fc:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 802b500:	122d      	asrs	r5, r5, #8
 802b502:	f000 8098 	beq.w	802b636 <_ZN8touchgfx6Canvas6renderEh+0x146>
 802b506:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 802b50a:	2b00      	cmp	r3, #0
 802b50c:	f000 8093 	beq.w	802b636 <_ZN8touchgfx6Canvas6renderEh+0x146>
 802b510:	f7ff ffcc 	bl	802b4ac <_ZN8touchgfx6Canvas5closeEv>
 802b514:	4607      	mov	r7, r0
 802b516:	2800      	cmp	r0, #0
 802b518:	d045      	beq.n	802b5a6 <_ZN8touchgfx6Canvas6renderEh+0xb6>
 802b51a:	6860      	ldr	r0, [r4, #4]
 802b51c:	4e47      	ldr	r6, [pc, #284]	@ (802b63c <_ZN8touchgfx6Canvas6renderEh+0x14c>)
 802b51e:	6803      	ldr	r3, [r0, #0]
 802b520:	6837      	ldr	r7, [r6, #0]
 802b522:	689b      	ldr	r3, [r3, #8]
 802b524:	4798      	blx	r3
 802b526:	4601      	mov	r1, r0
 802b528:	4638      	mov	r0, r7
 802b52a:	f7ea fa17 	bl	801595c <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 802b52e:	4607      	mov	r7, r0
 802b530:	f7e4 faba 	bl	800faa8 <_ZN8touchgfx3HAL3lcdEv>
 802b534:	6803      	ldr	r3, [r0, #0]
 802b536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802b538:	4798      	blx	r3
 802b53a:	4680      	mov	r8, r0
 802b53c:	f7e4 fab4 	bl	800faa8 <_ZN8touchgfx3HAL3lcdEv>
 802b540:	6803      	ldr	r3, [r0, #0]
 802b542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802b544:	4798      	blx	r3
 802b546:	280b      	cmp	r0, #11
 802b548:	d85a      	bhi.n	802b600 <_ZN8touchgfx6Canvas6renderEh+0x110>
 802b54a:	e8df f000 	tbb	[pc, r0]
 802b54e:	5b50      	.short	0x5b50
 802b550:	3059066b 	.word	0x3059066b
 802b554:	64646440 	.word	0x64646440
 802b558:	6464      	.short	0x6464
 802b55a:	2208      	movs	r2, #8
 802b55c:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 802b560:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802b564:	fb91 f2f2 	sdiv	r2, r1, r2
 802b568:	fb08 2303 	mla	r3, r8, r3, r2
 802b56c:	441f      	add	r7, r3
 802b56e:	424b      	negs	r3, r1
 802b570:	f003 0307 	and.w	r3, r3, #7
 802b574:	f001 0107 	and.w	r1, r1, #7
 802b578:	bf58      	it	pl
 802b57a:	4259      	negpl	r1, r3
 802b57c:	b2c9      	uxtb	r1, r1
 802b57e:	b2ed      	uxtb	r5, r5
 802b580:	463a      	mov	r2, r7
 802b582:	e9cd 1500 	strd	r1, r5, [sp]
 802b586:	fa0f f388 	sxth.w	r3, r8
 802b58a:	6861      	ldr	r1, [r4, #4]
 802b58c:	f104 0014 	add.w	r0, r4, #20
 802b590:	f7ff fe4e 	bl	802b230 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 802b594:	4607      	mov	r7, r0
 802b596:	6860      	ldr	r0, [r4, #4]
 802b598:	6803      	ldr	r3, [r0, #0]
 802b59a:	691b      	ldr	r3, [r3, #16]
 802b59c:	4798      	blx	r3
 802b59e:	6830      	ldr	r0, [r6, #0]
 802b5a0:	6803      	ldr	r3, [r0, #0]
 802b5a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802b5a4:	4798      	blx	r3
 802b5a6:	4638      	mov	r0, r7
 802b5a8:	b002      	add	sp, #8
 802b5aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b5ae:	2204      	movs	r2, #4
 802b5b0:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 802b5b4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802b5b8:	fb91 f2f2 	sdiv	r2, r1, r2
 802b5bc:	fb08 2303 	mla	r3, r8, r3, r2
 802b5c0:	441f      	add	r7, r3
 802b5c2:	424b      	negs	r3, r1
 802b5c4:	f003 0303 	and.w	r3, r3, #3
 802b5c8:	f001 0103 	and.w	r1, r1, #3
 802b5cc:	e7d4      	b.n	802b578 <_ZN8touchgfx6Canvas6renderEh+0x88>
 802b5ce:	2202      	movs	r2, #2
 802b5d0:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 802b5d4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802b5d8:	fb91 f2f2 	sdiv	r2, r1, r2
 802b5dc:	fb08 2303 	mla	r3, r8, r3, r2
 802b5e0:	2900      	cmp	r1, #0
 802b5e2:	f001 0101 	and.w	r1, r1, #1
 802b5e6:	441f      	add	r7, r3
 802b5e8:	bfb8      	it	lt
 802b5ea:	4249      	neglt	r1, r1
 802b5ec:	e7c6      	b.n	802b57c <_ZN8touchgfx6Canvas6renderEh+0x8c>
 802b5ee:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802b5f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802b5f6:	fb08 f303 	mul.w	r3, r8, r3
 802b5fa:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 802b5fe:	441f      	add	r7, r3
 802b600:	2100      	movs	r1, #0
 802b602:	e7bc      	b.n	802b57e <_ZN8touchgfx6Canvas6renderEh+0x8e>
 802b604:	2103      	movs	r1, #3
 802b606:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802b60a:	fb08 f203 	mul.w	r2, r8, r3
 802b60e:	89a3      	ldrh	r3, [r4, #12]
 802b610:	fb13 2301 	smlabb	r3, r3, r1, r2
 802b614:	e7f3      	b.n	802b5fe <_ZN8touchgfx6Canvas6renderEh+0x10e>
 802b616:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802b61a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802b61e:	fb08 2303 	mla	r3, r8, r3, r2
 802b622:	e7ec      	b.n	802b5fe <_ZN8touchgfx6Canvas6renderEh+0x10e>
 802b624:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802b628:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802b62c:	fb08 f303 	mul.w	r3, r8, r3
 802b630:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802b634:	e7e3      	b.n	802b5fe <_ZN8touchgfx6Canvas6renderEh+0x10e>
 802b636:	2701      	movs	r7, #1
 802b638:	e7b5      	b.n	802b5a6 <_ZN8touchgfx6Canvas6renderEh+0xb6>
 802b63a:	bf00      	nop
 802b63c:	2005ba7c 	.word	0x2005ba7c

0802b640 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 802b640:	b510      	push	{r4, lr}
 802b642:	4b06      	ldr	r3, [pc, #24]	@ (802b65c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>)
 802b644:	781b      	ldrb	r3, [r3, #0]
 802b646:	2b01      	cmp	r3, #1
 802b648:	d107      	bne.n	802b65a <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1a>
 802b64a:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 802b64e:	680b      	ldr	r3, [r1, #0]
 802b650:	6814      	ldr	r4, [r2, #0]
 802b652:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 802b656:	6013      	str	r3, [r2, #0]
 802b658:	600c      	str	r4, [r1, #0]
 802b65a:	bd10      	pop	{r4, pc}
 802b65c:	2005ba74 	.word	0x2005ba74

0802b660 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 802b660:	b513      	push	{r0, r1, r4, lr}
 802b662:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 802b666:	4604      	mov	r4, r0
 802b668:	e9cd 2100 	strd	r2, r1, [sp]
 802b66c:	b9a3      	cbnz	r3, 802b698 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 802b66e:	466a      	mov	r2, sp
 802b670:	a901      	add	r1, sp, #4
 802b672:	4620      	mov	r0, r4
 802b674:	f7ff ffe4 	bl	802b640 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802b678:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 802b67a:	9901      	ldr	r1, [sp, #4]
 802b67c:	9a00      	ldr	r2, [sp, #0]
 802b67e:	1ac9      	subs	r1, r1, r3
 802b680:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802b682:	9101      	str	r1, [sp, #4]
 802b684:	1ad2      	subs	r2, r2, r3
 802b686:	2a00      	cmp	r2, #0
 802b688:	9200      	str	r2, [sp, #0]
 802b68a:	da0b      	bge.n	802b6a4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 802b68c:	2301      	movs	r3, #1
 802b68e:	2900      	cmp	r1, #0
 802b690:	da0e      	bge.n	802b6b0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 802b692:	f043 0304 	orr.w	r3, r3, #4
 802b696:	e013      	b.n	802b6c0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 802b698:	f7ff ff08 	bl	802b4ac <_ZN8touchgfx6Canvas5closeEv>
 802b69c:	2800      	cmp	r0, #0
 802b69e:	d1e6      	bne.n	802b66e <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 802b6a0:	b002      	add	sp, #8
 802b6a2:	bd10      	pop	{r4, pc}
 802b6a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802b6a6:	429a      	cmp	r2, r3
 802b6a8:	bfac      	ite	ge
 802b6aa:	2302      	movge	r3, #2
 802b6ac:	2300      	movlt	r3, #0
 802b6ae:	e7ee      	b.n	802b68e <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 802b6b0:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 802b6b2:	4281      	cmp	r1, r0
 802b6b4:	bfac      	ite	ge
 802b6b6:	2008      	movge	r0, #8
 802b6b8:	2000      	movlt	r0, #0
 802b6ba:	4318      	orrs	r0, r3
 802b6bc:	b2c3      	uxtb	r3, r0
 802b6be:	b158      	cbz	r0, 802b6d8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 802b6c0:	2200      	movs	r2, #0
 802b6c2:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
 802b6c6:	9901      	ldr	r1, [sp, #4]
 802b6c8:	9a00      	ldr	r2, [sp, #0]
 802b6ca:	66e1      	str	r1, [r4, #108]	@ 0x6c
 802b6cc:	6722      	str	r2, [r4, #112]	@ 0x70
 802b6ce:	e9c4 1218 	strd	r1, r2, [r4, #96]	@ 0x60
 802b6d2:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
 802b6d6:	e7e3      	b.n	802b6a0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 802b6d8:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 802b6dc:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 802b6e0:	4298      	cmp	r0, r3
 802b6e2:	d803      	bhi.n	802b6ec <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 802b6e4:	f104 0014 	add.w	r0, r4, #20
 802b6e8:	f7ec fe84 	bl	80183f4 <_ZN8touchgfx7Outline6moveToEii>
 802b6ec:	2301      	movs	r3, #1
 802b6ee:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 802b6f2:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 802b6f6:	2300      	movs	r3, #0
 802b6f8:	e7e5      	b.n	802b6c6 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

0802b6fa <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 802b6fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802b6fc:	4604      	mov	r4, r0
 802b6fe:	ab02      	add	r3, sp, #8
 802b700:	f843 2d08 	str.w	r2, [r3, #-8]!
 802b704:	461a      	mov	r2, r3
 802b706:	9101      	str	r1, [sp, #4]
 802b708:	a901      	add	r1, sp, #4
 802b70a:	f7ff ff99 	bl	802b640 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802b70e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 802b710:	9901      	ldr	r1, [sp, #4]
 802b712:	9a00      	ldr	r2, [sp, #0]
 802b714:	1ac9      	subs	r1, r1, r3
 802b716:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802b718:	9101      	str	r1, [sp, #4]
 802b71a:	1ad2      	subs	r2, r2, r3
 802b71c:	2a00      	cmp	r2, #0
 802b71e:	9200      	str	r2, [sp, #0]
 802b720:	db1c      	blt.n	802b75c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 802b722:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802b724:	429a      	cmp	r2, r3
 802b726:	bfac      	ite	ge
 802b728:	2002      	movge	r0, #2
 802b72a:	2000      	movlt	r0, #0
 802b72c:	2900      	cmp	r1, #0
 802b72e:	db17      	blt.n	802b760 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 802b730:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 802b732:	4299      	cmp	r1, r3
 802b734:	bfac      	ite	ge
 802b736:	2308      	movge	r3, #8
 802b738:	2300      	movlt	r3, #0
 802b73a:	4303      	orrs	r3, r0
 802b73c:	f894 0068 	ldrb.w	r0, [r4, #104]	@ 0x68
 802b740:	b2dd      	uxtb	r5, r3
 802b742:	b978      	cbnz	r0, 802b764 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 802b744:	f104 0014 	add.w	r0, r4, #20
 802b748:	f7ff fd66 	bl	802b218 <_ZN8touchgfx10Rasterizer6lineToEii>
 802b74c:	9b01      	ldr	r3, [sp, #4]
 802b74e:	f884 5068 	strb.w	r5, [r4, #104]	@ 0x68
 802b752:	6623      	str	r3, [r4, #96]	@ 0x60
 802b754:	9b00      	ldr	r3, [sp, #0]
 802b756:	6663      	str	r3, [r4, #100]	@ 0x64
 802b758:	b002      	add	sp, #8
 802b75a:	bd70      	pop	{r4, r5, r6, pc}
 802b75c:	2001      	movs	r0, #1
 802b75e:	e7e5      	b.n	802b72c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 802b760:	2304      	movs	r3, #4
 802b762:	e7ea      	b.n	802b73a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 802b764:	b113      	cbz	r3, 802b76c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 802b766:	ea10 0305 	ands.w	r3, r0, r5
 802b76a:	d11c      	bne.n	802b7a6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 802b76c:	e9d4 1218 	ldrd	r1, r2, [r4, #96]	@ 0x60
 802b770:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 802b774:	f104 0614 	add.w	r6, r4, #20
 802b778:	b98b      	cbnz	r3, 802b79e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 802b77a:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 802b77e:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 802b782:	4298      	cmp	r0, r3
 802b784:	d802      	bhi.n	802b78c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 802b786:	4630      	mov	r0, r6
 802b788:	f7ec fe34 	bl	80183f4 <_ZN8touchgfx7Outline6moveToEii>
 802b78c:	2301      	movs	r3, #1
 802b78e:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 802b792:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 802b796:	e9dd 2100 	ldrd	r2, r1, [sp]
 802b79a:	4630      	mov	r0, r6
 802b79c:	e7d4      	b.n	802b748 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 802b79e:	4630      	mov	r0, r6
 802b7a0:	f7ff fd3a 	bl	802b218 <_ZN8touchgfx10Rasterizer6lineToEii>
 802b7a4:	e7f7      	b.n	802b796 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 802b7a6:	461d      	mov	r5, r3
 802b7a8:	e7d0      	b.n	802b74c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

0802b7ac <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>:
 802b7ac:	b538      	push	{r3, r4, r5, lr}
 802b7ae:	ed2d 8b10 	vpush	{d8-d15}
 802b7b2:	eef6 ba00 	vmov.f32	s23, #96	@ 0x3f000000  0.5
 802b7b6:	4605      	mov	r5, r0
 802b7b8:	eeb0 ca40 	vmov.f32	s24, s0
 802b7bc:	eef0 ca60 	vmov.f32	s25, s1
 802b7c0:	eeb0 da41 	vmov.f32	s26, s2
 802b7c4:	eef0 da61 	vmov.f32	s27, s3
 802b7c8:	eeb0 ea42 	vmov.f32	s28, s4
 802b7cc:	eef0 ea62 	vmov.f32	s29, s5
 802b7d0:	460c      	mov	r4, r1
 802b7d2:	eef0 aa6b 	vmov.f32	s21, s23
 802b7d6:	ed9f ba52 	vldr	s22, [pc, #328]	@ 802b920 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x174>
 802b7da:	2c08      	cmp	r4, #8
 802b7dc:	d86e      	bhi.n	802b8bc <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x110>
 802b7de:	ee7e 6a4c 	vsub.f32	s13, s28, s24
 802b7e2:	ee7d 7aee 	vsub.f32	s15, s27, s29
 802b7e6:	ee3d 6a4e 	vsub.f32	s12, s26, s28
 802b7ea:	ee3e 7aec 	vsub.f32	s14, s29, s25
 802b7ee:	ee66 7ae7 	vnmul.f32	s15, s13, s15
 802b7f2:	eee6 7a07 	vfma.f32	s15, s12, s14
 802b7f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 802b7fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b7fe:	ee3c fa0d 	vadd.f32	s30, s24, s26
 802b802:	bf48      	it	mi
 802b804:	eef1 7a67 	vnegmi.f32	s15, s15
 802b808:	ee7c faad 	vadd.f32	s31, s25, s27
 802b80c:	ee7d 9a0e 	vadd.f32	s19, s26, s28
 802b810:	ee3d aaae 	vadd.f32	s20, s27, s29
 802b814:	ee2f fa2b 	vmul.f32	s30, s30, s23
 802b818:	ee6f faab 	vmul.f32	s31, s31, s23
 802b81c:	ee69 9aab 	vmul.f32	s19, s19, s23
 802b820:	ee2a aa2b 	vmul.f32	s20, s20, s23
 802b824:	eef4 7acb 	vcmpe.f32	s15, s22
 802b828:	ee7f 8a29 	vadd.f32	s17, s30, s19
 802b82c:	ee3f 9a8a 	vadd.f32	s18, s31, s20
 802b830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b834:	ee68 8aab 	vmul.f32	s17, s17, s23
 802b838:	ee29 9a2b 	vmul.f32	s18, s18, s23
 802b83c:	eeb5 6a00 	vmov.f32	s12, #80	@ 0x3e800000  0.250
 802b840:	dd3f      	ble.n	802b8c2 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x116>
 802b842:	ee27 7a07 	vmul.f32	s14, s14, s14
 802b846:	eea6 7aa6 	vfma.f32	s14, s13, s13
 802b84a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 802b84e:	ee27 7a06 	vmul.f32	s14, s14, s12
 802b852:	eef4 7ac7 	vcmpe.f32	s15, s14
 802b856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b85a:	d847      	bhi.n	802b8ec <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 802b85c:	ee7e 0a4d 	vsub.f32	s1, s28, s26
 802b860:	ee3e 0aed 	vsub.f32	s0, s29, s27
 802b864:	f000 fa37 	bl	802bcd6 <atan2f>
 802b868:	ee7d 0a4c 	vsub.f32	s1, s26, s24
 802b86c:	eeb0 8a40 	vmov.f32	s16, s0
 802b870:	ee3d 0aec 	vsub.f32	s0, s27, s25
 802b874:	f000 fa2f 	bl	802bcd6 <atan2f>
 802b878:	ee38 0a40 	vsub.f32	s0, s16, s0
 802b87c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802b880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b884:	eddf 7a27 	vldr	s15, [pc, #156]	@ 802b924 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x178>
 802b888:	bf48      	it	mi
 802b88a:	eeb1 0a40 	vnegmi.f32	s0, s0
 802b88e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802b892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b896:	bfa4      	itt	ge
 802b898:	eddf 7a23 	vldrge	s15, [pc, #140]	@ 802b928 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x17c>
 802b89c:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 802b8a0:	eddf 7a22 	vldr	s15, [pc, #136]	@ 802b92c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x180>
 802b8a4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802b8a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b8ac:	d51e      	bpl.n	802b8ec <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 802b8ae:	eef0 0a49 	vmov.f32	s1, s18
 802b8b2:	eeb0 0a68 	vmov.f32	s0, s17
 802b8b6:	4628      	mov	r0, r5
 802b8b8:	f7eb fa3c 	bl	8016d34 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 802b8bc:	ecbd 8b10 	vpop	{d8-d15}
 802b8c0:	bd38      	pop	{r3, r4, r5, pc}
 802b8c2:	ee7c 7a0e 	vadd.f32	s15, s24, s28
 802b8c6:	eeb0 7a68 	vmov.f32	s14, s17
 802b8ca:	eef0 6a49 	vmov.f32	s13, s18
 802b8ce:	eea7 7aea 	vfms.f32	s14, s15, s21
 802b8d2:	ee7c 7aae 	vadd.f32	s15, s25, s29
 802b8d6:	eee7 6aea 	vfms.f32	s13, s15, s21
 802b8da:	ee66 7aa6 	vmul.f32	s15, s13, s13
 802b8de:	eee7 7a07 	vfma.f32	s15, s14, s14
 802b8e2:	eef4 7ac6 	vcmpe.f32	s15, s12
 802b8e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b8ea:	d9e0      	bls.n	802b8ae <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x102>
 802b8ec:	3401      	adds	r4, #1
 802b8ee:	eef0 0a6c 	vmov.f32	s1, s25
 802b8f2:	eeb0 0a4c 	vmov.f32	s0, s24
 802b8f6:	4621      	mov	r1, r4
 802b8f8:	eef0 2a49 	vmov.f32	s5, s18
 802b8fc:	eeb0 2a68 	vmov.f32	s4, s17
 802b900:	eef0 1a6f 	vmov.f32	s3, s31
 802b904:	eeb0 1a4f 	vmov.f32	s2, s30
 802b908:	4628      	mov	r0, r5
 802b90a:	f7ff ff4f 	bl	802b7ac <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 802b90e:	eef0 da4a 	vmov.f32	s27, s20
 802b912:	eeb0 da69 	vmov.f32	s26, s19
 802b916:	eef0 ca49 	vmov.f32	s25, s18
 802b91a:	eeb0 ca68 	vmov.f32	s24, s17
 802b91e:	e75c      	b.n	802b7da <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x2e>
 802b920:	2edbe6ff 	.word	0x2edbe6ff
 802b924:	40490fdb 	.word	0x40490fdb
 802b928:	40c90fdb 	.word	0x40c90fdb
 802b92c:	3dcccccd 	.word	0x3dcccccd

0802b930 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>:
 802b930:	b530      	push	{r4, r5, lr}
 802b932:	ed2d 8b10 	vpush	{d8-d15}
 802b936:	4604      	mov	r4, r0
 802b938:	eef0 8a40 	vmov.f32	s17, s0
 802b93c:	eef0 9a60 	vmov.f32	s19, s1
 802b940:	eef0 fa41 	vmov.f32	s31, s2
 802b944:	eeb0 fa61 	vmov.f32	s30, s3
 802b948:	eef0 ba42 	vmov.f32	s23, s4
 802b94c:	eeb0 ca62 	vmov.f32	s24, s5
 802b950:	eef0 aa43 	vmov.f32	s21, s6
 802b954:	eeb0 ba63 	vmov.f32	s22, s7
 802b958:	460d      	mov	r5, r1
 802b95a:	b085      	sub	sp, #20
 802b95c:	2d08      	cmp	r5, #8
 802b95e:	f200 8113 	bhi.w	802bb88 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x258>
 802b962:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 802b966:	ee38 daaf 	vadd.f32	s26, s17, s31
 802b96a:	ee3b 6aaa 	vadd.f32	s12, s23, s21
 802b96e:	ee7f 6aab 	vadd.f32	s13, s31, s23
 802b972:	ee26 6a27 	vmul.f32	s12, s12, s15
 802b976:	ee2d da27 	vmul.f32	s26, s26, s15
 802b97a:	ed8d 6a01 	vstr	s12, [sp, #4]
 802b97e:	ee7c ca0b 	vadd.f32	s25, s24, s22
 802b982:	eeb0 ea4d 	vmov.f32	s28, s26
 802b986:	eea6 6aa7 	vfma.f32	s12, s13, s15
 802b98a:	eea6 eaa7 	vfma.f32	s28, s13, s15
 802b98e:	ee79 da8f 	vadd.f32	s27, s19, s30
 802b992:	ee66 6a27 	vmul.f32	s13, s12, s15
 802b996:	ee6c caa7 	vmul.f32	s25, s25, s15
 802b99a:	ee3f 7a0c 	vadd.f32	s14, s30, s24
 802b99e:	edcd 6a03 	vstr	s13, [sp, #12]
 802b9a2:	ee6d daa7 	vmul.f32	s27, s27, s15
 802b9a6:	eef0 6a6c 	vmov.f32	s13, s25
 802b9aa:	eef0 ea6d 	vmov.f32	s29, s27
 802b9ae:	eee7 6a27 	vfma.f32	s13, s14, s15
 802b9b2:	eee7 ea27 	vfma.f32	s29, s14, s15
 802b9b6:	ee26 7aa7 	vmul.f32	s14, s13, s15
 802b9ba:	ee2e ea27 	vmul.f32	s28, s28, s15
 802b9be:	ed8d 7a02 	vstr	s14, [sp, #8]
 802b9c2:	ed9d 7a03 	vldr	s14, [sp, #12]
 802b9c6:	ee6e eaa7 	vmul.f32	s29, s29, s15
 802b9ca:	ee3e 9a07 	vadd.f32	s18, s28, s14
 802b9ce:	ed9d 7a02 	vldr	s14, [sp, #8]
 802b9d2:	ee3e aa87 	vadd.f32	s20, s29, s14
 802b9d6:	ee29 9a27 	vmul.f32	s18, s18, s15
 802b9da:	ee2a aa27 	vmul.f32	s20, s20, s15
 802b9de:	eef0 6a67 	vmov.f32	s13, s15
 802b9e2:	2d00      	cmp	r5, #0
 802b9e4:	f000 810b 	beq.w	802bbfe <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802b9e8:	ee7a 5ae8 	vsub.f32	s11, s21, s17
 802b9ec:	ee3f 7a4b 	vsub.f32	s14, s30, s22
 802b9f0:	ee7b 7a69 	vsub.f32	s15, s22, s19
 802b9f4:	ee3f 6aea 	vsub.f32	s12, s31, s21
 802b9f8:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 802b9fc:	eea6 7a27 	vfma.f32	s14, s12, s15
 802ba00:	ee3c 6a4b 	vsub.f32	s12, s24, s22
 802ba04:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 802ba08:	ee3b 5aea 	vsub.f32	s10, s23, s21
 802ba0c:	ee25 6ac6 	vnmul.f32	s12, s11, s12
 802ba10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802ba14:	eea5 6a27 	vfma.f32	s12, s10, s15
 802ba18:	bf48      	it	mi
 802ba1a:	eeb1 7a47 	vnegmi.f32	s14, s14
 802ba1e:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 802ba22:	eddf 4a88 	vldr	s9, [pc, #544]	@ 802bc44 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 802ba26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802ba2a:	eeb4 7ae4 	vcmpe.f32	s14, s9
 802ba2e:	bf48      	it	mi
 802ba30:	eeb1 6a46 	vnegmi.f32	s12, s12
 802ba34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802ba38:	eeb5 5a00 	vmov.f32	s10, #80	@ 0x3e800000  0.250
 802ba3c:	f340 80a8 	ble.w	802bb90 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x260>
 802ba40:	eeb4 6ae4 	vcmpe.f32	s12, s9
 802ba44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802ba48:	dd5a      	ble.n	802bb00 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1d0>
 802ba4a:	ee65 5aa5 	vmul.f32	s11, s11, s11
 802ba4e:	ee37 7a06 	vadd.f32	s14, s14, s12
 802ba52:	eee7 5aa7 	vfma.f32	s11, s15, s15
 802ba56:	ee27 7a07 	vmul.f32	s14, s14, s14
 802ba5a:	ee65 7a85 	vmul.f32	s15, s11, s10
 802ba5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802ba62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802ba66:	f200 80ca 	bhi.w	802bbfe <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802ba6a:	ee7b 0aef 	vsub.f32	s1, s23, s31
 802ba6e:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 802ba72:	f000 f930 	bl	802bcd6 <atan2f>
 802ba76:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 802ba7a:	eeb0 8a40 	vmov.f32	s16, s0
 802ba7e:	ee3f 0a69 	vsub.f32	s0, s30, s19
 802ba82:	f000 f928 	bl	802bcd6 <atan2f>
 802ba86:	ee38 fa40 	vsub.f32	s30, s16, s0
 802ba8a:	eeb5 fac0 	vcmpe.f32	s30, #0.0
 802ba8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802ba92:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 802ba96:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 802ba9a:	bf48      	it	mi
 802ba9c:	eeb1 fa4f 	vnegmi.f32	s30, s30
 802baa0:	f000 f919 	bl	802bcd6 <atan2f>
 802baa4:	ee30 0a48 	vsub.f32	s0, s0, s16
 802baa8:	eddf 7a67 	vldr	s15, [pc, #412]	@ 802bc48 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 802baac:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802bab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802bab4:	eeb4 fae7 	vcmpe.f32	s30, s15
 802bab8:	bf48      	it	mi
 802baba:	eeb1 0a40 	vnegmi.f32	s0, s0
 802babe:	eddf 7a62 	vldr	s15, [pc, #392]	@ 802bc48 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 802bac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802bac6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802baca:	bfa4      	itt	ge
 802bacc:	ed9f 7a5f 	vldrge	s14, [pc, #380]	@ 802bc4c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 802bad0:	ee37 fa4f 	vsubge.f32	s30, s14, s30
 802bad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802bad8:	bfa4      	itt	ge
 802bada:	ed9f 7a5c 	vldrge	s14, [pc, #368]	@ 802bc4c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 802bade:	ee37 0a40 	vsubge.f32	s0, s14, s0
 802bae2:	eddf 7a5b 	vldr	s15, [pc, #364]	@ 802bc50 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 802bae6:	ee3f 0a00 	vadd.f32	s0, s30, s0
 802baea:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802baee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802baf2:	f140 8084 	bpl.w	802bbfe <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802baf6:	eef0 0a4a 	vmov.f32	s1, s20
 802bafa:	eeb0 0a49 	vmov.f32	s0, s18
 802bafe:	e040      	b.n	802bb82 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x252>
 802bb00:	ee67 7aa7 	vmul.f32	s15, s15, s15
 802bb04:	eee5 7aa5 	vfma.f32	s15, s11, s11
 802bb08:	ee27 7a07 	vmul.f32	s14, s14, s14
 802bb0c:	ee67 7a85 	vmul.f32	s15, s15, s10
 802bb10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802bb14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802bb18:	d871      	bhi.n	802bbfe <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802bb1a:	ee7b 0aef 	vsub.f32	s1, s23, s31
 802bb1e:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 802bb22:	f000 f8d8 	bl	802bcd6 <atan2f>
 802bb26:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 802bb2a:	eeb0 8a40 	vmov.f32	s16, s0
 802bb2e:	ee3f 0a69 	vsub.f32	s0, s30, s19
 802bb32:	f000 f8d0 	bl	802bcd6 <atan2f>
 802bb36:	ee38 0a40 	vsub.f32	s0, s16, s0
 802bb3a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802bb3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802bb42:	eddf 7a41 	vldr	s15, [pc, #260]	@ 802bc48 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 802bb46:	bf48      	it	mi
 802bb48:	eeb1 0a40 	vnegmi.f32	s0, s0
 802bb4c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802bb50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802bb54:	bfa4      	itt	ge
 802bb56:	eddf 7a3d 	vldrge	s15, [pc, #244]	@ 802bc4c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 802bb5a:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 802bb5e:	eddf 7a3c 	vldr	s15, [pc, #240]	@ 802bc50 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 802bb62:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802bb66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802bb6a:	d548      	bpl.n	802bbfe <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802bb6c:	eef0 0a4f 	vmov.f32	s1, s30
 802bb70:	eeb0 0a6f 	vmov.f32	s0, s31
 802bb74:	4620      	mov	r0, r4
 802bb76:	f7eb f8dd 	bl	8016d34 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 802bb7a:	eef0 0a4c 	vmov.f32	s1, s24
 802bb7e:	eeb0 0a6b 	vmov.f32	s0, s23
 802bb82:	4620      	mov	r0, r4
 802bb84:	f7eb f8d6 	bl	8016d34 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 802bb88:	b005      	add	sp, #20
 802bb8a:	ecbd 8b10 	vpop	{d8-d15}
 802bb8e:	bd30      	pop	{r4, r5, pc}
 802bb90:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 802bc44 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 802bb94:	eeb4 6ac7 	vcmpe.f32	s12, s14
 802bb98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802bb9c:	dd19      	ble.n	802bbd2 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2a2>
 802bb9e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 802bba2:	eee5 7aa5 	vfma.f32	s15, s11, s11
 802bba6:	ee26 7a06 	vmul.f32	s14, s12, s12
 802bbaa:	ee67 7a85 	vmul.f32	s15, s15, s10
 802bbae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802bbb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802bbb6:	d822      	bhi.n	802bbfe <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802bbb8:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 802bbbc:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 802bbc0:	f000 f889 	bl	802bcd6 <atan2f>
 802bbc4:	ee7b 0aef 	vsub.f32	s1, s23, s31
 802bbc8:	eeb0 8a40 	vmov.f32	s16, s0
 802bbcc:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 802bbd0:	e7af      	b.n	802bb32 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x202>
 802bbd2:	ee78 7aaa 	vadd.f32	s15, s17, s21
 802bbd6:	eeb0 7a49 	vmov.f32	s14, s18
 802bbda:	eeb0 6a4a 	vmov.f32	s12, s20
 802bbde:	eea7 7ae6 	vfms.f32	s14, s15, s13
 802bbe2:	ee79 7a8b 	vadd.f32	s15, s19, s22
 802bbe6:	eea7 6ae6 	vfms.f32	s12, s15, s13
 802bbea:	ee66 7a06 	vmul.f32	s15, s12, s12
 802bbee:	eee7 7a07 	vfma.f32	s15, s14, s14
 802bbf2:	eef4 7ac5 	vcmpe.f32	s15, s10
 802bbf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802bbfa:	f67f af7c 	bls.w	802baf6 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1c6>
 802bbfe:	3501      	adds	r5, #1
 802bc00:	eef0 0a69 	vmov.f32	s1, s19
 802bc04:	eeb0 0a68 	vmov.f32	s0, s17
 802bc08:	4629      	mov	r1, r5
 802bc0a:	eef0 3a4a 	vmov.f32	s7, s20
 802bc0e:	eeb0 3a49 	vmov.f32	s6, s18
 802bc12:	eef0 2a6e 	vmov.f32	s5, s29
 802bc16:	eeb0 2a4e 	vmov.f32	s4, s28
 802bc1a:	eef0 1a6d 	vmov.f32	s3, s27
 802bc1e:	eeb0 1a4d 	vmov.f32	s2, s26
 802bc22:	4620      	mov	r0, r4
 802bc24:	f7ff fe84 	bl	802b930 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 802bc28:	eeb0 ca6c 	vmov.f32	s24, s25
 802bc2c:	eddd ba01 	vldr	s23, [sp, #4]
 802bc30:	ed9d fa02 	vldr	s30, [sp, #8]
 802bc34:	eddd fa03 	vldr	s31, [sp, #12]
 802bc38:	eef0 9a4a 	vmov.f32	s19, s20
 802bc3c:	eef0 8a49 	vmov.f32	s17, s18
 802bc40:	e68c      	b.n	802b95c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2c>
 802bc42:	bf00      	nop
 802bc44:	2edbe6ff 	.word	0x2edbe6ff
 802bc48:	40490fdb 	.word	0x40490fdb
 802bc4c:	40c90fdb 	.word	0x40c90fdb
 802bc50:	3dcccccd 	.word	0x3dcccccd

0802bc54 <_ZN8touchgfx6CanvasD1Ev>:
 802bc54:	b510      	push	{r4, lr}
 802bc56:	4604      	mov	r4, r0
 802bc58:	4b03      	ldr	r3, [pc, #12]	@ (802bc68 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 802bc5a:	f840 3b14 	str.w	r3, [r0], #20
 802bc5e:	f7eb fec3 	bl	80179e8 <_ZN8touchgfx7OutlineD1Ev>
 802bc62:	4620      	mov	r0, r4
 802bc64:	bd10      	pop	{r4, pc}
 802bc66:	bf00      	nop
 802bc68:	0802ff18 	.word	0x0802ff18

0802bc6c <_ZN8touchgfx6CanvasD0Ev>:
 802bc6c:	b510      	push	{r4, lr}
 802bc6e:	4604      	mov	r4, r0
 802bc70:	f7ff fff0 	bl	802bc54 <_ZN8touchgfx6CanvasD1Ev>
 802bc74:	4620      	mov	r0, r4
 802bc76:	2174      	movs	r1, #116	@ 0x74
 802bc78:	f000 f807 	bl	802bc8a <_ZdlPvj>
 802bc7c:	4620      	mov	r0, r4
 802bc7e:	bd10      	pop	{r4, pc}

0802bc80 <__aeabi_atexit>:
 802bc80:	460b      	mov	r3, r1
 802bc82:	4601      	mov	r1, r0
 802bc84:	4618      	mov	r0, r3
 802bc86:	f000 bfd7 	b.w	802cc38 <__cxa_atexit>

0802bc8a <_ZdlPvj>:
 802bc8a:	f000 b812 	b.w	802bcb2 <_ZdlPv>

0802bc8e <__cxa_guard_acquire>:
 802bc8e:	6802      	ldr	r2, [r0, #0]
 802bc90:	4603      	mov	r3, r0
 802bc92:	07d2      	lsls	r2, r2, #31
 802bc94:	d405      	bmi.n	802bca2 <__cxa_guard_acquire+0x14>
 802bc96:	7842      	ldrb	r2, [r0, #1]
 802bc98:	b102      	cbz	r2, 802bc9c <__cxa_guard_acquire+0xe>
 802bc9a:	deff      	udf	#255	@ 0xff
 802bc9c:	2001      	movs	r0, #1
 802bc9e:	7058      	strb	r0, [r3, #1]
 802bca0:	4770      	bx	lr
 802bca2:	2000      	movs	r0, #0
 802bca4:	4770      	bx	lr

0802bca6 <__cxa_guard_release>:
 802bca6:	2301      	movs	r3, #1
 802bca8:	6003      	str	r3, [r0, #0]
 802bcaa:	4770      	bx	lr

0802bcac <__cxa_pure_virtual>:
 802bcac:	b508      	push	{r3, lr}
 802bcae:	f000 f80d 	bl	802bccc <_ZSt9terminatev>

0802bcb2 <_ZdlPv>:
 802bcb2:	f000 bf0b 	b.w	802cacc <free>

0802bcb6 <_ZN10__cxxabiv111__terminateEPFvvE>:
 802bcb6:	b508      	push	{r3, lr}
 802bcb8:	4780      	blx	r0
 802bcba:	f000 fed4 	bl	802ca66 <abort>
	...

0802bcc0 <_ZSt13get_terminatev>:
 802bcc0:	4b01      	ldr	r3, [pc, #4]	@ (802bcc8 <_ZSt13get_terminatev+0x8>)
 802bcc2:	e8d3 0faf 	lda	r0, [r3]
 802bcc6:	4770      	bx	lr
 802bcc8:	20000098 	.word	0x20000098

0802bccc <_ZSt9terminatev>:
 802bccc:	b508      	push	{r3, lr}
 802bcce:	f7ff fff7 	bl	802bcc0 <_ZSt13get_terminatev>
 802bcd2:	f7ff fff0 	bl	802bcb6 <_ZN10__cxxabiv111__terminateEPFvvE>

0802bcd6 <atan2f>:
 802bcd6:	f000 b94d 	b.w	802bf74 <__ieee754_atan2f>
	...

0802bcdc <sqrtf>:
 802bcdc:	b508      	push	{r3, lr}
 802bcde:	ed2d 8b02 	vpush	{d8}
 802bce2:	eeb0 8a40 	vmov.f32	s16, s0
 802bce6:	f000 f8a1 	bl	802be2c <__ieee754_sqrtf>
 802bcea:	eeb4 8a48 	vcmp.f32	s16, s16
 802bcee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802bcf2:	d60c      	bvs.n	802bd0e <sqrtf+0x32>
 802bcf4:	eddf 8a07 	vldr	s17, [pc, #28]	@ 802bd14 <sqrtf+0x38>
 802bcf8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 802bcfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802bd00:	d505      	bpl.n	802bd0e <sqrtf+0x32>
 802bd02:	f001 fa65 	bl	802d1d0 <__errno>
 802bd06:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 802bd0a:	2321      	movs	r3, #33	@ 0x21
 802bd0c:	6003      	str	r3, [r0, #0]
 802bd0e:	ecbd 8b02 	vpop	{d8}
 802bd12:	bd08      	pop	{r3, pc}
 802bd14:	00000000 	.word	0x00000000

0802bd18 <cosf>:
 802bd18:	ee10 3a10 	vmov	r3, s0
 802bd1c:	b507      	push	{r0, r1, r2, lr}
 802bd1e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802bd22:	4a1d      	ldr	r2, [pc, #116]	@ (802bd98 <cosf+0x80>)
 802bd24:	4293      	cmp	r3, r2
 802bd26:	d806      	bhi.n	802bd36 <cosf+0x1e>
 802bd28:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 802bd9c <cosf+0x84>
 802bd2c:	b003      	add	sp, #12
 802bd2e:	f85d eb04 	ldr.w	lr, [sp], #4
 802bd32:	f000 b87f 	b.w	802be34 <__kernel_cosf>
 802bd36:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802bd3a:	d304      	bcc.n	802bd46 <cosf+0x2e>
 802bd3c:	ee30 0a40 	vsub.f32	s0, s0, s0
 802bd40:	b003      	add	sp, #12
 802bd42:	f85d fb04 	ldr.w	pc, [sp], #4
 802bd46:	4668      	mov	r0, sp
 802bd48:	f000 f9b2 	bl	802c0b0 <__ieee754_rem_pio2f>
 802bd4c:	f000 0003 	and.w	r0, r0, #3
 802bd50:	2801      	cmp	r0, #1
 802bd52:	d009      	beq.n	802bd68 <cosf+0x50>
 802bd54:	2802      	cmp	r0, #2
 802bd56:	d010      	beq.n	802bd7a <cosf+0x62>
 802bd58:	b9b0      	cbnz	r0, 802bd88 <cosf+0x70>
 802bd5a:	eddd 0a01 	vldr	s1, [sp, #4]
 802bd5e:	ed9d 0a00 	vldr	s0, [sp]
 802bd62:	f000 f867 	bl	802be34 <__kernel_cosf>
 802bd66:	e7eb      	b.n	802bd40 <cosf+0x28>
 802bd68:	eddd 0a01 	vldr	s1, [sp, #4]
 802bd6c:	ed9d 0a00 	vldr	s0, [sp]
 802bd70:	f000 f8b8 	bl	802bee4 <__kernel_sinf>
 802bd74:	eeb1 0a40 	vneg.f32	s0, s0
 802bd78:	e7e2      	b.n	802bd40 <cosf+0x28>
 802bd7a:	eddd 0a01 	vldr	s1, [sp, #4]
 802bd7e:	ed9d 0a00 	vldr	s0, [sp]
 802bd82:	f000 f857 	bl	802be34 <__kernel_cosf>
 802bd86:	e7f5      	b.n	802bd74 <cosf+0x5c>
 802bd88:	2001      	movs	r0, #1
 802bd8a:	eddd 0a01 	vldr	s1, [sp, #4]
 802bd8e:	ed9d 0a00 	vldr	s0, [sp]
 802bd92:	f000 f8a7 	bl	802bee4 <__kernel_sinf>
 802bd96:	e7d3      	b.n	802bd40 <cosf+0x28>
 802bd98:	3f490fd8 	.word	0x3f490fd8
 802bd9c:	00000000 	.word	0x00000000

0802bda0 <sinf>:
 802bda0:	ee10 3a10 	vmov	r3, s0
 802bda4:	b507      	push	{r0, r1, r2, lr}
 802bda6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802bdaa:	4a1e      	ldr	r2, [pc, #120]	@ (802be24 <sinf+0x84>)
 802bdac:	4293      	cmp	r3, r2
 802bdae:	d807      	bhi.n	802bdc0 <sinf+0x20>
 802bdb0:	2000      	movs	r0, #0
 802bdb2:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 802be28 <sinf+0x88>
 802bdb6:	b003      	add	sp, #12
 802bdb8:	f85d eb04 	ldr.w	lr, [sp], #4
 802bdbc:	f000 b892 	b.w	802bee4 <__kernel_sinf>
 802bdc0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802bdc4:	d304      	bcc.n	802bdd0 <sinf+0x30>
 802bdc6:	ee30 0a40 	vsub.f32	s0, s0, s0
 802bdca:	b003      	add	sp, #12
 802bdcc:	f85d fb04 	ldr.w	pc, [sp], #4
 802bdd0:	4668      	mov	r0, sp
 802bdd2:	f000 f96d 	bl	802c0b0 <__ieee754_rem_pio2f>
 802bdd6:	f000 0003 	and.w	r0, r0, #3
 802bdda:	2801      	cmp	r0, #1
 802bddc:	d00a      	beq.n	802bdf4 <sinf+0x54>
 802bdde:	2802      	cmp	r0, #2
 802bde0:	d00f      	beq.n	802be02 <sinf+0x62>
 802bde2:	b9c0      	cbnz	r0, 802be16 <sinf+0x76>
 802bde4:	2001      	movs	r0, #1
 802bde6:	eddd 0a01 	vldr	s1, [sp, #4]
 802bdea:	ed9d 0a00 	vldr	s0, [sp]
 802bdee:	f000 f879 	bl	802bee4 <__kernel_sinf>
 802bdf2:	e7ea      	b.n	802bdca <sinf+0x2a>
 802bdf4:	eddd 0a01 	vldr	s1, [sp, #4]
 802bdf8:	ed9d 0a00 	vldr	s0, [sp]
 802bdfc:	f000 f81a 	bl	802be34 <__kernel_cosf>
 802be00:	e7e3      	b.n	802bdca <sinf+0x2a>
 802be02:	2001      	movs	r0, #1
 802be04:	eddd 0a01 	vldr	s1, [sp, #4]
 802be08:	ed9d 0a00 	vldr	s0, [sp]
 802be0c:	f000 f86a 	bl	802bee4 <__kernel_sinf>
 802be10:	eeb1 0a40 	vneg.f32	s0, s0
 802be14:	e7d9      	b.n	802bdca <sinf+0x2a>
 802be16:	eddd 0a01 	vldr	s1, [sp, #4]
 802be1a:	ed9d 0a00 	vldr	s0, [sp]
 802be1e:	f000 f809 	bl	802be34 <__kernel_cosf>
 802be22:	e7f5      	b.n	802be10 <sinf+0x70>
 802be24:	3f490fd8 	.word	0x3f490fd8
 802be28:	00000000 	.word	0x00000000

0802be2c <__ieee754_sqrtf>:
 802be2c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 802be30:	4770      	bx	lr
	...

0802be34 <__kernel_cosf>:
 802be34:	ee10 3a10 	vmov	r3, s0
 802be38:	eef0 6a40 	vmov.f32	s13, s0
 802be3c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 802be40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802be44:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 802be48:	d204      	bcs.n	802be54 <__kernel_cosf+0x20>
 802be4a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 802be4e:	ee17 2a90 	vmov	r2, s15
 802be52:	b342      	cbz	r2, 802bea6 <__kernel_cosf+0x72>
 802be54:	ee26 7aa6 	vmul.f32	s14, s13, s13
 802be58:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 802bec4 <__kernel_cosf+0x90>
 802be5c:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 802bec8 <__kernel_cosf+0x94>
 802be60:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 802be64:	4a19      	ldr	r2, [pc, #100]	@ (802becc <__kernel_cosf+0x98>)
 802be66:	eea7 6a27 	vfma.f32	s12, s14, s15
 802be6a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 802bed0 <__kernel_cosf+0x9c>
 802be6e:	4293      	cmp	r3, r2
 802be70:	eee6 7a07 	vfma.f32	s15, s12, s14
 802be74:	ed9f 6a17 	vldr	s12, [pc, #92]	@ 802bed4 <__kernel_cosf+0xa0>
 802be78:	eea7 6a87 	vfma.f32	s12, s15, s14
 802be7c:	eddf 7a16 	vldr	s15, [pc, #88]	@ 802bed8 <__kernel_cosf+0xa4>
 802be80:	eee6 7a07 	vfma.f32	s15, s12, s14
 802be84:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 802bedc <__kernel_cosf+0xa8>
 802be88:	eea7 6a87 	vfma.f32	s12, s15, s14
 802be8c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 802be90:	ee67 7a27 	vmul.f32	s15, s14, s15
 802be94:	ee26 6a07 	vmul.f32	s12, s12, s14
 802be98:	eee7 0a06 	vfma.f32	s1, s14, s12
 802be9c:	d804      	bhi.n	802bea8 <__kernel_cosf+0x74>
 802be9e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 802bea2:	ee30 0a67 	vsub.f32	s0, s0, s15
 802bea6:	4770      	bx	lr
 802bea8:	4a0d      	ldr	r2, [pc, #52]	@ (802bee0 <__kernel_cosf+0xac>)
 802beaa:	4293      	cmp	r3, r2
 802beac:	bf96      	itet	ls
 802beae:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 802beb2:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 802beb6:	ee07 3a10 	vmovls	s14, r3
 802beba:	ee30 0a47 	vsub.f32	s0, s0, s14
 802bebe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802bec2:	e7ec      	b.n	802be9e <__kernel_cosf+0x6a>
 802bec4:	ad47d74e 	.word	0xad47d74e
 802bec8:	310f74f6 	.word	0x310f74f6
 802becc:	3e999999 	.word	0x3e999999
 802bed0:	b493f27c 	.word	0xb493f27c
 802bed4:	37d00d01 	.word	0x37d00d01
 802bed8:	bab60b61 	.word	0xbab60b61
 802bedc:	3d2aaaab 	.word	0x3d2aaaab
 802bee0:	3f480000 	.word	0x3f480000

0802bee4 <__kernel_sinf>:
 802bee4:	ee10 3a10 	vmov	r3, s0
 802bee8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802beec:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 802bef0:	d204      	bcs.n	802befc <__kernel_sinf+0x18>
 802bef2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802bef6:	ee17 3a90 	vmov	r3, s15
 802befa:	b35b      	cbz	r3, 802bf54 <__kernel_sinf+0x70>
 802befc:	ee20 7a00 	vmul.f32	s14, s0, s0
 802bf00:	eddf 7a15 	vldr	s15, [pc, #84]	@ 802bf58 <__kernel_sinf+0x74>
 802bf04:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 802bf5c <__kernel_sinf+0x78>
 802bf08:	eea7 6a27 	vfma.f32	s12, s14, s15
 802bf0c:	eddf 7a14 	vldr	s15, [pc, #80]	@ 802bf60 <__kernel_sinf+0x7c>
 802bf10:	ee60 6a07 	vmul.f32	s13, s0, s14
 802bf14:	eee6 7a07 	vfma.f32	s15, s12, s14
 802bf18:	ed9f 6a12 	vldr	s12, [pc, #72]	@ 802bf64 <__kernel_sinf+0x80>
 802bf1c:	eea7 6a87 	vfma.f32	s12, s15, s14
 802bf20:	eddf 7a11 	vldr	s15, [pc, #68]	@ 802bf68 <__kernel_sinf+0x84>
 802bf24:	eee6 7a07 	vfma.f32	s15, s12, s14
 802bf28:	b930      	cbnz	r0, 802bf38 <__kernel_sinf+0x54>
 802bf2a:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 802bf6c <__kernel_sinf+0x88>
 802bf2e:	eea7 6a27 	vfma.f32	s12, s14, s15
 802bf32:	eea6 0a26 	vfma.f32	s0, s12, s13
 802bf36:	4770      	bx	lr
 802bf38:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 802bf3c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 802bf40:	eee0 7a86 	vfma.f32	s15, s1, s12
 802bf44:	eed7 0a87 	vfnms.f32	s1, s15, s14
 802bf48:	eddf 7a09 	vldr	s15, [pc, #36]	@ 802bf70 <__kernel_sinf+0x8c>
 802bf4c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 802bf50:	ee30 0a60 	vsub.f32	s0, s0, s1
 802bf54:	4770      	bx	lr
 802bf56:	bf00      	nop
 802bf58:	2f2ec9d3 	.word	0x2f2ec9d3
 802bf5c:	b2d72f34 	.word	0xb2d72f34
 802bf60:	3638ef1b 	.word	0x3638ef1b
 802bf64:	b9500d01 	.word	0xb9500d01
 802bf68:	3c088889 	.word	0x3c088889
 802bf6c:	be2aaaab 	.word	0xbe2aaaab
 802bf70:	3e2aaaab 	.word	0x3e2aaaab

0802bf74 <__ieee754_atan2f>:
 802bf74:	ee10 2a90 	vmov	r2, s1
 802bf78:	eef0 7a40 	vmov.f32	s15, s0
 802bf7c:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 802bf80:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 802bf84:	b510      	push	{r4, lr}
 802bf86:	d806      	bhi.n	802bf96 <__ieee754_atan2f+0x22>
 802bf88:	ee10 0a10 	vmov	r0, s0
 802bf8c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 802bf90:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802bf94:	d904      	bls.n	802bfa0 <__ieee754_atan2f+0x2c>
 802bf96:	ee77 7aa0 	vadd.f32	s15, s15, s1
 802bf9a:	eeb0 0a67 	vmov.f32	s0, s15
 802bf9e:	bd10      	pop	{r4, pc}
 802bfa0:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 802bfa4:	d103      	bne.n	802bfae <__ieee754_atan2f+0x3a>
 802bfa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802bfaa:	f000 b9af 	b.w	802c30c <atanf>
 802bfae:	1794      	asrs	r4, r2, #30
 802bfb0:	f004 0402 	and.w	r4, r4, #2
 802bfb4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 802bfb8:	b93b      	cbnz	r3, 802bfca <__ieee754_atan2f+0x56>
 802bfba:	2c02      	cmp	r4, #2
 802bfbc:	d05c      	beq.n	802c078 <__ieee754_atan2f+0x104>
 802bfbe:	2c03      	cmp	r4, #3
 802bfc0:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 802c08c <__ieee754_atan2f+0x118>
 802bfc4:	fe47 7a00 	vseleq.f32	s15, s14, s0
 802bfc8:	e7e7      	b.n	802bf9a <__ieee754_atan2f+0x26>
 802bfca:	b939      	cbnz	r1, 802bfdc <__ieee754_atan2f+0x68>
 802bfcc:	2800      	cmp	r0, #0
 802bfce:	eddf 7a30 	vldr	s15, [pc, #192]	@ 802c090 <__ieee754_atan2f+0x11c>
 802bfd2:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 802c094 <__ieee754_atan2f+0x120>
 802bfd6:	fe67 7a27 	vselge.f32	s15, s14, s15
 802bfda:	e7de      	b.n	802bf9a <__ieee754_atan2f+0x26>
 802bfdc:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 802bfe0:	d110      	bne.n	802c004 <__ieee754_atan2f+0x90>
 802bfe2:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802bfe6:	f104 34ff 	add.w	r4, r4, #4294967295
 802bfea:	d107      	bne.n	802bffc <__ieee754_atan2f+0x88>
 802bfec:	2c02      	cmp	r4, #2
 802bfee:	d846      	bhi.n	802c07e <__ieee754_atan2f+0x10a>
 802bff0:	4b29      	ldr	r3, [pc, #164]	@ (802c098 <__ieee754_atan2f+0x124>)
 802bff2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 802bff6:	edd3 7a00 	vldr	s15, [r3]
 802bffa:	e7ce      	b.n	802bf9a <__ieee754_atan2f+0x26>
 802bffc:	2c02      	cmp	r4, #2
 802bffe:	d841      	bhi.n	802c084 <__ieee754_atan2f+0x110>
 802c000:	4b26      	ldr	r3, [pc, #152]	@ (802c09c <__ieee754_atan2f+0x128>)
 802c002:	e7f6      	b.n	802bff2 <__ieee754_atan2f+0x7e>
 802c004:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802c008:	d0e0      	beq.n	802bfcc <__ieee754_atan2f+0x58>
 802c00a:	1a5b      	subs	r3, r3, r1
 802c00c:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 802c010:	ea4f 51e3 	mov.w	r1, r3, asr #23
 802c014:	da1a      	bge.n	802c04c <__ieee754_atan2f+0xd8>
 802c016:	2a00      	cmp	r2, #0
 802c018:	da01      	bge.n	802c01e <__ieee754_atan2f+0xaa>
 802c01a:	313c      	adds	r1, #60	@ 0x3c
 802c01c:	db19      	blt.n	802c052 <__ieee754_atan2f+0xde>
 802c01e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 802c022:	f000 fa47 	bl	802c4b4 <fabsf>
 802c026:	f000 f971 	bl	802c30c <atanf>
 802c02a:	eef0 7a40 	vmov.f32	s15, s0
 802c02e:	2c01      	cmp	r4, #1
 802c030:	d012      	beq.n	802c058 <__ieee754_atan2f+0xe4>
 802c032:	2c02      	cmp	r4, #2
 802c034:	d017      	beq.n	802c066 <__ieee754_atan2f+0xf2>
 802c036:	2c00      	cmp	r4, #0
 802c038:	d0af      	beq.n	802bf9a <__ieee754_atan2f+0x26>
 802c03a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 802c0a0 <__ieee754_atan2f+0x12c>
 802c03e:	ee77 7a87 	vadd.f32	s15, s15, s14
 802c042:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 802c0a4 <__ieee754_atan2f+0x130>
 802c046:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802c04a:	e7a6      	b.n	802bf9a <__ieee754_atan2f+0x26>
 802c04c:	eddf 7a11 	vldr	s15, [pc, #68]	@ 802c094 <__ieee754_atan2f+0x120>
 802c050:	e7ed      	b.n	802c02e <__ieee754_atan2f+0xba>
 802c052:	eddf 7a15 	vldr	s15, [pc, #84]	@ 802c0a8 <__ieee754_atan2f+0x134>
 802c056:	e7ea      	b.n	802c02e <__ieee754_atan2f+0xba>
 802c058:	ee17 3a90 	vmov	r3, s15
 802c05c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 802c060:	ee07 3a90 	vmov	s15, r3
 802c064:	e799      	b.n	802bf9a <__ieee754_atan2f+0x26>
 802c066:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 802c0a0 <__ieee754_atan2f+0x12c>
 802c06a:	ee77 7a87 	vadd.f32	s15, s15, s14
 802c06e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 802c0a4 <__ieee754_atan2f+0x130>
 802c072:	ee77 7a67 	vsub.f32	s15, s14, s15
 802c076:	e790      	b.n	802bf9a <__ieee754_atan2f+0x26>
 802c078:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 802c0a4 <__ieee754_atan2f+0x130>
 802c07c:	e78d      	b.n	802bf9a <__ieee754_atan2f+0x26>
 802c07e:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 802c0ac <__ieee754_atan2f+0x138>
 802c082:	e78a      	b.n	802bf9a <__ieee754_atan2f+0x26>
 802c084:	eddf 7a08 	vldr	s15, [pc, #32]	@ 802c0a8 <__ieee754_atan2f+0x134>
 802c088:	e787      	b.n	802bf9a <__ieee754_atan2f+0x26>
 802c08a:	bf00      	nop
 802c08c:	c0490fdb 	.word	0xc0490fdb
 802c090:	bfc90fdb 	.word	0xbfc90fdb
 802c094:	3fc90fdb 	.word	0x3fc90fdb
 802c098:	0802ff30 	.word	0x0802ff30
 802c09c:	0802ff24 	.word	0x0802ff24
 802c0a0:	33bbbd2e 	.word	0x33bbbd2e
 802c0a4:	40490fdb 	.word	0x40490fdb
 802c0a8:	00000000 	.word	0x00000000
 802c0ac:	3f490fdb 	.word	0x3f490fdb

0802c0b0 <__ieee754_rem_pio2f>:
 802c0b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 802c0b2:	ee10 6a10 	vmov	r6, s0
 802c0b6:	4b87      	ldr	r3, [pc, #540]	@ (802c2d4 <__ieee754_rem_pio2f+0x224>)
 802c0b8:	b087      	sub	sp, #28
 802c0ba:	4604      	mov	r4, r0
 802c0bc:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 802c0c0:	429d      	cmp	r5, r3
 802c0c2:	d805      	bhi.n	802c0d0 <__ieee754_rem_pio2f+0x20>
 802c0c4:	2300      	movs	r3, #0
 802c0c6:	ed80 0a00 	vstr	s0, [r0]
 802c0ca:	6043      	str	r3, [r0, #4]
 802c0cc:	2000      	movs	r0, #0
 802c0ce:	e022      	b.n	802c116 <__ieee754_rem_pio2f+0x66>
 802c0d0:	4b81      	ldr	r3, [pc, #516]	@ (802c2d8 <__ieee754_rem_pio2f+0x228>)
 802c0d2:	429d      	cmp	r5, r3
 802c0d4:	d83a      	bhi.n	802c14c <__ieee754_rem_pio2f+0x9c>
 802c0d6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 802c0da:	2e00      	cmp	r6, #0
 802c0dc:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 802c2dc <__ieee754_rem_pio2f+0x22c>
 802c0e0:	f023 030f 	bic.w	r3, r3, #15
 802c0e4:	4a7e      	ldr	r2, [pc, #504]	@ (802c2e0 <__ieee754_rem_pio2f+0x230>)
 802c0e6:	dd18      	ble.n	802c11a <__ieee754_rem_pio2f+0x6a>
 802c0e8:	4293      	cmp	r3, r2
 802c0ea:	ee70 7a47 	vsub.f32	s15, s0, s14
 802c0ee:	bf09      	itett	eq
 802c0f0:	ed9f 7a7c 	vldreq	s14, [pc, #496]	@ 802c2e4 <__ieee754_rem_pio2f+0x234>
 802c0f4:	eddf 6a7c 	vldrne	s13, [pc, #496]	@ 802c2e8 <__ieee754_rem_pio2f+0x238>
 802c0f8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 802c0fc:	eddf 6a7b 	vldreq	s13, [pc, #492]	@ 802c2ec <__ieee754_rem_pio2f+0x23c>
 802c100:	ee37 7ae6 	vsub.f32	s14, s15, s13
 802c104:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802c108:	ed80 7a00 	vstr	s14, [r0]
 802c10c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802c110:	edc0 7a01 	vstr	s15, [r0, #4]
 802c114:	2001      	movs	r0, #1
 802c116:	b007      	add	sp, #28
 802c118:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802c11a:	4293      	cmp	r3, r2
 802c11c:	ee70 7a07 	vadd.f32	s15, s0, s14
 802c120:	bf09      	itett	eq
 802c122:	ed9f 7a70 	vldreq	s14, [pc, #448]	@ 802c2e4 <__ieee754_rem_pio2f+0x234>
 802c126:	eddf 6a70 	vldrne	s13, [pc, #448]	@ 802c2e8 <__ieee754_rem_pio2f+0x238>
 802c12a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 802c12e:	eddf 6a6f 	vldreq	s13, [pc, #444]	@ 802c2ec <__ieee754_rem_pio2f+0x23c>
 802c132:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802c136:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802c13a:	ed80 7a00 	vstr	s14, [r0]
 802c13e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802c142:	edc0 7a01 	vstr	s15, [r0, #4]
 802c146:	f04f 30ff 	mov.w	r0, #4294967295
 802c14a:	e7e4      	b.n	802c116 <__ieee754_rem_pio2f+0x66>
 802c14c:	4b68      	ldr	r3, [pc, #416]	@ (802c2f0 <__ieee754_rem_pio2f+0x240>)
 802c14e:	429d      	cmp	r5, r3
 802c150:	d872      	bhi.n	802c238 <__ieee754_rem_pio2f+0x188>
 802c152:	f000 f9af 	bl	802c4b4 <fabsf>
 802c156:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 802c15a:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 802c2f4 <__ieee754_rem_pio2f+0x244>
 802c15e:	eee0 7a07 	vfma.f32	s15, s0, s14
 802c162:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802c166:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802c16a:	ee17 0a90 	vmov	r0, s15
 802c16e:	eddf 7a5b 	vldr	s15, [pc, #364]	@ 802c2dc <__ieee754_rem_pio2f+0x22c>
 802c172:	281f      	cmp	r0, #31
 802c174:	eea7 0a67 	vfms.f32	s0, s14, s15
 802c178:	eddf 7a5b 	vldr	s15, [pc, #364]	@ 802c2e8 <__ieee754_rem_pio2f+0x238>
 802c17c:	eeb1 6a47 	vneg.f32	s12, s14
 802c180:	ee67 7a27 	vmul.f32	s15, s14, s15
 802c184:	ee70 6a67 	vsub.f32	s13, s0, s15
 802c188:	ee16 1a90 	vmov	r1, s13
 802c18c:	dc09      	bgt.n	802c1a2 <__ieee754_rem_pio2f+0xf2>
 802c18e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 802c192:	1e47      	subs	r7, r0, #1
 802c194:	4a58      	ldr	r2, [pc, #352]	@ (802c2f8 <__ieee754_rem_pio2f+0x248>)
 802c196:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 802c19a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 802c19e:	4293      	cmp	r3, r2
 802c1a0:	d106      	bne.n	802c1b0 <__ieee754_rem_pio2f+0x100>
 802c1a2:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 802c1a6:	15eb      	asrs	r3, r5, #23
 802c1a8:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 802c1ac:	2a08      	cmp	r2, #8
 802c1ae:	dc14      	bgt.n	802c1da <__ieee754_rem_pio2f+0x12a>
 802c1b0:	6021      	str	r1, [r4, #0]
 802c1b2:	ed94 7a00 	vldr	s14, [r4]
 802c1b6:	2e00      	cmp	r6, #0
 802c1b8:	ee30 0a47 	vsub.f32	s0, s0, s14
 802c1bc:	ee30 0a67 	vsub.f32	s0, s0, s15
 802c1c0:	ed84 0a01 	vstr	s0, [r4, #4]
 802c1c4:	daa7      	bge.n	802c116 <__ieee754_rem_pio2f+0x66>
 802c1c6:	eeb1 7a47 	vneg.f32	s14, s14
 802c1ca:	eeb1 0a40 	vneg.f32	s0, s0
 802c1ce:	ed84 7a00 	vstr	s14, [r4]
 802c1d2:	ed84 0a01 	vstr	s0, [r4, #4]
 802c1d6:	4240      	negs	r0, r0
 802c1d8:	e79d      	b.n	802c116 <__ieee754_rem_pio2f+0x66>
 802c1da:	eef0 6a40 	vmov.f32	s13, s0
 802c1de:	eddf 5a41 	vldr	s11, [pc, #260]	@ 802c2e4 <__ieee754_rem_pio2f+0x234>
 802c1e2:	eee6 6a25 	vfma.f32	s13, s12, s11
 802c1e6:	ee70 7a66 	vsub.f32	s15, s0, s13
 802c1ea:	eee6 7a25 	vfma.f32	s15, s12, s11
 802c1ee:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 802c2ec <__ieee754_rem_pio2f+0x23c>
 802c1f2:	eed7 7a25 	vfnms.f32	s15, s14, s11
 802c1f6:	ee76 5ae7 	vsub.f32	s11, s13, s15
 802c1fa:	ee15 2a90 	vmov	r2, s11
 802c1fe:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 802c202:	1a5b      	subs	r3, r3, r1
 802c204:	2b19      	cmp	r3, #25
 802c206:	dc04      	bgt.n	802c212 <__ieee754_rem_pio2f+0x162>
 802c208:	eeb0 0a66 	vmov.f32	s0, s13
 802c20c:	edc4 5a00 	vstr	s11, [r4]
 802c210:	e7cf      	b.n	802c1b2 <__ieee754_rem_pio2f+0x102>
 802c212:	eeb0 0a66 	vmov.f32	s0, s13
 802c216:	eddf 5a39 	vldr	s11, [pc, #228]	@ 802c2fc <__ieee754_rem_pio2f+0x24c>
 802c21a:	eea6 0a25 	vfma.f32	s0, s12, s11
 802c21e:	ee76 7ac0 	vsub.f32	s15, s13, s0
 802c222:	eddf 6a37 	vldr	s13, [pc, #220]	@ 802c300 <__ieee754_rem_pio2f+0x250>
 802c226:	eee6 7a25 	vfma.f32	s15, s12, s11
 802c22a:	eed7 7a26 	vfnms.f32	s15, s14, s13
 802c22e:	ee30 7a67 	vsub.f32	s14, s0, s15
 802c232:	ed84 7a00 	vstr	s14, [r4]
 802c236:	e7bc      	b.n	802c1b2 <__ieee754_rem_pio2f+0x102>
 802c238:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 802c23c:	d306      	bcc.n	802c24c <__ieee754_rem_pio2f+0x19c>
 802c23e:	ee70 7a40 	vsub.f32	s15, s0, s0
 802c242:	edc0 7a01 	vstr	s15, [r0, #4]
 802c246:	edc0 7a00 	vstr	s15, [r0]
 802c24a:	e73f      	b.n	802c0cc <__ieee754_rem_pio2f+0x1c>
 802c24c:	15ea      	asrs	r2, r5, #23
 802c24e:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 802c304 <__ieee754_rem_pio2f+0x254>
 802c252:	3a86      	subs	r2, #134	@ 0x86
 802c254:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 802c258:	ee07 3a90 	vmov	s15, r3
 802c25c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802c260:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802c264:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802c268:	ed8d 7a03 	vstr	s14, [sp, #12]
 802c26c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802c270:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802c274:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802c278:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802c27c:	ed8d 7a04 	vstr	s14, [sp, #16]
 802c280:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802c284:	eef5 7a40 	vcmp.f32	s15, #0.0
 802c288:	edcd 7a05 	vstr	s15, [sp, #20]
 802c28c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802c290:	d11e      	bne.n	802c2d0 <__ieee754_rem_pio2f+0x220>
 802c292:	eeb5 7a40 	vcmp.f32	s14, #0.0
 802c296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802c29a:	bf0c      	ite	eq
 802c29c:	2301      	moveq	r3, #1
 802c29e:	2302      	movne	r3, #2
 802c2a0:	4919      	ldr	r1, [pc, #100]	@ (802c308 <__ieee754_rem_pio2f+0x258>)
 802c2a2:	a803      	add	r0, sp, #12
 802c2a4:	9101      	str	r1, [sp, #4]
 802c2a6:	2102      	movs	r1, #2
 802c2a8:	9100      	str	r1, [sp, #0]
 802c2aa:	4621      	mov	r1, r4
 802c2ac:	f000 f96e 	bl	802c58c <__kernel_rem_pio2f>
 802c2b0:	2e00      	cmp	r6, #0
 802c2b2:	f6bf af30 	bge.w	802c116 <__ieee754_rem_pio2f+0x66>
 802c2b6:	edd4 7a00 	vldr	s15, [r4]
 802c2ba:	eef1 7a67 	vneg.f32	s15, s15
 802c2be:	edc4 7a00 	vstr	s15, [r4]
 802c2c2:	edd4 7a01 	vldr	s15, [r4, #4]
 802c2c6:	eef1 7a67 	vneg.f32	s15, s15
 802c2ca:	edc4 7a01 	vstr	s15, [r4, #4]
 802c2ce:	e782      	b.n	802c1d6 <__ieee754_rem_pio2f+0x126>
 802c2d0:	2303      	movs	r3, #3
 802c2d2:	e7e5      	b.n	802c2a0 <__ieee754_rem_pio2f+0x1f0>
 802c2d4:	3f490fd8 	.word	0x3f490fd8
 802c2d8:	4016cbe3 	.word	0x4016cbe3
 802c2dc:	3fc90f80 	.word	0x3fc90f80
 802c2e0:	3fc90fd0 	.word	0x3fc90fd0
 802c2e4:	37354400 	.word	0x37354400
 802c2e8:	37354443 	.word	0x37354443
 802c2ec:	2e85a308 	.word	0x2e85a308
 802c2f0:	43490f80 	.word	0x43490f80
 802c2f4:	3f22f984 	.word	0x3f22f984
 802c2f8:	0802ff3c 	.word	0x0802ff3c
 802c2fc:	2e85a300 	.word	0x2e85a300
 802c300:	248d3132 	.word	0x248d3132
 802c304:	43800000 	.word	0x43800000
 802c308:	0802ffbc 	.word	0x0802ffbc

0802c30c <atanf>:
 802c30c:	b538      	push	{r3, r4, r5, lr}
 802c30e:	ee10 5a10 	vmov	r5, s0
 802c312:	eef0 7a40 	vmov.f32	s15, s0
 802c316:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 802c31a:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 802c31e:	d30f      	bcc.n	802c340 <atanf+0x34>
 802c320:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 802c324:	d904      	bls.n	802c330 <atanf+0x24>
 802c326:	ee70 7a00 	vadd.f32	s15, s0, s0
 802c32a:	eeb0 0a67 	vmov.f32	s0, s15
 802c32e:	bd38      	pop	{r3, r4, r5, pc}
 802c330:	2d00      	cmp	r5, #0
 802c332:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 802c468 <atanf+0x15c>
 802c336:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 802c46c <atanf+0x160>
 802c33a:	fe77 7a27 	vselgt.f32	s15, s14, s15
 802c33e:	e7f4      	b.n	802c32a <atanf+0x1e>
 802c340:	4b4b      	ldr	r3, [pc, #300]	@ (802c470 <atanf+0x164>)
 802c342:	429c      	cmp	r4, r3
 802c344:	d810      	bhi.n	802c368 <atanf+0x5c>
 802c346:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 802c34a:	d20a      	bcs.n	802c362 <atanf+0x56>
 802c34c:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 802c474 <atanf+0x168>
 802c350:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 802c354:	ee30 7a07 	vadd.f32	s14, s0, s14
 802c358:	eeb4 7ae6 	vcmpe.f32	s14, s13
 802c35c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802c360:	dce3      	bgt.n	802c32a <atanf+0x1e>
 802c362:	f04f 33ff 	mov.w	r3, #4294967295
 802c366:	e013      	b.n	802c390 <atanf+0x84>
 802c368:	f000 f8a4 	bl	802c4b4 <fabsf>
 802c36c:	4b42      	ldr	r3, [pc, #264]	@ (802c478 <atanf+0x16c>)
 802c36e:	429c      	cmp	r4, r3
 802c370:	d84f      	bhi.n	802c412 <atanf+0x106>
 802c372:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 802c376:	429c      	cmp	r4, r3
 802c378:	d841      	bhi.n	802c3fe <atanf+0xf2>
 802c37a:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 802c37e:	2300      	movs	r3, #0
 802c380:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 802c384:	eea0 7a27 	vfma.f32	s14, s0, s15
 802c388:	ee30 0a27 	vadd.f32	s0, s0, s15
 802c38c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802c390:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 802c47c <atanf+0x170>
 802c394:	1c5a      	adds	r2, r3, #1
 802c396:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 802c480 <atanf+0x174>
 802c39a:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 802c484 <atanf+0x178>
 802c39e:	ee27 6aa7 	vmul.f32	s12, s15, s15
 802c3a2:	ee66 6a06 	vmul.f32	s13, s12, s12
 802c3a6:	eee6 5a87 	vfma.f32	s11, s13, s14
 802c3aa:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 802c488 <atanf+0x17c>
 802c3ae:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802c3b2:	eddf 5a36 	vldr	s11, [pc, #216]	@ 802c48c <atanf+0x180>
 802c3b6:	eee7 5a26 	vfma.f32	s11, s14, s13
 802c3ba:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 802c490 <atanf+0x184>
 802c3be:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802c3c2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 802c494 <atanf+0x188>
 802c3c6:	eee7 5a26 	vfma.f32	s11, s14, s13
 802c3ca:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 802c498 <atanf+0x18c>
 802c3ce:	eea6 5a87 	vfma.f32	s10, s13, s14
 802c3d2:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 802c49c <atanf+0x190>
 802c3d6:	eea5 7a26 	vfma.f32	s14, s10, s13
 802c3da:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 802c4a0 <atanf+0x194>
 802c3de:	eea7 5a26 	vfma.f32	s10, s14, s13
 802c3e2:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 802c4a4 <atanf+0x198>
 802c3e6:	eea5 7a26 	vfma.f32	s14, s10, s13
 802c3ea:	ee27 7a26 	vmul.f32	s14, s14, s13
 802c3ee:	eea5 7a86 	vfma.f32	s14, s11, s12
 802c3f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 802c3f6:	d121      	bne.n	802c43c <atanf+0x130>
 802c3f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802c3fc:	e795      	b.n	802c32a <atanf+0x1e>
 802c3fe:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 802c402:	2301      	movs	r3, #1
 802c404:	ee30 7a67 	vsub.f32	s14, s0, s15
 802c408:	ee30 0a27 	vadd.f32	s0, s0, s15
 802c40c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802c410:	e7be      	b.n	802c390 <atanf+0x84>
 802c412:	4b25      	ldr	r3, [pc, #148]	@ (802c4a8 <atanf+0x19c>)
 802c414:	429c      	cmp	r4, r3
 802c416:	d80b      	bhi.n	802c430 <atanf+0x124>
 802c418:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 802c41c:	2302      	movs	r3, #2
 802c41e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802c422:	ee70 6a67 	vsub.f32	s13, s0, s15
 802c426:	eea0 7a27 	vfma.f32	s14, s0, s15
 802c42a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802c42e:	e7af      	b.n	802c390 <atanf+0x84>
 802c430:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 802c434:	2303      	movs	r3, #3
 802c436:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802c43a:	e7a9      	b.n	802c390 <atanf+0x84>
 802c43c:	4a1b      	ldr	r2, [pc, #108]	@ (802c4ac <atanf+0x1a0>)
 802c43e:	2d00      	cmp	r5, #0
 802c440:	491b      	ldr	r1, [pc, #108]	@ (802c4b0 <atanf+0x1a4>)
 802c442:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 802c446:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 802c44a:	edd3 6a00 	vldr	s13, [r3]
 802c44e:	ee37 7a66 	vsub.f32	s14, s14, s13
 802c452:	ee37 7a67 	vsub.f32	s14, s14, s15
 802c456:	edd2 7a00 	vldr	s15, [r2]
 802c45a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802c45e:	bfb8      	it	lt
 802c460:	eef1 7a67 	vneglt.f32	s15, s15
 802c464:	e761      	b.n	802c32a <atanf+0x1e>
 802c466:	bf00      	nop
 802c468:	bfc90fdb 	.word	0xbfc90fdb
 802c46c:	3fc90fdb 	.word	0x3fc90fdb
 802c470:	3edfffff 	.word	0x3edfffff
 802c474:	7149f2ca 	.word	0x7149f2ca
 802c478:	3f97ffff 	.word	0x3f97ffff
 802c47c:	3c8569d7 	.word	0x3c8569d7
 802c480:	3d4bda59 	.word	0x3d4bda59
 802c484:	bd6ef16b 	.word	0xbd6ef16b
 802c488:	3d886b35 	.word	0x3d886b35
 802c48c:	3dba2e6e 	.word	0x3dba2e6e
 802c490:	3e124925 	.word	0x3e124925
 802c494:	3eaaaaab 	.word	0x3eaaaaab
 802c498:	bd15a221 	.word	0xbd15a221
 802c49c:	bd9d8795 	.word	0xbd9d8795
 802c4a0:	bde38e38 	.word	0xbde38e38
 802c4a4:	be4ccccd 	.word	0xbe4ccccd
 802c4a8:	401bffff 	.word	0x401bffff
 802c4ac:	080302e4 	.word	0x080302e4
 802c4b0:	080302d4 	.word	0x080302d4

0802c4b4 <fabsf>:
 802c4b4:	ee10 3a10 	vmov	r3, s0
 802c4b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802c4bc:	ee00 3a10 	vmov	s0, r3
 802c4c0:	4770      	bx	lr
	...

0802c4c4 <scalbnf>:
 802c4c4:	ee10 3a10 	vmov	r3, s0
 802c4c8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 802c4cc:	d02a      	beq.n	802c524 <scalbnf+0x60>
 802c4ce:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 802c4d2:	d302      	bcc.n	802c4da <scalbnf+0x16>
 802c4d4:	ee30 0a00 	vadd.f32	s0, s0, s0
 802c4d8:	4770      	bx	lr
 802c4da:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 802c4de:	d122      	bne.n	802c526 <scalbnf+0x62>
 802c4e0:	4b23      	ldr	r3, [pc, #140]	@ (802c570 <scalbnf+0xac>)
 802c4e2:	eddf 7a24 	vldr	s15, [pc, #144]	@ 802c574 <scalbnf+0xb0>
 802c4e6:	4298      	cmp	r0, r3
 802c4e8:	ee20 0a27 	vmul.f32	s0, s0, s15
 802c4ec:	db16      	blt.n	802c51c <scalbnf+0x58>
 802c4ee:	ee10 3a10 	vmov	r3, s0
 802c4f2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802c4f6:	3a19      	subs	r2, #25
 802c4f8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 802c4fc:	4288      	cmp	r0, r1
 802c4fe:	dd14      	ble.n	802c52a <scalbnf+0x66>
 802c500:	eddf 7a1d 	vldr	s15, [pc, #116]	@ 802c578 <scalbnf+0xb4>
 802c504:	ee10 3a10 	vmov	r3, s0
 802c508:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 802c57c <scalbnf+0xb8>
 802c50c:	eeb0 7a67 	vmov.f32	s14, s15
 802c510:	2b00      	cmp	r3, #0
 802c512:	fe67 7aa6 	vselge.f32	s15, s15, s13
 802c516:	ee27 0a87 	vmul.f32	s0, s15, s14
 802c51a:	4770      	bx	lr
 802c51c:	eddf 7a18 	vldr	s15, [pc, #96]	@ 802c580 <scalbnf+0xbc>
 802c520:	ee27 0a80 	vmul.f32	s0, s15, s0
 802c524:	4770      	bx	lr
 802c526:	0dd2      	lsrs	r2, r2, #23
 802c528:	e7e6      	b.n	802c4f8 <scalbnf+0x34>
 802c52a:	4410      	add	r0, r2
 802c52c:	28fe      	cmp	r0, #254	@ 0xfe
 802c52e:	dce7      	bgt.n	802c500 <scalbnf+0x3c>
 802c530:	2800      	cmp	r0, #0
 802c532:	dd06      	ble.n	802c542 <scalbnf+0x7e>
 802c534:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 802c538:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 802c53c:	ee00 3a10 	vmov	s0, r3
 802c540:	4770      	bx	lr
 802c542:	f110 0f16 	cmn.w	r0, #22
 802c546:	da09      	bge.n	802c55c <scalbnf+0x98>
 802c548:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 802c580 <scalbnf+0xbc>
 802c54c:	ee10 3a10 	vmov	r3, s0
 802c550:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 802c584 <scalbnf+0xc0>
 802c554:	eeb0 7a67 	vmov.f32	s14, s15
 802c558:	2b00      	cmp	r3, #0
 802c55a:	e7da      	b.n	802c512 <scalbnf+0x4e>
 802c55c:	3019      	adds	r0, #25
 802c55e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 802c562:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 802c588 <scalbnf+0xc4>
 802c566:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 802c56a:	ee07 3a90 	vmov	s15, r3
 802c56e:	e7d7      	b.n	802c520 <scalbnf+0x5c>
 802c570:	ffff3cb0 	.word	0xffff3cb0
 802c574:	4c000000 	.word	0x4c000000
 802c578:	7149f2ca 	.word	0x7149f2ca
 802c57c:	f149f2ca 	.word	0xf149f2ca
 802c580:	0da24260 	.word	0x0da24260
 802c584:	8da24260 	.word	0x8da24260
 802c588:	33000000 	.word	0x33000000

0802c58c <__kernel_rem_pio2f>:
 802c58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c590:	4690      	mov	r8, r2
 802c592:	4ab9      	ldr	r2, [pc, #740]	@ (802c878 <__kernel_rem_pio2f+0x2ec>)
 802c594:	460f      	mov	r7, r1
 802c596:	f103 3bff 	add.w	fp, r3, #4294967295
 802c59a:	f118 0f04 	cmn.w	r8, #4
 802c59e:	ed2d 8b04 	vpush	{d8-d9}
 802c5a2:	b0d9      	sub	sp, #356	@ 0x164
 802c5a4:	9001      	str	r0, [sp, #4]
 802c5a6:	9866      	ldr	r0, [sp, #408]	@ 0x198
 802c5a8:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 802c5ac:	db26      	blt.n	802c5fc <__kernel_rem_pio2f+0x70>
 802c5ae:	f1b8 0203 	subs.w	r2, r8, #3
 802c5b2:	bf48      	it	mi
 802c5b4:	f108 0204 	addmi.w	r2, r8, #4
 802c5b8:	10d2      	asrs	r2, r2, #3
 802c5ba:	1c55      	adds	r5, r2, #1
 802c5bc:	eba2 060b 	sub.w	r6, r2, fp
 802c5c0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 802c5c2:	eb0a 0c0b 	add.w	ip, sl, fp
 802c5c6:	00e8      	lsls	r0, r5, #3
 802c5c8:	ac1c      	add	r4, sp, #112	@ 0x70
 802c5ca:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 802c5ce:	ed9f 7aae 	vldr	s14, [pc, #696]	@ 802c888 <__kernel_rem_pio2f+0x2fc>
 802c5d2:	9002      	str	r0, [sp, #8]
 802c5d4:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 802c5d8:	2000      	movs	r0, #0
 802c5da:	4560      	cmp	r0, ip
 802c5dc:	dd10      	ble.n	802c600 <__kernel_rem_pio2f+0x74>
 802c5de:	a91c      	add	r1, sp, #112	@ 0x70
 802c5e0:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 802c5e4:	2600      	movs	r6, #0
 802c5e6:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 802c5ea:	4556      	cmp	r6, sl
 802c5ec:	dc26      	bgt.n	802c63c <__kernel_rem_pio2f+0xb0>
 802c5ee:	f8dd e004 	ldr.w	lr, [sp, #4]
 802c5f2:	4684      	mov	ip, r0
 802c5f4:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 802c888 <__kernel_rem_pio2f+0x2fc>
 802c5f8:	2400      	movs	r4, #0
 802c5fa:	e018      	b.n	802c62e <__kernel_rem_pio2f+0xa2>
 802c5fc:	2200      	movs	r2, #0
 802c5fe:	e7dc      	b.n	802c5ba <__kernel_rem_pio2f+0x2e>
 802c600:	42c6      	cmn	r6, r0
 802c602:	bf54      	ite	pl
 802c604:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 802c608:	eef0 7a47 	vmovmi.f32	s15, s14
 802c60c:	f100 0001 	add.w	r0, r0, #1
 802c610:	bf5c      	itt	pl
 802c612:	ee07 1a90 	vmovpl	s15, r1
 802c616:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 802c61a:	ece4 7a01 	vstmia	r4!, {s15}
 802c61e:	e7dc      	b.n	802c5da <__kernel_rem_pio2f+0x4e>
 802c620:	ecfe 6a01 	vldmia	lr!, {s13}
 802c624:	3401      	adds	r4, #1
 802c626:	ed3c 7a01 	vldmdb	ip!, {s14}
 802c62a:	eee6 7a87 	vfma.f32	s15, s13, s14
 802c62e:	455c      	cmp	r4, fp
 802c630:	ddf6      	ble.n	802c620 <__kernel_rem_pio2f+0x94>
 802c632:	3601      	adds	r6, #1
 802c634:	3004      	adds	r0, #4
 802c636:	ece9 7a01 	vstmia	r9!, {s15}
 802c63a:	e7d6      	b.n	802c5ea <__kernel_rem_pio2f+0x5e>
 802c63c:	a908      	add	r1, sp, #32
 802c63e:	4654      	mov	r4, sl
 802c640:	eddf 8a90 	vldr	s17, [pc, #576]	@ 802c884 <__kernel_rem_pio2f+0x2f8>
 802c644:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802c648:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 802c880 <__kernel_rem_pio2f+0x2f4>
 802c64c:	9104      	str	r1, [sp, #16]
 802c64e:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 802c650:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 802c654:	9203      	str	r2, [sp, #12]
 802c656:	00a2      	lsls	r2, r4, #2
 802c658:	a944      	add	r1, sp, #272	@ 0x110
 802c65a:	4626      	mov	r6, r4
 802c65c:	9205      	str	r2, [sp, #20]
 802c65e:	aa58      	add	r2, sp, #352	@ 0x160
 802c660:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 802c664:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 802c668:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 802c66c:	aa08      	add	r2, sp, #32
 802c66e:	4694      	mov	ip, r2
 802c670:	2e00      	cmp	r6, #0
 802c672:	dc4c      	bgt.n	802c70e <__kernel_rem_pio2f+0x182>
 802c674:	4628      	mov	r0, r5
 802c676:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802c67a:	f7ff ff23 	bl	802c4c4 <scalbnf>
 802c67e:	eeb0 8a40 	vmov.f32	s16, s0
 802c682:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 802c686:	ee28 0a00 	vmul.f32	s0, s16, s0
 802c68a:	f000 f9e9 	bl	802ca60 <floorf>
 802c68e:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 802c692:	2d00      	cmp	r5, #0
 802c694:	eea0 8a67 	vfms.f32	s16, s0, s15
 802c698:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802c69c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 802c6a0:	ee17 9a90 	vmov	r9, s15
 802c6a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802c6a8:	ee38 8a67 	vsub.f32	s16, s16, s15
 802c6ac:	dd41      	ble.n	802c732 <__kernel_rem_pio2f+0x1a6>
 802c6ae:	f104 3cff 	add.w	ip, r4, #4294967295
 802c6b2:	a908      	add	r1, sp, #32
 802c6b4:	f1c5 0e08 	rsb	lr, r5, #8
 802c6b8:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 802c6bc:	fa46 f00e 	asr.w	r0, r6, lr
 802c6c0:	4481      	add	r9, r0
 802c6c2:	fa00 f00e 	lsl.w	r0, r0, lr
 802c6c6:	1a36      	subs	r6, r6, r0
 802c6c8:	f1c5 0007 	rsb	r0, r5, #7
 802c6cc:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 802c6d0:	4106      	asrs	r6, r0
 802c6d2:	2e00      	cmp	r6, #0
 802c6d4:	dd3c      	ble.n	802c750 <__kernel_rem_pio2f+0x1c4>
 802c6d6:	f04f 0e00 	mov.w	lr, #0
 802c6da:	f109 0901 	add.w	r9, r9, #1
 802c6de:	4670      	mov	r0, lr
 802c6e0:	4574      	cmp	r4, lr
 802c6e2:	dc68      	bgt.n	802c7b6 <__kernel_rem_pio2f+0x22a>
 802c6e4:	2d00      	cmp	r5, #0
 802c6e6:	dd03      	ble.n	802c6f0 <__kernel_rem_pio2f+0x164>
 802c6e8:	2d01      	cmp	r5, #1
 802c6ea:	d074      	beq.n	802c7d6 <__kernel_rem_pio2f+0x24a>
 802c6ec:	2d02      	cmp	r5, #2
 802c6ee:	d07d      	beq.n	802c7ec <__kernel_rem_pio2f+0x260>
 802c6f0:	2e02      	cmp	r6, #2
 802c6f2:	d12d      	bne.n	802c750 <__kernel_rem_pio2f+0x1c4>
 802c6f4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 802c6f8:	ee30 8a48 	vsub.f32	s16, s0, s16
 802c6fc:	b340      	cbz	r0, 802c750 <__kernel_rem_pio2f+0x1c4>
 802c6fe:	4628      	mov	r0, r5
 802c700:	9306      	str	r3, [sp, #24]
 802c702:	f7ff fedf 	bl	802c4c4 <scalbnf>
 802c706:	9b06      	ldr	r3, [sp, #24]
 802c708:	ee38 8a40 	vsub.f32	s16, s16, s0
 802c70c:	e020      	b.n	802c750 <__kernel_rem_pio2f+0x1c4>
 802c70e:	ee60 7a28 	vmul.f32	s15, s0, s17
 802c712:	3e01      	subs	r6, #1
 802c714:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802c718:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802c71c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 802c720:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802c724:	ecac 0a01 	vstmia	ip!, {s0}
 802c728:	ed30 0a01 	vldmdb	r0!, {s0}
 802c72c:	ee37 0a80 	vadd.f32	s0, s15, s0
 802c730:	e79e      	b.n	802c670 <__kernel_rem_pio2f+0xe4>
 802c732:	d105      	bne.n	802c740 <__kernel_rem_pio2f+0x1b4>
 802c734:	1e60      	subs	r0, r4, #1
 802c736:	a908      	add	r1, sp, #32
 802c738:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 802c73c:	11f6      	asrs	r6, r6, #7
 802c73e:	e7c8      	b.n	802c6d2 <__kernel_rem_pio2f+0x146>
 802c740:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 802c744:	eeb4 8ae7 	vcmpe.f32	s16, s15
 802c748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802c74c:	da31      	bge.n	802c7b2 <__kernel_rem_pio2f+0x226>
 802c74e:	2600      	movs	r6, #0
 802c750:	eeb5 8a40 	vcmp.f32	s16, #0.0
 802c754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802c758:	f040 8098 	bne.w	802c88c <__kernel_rem_pio2f+0x300>
 802c75c:	1e60      	subs	r0, r4, #1
 802c75e:	2200      	movs	r2, #0
 802c760:	4550      	cmp	r0, sl
 802c762:	da4b      	bge.n	802c7fc <__kernel_rem_pio2f+0x270>
 802c764:	2a00      	cmp	r2, #0
 802c766:	d065      	beq.n	802c834 <__kernel_rem_pio2f+0x2a8>
 802c768:	3c01      	subs	r4, #1
 802c76a:	ab08      	add	r3, sp, #32
 802c76c:	3d08      	subs	r5, #8
 802c76e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 802c772:	2b00      	cmp	r3, #0
 802c774:	d0f8      	beq.n	802c768 <__kernel_rem_pio2f+0x1dc>
 802c776:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 802c77a:	4628      	mov	r0, r5
 802c77c:	f7ff fea2 	bl	802c4c4 <scalbnf>
 802c780:	1c63      	adds	r3, r4, #1
 802c782:	aa44      	add	r2, sp, #272	@ 0x110
 802c784:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 802c884 <__kernel_rem_pio2f+0x2f8>
 802c788:	0099      	lsls	r1, r3, #2
 802c78a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 802c78e:	4623      	mov	r3, r4
 802c790:	2b00      	cmp	r3, #0
 802c792:	f280 80a9 	bge.w	802c8e8 <__kernel_rem_pio2f+0x35c>
 802c796:	4623      	mov	r3, r4
 802c798:	2b00      	cmp	r3, #0
 802c79a:	f2c0 80c7 	blt.w	802c92c <__kernel_rem_pio2f+0x3a0>
 802c79e:	aa44      	add	r2, sp, #272	@ 0x110
 802c7a0:	f8df c0d8 	ldr.w	ip, [pc, #216]	@ 802c87c <__kernel_rem_pio2f+0x2f0>
 802c7a4:	eddf 7a38 	vldr	s15, [pc, #224]	@ 802c888 <__kernel_rem_pio2f+0x2fc>
 802c7a8:	2000      	movs	r0, #0
 802c7aa:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 802c7ae:	1ae2      	subs	r2, r4, r3
 802c7b0:	e0b1      	b.n	802c916 <__kernel_rem_pio2f+0x38a>
 802c7b2:	2602      	movs	r6, #2
 802c7b4:	e78f      	b.n	802c6d6 <__kernel_rem_pio2f+0x14a>
 802c7b6:	f852 1b04 	ldr.w	r1, [r2], #4
 802c7ba:	b948      	cbnz	r0, 802c7d0 <__kernel_rem_pio2f+0x244>
 802c7bc:	b121      	cbz	r1, 802c7c8 <__kernel_rem_pio2f+0x23c>
 802c7be:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 802c7c2:	f842 1c04 	str.w	r1, [r2, #-4]
 802c7c6:	2101      	movs	r1, #1
 802c7c8:	f10e 0e01 	add.w	lr, lr, #1
 802c7cc:	4608      	mov	r0, r1
 802c7ce:	e787      	b.n	802c6e0 <__kernel_rem_pio2f+0x154>
 802c7d0:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 802c7d4:	e7f5      	b.n	802c7c2 <__kernel_rem_pio2f+0x236>
 802c7d6:	f104 3cff 	add.w	ip, r4, #4294967295
 802c7da:	aa08      	add	r2, sp, #32
 802c7dc:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 802c7e0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 802c7e4:	a908      	add	r1, sp, #32
 802c7e6:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 802c7ea:	e781      	b.n	802c6f0 <__kernel_rem_pio2f+0x164>
 802c7ec:	f104 3cff 	add.w	ip, r4, #4294967295
 802c7f0:	aa08      	add	r2, sp, #32
 802c7f2:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 802c7f6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 802c7fa:	e7f3      	b.n	802c7e4 <__kernel_rem_pio2f+0x258>
 802c7fc:	a908      	add	r1, sp, #32
 802c7fe:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 802c802:	3801      	subs	r0, #1
 802c804:	430a      	orrs	r2, r1
 802c806:	e7ab      	b.n	802c760 <__kernel_rem_pio2f+0x1d4>
 802c808:	3201      	adds	r2, #1
 802c80a:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 802c80e:	2e00      	cmp	r6, #0
 802c810:	d0fa      	beq.n	802c808 <__kernel_rem_pio2f+0x27c>
 802c812:	9905      	ldr	r1, [sp, #20]
 802c814:	18e6      	adds	r6, r4, r3
 802c816:	f104 0c01 	add.w	ip, r4, #1
 802c81a:	4422      	add	r2, r4
 802c81c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 802c820:	eb0d 0001 	add.w	r0, sp, r1
 802c824:	a91c      	add	r1, sp, #112	@ 0x70
 802c826:	384c      	subs	r0, #76	@ 0x4c
 802c828:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 802c82c:	4562      	cmp	r2, ip
 802c82e:	da04      	bge.n	802c83a <__kernel_rem_pio2f+0x2ae>
 802c830:	4614      	mov	r4, r2
 802c832:	e710      	b.n	802c656 <__kernel_rem_pio2f+0xca>
 802c834:	9804      	ldr	r0, [sp, #16]
 802c836:	2201      	movs	r2, #1
 802c838:	e7e7      	b.n	802c80a <__kernel_rem_pio2f+0x27e>
 802c83a:	9903      	ldr	r1, [sp, #12]
 802c83c:	2400      	movs	r4, #0
 802c83e:	f8dd e004 	ldr.w	lr, [sp, #4]
 802c842:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 802c846:	ee07 1a90 	vmov	s15, r1
 802c84a:	9105      	str	r1, [sp, #20]
 802c84c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802c850:	ece6 7a01 	vstmia	r6!, {s15}
 802c854:	46b1      	mov	r9, r6
 802c856:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 802c888 <__kernel_rem_pio2f+0x2fc>
 802c85a:	455c      	cmp	r4, fp
 802c85c:	dd04      	ble.n	802c868 <__kernel_rem_pio2f+0x2dc>
 802c85e:	f10c 0c01 	add.w	ip, ip, #1
 802c862:	ece0 7a01 	vstmia	r0!, {s15}
 802c866:	e7e1      	b.n	802c82c <__kernel_rem_pio2f+0x2a0>
 802c868:	ecfe 6a01 	vldmia	lr!, {s13}
 802c86c:	3401      	adds	r4, #1
 802c86e:	ed39 7a01 	vldmdb	r9!, {s14}
 802c872:	eee6 7a87 	vfma.f32	s15, s13, s14
 802c876:	e7f0      	b.n	802c85a <__kernel_rem_pio2f+0x2ce>
 802c878:	08030320 	.word	0x08030320
 802c87c:	080302f4 	.word	0x080302f4
 802c880:	43800000 	.word	0x43800000
 802c884:	3b800000 	.word	0x3b800000
 802c888:	00000000 	.word	0x00000000
 802c88c:	9b02      	ldr	r3, [sp, #8]
 802c88e:	eeb0 0a48 	vmov.f32	s0, s16
 802c892:	eba3 0008 	sub.w	r0, r3, r8
 802c896:	f7ff fe15 	bl	802c4c4 <scalbnf>
 802c89a:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 802c880 <__kernel_rem_pio2f+0x2f4>
 802c89e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 802c8a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802c8a6:	db19      	blt.n	802c8dc <__kernel_rem_pio2f+0x350>
 802c8a8:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 802c884 <__kernel_rem_pio2f+0x2f8>
 802c8ac:	aa08      	add	r2, sp, #32
 802c8ae:	3508      	adds	r5, #8
 802c8b0:	ee60 7a27 	vmul.f32	s15, s0, s15
 802c8b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802c8b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802c8bc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 802c8c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802c8c4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802c8c8:	ee10 3a10 	vmov	r3, s0
 802c8cc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 802c8d0:	3401      	adds	r4, #1
 802c8d2:	ee17 3a90 	vmov	r3, s15
 802c8d6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 802c8da:	e74c      	b.n	802c776 <__kernel_rem_pio2f+0x1ea>
 802c8dc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802c8e0:	aa08      	add	r2, sp, #32
 802c8e2:	ee10 3a10 	vmov	r3, s0
 802c8e6:	e7f6      	b.n	802c8d6 <__kernel_rem_pio2f+0x34a>
 802c8e8:	a808      	add	r0, sp, #32
 802c8ea:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 802c8ee:	3b01      	subs	r3, #1
 802c8f0:	ee07 0a90 	vmov	s15, r0
 802c8f4:	9001      	str	r0, [sp, #4]
 802c8f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802c8fa:	ee67 7a80 	vmul.f32	s15, s15, s0
 802c8fe:	ee20 0a07 	vmul.f32	s0, s0, s14
 802c902:	ed62 7a01 	vstmdb	r2!, {s15}
 802c906:	e743      	b.n	802c790 <__kernel_rem_pio2f+0x204>
 802c908:	ecfc 6a01 	vldmia	ip!, {s13}
 802c90c:	3001      	adds	r0, #1
 802c90e:	ecb5 7a01 	vldmia	r5!, {s14}
 802c912:	eee6 7a87 	vfma.f32	s15, s13, s14
 802c916:	4550      	cmp	r0, sl
 802c918:	dc01      	bgt.n	802c91e <__kernel_rem_pio2f+0x392>
 802c91a:	4290      	cmp	r0, r2
 802c91c:	ddf4      	ble.n	802c908 <__kernel_rem_pio2f+0x37c>
 802c91e:	a858      	add	r0, sp, #352	@ 0x160
 802c920:	3b01      	subs	r3, #1
 802c922:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 802c926:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 802c92a:	e735      	b.n	802c798 <__kernel_rem_pio2f+0x20c>
 802c92c:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 802c92e:	2b02      	cmp	r3, #2
 802c930:	dc09      	bgt.n	802c946 <__kernel_rem_pio2f+0x3ba>
 802c932:	2b00      	cmp	r3, #0
 802c934:	dc27      	bgt.n	802c986 <__kernel_rem_pio2f+0x3fa>
 802c936:	d040      	beq.n	802c9ba <__kernel_rem_pio2f+0x42e>
 802c938:	f009 0007 	and.w	r0, r9, #7
 802c93c:	b059      	add	sp, #356	@ 0x164
 802c93e:	ecbd 8b04 	vpop	{d8-d9}
 802c942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c946:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 802c948:	2b03      	cmp	r3, #3
 802c94a:	d1f5      	bne.n	802c938 <__kernel_rem_pio2f+0x3ac>
 802c94c:	aa30      	add	r2, sp, #192	@ 0xc0
 802c94e:	1f0b      	subs	r3, r1, #4
 802c950:	4620      	mov	r0, r4
 802c952:	4413      	add	r3, r2
 802c954:	461a      	mov	r2, r3
 802c956:	2800      	cmp	r0, #0
 802c958:	dc50      	bgt.n	802c9fc <__kernel_rem_pio2f+0x470>
 802c95a:	4622      	mov	r2, r4
 802c95c:	2a01      	cmp	r2, #1
 802c95e:	dc5d      	bgt.n	802ca1c <__kernel_rem_pio2f+0x490>
 802c960:	ab30      	add	r3, sp, #192	@ 0xc0
 802c962:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 802c888 <__kernel_rem_pio2f+0x2fc>
 802c966:	440b      	add	r3, r1
 802c968:	2c01      	cmp	r4, #1
 802c96a:	dc67      	bgt.n	802ca3c <__kernel_rem_pio2f+0x4b0>
 802c96c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 802c970:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 802c974:	2e00      	cmp	r6, #0
 802c976:	d167      	bne.n	802ca48 <__kernel_rem_pio2f+0x4bc>
 802c978:	edc7 6a00 	vstr	s13, [r7]
 802c97c:	ed87 7a01 	vstr	s14, [r7, #4]
 802c980:	edc7 7a02 	vstr	s15, [r7, #8]
 802c984:	e7d8      	b.n	802c938 <__kernel_rem_pio2f+0x3ac>
 802c986:	ab30      	add	r3, sp, #192	@ 0xc0
 802c988:	4622      	mov	r2, r4
 802c98a:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 802c888 <__kernel_rem_pio2f+0x2fc>
 802c98e:	440b      	add	r3, r1
 802c990:	2a00      	cmp	r2, #0
 802c992:	da24      	bge.n	802c9de <__kernel_rem_pio2f+0x452>
 802c994:	b34e      	cbz	r6, 802c9ea <__kernel_rem_pio2f+0x45e>
 802c996:	eef1 7a47 	vneg.f32	s15, s14
 802c99a:	edc7 7a00 	vstr	s15, [r7]
 802c99e:	aa31      	add	r2, sp, #196	@ 0xc4
 802c9a0:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 802c9a4:	2301      	movs	r3, #1
 802c9a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802c9aa:	429c      	cmp	r4, r3
 802c9ac:	da20      	bge.n	802c9f0 <__kernel_rem_pio2f+0x464>
 802c9ae:	b10e      	cbz	r6, 802c9b4 <__kernel_rem_pio2f+0x428>
 802c9b0:	eef1 7a67 	vneg.f32	s15, s15
 802c9b4:	edc7 7a01 	vstr	s15, [r7, #4]
 802c9b8:	e7be      	b.n	802c938 <__kernel_rem_pio2f+0x3ac>
 802c9ba:	ab30      	add	r3, sp, #192	@ 0xc0
 802c9bc:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 802c888 <__kernel_rem_pio2f+0x2fc>
 802c9c0:	440b      	add	r3, r1
 802c9c2:	2c00      	cmp	r4, #0
 802c9c4:	da05      	bge.n	802c9d2 <__kernel_rem_pio2f+0x446>
 802c9c6:	b10e      	cbz	r6, 802c9cc <__kernel_rem_pio2f+0x440>
 802c9c8:	eef1 7a67 	vneg.f32	s15, s15
 802c9cc:	edc7 7a00 	vstr	s15, [r7]
 802c9d0:	e7b2      	b.n	802c938 <__kernel_rem_pio2f+0x3ac>
 802c9d2:	ed33 7a01 	vldmdb	r3!, {s14}
 802c9d6:	3c01      	subs	r4, #1
 802c9d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 802c9dc:	e7f1      	b.n	802c9c2 <__kernel_rem_pio2f+0x436>
 802c9de:	ed73 7a01 	vldmdb	r3!, {s15}
 802c9e2:	3a01      	subs	r2, #1
 802c9e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 802c9e8:	e7d2      	b.n	802c990 <__kernel_rem_pio2f+0x404>
 802c9ea:	eef0 7a47 	vmov.f32	s15, s14
 802c9ee:	e7d4      	b.n	802c99a <__kernel_rem_pio2f+0x40e>
 802c9f0:	ecb2 7a01 	vldmia	r2!, {s14}
 802c9f4:	3301      	adds	r3, #1
 802c9f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 802c9fa:	e7d6      	b.n	802c9aa <__kernel_rem_pio2f+0x41e>
 802c9fc:	ed72 7a01 	vldmdb	r2!, {s15}
 802ca00:	3801      	subs	r0, #1
 802ca02:	edd2 6a01 	vldr	s13, [r2, #4]
 802ca06:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802ca0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802ca0e:	ed82 7a00 	vstr	s14, [r2]
 802ca12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802ca16:	edc2 7a01 	vstr	s15, [r2, #4]
 802ca1a:	e79c      	b.n	802c956 <__kernel_rem_pio2f+0x3ca>
 802ca1c:	ed73 7a01 	vldmdb	r3!, {s15}
 802ca20:	3a01      	subs	r2, #1
 802ca22:	edd3 6a01 	vldr	s13, [r3, #4]
 802ca26:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802ca2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802ca2e:	ed83 7a00 	vstr	s14, [r3]
 802ca32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802ca36:	edc3 7a01 	vstr	s15, [r3, #4]
 802ca3a:	e78f      	b.n	802c95c <__kernel_rem_pio2f+0x3d0>
 802ca3c:	ed33 7a01 	vldmdb	r3!, {s14}
 802ca40:	3c01      	subs	r4, #1
 802ca42:	ee77 7a87 	vadd.f32	s15, s15, s14
 802ca46:	e78f      	b.n	802c968 <__kernel_rem_pio2f+0x3dc>
 802ca48:	eef1 6a66 	vneg.f32	s13, s13
 802ca4c:	eeb1 7a47 	vneg.f32	s14, s14
 802ca50:	eef1 7a67 	vneg.f32	s15, s15
 802ca54:	edc7 6a00 	vstr	s13, [r7]
 802ca58:	ed87 7a01 	vstr	s14, [r7, #4]
 802ca5c:	e790      	b.n	802c980 <__kernel_rem_pio2f+0x3f4>
 802ca5e:	bf00      	nop

0802ca60 <floorf>:
 802ca60:	febb 0a40 	vrintm.f32	s0, s0
 802ca64:	4770      	bx	lr

0802ca66 <abort>:
 802ca66:	2006      	movs	r0, #6
 802ca68:	b508      	push	{r3, lr}
 802ca6a:	f000 fb3f 	bl	802d0ec <raise>
 802ca6e:	2001      	movs	r0, #1
 802ca70:	f7d4 fff8 	bl	8001a64 <_exit>

0802ca74 <__assert_func>:
 802ca74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802ca76:	4614      	mov	r4, r2
 802ca78:	461a      	mov	r2, r3
 802ca7a:	4b09      	ldr	r3, [pc, #36]	@ (802caa0 <__assert_func+0x2c>)
 802ca7c:	4605      	mov	r5, r0
 802ca7e:	681b      	ldr	r3, [r3, #0]
 802ca80:	68d8      	ldr	r0, [r3, #12]
 802ca82:	b14c      	cbz	r4, 802ca98 <__assert_func+0x24>
 802ca84:	4b07      	ldr	r3, [pc, #28]	@ (802caa4 <__assert_func+0x30>)
 802ca86:	9100      	str	r1, [sp, #0]
 802ca88:	4907      	ldr	r1, [pc, #28]	@ (802caa8 <__assert_func+0x34>)
 802ca8a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802ca8e:	462b      	mov	r3, r5
 802ca90:	f000 f984 	bl	802cd9c <fiprintf>
 802ca94:	f7ff ffe7 	bl	802ca66 <abort>
 802ca98:	4b04      	ldr	r3, [pc, #16]	@ (802caac <__assert_func+0x38>)
 802ca9a:	461c      	mov	r4, r3
 802ca9c:	e7f3      	b.n	802ca86 <__assert_func+0x12>
 802ca9e:	bf00      	nop
 802caa0:	200000a8 	.word	0x200000a8
 802caa4:	0803032c 	.word	0x0803032c
 802caa8:	08030339 	.word	0x08030339
 802caac:	08030367 	.word	0x08030367

0802cab0 <atexit>:
 802cab0:	2300      	movs	r3, #0
 802cab2:	4601      	mov	r1, r0
 802cab4:	461a      	mov	r2, r3
 802cab6:	4618      	mov	r0, r3
 802cab8:	f000 bbc4 	b.w	802d244 <__register_exitproc>

0802cabc <malloc>:
 802cabc:	4b02      	ldr	r3, [pc, #8]	@ (802cac8 <malloc+0xc>)
 802cabe:	4601      	mov	r1, r0
 802cac0:	6818      	ldr	r0, [r3, #0]
 802cac2:	f000 b82d 	b.w	802cb20 <_malloc_r>
 802cac6:	bf00      	nop
 802cac8:	200000a8 	.word	0x200000a8

0802cacc <free>:
 802cacc:	4b02      	ldr	r3, [pc, #8]	@ (802cad8 <free+0xc>)
 802cace:	4601      	mov	r1, r0
 802cad0:	6818      	ldr	r0, [r3, #0]
 802cad2:	f000 bc15 	b.w	802d300 <_free_r>
 802cad6:	bf00      	nop
 802cad8:	200000a8 	.word	0x200000a8

0802cadc <sbrk_aligned>:
 802cadc:	b570      	push	{r4, r5, r6, lr}
 802cade:	4e0f      	ldr	r6, [pc, #60]	@ (802cb1c <sbrk_aligned+0x40>)
 802cae0:	460c      	mov	r4, r1
 802cae2:	4605      	mov	r5, r0
 802cae4:	6831      	ldr	r1, [r6, #0]
 802cae6:	b911      	cbnz	r1, 802caee <sbrk_aligned+0x12>
 802cae8:	f000 fb50 	bl	802d18c <_sbrk_r>
 802caec:	6030      	str	r0, [r6, #0]
 802caee:	4621      	mov	r1, r4
 802caf0:	4628      	mov	r0, r5
 802caf2:	f000 fb4b 	bl	802d18c <_sbrk_r>
 802caf6:	1c43      	adds	r3, r0, #1
 802caf8:	d103      	bne.n	802cb02 <sbrk_aligned+0x26>
 802cafa:	f04f 34ff 	mov.w	r4, #4294967295
 802cafe:	4620      	mov	r0, r4
 802cb00:	bd70      	pop	{r4, r5, r6, pc}
 802cb02:	1cc4      	adds	r4, r0, #3
 802cb04:	f024 0403 	bic.w	r4, r4, #3
 802cb08:	42a0      	cmp	r0, r4
 802cb0a:	d0f8      	beq.n	802cafe <sbrk_aligned+0x22>
 802cb0c:	1a21      	subs	r1, r4, r0
 802cb0e:	4628      	mov	r0, r5
 802cb10:	f000 fb3c 	bl	802d18c <_sbrk_r>
 802cb14:	3001      	adds	r0, #1
 802cb16:	d1f2      	bne.n	802cafe <sbrk_aligned+0x22>
 802cb18:	e7ef      	b.n	802cafa <sbrk_aligned+0x1e>
 802cb1a:	bf00      	nop
 802cb1c:	2005c4d8 	.word	0x2005c4d8

0802cb20 <_malloc_r>:
 802cb20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802cb24:	1ccd      	adds	r5, r1, #3
 802cb26:	4606      	mov	r6, r0
 802cb28:	f025 0503 	bic.w	r5, r5, #3
 802cb2c:	3508      	adds	r5, #8
 802cb2e:	2d0c      	cmp	r5, #12
 802cb30:	bf38      	it	cc
 802cb32:	250c      	movcc	r5, #12
 802cb34:	2d00      	cmp	r5, #0
 802cb36:	db01      	blt.n	802cb3c <_malloc_r+0x1c>
 802cb38:	42a9      	cmp	r1, r5
 802cb3a:	d904      	bls.n	802cb46 <_malloc_r+0x26>
 802cb3c:	230c      	movs	r3, #12
 802cb3e:	6033      	str	r3, [r6, #0]
 802cb40:	2000      	movs	r0, #0
 802cb42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802cb46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 802cc1c <_malloc_r+0xfc>
 802cb4a:	f000 f869 	bl	802cc20 <__malloc_lock>
 802cb4e:	f8d8 3000 	ldr.w	r3, [r8]
 802cb52:	461c      	mov	r4, r3
 802cb54:	bb44      	cbnz	r4, 802cba8 <_malloc_r+0x88>
 802cb56:	4629      	mov	r1, r5
 802cb58:	4630      	mov	r0, r6
 802cb5a:	f7ff ffbf 	bl	802cadc <sbrk_aligned>
 802cb5e:	1c43      	adds	r3, r0, #1
 802cb60:	4604      	mov	r4, r0
 802cb62:	d158      	bne.n	802cc16 <_malloc_r+0xf6>
 802cb64:	f8d8 4000 	ldr.w	r4, [r8]
 802cb68:	4627      	mov	r7, r4
 802cb6a:	2f00      	cmp	r7, #0
 802cb6c:	d143      	bne.n	802cbf6 <_malloc_r+0xd6>
 802cb6e:	2c00      	cmp	r4, #0
 802cb70:	d04b      	beq.n	802cc0a <_malloc_r+0xea>
 802cb72:	6823      	ldr	r3, [r4, #0]
 802cb74:	4639      	mov	r1, r7
 802cb76:	4630      	mov	r0, r6
 802cb78:	eb04 0903 	add.w	r9, r4, r3
 802cb7c:	f000 fb06 	bl	802d18c <_sbrk_r>
 802cb80:	4581      	cmp	r9, r0
 802cb82:	d142      	bne.n	802cc0a <_malloc_r+0xea>
 802cb84:	6821      	ldr	r1, [r4, #0]
 802cb86:	4630      	mov	r0, r6
 802cb88:	1a6d      	subs	r5, r5, r1
 802cb8a:	4629      	mov	r1, r5
 802cb8c:	f7ff ffa6 	bl	802cadc <sbrk_aligned>
 802cb90:	3001      	adds	r0, #1
 802cb92:	d03a      	beq.n	802cc0a <_malloc_r+0xea>
 802cb94:	6823      	ldr	r3, [r4, #0]
 802cb96:	442b      	add	r3, r5
 802cb98:	6023      	str	r3, [r4, #0]
 802cb9a:	f8d8 3000 	ldr.w	r3, [r8]
 802cb9e:	685a      	ldr	r2, [r3, #4]
 802cba0:	bb62      	cbnz	r2, 802cbfc <_malloc_r+0xdc>
 802cba2:	f8c8 7000 	str.w	r7, [r8]
 802cba6:	e00f      	b.n	802cbc8 <_malloc_r+0xa8>
 802cba8:	6822      	ldr	r2, [r4, #0]
 802cbaa:	1b52      	subs	r2, r2, r5
 802cbac:	d420      	bmi.n	802cbf0 <_malloc_r+0xd0>
 802cbae:	2a0b      	cmp	r2, #11
 802cbb0:	d917      	bls.n	802cbe2 <_malloc_r+0xc2>
 802cbb2:	1961      	adds	r1, r4, r5
 802cbb4:	42a3      	cmp	r3, r4
 802cbb6:	6025      	str	r5, [r4, #0]
 802cbb8:	bf18      	it	ne
 802cbba:	6059      	strne	r1, [r3, #4]
 802cbbc:	6863      	ldr	r3, [r4, #4]
 802cbbe:	bf08      	it	eq
 802cbc0:	f8c8 1000 	streq.w	r1, [r8]
 802cbc4:	5162      	str	r2, [r4, r5]
 802cbc6:	604b      	str	r3, [r1, #4]
 802cbc8:	4630      	mov	r0, r6
 802cbca:	f000 f82f 	bl	802cc2c <__malloc_unlock>
 802cbce:	f104 000b 	add.w	r0, r4, #11
 802cbd2:	1d23      	adds	r3, r4, #4
 802cbd4:	f020 0007 	bic.w	r0, r0, #7
 802cbd8:	1ac2      	subs	r2, r0, r3
 802cbda:	bf1c      	itt	ne
 802cbdc:	1a1b      	subne	r3, r3, r0
 802cbde:	50a3      	strne	r3, [r4, r2]
 802cbe0:	e7af      	b.n	802cb42 <_malloc_r+0x22>
 802cbe2:	6862      	ldr	r2, [r4, #4]
 802cbe4:	42a3      	cmp	r3, r4
 802cbe6:	bf0c      	ite	eq
 802cbe8:	f8c8 2000 	streq.w	r2, [r8]
 802cbec:	605a      	strne	r2, [r3, #4]
 802cbee:	e7eb      	b.n	802cbc8 <_malloc_r+0xa8>
 802cbf0:	4623      	mov	r3, r4
 802cbf2:	6864      	ldr	r4, [r4, #4]
 802cbf4:	e7ae      	b.n	802cb54 <_malloc_r+0x34>
 802cbf6:	463c      	mov	r4, r7
 802cbf8:	687f      	ldr	r7, [r7, #4]
 802cbfa:	e7b6      	b.n	802cb6a <_malloc_r+0x4a>
 802cbfc:	461a      	mov	r2, r3
 802cbfe:	685b      	ldr	r3, [r3, #4]
 802cc00:	42a3      	cmp	r3, r4
 802cc02:	d1fb      	bne.n	802cbfc <_malloc_r+0xdc>
 802cc04:	2300      	movs	r3, #0
 802cc06:	6053      	str	r3, [r2, #4]
 802cc08:	e7de      	b.n	802cbc8 <_malloc_r+0xa8>
 802cc0a:	230c      	movs	r3, #12
 802cc0c:	4630      	mov	r0, r6
 802cc0e:	6033      	str	r3, [r6, #0]
 802cc10:	f000 f80c 	bl	802cc2c <__malloc_unlock>
 802cc14:	e794      	b.n	802cb40 <_malloc_r+0x20>
 802cc16:	6005      	str	r5, [r0, #0]
 802cc18:	e7d6      	b.n	802cbc8 <_malloc_r+0xa8>
 802cc1a:	bf00      	nop
 802cc1c:	2005c4dc 	.word	0x2005c4dc

0802cc20 <__malloc_lock>:
 802cc20:	4801      	ldr	r0, [pc, #4]	@ (802cc28 <__malloc_lock+0x8>)
 802cc22:	f000 bb00 	b.w	802d226 <__retarget_lock_acquire_recursive>
 802cc26:	bf00      	nop
 802cc28:	2005c620 	.word	0x2005c620

0802cc2c <__malloc_unlock>:
 802cc2c:	4801      	ldr	r0, [pc, #4]	@ (802cc34 <__malloc_unlock+0x8>)
 802cc2e:	f000 bafb 	b.w	802d228 <__retarget_lock_release_recursive>
 802cc32:	bf00      	nop
 802cc34:	2005c620 	.word	0x2005c620

0802cc38 <__cxa_atexit>:
 802cc38:	b510      	push	{r4, lr}
 802cc3a:	4604      	mov	r4, r0
 802cc3c:	4804      	ldr	r0, [pc, #16]	@ (802cc50 <__cxa_atexit+0x18>)
 802cc3e:	4613      	mov	r3, r2
 802cc40:	b120      	cbz	r0, 802cc4c <__cxa_atexit+0x14>
 802cc42:	460a      	mov	r2, r1
 802cc44:	2002      	movs	r0, #2
 802cc46:	4621      	mov	r1, r4
 802cc48:	f000 fafc 	bl	802d244 <__register_exitproc>
 802cc4c:	bd10      	pop	{r4, pc}
 802cc4e:	bf00      	nop
 802cc50:	0802d245 	.word	0x0802d245

0802cc54 <std>:
 802cc54:	2300      	movs	r3, #0
 802cc56:	b510      	push	{r4, lr}
 802cc58:	4604      	mov	r4, r0
 802cc5a:	6083      	str	r3, [r0, #8]
 802cc5c:	8181      	strh	r1, [r0, #12]
 802cc5e:	4619      	mov	r1, r3
 802cc60:	6643      	str	r3, [r0, #100]	@ 0x64
 802cc62:	81c2      	strh	r2, [r0, #14]
 802cc64:	2208      	movs	r2, #8
 802cc66:	6183      	str	r3, [r0, #24]
 802cc68:	e9c0 3300 	strd	r3, r3, [r0]
 802cc6c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802cc70:	305c      	adds	r0, #92	@ 0x5c
 802cc72:	f000 fa0b 	bl	802d08c <memset>
 802cc76:	4b0d      	ldr	r3, [pc, #52]	@ (802ccac <std+0x58>)
 802cc78:	6224      	str	r4, [r4, #32]
 802cc7a:	6263      	str	r3, [r4, #36]	@ 0x24
 802cc7c:	4b0c      	ldr	r3, [pc, #48]	@ (802ccb0 <std+0x5c>)
 802cc7e:	62a3      	str	r3, [r4, #40]	@ 0x28
 802cc80:	4b0c      	ldr	r3, [pc, #48]	@ (802ccb4 <std+0x60>)
 802cc82:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802cc84:	4b0c      	ldr	r3, [pc, #48]	@ (802ccb8 <std+0x64>)
 802cc86:	6323      	str	r3, [r4, #48]	@ 0x30
 802cc88:	4b0c      	ldr	r3, [pc, #48]	@ (802ccbc <std+0x68>)
 802cc8a:	429c      	cmp	r4, r3
 802cc8c:	d006      	beq.n	802cc9c <std+0x48>
 802cc8e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802cc92:	4294      	cmp	r4, r2
 802cc94:	d002      	beq.n	802cc9c <std+0x48>
 802cc96:	33d0      	adds	r3, #208	@ 0xd0
 802cc98:	429c      	cmp	r4, r3
 802cc9a:	d105      	bne.n	802cca8 <std+0x54>
 802cc9c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802cca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802cca4:	f000 babe 	b.w	802d224 <__retarget_lock_init_recursive>
 802cca8:	bd10      	pop	{r4, pc}
 802ccaa:	bf00      	nop
 802ccac:	0802cedd 	.word	0x0802cedd
 802ccb0:	0802ceff 	.word	0x0802ceff
 802ccb4:	0802cf37 	.word	0x0802cf37
 802ccb8:	0802cf5b 	.word	0x0802cf5b
 802ccbc:	2005c4e0 	.word	0x2005c4e0

0802ccc0 <stdio_exit_handler>:
 802ccc0:	4a02      	ldr	r2, [pc, #8]	@ (802cccc <stdio_exit_handler+0xc>)
 802ccc2:	4903      	ldr	r1, [pc, #12]	@ (802ccd0 <stdio_exit_handler+0x10>)
 802ccc4:	4803      	ldr	r0, [pc, #12]	@ (802ccd4 <stdio_exit_handler+0x14>)
 802ccc6:	f000 b87b 	b.w	802cdc0 <_fwalk_sglue>
 802ccca:	bf00      	nop
 802cccc:	2000009c 	.word	0x2000009c
 802ccd0:	0802da41 	.word	0x0802da41
 802ccd4:	200000ac 	.word	0x200000ac

0802ccd8 <cleanup_stdio>:
 802ccd8:	6841      	ldr	r1, [r0, #4]
 802ccda:	4b0c      	ldr	r3, [pc, #48]	@ (802cd0c <cleanup_stdio+0x34>)
 802ccdc:	4299      	cmp	r1, r3
 802ccde:	b510      	push	{r4, lr}
 802cce0:	4604      	mov	r4, r0
 802cce2:	d001      	beq.n	802cce8 <cleanup_stdio+0x10>
 802cce4:	f000 feac 	bl	802da40 <_fflush_r>
 802cce8:	68a1      	ldr	r1, [r4, #8]
 802ccea:	4b09      	ldr	r3, [pc, #36]	@ (802cd10 <cleanup_stdio+0x38>)
 802ccec:	4299      	cmp	r1, r3
 802ccee:	d002      	beq.n	802ccf6 <cleanup_stdio+0x1e>
 802ccf0:	4620      	mov	r0, r4
 802ccf2:	f000 fea5 	bl	802da40 <_fflush_r>
 802ccf6:	68e1      	ldr	r1, [r4, #12]
 802ccf8:	4b06      	ldr	r3, [pc, #24]	@ (802cd14 <cleanup_stdio+0x3c>)
 802ccfa:	4299      	cmp	r1, r3
 802ccfc:	d004      	beq.n	802cd08 <cleanup_stdio+0x30>
 802ccfe:	4620      	mov	r0, r4
 802cd00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802cd04:	f000 be9c 	b.w	802da40 <_fflush_r>
 802cd08:	bd10      	pop	{r4, pc}
 802cd0a:	bf00      	nop
 802cd0c:	2005c4e0 	.word	0x2005c4e0
 802cd10:	2005c548 	.word	0x2005c548
 802cd14:	2005c5b0 	.word	0x2005c5b0

0802cd18 <global_stdio_init.part.0>:
 802cd18:	b510      	push	{r4, lr}
 802cd1a:	4b0b      	ldr	r3, [pc, #44]	@ (802cd48 <global_stdio_init.part.0+0x30>)
 802cd1c:	2104      	movs	r1, #4
 802cd1e:	4c0b      	ldr	r4, [pc, #44]	@ (802cd4c <global_stdio_init.part.0+0x34>)
 802cd20:	4a0b      	ldr	r2, [pc, #44]	@ (802cd50 <global_stdio_init.part.0+0x38>)
 802cd22:	4620      	mov	r0, r4
 802cd24:	601a      	str	r2, [r3, #0]
 802cd26:	2200      	movs	r2, #0
 802cd28:	f7ff ff94 	bl	802cc54 <std>
 802cd2c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802cd30:	2201      	movs	r2, #1
 802cd32:	2109      	movs	r1, #9
 802cd34:	f7ff ff8e 	bl	802cc54 <std>
 802cd38:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 802cd3c:	2202      	movs	r2, #2
 802cd3e:	2112      	movs	r1, #18
 802cd40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802cd44:	f7ff bf86 	b.w	802cc54 <std>
 802cd48:	2005c618 	.word	0x2005c618
 802cd4c:	2005c4e0 	.word	0x2005c4e0
 802cd50:	0802ccc1 	.word	0x0802ccc1

0802cd54 <__sfp_lock_acquire>:
 802cd54:	4801      	ldr	r0, [pc, #4]	@ (802cd5c <__sfp_lock_acquire+0x8>)
 802cd56:	f000 ba66 	b.w	802d226 <__retarget_lock_acquire_recursive>
 802cd5a:	bf00      	nop
 802cd5c:	2005c622 	.word	0x2005c622

0802cd60 <__sfp_lock_release>:
 802cd60:	4801      	ldr	r0, [pc, #4]	@ (802cd68 <__sfp_lock_release+0x8>)
 802cd62:	f000 ba61 	b.w	802d228 <__retarget_lock_release_recursive>
 802cd66:	bf00      	nop
 802cd68:	2005c622 	.word	0x2005c622

0802cd6c <__sinit>:
 802cd6c:	b510      	push	{r4, lr}
 802cd6e:	4604      	mov	r4, r0
 802cd70:	f7ff fff0 	bl	802cd54 <__sfp_lock_acquire>
 802cd74:	6a23      	ldr	r3, [r4, #32]
 802cd76:	b11b      	cbz	r3, 802cd80 <__sinit+0x14>
 802cd78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802cd7c:	f7ff bff0 	b.w	802cd60 <__sfp_lock_release>
 802cd80:	4b04      	ldr	r3, [pc, #16]	@ (802cd94 <__sinit+0x28>)
 802cd82:	6223      	str	r3, [r4, #32]
 802cd84:	4b04      	ldr	r3, [pc, #16]	@ (802cd98 <__sinit+0x2c>)
 802cd86:	681b      	ldr	r3, [r3, #0]
 802cd88:	2b00      	cmp	r3, #0
 802cd8a:	d1f5      	bne.n	802cd78 <__sinit+0xc>
 802cd8c:	f7ff ffc4 	bl	802cd18 <global_stdio_init.part.0>
 802cd90:	e7f2      	b.n	802cd78 <__sinit+0xc>
 802cd92:	bf00      	nop
 802cd94:	0802ccd9 	.word	0x0802ccd9
 802cd98:	2005c618 	.word	0x2005c618

0802cd9c <fiprintf>:
 802cd9c:	b40e      	push	{r1, r2, r3}
 802cd9e:	b503      	push	{r0, r1, lr}
 802cda0:	ab03      	add	r3, sp, #12
 802cda2:	4601      	mov	r1, r0
 802cda4:	4805      	ldr	r0, [pc, #20]	@ (802cdbc <fiprintf+0x20>)
 802cda6:	f853 2b04 	ldr.w	r2, [r3], #4
 802cdaa:	6800      	ldr	r0, [r0, #0]
 802cdac:	9301      	str	r3, [sp, #4]
 802cdae:	f000 fb1b 	bl	802d3e8 <_vfiprintf_r>
 802cdb2:	b002      	add	sp, #8
 802cdb4:	f85d eb04 	ldr.w	lr, [sp], #4
 802cdb8:	b003      	add	sp, #12
 802cdba:	4770      	bx	lr
 802cdbc:	200000a8 	.word	0x200000a8

0802cdc0 <_fwalk_sglue>:
 802cdc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802cdc4:	4607      	mov	r7, r0
 802cdc6:	4688      	mov	r8, r1
 802cdc8:	4614      	mov	r4, r2
 802cdca:	2600      	movs	r6, #0
 802cdcc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802cdd0:	f1b9 0901 	subs.w	r9, r9, #1
 802cdd4:	d505      	bpl.n	802cde2 <_fwalk_sglue+0x22>
 802cdd6:	6824      	ldr	r4, [r4, #0]
 802cdd8:	2c00      	cmp	r4, #0
 802cdda:	d1f7      	bne.n	802cdcc <_fwalk_sglue+0xc>
 802cddc:	4630      	mov	r0, r6
 802cdde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802cde2:	89ab      	ldrh	r3, [r5, #12]
 802cde4:	2b01      	cmp	r3, #1
 802cde6:	d907      	bls.n	802cdf8 <_fwalk_sglue+0x38>
 802cde8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802cdec:	3301      	adds	r3, #1
 802cdee:	d003      	beq.n	802cdf8 <_fwalk_sglue+0x38>
 802cdf0:	4629      	mov	r1, r5
 802cdf2:	4638      	mov	r0, r7
 802cdf4:	47c0      	blx	r8
 802cdf6:	4306      	orrs	r6, r0
 802cdf8:	3568      	adds	r5, #104	@ 0x68
 802cdfa:	e7e9      	b.n	802cdd0 <_fwalk_sglue+0x10>

0802cdfc <iprintf>:
 802cdfc:	b40f      	push	{r0, r1, r2, r3}
 802cdfe:	b507      	push	{r0, r1, r2, lr}
 802ce00:	4906      	ldr	r1, [pc, #24]	@ (802ce1c <iprintf+0x20>)
 802ce02:	ab04      	add	r3, sp, #16
 802ce04:	6808      	ldr	r0, [r1, #0]
 802ce06:	f853 2b04 	ldr.w	r2, [r3], #4
 802ce0a:	6881      	ldr	r1, [r0, #8]
 802ce0c:	9301      	str	r3, [sp, #4]
 802ce0e:	f000 faeb 	bl	802d3e8 <_vfiprintf_r>
 802ce12:	b003      	add	sp, #12
 802ce14:	f85d eb04 	ldr.w	lr, [sp], #4
 802ce18:	b004      	add	sp, #16
 802ce1a:	4770      	bx	lr
 802ce1c:	200000a8 	.word	0x200000a8

0802ce20 <_puts_r>:
 802ce20:	6a03      	ldr	r3, [r0, #32]
 802ce22:	b570      	push	{r4, r5, r6, lr}
 802ce24:	4605      	mov	r5, r0
 802ce26:	460e      	mov	r6, r1
 802ce28:	6884      	ldr	r4, [r0, #8]
 802ce2a:	b90b      	cbnz	r3, 802ce30 <_puts_r+0x10>
 802ce2c:	f7ff ff9e 	bl	802cd6c <__sinit>
 802ce30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802ce32:	07db      	lsls	r3, r3, #31
 802ce34:	d405      	bmi.n	802ce42 <_puts_r+0x22>
 802ce36:	89a3      	ldrh	r3, [r4, #12]
 802ce38:	0598      	lsls	r0, r3, #22
 802ce3a:	d402      	bmi.n	802ce42 <_puts_r+0x22>
 802ce3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802ce3e:	f000 f9f2 	bl	802d226 <__retarget_lock_acquire_recursive>
 802ce42:	89a3      	ldrh	r3, [r4, #12]
 802ce44:	0719      	lsls	r1, r3, #28
 802ce46:	d502      	bpl.n	802ce4e <_puts_r+0x2e>
 802ce48:	6923      	ldr	r3, [r4, #16]
 802ce4a:	2b00      	cmp	r3, #0
 802ce4c:	d135      	bne.n	802ceba <_puts_r+0x9a>
 802ce4e:	4621      	mov	r1, r4
 802ce50:	4628      	mov	r0, r5
 802ce52:	f000 f8c5 	bl	802cfe0 <__swsetup_r>
 802ce56:	b380      	cbz	r0, 802ceba <_puts_r+0x9a>
 802ce58:	f04f 35ff 	mov.w	r5, #4294967295
 802ce5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802ce5e:	07da      	lsls	r2, r3, #31
 802ce60:	d405      	bmi.n	802ce6e <_puts_r+0x4e>
 802ce62:	89a3      	ldrh	r3, [r4, #12]
 802ce64:	059b      	lsls	r3, r3, #22
 802ce66:	d402      	bmi.n	802ce6e <_puts_r+0x4e>
 802ce68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802ce6a:	f000 f9dd 	bl	802d228 <__retarget_lock_release_recursive>
 802ce6e:	4628      	mov	r0, r5
 802ce70:	bd70      	pop	{r4, r5, r6, pc}
 802ce72:	2b00      	cmp	r3, #0
 802ce74:	da04      	bge.n	802ce80 <_puts_r+0x60>
 802ce76:	69a2      	ldr	r2, [r4, #24]
 802ce78:	429a      	cmp	r2, r3
 802ce7a:	dc17      	bgt.n	802ceac <_puts_r+0x8c>
 802ce7c:	290a      	cmp	r1, #10
 802ce7e:	d015      	beq.n	802ceac <_puts_r+0x8c>
 802ce80:	6823      	ldr	r3, [r4, #0]
 802ce82:	1c5a      	adds	r2, r3, #1
 802ce84:	6022      	str	r2, [r4, #0]
 802ce86:	7019      	strb	r1, [r3, #0]
 802ce88:	68a3      	ldr	r3, [r4, #8]
 802ce8a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802ce8e:	3b01      	subs	r3, #1
 802ce90:	60a3      	str	r3, [r4, #8]
 802ce92:	2900      	cmp	r1, #0
 802ce94:	d1ed      	bne.n	802ce72 <_puts_r+0x52>
 802ce96:	2b00      	cmp	r3, #0
 802ce98:	da11      	bge.n	802cebe <_puts_r+0x9e>
 802ce9a:	4622      	mov	r2, r4
 802ce9c:	210a      	movs	r1, #10
 802ce9e:	4628      	mov	r0, r5
 802cea0:	f000 f85f 	bl	802cf62 <__swbuf_r>
 802cea4:	3001      	adds	r0, #1
 802cea6:	d0d7      	beq.n	802ce58 <_puts_r+0x38>
 802cea8:	250a      	movs	r5, #10
 802ceaa:	e7d7      	b.n	802ce5c <_puts_r+0x3c>
 802ceac:	4622      	mov	r2, r4
 802ceae:	4628      	mov	r0, r5
 802ceb0:	f000 f857 	bl	802cf62 <__swbuf_r>
 802ceb4:	3001      	adds	r0, #1
 802ceb6:	d1e7      	bne.n	802ce88 <_puts_r+0x68>
 802ceb8:	e7ce      	b.n	802ce58 <_puts_r+0x38>
 802ceba:	3e01      	subs	r6, #1
 802cebc:	e7e4      	b.n	802ce88 <_puts_r+0x68>
 802cebe:	6823      	ldr	r3, [r4, #0]
 802cec0:	1c5a      	adds	r2, r3, #1
 802cec2:	6022      	str	r2, [r4, #0]
 802cec4:	220a      	movs	r2, #10
 802cec6:	701a      	strb	r2, [r3, #0]
 802cec8:	e7ee      	b.n	802cea8 <_puts_r+0x88>
	...

0802cecc <puts>:
 802cecc:	4b02      	ldr	r3, [pc, #8]	@ (802ced8 <puts+0xc>)
 802cece:	4601      	mov	r1, r0
 802ced0:	6818      	ldr	r0, [r3, #0]
 802ced2:	f7ff bfa5 	b.w	802ce20 <_puts_r>
 802ced6:	bf00      	nop
 802ced8:	200000a8 	.word	0x200000a8

0802cedc <__sread>:
 802cedc:	b510      	push	{r4, lr}
 802cede:	460c      	mov	r4, r1
 802cee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802cee4:	f000 f92c 	bl	802d140 <_read_r>
 802cee8:	2800      	cmp	r0, #0
 802ceea:	bfab      	itete	ge
 802ceec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802ceee:	89a3      	ldrhlt	r3, [r4, #12]
 802cef0:	181b      	addge	r3, r3, r0
 802cef2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802cef6:	bfac      	ite	ge
 802cef8:	6563      	strge	r3, [r4, #84]	@ 0x54
 802cefa:	81a3      	strhlt	r3, [r4, #12]
 802cefc:	bd10      	pop	{r4, pc}

0802cefe <__swrite>:
 802cefe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802cf02:	461f      	mov	r7, r3
 802cf04:	898b      	ldrh	r3, [r1, #12]
 802cf06:	4605      	mov	r5, r0
 802cf08:	460c      	mov	r4, r1
 802cf0a:	05db      	lsls	r3, r3, #23
 802cf0c:	4616      	mov	r6, r2
 802cf0e:	d505      	bpl.n	802cf1c <__swrite+0x1e>
 802cf10:	2302      	movs	r3, #2
 802cf12:	2200      	movs	r2, #0
 802cf14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802cf18:	f000 f900 	bl	802d11c <_lseek_r>
 802cf1c:	89a3      	ldrh	r3, [r4, #12]
 802cf1e:	4632      	mov	r2, r6
 802cf20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802cf24:	4628      	mov	r0, r5
 802cf26:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802cf2a:	81a3      	strh	r3, [r4, #12]
 802cf2c:	463b      	mov	r3, r7
 802cf2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802cf32:	f000 b93b 	b.w	802d1ac <_write_r>

0802cf36 <__sseek>:
 802cf36:	b510      	push	{r4, lr}
 802cf38:	460c      	mov	r4, r1
 802cf3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802cf3e:	f000 f8ed 	bl	802d11c <_lseek_r>
 802cf42:	1c43      	adds	r3, r0, #1
 802cf44:	89a3      	ldrh	r3, [r4, #12]
 802cf46:	bf15      	itete	ne
 802cf48:	6560      	strne	r0, [r4, #84]	@ 0x54
 802cf4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802cf4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802cf52:	81a3      	strheq	r3, [r4, #12]
 802cf54:	bf18      	it	ne
 802cf56:	81a3      	strhne	r3, [r4, #12]
 802cf58:	bd10      	pop	{r4, pc}

0802cf5a <__sclose>:
 802cf5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802cf5e:	f000 b8cd 	b.w	802d0fc <_close_r>

0802cf62 <__swbuf_r>:
 802cf62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802cf64:	460e      	mov	r6, r1
 802cf66:	4614      	mov	r4, r2
 802cf68:	4605      	mov	r5, r0
 802cf6a:	b118      	cbz	r0, 802cf74 <__swbuf_r+0x12>
 802cf6c:	6a03      	ldr	r3, [r0, #32]
 802cf6e:	b90b      	cbnz	r3, 802cf74 <__swbuf_r+0x12>
 802cf70:	f7ff fefc 	bl	802cd6c <__sinit>
 802cf74:	69a3      	ldr	r3, [r4, #24]
 802cf76:	60a3      	str	r3, [r4, #8]
 802cf78:	89a3      	ldrh	r3, [r4, #12]
 802cf7a:	071a      	lsls	r2, r3, #28
 802cf7c:	d501      	bpl.n	802cf82 <__swbuf_r+0x20>
 802cf7e:	6923      	ldr	r3, [r4, #16]
 802cf80:	b943      	cbnz	r3, 802cf94 <__swbuf_r+0x32>
 802cf82:	4621      	mov	r1, r4
 802cf84:	4628      	mov	r0, r5
 802cf86:	f000 f82b 	bl	802cfe0 <__swsetup_r>
 802cf8a:	b118      	cbz	r0, 802cf94 <__swbuf_r+0x32>
 802cf8c:	f04f 37ff 	mov.w	r7, #4294967295
 802cf90:	4638      	mov	r0, r7
 802cf92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802cf94:	6823      	ldr	r3, [r4, #0]
 802cf96:	b2f6      	uxtb	r6, r6
 802cf98:	6922      	ldr	r2, [r4, #16]
 802cf9a:	4637      	mov	r7, r6
 802cf9c:	1a98      	subs	r0, r3, r2
 802cf9e:	6963      	ldr	r3, [r4, #20]
 802cfa0:	4283      	cmp	r3, r0
 802cfa2:	dc05      	bgt.n	802cfb0 <__swbuf_r+0x4e>
 802cfa4:	4621      	mov	r1, r4
 802cfa6:	4628      	mov	r0, r5
 802cfa8:	f000 fd4a 	bl	802da40 <_fflush_r>
 802cfac:	2800      	cmp	r0, #0
 802cfae:	d1ed      	bne.n	802cf8c <__swbuf_r+0x2a>
 802cfb0:	68a3      	ldr	r3, [r4, #8]
 802cfb2:	3b01      	subs	r3, #1
 802cfb4:	60a3      	str	r3, [r4, #8]
 802cfb6:	6823      	ldr	r3, [r4, #0]
 802cfb8:	1c5a      	adds	r2, r3, #1
 802cfba:	6022      	str	r2, [r4, #0]
 802cfbc:	701e      	strb	r6, [r3, #0]
 802cfbe:	1c43      	adds	r3, r0, #1
 802cfc0:	6962      	ldr	r2, [r4, #20]
 802cfc2:	429a      	cmp	r2, r3
 802cfc4:	d004      	beq.n	802cfd0 <__swbuf_r+0x6e>
 802cfc6:	89a3      	ldrh	r3, [r4, #12]
 802cfc8:	07db      	lsls	r3, r3, #31
 802cfca:	d5e1      	bpl.n	802cf90 <__swbuf_r+0x2e>
 802cfcc:	2e0a      	cmp	r6, #10
 802cfce:	d1df      	bne.n	802cf90 <__swbuf_r+0x2e>
 802cfd0:	4621      	mov	r1, r4
 802cfd2:	4628      	mov	r0, r5
 802cfd4:	f000 fd34 	bl	802da40 <_fflush_r>
 802cfd8:	2800      	cmp	r0, #0
 802cfda:	d0d9      	beq.n	802cf90 <__swbuf_r+0x2e>
 802cfdc:	e7d6      	b.n	802cf8c <__swbuf_r+0x2a>
	...

0802cfe0 <__swsetup_r>:
 802cfe0:	b538      	push	{r3, r4, r5, lr}
 802cfe2:	4b29      	ldr	r3, [pc, #164]	@ (802d088 <__swsetup_r+0xa8>)
 802cfe4:	4605      	mov	r5, r0
 802cfe6:	460c      	mov	r4, r1
 802cfe8:	6818      	ldr	r0, [r3, #0]
 802cfea:	b118      	cbz	r0, 802cff4 <__swsetup_r+0x14>
 802cfec:	6a03      	ldr	r3, [r0, #32]
 802cfee:	b90b      	cbnz	r3, 802cff4 <__swsetup_r+0x14>
 802cff0:	f7ff febc 	bl	802cd6c <__sinit>
 802cff4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802cff8:	0719      	lsls	r1, r3, #28
 802cffa:	d422      	bmi.n	802d042 <__swsetup_r+0x62>
 802cffc:	06da      	lsls	r2, r3, #27
 802cffe:	d407      	bmi.n	802d010 <__swsetup_r+0x30>
 802d000:	2209      	movs	r2, #9
 802d002:	602a      	str	r2, [r5, #0]
 802d004:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802d008:	f04f 30ff 	mov.w	r0, #4294967295
 802d00c:	81a3      	strh	r3, [r4, #12]
 802d00e:	e033      	b.n	802d078 <__swsetup_r+0x98>
 802d010:	0758      	lsls	r0, r3, #29
 802d012:	d512      	bpl.n	802d03a <__swsetup_r+0x5a>
 802d014:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802d016:	b141      	cbz	r1, 802d02a <__swsetup_r+0x4a>
 802d018:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802d01c:	4299      	cmp	r1, r3
 802d01e:	d002      	beq.n	802d026 <__swsetup_r+0x46>
 802d020:	4628      	mov	r0, r5
 802d022:	f000 f96d 	bl	802d300 <_free_r>
 802d026:	2300      	movs	r3, #0
 802d028:	6363      	str	r3, [r4, #52]	@ 0x34
 802d02a:	89a3      	ldrh	r3, [r4, #12]
 802d02c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802d030:	81a3      	strh	r3, [r4, #12]
 802d032:	2300      	movs	r3, #0
 802d034:	6063      	str	r3, [r4, #4]
 802d036:	6923      	ldr	r3, [r4, #16]
 802d038:	6023      	str	r3, [r4, #0]
 802d03a:	89a3      	ldrh	r3, [r4, #12]
 802d03c:	f043 0308 	orr.w	r3, r3, #8
 802d040:	81a3      	strh	r3, [r4, #12]
 802d042:	6923      	ldr	r3, [r4, #16]
 802d044:	b94b      	cbnz	r3, 802d05a <__swsetup_r+0x7a>
 802d046:	89a3      	ldrh	r3, [r4, #12]
 802d048:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802d04c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802d050:	d003      	beq.n	802d05a <__swsetup_r+0x7a>
 802d052:	4621      	mov	r1, r4
 802d054:	4628      	mov	r0, r5
 802d056:	f000 fd40 	bl	802dada <__smakebuf_r>
 802d05a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802d05e:	f013 0201 	ands.w	r2, r3, #1
 802d062:	d00a      	beq.n	802d07a <__swsetup_r+0x9a>
 802d064:	2200      	movs	r2, #0
 802d066:	60a2      	str	r2, [r4, #8]
 802d068:	6962      	ldr	r2, [r4, #20]
 802d06a:	4252      	negs	r2, r2
 802d06c:	61a2      	str	r2, [r4, #24]
 802d06e:	6922      	ldr	r2, [r4, #16]
 802d070:	b942      	cbnz	r2, 802d084 <__swsetup_r+0xa4>
 802d072:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802d076:	d1c5      	bne.n	802d004 <__swsetup_r+0x24>
 802d078:	bd38      	pop	{r3, r4, r5, pc}
 802d07a:	0799      	lsls	r1, r3, #30
 802d07c:	bf58      	it	pl
 802d07e:	6962      	ldrpl	r2, [r4, #20]
 802d080:	60a2      	str	r2, [r4, #8]
 802d082:	e7f4      	b.n	802d06e <__swsetup_r+0x8e>
 802d084:	2000      	movs	r0, #0
 802d086:	e7f7      	b.n	802d078 <__swsetup_r+0x98>
 802d088:	200000a8 	.word	0x200000a8

0802d08c <memset>:
 802d08c:	4402      	add	r2, r0
 802d08e:	4603      	mov	r3, r0
 802d090:	4293      	cmp	r3, r2
 802d092:	d100      	bne.n	802d096 <memset+0xa>
 802d094:	4770      	bx	lr
 802d096:	f803 1b01 	strb.w	r1, [r3], #1
 802d09a:	e7f9      	b.n	802d090 <memset+0x4>

0802d09c <_raise_r>:
 802d09c:	291f      	cmp	r1, #31
 802d09e:	b538      	push	{r3, r4, r5, lr}
 802d0a0:	4605      	mov	r5, r0
 802d0a2:	460c      	mov	r4, r1
 802d0a4:	d904      	bls.n	802d0b0 <_raise_r+0x14>
 802d0a6:	2316      	movs	r3, #22
 802d0a8:	6003      	str	r3, [r0, #0]
 802d0aa:	f04f 30ff 	mov.w	r0, #4294967295
 802d0ae:	bd38      	pop	{r3, r4, r5, pc}
 802d0b0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802d0b2:	b112      	cbz	r2, 802d0ba <_raise_r+0x1e>
 802d0b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802d0b8:	b94b      	cbnz	r3, 802d0ce <_raise_r+0x32>
 802d0ba:	4628      	mov	r0, r5
 802d0bc:	f000 f864 	bl	802d188 <_getpid_r>
 802d0c0:	4622      	mov	r2, r4
 802d0c2:	4601      	mov	r1, r0
 802d0c4:	4628      	mov	r0, r5
 802d0c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802d0ca:	f000 b84b 	b.w	802d164 <_kill_r>
 802d0ce:	2b01      	cmp	r3, #1
 802d0d0:	d00a      	beq.n	802d0e8 <_raise_r+0x4c>
 802d0d2:	1c59      	adds	r1, r3, #1
 802d0d4:	d103      	bne.n	802d0de <_raise_r+0x42>
 802d0d6:	2316      	movs	r3, #22
 802d0d8:	6003      	str	r3, [r0, #0]
 802d0da:	2001      	movs	r0, #1
 802d0dc:	e7e7      	b.n	802d0ae <_raise_r+0x12>
 802d0de:	2100      	movs	r1, #0
 802d0e0:	4620      	mov	r0, r4
 802d0e2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802d0e6:	4798      	blx	r3
 802d0e8:	2000      	movs	r0, #0
 802d0ea:	e7e0      	b.n	802d0ae <_raise_r+0x12>

0802d0ec <raise>:
 802d0ec:	4b02      	ldr	r3, [pc, #8]	@ (802d0f8 <raise+0xc>)
 802d0ee:	4601      	mov	r1, r0
 802d0f0:	6818      	ldr	r0, [r3, #0]
 802d0f2:	f7ff bfd3 	b.w	802d09c <_raise_r>
 802d0f6:	bf00      	nop
 802d0f8:	200000a8 	.word	0x200000a8

0802d0fc <_close_r>:
 802d0fc:	b538      	push	{r3, r4, r5, lr}
 802d0fe:	2300      	movs	r3, #0
 802d100:	4d05      	ldr	r5, [pc, #20]	@ (802d118 <_close_r+0x1c>)
 802d102:	4604      	mov	r4, r0
 802d104:	4608      	mov	r0, r1
 802d106:	602b      	str	r3, [r5, #0]
 802d108:	f7d4 fcf0 	bl	8001aec <_close>
 802d10c:	1c43      	adds	r3, r0, #1
 802d10e:	d102      	bne.n	802d116 <_close_r+0x1a>
 802d110:	682b      	ldr	r3, [r5, #0]
 802d112:	b103      	cbz	r3, 802d116 <_close_r+0x1a>
 802d114:	6023      	str	r3, [r4, #0]
 802d116:	bd38      	pop	{r3, r4, r5, pc}
 802d118:	2005c61c 	.word	0x2005c61c

0802d11c <_lseek_r>:
 802d11c:	b538      	push	{r3, r4, r5, lr}
 802d11e:	4604      	mov	r4, r0
 802d120:	4d06      	ldr	r5, [pc, #24]	@ (802d13c <_lseek_r+0x20>)
 802d122:	4608      	mov	r0, r1
 802d124:	4611      	mov	r1, r2
 802d126:	2200      	movs	r2, #0
 802d128:	602a      	str	r2, [r5, #0]
 802d12a:	461a      	mov	r2, r3
 802d12c:	f7d4 fd05 	bl	8001b3a <_lseek>
 802d130:	1c43      	adds	r3, r0, #1
 802d132:	d102      	bne.n	802d13a <_lseek_r+0x1e>
 802d134:	682b      	ldr	r3, [r5, #0]
 802d136:	b103      	cbz	r3, 802d13a <_lseek_r+0x1e>
 802d138:	6023      	str	r3, [r4, #0]
 802d13a:	bd38      	pop	{r3, r4, r5, pc}
 802d13c:	2005c61c 	.word	0x2005c61c

0802d140 <_read_r>:
 802d140:	b538      	push	{r3, r4, r5, lr}
 802d142:	4604      	mov	r4, r0
 802d144:	4d06      	ldr	r5, [pc, #24]	@ (802d160 <_read_r+0x20>)
 802d146:	4608      	mov	r0, r1
 802d148:	4611      	mov	r1, r2
 802d14a:	2200      	movs	r2, #0
 802d14c:	602a      	str	r2, [r5, #0]
 802d14e:	461a      	mov	r2, r3
 802d150:	f7d4 fc93 	bl	8001a7a <_read>
 802d154:	1c43      	adds	r3, r0, #1
 802d156:	d102      	bne.n	802d15e <_read_r+0x1e>
 802d158:	682b      	ldr	r3, [r5, #0]
 802d15a:	b103      	cbz	r3, 802d15e <_read_r+0x1e>
 802d15c:	6023      	str	r3, [r4, #0]
 802d15e:	bd38      	pop	{r3, r4, r5, pc}
 802d160:	2005c61c 	.word	0x2005c61c

0802d164 <_kill_r>:
 802d164:	b538      	push	{r3, r4, r5, lr}
 802d166:	2300      	movs	r3, #0
 802d168:	4d06      	ldr	r5, [pc, #24]	@ (802d184 <_kill_r+0x20>)
 802d16a:	4604      	mov	r4, r0
 802d16c:	4608      	mov	r0, r1
 802d16e:	4611      	mov	r1, r2
 802d170:	602b      	str	r3, [r5, #0]
 802d172:	f7d4 fc67 	bl	8001a44 <_kill>
 802d176:	1c43      	adds	r3, r0, #1
 802d178:	d102      	bne.n	802d180 <_kill_r+0x1c>
 802d17a:	682b      	ldr	r3, [r5, #0]
 802d17c:	b103      	cbz	r3, 802d180 <_kill_r+0x1c>
 802d17e:	6023      	str	r3, [r4, #0]
 802d180:	bd38      	pop	{r3, r4, r5, pc}
 802d182:	bf00      	nop
 802d184:	2005c61c 	.word	0x2005c61c

0802d188 <_getpid_r>:
 802d188:	f7d4 bc54 	b.w	8001a34 <_getpid>

0802d18c <_sbrk_r>:
 802d18c:	b538      	push	{r3, r4, r5, lr}
 802d18e:	2300      	movs	r3, #0
 802d190:	4d05      	ldr	r5, [pc, #20]	@ (802d1a8 <_sbrk_r+0x1c>)
 802d192:	4604      	mov	r4, r0
 802d194:	4608      	mov	r0, r1
 802d196:	602b      	str	r3, [r5, #0]
 802d198:	f7d4 fcdc 	bl	8001b54 <_sbrk>
 802d19c:	1c43      	adds	r3, r0, #1
 802d19e:	d102      	bne.n	802d1a6 <_sbrk_r+0x1a>
 802d1a0:	682b      	ldr	r3, [r5, #0]
 802d1a2:	b103      	cbz	r3, 802d1a6 <_sbrk_r+0x1a>
 802d1a4:	6023      	str	r3, [r4, #0]
 802d1a6:	bd38      	pop	{r3, r4, r5, pc}
 802d1a8:	2005c61c 	.word	0x2005c61c

0802d1ac <_write_r>:
 802d1ac:	b538      	push	{r3, r4, r5, lr}
 802d1ae:	4604      	mov	r4, r0
 802d1b0:	4d06      	ldr	r5, [pc, #24]	@ (802d1cc <_write_r+0x20>)
 802d1b2:	4608      	mov	r0, r1
 802d1b4:	4611      	mov	r1, r2
 802d1b6:	2200      	movs	r2, #0
 802d1b8:	602a      	str	r2, [r5, #0]
 802d1ba:	461a      	mov	r2, r3
 802d1bc:	f7d4 fc7a 	bl	8001ab4 <_write>
 802d1c0:	1c43      	adds	r3, r0, #1
 802d1c2:	d102      	bne.n	802d1ca <_write_r+0x1e>
 802d1c4:	682b      	ldr	r3, [r5, #0]
 802d1c6:	b103      	cbz	r3, 802d1ca <_write_r+0x1e>
 802d1c8:	6023      	str	r3, [r4, #0]
 802d1ca:	bd38      	pop	{r3, r4, r5, pc}
 802d1cc:	2005c61c 	.word	0x2005c61c

0802d1d0 <__errno>:
 802d1d0:	4b01      	ldr	r3, [pc, #4]	@ (802d1d8 <__errno+0x8>)
 802d1d2:	6818      	ldr	r0, [r3, #0]
 802d1d4:	4770      	bx	lr
 802d1d6:	bf00      	nop
 802d1d8:	200000a8 	.word	0x200000a8

0802d1dc <__libc_init_array>:
 802d1dc:	b570      	push	{r4, r5, r6, lr}
 802d1de:	4d0d      	ldr	r5, [pc, #52]	@ (802d214 <__libc_init_array+0x38>)
 802d1e0:	2600      	movs	r6, #0
 802d1e2:	4c0d      	ldr	r4, [pc, #52]	@ (802d218 <__libc_init_array+0x3c>)
 802d1e4:	1b64      	subs	r4, r4, r5
 802d1e6:	10a4      	asrs	r4, r4, #2
 802d1e8:	42a6      	cmp	r6, r4
 802d1ea:	d109      	bne.n	802d200 <__libc_init_array+0x24>
 802d1ec:	4d0b      	ldr	r5, [pc, #44]	@ (802d21c <__libc_init_array+0x40>)
 802d1ee:	2600      	movs	r6, #0
 802d1f0:	4c0b      	ldr	r4, [pc, #44]	@ (802d220 <__libc_init_array+0x44>)
 802d1f2:	f000 fcdf 	bl	802dbb4 <_init>
 802d1f6:	1b64      	subs	r4, r4, r5
 802d1f8:	10a4      	asrs	r4, r4, #2
 802d1fa:	42a6      	cmp	r6, r4
 802d1fc:	d105      	bne.n	802d20a <__libc_init_array+0x2e>
 802d1fe:	bd70      	pop	{r4, r5, r6, pc}
 802d200:	f855 3b04 	ldr.w	r3, [r5], #4
 802d204:	3601      	adds	r6, #1
 802d206:	4798      	blx	r3
 802d208:	e7ee      	b.n	802d1e8 <__libc_init_array+0xc>
 802d20a:	f855 3b04 	ldr.w	r3, [r5], #4
 802d20e:	3601      	adds	r6, #1
 802d210:	4798      	blx	r3
 802d212:	e7f2      	b.n	802d1fa <__libc_init_array+0x1e>
 802d214:	080311f8 	.word	0x080311f8
 802d218:	080311f8 	.word	0x080311f8
 802d21c:	080311f8 	.word	0x080311f8
 802d220:	0803120c 	.word	0x0803120c

0802d224 <__retarget_lock_init_recursive>:
 802d224:	4770      	bx	lr

0802d226 <__retarget_lock_acquire_recursive>:
 802d226:	4770      	bx	lr

0802d228 <__retarget_lock_release_recursive>:
 802d228:	4770      	bx	lr

0802d22a <memcpy>:
 802d22a:	440a      	add	r2, r1
 802d22c:	1e43      	subs	r3, r0, #1
 802d22e:	4291      	cmp	r1, r2
 802d230:	d100      	bne.n	802d234 <memcpy+0xa>
 802d232:	4770      	bx	lr
 802d234:	b510      	push	{r4, lr}
 802d236:	f811 4b01 	ldrb.w	r4, [r1], #1
 802d23a:	4291      	cmp	r1, r2
 802d23c:	f803 4f01 	strb.w	r4, [r3, #1]!
 802d240:	d1f9      	bne.n	802d236 <memcpy+0xc>
 802d242:	bd10      	pop	{r4, pc}

0802d244 <__register_exitproc>:
 802d244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802d248:	4d28      	ldr	r5, [pc, #160]	@ (802d2ec <__register_exitproc+0xa8>)
 802d24a:	4607      	mov	r7, r0
 802d24c:	4691      	mov	r9, r2
 802d24e:	460e      	mov	r6, r1
 802d250:	6828      	ldr	r0, [r5, #0]
 802d252:	4698      	mov	r8, r3
 802d254:	f7ff ffe7 	bl	802d226 <__retarget_lock_acquire_recursive>
 802d258:	4a25      	ldr	r2, [pc, #148]	@ (802d2f0 <__register_exitproc+0xac>)
 802d25a:	6814      	ldr	r4, [r2, #0]
 802d25c:	b93c      	cbnz	r4, 802d26e <__register_exitproc+0x2a>
 802d25e:	4b25      	ldr	r3, [pc, #148]	@ (802d2f4 <__register_exitproc+0xb0>)
 802d260:	6013      	str	r3, [r2, #0]
 802d262:	4a25      	ldr	r2, [pc, #148]	@ (802d2f8 <__register_exitproc+0xb4>)
 802d264:	b112      	cbz	r2, 802d26c <__register_exitproc+0x28>
 802d266:	6812      	ldr	r2, [r2, #0]
 802d268:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 802d26c:	4c21      	ldr	r4, [pc, #132]	@ (802d2f4 <__register_exitproc+0xb0>)
 802d26e:	6863      	ldr	r3, [r4, #4]
 802d270:	2b1f      	cmp	r3, #31
 802d272:	dd06      	ble.n	802d282 <__register_exitproc+0x3e>
 802d274:	6828      	ldr	r0, [r5, #0]
 802d276:	f7ff ffd7 	bl	802d228 <__retarget_lock_release_recursive>
 802d27a:	f04f 30ff 	mov.w	r0, #4294967295
 802d27e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802d282:	b33f      	cbz	r7, 802d2d4 <__register_exitproc+0x90>
 802d284:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 802d288:	b968      	cbnz	r0, 802d2a6 <__register_exitproc+0x62>
 802d28a:	4b1c      	ldr	r3, [pc, #112]	@ (802d2fc <__register_exitproc+0xb8>)
 802d28c:	2b00      	cmp	r3, #0
 802d28e:	d0f1      	beq.n	802d274 <__register_exitproc+0x30>
 802d290:	f44f 7084 	mov.w	r0, #264	@ 0x108
 802d294:	f7ff fc12 	bl	802cabc <malloc>
 802d298:	2800      	cmp	r0, #0
 802d29a:	d0eb      	beq.n	802d274 <__register_exitproc+0x30>
 802d29c:	2300      	movs	r3, #0
 802d29e:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 802d2a2:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 802d2a6:	6863      	ldr	r3, [r4, #4]
 802d2a8:	2201      	movs	r2, #1
 802d2aa:	2f02      	cmp	r7, #2
 802d2ac:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802d2b0:	fa02 f203 	lsl.w	r2, r2, r3
 802d2b4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802d2b8:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 802d2bc:	ea43 0302 	orr.w	r3, r3, r2
 802d2c0:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 802d2c4:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 802d2c8:	bf02      	ittt	eq
 802d2ca:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 802d2ce:	4313      	orreq	r3, r2
 802d2d0:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 802d2d4:	6863      	ldr	r3, [r4, #4]
 802d2d6:	6828      	ldr	r0, [r5, #0]
 802d2d8:	1c5a      	adds	r2, r3, #1
 802d2da:	3302      	adds	r3, #2
 802d2dc:	6062      	str	r2, [r4, #4]
 802d2de:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 802d2e2:	f7ff ffa1 	bl	802d228 <__retarget_lock_release_recursive>
 802d2e6:	2000      	movs	r0, #0
 802d2e8:	e7c9      	b.n	802d27e <__register_exitproc+0x3a>
 802d2ea:	bf00      	nop
 802d2ec:	200000f8 	.word	0x200000f8
 802d2f0:	2005c6b0 	.word	0x2005c6b0
 802d2f4:	2005c624 	.word	0x2005c624
 802d2f8:	0803039c 	.word	0x0803039c
 802d2fc:	0802cabd 	.word	0x0802cabd

0802d300 <_free_r>:
 802d300:	b538      	push	{r3, r4, r5, lr}
 802d302:	4605      	mov	r5, r0
 802d304:	2900      	cmp	r1, #0
 802d306:	d041      	beq.n	802d38c <_free_r+0x8c>
 802d308:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802d30c:	1f0c      	subs	r4, r1, #4
 802d30e:	2b00      	cmp	r3, #0
 802d310:	bfb8      	it	lt
 802d312:	18e4      	addlt	r4, r4, r3
 802d314:	f7ff fc84 	bl	802cc20 <__malloc_lock>
 802d318:	4a1d      	ldr	r2, [pc, #116]	@ (802d390 <_free_r+0x90>)
 802d31a:	6813      	ldr	r3, [r2, #0]
 802d31c:	b933      	cbnz	r3, 802d32c <_free_r+0x2c>
 802d31e:	6063      	str	r3, [r4, #4]
 802d320:	6014      	str	r4, [r2, #0]
 802d322:	4628      	mov	r0, r5
 802d324:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802d328:	f7ff bc80 	b.w	802cc2c <__malloc_unlock>
 802d32c:	42a3      	cmp	r3, r4
 802d32e:	d908      	bls.n	802d342 <_free_r+0x42>
 802d330:	6820      	ldr	r0, [r4, #0]
 802d332:	1821      	adds	r1, r4, r0
 802d334:	428b      	cmp	r3, r1
 802d336:	bf01      	itttt	eq
 802d338:	6819      	ldreq	r1, [r3, #0]
 802d33a:	685b      	ldreq	r3, [r3, #4]
 802d33c:	1809      	addeq	r1, r1, r0
 802d33e:	6021      	streq	r1, [r4, #0]
 802d340:	e7ed      	b.n	802d31e <_free_r+0x1e>
 802d342:	461a      	mov	r2, r3
 802d344:	685b      	ldr	r3, [r3, #4]
 802d346:	b10b      	cbz	r3, 802d34c <_free_r+0x4c>
 802d348:	42a3      	cmp	r3, r4
 802d34a:	d9fa      	bls.n	802d342 <_free_r+0x42>
 802d34c:	6811      	ldr	r1, [r2, #0]
 802d34e:	1850      	adds	r0, r2, r1
 802d350:	42a0      	cmp	r0, r4
 802d352:	d10b      	bne.n	802d36c <_free_r+0x6c>
 802d354:	6820      	ldr	r0, [r4, #0]
 802d356:	4401      	add	r1, r0
 802d358:	1850      	adds	r0, r2, r1
 802d35a:	6011      	str	r1, [r2, #0]
 802d35c:	4283      	cmp	r3, r0
 802d35e:	d1e0      	bne.n	802d322 <_free_r+0x22>
 802d360:	6818      	ldr	r0, [r3, #0]
 802d362:	685b      	ldr	r3, [r3, #4]
 802d364:	4408      	add	r0, r1
 802d366:	6053      	str	r3, [r2, #4]
 802d368:	6010      	str	r0, [r2, #0]
 802d36a:	e7da      	b.n	802d322 <_free_r+0x22>
 802d36c:	d902      	bls.n	802d374 <_free_r+0x74>
 802d36e:	230c      	movs	r3, #12
 802d370:	602b      	str	r3, [r5, #0]
 802d372:	e7d6      	b.n	802d322 <_free_r+0x22>
 802d374:	6820      	ldr	r0, [r4, #0]
 802d376:	1821      	adds	r1, r4, r0
 802d378:	428b      	cmp	r3, r1
 802d37a:	bf02      	ittt	eq
 802d37c:	6819      	ldreq	r1, [r3, #0]
 802d37e:	685b      	ldreq	r3, [r3, #4]
 802d380:	1809      	addeq	r1, r1, r0
 802d382:	6063      	str	r3, [r4, #4]
 802d384:	bf08      	it	eq
 802d386:	6021      	streq	r1, [r4, #0]
 802d388:	6054      	str	r4, [r2, #4]
 802d38a:	e7ca      	b.n	802d322 <_free_r+0x22>
 802d38c:	bd38      	pop	{r3, r4, r5, pc}
 802d38e:	bf00      	nop
 802d390:	2005c4dc 	.word	0x2005c4dc

0802d394 <__sfputc_r>:
 802d394:	6893      	ldr	r3, [r2, #8]
 802d396:	3b01      	subs	r3, #1
 802d398:	2b00      	cmp	r3, #0
 802d39a:	b410      	push	{r4}
 802d39c:	6093      	str	r3, [r2, #8]
 802d39e:	da08      	bge.n	802d3b2 <__sfputc_r+0x1e>
 802d3a0:	6994      	ldr	r4, [r2, #24]
 802d3a2:	42a3      	cmp	r3, r4
 802d3a4:	db01      	blt.n	802d3aa <__sfputc_r+0x16>
 802d3a6:	290a      	cmp	r1, #10
 802d3a8:	d103      	bne.n	802d3b2 <__sfputc_r+0x1e>
 802d3aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 802d3ae:	f7ff bdd8 	b.w	802cf62 <__swbuf_r>
 802d3b2:	6813      	ldr	r3, [r2, #0]
 802d3b4:	1c58      	adds	r0, r3, #1
 802d3b6:	6010      	str	r0, [r2, #0]
 802d3b8:	4608      	mov	r0, r1
 802d3ba:	7019      	strb	r1, [r3, #0]
 802d3bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 802d3c0:	4770      	bx	lr

0802d3c2 <__sfputs_r>:
 802d3c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d3c4:	4606      	mov	r6, r0
 802d3c6:	460f      	mov	r7, r1
 802d3c8:	4614      	mov	r4, r2
 802d3ca:	18d5      	adds	r5, r2, r3
 802d3cc:	42ac      	cmp	r4, r5
 802d3ce:	d101      	bne.n	802d3d4 <__sfputs_r+0x12>
 802d3d0:	2000      	movs	r0, #0
 802d3d2:	e007      	b.n	802d3e4 <__sfputs_r+0x22>
 802d3d4:	463a      	mov	r2, r7
 802d3d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 802d3da:	4630      	mov	r0, r6
 802d3dc:	f7ff ffda 	bl	802d394 <__sfputc_r>
 802d3e0:	1c43      	adds	r3, r0, #1
 802d3e2:	d1f3      	bne.n	802d3cc <__sfputs_r+0xa>
 802d3e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802d3e8 <_vfiprintf_r>:
 802d3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d3ec:	460d      	mov	r5, r1
 802d3ee:	b09d      	sub	sp, #116	@ 0x74
 802d3f0:	4614      	mov	r4, r2
 802d3f2:	4698      	mov	r8, r3
 802d3f4:	4606      	mov	r6, r0
 802d3f6:	b118      	cbz	r0, 802d400 <_vfiprintf_r+0x18>
 802d3f8:	6a03      	ldr	r3, [r0, #32]
 802d3fa:	b90b      	cbnz	r3, 802d400 <_vfiprintf_r+0x18>
 802d3fc:	f7ff fcb6 	bl	802cd6c <__sinit>
 802d400:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802d402:	07d9      	lsls	r1, r3, #31
 802d404:	d405      	bmi.n	802d412 <_vfiprintf_r+0x2a>
 802d406:	89ab      	ldrh	r3, [r5, #12]
 802d408:	059a      	lsls	r2, r3, #22
 802d40a:	d402      	bmi.n	802d412 <_vfiprintf_r+0x2a>
 802d40c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802d40e:	f7ff ff0a 	bl	802d226 <__retarget_lock_acquire_recursive>
 802d412:	89ab      	ldrh	r3, [r5, #12]
 802d414:	071b      	lsls	r3, r3, #28
 802d416:	d501      	bpl.n	802d41c <_vfiprintf_r+0x34>
 802d418:	692b      	ldr	r3, [r5, #16]
 802d41a:	b99b      	cbnz	r3, 802d444 <_vfiprintf_r+0x5c>
 802d41c:	4629      	mov	r1, r5
 802d41e:	4630      	mov	r0, r6
 802d420:	f7ff fdde 	bl	802cfe0 <__swsetup_r>
 802d424:	b170      	cbz	r0, 802d444 <_vfiprintf_r+0x5c>
 802d426:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802d428:	07dc      	lsls	r4, r3, #31
 802d42a:	d504      	bpl.n	802d436 <_vfiprintf_r+0x4e>
 802d42c:	f04f 30ff 	mov.w	r0, #4294967295
 802d430:	b01d      	add	sp, #116	@ 0x74
 802d432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d436:	89ab      	ldrh	r3, [r5, #12]
 802d438:	0598      	lsls	r0, r3, #22
 802d43a:	d4f7      	bmi.n	802d42c <_vfiprintf_r+0x44>
 802d43c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802d43e:	f7ff fef3 	bl	802d228 <__retarget_lock_release_recursive>
 802d442:	e7f3      	b.n	802d42c <_vfiprintf_r+0x44>
 802d444:	2300      	movs	r3, #0
 802d446:	f8cd 800c 	str.w	r8, [sp, #12]
 802d44a:	f04f 0901 	mov.w	r9, #1
 802d44e:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 802d604 <_vfiprintf_r+0x21c>
 802d452:	9309      	str	r3, [sp, #36]	@ 0x24
 802d454:	2320      	movs	r3, #32
 802d456:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802d45a:	2330      	movs	r3, #48	@ 0x30
 802d45c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802d460:	4623      	mov	r3, r4
 802d462:	469a      	mov	sl, r3
 802d464:	f813 2b01 	ldrb.w	r2, [r3], #1
 802d468:	b10a      	cbz	r2, 802d46e <_vfiprintf_r+0x86>
 802d46a:	2a25      	cmp	r2, #37	@ 0x25
 802d46c:	d1f9      	bne.n	802d462 <_vfiprintf_r+0x7a>
 802d46e:	ebba 0b04 	subs.w	fp, sl, r4
 802d472:	d00b      	beq.n	802d48c <_vfiprintf_r+0xa4>
 802d474:	465b      	mov	r3, fp
 802d476:	4622      	mov	r2, r4
 802d478:	4629      	mov	r1, r5
 802d47a:	4630      	mov	r0, r6
 802d47c:	f7ff ffa1 	bl	802d3c2 <__sfputs_r>
 802d480:	3001      	adds	r0, #1
 802d482:	f000 80a7 	beq.w	802d5d4 <_vfiprintf_r+0x1ec>
 802d486:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802d488:	445a      	add	r2, fp
 802d48a:	9209      	str	r2, [sp, #36]	@ 0x24
 802d48c:	f89a 3000 	ldrb.w	r3, [sl]
 802d490:	2b00      	cmp	r3, #0
 802d492:	f000 809f 	beq.w	802d5d4 <_vfiprintf_r+0x1ec>
 802d496:	2300      	movs	r3, #0
 802d498:	f04f 32ff 	mov.w	r2, #4294967295
 802d49c:	f10a 0a01 	add.w	sl, sl, #1
 802d4a0:	9304      	str	r3, [sp, #16]
 802d4a2:	9307      	str	r3, [sp, #28]
 802d4a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802d4a8:	931a      	str	r3, [sp, #104]	@ 0x68
 802d4aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802d4ae:	4654      	mov	r4, sl
 802d4b0:	2205      	movs	r2, #5
 802d4b2:	4854      	ldr	r0, [pc, #336]	@ (802d604 <_vfiprintf_r+0x21c>)
 802d4b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 802d4b8:	f000 fb6e 	bl	802db98 <memchr>
 802d4bc:	9a04      	ldr	r2, [sp, #16]
 802d4be:	b9d8      	cbnz	r0, 802d4f8 <_vfiprintf_r+0x110>
 802d4c0:	06d1      	lsls	r1, r2, #27
 802d4c2:	bf44      	itt	mi
 802d4c4:	2320      	movmi	r3, #32
 802d4c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802d4ca:	0713      	lsls	r3, r2, #28
 802d4cc:	bf44      	itt	mi
 802d4ce:	232b      	movmi	r3, #43	@ 0x2b
 802d4d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802d4d4:	f89a 3000 	ldrb.w	r3, [sl]
 802d4d8:	2b2a      	cmp	r3, #42	@ 0x2a
 802d4da:	d015      	beq.n	802d508 <_vfiprintf_r+0x120>
 802d4dc:	9a07      	ldr	r2, [sp, #28]
 802d4de:	4654      	mov	r4, sl
 802d4e0:	2000      	movs	r0, #0
 802d4e2:	f04f 0c0a 	mov.w	ip, #10
 802d4e6:	4621      	mov	r1, r4
 802d4e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 802d4ec:	3b30      	subs	r3, #48	@ 0x30
 802d4ee:	2b09      	cmp	r3, #9
 802d4f0:	d94b      	bls.n	802d58a <_vfiprintf_r+0x1a2>
 802d4f2:	b1b0      	cbz	r0, 802d522 <_vfiprintf_r+0x13a>
 802d4f4:	9207      	str	r2, [sp, #28]
 802d4f6:	e014      	b.n	802d522 <_vfiprintf_r+0x13a>
 802d4f8:	eba0 0308 	sub.w	r3, r0, r8
 802d4fc:	46a2      	mov	sl, r4
 802d4fe:	fa09 f303 	lsl.w	r3, r9, r3
 802d502:	4313      	orrs	r3, r2
 802d504:	9304      	str	r3, [sp, #16]
 802d506:	e7d2      	b.n	802d4ae <_vfiprintf_r+0xc6>
 802d508:	9b03      	ldr	r3, [sp, #12]
 802d50a:	1d19      	adds	r1, r3, #4
 802d50c:	681b      	ldr	r3, [r3, #0]
 802d50e:	2b00      	cmp	r3, #0
 802d510:	9103      	str	r1, [sp, #12]
 802d512:	bfbb      	ittet	lt
 802d514:	425b      	neglt	r3, r3
 802d516:	f042 0202 	orrlt.w	r2, r2, #2
 802d51a:	9307      	strge	r3, [sp, #28]
 802d51c:	9307      	strlt	r3, [sp, #28]
 802d51e:	bfb8      	it	lt
 802d520:	9204      	strlt	r2, [sp, #16]
 802d522:	7823      	ldrb	r3, [r4, #0]
 802d524:	2b2e      	cmp	r3, #46	@ 0x2e
 802d526:	d10a      	bne.n	802d53e <_vfiprintf_r+0x156>
 802d528:	7863      	ldrb	r3, [r4, #1]
 802d52a:	2b2a      	cmp	r3, #42	@ 0x2a
 802d52c:	d132      	bne.n	802d594 <_vfiprintf_r+0x1ac>
 802d52e:	9b03      	ldr	r3, [sp, #12]
 802d530:	3402      	adds	r4, #2
 802d532:	1d1a      	adds	r2, r3, #4
 802d534:	681b      	ldr	r3, [r3, #0]
 802d536:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802d53a:	9203      	str	r2, [sp, #12]
 802d53c:	9305      	str	r3, [sp, #20]
 802d53e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 802d614 <_vfiprintf_r+0x22c>
 802d542:	2203      	movs	r2, #3
 802d544:	7821      	ldrb	r1, [r4, #0]
 802d546:	4650      	mov	r0, sl
 802d548:	f000 fb26 	bl	802db98 <memchr>
 802d54c:	b138      	cbz	r0, 802d55e <_vfiprintf_r+0x176>
 802d54e:	eba0 000a 	sub.w	r0, r0, sl
 802d552:	2240      	movs	r2, #64	@ 0x40
 802d554:	9b04      	ldr	r3, [sp, #16]
 802d556:	3401      	adds	r4, #1
 802d558:	4082      	lsls	r2, r0
 802d55a:	4313      	orrs	r3, r2
 802d55c:	9304      	str	r3, [sp, #16]
 802d55e:	f814 1b01 	ldrb.w	r1, [r4], #1
 802d562:	2206      	movs	r2, #6
 802d564:	4828      	ldr	r0, [pc, #160]	@ (802d608 <_vfiprintf_r+0x220>)
 802d566:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802d56a:	f000 fb15 	bl	802db98 <memchr>
 802d56e:	2800      	cmp	r0, #0
 802d570:	d03f      	beq.n	802d5f2 <_vfiprintf_r+0x20a>
 802d572:	4b26      	ldr	r3, [pc, #152]	@ (802d60c <_vfiprintf_r+0x224>)
 802d574:	bb1b      	cbnz	r3, 802d5be <_vfiprintf_r+0x1d6>
 802d576:	9b03      	ldr	r3, [sp, #12]
 802d578:	3307      	adds	r3, #7
 802d57a:	f023 0307 	bic.w	r3, r3, #7
 802d57e:	3308      	adds	r3, #8
 802d580:	9303      	str	r3, [sp, #12]
 802d582:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802d584:	443b      	add	r3, r7
 802d586:	9309      	str	r3, [sp, #36]	@ 0x24
 802d588:	e76a      	b.n	802d460 <_vfiprintf_r+0x78>
 802d58a:	fb0c 3202 	mla	r2, ip, r2, r3
 802d58e:	460c      	mov	r4, r1
 802d590:	2001      	movs	r0, #1
 802d592:	e7a8      	b.n	802d4e6 <_vfiprintf_r+0xfe>
 802d594:	2300      	movs	r3, #0
 802d596:	3401      	adds	r4, #1
 802d598:	f04f 0c0a 	mov.w	ip, #10
 802d59c:	4619      	mov	r1, r3
 802d59e:	9305      	str	r3, [sp, #20]
 802d5a0:	4620      	mov	r0, r4
 802d5a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 802d5a6:	3a30      	subs	r2, #48	@ 0x30
 802d5a8:	2a09      	cmp	r2, #9
 802d5aa:	d903      	bls.n	802d5b4 <_vfiprintf_r+0x1cc>
 802d5ac:	2b00      	cmp	r3, #0
 802d5ae:	d0c6      	beq.n	802d53e <_vfiprintf_r+0x156>
 802d5b0:	9105      	str	r1, [sp, #20]
 802d5b2:	e7c4      	b.n	802d53e <_vfiprintf_r+0x156>
 802d5b4:	fb0c 2101 	mla	r1, ip, r1, r2
 802d5b8:	4604      	mov	r4, r0
 802d5ba:	2301      	movs	r3, #1
 802d5bc:	e7f0      	b.n	802d5a0 <_vfiprintf_r+0x1b8>
 802d5be:	ab03      	add	r3, sp, #12
 802d5c0:	462a      	mov	r2, r5
 802d5c2:	a904      	add	r1, sp, #16
 802d5c4:	4630      	mov	r0, r6
 802d5c6:	9300      	str	r3, [sp, #0]
 802d5c8:	4b11      	ldr	r3, [pc, #68]	@ (802d610 <_vfiprintf_r+0x228>)
 802d5ca:	f3af 8000 	nop.w
 802d5ce:	4607      	mov	r7, r0
 802d5d0:	1c78      	adds	r0, r7, #1
 802d5d2:	d1d6      	bne.n	802d582 <_vfiprintf_r+0x19a>
 802d5d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802d5d6:	07d9      	lsls	r1, r3, #31
 802d5d8:	d405      	bmi.n	802d5e6 <_vfiprintf_r+0x1fe>
 802d5da:	89ab      	ldrh	r3, [r5, #12]
 802d5dc:	059a      	lsls	r2, r3, #22
 802d5de:	d402      	bmi.n	802d5e6 <_vfiprintf_r+0x1fe>
 802d5e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802d5e2:	f7ff fe21 	bl	802d228 <__retarget_lock_release_recursive>
 802d5e6:	89ab      	ldrh	r3, [r5, #12]
 802d5e8:	065b      	lsls	r3, r3, #25
 802d5ea:	f53f af1f 	bmi.w	802d42c <_vfiprintf_r+0x44>
 802d5ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802d5f0:	e71e      	b.n	802d430 <_vfiprintf_r+0x48>
 802d5f2:	ab03      	add	r3, sp, #12
 802d5f4:	462a      	mov	r2, r5
 802d5f6:	a904      	add	r1, sp, #16
 802d5f8:	4630      	mov	r0, r6
 802d5fa:	9300      	str	r3, [sp, #0]
 802d5fc:	4b04      	ldr	r3, [pc, #16]	@ (802d610 <_vfiprintf_r+0x228>)
 802d5fe:	f000 f87d 	bl	802d6fc <_printf_i>
 802d602:	e7e4      	b.n	802d5ce <_vfiprintf_r+0x1e6>
 802d604:	08030368 	.word	0x08030368
 802d608:	08030372 	.word	0x08030372
 802d60c:	00000000 	.word	0x00000000
 802d610:	0802d3c3 	.word	0x0802d3c3
 802d614:	0803036e 	.word	0x0803036e

0802d618 <_printf_common>:
 802d618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802d61c:	4616      	mov	r6, r2
 802d61e:	4698      	mov	r8, r3
 802d620:	688a      	ldr	r2, [r1, #8]
 802d622:	4607      	mov	r7, r0
 802d624:	690b      	ldr	r3, [r1, #16]
 802d626:	460c      	mov	r4, r1
 802d628:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802d62c:	4293      	cmp	r3, r2
 802d62e:	bfb8      	it	lt
 802d630:	4613      	movlt	r3, r2
 802d632:	6033      	str	r3, [r6, #0]
 802d634:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 802d638:	b10a      	cbz	r2, 802d63e <_printf_common+0x26>
 802d63a:	3301      	adds	r3, #1
 802d63c:	6033      	str	r3, [r6, #0]
 802d63e:	6823      	ldr	r3, [r4, #0]
 802d640:	0699      	lsls	r1, r3, #26
 802d642:	bf42      	ittt	mi
 802d644:	6833      	ldrmi	r3, [r6, #0]
 802d646:	3302      	addmi	r3, #2
 802d648:	6033      	strmi	r3, [r6, #0]
 802d64a:	6825      	ldr	r5, [r4, #0]
 802d64c:	f015 0506 	ands.w	r5, r5, #6
 802d650:	d106      	bne.n	802d660 <_printf_common+0x48>
 802d652:	f104 0a19 	add.w	sl, r4, #25
 802d656:	68e3      	ldr	r3, [r4, #12]
 802d658:	6832      	ldr	r2, [r6, #0]
 802d65a:	1a9b      	subs	r3, r3, r2
 802d65c:	42ab      	cmp	r3, r5
 802d65e:	dc2b      	bgt.n	802d6b8 <_printf_common+0xa0>
 802d660:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 802d664:	6822      	ldr	r2, [r4, #0]
 802d666:	3b00      	subs	r3, #0
 802d668:	bf18      	it	ne
 802d66a:	2301      	movne	r3, #1
 802d66c:	0692      	lsls	r2, r2, #26
 802d66e:	d430      	bmi.n	802d6d2 <_printf_common+0xba>
 802d670:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 802d674:	4641      	mov	r1, r8
 802d676:	4638      	mov	r0, r7
 802d678:	47c8      	blx	r9
 802d67a:	3001      	adds	r0, #1
 802d67c:	d023      	beq.n	802d6c6 <_printf_common+0xae>
 802d67e:	6823      	ldr	r3, [r4, #0]
 802d680:	341a      	adds	r4, #26
 802d682:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 802d686:	f003 0306 	and.w	r3, r3, #6
 802d68a:	2b04      	cmp	r3, #4
 802d68c:	bf0a      	itet	eq
 802d68e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 802d692:	2500      	movne	r5, #0
 802d694:	6833      	ldreq	r3, [r6, #0]
 802d696:	f04f 0600 	mov.w	r6, #0
 802d69a:	bf08      	it	eq
 802d69c:	1aed      	subeq	r5, r5, r3
 802d69e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 802d6a2:	bf08      	it	eq
 802d6a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802d6a8:	4293      	cmp	r3, r2
 802d6aa:	bfc4      	itt	gt
 802d6ac:	1a9b      	subgt	r3, r3, r2
 802d6ae:	18ed      	addgt	r5, r5, r3
 802d6b0:	42b5      	cmp	r5, r6
 802d6b2:	d11a      	bne.n	802d6ea <_printf_common+0xd2>
 802d6b4:	2000      	movs	r0, #0
 802d6b6:	e008      	b.n	802d6ca <_printf_common+0xb2>
 802d6b8:	2301      	movs	r3, #1
 802d6ba:	4652      	mov	r2, sl
 802d6bc:	4641      	mov	r1, r8
 802d6be:	4638      	mov	r0, r7
 802d6c0:	47c8      	blx	r9
 802d6c2:	3001      	adds	r0, #1
 802d6c4:	d103      	bne.n	802d6ce <_printf_common+0xb6>
 802d6c6:	f04f 30ff 	mov.w	r0, #4294967295
 802d6ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802d6ce:	3501      	adds	r5, #1
 802d6d0:	e7c1      	b.n	802d656 <_printf_common+0x3e>
 802d6d2:	18e1      	adds	r1, r4, r3
 802d6d4:	1c5a      	adds	r2, r3, #1
 802d6d6:	2030      	movs	r0, #48	@ 0x30
 802d6d8:	3302      	adds	r3, #2
 802d6da:	4422      	add	r2, r4
 802d6dc:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802d6e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 802d6e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 802d6e8:	e7c2      	b.n	802d670 <_printf_common+0x58>
 802d6ea:	2301      	movs	r3, #1
 802d6ec:	4622      	mov	r2, r4
 802d6ee:	4641      	mov	r1, r8
 802d6f0:	4638      	mov	r0, r7
 802d6f2:	47c8      	blx	r9
 802d6f4:	3001      	adds	r0, #1
 802d6f6:	d0e6      	beq.n	802d6c6 <_printf_common+0xae>
 802d6f8:	3601      	adds	r6, #1
 802d6fa:	e7d9      	b.n	802d6b0 <_printf_common+0x98>

0802d6fc <_printf_i>:
 802d6fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802d700:	7e0f      	ldrb	r7, [r1, #24]
 802d702:	4691      	mov	r9, r2
 802d704:	4680      	mov	r8, r0
 802d706:	460c      	mov	r4, r1
 802d708:	2f78      	cmp	r7, #120	@ 0x78
 802d70a:	469a      	mov	sl, r3
 802d70c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802d70e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802d712:	d807      	bhi.n	802d724 <_printf_i+0x28>
 802d714:	2f62      	cmp	r7, #98	@ 0x62
 802d716:	d80a      	bhi.n	802d72e <_printf_i+0x32>
 802d718:	2f00      	cmp	r7, #0
 802d71a:	f000 80d1 	beq.w	802d8c0 <_printf_i+0x1c4>
 802d71e:	2f58      	cmp	r7, #88	@ 0x58
 802d720:	f000 80b8 	beq.w	802d894 <_printf_i+0x198>
 802d724:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802d728:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 802d72c:	e03a      	b.n	802d7a4 <_printf_i+0xa8>
 802d72e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802d732:	2b15      	cmp	r3, #21
 802d734:	d8f6      	bhi.n	802d724 <_printf_i+0x28>
 802d736:	a101      	add	r1, pc, #4	@ (adr r1, 802d73c <_printf_i+0x40>)
 802d738:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802d73c:	0802d795 	.word	0x0802d795
 802d740:	0802d7a9 	.word	0x0802d7a9
 802d744:	0802d725 	.word	0x0802d725
 802d748:	0802d725 	.word	0x0802d725
 802d74c:	0802d725 	.word	0x0802d725
 802d750:	0802d725 	.word	0x0802d725
 802d754:	0802d7a9 	.word	0x0802d7a9
 802d758:	0802d725 	.word	0x0802d725
 802d75c:	0802d725 	.word	0x0802d725
 802d760:	0802d725 	.word	0x0802d725
 802d764:	0802d725 	.word	0x0802d725
 802d768:	0802d8a7 	.word	0x0802d8a7
 802d76c:	0802d7d3 	.word	0x0802d7d3
 802d770:	0802d861 	.word	0x0802d861
 802d774:	0802d725 	.word	0x0802d725
 802d778:	0802d725 	.word	0x0802d725
 802d77c:	0802d8c9 	.word	0x0802d8c9
 802d780:	0802d725 	.word	0x0802d725
 802d784:	0802d7d3 	.word	0x0802d7d3
 802d788:	0802d725 	.word	0x0802d725
 802d78c:	0802d725 	.word	0x0802d725
 802d790:	0802d869 	.word	0x0802d869
 802d794:	6833      	ldr	r3, [r6, #0]
 802d796:	1d1a      	adds	r2, r3, #4
 802d798:	681b      	ldr	r3, [r3, #0]
 802d79a:	6032      	str	r2, [r6, #0]
 802d79c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802d7a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 802d7a4:	2301      	movs	r3, #1
 802d7a6:	e09c      	b.n	802d8e2 <_printf_i+0x1e6>
 802d7a8:	6833      	ldr	r3, [r6, #0]
 802d7aa:	6820      	ldr	r0, [r4, #0]
 802d7ac:	1d19      	adds	r1, r3, #4
 802d7ae:	6031      	str	r1, [r6, #0]
 802d7b0:	0606      	lsls	r6, r0, #24
 802d7b2:	d501      	bpl.n	802d7b8 <_printf_i+0xbc>
 802d7b4:	681d      	ldr	r5, [r3, #0]
 802d7b6:	e003      	b.n	802d7c0 <_printf_i+0xc4>
 802d7b8:	0645      	lsls	r5, r0, #25
 802d7ba:	d5fb      	bpl.n	802d7b4 <_printf_i+0xb8>
 802d7bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 802d7c0:	2d00      	cmp	r5, #0
 802d7c2:	da03      	bge.n	802d7cc <_printf_i+0xd0>
 802d7c4:	232d      	movs	r3, #45	@ 0x2d
 802d7c6:	426d      	negs	r5, r5
 802d7c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802d7cc:	4858      	ldr	r0, [pc, #352]	@ (802d930 <_printf_i+0x234>)
 802d7ce:	230a      	movs	r3, #10
 802d7d0:	e011      	b.n	802d7f6 <_printf_i+0xfa>
 802d7d2:	6821      	ldr	r1, [r4, #0]
 802d7d4:	6833      	ldr	r3, [r6, #0]
 802d7d6:	0608      	lsls	r0, r1, #24
 802d7d8:	f853 5b04 	ldr.w	r5, [r3], #4
 802d7dc:	d402      	bmi.n	802d7e4 <_printf_i+0xe8>
 802d7de:	0649      	lsls	r1, r1, #25
 802d7e0:	bf48      	it	mi
 802d7e2:	b2ad      	uxthmi	r5, r5
 802d7e4:	2f6f      	cmp	r7, #111	@ 0x6f
 802d7e6:	6033      	str	r3, [r6, #0]
 802d7e8:	4851      	ldr	r0, [pc, #324]	@ (802d930 <_printf_i+0x234>)
 802d7ea:	bf14      	ite	ne
 802d7ec:	230a      	movne	r3, #10
 802d7ee:	2308      	moveq	r3, #8
 802d7f0:	2100      	movs	r1, #0
 802d7f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802d7f6:	6866      	ldr	r6, [r4, #4]
 802d7f8:	2e00      	cmp	r6, #0
 802d7fa:	60a6      	str	r6, [r4, #8]
 802d7fc:	db05      	blt.n	802d80a <_printf_i+0x10e>
 802d7fe:	6821      	ldr	r1, [r4, #0]
 802d800:	432e      	orrs	r6, r5
 802d802:	f021 0104 	bic.w	r1, r1, #4
 802d806:	6021      	str	r1, [r4, #0]
 802d808:	d04b      	beq.n	802d8a2 <_printf_i+0x1a6>
 802d80a:	4616      	mov	r6, r2
 802d80c:	fbb5 f1f3 	udiv	r1, r5, r3
 802d810:	fb03 5711 	mls	r7, r3, r1, r5
 802d814:	5dc7      	ldrb	r7, [r0, r7]
 802d816:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802d81a:	462f      	mov	r7, r5
 802d81c:	460d      	mov	r5, r1
 802d81e:	42bb      	cmp	r3, r7
 802d820:	d9f4      	bls.n	802d80c <_printf_i+0x110>
 802d822:	2b08      	cmp	r3, #8
 802d824:	d10b      	bne.n	802d83e <_printf_i+0x142>
 802d826:	6823      	ldr	r3, [r4, #0]
 802d828:	07df      	lsls	r7, r3, #31
 802d82a:	d508      	bpl.n	802d83e <_printf_i+0x142>
 802d82c:	6923      	ldr	r3, [r4, #16]
 802d82e:	6861      	ldr	r1, [r4, #4]
 802d830:	4299      	cmp	r1, r3
 802d832:	bfde      	ittt	le
 802d834:	2330      	movle	r3, #48	@ 0x30
 802d836:	f806 3c01 	strble.w	r3, [r6, #-1]
 802d83a:	f106 36ff 	addle.w	r6, r6, #4294967295
 802d83e:	1b92      	subs	r2, r2, r6
 802d840:	6122      	str	r2, [r4, #16]
 802d842:	464b      	mov	r3, r9
 802d844:	aa03      	add	r2, sp, #12
 802d846:	4621      	mov	r1, r4
 802d848:	4640      	mov	r0, r8
 802d84a:	f8cd a000 	str.w	sl, [sp]
 802d84e:	f7ff fee3 	bl	802d618 <_printf_common>
 802d852:	3001      	adds	r0, #1
 802d854:	d14a      	bne.n	802d8ec <_printf_i+0x1f0>
 802d856:	f04f 30ff 	mov.w	r0, #4294967295
 802d85a:	b004      	add	sp, #16
 802d85c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802d860:	6823      	ldr	r3, [r4, #0]
 802d862:	f043 0320 	orr.w	r3, r3, #32
 802d866:	6023      	str	r3, [r4, #0]
 802d868:	2778      	movs	r7, #120	@ 0x78
 802d86a:	4832      	ldr	r0, [pc, #200]	@ (802d934 <_printf_i+0x238>)
 802d86c:	6823      	ldr	r3, [r4, #0]
 802d86e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802d872:	061f      	lsls	r7, r3, #24
 802d874:	6831      	ldr	r1, [r6, #0]
 802d876:	f851 5b04 	ldr.w	r5, [r1], #4
 802d87a:	d402      	bmi.n	802d882 <_printf_i+0x186>
 802d87c:	065f      	lsls	r7, r3, #25
 802d87e:	bf48      	it	mi
 802d880:	b2ad      	uxthmi	r5, r5
 802d882:	6031      	str	r1, [r6, #0]
 802d884:	07d9      	lsls	r1, r3, #31
 802d886:	bf44      	itt	mi
 802d888:	f043 0320 	orrmi.w	r3, r3, #32
 802d88c:	6023      	strmi	r3, [r4, #0]
 802d88e:	b11d      	cbz	r5, 802d898 <_printf_i+0x19c>
 802d890:	2310      	movs	r3, #16
 802d892:	e7ad      	b.n	802d7f0 <_printf_i+0xf4>
 802d894:	4826      	ldr	r0, [pc, #152]	@ (802d930 <_printf_i+0x234>)
 802d896:	e7e9      	b.n	802d86c <_printf_i+0x170>
 802d898:	6823      	ldr	r3, [r4, #0]
 802d89a:	f023 0320 	bic.w	r3, r3, #32
 802d89e:	6023      	str	r3, [r4, #0]
 802d8a0:	e7f6      	b.n	802d890 <_printf_i+0x194>
 802d8a2:	4616      	mov	r6, r2
 802d8a4:	e7bd      	b.n	802d822 <_printf_i+0x126>
 802d8a6:	6833      	ldr	r3, [r6, #0]
 802d8a8:	6825      	ldr	r5, [r4, #0]
 802d8aa:	1d18      	adds	r0, r3, #4
 802d8ac:	6961      	ldr	r1, [r4, #20]
 802d8ae:	6030      	str	r0, [r6, #0]
 802d8b0:	062e      	lsls	r6, r5, #24
 802d8b2:	681b      	ldr	r3, [r3, #0]
 802d8b4:	d501      	bpl.n	802d8ba <_printf_i+0x1be>
 802d8b6:	6019      	str	r1, [r3, #0]
 802d8b8:	e002      	b.n	802d8c0 <_printf_i+0x1c4>
 802d8ba:	0668      	lsls	r0, r5, #25
 802d8bc:	d5fb      	bpl.n	802d8b6 <_printf_i+0x1ba>
 802d8be:	8019      	strh	r1, [r3, #0]
 802d8c0:	2300      	movs	r3, #0
 802d8c2:	4616      	mov	r6, r2
 802d8c4:	6123      	str	r3, [r4, #16]
 802d8c6:	e7bc      	b.n	802d842 <_printf_i+0x146>
 802d8c8:	6833      	ldr	r3, [r6, #0]
 802d8ca:	2100      	movs	r1, #0
 802d8cc:	1d1a      	adds	r2, r3, #4
 802d8ce:	6032      	str	r2, [r6, #0]
 802d8d0:	681e      	ldr	r6, [r3, #0]
 802d8d2:	6862      	ldr	r2, [r4, #4]
 802d8d4:	4630      	mov	r0, r6
 802d8d6:	f000 f95f 	bl	802db98 <memchr>
 802d8da:	b108      	cbz	r0, 802d8e0 <_printf_i+0x1e4>
 802d8dc:	1b80      	subs	r0, r0, r6
 802d8de:	6060      	str	r0, [r4, #4]
 802d8e0:	6863      	ldr	r3, [r4, #4]
 802d8e2:	6123      	str	r3, [r4, #16]
 802d8e4:	2300      	movs	r3, #0
 802d8e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802d8ea:	e7aa      	b.n	802d842 <_printf_i+0x146>
 802d8ec:	6923      	ldr	r3, [r4, #16]
 802d8ee:	4632      	mov	r2, r6
 802d8f0:	4649      	mov	r1, r9
 802d8f2:	4640      	mov	r0, r8
 802d8f4:	47d0      	blx	sl
 802d8f6:	3001      	adds	r0, #1
 802d8f8:	d0ad      	beq.n	802d856 <_printf_i+0x15a>
 802d8fa:	6823      	ldr	r3, [r4, #0]
 802d8fc:	079b      	lsls	r3, r3, #30
 802d8fe:	d413      	bmi.n	802d928 <_printf_i+0x22c>
 802d900:	68e0      	ldr	r0, [r4, #12]
 802d902:	9b03      	ldr	r3, [sp, #12]
 802d904:	4298      	cmp	r0, r3
 802d906:	bfb8      	it	lt
 802d908:	4618      	movlt	r0, r3
 802d90a:	e7a6      	b.n	802d85a <_printf_i+0x15e>
 802d90c:	2301      	movs	r3, #1
 802d90e:	4632      	mov	r2, r6
 802d910:	4649      	mov	r1, r9
 802d912:	4640      	mov	r0, r8
 802d914:	47d0      	blx	sl
 802d916:	3001      	adds	r0, #1
 802d918:	d09d      	beq.n	802d856 <_printf_i+0x15a>
 802d91a:	3501      	adds	r5, #1
 802d91c:	68e3      	ldr	r3, [r4, #12]
 802d91e:	9903      	ldr	r1, [sp, #12]
 802d920:	1a5b      	subs	r3, r3, r1
 802d922:	42ab      	cmp	r3, r5
 802d924:	dcf2      	bgt.n	802d90c <_printf_i+0x210>
 802d926:	e7eb      	b.n	802d900 <_printf_i+0x204>
 802d928:	2500      	movs	r5, #0
 802d92a:	f104 0619 	add.w	r6, r4, #25
 802d92e:	e7f5      	b.n	802d91c <_printf_i+0x220>
 802d930:	08030379 	.word	0x08030379
 802d934:	0803038a 	.word	0x0803038a

0802d938 <__sflush_r>:
 802d938:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802d93c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802d940:	0716      	lsls	r6, r2, #28
 802d942:	4605      	mov	r5, r0
 802d944:	460c      	mov	r4, r1
 802d946:	d454      	bmi.n	802d9f2 <__sflush_r+0xba>
 802d948:	684b      	ldr	r3, [r1, #4]
 802d94a:	2b00      	cmp	r3, #0
 802d94c:	dc02      	bgt.n	802d954 <__sflush_r+0x1c>
 802d94e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802d950:	2b00      	cmp	r3, #0
 802d952:	dd48      	ble.n	802d9e6 <__sflush_r+0xae>
 802d954:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802d956:	2e00      	cmp	r6, #0
 802d958:	d045      	beq.n	802d9e6 <__sflush_r+0xae>
 802d95a:	2300      	movs	r3, #0
 802d95c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 802d960:	682f      	ldr	r7, [r5, #0]
 802d962:	6a21      	ldr	r1, [r4, #32]
 802d964:	602b      	str	r3, [r5, #0]
 802d966:	d030      	beq.n	802d9ca <__sflush_r+0x92>
 802d968:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802d96a:	89a3      	ldrh	r3, [r4, #12]
 802d96c:	0759      	lsls	r1, r3, #29
 802d96e:	d505      	bpl.n	802d97c <__sflush_r+0x44>
 802d970:	6863      	ldr	r3, [r4, #4]
 802d972:	1ad2      	subs	r2, r2, r3
 802d974:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802d976:	b10b      	cbz	r3, 802d97c <__sflush_r+0x44>
 802d978:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802d97a:	1ad2      	subs	r2, r2, r3
 802d97c:	2300      	movs	r3, #0
 802d97e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802d980:	6a21      	ldr	r1, [r4, #32]
 802d982:	4628      	mov	r0, r5
 802d984:	47b0      	blx	r6
 802d986:	1c43      	adds	r3, r0, #1
 802d988:	89a3      	ldrh	r3, [r4, #12]
 802d98a:	d106      	bne.n	802d99a <__sflush_r+0x62>
 802d98c:	6829      	ldr	r1, [r5, #0]
 802d98e:	291d      	cmp	r1, #29
 802d990:	d82b      	bhi.n	802d9ea <__sflush_r+0xb2>
 802d992:	4a2a      	ldr	r2, [pc, #168]	@ (802da3c <__sflush_r+0x104>)
 802d994:	40ca      	lsrs	r2, r1
 802d996:	07d6      	lsls	r6, r2, #31
 802d998:	d527      	bpl.n	802d9ea <__sflush_r+0xb2>
 802d99a:	2200      	movs	r2, #0
 802d99c:	04d9      	lsls	r1, r3, #19
 802d99e:	6062      	str	r2, [r4, #4]
 802d9a0:	6922      	ldr	r2, [r4, #16]
 802d9a2:	6022      	str	r2, [r4, #0]
 802d9a4:	d504      	bpl.n	802d9b0 <__sflush_r+0x78>
 802d9a6:	1c42      	adds	r2, r0, #1
 802d9a8:	d101      	bne.n	802d9ae <__sflush_r+0x76>
 802d9aa:	682b      	ldr	r3, [r5, #0]
 802d9ac:	b903      	cbnz	r3, 802d9b0 <__sflush_r+0x78>
 802d9ae:	6560      	str	r0, [r4, #84]	@ 0x54
 802d9b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802d9b2:	602f      	str	r7, [r5, #0]
 802d9b4:	b1b9      	cbz	r1, 802d9e6 <__sflush_r+0xae>
 802d9b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802d9ba:	4299      	cmp	r1, r3
 802d9bc:	d002      	beq.n	802d9c4 <__sflush_r+0x8c>
 802d9be:	4628      	mov	r0, r5
 802d9c0:	f7ff fc9e 	bl	802d300 <_free_r>
 802d9c4:	2300      	movs	r3, #0
 802d9c6:	6363      	str	r3, [r4, #52]	@ 0x34
 802d9c8:	e00d      	b.n	802d9e6 <__sflush_r+0xae>
 802d9ca:	2301      	movs	r3, #1
 802d9cc:	4628      	mov	r0, r5
 802d9ce:	47b0      	blx	r6
 802d9d0:	4602      	mov	r2, r0
 802d9d2:	1c50      	adds	r0, r2, #1
 802d9d4:	d1c9      	bne.n	802d96a <__sflush_r+0x32>
 802d9d6:	682b      	ldr	r3, [r5, #0]
 802d9d8:	2b00      	cmp	r3, #0
 802d9da:	d0c6      	beq.n	802d96a <__sflush_r+0x32>
 802d9dc:	2b1d      	cmp	r3, #29
 802d9de:	d001      	beq.n	802d9e4 <__sflush_r+0xac>
 802d9e0:	2b16      	cmp	r3, #22
 802d9e2:	d11d      	bne.n	802da20 <__sflush_r+0xe8>
 802d9e4:	602f      	str	r7, [r5, #0]
 802d9e6:	2000      	movs	r0, #0
 802d9e8:	e021      	b.n	802da2e <__sflush_r+0xf6>
 802d9ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802d9ee:	b21b      	sxth	r3, r3
 802d9f0:	e01a      	b.n	802da28 <__sflush_r+0xf0>
 802d9f2:	690f      	ldr	r7, [r1, #16]
 802d9f4:	2f00      	cmp	r7, #0
 802d9f6:	d0f6      	beq.n	802d9e6 <__sflush_r+0xae>
 802d9f8:	0793      	lsls	r3, r2, #30
 802d9fa:	680e      	ldr	r6, [r1, #0]
 802d9fc:	600f      	str	r7, [r1, #0]
 802d9fe:	bf0c      	ite	eq
 802da00:	694b      	ldreq	r3, [r1, #20]
 802da02:	2300      	movne	r3, #0
 802da04:	eba6 0807 	sub.w	r8, r6, r7
 802da08:	608b      	str	r3, [r1, #8]
 802da0a:	f1b8 0f00 	cmp.w	r8, #0
 802da0e:	ddea      	ble.n	802d9e6 <__sflush_r+0xae>
 802da10:	4643      	mov	r3, r8
 802da12:	463a      	mov	r2, r7
 802da14:	6a21      	ldr	r1, [r4, #32]
 802da16:	4628      	mov	r0, r5
 802da18:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802da1a:	47b0      	blx	r6
 802da1c:	2800      	cmp	r0, #0
 802da1e:	dc08      	bgt.n	802da32 <__sflush_r+0xfa>
 802da20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802da24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802da28:	f04f 30ff 	mov.w	r0, #4294967295
 802da2c:	81a3      	strh	r3, [r4, #12]
 802da2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802da32:	4407      	add	r7, r0
 802da34:	eba8 0800 	sub.w	r8, r8, r0
 802da38:	e7e7      	b.n	802da0a <__sflush_r+0xd2>
 802da3a:	bf00      	nop
 802da3c:	20400001 	.word	0x20400001

0802da40 <_fflush_r>:
 802da40:	b538      	push	{r3, r4, r5, lr}
 802da42:	690b      	ldr	r3, [r1, #16]
 802da44:	4605      	mov	r5, r0
 802da46:	460c      	mov	r4, r1
 802da48:	b913      	cbnz	r3, 802da50 <_fflush_r+0x10>
 802da4a:	2500      	movs	r5, #0
 802da4c:	4628      	mov	r0, r5
 802da4e:	bd38      	pop	{r3, r4, r5, pc}
 802da50:	b118      	cbz	r0, 802da5a <_fflush_r+0x1a>
 802da52:	6a03      	ldr	r3, [r0, #32]
 802da54:	b90b      	cbnz	r3, 802da5a <_fflush_r+0x1a>
 802da56:	f7ff f989 	bl	802cd6c <__sinit>
 802da5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802da5e:	2b00      	cmp	r3, #0
 802da60:	d0f3      	beq.n	802da4a <_fflush_r+0xa>
 802da62:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802da64:	07d0      	lsls	r0, r2, #31
 802da66:	d404      	bmi.n	802da72 <_fflush_r+0x32>
 802da68:	0599      	lsls	r1, r3, #22
 802da6a:	d402      	bmi.n	802da72 <_fflush_r+0x32>
 802da6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802da6e:	f7ff fbda 	bl	802d226 <__retarget_lock_acquire_recursive>
 802da72:	4628      	mov	r0, r5
 802da74:	4621      	mov	r1, r4
 802da76:	f7ff ff5f 	bl	802d938 <__sflush_r>
 802da7a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802da7c:	4605      	mov	r5, r0
 802da7e:	07da      	lsls	r2, r3, #31
 802da80:	d4e4      	bmi.n	802da4c <_fflush_r+0xc>
 802da82:	89a3      	ldrh	r3, [r4, #12]
 802da84:	059b      	lsls	r3, r3, #22
 802da86:	d4e1      	bmi.n	802da4c <_fflush_r+0xc>
 802da88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802da8a:	f7ff fbcd 	bl	802d228 <__retarget_lock_release_recursive>
 802da8e:	e7dd      	b.n	802da4c <_fflush_r+0xc>

0802da90 <__swhatbuf_r>:
 802da90:	b570      	push	{r4, r5, r6, lr}
 802da92:	460c      	mov	r4, r1
 802da94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802da98:	b096      	sub	sp, #88	@ 0x58
 802da9a:	4615      	mov	r5, r2
 802da9c:	2900      	cmp	r1, #0
 802da9e:	461e      	mov	r6, r3
 802daa0:	da0c      	bge.n	802dabc <__swhatbuf_r+0x2c>
 802daa2:	89a3      	ldrh	r3, [r4, #12]
 802daa4:	2100      	movs	r1, #0
 802daa6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802daaa:	bf14      	ite	ne
 802daac:	2340      	movne	r3, #64	@ 0x40
 802daae:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802dab2:	2000      	movs	r0, #0
 802dab4:	6031      	str	r1, [r6, #0]
 802dab6:	602b      	str	r3, [r5, #0]
 802dab8:	b016      	add	sp, #88	@ 0x58
 802daba:	bd70      	pop	{r4, r5, r6, pc}
 802dabc:	466a      	mov	r2, sp
 802dabe:	f000 f849 	bl	802db54 <_fstat_r>
 802dac2:	2800      	cmp	r0, #0
 802dac4:	dbed      	blt.n	802daa2 <__swhatbuf_r+0x12>
 802dac6:	9901      	ldr	r1, [sp, #4]
 802dac8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802dacc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802dad0:	4259      	negs	r1, r3
 802dad2:	4159      	adcs	r1, r3
 802dad4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802dad8:	e7eb      	b.n	802dab2 <__swhatbuf_r+0x22>

0802dada <__smakebuf_r>:
 802dada:	898b      	ldrh	r3, [r1, #12]
 802dadc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802dade:	079d      	lsls	r5, r3, #30
 802dae0:	4606      	mov	r6, r0
 802dae2:	460c      	mov	r4, r1
 802dae4:	d507      	bpl.n	802daf6 <__smakebuf_r+0x1c>
 802dae6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 802daea:	6023      	str	r3, [r4, #0]
 802daec:	6123      	str	r3, [r4, #16]
 802daee:	2301      	movs	r3, #1
 802daf0:	6163      	str	r3, [r4, #20]
 802daf2:	b003      	add	sp, #12
 802daf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802daf6:	ab01      	add	r3, sp, #4
 802daf8:	466a      	mov	r2, sp
 802dafa:	f7ff ffc9 	bl	802da90 <__swhatbuf_r>
 802dafe:	9f00      	ldr	r7, [sp, #0]
 802db00:	4605      	mov	r5, r0
 802db02:	4630      	mov	r0, r6
 802db04:	4639      	mov	r1, r7
 802db06:	f7ff f80b 	bl	802cb20 <_malloc_r>
 802db0a:	b948      	cbnz	r0, 802db20 <__smakebuf_r+0x46>
 802db0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802db10:	059a      	lsls	r2, r3, #22
 802db12:	d4ee      	bmi.n	802daf2 <__smakebuf_r+0x18>
 802db14:	f023 0303 	bic.w	r3, r3, #3
 802db18:	f043 0302 	orr.w	r3, r3, #2
 802db1c:	81a3      	strh	r3, [r4, #12]
 802db1e:	e7e2      	b.n	802dae6 <__smakebuf_r+0xc>
 802db20:	89a3      	ldrh	r3, [r4, #12]
 802db22:	6020      	str	r0, [r4, #0]
 802db24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802db28:	81a3      	strh	r3, [r4, #12]
 802db2a:	9b01      	ldr	r3, [sp, #4]
 802db2c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802db30:	b15b      	cbz	r3, 802db4a <__smakebuf_r+0x70>
 802db32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802db36:	4630      	mov	r0, r6
 802db38:	f000 f81e 	bl	802db78 <_isatty_r>
 802db3c:	b128      	cbz	r0, 802db4a <__smakebuf_r+0x70>
 802db3e:	89a3      	ldrh	r3, [r4, #12]
 802db40:	f023 0303 	bic.w	r3, r3, #3
 802db44:	f043 0301 	orr.w	r3, r3, #1
 802db48:	81a3      	strh	r3, [r4, #12]
 802db4a:	89a3      	ldrh	r3, [r4, #12]
 802db4c:	431d      	orrs	r5, r3
 802db4e:	81a5      	strh	r5, [r4, #12]
 802db50:	e7cf      	b.n	802daf2 <__smakebuf_r+0x18>
	...

0802db54 <_fstat_r>:
 802db54:	b538      	push	{r3, r4, r5, lr}
 802db56:	2300      	movs	r3, #0
 802db58:	4d06      	ldr	r5, [pc, #24]	@ (802db74 <_fstat_r+0x20>)
 802db5a:	4604      	mov	r4, r0
 802db5c:	4608      	mov	r0, r1
 802db5e:	4611      	mov	r1, r2
 802db60:	602b      	str	r3, [r5, #0]
 802db62:	f7d3 ffcf 	bl	8001b04 <_fstat>
 802db66:	1c43      	adds	r3, r0, #1
 802db68:	d102      	bne.n	802db70 <_fstat_r+0x1c>
 802db6a:	682b      	ldr	r3, [r5, #0]
 802db6c:	b103      	cbz	r3, 802db70 <_fstat_r+0x1c>
 802db6e:	6023      	str	r3, [r4, #0]
 802db70:	bd38      	pop	{r3, r4, r5, pc}
 802db72:	bf00      	nop
 802db74:	2005c61c 	.word	0x2005c61c

0802db78 <_isatty_r>:
 802db78:	b538      	push	{r3, r4, r5, lr}
 802db7a:	2300      	movs	r3, #0
 802db7c:	4d05      	ldr	r5, [pc, #20]	@ (802db94 <_isatty_r+0x1c>)
 802db7e:	4604      	mov	r4, r0
 802db80:	4608      	mov	r0, r1
 802db82:	602b      	str	r3, [r5, #0]
 802db84:	f7d3 ffce 	bl	8001b24 <_isatty>
 802db88:	1c43      	adds	r3, r0, #1
 802db8a:	d102      	bne.n	802db92 <_isatty_r+0x1a>
 802db8c:	682b      	ldr	r3, [r5, #0]
 802db8e:	b103      	cbz	r3, 802db92 <_isatty_r+0x1a>
 802db90:	6023      	str	r3, [r4, #0]
 802db92:	bd38      	pop	{r3, r4, r5, pc}
 802db94:	2005c61c 	.word	0x2005c61c

0802db98 <memchr>:
 802db98:	b2c9      	uxtb	r1, r1
 802db9a:	4603      	mov	r3, r0
 802db9c:	4402      	add	r2, r0
 802db9e:	b510      	push	{r4, lr}
 802dba0:	4293      	cmp	r3, r2
 802dba2:	4618      	mov	r0, r3
 802dba4:	d101      	bne.n	802dbaa <memchr+0x12>
 802dba6:	2000      	movs	r0, #0
 802dba8:	e003      	b.n	802dbb2 <memchr+0x1a>
 802dbaa:	7804      	ldrb	r4, [r0, #0]
 802dbac:	3301      	adds	r3, #1
 802dbae:	428c      	cmp	r4, r1
 802dbb0:	d1f6      	bne.n	802dba0 <memchr+0x8>
 802dbb2:	bd10      	pop	{r4, pc}

0802dbb4 <_init>:
 802dbb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802dbb6:	bf00      	nop
 802dbb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802dbba:	bc08      	pop	{r3}
 802dbbc:	469e      	mov	lr, r3
 802dbbe:	4770      	bx	lr

0802dbc0 <_fini>:
 802dbc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802dbc2:	bf00      	nop
 802dbc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802dbc6:	bc08      	pop	{r3}
 802dbc8:	469e      	mov	lr, r3
 802dbca:	4770      	bx	lr
